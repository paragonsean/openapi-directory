/*
 * Giphy API
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetGifsById200Response;
import org.openapitools.client.model.RandomGif200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StickersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StickersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StickersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for randomSticker
     * @param tag Filters results by specified tag. (optional)
     * @param rating Filters results by specified rating. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call randomStickerCall(String tag, String rating, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stickers/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call randomStickerValidateBeforeCall(String tag, String rating, final ApiCallback _callback) throws ApiException {
        return randomStickerCall(tag, rating, _callback);

    }

    /**
     * Random Sticker
     * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
     * @param tag Filters results by specified tag. (optional)
     * @param rating Filters results by specified rating. (optional)
     * @return RandomGif200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public RandomGif200Response randomSticker(String tag, String rating) throws ApiException {
        ApiResponse<RandomGif200Response> localVarResp = randomStickerWithHttpInfo(tag, rating);
        return localVarResp.getData();
    }

    /**
     * Random Sticker
     * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
     * @param tag Filters results by specified tag. (optional)
     * @param rating Filters results by specified rating. (optional)
     * @return ApiResponse&lt;RandomGif200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RandomGif200Response> randomStickerWithHttpInfo(String tag, String rating) throws ApiException {
        okhttp3.Call localVarCall = randomStickerValidateBeforeCall(tag, rating, null);
        Type localVarReturnType = new TypeToken<RandomGif200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Random Sticker (asynchronously)
     * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
     * @param tag Filters results by specified tag. (optional)
     * @param rating Filters results by specified rating. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call randomStickerAsync(String tag, String rating, final ApiCallback<RandomGif200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = randomStickerValidateBeforeCall(tag, rating, _callback);
        Type localVarReturnType = new TypeToken<RandomGif200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchStickers
     * @param q Search query term or prhase. (required)
     * @param limit The maximum number of records to return. (optional, default to 25)
     * @param offset An optional results offset. (optional, default to 0)
     * @param rating Filters results by specified rating. (optional)
     * @param lang Specify default language for regional content; use a 2-letter ISO 639-1 language code. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchStickersCall(String q, Integer limit, Integer offset, String rating, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stickers/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchStickersValidateBeforeCall(String q, Integer limit, Integer offset, String rating, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchStickers(Async)");
        }

        return searchStickersCall(q, limit, offset, rating, lang, _callback);

    }

    /**
     * Search Stickers
     * Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs. 
     * @param q Search query term or prhase. (required)
     * @param limit The maximum number of records to return. (optional, default to 25)
     * @param offset An optional results offset. (optional, default to 0)
     * @param rating Filters results by specified rating. (optional)
     * @param lang Specify default language for regional content; use a 2-letter ISO 639-1 language code. (optional)
     * @return GetGifsById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetGifsById200Response searchStickers(String q, Integer limit, Integer offset, String rating, String lang) throws ApiException {
        ApiResponse<GetGifsById200Response> localVarResp = searchStickersWithHttpInfo(q, limit, offset, rating, lang);
        return localVarResp.getData();
    }

    /**
     * Search Stickers
     * Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs. 
     * @param q Search query term or prhase. (required)
     * @param limit The maximum number of records to return. (optional, default to 25)
     * @param offset An optional results offset. (optional, default to 0)
     * @param rating Filters results by specified rating. (optional)
     * @param lang Specify default language for regional content; use a 2-letter ISO 639-1 language code. (optional)
     * @return ApiResponse&lt;GetGifsById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGifsById200Response> searchStickersWithHttpInfo(String q, Integer limit, Integer offset, String rating, String lang) throws ApiException {
        okhttp3.Call localVarCall = searchStickersValidateBeforeCall(q, limit, offset, rating, lang, null);
        Type localVarReturnType = new TypeToken<GetGifsById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Stickers (asynchronously)
     * Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs. 
     * @param q Search query term or prhase. (required)
     * @param limit The maximum number of records to return. (optional, default to 25)
     * @param offset An optional results offset. (optional, default to 0)
     * @param rating Filters results by specified rating. (optional)
     * @param lang Specify default language for regional content; use a 2-letter ISO 639-1 language code. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchStickersAsync(String q, Integer limit, Integer offset, String rating, String lang, final ApiCallback<GetGifsById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchStickersValidateBeforeCall(q, limit, offset, rating, lang, _callback);
        Type localVarReturnType = new TypeToken<GetGifsById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateSticker
     * @param s Search term. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateStickerCall(String s, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stickers/translate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (s != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("s", s));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateStickerValidateBeforeCall(String s, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 's' is set
        if (s == null) {
            throw new ApiException("Missing the required parameter 's' when calling translateSticker(Async)");
        }

        return translateStickerCall(s, _callback);

    }

    /**
     * Translate phrase to Sticker
     * The translate API draws on search, but uses the GIPHY &#x60;special sauce&#x60; to handle translating from one vocabulary to another. In this case, words and phrases to GIFs. 
     * @param s Search term. (required)
     * @return RandomGif200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public RandomGif200Response translateSticker(String s) throws ApiException {
        ApiResponse<RandomGif200Response> localVarResp = translateStickerWithHttpInfo(s);
        return localVarResp.getData();
    }

    /**
     * Translate phrase to Sticker
     * The translate API draws on search, but uses the GIPHY &#x60;special sauce&#x60; to handle translating from one vocabulary to another. In this case, words and phrases to GIFs. 
     * @param s Search term. (required)
     * @return ApiResponse&lt;RandomGif200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RandomGif200Response> translateStickerWithHttpInfo(String s) throws ApiException {
        okhttp3.Call localVarCall = translateStickerValidateBeforeCall(s, null);
        Type localVarReturnType = new TypeToken<RandomGif200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate phrase to Sticker (asynchronously)
     * The translate API draws on search, but uses the GIPHY &#x60;special sauce&#x60; to handle translating from one vocabulary to another. In this case, words and phrases to GIFs. 
     * @param s Search term. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateStickerAsync(String s, final ApiCallback<RandomGif200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateStickerValidateBeforeCall(s, _callback);
        Type localVarReturnType = new TypeToken<RandomGif200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trendingStickers
     * @param limit The maximum number of records to return. (optional, default to 25)
     * @param offset An optional results offset. (optional, default to 0)
     * @param rating Filters results by specified rating. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trendingStickersCall(Integer limit, Integer offset, String rating, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stickers/trending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (rating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rating", rating));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trendingStickersValidateBeforeCall(Integer limit, Integer offset, String rating, final ApiCallback _callback) throws ApiException {
        return trendingStickersCall(limit, offset, rating, _callback);

    }

    /**
     * Trending Stickers
     * Fetch Stickers currently trending online. Hand curated by the GIPHY editorial team. Returns 25 results by default. 
     * @param limit The maximum number of records to return. (optional, default to 25)
     * @param offset An optional results offset. (optional, default to 0)
     * @param rating Filters results by specified rating. (optional)
     * @return GetGifsById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public GetGifsById200Response trendingStickers(Integer limit, Integer offset, String rating) throws ApiException {
        ApiResponse<GetGifsById200Response> localVarResp = trendingStickersWithHttpInfo(limit, offset, rating);
        return localVarResp.getData();
    }

    /**
     * Trending Stickers
     * Fetch Stickers currently trending online. Hand curated by the GIPHY editorial team. Returns 25 results by default. 
     * @param limit The maximum number of records to return. (optional, default to 25)
     * @param offset An optional results offset. (optional, default to 0)
     * @param rating Filters results by specified rating. (optional)
     * @return ApiResponse&lt;GetGifsById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGifsById200Response> trendingStickersWithHttpInfo(Integer limit, Integer offset, String rating) throws ApiException {
        okhttp3.Call localVarCall = trendingStickersValidateBeforeCall(limit, offset, rating, null);
        Type localVarReturnType = new TypeToken<GetGifsById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trending Stickers (asynchronously)
     * Fetch Stickers currently trending online. Hand curated by the GIPHY editorial team. Returns 25 results by default. 
     * @param limit The maximum number of records to return. (optional, default to 25)
     * @param offset An optional results offset. (optional, default to 0)
     * @param rating Filters results by specified rating. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was formatted incorrectly or missing required parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You weren&#39;t authorized to make your request; most likely this indicates an issue with your API Key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trendingStickersAsync(Integer limit, Integer offset, String rating, final ApiCallback<GetGifsById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = trendingStickersValidateBeforeCall(limit, offset, rating, _callback);
        Type localVarReturnType = new TypeToken<GetGifsById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
