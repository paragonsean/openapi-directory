/**
 * Giphy API
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GiphyApi);
  }
}(this, function(expect, GiphyApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GiphyApi.Gif();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Gif', function() {
    it('should create an instance of Gif', function() {
      // uncomment below and update the code to test Gif
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be.a(GiphyApi.Gif);
    });

    it('should have the property bitlyUrl (base name: "bitly_url")', function() {
      // uncomment below and update the code to test the property bitlyUrl
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property contentUrl (base name: "content_url")', function() {
      // uncomment below and update the code to test the property contentUrl
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property createDatetime (base name: "create_datetime")', function() {
      // uncomment below and update the code to test the property createDatetime
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property embdedUrl (base name: "embded_url")', function() {
      // uncomment below and update the code to test the property embdedUrl
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property featuredTags (base name: "featured_tags")', function() {
      // uncomment below and update the code to test the property featuredTags
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property images (base name: "images")', function() {
      // uncomment below and update the code to test the property images
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property importDatetime (base name: "import_datetime")', function() {
      // uncomment below and update the code to test the property importDatetime
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property rating (base name: "rating")', function() {
      // uncomment below and update the code to test the property rating
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property sourcePostUrl (base name: "source_post_url")', function() {
      // uncomment below and update the code to test the property sourcePostUrl
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property sourceTld (base name: "source_tld")', function() {
      // uncomment below and update the code to test the property sourceTld
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property trendingDatetime (base name: "trending_datetime")', function() {
      // uncomment below and update the code to test the property trendingDatetime
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property updateDatetime (base name: "update_datetime")', function() {
      // uncomment below and update the code to test the property updateDatetime
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new GiphyApi.Gif();
      //expect(instance).to.be();
    });

  });

}));
