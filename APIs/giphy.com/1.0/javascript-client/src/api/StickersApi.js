/**
 * Giphy API
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetGifsById200Response from '../model/GetGifsById200Response';
import RandomGif200Response from '../model/RandomGif200Response';

/**
* Stickers service.
* @module api/StickersApi
* @version 1.0
*/
export default class StickersApi {

    /**
    * Constructs a new StickersApi. 
    * @alias module:api/StickersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the randomSticker operation.
     * @callback module:api/StickersApi~randomStickerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RandomGif200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Random Sticker
     * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filters results by specified tag.
     * @param {String} [rating] Filters results by specified rating.
     * @param {module:api/StickersApi~randomStickerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RandomGif200Response}
     */
    randomSticker(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'rating': opts['rating']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RandomGif200Response;
      return this.apiClient.callApi(
        '/stickers/random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchStickers operation.
     * @callback module:api/StickersApi~searchStickersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGifsById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Stickers
     * Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs. 
     * @param {String} q Search query term or prhase.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 25)] The maximum number of records to return.
     * @param {Number} [offset = 0)] An optional results offset.
     * @param {String} [rating] Filters results by specified rating.
     * @param {String} [lang] Specify default language for regional content; use a 2-letter ISO 639-1 language code.
     * @param {module:api/StickersApi~searchStickersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGifsById200Response}
     */
    searchStickers(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchStickers");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'limit': opts['limit'],
        'offset': opts['offset'],
        'rating': opts['rating'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGifsById200Response;
      return this.apiClient.callApi(
        '/stickers/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translateSticker operation.
     * @callback module:api/StickersApi~translateStickerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RandomGif200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate phrase to Sticker
     * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIFs. 
     * @param {String} s Search term.
     * @param {module:api/StickersApi~translateStickerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RandomGif200Response}
     */
    translateSticker(s, callback) {
      let postBody = null;
      // verify the required parameter 's' is set
      if (s === undefined || s === null) {
        throw new Error("Missing the required parameter 's' when calling translateSticker");
      }

      let pathParams = {
      };
      let queryParams = {
        's': s
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RandomGif200Response;
      return this.apiClient.callApi(
        '/stickers/translate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trendingStickers operation.
     * @callback module:api/StickersApi~trendingStickersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGifsById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trending Stickers
     * Fetch Stickers currently trending online. Hand curated by the GIPHY editorial team. Returns 25 results by default. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 25)] The maximum number of records to return.
     * @param {Number} [offset = 0)] An optional results offset.
     * @param {String} [rating] Filters results by specified rating.
     * @param {module:api/StickersApi~trendingStickersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGifsById200Response}
     */
    trendingStickers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'rating': opts['rating']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGifsById200Response;
      return this.apiClient.callApi(
        '/stickers/trending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
