/**
 * Giphy API
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetGifsById200Response from '../model/GetGifsById200Response';
import RandomGif200Response from '../model/RandomGif200Response';

/**
* Gifs service.
* @module api/GifsApi
* @version 1.0
*/
export default class GifsApi {

    /**
    * Constructs a new GifsApi. 
    * @alias module:api/GifsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getGifById operation.
     * @callback module:api/GifsApi~getGifByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RandomGif200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GIF by Id
     * Returns a GIF given that GIF's unique ID 
     * @param {Number} gifId Filters results by specified GIF ID.
     * @param {module:api/GifsApi~getGifByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RandomGif200Response}
     */
    getGifById(gifId, callback) {
      let postBody = null;
      // verify the required parameter 'gifId' is set
      if (gifId === undefined || gifId === null) {
        throw new Error("Missing the required parameter 'gifId' when calling getGifById");
      }

      let pathParams = {
        'gifId': gifId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RandomGif200Response;
      return this.apiClient.callApi(
        '/gifs/{gifId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGifsById operation.
     * @callback module:api/GifsApi~getGifsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGifsById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GIFs by ID
     * A multiget version of the get GIF by ID endpoint. 
     * @param {Object} opts Optional parameters
     * @param {String} [ids] Filters results by specified GIF IDs, separated by commas.
     * @param {module:api/GifsApi~getGifsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGifsById200Response}
     */
    getGifsById(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGifsById200Response;
      return this.apiClient.callApi(
        '/gifs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the randomGif operation.
     * @callback module:api/GifsApi~randomGifCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RandomGif200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Random GIF
     * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog. 
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filters results by specified tag.
     * @param {String} [rating] Filters results by specified rating.
     * @param {module:api/GifsApi~randomGifCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RandomGif200Response}
     */
    randomGif(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'rating': opts['rating']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RandomGif200Response;
      return this.apiClient.callApi(
        '/gifs/random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGifs operation.
     * @callback module:api/GifsApi~searchGifsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGifsById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search GIFs
     * Search all GIPHY GIFs for a word or phrase. Punctuation will be stripped and ignored.  Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho. 
     * @param {String} q Search query term or prhase.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 25)] The maximum number of records to return.
     * @param {Number} [offset = 0)] An optional results offset.
     * @param {String} [rating] Filters results by specified rating.
     * @param {String} [lang] Specify default language for regional content; use a 2-letter ISO 639-1 language code.
     * @param {module:api/GifsApi~searchGifsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGifsById200Response}
     */
    searchGifs(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchGifs");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'limit': opts['limit'],
        'offset': opts['offset'],
        'rating': opts['rating'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGifsById200Response;
      return this.apiClient.callApi(
        '/gifs/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translateGif operation.
     * @callback module:api/GifsApi~translateGifCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RandomGif200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate phrase to GIF
     * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIF 
     * @param {String} s Search term.
     * @param {module:api/GifsApi~translateGifCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RandomGif200Response}
     */
    translateGif(s, callback) {
      let postBody = null;
      // verify the required parameter 's' is set
      if (s === undefined || s === null) {
        throw new Error("Missing the required parameter 's' when calling translateGif");
      }

      let pathParams = {
      };
      let queryParams = {
        's': s
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RandomGif200Response;
      return this.apiClient.callApi(
        '/gifs/translate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trendingGifs operation.
     * @callback module:api/GifsApi~trendingGifsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGifsById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trending GIFs
     * Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team.  The data returned mirrors the GIFs showcased on the GIPHY homepage. Returns 25 results by default. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 25)] The maximum number of records to return.
     * @param {Number} [offset = 0)] An optional results offset.
     * @param {String} [rating] Filters results by specified rating.
     * @param {module:api/GifsApi~trendingGifsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGifsById200Response}
     */
    trendingGifs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'rating': opts['rating']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGifsById200Response;
      return this.apiClient.callApi(
        '/gifs/trending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
