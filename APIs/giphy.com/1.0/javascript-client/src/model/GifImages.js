/**
 * Giphy API
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GifImagesDownsized from './GifImagesDownsized';
import GifImagesDownsizedLarge from './GifImagesDownsizedLarge';
import GifImagesDownsizedMedium from './GifImagesDownsizedMedium';
import GifImagesDownsizedSmall from './GifImagesDownsizedSmall';
import GifImagesDownsizedStill from './GifImagesDownsizedStill';
import GifImagesFixedHeight from './GifImagesFixedHeight';
import GifImagesFixedHeightDownsampled from './GifImagesFixedHeightDownsampled';
import GifImagesFixedHeightSmall from './GifImagesFixedHeightSmall';
import GifImagesFixedHeightSmallStill from './GifImagesFixedHeightSmallStill';
import GifImagesFixedHeightStill from './GifImagesFixedHeightStill';
import GifImagesFixedWidth from './GifImagesFixedWidth';
import GifImagesFixedWidthDownsampled from './GifImagesFixedWidthDownsampled';
import GifImagesFixedWidthSmall from './GifImagesFixedWidthSmall';
import GifImagesFixedWidthSmallStill from './GifImagesFixedWidthSmallStill';
import GifImagesFixedWidthStill from './GifImagesFixedWidthStill';
import GifImagesLooping from './GifImagesLooping';
import GifImagesOriginal from './GifImagesOriginal';
import GifImagesOriginalStill from './GifImagesOriginalStill';
import GifImagesPreview from './GifImagesPreview';
import GifImagesPreviewGif from './GifImagesPreviewGif';

/**
 * The GifImages model module.
 * @module model/GifImages
 * @version 1.0
 */
class GifImages {
    /**
     * Constructs a new <code>GifImages</code>.
     * An object containing data for various available formats and sizes of this GIF.
     * @alias module:model/GifImages
     */
    constructor() { 
        
        GifImages.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GifImages</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GifImages} obj Optional instance to populate.
     * @return {module:model/GifImages} The populated <code>GifImages</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GifImages();

            if (data.hasOwnProperty('downsized')) {
                obj['downsized'] = GifImagesDownsized.constructFromObject(data['downsized']);
            }
            if (data.hasOwnProperty('downsized_large')) {
                obj['downsized_large'] = GifImagesDownsizedLarge.constructFromObject(data['downsized_large']);
            }
            if (data.hasOwnProperty('downsized_medium')) {
                obj['downsized_medium'] = GifImagesDownsizedMedium.constructFromObject(data['downsized_medium']);
            }
            if (data.hasOwnProperty('downsized_small')) {
                obj['downsized_small'] = GifImagesDownsizedSmall.constructFromObject(data['downsized_small']);
            }
            if (data.hasOwnProperty('downsized_still')) {
                obj['downsized_still'] = GifImagesDownsizedStill.constructFromObject(data['downsized_still']);
            }
            if (data.hasOwnProperty('fixed_height')) {
                obj['fixed_height'] = GifImagesFixedHeight.constructFromObject(data['fixed_height']);
            }
            if (data.hasOwnProperty('fixed_height_downsampled')) {
                obj['fixed_height_downsampled'] = GifImagesFixedHeightDownsampled.constructFromObject(data['fixed_height_downsampled']);
            }
            if (data.hasOwnProperty('fixed_height_small')) {
                obj['fixed_height_small'] = GifImagesFixedHeightSmall.constructFromObject(data['fixed_height_small']);
            }
            if (data.hasOwnProperty('fixed_height_small_still')) {
                obj['fixed_height_small_still'] = GifImagesFixedHeightSmallStill.constructFromObject(data['fixed_height_small_still']);
            }
            if (data.hasOwnProperty('fixed_height_still')) {
                obj['fixed_height_still'] = GifImagesFixedHeightStill.constructFromObject(data['fixed_height_still']);
            }
            if (data.hasOwnProperty('fixed_width')) {
                obj['fixed_width'] = GifImagesFixedWidth.constructFromObject(data['fixed_width']);
            }
            if (data.hasOwnProperty('fixed_width_downsampled')) {
                obj['fixed_width_downsampled'] = GifImagesFixedWidthDownsampled.constructFromObject(data['fixed_width_downsampled']);
            }
            if (data.hasOwnProperty('fixed_width_small')) {
                obj['fixed_width_small'] = GifImagesFixedWidthSmall.constructFromObject(data['fixed_width_small']);
            }
            if (data.hasOwnProperty('fixed_width_small_still')) {
                obj['fixed_width_small_still'] = GifImagesFixedWidthSmallStill.constructFromObject(data['fixed_width_small_still']);
            }
            if (data.hasOwnProperty('fixed_width_still')) {
                obj['fixed_width_still'] = GifImagesFixedWidthStill.constructFromObject(data['fixed_width_still']);
            }
            if (data.hasOwnProperty('looping')) {
                obj['looping'] = GifImagesLooping.constructFromObject(data['looping']);
            }
            if (data.hasOwnProperty('original')) {
                obj['original'] = GifImagesOriginal.constructFromObject(data['original']);
            }
            if (data.hasOwnProperty('original_still')) {
                obj['original_still'] = GifImagesOriginalStill.constructFromObject(data['original_still']);
            }
            if (data.hasOwnProperty('preview')) {
                obj['preview'] = GifImagesPreview.constructFromObject(data['preview']);
            }
            if (data.hasOwnProperty('preview_gif')) {
                obj['preview_gif'] = GifImagesPreviewGif.constructFromObject(data['preview_gif']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GifImages</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GifImages</code>.
     */
    static validateJSON(data) {
        // validate the optional field `downsized`
        if (data['downsized']) { // data not null
          GifImagesDownsized.validateJSON(data['downsized']);
        }
        // validate the optional field `downsized_large`
        if (data['downsized_large']) { // data not null
          GifImagesDownsizedLarge.validateJSON(data['downsized_large']);
        }
        // validate the optional field `downsized_medium`
        if (data['downsized_medium']) { // data not null
          GifImagesDownsizedMedium.validateJSON(data['downsized_medium']);
        }
        // validate the optional field `downsized_small`
        if (data['downsized_small']) { // data not null
          GifImagesDownsizedSmall.validateJSON(data['downsized_small']);
        }
        // validate the optional field `downsized_still`
        if (data['downsized_still']) { // data not null
          GifImagesDownsizedStill.validateJSON(data['downsized_still']);
        }
        // validate the optional field `fixed_height`
        if (data['fixed_height']) { // data not null
          GifImagesFixedHeight.validateJSON(data['fixed_height']);
        }
        // validate the optional field `fixed_height_downsampled`
        if (data['fixed_height_downsampled']) { // data not null
          GifImagesFixedHeightDownsampled.validateJSON(data['fixed_height_downsampled']);
        }
        // validate the optional field `fixed_height_small`
        if (data['fixed_height_small']) { // data not null
          GifImagesFixedHeightSmall.validateJSON(data['fixed_height_small']);
        }
        // validate the optional field `fixed_height_small_still`
        if (data['fixed_height_small_still']) { // data not null
          GifImagesFixedHeightSmallStill.validateJSON(data['fixed_height_small_still']);
        }
        // validate the optional field `fixed_height_still`
        if (data['fixed_height_still']) { // data not null
          GifImagesFixedHeightStill.validateJSON(data['fixed_height_still']);
        }
        // validate the optional field `fixed_width`
        if (data['fixed_width']) { // data not null
          GifImagesFixedWidth.validateJSON(data['fixed_width']);
        }
        // validate the optional field `fixed_width_downsampled`
        if (data['fixed_width_downsampled']) { // data not null
          GifImagesFixedWidthDownsampled.validateJSON(data['fixed_width_downsampled']);
        }
        // validate the optional field `fixed_width_small`
        if (data['fixed_width_small']) { // data not null
          GifImagesFixedWidthSmall.validateJSON(data['fixed_width_small']);
        }
        // validate the optional field `fixed_width_small_still`
        if (data['fixed_width_small_still']) { // data not null
          GifImagesFixedWidthSmallStill.validateJSON(data['fixed_width_small_still']);
        }
        // validate the optional field `fixed_width_still`
        if (data['fixed_width_still']) { // data not null
          GifImagesFixedWidthStill.validateJSON(data['fixed_width_still']);
        }
        // validate the optional field `looping`
        if (data['looping']) { // data not null
          GifImagesLooping.validateJSON(data['looping']);
        }
        // validate the optional field `original`
        if (data['original']) { // data not null
          GifImagesOriginal.validateJSON(data['original']);
        }
        // validate the optional field `original_still`
        if (data['original_still']) { // data not null
          GifImagesOriginalStill.validateJSON(data['original_still']);
        }
        // validate the optional field `preview`
        if (data['preview']) { // data not null
          GifImagesPreview.validateJSON(data['preview']);
        }
        // validate the optional field `preview_gif`
        if (data['preview_gif']) { // data not null
          GifImagesPreviewGif.validateJSON(data['preview_gif']);
        }

        return true;
    }


}



/**
 * @member {module:model/GifImagesDownsized} downsized
 */
GifImages.prototype['downsized'] = undefined;

/**
 * @member {module:model/GifImagesDownsizedLarge} downsized_large
 */
GifImages.prototype['downsized_large'] = undefined;

/**
 * @member {module:model/GifImagesDownsizedMedium} downsized_medium
 */
GifImages.prototype['downsized_medium'] = undefined;

/**
 * @member {module:model/GifImagesDownsizedSmall} downsized_small
 */
GifImages.prototype['downsized_small'] = undefined;

/**
 * @member {module:model/GifImagesDownsizedStill} downsized_still
 */
GifImages.prototype['downsized_still'] = undefined;

/**
 * @member {module:model/GifImagesFixedHeight} fixed_height
 */
GifImages.prototype['fixed_height'] = undefined;

/**
 * @member {module:model/GifImagesFixedHeightDownsampled} fixed_height_downsampled
 */
GifImages.prototype['fixed_height_downsampled'] = undefined;

/**
 * @member {module:model/GifImagesFixedHeightSmall} fixed_height_small
 */
GifImages.prototype['fixed_height_small'] = undefined;

/**
 * @member {module:model/GifImagesFixedHeightSmallStill} fixed_height_small_still
 */
GifImages.prototype['fixed_height_small_still'] = undefined;

/**
 * @member {module:model/GifImagesFixedHeightStill} fixed_height_still
 */
GifImages.prototype['fixed_height_still'] = undefined;

/**
 * @member {module:model/GifImagesFixedWidth} fixed_width
 */
GifImages.prototype['fixed_width'] = undefined;

/**
 * @member {module:model/GifImagesFixedWidthDownsampled} fixed_width_downsampled
 */
GifImages.prototype['fixed_width_downsampled'] = undefined;

/**
 * @member {module:model/GifImagesFixedWidthSmall} fixed_width_small
 */
GifImages.prototype['fixed_width_small'] = undefined;

/**
 * @member {module:model/GifImagesFixedWidthSmallStill} fixed_width_small_still
 */
GifImages.prototype['fixed_width_small_still'] = undefined;

/**
 * @member {module:model/GifImagesFixedWidthStill} fixed_width_still
 */
GifImages.prototype['fixed_width_still'] = undefined;

/**
 * @member {module:model/GifImagesLooping} looping
 */
GifImages.prototype['looping'] = undefined;

/**
 * @member {module:model/GifImagesOriginal} original
 */
GifImages.prototype['original'] = undefined;

/**
 * @member {module:model/GifImagesOriginalStill} original_still
 */
GifImages.prototype['original_still'] = undefined;

/**
 * @member {module:model/GifImagesPreview} preview
 */
GifImages.prototype['preview'] = undefined;

/**
 * @member {module:model/GifImagesPreviewGif} preview_gif
 */
GifImages.prototype['preview_gif'] = undefined;






export default GifImages;

