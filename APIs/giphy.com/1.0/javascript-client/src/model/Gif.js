/**
 * Giphy API
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GifImages from './GifImages';
import User from './User';

/**
 * The Gif model module.
 * @module model/Gif
 * @version 1.0
 */
class Gif {
    /**
     * Constructs a new <code>Gif</code>.
     * @alias module:model/Gif
     */
    constructor() { 
        
        Gif.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['type'] = 'gif';
    }

    /**
     * Constructs a <code>Gif</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Gif} obj Optional instance to populate.
     * @return {module:model/Gif} The populated <code>Gif</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Gif();

            if (data.hasOwnProperty('bitly_url')) {
                obj['bitly_url'] = ApiClient.convertToType(data['bitly_url'], 'String');
            }
            if (data.hasOwnProperty('content_url')) {
                obj['content_url'] = ApiClient.convertToType(data['content_url'], 'String');
            }
            if (data.hasOwnProperty('create_datetime')) {
                obj['create_datetime'] = ApiClient.convertToType(data['create_datetime'], 'Date');
            }
            if (data.hasOwnProperty('embded_url')) {
                obj['embded_url'] = ApiClient.convertToType(data['embded_url'], 'String');
            }
            if (data.hasOwnProperty('featured_tags')) {
                obj['featured_tags'] = ApiClient.convertToType(data['featured_tags'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = GifImages.constructFromObject(data['images']);
            }
            if (data.hasOwnProperty('import_datetime')) {
                obj['import_datetime'] = ApiClient.convertToType(data['import_datetime'], 'Date');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('source_post_url')) {
                obj['source_post_url'] = ApiClient.convertToType(data['source_post_url'], 'String');
            }
            if (data.hasOwnProperty('source_tld')) {
                obj['source_tld'] = ApiClient.convertToType(data['source_tld'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('trending_datetime')) {
                obj['trending_datetime'] = ApiClient.convertToType(data['trending_datetime'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('update_datetime')) {
                obj['update_datetime'] = ApiClient.convertToType(data['update_datetime'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Gif</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Gif</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bitly_url'] && !(typeof data['bitly_url'] === 'string' || data['bitly_url'] instanceof String)) {
            throw new Error("Expected the field `bitly_url` to be a primitive type in the JSON string but got " + data['bitly_url']);
        }
        // ensure the json data is a string
        if (data['content_url'] && !(typeof data['content_url'] === 'string' || data['content_url'] instanceof String)) {
            throw new Error("Expected the field `content_url` to be a primitive type in the JSON string but got " + data['content_url']);
        }
        // ensure the json data is a string
        if (data['embded_url'] && !(typeof data['embded_url'] === 'string' || data['embded_url'] instanceof String)) {
            throw new Error("Expected the field `embded_url` to be a primitive type in the JSON string but got " + data['embded_url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['featured_tags'])) {
            throw new Error("Expected the field `featured_tags` to be an array in the JSON data but got " + data['featured_tags']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `images`
        if (data['images']) { // data not null
          GifImages.validateJSON(data['images']);
        }
        // ensure the json data is a string
        if (data['rating'] && !(typeof data['rating'] === 'string' || data['rating'] instanceof String)) {
            throw new Error("Expected the field `rating` to be a primitive type in the JSON string but got " + data['rating']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['source_post_url'] && !(typeof data['source_post_url'] === 'string' || data['source_post_url'] instanceof String)) {
            throw new Error("Expected the field `source_post_url` to be a primitive type in the JSON string but got " + data['source_post_url']);
        }
        // ensure the json data is a string
        if (data['source_tld'] && !(typeof data['source_tld'] === 'string' || data['source_tld'] instanceof String)) {
            throw new Error("Expected the field `source_tld` to be a primitive type in the JSON string but got " + data['source_tld']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * The unique bit.ly URL for this GIF
 * @member {String} bitly_url
 */
Gif.prototype['bitly_url'] = undefined;

/**
 * Currently unused
 * @member {String} content_url
 */
Gif.prototype['content_url'] = undefined;

/**
 * The date this GIF was added to the GIPHY database.
 * @member {Date} create_datetime
 */
Gif.prototype['create_datetime'] = undefined;

/**
 * A URL used for embedding this GIF
 * @member {String} embded_url
 */
Gif.prototype['embded_url'] = undefined;

/**
 * An array of featured tags for this GIF (Note: Not available when using the Public Beta Key) 
 * @member {Array.<String>} featured_tags
 */
Gif.prototype['featured_tags'] = undefined;

/**
 * This GIF's unique ID
 * @member {String} id
 */
Gif.prototype['id'] = undefined;

/**
 * @member {module:model/GifImages} images
 */
Gif.prototype['images'] = undefined;

/**
 * The creation or upload date from this GIF's source.
 * @member {Date} import_datetime
 */
Gif.prototype['import_datetime'] = undefined;

/**
 * The MPAA-style rating for this content. Examples include Y, G, PG, PG-13 and R
 * @member {String} rating
 */
Gif.prototype['rating'] = undefined;

/**
 * The unique slug used in this GIF's URL
 * @member {String} slug
 */
Gif.prototype['slug'] = undefined;

/**
 * The page on which this GIF was found
 * @member {String} source
 */
Gif.prototype['source'] = undefined;

/**
 * The URL of the webpage on which this GIF was found.
 * @member {String} source_post_url
 */
Gif.prototype['source_post_url'] = undefined;

/**
 * The top level domain of the source URL.
 * @member {String} source_tld
 */
Gif.prototype['source_tld'] = undefined;

/**
 * An array of tags for this GIF (Note: Not available when using the Public Beta Key) 
 * @member {Array.<String>} tags
 */
Gif.prototype['tags'] = undefined;

/**
 * The date on which this gif was marked trending, if applicable.
 * @member {Date} trending_datetime
 */
Gif.prototype['trending_datetime'] = undefined;

/**
 * Type of the gif. By default, this is almost always gif
 * @member {module:model/Gif.TypeEnum} type
 * @default 'gif'
 */
Gif.prototype['type'] = 'gif';

/**
 * The date on which this GIF was last updated.
 * @member {Date} update_datetime
 */
Gif.prototype['update_datetime'] = undefined;

/**
 * The unique URL for this GIF
 * @member {String} url
 */
Gif.prototype['url'] = undefined;

/**
 * @member {module:model/User} user
 */
Gif.prototype['user'] = undefined;

/**
 * The username this GIF is attached to, if applicable
 * @member {String} username
 */
Gif.prototype['username'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Gif['TypeEnum'] = {

    /**
     * value: "gif"
     * @const
     */
    "gif": "gif"
};



export default Gif;

