/**
 * Giphy API
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 1.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * The User Object contains information about the user associated with a GIF and URLs to assets such as that user&#39;s avatar image, profile, and more.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('banner_url')) {
                obj['banner_url'] = ApiClient.convertToType(data['banner_url'], 'String');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('profile_url')) {
                obj['profile_url'] = ApiClient.convertToType(data['profile_url'], 'String');
            }
            if (data.hasOwnProperty('twitter')) {
                obj['twitter'] = ApiClient.convertToType(data['twitter'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        // ensure the json data is a string
        if (data['banner_url'] && !(typeof data['banner_url'] === 'string' || data['banner_url'] instanceof String)) {
            throw new Error("Expected the field `banner_url` to be a primitive type in the JSON string but got " + data['banner_url']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['profile_url'] && !(typeof data['profile_url'] === 'string' || data['profile_url'] instanceof String)) {
            throw new Error("Expected the field `profile_url` to be a primitive type in the JSON string but got " + data['profile_url']);
        }
        // ensure the json data is a string
        if (data['twitter'] && !(typeof data['twitter'] === 'string' || data['twitter'] instanceof String)) {
            throw new Error("Expected the field `twitter` to be a primitive type in the JSON string but got " + data['twitter']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * The URL for this user's avatar image.
 * @member {String} avatar_url
 */
User.prototype['avatar_url'] = undefined;

/**
 * The URL for the banner image that appears atop this user's profile page.
 * @member {String} banner_url
 */
User.prototype['banner_url'] = undefined;

/**
 * The display name associated with this user (contains formatting the base username might not).
 * @member {String} display_name
 */
User.prototype['display_name'] = undefined;

/**
 * The URL for this user's profile.
 * @member {String} profile_url
 */
User.prototype['profile_url'] = undefined;

/**
 * The Twitter username associated with this user, if applicable.
 * @member {String} twitter
 */
User.prototype['twitter'] = undefined;

/**
 * The username associated with this user.
 * @member {String} username
 */
User.prototype['username'] = undefined;






export default User;

