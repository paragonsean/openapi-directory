/**
 * Giphy API
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGif.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGif::OAIGif(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGif::OAIGif() {
    this->initializeModel();
}

OAIGif::~OAIGif() {}

void OAIGif::initializeModel() {

    m_bitly_url_isSet = false;
    m_bitly_url_isValid = false;

    m_content_url_isSet = false;
    m_content_url_isValid = false;

    m_create_datetime_isSet = false;
    m_create_datetime_isValid = false;

    m_embded_url_isSet = false;
    m_embded_url_isValid = false;

    m_featured_tags_isSet = false;
    m_featured_tags_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_import_datetime_isSet = false;
    m_import_datetime_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_post_url_isSet = false;
    m_source_post_url_isValid = false;

    m_source_tld_isSet = false;
    m_source_tld_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_trending_datetime_isSet = false;
    m_trending_datetime_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_datetime_isSet = false;
    m_update_datetime_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIGif::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGif::fromJsonObject(QJsonObject json) {

    m_bitly_url_isValid = ::OpenAPI::fromJsonValue(m_bitly_url, json[QString("bitly_url")]);
    m_bitly_url_isSet = !json[QString("bitly_url")].isNull() && m_bitly_url_isValid;

    m_content_url_isValid = ::OpenAPI::fromJsonValue(m_content_url, json[QString("content_url")]);
    m_content_url_isSet = !json[QString("content_url")].isNull() && m_content_url_isValid;

    m_create_datetime_isValid = ::OpenAPI::fromJsonValue(m_create_datetime, json[QString("create_datetime")]);
    m_create_datetime_isSet = !json[QString("create_datetime")].isNull() && m_create_datetime_isValid;

    m_embded_url_isValid = ::OpenAPI::fromJsonValue(m_embded_url, json[QString("embded_url")]);
    m_embded_url_isSet = !json[QString("embded_url")].isNull() && m_embded_url_isValid;

    m_featured_tags_isValid = ::OpenAPI::fromJsonValue(m_featured_tags, json[QString("featured_tags")]);
    m_featured_tags_isSet = !json[QString("featured_tags")].isNull() && m_featured_tags_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_import_datetime_isValid = ::OpenAPI::fromJsonValue(m_import_datetime, json[QString("import_datetime")]);
    m_import_datetime_isSet = !json[QString("import_datetime")].isNull() && m_import_datetime_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_post_url_isValid = ::OpenAPI::fromJsonValue(m_source_post_url, json[QString("source_post_url")]);
    m_source_post_url_isSet = !json[QString("source_post_url")].isNull() && m_source_post_url_isValid;

    m_source_tld_isValid = ::OpenAPI::fromJsonValue(m_source_tld, json[QString("source_tld")]);
    m_source_tld_isSet = !json[QString("source_tld")].isNull() && m_source_tld_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_trending_datetime_isValid = ::OpenAPI::fromJsonValue(m_trending_datetime, json[QString("trending_datetime")]);
    m_trending_datetime_isSet = !json[QString("trending_datetime")].isNull() && m_trending_datetime_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_datetime_isValid = ::OpenAPI::fromJsonValue(m_update_datetime, json[QString("update_datetime")]);
    m_update_datetime_isSet = !json[QString("update_datetime")].isNull() && m_update_datetime_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIGif::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGif::asJsonObject() const {
    QJsonObject obj;
    if (m_bitly_url_isSet) {
        obj.insert(QString("bitly_url"), ::OpenAPI::toJsonValue(m_bitly_url));
    }
    if (m_content_url_isSet) {
        obj.insert(QString("content_url"), ::OpenAPI::toJsonValue(m_content_url));
    }
    if (m_create_datetime_isSet) {
        obj.insert(QString("create_datetime"), ::OpenAPI::toJsonValue(m_create_datetime));
    }
    if (m_embded_url_isSet) {
        obj.insert(QString("embded_url"), ::OpenAPI::toJsonValue(m_embded_url));
    }
    if (m_featured_tags.size() > 0) {
        obj.insert(QString("featured_tags"), ::OpenAPI::toJsonValue(m_featured_tags));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.isSet()) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_import_datetime_isSet) {
        obj.insert(QString("import_datetime"), ::OpenAPI::toJsonValue(m_import_datetime));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_post_url_isSet) {
        obj.insert(QString("source_post_url"), ::OpenAPI::toJsonValue(m_source_post_url));
    }
    if (m_source_tld_isSet) {
        obj.insert(QString("source_tld"), ::OpenAPI::toJsonValue(m_source_tld));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_trending_datetime_isSet) {
        obj.insert(QString("trending_datetime"), ::OpenAPI::toJsonValue(m_trending_datetime));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_datetime_isSet) {
        obj.insert(QString("update_datetime"), ::OpenAPI::toJsonValue(m_update_datetime));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIGif::getBitlyUrl() const {
    return m_bitly_url;
}
void OAIGif::setBitlyUrl(const QString &bitly_url) {
    m_bitly_url = bitly_url;
    m_bitly_url_isSet = true;
}

bool OAIGif::is_bitly_url_Set() const{
    return m_bitly_url_isSet;
}

bool OAIGif::is_bitly_url_Valid() const{
    return m_bitly_url_isValid;
}

QString OAIGif::getContentUrl() const {
    return m_content_url;
}
void OAIGif::setContentUrl(const QString &content_url) {
    m_content_url = content_url;
    m_content_url_isSet = true;
}

bool OAIGif::is_content_url_Set() const{
    return m_content_url_isSet;
}

bool OAIGif::is_content_url_Valid() const{
    return m_content_url_isValid;
}

QDateTime OAIGif::getCreateDatetime() const {
    return m_create_datetime;
}
void OAIGif::setCreateDatetime(const QDateTime &create_datetime) {
    m_create_datetime = create_datetime;
    m_create_datetime_isSet = true;
}

bool OAIGif::is_create_datetime_Set() const{
    return m_create_datetime_isSet;
}

bool OAIGif::is_create_datetime_Valid() const{
    return m_create_datetime_isValid;
}

QString OAIGif::getEmbdedUrl() const {
    return m_embded_url;
}
void OAIGif::setEmbdedUrl(const QString &embded_url) {
    m_embded_url = embded_url;
    m_embded_url_isSet = true;
}

bool OAIGif::is_embded_url_Set() const{
    return m_embded_url_isSet;
}

bool OAIGif::is_embded_url_Valid() const{
    return m_embded_url_isValid;
}

QList<QString> OAIGif::getFeaturedTags() const {
    return m_featured_tags;
}
void OAIGif::setFeaturedTags(const QList<QString> &featured_tags) {
    m_featured_tags = featured_tags;
    m_featured_tags_isSet = true;
}

bool OAIGif::is_featured_tags_Set() const{
    return m_featured_tags_isSet;
}

bool OAIGif::is_featured_tags_Valid() const{
    return m_featured_tags_isValid;
}

QString OAIGif::getId() const {
    return m_id;
}
void OAIGif::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGif::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGif::is_id_Valid() const{
    return m_id_isValid;
}

OAIGif_images OAIGif::getImages() const {
    return m_images;
}
void OAIGif::setImages(const OAIGif_images &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIGif::is_images_Set() const{
    return m_images_isSet;
}

bool OAIGif::is_images_Valid() const{
    return m_images_isValid;
}

QDateTime OAIGif::getImportDatetime() const {
    return m_import_datetime;
}
void OAIGif::setImportDatetime(const QDateTime &import_datetime) {
    m_import_datetime = import_datetime;
    m_import_datetime_isSet = true;
}

bool OAIGif::is_import_datetime_Set() const{
    return m_import_datetime_isSet;
}

bool OAIGif::is_import_datetime_Valid() const{
    return m_import_datetime_isValid;
}

QString OAIGif::getRating() const {
    return m_rating;
}
void OAIGif::setRating(const QString &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIGif::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIGif::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAIGif::getSlug() const {
    return m_slug;
}
void OAIGif::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIGif::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIGif::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIGif::getSource() const {
    return m_source;
}
void OAIGif::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIGif::is_source_Set() const{
    return m_source_isSet;
}

bool OAIGif::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIGif::getSourcePostUrl() const {
    return m_source_post_url;
}
void OAIGif::setSourcePostUrl(const QString &source_post_url) {
    m_source_post_url = source_post_url;
    m_source_post_url_isSet = true;
}

bool OAIGif::is_source_post_url_Set() const{
    return m_source_post_url_isSet;
}

bool OAIGif::is_source_post_url_Valid() const{
    return m_source_post_url_isValid;
}

QString OAIGif::getSourceTld() const {
    return m_source_tld;
}
void OAIGif::setSourceTld(const QString &source_tld) {
    m_source_tld = source_tld;
    m_source_tld_isSet = true;
}

bool OAIGif::is_source_tld_Set() const{
    return m_source_tld_isSet;
}

bool OAIGif::is_source_tld_Valid() const{
    return m_source_tld_isValid;
}

QList<QString> OAIGif::getTags() const {
    return m_tags;
}
void OAIGif::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGif::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGif::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIGif::getTrendingDatetime() const {
    return m_trending_datetime;
}
void OAIGif::setTrendingDatetime(const QDateTime &trending_datetime) {
    m_trending_datetime = trending_datetime;
    m_trending_datetime_isSet = true;
}

bool OAIGif::is_trending_datetime_Set() const{
    return m_trending_datetime_isSet;
}

bool OAIGif::is_trending_datetime_Valid() const{
    return m_trending_datetime_isValid;
}

QString OAIGif::getType() const {
    return m_type;
}
void OAIGif::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGif::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGif::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIGif::getUpdateDatetime() const {
    return m_update_datetime;
}
void OAIGif::setUpdateDatetime(const QDateTime &update_datetime) {
    m_update_datetime = update_datetime;
    m_update_datetime_isSet = true;
}

bool OAIGif::is_update_datetime_Set() const{
    return m_update_datetime_isSet;
}

bool OAIGif::is_update_datetime_Valid() const{
    return m_update_datetime_isValid;
}

QString OAIGif::getUrl() const {
    return m_url;
}
void OAIGif::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGif::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGif::is_url_Valid() const{
    return m_url_isValid;
}

OAIUser OAIGif::getUser() const {
    return m_user;
}
void OAIGif::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGif::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGif::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIGif::getUsername() const {
    return m_username;
}
void OAIGif::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIGif::is_username_Set() const{
    return m_username_isSet;
}

bool OAIGif::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIGif::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitly_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embded_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_post_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_tld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trending_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGif::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
