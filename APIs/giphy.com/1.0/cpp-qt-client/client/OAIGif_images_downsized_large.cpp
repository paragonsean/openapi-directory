/**
 * Giphy API
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGif_images_downsized_large.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGif_images_downsized_large::OAIGif_images_downsized_large(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGif_images_downsized_large::OAIGif_images_downsized_large() {
    this->initializeModel();
}

OAIGif_images_downsized_large::~OAIGif_images_downsized_large() {}

void OAIGif_images_downsized_large::initializeModel() {

    m_frames_isSet = false;
    m_frames_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_mp4_isSet = false;
    m_mp4_isValid = false;

    m_mp4_size_isSet = false;
    m_mp4_size_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_webp_isSet = false;
    m_webp_isValid = false;

    m_webp_size_isSet = false;
    m_webp_size_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIGif_images_downsized_large::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGif_images_downsized_large::fromJsonObject(QJsonObject json) {

    m_frames_isValid = ::OpenAPI::fromJsonValue(m_frames, json[QString("frames")]);
    m_frames_isSet = !json[QString("frames")].isNull() && m_frames_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_mp4_isValid = ::OpenAPI::fromJsonValue(m_mp4, json[QString("mp4")]);
    m_mp4_isSet = !json[QString("mp4")].isNull() && m_mp4_isValid;

    m_mp4_size_isValid = ::OpenAPI::fromJsonValue(m_mp4_size, json[QString("mp4_size")]);
    m_mp4_size_isSet = !json[QString("mp4_size")].isNull() && m_mp4_size_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_webp_isValid = ::OpenAPI::fromJsonValue(m_webp, json[QString("webp")]);
    m_webp_isSet = !json[QString("webp")].isNull() && m_webp_isValid;

    m_webp_size_isValid = ::OpenAPI::fromJsonValue(m_webp_size, json[QString("webp_size")]);
    m_webp_size_isSet = !json[QString("webp_size")].isNull() && m_webp_size_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIGif_images_downsized_large::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGif_images_downsized_large::asJsonObject() const {
    QJsonObject obj;
    if (m_frames_isSet) {
        obj.insert(QString("frames"), ::OpenAPI::toJsonValue(m_frames));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_mp4_isSet) {
        obj.insert(QString("mp4"), ::OpenAPI::toJsonValue(m_mp4));
    }
    if (m_mp4_size_isSet) {
        obj.insert(QString("mp4_size"), ::OpenAPI::toJsonValue(m_mp4_size));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_webp_isSet) {
        obj.insert(QString("webp"), ::OpenAPI::toJsonValue(m_webp));
    }
    if (m_webp_size_isSet) {
        obj.insert(QString("webp_size"), ::OpenAPI::toJsonValue(m_webp_size));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIGif_images_downsized_large::getFrames() const {
    return m_frames;
}
void OAIGif_images_downsized_large::setFrames(const QString &frames) {
    m_frames = frames;
    m_frames_isSet = true;
}

bool OAIGif_images_downsized_large::is_frames_Set() const{
    return m_frames_isSet;
}

bool OAIGif_images_downsized_large::is_frames_Valid() const{
    return m_frames_isValid;
}

QString OAIGif_images_downsized_large::getHeight() const {
    return m_height;
}
void OAIGif_images_downsized_large::setHeight(const QString &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIGif_images_downsized_large::is_height_Set() const{
    return m_height_isSet;
}

bool OAIGif_images_downsized_large::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIGif_images_downsized_large::getMp4() const {
    return m_mp4;
}
void OAIGif_images_downsized_large::setMp4(const QString &mp4) {
    m_mp4 = mp4;
    m_mp4_isSet = true;
}

bool OAIGif_images_downsized_large::is_mp4_Set() const{
    return m_mp4_isSet;
}

bool OAIGif_images_downsized_large::is_mp4_Valid() const{
    return m_mp4_isValid;
}

QString OAIGif_images_downsized_large::getMp4Size() const {
    return m_mp4_size;
}
void OAIGif_images_downsized_large::setMp4Size(const QString &mp4_size) {
    m_mp4_size = mp4_size;
    m_mp4_size_isSet = true;
}

bool OAIGif_images_downsized_large::is_mp4_size_Set() const{
    return m_mp4_size_isSet;
}

bool OAIGif_images_downsized_large::is_mp4_size_Valid() const{
    return m_mp4_size_isValid;
}

QString OAIGif_images_downsized_large::getSize() const {
    return m_size;
}
void OAIGif_images_downsized_large::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIGif_images_downsized_large::is_size_Set() const{
    return m_size_isSet;
}

bool OAIGif_images_downsized_large::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIGif_images_downsized_large::getUrl() const {
    return m_url;
}
void OAIGif_images_downsized_large::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGif_images_downsized_large::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGif_images_downsized_large::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIGif_images_downsized_large::getWebp() const {
    return m_webp;
}
void OAIGif_images_downsized_large::setWebp(const QString &webp) {
    m_webp = webp;
    m_webp_isSet = true;
}

bool OAIGif_images_downsized_large::is_webp_Set() const{
    return m_webp_isSet;
}

bool OAIGif_images_downsized_large::is_webp_Valid() const{
    return m_webp_isValid;
}

QString OAIGif_images_downsized_large::getWebpSize() const {
    return m_webp_size;
}
void OAIGif_images_downsized_large::setWebpSize(const QString &webp_size) {
    m_webp_size = webp_size;
    m_webp_size_isSet = true;
}

bool OAIGif_images_downsized_large::is_webp_size_Set() const{
    return m_webp_size_isSet;
}

bool OAIGif_images_downsized_large::is_webp_size_Valid() const{
    return m_webp_size_isValid;
}

QString OAIGif_images_downsized_large::getWidth() const {
    return m_width;
}
void OAIGif_images_downsized_large::setWidth(const QString &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIGif_images_downsized_large::is_width_Set() const{
    return m_width_isSet;
}

bool OAIGif_images_downsized_large::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIGif_images_downsized_large::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp4_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webp_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGif_images_downsized_large::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
