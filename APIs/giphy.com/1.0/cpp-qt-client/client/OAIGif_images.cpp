/**
 * Giphy API
 * Giphy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@giphy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGif_images.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGif_images::OAIGif_images(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGif_images::OAIGif_images() {
    this->initializeModel();
}

OAIGif_images::~OAIGif_images() {}

void OAIGif_images::initializeModel() {

    m_downsized_isSet = false;
    m_downsized_isValid = false;

    m_downsized_large_isSet = false;
    m_downsized_large_isValid = false;

    m_downsized_medium_isSet = false;
    m_downsized_medium_isValid = false;

    m_downsized_small_isSet = false;
    m_downsized_small_isValid = false;

    m_downsized_still_isSet = false;
    m_downsized_still_isValid = false;

    m_fixed_height_isSet = false;
    m_fixed_height_isValid = false;

    m_fixed_height_downsampled_isSet = false;
    m_fixed_height_downsampled_isValid = false;

    m_fixed_height_small_isSet = false;
    m_fixed_height_small_isValid = false;

    m_fixed_height_small_still_isSet = false;
    m_fixed_height_small_still_isValid = false;

    m_fixed_height_still_isSet = false;
    m_fixed_height_still_isValid = false;

    m_fixed_width_isSet = false;
    m_fixed_width_isValid = false;

    m_fixed_width_downsampled_isSet = false;
    m_fixed_width_downsampled_isValid = false;

    m_fixed_width_small_isSet = false;
    m_fixed_width_small_isValid = false;

    m_fixed_width_small_still_isSet = false;
    m_fixed_width_small_still_isValid = false;

    m_fixed_width_still_isSet = false;
    m_fixed_width_still_isValid = false;

    m_looping_isSet = false;
    m_looping_isValid = false;

    m_original_isSet = false;
    m_original_isValid = false;

    m_original_still_isSet = false;
    m_original_still_isValid = false;

    m_preview_isSet = false;
    m_preview_isValid = false;

    m_preview_gif_isSet = false;
    m_preview_gif_isValid = false;
}

void OAIGif_images::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGif_images::fromJsonObject(QJsonObject json) {

    m_downsized_isValid = ::OpenAPI::fromJsonValue(m_downsized, json[QString("downsized")]);
    m_downsized_isSet = !json[QString("downsized")].isNull() && m_downsized_isValid;

    m_downsized_large_isValid = ::OpenAPI::fromJsonValue(m_downsized_large, json[QString("downsized_large")]);
    m_downsized_large_isSet = !json[QString("downsized_large")].isNull() && m_downsized_large_isValid;

    m_downsized_medium_isValid = ::OpenAPI::fromJsonValue(m_downsized_medium, json[QString("downsized_medium")]);
    m_downsized_medium_isSet = !json[QString("downsized_medium")].isNull() && m_downsized_medium_isValid;

    m_downsized_small_isValid = ::OpenAPI::fromJsonValue(m_downsized_small, json[QString("downsized_small")]);
    m_downsized_small_isSet = !json[QString("downsized_small")].isNull() && m_downsized_small_isValid;

    m_downsized_still_isValid = ::OpenAPI::fromJsonValue(m_downsized_still, json[QString("downsized_still")]);
    m_downsized_still_isSet = !json[QString("downsized_still")].isNull() && m_downsized_still_isValid;

    m_fixed_height_isValid = ::OpenAPI::fromJsonValue(m_fixed_height, json[QString("fixed_height")]);
    m_fixed_height_isSet = !json[QString("fixed_height")].isNull() && m_fixed_height_isValid;

    m_fixed_height_downsampled_isValid = ::OpenAPI::fromJsonValue(m_fixed_height_downsampled, json[QString("fixed_height_downsampled")]);
    m_fixed_height_downsampled_isSet = !json[QString("fixed_height_downsampled")].isNull() && m_fixed_height_downsampled_isValid;

    m_fixed_height_small_isValid = ::OpenAPI::fromJsonValue(m_fixed_height_small, json[QString("fixed_height_small")]);
    m_fixed_height_small_isSet = !json[QString("fixed_height_small")].isNull() && m_fixed_height_small_isValid;

    m_fixed_height_small_still_isValid = ::OpenAPI::fromJsonValue(m_fixed_height_small_still, json[QString("fixed_height_small_still")]);
    m_fixed_height_small_still_isSet = !json[QString("fixed_height_small_still")].isNull() && m_fixed_height_small_still_isValid;

    m_fixed_height_still_isValid = ::OpenAPI::fromJsonValue(m_fixed_height_still, json[QString("fixed_height_still")]);
    m_fixed_height_still_isSet = !json[QString("fixed_height_still")].isNull() && m_fixed_height_still_isValid;

    m_fixed_width_isValid = ::OpenAPI::fromJsonValue(m_fixed_width, json[QString("fixed_width")]);
    m_fixed_width_isSet = !json[QString("fixed_width")].isNull() && m_fixed_width_isValid;

    m_fixed_width_downsampled_isValid = ::OpenAPI::fromJsonValue(m_fixed_width_downsampled, json[QString("fixed_width_downsampled")]);
    m_fixed_width_downsampled_isSet = !json[QString("fixed_width_downsampled")].isNull() && m_fixed_width_downsampled_isValid;

    m_fixed_width_small_isValid = ::OpenAPI::fromJsonValue(m_fixed_width_small, json[QString("fixed_width_small")]);
    m_fixed_width_small_isSet = !json[QString("fixed_width_small")].isNull() && m_fixed_width_small_isValid;

    m_fixed_width_small_still_isValid = ::OpenAPI::fromJsonValue(m_fixed_width_small_still, json[QString("fixed_width_small_still")]);
    m_fixed_width_small_still_isSet = !json[QString("fixed_width_small_still")].isNull() && m_fixed_width_small_still_isValid;

    m_fixed_width_still_isValid = ::OpenAPI::fromJsonValue(m_fixed_width_still, json[QString("fixed_width_still")]);
    m_fixed_width_still_isSet = !json[QString("fixed_width_still")].isNull() && m_fixed_width_still_isValid;

    m_looping_isValid = ::OpenAPI::fromJsonValue(m_looping, json[QString("looping")]);
    m_looping_isSet = !json[QString("looping")].isNull() && m_looping_isValid;

    m_original_isValid = ::OpenAPI::fromJsonValue(m_original, json[QString("original")]);
    m_original_isSet = !json[QString("original")].isNull() && m_original_isValid;

    m_original_still_isValid = ::OpenAPI::fromJsonValue(m_original_still, json[QString("original_still")]);
    m_original_still_isSet = !json[QString("original_still")].isNull() && m_original_still_isValid;

    m_preview_isValid = ::OpenAPI::fromJsonValue(m_preview, json[QString("preview")]);
    m_preview_isSet = !json[QString("preview")].isNull() && m_preview_isValid;

    m_preview_gif_isValid = ::OpenAPI::fromJsonValue(m_preview_gif, json[QString("preview_gif")]);
    m_preview_gif_isSet = !json[QString("preview_gif")].isNull() && m_preview_gif_isValid;
}

QString OAIGif_images::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGif_images::asJsonObject() const {
    QJsonObject obj;
    if (m_downsized.isSet()) {
        obj.insert(QString("downsized"), ::OpenAPI::toJsonValue(m_downsized));
    }
    if (m_downsized_large.isSet()) {
        obj.insert(QString("downsized_large"), ::OpenAPI::toJsonValue(m_downsized_large));
    }
    if (m_downsized_medium.isSet()) {
        obj.insert(QString("downsized_medium"), ::OpenAPI::toJsonValue(m_downsized_medium));
    }
    if (m_downsized_small.isSet()) {
        obj.insert(QString("downsized_small"), ::OpenAPI::toJsonValue(m_downsized_small));
    }
    if (m_downsized_still.isSet()) {
        obj.insert(QString("downsized_still"), ::OpenAPI::toJsonValue(m_downsized_still));
    }
    if (m_fixed_height.isSet()) {
        obj.insert(QString("fixed_height"), ::OpenAPI::toJsonValue(m_fixed_height));
    }
    if (m_fixed_height_downsampled.isSet()) {
        obj.insert(QString("fixed_height_downsampled"), ::OpenAPI::toJsonValue(m_fixed_height_downsampled));
    }
    if (m_fixed_height_small.isSet()) {
        obj.insert(QString("fixed_height_small"), ::OpenAPI::toJsonValue(m_fixed_height_small));
    }
    if (m_fixed_height_small_still.isSet()) {
        obj.insert(QString("fixed_height_small_still"), ::OpenAPI::toJsonValue(m_fixed_height_small_still));
    }
    if (m_fixed_height_still.isSet()) {
        obj.insert(QString("fixed_height_still"), ::OpenAPI::toJsonValue(m_fixed_height_still));
    }
    if (m_fixed_width.isSet()) {
        obj.insert(QString("fixed_width"), ::OpenAPI::toJsonValue(m_fixed_width));
    }
    if (m_fixed_width_downsampled.isSet()) {
        obj.insert(QString("fixed_width_downsampled"), ::OpenAPI::toJsonValue(m_fixed_width_downsampled));
    }
    if (m_fixed_width_small.isSet()) {
        obj.insert(QString("fixed_width_small"), ::OpenAPI::toJsonValue(m_fixed_width_small));
    }
    if (m_fixed_width_small_still.isSet()) {
        obj.insert(QString("fixed_width_small_still"), ::OpenAPI::toJsonValue(m_fixed_width_small_still));
    }
    if (m_fixed_width_still.isSet()) {
        obj.insert(QString("fixed_width_still"), ::OpenAPI::toJsonValue(m_fixed_width_still));
    }
    if (m_looping.isSet()) {
        obj.insert(QString("looping"), ::OpenAPI::toJsonValue(m_looping));
    }
    if (m_original.isSet()) {
        obj.insert(QString("original"), ::OpenAPI::toJsonValue(m_original));
    }
    if (m_original_still.isSet()) {
        obj.insert(QString("original_still"), ::OpenAPI::toJsonValue(m_original_still));
    }
    if (m_preview.isSet()) {
        obj.insert(QString("preview"), ::OpenAPI::toJsonValue(m_preview));
    }
    if (m_preview_gif.isSet()) {
        obj.insert(QString("preview_gif"), ::OpenAPI::toJsonValue(m_preview_gif));
    }
    return obj;
}

OAIGif_images_downsized OAIGif_images::getDownsized() const {
    return m_downsized;
}
void OAIGif_images::setDownsized(const OAIGif_images_downsized &downsized) {
    m_downsized = downsized;
    m_downsized_isSet = true;
}

bool OAIGif_images::is_downsized_Set() const{
    return m_downsized_isSet;
}

bool OAIGif_images::is_downsized_Valid() const{
    return m_downsized_isValid;
}

OAIGif_images_downsized_large OAIGif_images::getDownsizedLarge() const {
    return m_downsized_large;
}
void OAIGif_images::setDownsizedLarge(const OAIGif_images_downsized_large &downsized_large) {
    m_downsized_large = downsized_large;
    m_downsized_large_isSet = true;
}

bool OAIGif_images::is_downsized_large_Set() const{
    return m_downsized_large_isSet;
}

bool OAIGif_images::is_downsized_large_Valid() const{
    return m_downsized_large_isValid;
}

OAIGif_images_downsized_medium OAIGif_images::getDownsizedMedium() const {
    return m_downsized_medium;
}
void OAIGif_images::setDownsizedMedium(const OAIGif_images_downsized_medium &downsized_medium) {
    m_downsized_medium = downsized_medium;
    m_downsized_medium_isSet = true;
}

bool OAIGif_images::is_downsized_medium_Set() const{
    return m_downsized_medium_isSet;
}

bool OAIGif_images::is_downsized_medium_Valid() const{
    return m_downsized_medium_isValid;
}

OAIGif_images_downsized_small OAIGif_images::getDownsizedSmall() const {
    return m_downsized_small;
}
void OAIGif_images::setDownsizedSmall(const OAIGif_images_downsized_small &downsized_small) {
    m_downsized_small = downsized_small;
    m_downsized_small_isSet = true;
}

bool OAIGif_images::is_downsized_small_Set() const{
    return m_downsized_small_isSet;
}

bool OAIGif_images::is_downsized_small_Valid() const{
    return m_downsized_small_isValid;
}

OAIGif_images_downsized_still OAIGif_images::getDownsizedStill() const {
    return m_downsized_still;
}
void OAIGif_images::setDownsizedStill(const OAIGif_images_downsized_still &downsized_still) {
    m_downsized_still = downsized_still;
    m_downsized_still_isSet = true;
}

bool OAIGif_images::is_downsized_still_Set() const{
    return m_downsized_still_isSet;
}

bool OAIGif_images::is_downsized_still_Valid() const{
    return m_downsized_still_isValid;
}

OAIGif_images_fixed_height OAIGif_images::getFixedHeight() const {
    return m_fixed_height;
}
void OAIGif_images::setFixedHeight(const OAIGif_images_fixed_height &fixed_height) {
    m_fixed_height = fixed_height;
    m_fixed_height_isSet = true;
}

bool OAIGif_images::is_fixed_height_Set() const{
    return m_fixed_height_isSet;
}

bool OAIGif_images::is_fixed_height_Valid() const{
    return m_fixed_height_isValid;
}

OAIGif_images_fixed_height_downsampled OAIGif_images::getFixedHeightDownsampled() const {
    return m_fixed_height_downsampled;
}
void OAIGif_images::setFixedHeightDownsampled(const OAIGif_images_fixed_height_downsampled &fixed_height_downsampled) {
    m_fixed_height_downsampled = fixed_height_downsampled;
    m_fixed_height_downsampled_isSet = true;
}

bool OAIGif_images::is_fixed_height_downsampled_Set() const{
    return m_fixed_height_downsampled_isSet;
}

bool OAIGif_images::is_fixed_height_downsampled_Valid() const{
    return m_fixed_height_downsampled_isValid;
}

OAIGif_images_fixed_height_small OAIGif_images::getFixedHeightSmall() const {
    return m_fixed_height_small;
}
void OAIGif_images::setFixedHeightSmall(const OAIGif_images_fixed_height_small &fixed_height_small) {
    m_fixed_height_small = fixed_height_small;
    m_fixed_height_small_isSet = true;
}

bool OAIGif_images::is_fixed_height_small_Set() const{
    return m_fixed_height_small_isSet;
}

bool OAIGif_images::is_fixed_height_small_Valid() const{
    return m_fixed_height_small_isValid;
}

OAIGif_images_fixed_height_small_still OAIGif_images::getFixedHeightSmallStill() const {
    return m_fixed_height_small_still;
}
void OAIGif_images::setFixedHeightSmallStill(const OAIGif_images_fixed_height_small_still &fixed_height_small_still) {
    m_fixed_height_small_still = fixed_height_small_still;
    m_fixed_height_small_still_isSet = true;
}

bool OAIGif_images::is_fixed_height_small_still_Set() const{
    return m_fixed_height_small_still_isSet;
}

bool OAIGif_images::is_fixed_height_small_still_Valid() const{
    return m_fixed_height_small_still_isValid;
}

OAIGif_images_fixed_height_still OAIGif_images::getFixedHeightStill() const {
    return m_fixed_height_still;
}
void OAIGif_images::setFixedHeightStill(const OAIGif_images_fixed_height_still &fixed_height_still) {
    m_fixed_height_still = fixed_height_still;
    m_fixed_height_still_isSet = true;
}

bool OAIGif_images::is_fixed_height_still_Set() const{
    return m_fixed_height_still_isSet;
}

bool OAIGif_images::is_fixed_height_still_Valid() const{
    return m_fixed_height_still_isValid;
}

OAIGif_images_fixed_width OAIGif_images::getFixedWidth() const {
    return m_fixed_width;
}
void OAIGif_images::setFixedWidth(const OAIGif_images_fixed_width &fixed_width) {
    m_fixed_width = fixed_width;
    m_fixed_width_isSet = true;
}

bool OAIGif_images::is_fixed_width_Set() const{
    return m_fixed_width_isSet;
}

bool OAIGif_images::is_fixed_width_Valid() const{
    return m_fixed_width_isValid;
}

OAIGif_images_fixed_width_downsampled OAIGif_images::getFixedWidthDownsampled() const {
    return m_fixed_width_downsampled;
}
void OAIGif_images::setFixedWidthDownsampled(const OAIGif_images_fixed_width_downsampled &fixed_width_downsampled) {
    m_fixed_width_downsampled = fixed_width_downsampled;
    m_fixed_width_downsampled_isSet = true;
}

bool OAIGif_images::is_fixed_width_downsampled_Set() const{
    return m_fixed_width_downsampled_isSet;
}

bool OAIGif_images::is_fixed_width_downsampled_Valid() const{
    return m_fixed_width_downsampled_isValid;
}

OAIGif_images_fixed_width_small OAIGif_images::getFixedWidthSmall() const {
    return m_fixed_width_small;
}
void OAIGif_images::setFixedWidthSmall(const OAIGif_images_fixed_width_small &fixed_width_small) {
    m_fixed_width_small = fixed_width_small;
    m_fixed_width_small_isSet = true;
}

bool OAIGif_images::is_fixed_width_small_Set() const{
    return m_fixed_width_small_isSet;
}

bool OAIGif_images::is_fixed_width_small_Valid() const{
    return m_fixed_width_small_isValid;
}

OAIGif_images_fixed_width_small_still OAIGif_images::getFixedWidthSmallStill() const {
    return m_fixed_width_small_still;
}
void OAIGif_images::setFixedWidthSmallStill(const OAIGif_images_fixed_width_small_still &fixed_width_small_still) {
    m_fixed_width_small_still = fixed_width_small_still;
    m_fixed_width_small_still_isSet = true;
}

bool OAIGif_images::is_fixed_width_small_still_Set() const{
    return m_fixed_width_small_still_isSet;
}

bool OAIGif_images::is_fixed_width_small_still_Valid() const{
    return m_fixed_width_small_still_isValid;
}

OAIGif_images_fixed_width_still OAIGif_images::getFixedWidthStill() const {
    return m_fixed_width_still;
}
void OAIGif_images::setFixedWidthStill(const OAIGif_images_fixed_width_still &fixed_width_still) {
    m_fixed_width_still = fixed_width_still;
    m_fixed_width_still_isSet = true;
}

bool OAIGif_images::is_fixed_width_still_Set() const{
    return m_fixed_width_still_isSet;
}

bool OAIGif_images::is_fixed_width_still_Valid() const{
    return m_fixed_width_still_isValid;
}

OAIGif_images_looping OAIGif_images::getLooping() const {
    return m_looping;
}
void OAIGif_images::setLooping(const OAIGif_images_looping &looping) {
    m_looping = looping;
    m_looping_isSet = true;
}

bool OAIGif_images::is_looping_Set() const{
    return m_looping_isSet;
}

bool OAIGif_images::is_looping_Valid() const{
    return m_looping_isValid;
}

OAIGif_images_original OAIGif_images::getOriginal() const {
    return m_original;
}
void OAIGif_images::setOriginal(const OAIGif_images_original &original) {
    m_original = original;
    m_original_isSet = true;
}

bool OAIGif_images::is_original_Set() const{
    return m_original_isSet;
}

bool OAIGif_images::is_original_Valid() const{
    return m_original_isValid;
}

OAIGif_images_original_still OAIGif_images::getOriginalStill() const {
    return m_original_still;
}
void OAIGif_images::setOriginalStill(const OAIGif_images_original_still &original_still) {
    m_original_still = original_still;
    m_original_still_isSet = true;
}

bool OAIGif_images::is_original_still_Set() const{
    return m_original_still_isSet;
}

bool OAIGif_images::is_original_still_Valid() const{
    return m_original_still_isValid;
}

OAIGif_images_preview OAIGif_images::getPreview() const {
    return m_preview;
}
void OAIGif_images::setPreview(const OAIGif_images_preview &preview) {
    m_preview = preview;
    m_preview_isSet = true;
}

bool OAIGif_images::is_preview_Set() const{
    return m_preview_isSet;
}

bool OAIGif_images::is_preview_Valid() const{
    return m_preview_isValid;
}

OAIGif_images_preview_gif OAIGif_images::getPreviewGif() const {
    return m_preview_gif;
}
void OAIGif_images::setPreviewGif(const OAIGif_images_preview_gif &preview_gif) {
    m_preview_gif = preview_gif;
    m_preview_gif_isSet = true;
}

bool OAIGif_images::is_preview_gif_Set() const{
    return m_preview_gif_isSet;
}

bool OAIGif_images::is_preview_gif_Valid() const{
    return m_preview_gif_isValid;
}

bool OAIGif_images::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_downsized.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_downsized_large.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_downsized_medium.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_downsized_small.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_downsized_still.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_height.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_height_downsampled.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_height_small.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_height_small_still.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_height_still.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_width.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_width_downsampled.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_width_small.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_width_small_still.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_width_still.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_looping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_still.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_gif.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGif_images::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
