# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Pagination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, offset: int=None, total_count: int=None):
        """Pagination - a model defined in OpenAPI

        :param count: The count of this Pagination.
        :param offset: The offset of this Pagination.
        :param total_count: The total_count of this Pagination.
        """
        self.openapi_types = {
            'count': int,
            'offset': int,
            'total_count': int
        }

        self.attribute_map = {
            'count': 'count',
            'offset': 'offset',
            'total_count': 'total_count'
        }

        self._count = count
        self._offset = offset
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pagination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pagination of this Pagination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Pagination.

        Total number of items returned.

        :return: The count of this Pagination.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Pagination.

        Total number of items returned.

        :param count: The count of this Pagination.
        :type count: int
        """

        self._count = count

    @property
    def offset(self):
        """Gets the offset of this Pagination.

        Position in pagination.

        :return: The offset of this Pagination.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Pagination.

        Position in pagination.

        :param offset: The offset of this Pagination.
        :type offset: int
        """

        self._offset = offset

    @property
    def total_count(self):
        """Gets the total_count of this Pagination.

        Total number of items available.

        :return: The total_count of this Pagination.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this Pagination.

        Total number of items available.

        :param total_count: The total_count of this Pagination.
        :type total_count: int
        """

        self._total_count = total_count
