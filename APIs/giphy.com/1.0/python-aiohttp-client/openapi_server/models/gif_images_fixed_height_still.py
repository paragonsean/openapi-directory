# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GifImagesFixedHeightStill(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frames: str=None, height: str=None, mp4: str=None, mp4_size: str=None, size: str=None, url: str=None, webp: str=None, webp_size: str=None, width: str=None):
        """GifImagesFixedHeightStill - a model defined in OpenAPI

        :param frames: The frames of this GifImagesFixedHeightStill.
        :param height: The height of this GifImagesFixedHeightStill.
        :param mp4: The mp4 of this GifImagesFixedHeightStill.
        :param mp4_size: The mp4_size of this GifImagesFixedHeightStill.
        :param size: The size of this GifImagesFixedHeightStill.
        :param url: The url of this GifImagesFixedHeightStill.
        :param webp: The webp of this GifImagesFixedHeightStill.
        :param webp_size: The webp_size of this GifImagesFixedHeightStill.
        :param width: The width of this GifImagesFixedHeightStill.
        """
        self.openapi_types = {
            'frames': str,
            'height': str,
            'mp4': str,
            'mp4_size': str,
            'size': str,
            'url': str,
            'webp': str,
            'webp_size': str,
            'width': str
        }

        self.attribute_map = {
            'frames': 'frames',
            'height': 'height',
            'mp4': 'mp4',
            'mp4_size': 'mp4_size',
            'size': 'size',
            'url': 'url',
            'webp': 'webp',
            'webp_size': 'webp_size',
            'width': 'width'
        }

        self._frames = frames
        self._height = height
        self._mp4 = mp4
        self._mp4_size = mp4_size
        self._size = size
        self._url = url
        self._webp = webp
        self._webp_size = webp_size
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GifImagesFixedHeightStill':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Gif_images_fixed_height_still of this GifImagesFixedHeightStill.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frames(self):
        """Gets the frames of this GifImagesFixedHeightStill.

        The number of frames in this GIF.

        :return: The frames of this GifImagesFixedHeightStill.
        :rtype: str
        """
        return self._frames

    @frames.setter
    def frames(self, frames):
        """Sets the frames of this GifImagesFixedHeightStill.

        The number of frames in this GIF.

        :param frames: The frames of this GifImagesFixedHeightStill.
        :type frames: str
        """

        self._frames = frames

    @property
    def height(self):
        """Gets the height of this GifImagesFixedHeightStill.

        The height of this GIF in pixels.

        :return: The height of this GifImagesFixedHeightStill.
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this GifImagesFixedHeightStill.

        The height of this GIF in pixels.

        :param height: The height of this GifImagesFixedHeightStill.
        :type height: str
        """

        self._height = height

    @property
    def mp4(self):
        """Gets the mp4 of this GifImagesFixedHeightStill.

        The URL for this GIF in .MP4 format.

        :return: The mp4 of this GifImagesFixedHeightStill.
        :rtype: str
        """
        return self._mp4

    @mp4.setter
    def mp4(self, mp4):
        """Sets the mp4 of this GifImagesFixedHeightStill.

        The URL for this GIF in .MP4 format.

        :param mp4: The mp4 of this GifImagesFixedHeightStill.
        :type mp4: str
        """

        self._mp4 = mp4

    @property
    def mp4_size(self):
        """Gets the mp4_size of this GifImagesFixedHeightStill.

        The size in bytes of the .MP4 file corresponding to this GIF.

        :return: The mp4_size of this GifImagesFixedHeightStill.
        :rtype: str
        """
        return self._mp4_size

    @mp4_size.setter
    def mp4_size(self, mp4_size):
        """Sets the mp4_size of this GifImagesFixedHeightStill.

        The size in bytes of the .MP4 file corresponding to this GIF.

        :param mp4_size: The mp4_size of this GifImagesFixedHeightStill.
        :type mp4_size: str
        """

        self._mp4_size = mp4_size

    @property
    def size(self):
        """Gets the size of this GifImagesFixedHeightStill.

        The size of this GIF in bytes.

        :return: The size of this GifImagesFixedHeightStill.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GifImagesFixedHeightStill.

        The size of this GIF in bytes.

        :param size: The size of this GifImagesFixedHeightStill.
        :type size: str
        """

        self._size = size

    @property
    def url(self):
        """Gets the url of this GifImagesFixedHeightStill.

        The publicly-accessible direct URL for this GIF.

        :return: The url of this GifImagesFixedHeightStill.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GifImagesFixedHeightStill.

        The publicly-accessible direct URL for this GIF.

        :param url: The url of this GifImagesFixedHeightStill.
        :type url: str
        """

        self._url = url

    @property
    def webp(self):
        """Gets the webp of this GifImagesFixedHeightStill.

        The URL for this GIF in .webp format.

        :return: The webp of this GifImagesFixedHeightStill.
        :rtype: str
        """
        return self._webp

    @webp.setter
    def webp(self, webp):
        """Sets the webp of this GifImagesFixedHeightStill.

        The URL for this GIF in .webp format.

        :param webp: The webp of this GifImagesFixedHeightStill.
        :type webp: str
        """

        self._webp = webp

    @property
    def webp_size(self):
        """Gets the webp_size of this GifImagesFixedHeightStill.

        The size in bytes of the .webp file corresponding to this GIF.

        :return: The webp_size of this GifImagesFixedHeightStill.
        :rtype: str
        """
        return self._webp_size

    @webp_size.setter
    def webp_size(self, webp_size):
        """Sets the webp_size of this GifImagesFixedHeightStill.

        The size in bytes of the .webp file corresponding to this GIF.

        :param webp_size: The webp_size of this GifImagesFixedHeightStill.
        :type webp_size: str
        """

        self._webp_size = webp_size

    @property
    def width(self):
        """Gets the width of this GifImagesFixedHeightStill.

        The width of this GIF in pixels.

        :return: The width of this GifImagesFixedHeightStill.
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this GifImagesFixedHeightStill.

        The width of this GIF in pixels.

        :param width: The width of this GifImagesFixedHeightStill.
        :type width: str
        """

        self._width = width
