# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, banner_url: str=None, display_name: str=None, profile_url: str=None, twitter: str=None, username: str=None):
        """User - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this User.
        :param banner_url: The banner_url of this User.
        :param display_name: The display_name of this User.
        :param profile_url: The profile_url of this User.
        :param twitter: The twitter of this User.
        :param username: The username of this User.
        """
        self.openapi_types = {
            'avatar_url': str,
            'banner_url': str,
            'display_name': str,
            'profile_url': str,
            'twitter': str,
            'username': str
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'banner_url': 'banner_url',
            'display_name': 'display_name',
            'profile_url': 'profile_url',
            'twitter': 'twitter',
            'username': 'username'
        }

        self._avatar_url = avatar_url
        self._banner_url = banner_url
        self._display_name = display_name
        self._profile_url = profile_url
        self._twitter = twitter
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this User.

        The URL for this user's avatar image.

        :return: The avatar_url of this User.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this User.

        The URL for this user's avatar image.

        :param avatar_url: The avatar_url of this User.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def banner_url(self):
        """Gets the banner_url of this User.

        The URL for the banner image that appears atop this user's profile page.

        :return: The banner_url of this User.
        :rtype: str
        """
        return self._banner_url

    @banner_url.setter
    def banner_url(self, banner_url):
        """Sets the banner_url of this User.

        The URL for the banner image that appears atop this user's profile page.

        :param banner_url: The banner_url of this User.
        :type banner_url: str
        """

        self._banner_url = banner_url

    @property
    def display_name(self):
        """Gets the display_name of this User.

        The display name associated with this user (contains formatting the base username might not).

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        The display name associated with this user (contains formatting the base username might not).

        :param display_name: The display_name of this User.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def profile_url(self):
        """Gets the profile_url of this User.

        The URL for this user's profile.

        :return: The profile_url of this User.
        :rtype: str
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url):
        """Sets the profile_url of this User.

        The URL for this user's profile.

        :param profile_url: The profile_url of this User.
        :type profile_url: str
        """

        self._profile_url = profile_url

    @property
    def twitter(self):
        """Gets the twitter of this User.

        The Twitter username associated with this user, if applicable.

        :return: The twitter of this User.
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this User.

        The Twitter username associated with this user, if applicable.

        :param twitter: The twitter of this User.
        :type twitter: str
        """

        self._twitter = twitter

    @property
    def username(self):
        """Gets the username of this User.

        The username associated with this user.

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        The username associated with this user.

        :param username: The username of this User.
        :type username: str
        """

        self._username = username
