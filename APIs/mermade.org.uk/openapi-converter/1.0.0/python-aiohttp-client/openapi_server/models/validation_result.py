# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, openapi: str=None):
        """ValidationResult - a model defined in OpenAPI

        :param openapi: The openapi of this ValidationResult.
        """
        self.openapi_types = {
            'openapi': str
        }

        self.attribute_map = {
            'openapi': 'openapi'
        }

        self._openapi = openapi

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The validationResult of this ValidationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def openapi(self):
        """Gets the openapi of this ValidationResult.


        :return: The openapi of this ValidationResult.
        :rtype: str
        """
        return self._openapi

    @openapi.setter
    def openapi(self, openapi):
        """Sets the openapi of this ValidationResult.


        :param openapi: The openapi of this ValidationResult.
        :type openapi: str
        """
        if openapi is None:
            raise ValueError("Invalid value for `openapi`, must not be `None`")

        self._openapi = openapi
