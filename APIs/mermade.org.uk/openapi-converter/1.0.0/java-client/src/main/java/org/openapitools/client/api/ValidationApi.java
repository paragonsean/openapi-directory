/*
 * Swagger2OpenAPI Converter
 * Converter and validator for Swagger 2.0 to OpenAPI 3.0.x definitions
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.net.URI;
import org.openapitools.client.model.ValidationResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ValidationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ValidationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ValidationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBadge
     * @param url The URL to retrieve the OpenAPI 3.0.x definition from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 301 </td><td> Moved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBadgeCall(URI url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/badge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBadgeValidateBeforeCall(URI url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getBadge(Async)");
        }

        return getBadgeCall(url, _callback);

    }

    /**
     * Return a redirect to a badge svg file depending on a source definition&#39;s validity
     * 
     * @param url The URL to retrieve the OpenAPI 3.0.x definition from (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 301 </td><td> Moved </td><td>  -  </td></tr>
     </table>
     */
    public void getBadge(URI url) throws ApiException {
        getBadgeWithHttpInfo(url);
    }

    /**
     * Return a redirect to a badge svg file depending on a source definition&#39;s validity
     * 
     * @param url The URL to retrieve the OpenAPI 3.0.x definition from (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 301 </td><td> Moved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBadgeWithHttpInfo(URI url) throws ApiException {
        okhttp3.Call localVarCall = getBadgeValidateBeforeCall(url, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return a redirect to a badge svg file depending on a source definition&#39;s validity (asynchronously)
     * 
     * @param url The URL to retrieve the OpenAPI 3.0.x definition from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 301 </td><td> Moved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBadgeAsync(URI url, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBadgeValidateBeforeCall(url, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for validate
     * @param filename The file to upload and validate (optional)
     * @param source The text of an OpenAPI 3.0.x definition to validate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateCall(String filename, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filename != null) {
            localVarFormParams.put("filename", filename);
        }

        if (source != null) {
            localVarFormParams.put("source", source);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateValidateBeforeCall(String filename, String source, final ApiCallback _callback) throws ApiException {
        return validateCall(filename, source, _callback);

    }

    /**
     * Validate an OpenAPI 3.0.x definition supplied in the body of the request
     * 
     * @param filename The file to upload and validate (optional)
     * @param source The text of an OpenAPI 3.0.x definition to validate (optional)
     * @return ValidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public ValidationResult validate(String filename, String source) throws ApiException {
        ApiResponse<ValidationResult> localVarResp = validateWithHttpInfo(filename, source);
        return localVarResp.getData();
    }

    /**
     * Validate an OpenAPI 3.0.x definition supplied in the body of the request
     * 
     * @param filename The file to upload and validate (optional)
     * @param source The text of an OpenAPI 3.0.x definition to validate (optional)
     * @return ApiResponse&lt;ValidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidationResult> validateWithHttpInfo(String filename, String source) throws ApiException {
        okhttp3.Call localVarCall = validateValidateBeforeCall(filename, source, null);
        Type localVarReturnType = new TypeToken<ValidationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate an OpenAPI 3.0.x definition supplied in the body of the request (asynchronously)
     * 
     * @param filename The file to upload and validate (optional)
     * @param source The text of an OpenAPI 3.0.x definition to validate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateAsync(String filename, String source, final ApiCallback<ValidationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateValidateBeforeCall(filename, source, _callback);
        Type localVarReturnType = new TypeToken<ValidationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateUrl
     * @param url The URL to retrieve the OpenAPI 3.0.x definition from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateUrlCall(URI url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateUrlValidateBeforeCall(URI url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling validateUrl(Async)");
        }

        return validateUrlCall(url, _callback);

    }

    /**
     * Validate an OpenAPI 3.0.x definition
     * 
     * @param url The URL to retrieve the OpenAPI 3.0.x definition from (required)
     * @return ValidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default </td><td>  -  </td></tr>
     </table>
     */
    public ValidationResult validateUrl(URI url) throws ApiException {
        ApiResponse<ValidationResult> localVarResp = validateUrlWithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * Validate an OpenAPI 3.0.x definition
     * 
     * @param url The URL to retrieve the OpenAPI 3.0.x definition from (required)
     * @return ApiResponse&lt;ValidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidationResult> validateUrlWithHttpInfo(URI url) throws ApiException {
        okhttp3.Call localVarCall = validateUrlValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ValidationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate an OpenAPI 3.0.x definition (asynchronously)
     * 
     * @param url The URL to retrieve the OpenAPI 3.0.x definition from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateUrlAsync(URI url, final ApiCallback<ValidationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateUrlValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ValidationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
