/**
 * Swagger2OpenAPI Converter
 * Converter and validator for Swagger 2.0 to OpenAPI 3.0.x definitions
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ValidationResult from '../model/ValidationResult';

/**
* Validation service.
* @module api/ValidationApi
* @version 1.0.0
*/
export default class ValidationApi {

    /**
    * Constructs a new ValidationApi. 
    * @alias module:api/ValidationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBadge operation.
     * @callback module:api/ValidationApi~getBadgeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a redirect to a badge svg file depending on a source definition's validity
     * 
     * @param {String} url The URL to retrieve the OpenAPI 3.0.x definition from
     * @param {module:api/ValidationApi~getBadgeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBadge(url, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling getBadge");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/badge', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validate operation.
     * @callback module:api/ValidationApi~validateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate an OpenAPI 3.0.x definition supplied in the body of the request
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [filename] The file to upload and validate
     * @param {String} [source] The text of an OpenAPI 3.0.x definition to validate
     * @param {module:api/ValidationApi~validateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidationResult}
     */
    validate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'filename': opts['filename'],
        'source': opts['source']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/x-yaml'];
      let returnType = ValidationResult;
      return this.apiClient.callApi(
        '/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateUrl operation.
     * @callback module:api/ValidationApi~validateUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate an OpenAPI 3.0.x definition
     * 
     * @param {String} url The URL to retrieve the OpenAPI 3.0.x definition from
     * @param {module:api/ValidationApi~validateUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidationResult}
     */
    validateUrl(url, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling validateUrl");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-yaml'];
      let returnType = ValidationResult;
      return this.apiClient.callApi(
        '/validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
