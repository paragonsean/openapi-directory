/**
 * Swagger2OpenAPI Converter
 * Converter and validator for Swagger 2.0 to OpenAPI 3.0.x definitions
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Conversion service.
* @module api/ConversionApi
* @version 1.0.0
*/
export default class ConversionApi {

    /**
    * Constructs a new ConversionApi. 
    * @alias module:api/ConversionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the convert operation.
     * @callback module:api/ConversionApi~convertCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a Swagger 2.0 definition passed in the body to OpenAPI 3.0.x 
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [filename] The file to upload and convert
     * @param {String} [source] The text of a Swagger 2.0 definition to convert
     * @param {module:model/String} [validate] 
     * @param {module:api/ConversionApi~convertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    convert(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'filename': opts['filename'],
        'source': opts['source'],
        'validate': opts['validate']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/x-yaml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/convert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertUrl operation.
     * @callback module:api/ConversionApi~convertUrlCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a Swagger 2.0 definition to OpenAPI 3.0.x from a URL
     * 
     * @param {String} url The URL to retrieve the OpenAPI 2.0 definition from
     * @param {module:api/ConversionApi~convertUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    convertUrl(url, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling convertUrl");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-yaml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/convert', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
