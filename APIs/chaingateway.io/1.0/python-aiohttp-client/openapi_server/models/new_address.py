# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ethereumaddress: str=None, ok: bool=None, password: str=None):
        """NewAddress - a model defined in OpenAPI

        :param ethereumaddress: The ethereumaddress of this NewAddress.
        :param ok: The ok of this NewAddress.
        :param password: The password of this NewAddress.
        """
        self.openapi_types = {
            'ethereumaddress': str,
            'ok': bool,
            'password': str
        }

        self.attribute_map = {
            'ethereumaddress': 'ethereumaddress',
            'ok': 'ok',
            'password': 'password'
        }

        self._ethereumaddress = ethereumaddress
        self._ok = ok
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The newAddress of this NewAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ethereumaddress(self):
        """Gets the ethereumaddress of this NewAddress.


        :return: The ethereumaddress of this NewAddress.
        :rtype: str
        """
        return self._ethereumaddress

    @ethereumaddress.setter
    def ethereumaddress(self, ethereumaddress):
        """Sets the ethereumaddress of this NewAddress.


        :param ethereumaddress: The ethereumaddress of this NewAddress.
        :type ethereumaddress: str
        """
        if ethereumaddress is None:
            raise ValueError("Invalid value for `ethereumaddress`, must not be `None`")

        self._ethereumaddress = ethereumaddress

    @property
    def ok(self):
        """Gets the ok of this NewAddress.


        :return: The ok of this NewAddress.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this NewAddress.


        :param ok: The ok of this NewAddress.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def password(self):
        """Gets the password of this NewAddress.


        :return: The password of this NewAddress.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this NewAddress.


        :param password: The password of this NewAddress.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
