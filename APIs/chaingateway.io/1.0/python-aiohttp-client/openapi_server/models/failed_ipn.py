# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FailedIpn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, amount: str=None, contractaddress: str=None, ethereumaddress: str=None, id: str=None, timestamp: str=None, url: str=None):
        """FailedIpn - a model defined in OpenAPI

        :param action: The action of this FailedIpn.
        :param amount: The amount of this FailedIpn.
        :param contractaddress: The contractaddress of this FailedIpn.
        :param ethereumaddress: The ethereumaddress of this FailedIpn.
        :param id: The id of this FailedIpn.
        :param timestamp: The timestamp of this FailedIpn.
        :param url: The url of this FailedIpn.
        """
        self.openapi_types = {
            'action': str,
            'amount': str,
            'contractaddress': str,
            'ethereumaddress': str,
            'id': str,
            'timestamp': str,
            'url': str
        }

        self.attribute_map = {
            'action': 'action',
            'amount': 'amount',
            'contractaddress': 'contractaddress',
            'ethereumaddress': 'ethereumaddress',
            'id': 'id',
            'timestamp': 'timestamp',
            'url': 'url'
        }

        self._action = action
        self._amount = amount
        self._contractaddress = contractaddress
        self._ethereumaddress = ethereumaddress
        self._id = id
        self._timestamp = timestamp
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailedIpn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailedIpn of this FailedIpn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this FailedIpn.


        :return: The action of this FailedIpn.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this FailedIpn.


        :param action: The action of this FailedIpn.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def amount(self):
        """Gets the amount of this FailedIpn.


        :return: The amount of this FailedIpn.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this FailedIpn.


        :param amount: The amount of this FailedIpn.
        :type amount: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def contractaddress(self):
        """Gets the contractaddress of this FailedIpn.


        :return: The contractaddress of this FailedIpn.
        :rtype: str
        """
        return self._contractaddress

    @contractaddress.setter
    def contractaddress(self, contractaddress):
        """Sets the contractaddress of this FailedIpn.


        :param contractaddress: The contractaddress of this FailedIpn.
        :type contractaddress: str
        """
        if contractaddress is None:
            raise ValueError("Invalid value for `contractaddress`, must not be `None`")

        self._contractaddress = contractaddress

    @property
    def ethereumaddress(self):
        """Gets the ethereumaddress of this FailedIpn.


        :return: The ethereumaddress of this FailedIpn.
        :rtype: str
        """
        return self._ethereumaddress

    @ethereumaddress.setter
    def ethereumaddress(self, ethereumaddress):
        """Sets the ethereumaddress of this FailedIpn.


        :param ethereumaddress: The ethereumaddress of this FailedIpn.
        :type ethereumaddress: str
        """
        if ethereumaddress is None:
            raise ValueError("Invalid value for `ethereumaddress`, must not be `None`")

        self._ethereumaddress = ethereumaddress

    @property
    def id(self):
        """Gets the id of this FailedIpn.


        :return: The id of this FailedIpn.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FailedIpn.


        :param id: The id of this FailedIpn.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this FailedIpn.


        :return: The timestamp of this FailedIpn.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this FailedIpn.


        :param timestamp: The timestamp of this FailedIpn.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def url(self):
        """Gets the url of this FailedIpn.


        :return: The url of this FailedIpn.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FailedIpn.


        :param url: The url of this FailedIpn.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
