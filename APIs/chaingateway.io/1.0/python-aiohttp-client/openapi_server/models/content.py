# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crypto import Crypto
from openapi_server import util


class Content(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, crypto: Crypto=None, id: str=None, version: int=None):
        """Content - a model defined in OpenAPI

        :param address: The address of this Content.
        :param crypto: The crypto of this Content.
        :param id: The id of this Content.
        :param version: The version of this Content.
        """
        self.openapi_types = {
            'address': str,
            'crypto': Crypto,
            'id': str,
            'version': int
        }

        self.attribute_map = {
            'address': 'address',
            'crypto': 'crypto',
            'id': 'id',
            'version': 'version'
        }

        self._address = address
        self._crypto = crypto
        self._id = id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Content':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Content of this Content.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Content.


        :return: The address of this Content.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Content.


        :param address: The address of this Content.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def crypto(self):
        """Gets the crypto of this Content.


        :return: The crypto of this Content.
        :rtype: Crypto
        """
        return self._crypto

    @crypto.setter
    def crypto(self, crypto):
        """Sets the crypto of this Content.


        :param crypto: The crypto of this Content.
        :type crypto: Crypto
        """
        if crypto is None:
            raise ValueError("Invalid value for `crypto`, must not be `None`")

        self._crypto = crypto

    @property
    def id(self):
        """Gets the id of this Content.


        :return: The id of this Content.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Content.


        :param id: The id of this Content.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def version(self):
        """Gets the version of this Content.


        :return: The version of this Content.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Content.


        :param version: The version of this Content.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
