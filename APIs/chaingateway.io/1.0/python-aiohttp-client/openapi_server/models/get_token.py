# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contractaddress: str=None, decimals: int=None, name: str=None, ok: bool=None, supply: int=None, symbol: str=None):
        """GetToken - a model defined in OpenAPI

        :param contractaddress: The contractaddress of this GetToken.
        :param decimals: The decimals of this GetToken.
        :param name: The name of this GetToken.
        :param ok: The ok of this GetToken.
        :param supply: The supply of this GetToken.
        :param symbol: The symbol of this GetToken.
        """
        self.openapi_types = {
            'contractaddress': str,
            'decimals': int,
            'name': str,
            'ok': bool,
            'supply': int,
            'symbol': str
        }

        self.attribute_map = {
            'contractaddress': 'contractaddress',
            'decimals': 'decimals',
            'name': 'name',
            'ok': 'ok',
            'supply': 'supply',
            'symbol': 'symbol'
        }

        self._contractaddress = contractaddress
        self._decimals = decimals
        self._name = name
        self._ok = ok
        self._supply = supply
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getToken of this GetToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contractaddress(self):
        """Gets the contractaddress of this GetToken.


        :return: The contractaddress of this GetToken.
        :rtype: str
        """
        return self._contractaddress

    @contractaddress.setter
    def contractaddress(self, contractaddress):
        """Sets the contractaddress of this GetToken.


        :param contractaddress: The contractaddress of this GetToken.
        :type contractaddress: str
        """
        if contractaddress is None:
            raise ValueError("Invalid value for `contractaddress`, must not be `None`")

        self._contractaddress = contractaddress

    @property
    def decimals(self):
        """Gets the decimals of this GetToken.


        :return: The decimals of this GetToken.
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this GetToken.


        :param decimals: The decimals of this GetToken.
        :type decimals: int
        """
        if decimals is None:
            raise ValueError("Invalid value for `decimals`, must not be `None`")

        self._decimals = decimals

    @property
    def name(self):
        """Gets the name of this GetToken.


        :return: The name of this GetToken.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetToken.


        :param name: The name of this GetToken.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def ok(self):
        """Gets the ok of this GetToken.


        :return: The ok of this GetToken.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this GetToken.


        :param ok: The ok of this GetToken.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def supply(self):
        """Gets the supply of this GetToken.


        :return: The supply of this GetToken.
        :rtype: int
        """
        return self._supply

    @supply.setter
    def supply(self, supply):
        """Sets the supply of this GetToken.


        :param supply: The supply of this GetToken.
        :type supply: int
        """
        if supply is None:
            raise ValueError("Invalid value for `supply`, must not be `None`")

        self._supply = supply

    @property
    def symbol(self):
        """Gets the symbol of this GetToken.


        :return: The symbol of this GetToken.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this GetToken.


        :param symbol: The symbol of this GetToken.
        :type symbol: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")

        self._symbol = symbol
