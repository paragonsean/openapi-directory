# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetEthereumBalanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ethereumaddress: str=None):
        """GetEthereumBalanceRequest - a model defined in OpenAPI

        :param ethereumaddress: The ethereumaddress of this GetEthereumBalanceRequest.
        """
        self.openapi_types = {
            'ethereumaddress': str
        }

        self.attribute_map = {
            'ethereumaddress': 'ethereumaddress'
        }

        self._ethereumaddress = ethereumaddress

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetEthereumBalanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getEthereumBalanceRequest of this GetEthereumBalanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ethereumaddress(self):
        """Gets the ethereumaddress of this GetEthereumBalanceRequest.


        :return: The ethereumaddress of this GetEthereumBalanceRequest.
        :rtype: str
        """
        return self._ethereumaddress

    @ethereumaddress.setter
    def ethereumaddress(self, ethereumaddress):
        """Sets the ethereumaddress of this GetEthereumBalanceRequest.


        :param ethereumaddress: The ethereumaddress of this GetEthereumBalanceRequest.
        :type ethereumaddress: str
        """
        if ethereumaddress is None:
            raise ValueError("Invalid value for `ethereumaddress`, must not be `None`")

        self._ethereumaddress = ethereumaddress
