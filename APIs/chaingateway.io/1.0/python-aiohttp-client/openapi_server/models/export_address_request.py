# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportAddressRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ethaddress: str=None, password: str=None):
        """ExportAddressRequest - a model defined in OpenAPI

        :param ethaddress: The ethaddress of this ExportAddressRequest.
        :param password: The password of this ExportAddressRequest.
        """
        self.openapi_types = {
            'ethaddress': str,
            'password': str
        }

        self.attribute_map = {
            'ethaddress': 'ethaddress',
            'password': 'password'
        }

        self._ethaddress = ethaddress
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportAddressRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The exportAddressRequest of this ExportAddressRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ethaddress(self):
        """Gets the ethaddress of this ExportAddressRequest.


        :return: The ethaddress of this ExportAddressRequest.
        :rtype: str
        """
        return self._ethaddress

    @ethaddress.setter
    def ethaddress(self, ethaddress):
        """Sets the ethaddress of this ExportAddressRequest.


        :param ethaddress: The ethaddress of this ExportAddressRequest.
        :type ethaddress: str
        """
        if ethaddress is None:
            raise ValueError("Invalid value for `ethaddress`, must not be `None`")

        self._ethaddress = ethaddress

    @property
    def password(self):
        """Gets the password of this ExportAddressRequest.


        :return: The password of this ExportAddressRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ExportAddressRequest.


        :param password: The password of this ExportAddressRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
