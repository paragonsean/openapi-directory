# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Ipn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contractaddress: str=None, ethereumaddress: str=None, url: str=None):
        """Ipn - a model defined in OpenAPI

        :param contractaddress: The contractaddress of this Ipn.
        :param ethereumaddress: The ethereumaddress of this Ipn.
        :param url: The url of this Ipn.
        """
        self.openapi_types = {
            'contractaddress': str,
            'ethereumaddress': str,
            'url': str
        }

        self.attribute_map = {
            'contractaddress': 'contractaddress',
            'ethereumaddress': 'ethereumaddress',
            'url': 'url'
        }

        self._contractaddress = contractaddress
        self._ethereumaddress = ethereumaddress
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ipn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ipn of this Ipn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contractaddress(self):
        """Gets the contractaddress of this Ipn.


        :return: The contractaddress of this Ipn.
        :rtype: str
        """
        return self._contractaddress

    @contractaddress.setter
    def contractaddress(self, contractaddress):
        """Sets the contractaddress of this Ipn.


        :param contractaddress: The contractaddress of this Ipn.
        :type contractaddress: str
        """
        if contractaddress is None:
            raise ValueError("Invalid value for `contractaddress`, must not be `None`")

        self._contractaddress = contractaddress

    @property
    def ethereumaddress(self):
        """Gets the ethereumaddress of this Ipn.


        :return: The ethereumaddress of this Ipn.
        :rtype: str
        """
        return self._ethereumaddress

    @ethereumaddress.setter
    def ethereumaddress(self, ethereumaddress):
        """Sets the ethereumaddress of this Ipn.


        :param ethereumaddress: The ethereumaddress of this Ipn.
        :type ethereumaddress: str
        """
        if ethereumaddress is None:
            raise ValueError("Invalid value for `ethereumaddress`, must not be `None`")

        self._ethereumaddress = ethereumaddress

    @property
    def url(self):
        """Gets the url of this Ipn.


        :return: The url of this Ipn.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Ipn.


        :param url: The url of this Ipn.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
