# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cipherparams import Cipherparams
from openapi_server.models.kdfparams import Kdfparams
from openapi_server import util


class Crypto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cipher: str=None, cipherparams: Cipherparams=None, ciphertext: str=None, kdf: str=None, kdfparams: Kdfparams=None, mac: str=None):
        """Crypto - a model defined in OpenAPI

        :param cipher: The cipher of this Crypto.
        :param cipherparams: The cipherparams of this Crypto.
        :param ciphertext: The ciphertext of this Crypto.
        :param kdf: The kdf of this Crypto.
        :param kdfparams: The kdfparams of this Crypto.
        :param mac: The mac of this Crypto.
        """
        self.openapi_types = {
            'cipher': str,
            'cipherparams': Cipherparams,
            'ciphertext': str,
            'kdf': str,
            'kdfparams': Kdfparams,
            'mac': str
        }

        self.attribute_map = {
            'cipher': 'cipher',
            'cipherparams': 'cipherparams',
            'ciphertext': 'ciphertext',
            'kdf': 'kdf',
            'kdfparams': 'kdfparams',
            'mac': 'mac'
        }

        self._cipher = cipher
        self._cipherparams = cipherparams
        self._ciphertext = ciphertext
        self._kdf = kdf
        self._kdfparams = kdfparams
        self._mac = mac

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crypto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Crypto of this Crypto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cipher(self):
        """Gets the cipher of this Crypto.


        :return: The cipher of this Crypto.
        :rtype: str
        """
        return self._cipher

    @cipher.setter
    def cipher(self, cipher):
        """Sets the cipher of this Crypto.


        :param cipher: The cipher of this Crypto.
        :type cipher: str
        """
        if cipher is None:
            raise ValueError("Invalid value for `cipher`, must not be `None`")

        self._cipher = cipher

    @property
    def cipherparams(self):
        """Gets the cipherparams of this Crypto.


        :return: The cipherparams of this Crypto.
        :rtype: Cipherparams
        """
        return self._cipherparams

    @cipherparams.setter
    def cipherparams(self, cipherparams):
        """Sets the cipherparams of this Crypto.


        :param cipherparams: The cipherparams of this Crypto.
        :type cipherparams: Cipherparams
        """
        if cipherparams is None:
            raise ValueError("Invalid value for `cipherparams`, must not be `None`")

        self._cipherparams = cipherparams

    @property
    def ciphertext(self):
        """Gets the ciphertext of this Crypto.


        :return: The ciphertext of this Crypto.
        :rtype: str
        """
        return self._ciphertext

    @ciphertext.setter
    def ciphertext(self, ciphertext):
        """Sets the ciphertext of this Crypto.


        :param ciphertext: The ciphertext of this Crypto.
        :type ciphertext: str
        """
        if ciphertext is None:
            raise ValueError("Invalid value for `ciphertext`, must not be `None`")

        self._ciphertext = ciphertext

    @property
    def kdf(self):
        """Gets the kdf of this Crypto.


        :return: The kdf of this Crypto.
        :rtype: str
        """
        return self._kdf

    @kdf.setter
    def kdf(self, kdf):
        """Sets the kdf of this Crypto.


        :param kdf: The kdf of this Crypto.
        :type kdf: str
        """
        if kdf is None:
            raise ValueError("Invalid value for `kdf`, must not be `None`")

        self._kdf = kdf

    @property
    def kdfparams(self):
        """Gets the kdfparams of this Crypto.


        :return: The kdfparams of this Crypto.
        :rtype: Kdfparams
        """
        return self._kdfparams

    @kdfparams.setter
    def kdfparams(self, kdfparams):
        """Sets the kdfparams of this Crypto.


        :param kdfparams: The kdfparams of this Crypto.
        :type kdfparams: Kdfparams
        """
        if kdfparams is None:
            raise ValueError("Invalid value for `kdfparams`, must not be `None`")

        self._kdfparams = kdfparams

    @property
    def mac(self):
        """Gets the mac of this Crypto.


        :return: The mac of this Crypto.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this Crypto.


        :param mac: The mac of this Crypto.
        :type mac: str
        """
        if mac is None:
            raise ValueError("Invalid value for `mac`, must not be `None`")

        self._mac = mac
