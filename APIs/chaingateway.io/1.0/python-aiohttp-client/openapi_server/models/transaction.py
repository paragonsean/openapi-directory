# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: str=None, block_number: str=None, contract_address: str=None, _from: str=None, gas: str=None, gas_price: str=None, to: str=None, token_decimals: str=None, token_name: str=None, token_supply: str=None, token_symbol: str=None, txid: str=None, type: str=None):
        """Transaction - a model defined in OpenAPI

        :param amount: The amount of this Transaction.
        :param block_number: The block_number of this Transaction.
        :param contract_address: The contract_address of this Transaction.
        :param _from: The _from of this Transaction.
        :param gas: The gas of this Transaction.
        :param gas_price: The gas_price of this Transaction.
        :param to: The to of this Transaction.
        :param token_decimals: The token_decimals of this Transaction.
        :param token_name: The token_name of this Transaction.
        :param token_supply: The token_supply of this Transaction.
        :param token_symbol: The token_symbol of this Transaction.
        :param txid: The txid of this Transaction.
        :param type: The type of this Transaction.
        """
        self.openapi_types = {
            'amount': str,
            'block_number': str,
            'contract_address': str,
            '_from': str,
            'gas': str,
            'gas_price': str,
            'to': str,
            'token_decimals': str,
            'token_name': str,
            'token_supply': str,
            'token_symbol': str,
            'txid': str,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'block_number': 'block_number',
            'contract_address': 'contract_address',
            '_from': 'from',
            'gas': 'gas',
            'gas_price': 'gas_price',
            'to': 'to',
            'token_decimals': 'token_decimals',
            'token_name': 'token_name',
            'token_supply': 'token_supply',
            'token_symbol': 'token_symbol',
            'txid': 'txid',
            'type': 'type'
        }

        self._amount = amount
        self._block_number = block_number
        self._contract_address = contract_address
        self.__from = _from
        self._gas = gas
        self._gas_price = gas_price
        self._to = to
        self._token_decimals = token_decimals
        self._token_name = token_name
        self._token_supply = token_supply
        self._token_symbol = token_symbol
        self._txid = txid
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Transaction.


        :return: The amount of this Transaction.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.


        :param amount: The amount of this Transaction.
        :type amount: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def block_number(self):
        """Gets the block_number of this Transaction.


        :return: The block_number of this Transaction.
        :rtype: str
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number):
        """Sets the block_number of this Transaction.


        :param block_number: The block_number of this Transaction.
        :type block_number: str
        """
        if block_number is None:
            raise ValueError("Invalid value for `block_number`, must not be `None`")

        self._block_number = block_number

    @property
    def contract_address(self):
        """Gets the contract_address of this Transaction.


        :return: The contract_address of this Transaction.
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this Transaction.


        :param contract_address: The contract_address of this Transaction.
        :type contract_address: str
        """
        if contract_address is None:
            raise ValueError("Invalid value for `contract_address`, must not be `None`")

        self._contract_address = contract_address

    @property
    def _from(self):
        """Gets the _from of this Transaction.


        :return: The _from of this Transaction.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Transaction.


        :param _from: The _from of this Transaction.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def gas(self):
        """Gets the gas of this Transaction.


        :return: The gas of this Transaction.
        :rtype: str
        """
        return self._gas

    @gas.setter
    def gas(self, gas):
        """Sets the gas of this Transaction.


        :param gas: The gas of this Transaction.
        :type gas: str
        """
        if gas is None:
            raise ValueError("Invalid value for `gas`, must not be `None`")

        self._gas = gas

    @property
    def gas_price(self):
        """Gets the gas_price of this Transaction.


        :return: The gas_price of this Transaction.
        :rtype: str
        """
        return self._gas_price

    @gas_price.setter
    def gas_price(self, gas_price):
        """Sets the gas_price of this Transaction.


        :param gas_price: The gas_price of this Transaction.
        :type gas_price: str
        """
        if gas_price is None:
            raise ValueError("Invalid value for `gas_price`, must not be `None`")

        self._gas_price = gas_price

    @property
    def to(self):
        """Gets the to of this Transaction.


        :return: The to of this Transaction.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Transaction.


        :param to: The to of this Transaction.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def token_decimals(self):
        """Gets the token_decimals of this Transaction.


        :return: The token_decimals of this Transaction.
        :rtype: str
        """
        return self._token_decimals

    @token_decimals.setter
    def token_decimals(self, token_decimals):
        """Sets the token_decimals of this Transaction.


        :param token_decimals: The token_decimals of this Transaction.
        :type token_decimals: str
        """
        if token_decimals is None:
            raise ValueError("Invalid value for `token_decimals`, must not be `None`")

        self._token_decimals = token_decimals

    @property
    def token_name(self):
        """Gets the token_name of this Transaction.


        :return: The token_name of this Transaction.
        :rtype: str
        """
        return self._token_name

    @token_name.setter
    def token_name(self, token_name):
        """Sets the token_name of this Transaction.


        :param token_name: The token_name of this Transaction.
        :type token_name: str
        """
        if token_name is None:
            raise ValueError("Invalid value for `token_name`, must not be `None`")

        self._token_name = token_name

    @property
    def token_supply(self):
        """Gets the token_supply of this Transaction.


        :return: The token_supply of this Transaction.
        :rtype: str
        """
        return self._token_supply

    @token_supply.setter
    def token_supply(self, token_supply):
        """Sets the token_supply of this Transaction.


        :param token_supply: The token_supply of this Transaction.
        :type token_supply: str
        """
        if token_supply is None:
            raise ValueError("Invalid value for `token_supply`, must not be `None`")

        self._token_supply = token_supply

    @property
    def token_symbol(self):
        """Gets the token_symbol of this Transaction.


        :return: The token_symbol of this Transaction.
        :rtype: str
        """
        return self._token_symbol

    @token_symbol.setter
    def token_symbol(self, token_symbol):
        """Sets the token_symbol of this Transaction.


        :param token_symbol: The token_symbol of this Transaction.
        :type token_symbol: str
        """
        if token_symbol is None:
            raise ValueError("Invalid value for `token_symbol`, must not be `None`")

        self._token_symbol = token_symbol

    @property
    def txid(self):
        """Gets the txid of this Transaction.


        :return: The txid of this Transaction.
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this Transaction.


        :param txid: The txid of this Transaction.
        :type txid: str
        """
        if txid is None:
            raise ValueError("Invalid value for `txid`, must not be `None`")

        self._txid = txid

    @property
    def type(self):
        """Gets the type of this Transaction.


        :return: The type of this Transaction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.


        :param type: The type of this Transaction.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
