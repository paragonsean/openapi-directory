# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetBlock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_number: str=None, difficulty: str=None, gas_limit: str=None, gas_used: str=None, hash: str=None, miner: str=None, ok: bool=None, parent_hash: str=None, size_in_bytes: str=None, time_stamp: str=None, transactions_count: str=None):
        """GetBlock - a model defined in OpenAPI

        :param block_number: The block_number of this GetBlock.
        :param difficulty: The difficulty of this GetBlock.
        :param gas_limit: The gas_limit of this GetBlock.
        :param gas_used: The gas_used of this GetBlock.
        :param hash: The hash of this GetBlock.
        :param miner: The miner of this GetBlock.
        :param ok: The ok of this GetBlock.
        :param parent_hash: The parent_hash of this GetBlock.
        :param size_in_bytes: The size_in_bytes of this GetBlock.
        :param time_stamp: The time_stamp of this GetBlock.
        :param transactions_count: The transactions_count of this GetBlock.
        """
        self.openapi_types = {
            'block_number': str,
            'difficulty': str,
            'gas_limit': str,
            'gas_used': str,
            'hash': str,
            'miner': str,
            'ok': bool,
            'parent_hash': str,
            'size_in_bytes': str,
            'time_stamp': str,
            'transactions_count': str
        }

        self.attribute_map = {
            'block_number': 'block_number',
            'difficulty': 'difficulty',
            'gas_limit': 'gas_limit',
            'gas_used': 'gas_used',
            'hash': 'hash',
            'miner': 'miner',
            'ok': 'ok',
            'parent_hash': 'parent_hash',
            'size_in_bytes': 'size_in_bytes',
            'time_stamp': 'time_stamp',
            'transactions_count': 'transactions_count'
        }

        self._block_number = block_number
        self._difficulty = difficulty
        self._gas_limit = gas_limit
        self._gas_used = gas_used
        self._hash = hash
        self._miner = miner
        self._ok = ok
        self._parent_hash = parent_hash
        self._size_in_bytes = size_in_bytes
        self._time_stamp = time_stamp
        self._transactions_count = transactions_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetBlock':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getBlock of this GetBlock.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_number(self):
        """Gets the block_number of this GetBlock.


        :return: The block_number of this GetBlock.
        :rtype: str
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number):
        """Sets the block_number of this GetBlock.


        :param block_number: The block_number of this GetBlock.
        :type block_number: str
        """
        if block_number is None:
            raise ValueError("Invalid value for `block_number`, must not be `None`")

        self._block_number = block_number

    @property
    def difficulty(self):
        """Gets the difficulty of this GetBlock.


        :return: The difficulty of this GetBlock.
        :rtype: str
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this GetBlock.


        :param difficulty: The difficulty of this GetBlock.
        :type difficulty: str
        """
        if difficulty is None:
            raise ValueError("Invalid value for `difficulty`, must not be `None`")

        self._difficulty = difficulty

    @property
    def gas_limit(self):
        """Gets the gas_limit of this GetBlock.


        :return: The gas_limit of this GetBlock.
        :rtype: str
        """
        return self._gas_limit

    @gas_limit.setter
    def gas_limit(self, gas_limit):
        """Sets the gas_limit of this GetBlock.


        :param gas_limit: The gas_limit of this GetBlock.
        :type gas_limit: str
        """
        if gas_limit is None:
            raise ValueError("Invalid value for `gas_limit`, must not be `None`")

        self._gas_limit = gas_limit

    @property
    def gas_used(self):
        """Gets the gas_used of this GetBlock.


        :return: The gas_used of this GetBlock.
        :rtype: str
        """
        return self._gas_used

    @gas_used.setter
    def gas_used(self, gas_used):
        """Sets the gas_used of this GetBlock.


        :param gas_used: The gas_used of this GetBlock.
        :type gas_used: str
        """
        if gas_used is None:
            raise ValueError("Invalid value for `gas_used`, must not be `None`")

        self._gas_used = gas_used

    @property
    def hash(self):
        """Gets the hash of this GetBlock.


        :return: The hash of this GetBlock.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this GetBlock.


        :param hash: The hash of this GetBlock.
        :type hash: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")

        self._hash = hash

    @property
    def miner(self):
        """Gets the miner of this GetBlock.


        :return: The miner of this GetBlock.
        :rtype: str
        """
        return self._miner

    @miner.setter
    def miner(self, miner):
        """Sets the miner of this GetBlock.


        :param miner: The miner of this GetBlock.
        :type miner: str
        """
        if miner is None:
            raise ValueError("Invalid value for `miner`, must not be `None`")

        self._miner = miner

    @property
    def ok(self):
        """Gets the ok of this GetBlock.


        :return: The ok of this GetBlock.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this GetBlock.


        :param ok: The ok of this GetBlock.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def parent_hash(self):
        """Gets the parent_hash of this GetBlock.


        :return: The parent_hash of this GetBlock.
        :rtype: str
        """
        return self._parent_hash

    @parent_hash.setter
    def parent_hash(self, parent_hash):
        """Sets the parent_hash of this GetBlock.


        :param parent_hash: The parent_hash of this GetBlock.
        :type parent_hash: str
        """
        if parent_hash is None:
            raise ValueError("Invalid value for `parent_hash`, must not be `None`")

        self._parent_hash = parent_hash

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this GetBlock.


        :return: The size_in_bytes of this GetBlock.
        :rtype: str
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this GetBlock.


        :param size_in_bytes: The size_in_bytes of this GetBlock.
        :type size_in_bytes: str
        """
        if size_in_bytes is None:
            raise ValueError("Invalid value for `size_in_bytes`, must not be `None`")

        self._size_in_bytes = size_in_bytes

    @property
    def time_stamp(self):
        """Gets the time_stamp of this GetBlock.


        :return: The time_stamp of this GetBlock.
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this GetBlock.


        :param time_stamp: The time_stamp of this GetBlock.
        :type time_stamp: str
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def transactions_count(self):
        """Gets the transactions_count of this GetBlock.


        :return: The transactions_count of this GetBlock.
        :rtype: str
        """
        return self._transactions_count

    @transactions_count.setter
    def transactions_count(self, transactions_count):
        """Sets the transactions_count of this GetBlock.


        :param transactions_count: The transactions_count of this GetBlock.
        :type transactions_count: str
        """
        if transactions_count is None:
            raise ValueError("Invalid value for `transactions_count`, must not be `None`")

        self._transactions_count = transactions_count
