# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetExchangeRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, ok: bool=None, rate: float=None):
        """GetExchangeRate - a model defined in OpenAPI

        :param currency: The currency of this GetExchangeRate.
        :param ok: The ok of this GetExchangeRate.
        :param rate: The rate of this GetExchangeRate.
        """
        self.openapi_types = {
            'currency': str,
            'ok': bool,
            'rate': float
        }

        self.attribute_map = {
            'currency': 'currency',
            'ok': 'ok',
            'rate': 'rate'
        }

        self._currency = currency
        self._ok = ok
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetExchangeRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getExchangeRate of this GetExchangeRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this GetExchangeRate.


        :return: The currency of this GetExchangeRate.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GetExchangeRate.


        :param currency: The currency of this GetExchangeRate.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def ok(self):
        """Gets the ok of this GetExchangeRate.


        :return: The ok of this GetExchangeRate.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this GetExchangeRate.


        :param ok: The ok of this GetExchangeRate.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def rate(self):
        """Gets the rate of this GetExchangeRate.


        :return: The rate of this GetExchangeRate.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this GetExchangeRate.


        :param rate: The rate of this GetExchangeRate.
        :type rate: float
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate
