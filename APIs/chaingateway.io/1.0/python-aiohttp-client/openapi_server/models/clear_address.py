# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClearAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, ethereumaddress: str=None, gas: float=None, newaddress: str=None, ok: bool=None, total: str=None, txid: str=None):
        """ClearAddress - a model defined in OpenAPI

        :param amount: The amount of this ClearAddress.
        :param ethereumaddress: The ethereumaddress of this ClearAddress.
        :param gas: The gas of this ClearAddress.
        :param newaddress: The newaddress of this ClearAddress.
        :param ok: The ok of this ClearAddress.
        :param total: The total of this ClearAddress.
        :param txid: The txid of this ClearAddress.
        """
        self.openapi_types = {
            'amount': float,
            'ethereumaddress': str,
            'gas': float,
            'newaddress': str,
            'ok': bool,
            'total': str,
            'txid': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'ethereumaddress': 'ethereumaddress',
            'gas': 'gas',
            'newaddress': 'newaddress',
            'ok': 'ok',
            'total': 'total',
            'txid': 'txid'
        }

        self._amount = amount
        self._ethereumaddress = ethereumaddress
        self._gas = gas
        self._newaddress = newaddress
        self._ok = ok
        self._total = total
        self._txid = txid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClearAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The clearAddress of this ClearAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ClearAddress.


        :return: The amount of this ClearAddress.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ClearAddress.


        :param amount: The amount of this ClearAddress.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def ethereumaddress(self):
        """Gets the ethereumaddress of this ClearAddress.


        :return: The ethereumaddress of this ClearAddress.
        :rtype: str
        """
        return self._ethereumaddress

    @ethereumaddress.setter
    def ethereumaddress(self, ethereumaddress):
        """Sets the ethereumaddress of this ClearAddress.


        :param ethereumaddress: The ethereumaddress of this ClearAddress.
        :type ethereumaddress: str
        """
        if ethereumaddress is None:
            raise ValueError("Invalid value for `ethereumaddress`, must not be `None`")

        self._ethereumaddress = ethereumaddress

    @property
    def gas(self):
        """Gets the gas of this ClearAddress.


        :return: The gas of this ClearAddress.
        :rtype: float
        """
        return self._gas

    @gas.setter
    def gas(self, gas):
        """Sets the gas of this ClearAddress.


        :param gas: The gas of this ClearAddress.
        :type gas: float
        """
        if gas is None:
            raise ValueError("Invalid value for `gas`, must not be `None`")

        self._gas = gas

    @property
    def newaddress(self):
        """Gets the newaddress of this ClearAddress.


        :return: The newaddress of this ClearAddress.
        :rtype: str
        """
        return self._newaddress

    @newaddress.setter
    def newaddress(self, newaddress):
        """Sets the newaddress of this ClearAddress.


        :param newaddress: The newaddress of this ClearAddress.
        :type newaddress: str
        """
        if newaddress is None:
            raise ValueError("Invalid value for `newaddress`, must not be `None`")

        self._newaddress = newaddress

    @property
    def ok(self):
        """Gets the ok of this ClearAddress.


        :return: The ok of this ClearAddress.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this ClearAddress.


        :param ok: The ok of this ClearAddress.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def total(self):
        """Gets the total of this ClearAddress.


        :return: The total of this ClearAddress.
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ClearAddress.


        :param total: The total of this ClearAddress.
        :type total: str
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def txid(self):
        """Gets the txid of this ClearAddress.


        :return: The txid of this ClearAddress.
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this ClearAddress.


        :param txid: The txid of this ClearAddress.
        :type txid: str
        """
        if txid is None:
            raise ValueError("Invalid value for `txid`, must not be `None`")

        self._txid = txid
