# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetGasPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gasprice: int=None, ok: bool=None):
        """GetGasPrice - a model defined in OpenAPI

        :param gasprice: The gasprice of this GetGasPrice.
        :param ok: The ok of this GetGasPrice.
        """
        self.openapi_types = {
            'gasprice': int,
            'ok': bool
        }

        self.attribute_map = {
            'gasprice': 'gasprice',
            'ok': 'ok'
        }

        self._gasprice = gasprice
        self._ok = ok

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetGasPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getGasPrice of this GetGasPrice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gasprice(self):
        """Gets the gasprice of this GetGasPrice.


        :return: The gasprice of this GetGasPrice.
        :rtype: int
        """
        return self._gasprice

    @gasprice.setter
    def gasprice(self, gasprice):
        """Sets the gasprice of this GetGasPrice.


        :param gasprice: The gasprice of this GetGasPrice.
        :type gasprice: int
        """
        if gasprice is None:
            raise ValueError("Invalid value for `gasprice`, must not be `None`")

        self._gasprice = gasprice

    @property
    def ok(self):
        """Gets the ok of this GetGasPrice.


        :return: The ok of this GetGasPrice.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this GetGasPrice.


        :param ok: The ok of this GetGasPrice.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok
