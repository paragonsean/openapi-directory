# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Kdfparams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dklen: int=None, n: int=None, p: int=None, r: int=None, salt: str=None):
        """Kdfparams - a model defined in OpenAPI

        :param dklen: The dklen of this Kdfparams.
        :param n: The n of this Kdfparams.
        :param p: The p of this Kdfparams.
        :param r: The r of this Kdfparams.
        :param salt: The salt of this Kdfparams.
        """
        self.openapi_types = {
            'dklen': int,
            'n': int,
            'p': int,
            'r': int,
            'salt': str
        }

        self.attribute_map = {
            'dklen': 'dklen',
            'n': 'n',
            'p': 'p',
            'r': 'r',
            'salt': 'salt'
        }

        self._dklen = dklen
        self._n = n
        self._p = p
        self._r = r
        self._salt = salt

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Kdfparams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Kdfparams of this Kdfparams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dklen(self):
        """Gets the dklen of this Kdfparams.


        :return: The dklen of this Kdfparams.
        :rtype: int
        """
        return self._dklen

    @dklen.setter
    def dklen(self, dklen):
        """Sets the dklen of this Kdfparams.


        :param dklen: The dklen of this Kdfparams.
        :type dklen: int
        """
        if dklen is None:
            raise ValueError("Invalid value for `dklen`, must not be `None`")

        self._dklen = dklen

    @property
    def n(self):
        """Gets the n of this Kdfparams.


        :return: The n of this Kdfparams.
        :rtype: int
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this Kdfparams.


        :param n: The n of this Kdfparams.
        :type n: int
        """
        if n is None:
            raise ValueError("Invalid value for `n`, must not be `None`")

        self._n = n

    @property
    def p(self):
        """Gets the p of this Kdfparams.


        :return: The p of this Kdfparams.
        :rtype: int
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this Kdfparams.


        :param p: The p of this Kdfparams.
        :type p: int
        """
        if p is None:
            raise ValueError("Invalid value for `p`, must not be `None`")

        self._p = p

    @property
    def r(self):
        """Gets the r of this Kdfparams.


        :return: The r of this Kdfparams.
        :rtype: int
        """
        return self._r

    @r.setter
    def r(self, r):
        """Sets the r of this Kdfparams.


        :param r: The r of this Kdfparams.
        :type r: int
        """
        if r is None:
            raise ValueError("Invalid value for `r`, must not be `None`")

        self._r = r

    @property
    def salt(self):
        """Gets the salt of this Kdfparams.


        :return: The salt of this Kdfparams.
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this Kdfparams.


        :param salt: The salt of this Kdfparams.
        :type salt: str
        """
        if salt is None:
            raise ValueError("Invalid value for `salt`, must not be `None`")

        self._salt = salt
