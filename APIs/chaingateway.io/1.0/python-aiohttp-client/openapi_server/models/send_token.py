# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, contractaddress: str=None, _from: str=None, identifier: str=None, ok: bool=None, to: str=None, txid: str=None):
        """SendToken - a model defined in OpenAPI

        :param amount: The amount of this SendToken.
        :param contractaddress: The contractaddress of this SendToken.
        :param _from: The _from of this SendToken.
        :param identifier: The identifier of this SendToken.
        :param ok: The ok of this SendToken.
        :param to: The to of this SendToken.
        :param txid: The txid of this SendToken.
        """
        self.openapi_types = {
            'amount': int,
            'contractaddress': str,
            '_from': str,
            'identifier': str,
            'ok': bool,
            'to': str,
            'txid': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'contractaddress': 'contractaddress',
            '_from': 'from',
            'identifier': 'identifier',
            'ok': 'ok',
            'to': 'to',
            'txid': 'txid'
        }

        self._amount = amount
        self._contractaddress = contractaddress
        self.__from = _from
        self._identifier = identifier
        self._ok = ok
        self._to = to
        self._txid = txid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sendToken of this SendToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this SendToken.


        :return: The amount of this SendToken.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SendToken.


        :param amount: The amount of this SendToken.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def contractaddress(self):
        """Gets the contractaddress of this SendToken.


        :return: The contractaddress of this SendToken.
        :rtype: str
        """
        return self._contractaddress

    @contractaddress.setter
    def contractaddress(self, contractaddress):
        """Sets the contractaddress of this SendToken.


        :param contractaddress: The contractaddress of this SendToken.
        :type contractaddress: str
        """
        if contractaddress is None:
            raise ValueError("Invalid value for `contractaddress`, must not be `None`")

        self._contractaddress = contractaddress

    @property
    def _from(self):
        """Gets the _from of this SendToken.


        :return: The _from of this SendToken.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SendToken.


        :param _from: The _from of this SendToken.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def identifier(self):
        """Gets the identifier of this SendToken.


        :return: The identifier of this SendToken.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this SendToken.


        :param identifier: The identifier of this SendToken.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def ok(self):
        """Gets the ok of this SendToken.


        :return: The ok of this SendToken.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this SendToken.


        :param ok: The ok of this SendToken.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def to(self):
        """Gets the to of this SendToken.


        :return: The to of this SendToken.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendToken.


        :param to: The to of this SendToken.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def txid(self):
        """Gets the txid of this SendToken.


        :return: The txid of this SendToken.
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this SendToken.


        :param txid: The txid of this SendToken.
        :type txid: str
        """
        if txid is None:
            raise ValueError("Invalid value for `txid`, must not be `None`")

        self._txid = txid
