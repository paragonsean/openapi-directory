# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, contractaddress: str=None, _from: str=None, identifier: str=None, password: str=None, to: str=None):
        """SendTokenRequest - a model defined in OpenAPI

        :param amount: The amount of this SendTokenRequest.
        :param contractaddress: The contractaddress of this SendTokenRequest.
        :param _from: The _from of this SendTokenRequest.
        :param identifier: The identifier of this SendTokenRequest.
        :param password: The password of this SendTokenRequest.
        :param to: The to of this SendTokenRequest.
        """
        self.openapi_types = {
            'amount': int,
            'contractaddress': str,
            '_from': str,
            'identifier': str,
            'password': str,
            'to': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'contractaddress': 'contractaddress',
            '_from': 'from',
            'identifier': 'identifier',
            'password': 'password',
            'to': 'to'
        }

        self._amount = amount
        self._contractaddress = contractaddress
        self.__from = _from
        self._identifier = identifier
        self._password = password
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sendTokenRequest of this SendTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this SendTokenRequest.


        :return: The amount of this SendTokenRequest.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SendTokenRequest.


        :param amount: The amount of this SendTokenRequest.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def contractaddress(self):
        """Gets the contractaddress of this SendTokenRequest.


        :return: The contractaddress of this SendTokenRequest.
        :rtype: str
        """
        return self._contractaddress

    @contractaddress.setter
    def contractaddress(self, contractaddress):
        """Sets the contractaddress of this SendTokenRequest.


        :param contractaddress: The contractaddress of this SendTokenRequest.
        :type contractaddress: str
        """
        if contractaddress is None:
            raise ValueError("Invalid value for `contractaddress`, must not be `None`")

        self._contractaddress = contractaddress

    @property
    def _from(self):
        """Gets the _from of this SendTokenRequest.


        :return: The _from of this SendTokenRequest.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SendTokenRequest.


        :param _from: The _from of this SendTokenRequest.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def identifier(self):
        """Gets the identifier of this SendTokenRequest.


        :return: The identifier of this SendTokenRequest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this SendTokenRequest.


        :param identifier: The identifier of this SendTokenRequest.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def password(self):
        """Gets the password of this SendTokenRequest.


        :return: The password of this SendTokenRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SendTokenRequest.


        :param password: The password of this SendTokenRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def to(self):
        """Gets the to of this SendTokenRequest.


        :return: The to of this SendTokenRequest.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendTokenRequest.


        :param to: The to of this SendTokenRequest.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
