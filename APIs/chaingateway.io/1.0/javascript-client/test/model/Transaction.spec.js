/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChaingatewayIo);
  }
}(this, function(expect, ChaingatewayIo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ChaingatewayIo.Transaction();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Transaction', function() {
    it('should create an instance of Transaction', function() {
      // uncomment below and update the code to test Transaction
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be.a(ChaingatewayIo.Transaction);
    });

    it('should have the property amount (base name: "amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property blockNumber (base name: "block_number")', function() {
      // uncomment below and update the code to test the property blockNumber
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property contractAddress (base name: "contract_address")', function() {
      // uncomment below and update the code to test the property contractAddress
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property from (base name: "from")', function() {
      // uncomment below and update the code to test the property from
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property gas (base name: "gas")', function() {
      // uncomment below and update the code to test the property gas
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property gasPrice (base name: "gas_price")', function() {
      // uncomment below and update the code to test the property gasPrice
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property to (base name: "to")', function() {
      // uncomment below and update the code to test the property to
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property tokenDecimals (base name: "token_decimals")', function() {
      // uncomment below and update the code to test the property tokenDecimals
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property tokenName (base name: "token_name")', function() {
      // uncomment below and update the code to test the property tokenName
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property tokenSupply (base name: "token_supply")', function() {
      // uncomment below and update the code to test the property tokenSupply
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property tokenSymbol (base name: "token_symbol")', function() {
      // uncomment below and update the code to test the property tokenSymbol
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property txid (base name: "txid")', function() {
      // uncomment below and update the code to test the property txid
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ChaingatewayIo.Transaction();
      //expect(instance).to.be();
    });

  });

}));
