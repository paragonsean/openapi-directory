/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChaingatewayIo);
  }
}(this, function(expect, ChaingatewayIo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ChaingatewayIo.GetBlock();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetBlock', function() {
    it('should create an instance of GetBlock', function() {
      // uncomment below and update the code to test GetBlock
      //var instance = new ChaingatewayIo.GetBlock();
      //expect(instance).to.be.a(ChaingatewayIo.GetBlock);
    });

    it('should have the property blockNumber (base name: "block_number")', function() {
      // uncomment below and update the code to test the property blockNumber
      //var instance = new ChaingatewayIo.GetBlock();
      //expect(instance).to.be();
    });

    it('should have the property difficulty (base name: "difficulty")', function() {
      // uncomment below and update the code to test the property difficulty
      //var instance = new ChaingatewayIo.GetBlock();
      //expect(instance).to.be();
    });

    it('should have the property gasLimit (base name: "gas_limit")', function() {
      // uncomment below and update the code to test the property gasLimit
      //var instance = new ChaingatewayIo.GetBlock();
      //expect(instance).to.be();
    });

    it('should have the property gasUsed (base name: "gas_used")', function() {
      // uncomment below and update the code to test the property gasUsed
      //var instance = new ChaingatewayIo.GetBlock();
      //expect(instance).to.be();
    });

    it('should have the property hash (base name: "hash")', function() {
      // uncomment below and update the code to test the property hash
      //var instance = new ChaingatewayIo.GetBlock();
      //expect(instance).to.be();
    });

    it('should have the property miner (base name: "miner")', function() {
      // uncomment below and update the code to test the property miner
      //var instance = new ChaingatewayIo.GetBlock();
      //expect(instance).to.be();
    });

    it('should have the property ok (base name: "ok")', function() {
      // uncomment below and update the code to test the property ok
      //var instance = new ChaingatewayIo.GetBlock();
      //expect(instance).to.be();
    });

    it('should have the property parentHash (base name: "parent_hash")', function() {
      // uncomment below and update the code to test the property parentHash
      //var instance = new ChaingatewayIo.GetBlock();
      //expect(instance).to.be();
    });

    it('should have the property sizeInBytes (base name: "size_in_bytes")', function() {
      // uncomment below and update the code to test the property sizeInBytes
      //var instance = new ChaingatewayIo.GetBlock();
      //expect(instance).to.be();
    });

    it('should have the property timeStamp (base name: "time_stamp")', function() {
      // uncomment below and update the code to test the property timeStamp
      //var instance = new ChaingatewayIo.GetBlock();
      //expect(instance).to.be();
    });

    it('should have the property transactionsCount (base name: "transactions_count")', function() {
      // uncomment below and update the code to test the property transactionsCount
      //var instance = new ChaingatewayIo.GetBlock();
      //expect(instance).to.be();
    });

  });

}));
