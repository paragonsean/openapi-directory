/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChaingatewayIo);
  }
}(this, function(expect, ChaingatewayIo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ChaingatewayIo.SubscriptionIPNRequestsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SubscriptionIPNRequestsApi', function() {
    describe('listFailedIPNs', function() {
      it('should call listFailedIPNs successfully', function(done) {
        //uncomment below and update the code to test listFailedIPNs
        //instance.listFailedIPNs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSubscribedAddresses', function() {
      it('should call listSubscribedAddresses successfully', function(done) {
        //uncomment below and update the code to test listSubscribedAddresses
        //instance.listSubscribedAddresses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resendFailedIPN', function() {
      it('should call resendFailedIPN successfully', function(done) {
        //uncomment below and update the code to test resendFailedIPN
        //instance.resendFailedIPN(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscribeAddress', function() {
      it('should call subscribeAddress successfully', function(done) {
        //uncomment below and update the code to test subscribeAddress
        //instance.subscribeAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unsubscribeAddress', function() {
      it('should call unsubscribeAddress successfully', function(done) {
        //uncomment below and update the code to test unsubscribeAddress
        //instance.unsubscribeAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
