/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteAddress from '../model/DeleteAddress';
import DeleteAddressRequest from '../model/DeleteAddressRequest';
import ExportAddress from '../model/ExportAddress';
import ExportAddressRequest from '../model/ExportAddressRequest';
import ImportAddress from '../model/ImportAddress';
import ImportAddressRequest from '../model/ImportAddressRequest';
import ListAddresses from '../model/ListAddresses';
import NewAddress from '../model/NewAddress';
import NewAddressRequest from '../model/NewAddressRequest';

/**
* AddressRequests service.
* @module api/AddressRequestsApi
* @version 1.0
*/
export default class AddressRequestsApi {

    /**
    * Constructs a new AddressRequestsApi. 
    * @alias module:api/AddressRequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAddress operation.
     * @callback module:api/AddressRequestsApi~deleteAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteAddress
     * Deletes an existing ethereum address. Be careful when using this function.
     * @param {String} authorization API Key
     * @param {module:model/DeleteAddressRequest} deleteAddressRequest 
     * @param {module:api/AddressRequestsApi~deleteAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAddress}
     */
    deleteAddress(authorization, deleteAddressRequest, callback) {
      let postBody = deleteAddressRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteAddress");
      }
      // verify the required parameter 'deleteAddressRequest' is set
      if (deleteAddressRequest === undefined || deleteAddressRequest === null) {
        throw new Error("Missing the required parameter 'deleteAddressRequest' when calling deleteAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAddress;
      return this.apiClient.callApi(
        '/deleteAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportAddress operation.
     * @callback module:api/AddressRequestsApi~exportAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * exportAddress
     * Returns all ethereum addresses created with an account.
     * @param {String} authorization API Key
     * @param {module:model/ExportAddressRequest} exportAddressRequest 
     * @param {module:api/AddressRequestsApi~exportAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportAddress}
     */
    exportAddress(authorization, exportAddressRequest, callback) {
      let postBody = exportAddressRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling exportAddress");
      }
      // verify the required parameter 'exportAddressRequest' is set
      if (exportAddressRequest === undefined || exportAddressRequest === null) {
        throw new Error("Missing the required parameter 'exportAddressRequest' when calling exportAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportAddress;
      return this.apiClient.callApi(
        '/exportAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importAddress operation.
     * @callback module:api/AddressRequestsApi~importAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * importAddress
     * Returns all ethereum addresses created with an account.
     * @param {String} authorization API Key
     * @param {module:model/ImportAddressRequest} importAddressRequest 
     * @param {module:api/AddressRequestsApi~importAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportAddress}
     */
    importAddress(authorization, importAddressRequest, callback) {
      let postBody = importAddressRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling importAddress");
      }
      // verify the required parameter 'importAddressRequest' is set
      if (importAddressRequest === undefined || importAddressRequest === null) {
        throw new Error("Missing the required parameter 'importAddressRequest' when calling importAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportAddress;
      return this.apiClient.callApi(
        '/importAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAddresses operation.
     * @callback module:api/AddressRequestsApi~listAddressesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAddresses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * listAddresses
     * Returns all ethereum addresses created with an account.
     * @param {String} contentType 
     * @param {String} authorization API Key
     * @param {module:api/AddressRequestsApi~listAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAddresses}
     */
    listAddresses(contentType, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listAddresses");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listAddresses");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAddresses;
      return this.apiClient.callApi(
        '/listAddresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newAddress operation.
     * @callback module:api/AddressRequestsApi~newAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * newAddress
     * Generates a new ethereum addresses you can use to send or receive funds. Do not lose the password! We can't restore access to an address if you lose it.
     * @param {String} authorization API Key
     * @param {module:model/NewAddressRequest} newAddressRequest 
     * @param {module:api/AddressRequestsApi~newAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewAddress}
     */
    newAddress(authorization, newAddressRequest, callback) {
      let postBody = newAddressRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling newAddress");
      }
      // verify the required parameter 'newAddressRequest' is set
      if (newAddressRequest === undefined || newAddressRequest === null) {
        throw new Error("Missing the required parameter 'newAddressRequest' when calling newAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewAddress;
      return this.apiClient.callApi(
        '/newAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
