/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClearAddress from '../model/ClearAddress';
import ClearAddressRequest from '../model/ClearAddressRequest';
import SendEthereum from '../model/SendEthereum';
import SendEthereumRequest from '../model/SendEthereumRequest';
import SendToken from '../model/SendToken';
import SendTokenRequest from '../model/SendTokenRequest';

/**
* TransactionRequests service.
* @module api/TransactionRequestsApi
* @version 1.0
*/
export default class TransactionRequestsApi {

    /**
    * Constructs a new TransactionRequestsApi. 
    * @alias module:api/TransactionRequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clearAddress operation.
     * @callback module:api/TransactionRequestsApi~clearAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClearAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * clearAddress
     * Sends all available ethereum funds of an address to a specified receiver address.
     * @param {String} authorization API Key
     * @param {module:model/ClearAddressRequest} clearAddressRequest 
     * @param {module:api/TransactionRequestsApi~clearAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClearAddress}
     */
    clearAddress(authorization, clearAddressRequest, callback) {
      let postBody = clearAddressRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling clearAddress");
      }
      // verify the required parameter 'clearAddressRequest' is set
      if (clearAddressRequest === undefined || clearAddressRequest === null) {
        throw new Error("Missing the required parameter 'clearAddressRequest' when calling clearAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClearAddress;
      return this.apiClient.callApi(
        '/clearAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEthereum operation.
     * @callback module:api/TransactionRequestsApi~sendEthereumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendEthereum} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sendEthereum
     * Sends ethereum from an address controlled by the account to a specified receiver address.
     * @param {String} authorization API Key
     * @param {module:model/SendEthereumRequest} sendEthereumRequest 
     * @param {module:api/TransactionRequestsApi~sendEthereumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendEthereum}
     */
    sendEthereum(authorization, sendEthereumRequest, callback) {
      let postBody = sendEthereumRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling sendEthereum");
      }
      // verify the required parameter 'sendEthereumRequest' is set
      if (sendEthereumRequest === undefined || sendEthereumRequest === null) {
        throw new Error("Missing the required parameter 'sendEthereumRequest' when calling sendEthereum");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendEthereum;
      return this.apiClient.callApi(
        '/sendEthereum', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendToken operation.
     * @callback module:api/TransactionRequestsApi~sendTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sendToken
     * Sends ERC20 tokens from an address controlled by the account to a specified receiver address. The token contract address is needed to specify the token. The use of the identifier parameter is recommend and awaits an unique string. Whenever a transaction is beeing sent, the identifier is checked and the transaction gets dropped if there is one with that identifier already.
     * @param {String} authorization API Key
     * @param {module:model/SendTokenRequest} sendTokenRequest 
     * @param {module:api/TransactionRequestsApi~sendTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendToken}
     */
    sendToken(authorization, sendTokenRequest, callback) {
      let postBody = sendTokenRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling sendToken");
      }
      // verify the required parameter 'sendTokenRequest' is set
      if (sendTokenRequest === undefined || sendTokenRequest === null) {
        throw new Error("Missing the required parameter 'sendTokenRequest' when calling sendToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendToken;
      return this.apiClient.callApi(
        '/sendToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
