/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListFailedIPNs from '../model/ListFailedIPNs';
import ListSubscribedAddresses from '../model/ListSubscribedAddresses';
import ResendFailedIPN from '../model/ResendFailedIPN';
import ResendFailedIPNRequest from '../model/ResendFailedIPNRequest';
import SubscribeAddress from '../model/SubscribeAddress';
import SubscribeAddressRequest from '../model/SubscribeAddressRequest';
import UnsubscribeAddress from '../model/UnsubscribeAddress';
import UnsubscribeAddressRequest from '../model/UnsubscribeAddressRequest';

/**
* SubscriptionIPNRequests service.
* @module api/SubscriptionIPNRequestsApi
* @version 1.0
*/
export default class SubscriptionIPNRequestsApi {

    /**
    * Constructs a new SubscriptionIPNRequestsApi. 
    * @alias module:api/SubscriptionIPNRequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listFailedIPNs operation.
     * @callback module:api/SubscriptionIPNRequestsApi~listFailedIPNsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFailedIPNs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * listFailedIPNs
     * Returns all subscriptions/IPNs created with an account.
     * @param {String} contentType 
     * @param {String} authorization API Key
     * @param {module:api/SubscriptionIPNRequestsApi~listFailedIPNsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFailedIPNs}
     */
    listFailedIPNs(contentType, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listFailedIPNs");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listFailedIPNs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFailedIPNs;
      return this.apiClient.callApi(
        '/listFailedIPNs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSubscribedAddresses operation.
     * @callback module:api/SubscriptionIPNRequestsApi~listSubscribedAddressesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSubscribedAddresses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * listSubscribedAddresses
     * Returns all subscriptions/IPNs created with an account.
     * @param {String} contentType 
     * @param {String} authorization API Key
     * @param {module:api/SubscriptionIPNRequestsApi~listSubscribedAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSubscribedAddresses}
     */
    listSubscribedAddresses(contentType, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listSubscribedAddresses");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listSubscribedAddresses");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSubscribedAddresses;
      return this.apiClient.callApi(
        '/listSubscribedAddresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resendFailedIPN operation.
     * @callback module:api/SubscriptionIPNRequestsApi~resendFailedIPNCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResendFailedIPN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * resendFailedIPN
     * Returns all subscriptions/IPNs created with an account.
     * @param {String} authorization API Key
     * @param {module:model/ResendFailedIPNRequest} resendFailedIPNRequest 
     * @param {module:api/SubscriptionIPNRequestsApi~resendFailedIPNCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResendFailedIPN}
     */
    resendFailedIPN(authorization, resendFailedIPNRequest, callback) {
      let postBody = resendFailedIPNRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling resendFailedIPN");
      }
      // verify the required parameter 'resendFailedIPNRequest' is set
      if (resendFailedIPNRequest === undefined || resendFailedIPNRequest === null) {
        throw new Error("Missing the required parameter 'resendFailedIPNRequest' when calling resendFailedIPN");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResendFailedIPN;
      return this.apiClient.callApi(
        '/resendFailedIPN', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeAddress operation.
     * @callback module:api/SubscriptionIPNRequestsApi~subscribeAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscribeAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * subscribeAddress
     * Creates a new subscription/IPN for the given address (and contractaddress). You will receive a notification to the given url every time a deposit is received. Unsubscribe the address before sending tokens/ETH from it or you won't get reliable notifications anymore.  
     * @param {String} authorization API Key
     * @param {module:model/SubscribeAddressRequest} subscribeAddressRequest 
     * @param {module:api/SubscriptionIPNRequestsApi~subscribeAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscribeAddress}
     */
    subscribeAddress(authorization, subscribeAddressRequest, callback) {
      let postBody = subscribeAddressRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling subscribeAddress");
      }
      // verify the required parameter 'subscribeAddressRequest' is set
      if (subscribeAddressRequest === undefined || subscribeAddressRequest === null) {
        throw new Error("Missing the required parameter 'subscribeAddressRequest' when calling subscribeAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscribeAddress;
      return this.apiClient.callApi(
        '/subscribeAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribeAddress operation.
     * @callback module:api/SubscriptionIPNRequestsApi~unsubscribeAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnsubscribeAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * unsubscribeAddress
     * Deletes an existing subscription/IPN for the given address (and contractaddress).
     * @param {String} authorization API Key
     * @param {module:model/UnsubscribeAddressRequest} unsubscribeAddressRequest 
     * @param {module:api/SubscriptionIPNRequestsApi~unsubscribeAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnsubscribeAddress}
     */
    unsubscribeAddress(authorization, unsubscribeAddressRequest, callback) {
      let postBody = unsubscribeAddressRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling unsubscribeAddress");
      }
      // verify the required parameter 'unsubscribeAddressRequest' is set
      if (unsubscribeAddressRequest === undefined || unsubscribeAddressRequest === null) {
        throw new Error("Missing the required parameter 'unsubscribeAddressRequest' when calling unsubscribeAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnsubscribeAddress;
      return this.apiClient.callApi(
        '/unsubscribeAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
