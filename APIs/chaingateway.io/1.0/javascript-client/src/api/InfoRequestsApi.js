/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetBlock from '../model/GetBlock';
import GetBlockRequest from '../model/GetBlockRequest';
import GetEthereumBalance from '../model/GetEthereumBalance';
import GetEthereumBalanceRequest from '../model/GetEthereumBalanceRequest';
import GetExchangeRate from '../model/GetExchangeRate';
import GetExchangeRateRequest from '../model/GetExchangeRateRequest';
import GetGasPrice from '../model/GetGasPrice';
import GetLastBlockNumber from '../model/GetLastBlockNumber';
import GetToken from '../model/GetToken';
import GetTokenBalance from '../model/GetTokenBalance';
import GetTokenBalanceRequest from '../model/GetTokenBalanceRequest';
import GetTokenRequest from '../model/GetTokenRequest';
import GetTransactions from '../model/GetTransactions';
import GetTransactionsRequest from '../model/GetTransactionsRequest';

/**
* InfoRequests service.
* @module api/InfoRequestsApi
* @version 1.0
*/
export default class InfoRequestsApi {

    /**
    * Constructs a new InfoRequestsApi. 
    * @alias module:api/InfoRequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBlock operation.
     * @callback module:api/InfoRequestsApi~getBlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlock} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBlock
     * Returns information of an ethereum block with or without transactions
     * @param {String} authorization API Key
     * @param {module:model/GetBlockRequest} getBlockRequest 
     * @param {module:api/InfoRequestsApi~getBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlock}
     */
    getBlock(authorization, getBlockRequest, callback) {
      let postBody = getBlockRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getBlock");
      }
      // verify the required parameter 'getBlockRequest' is set
      if (getBlockRequest === undefined || getBlockRequest === null) {
        throw new Error("Missing the required parameter 'getBlockRequest' when calling getBlock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBlock;
      return this.apiClient.callApi(
        '/getBlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEthereumBalance operation.
     * @callback module:api/InfoRequestsApi~getEthereumBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEthereumBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getEthereumBalance
     * Returns the ethereum balance of a given address.
     * @param {String} authorization API Key
     * @param {module:model/GetEthereumBalanceRequest} getEthereumBalanceRequest 
     * @param {module:api/InfoRequestsApi~getEthereumBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEthereumBalance}
     */
    getEthereumBalance(authorization, getEthereumBalanceRequest, callback) {
      let postBody = getEthereumBalanceRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEthereumBalance");
      }
      // verify the required parameter 'getEthereumBalanceRequest' is set
      if (getEthereumBalanceRequest === undefined || getEthereumBalanceRequest === null) {
        throw new Error("Missing the required parameter 'getEthereumBalanceRequest' when calling getEthereumBalance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetEthereumBalance;
      return this.apiClient.callApi(
        '/getEthereumBalance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExchangeRate operation.
     * @callback module:api/InfoRequestsApi~getExchangeRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExchangeRate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getExchangeRate
     * Returns the current Ethereum price in Euro or US Dollar.
     * @param {String} authorization API Key
     * @param {module:model/GetExchangeRateRequest} getExchangeRateRequest 
     * @param {module:api/InfoRequestsApi~getExchangeRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExchangeRate}
     */
    getExchangeRate(authorization, getExchangeRateRequest, callback) {
      let postBody = getExchangeRateRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getExchangeRate");
      }
      // verify the required parameter 'getExchangeRateRequest' is set
      if (getExchangeRateRequest === undefined || getExchangeRateRequest === null) {
        throw new Error("Missing the required parameter 'getExchangeRateRequest' when calling getExchangeRate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetExchangeRate;
      return this.apiClient.callApi(
        '/getExchangeRate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGasPrice operation.
     * @callback module:api/InfoRequestsApi~getGasPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGasPrice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getGasPrice
     * Returns the current gas price in GWEI.
     * @param {String} contentType 
     * @param {String} authorization API Key
     * @param {module:api/InfoRequestsApi~getGasPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGasPrice}
     */
    getGasPrice(contentType, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getGasPrice");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getGasPrice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGasPrice;
      return this.apiClient.callApi(
        '/getGasPrice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastBlockNumber operation.
     * @callback module:api/InfoRequestsApi~getLastBlockNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLastBlockNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLastBlockNumber
     * Returns the block number of the last mined ethereum block.
     * @param {String} contentType 
     * @param {String} authorization API Key
     * @param {module:api/InfoRequestsApi~getLastBlockNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLastBlockNumber}
     */
    getLastBlockNumber(contentType, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getLastBlockNumber");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLastBlockNumber");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLastBlockNumber;
      return this.apiClient.callApi(
        '/getLastBlockNumber', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getToken operation.
     * @callback module:api/InfoRequestsApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getToken
     * Returns information about a specific ERC20 token like name, symbol, decimal places and total supply.
     * @param {String} authorization API Key
     * @param {module:model/GetTokenRequest} getTokenRequest 
     * @param {module:api/InfoRequestsApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetToken}
     */
    getToken(authorization, getTokenRequest, callback) {
      let postBody = getTokenRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getToken");
      }
      // verify the required parameter 'getTokenRequest' is set
      if (getTokenRequest === undefined || getTokenRequest === null) {
        throw new Error("Missing the required parameter 'getTokenRequest' when calling getToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetToken;
      return this.apiClient.callApi(
        '/getToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenBalance operation.
     * @callback module:api/InfoRequestsApi~getTokenBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTokenBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTokenBalance
     * Returns the token balance of a given address.
     * @param {String} authorization API Key
     * @param {module:model/GetTokenBalanceRequest} getTokenBalanceRequest 
     * @param {module:api/InfoRequestsApi~getTokenBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTokenBalance}
     */
    getTokenBalance(authorization, getTokenBalanceRequest, callback) {
      let postBody = getTokenBalanceRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTokenBalance");
      }
      // verify the required parameter 'getTokenBalanceRequest' is set
      if (getTokenBalanceRequest === undefined || getTokenBalanceRequest === null) {
        throw new Error("Missing the required parameter 'getTokenBalanceRequest' when calling getTokenBalance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTokenBalance;
      return this.apiClient.callApi(
        '/getTokenBalance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactions operation.
     * @callback module:api/InfoRequestsApi~getTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTransactions
     * Returns information like confirmations, token contract address, amount, gas price and more of a given transaction.
     * @param {String} authorization API Key
     * @param {module:model/GetTransactionsRequest} getTransactionsRequest 
     * @param {module:api/InfoRequestsApi~getTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransactions}
     */
    getTransactions(authorization, getTransactionsRequest, callback) {
      let postBody = getTransactionsRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTransactions");
      }
      // verify the required parameter 'getTransactionsRequest' is set
      if (getTransactionsRequest === undefined || getTransactionsRequest === null) {
        throw new Error("Missing the required parameter 'getTransactionsRequest' when calling getTransactions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTransactions;
      return this.apiClient.callApi(
        '/getTransactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
