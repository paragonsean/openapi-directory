/*
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetBlock;
import org.openapitools.client.model.GetBlockRequest;
import org.openapitools.client.model.GetEthereumBalance;
import org.openapitools.client.model.GetEthereumBalanceRequest;
import org.openapitools.client.model.GetExchangeRate;
import org.openapitools.client.model.GetExchangeRateRequest;
import org.openapitools.client.model.GetGasPrice;
import org.openapitools.client.model.GetLastBlockNumber;
import org.openapitools.client.model.GetToken;
import org.openapitools.client.model.GetTokenBalance;
import org.openapitools.client.model.GetTokenBalanceRequest;
import org.openapitools.client.model.GetTokenRequest;
import org.openapitools.client.model.GetTransactions;
import org.openapitools.client.model.GetTransactionsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InfoRequestsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InfoRequestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InfoRequestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBlock
     * @param authorization API Key (required)
     * @param getBlockRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockCall(String authorization, GetBlockRequest getBlockRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getBlockRequest;

        // create path and map variables
        String localVarPath = "/getBlock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBlockValidateBeforeCall(String authorization, GetBlockRequest getBlockRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getBlock(Async)");
        }

        // verify the required parameter 'getBlockRequest' is set
        if (getBlockRequest == null) {
            throw new ApiException("Missing the required parameter 'getBlockRequest' when calling getBlock(Async)");
        }

        return getBlockCall(authorization, getBlockRequest, _callback);

    }

    /**
     * getBlock
     * Returns information of an ethereum block with or without transactions
     * @param authorization API Key (required)
     * @param getBlockRequest  (required)
     * @return GetBlock
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetBlock getBlock(String authorization, GetBlockRequest getBlockRequest) throws ApiException {
        ApiResponse<GetBlock> localVarResp = getBlockWithHttpInfo(authorization, getBlockRequest);
        return localVarResp.getData();
    }

    /**
     * getBlock
     * Returns information of an ethereum block with or without transactions
     * @param authorization API Key (required)
     * @param getBlockRequest  (required)
     * @return ApiResponse&lt;GetBlock&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBlock> getBlockWithHttpInfo(String authorization, GetBlockRequest getBlockRequest) throws ApiException {
        okhttp3.Call localVarCall = getBlockValidateBeforeCall(authorization, getBlockRequest, null);
        Type localVarReturnType = new TypeToken<GetBlock>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getBlock (asynchronously)
     * Returns information of an ethereum block with or without transactions
     * @param authorization API Key (required)
     * @param getBlockRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockAsync(String authorization, GetBlockRequest getBlockRequest, final ApiCallback<GetBlock> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBlockValidateBeforeCall(authorization, getBlockRequest, _callback);
        Type localVarReturnType = new TypeToken<GetBlock>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEthereumBalance
     * @param authorization API Key (required)
     * @param getEthereumBalanceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEthereumBalanceCall(String authorization, GetEthereumBalanceRequest getEthereumBalanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getEthereumBalanceRequest;

        // create path and map variables
        String localVarPath = "/getEthereumBalance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEthereumBalanceValidateBeforeCall(String authorization, GetEthereumBalanceRequest getEthereumBalanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getEthereumBalance(Async)");
        }

        // verify the required parameter 'getEthereumBalanceRequest' is set
        if (getEthereumBalanceRequest == null) {
            throw new ApiException("Missing the required parameter 'getEthereumBalanceRequest' when calling getEthereumBalance(Async)");
        }

        return getEthereumBalanceCall(authorization, getEthereumBalanceRequest, _callback);

    }

    /**
     * getEthereumBalance
     * Returns the ethereum balance of a given address.
     * @param authorization API Key (required)
     * @param getEthereumBalanceRequest  (required)
     * @return GetEthereumBalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetEthereumBalance getEthereumBalance(String authorization, GetEthereumBalanceRequest getEthereumBalanceRequest) throws ApiException {
        ApiResponse<GetEthereumBalance> localVarResp = getEthereumBalanceWithHttpInfo(authorization, getEthereumBalanceRequest);
        return localVarResp.getData();
    }

    /**
     * getEthereumBalance
     * Returns the ethereum balance of a given address.
     * @param authorization API Key (required)
     * @param getEthereumBalanceRequest  (required)
     * @return ApiResponse&lt;GetEthereumBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEthereumBalance> getEthereumBalanceWithHttpInfo(String authorization, GetEthereumBalanceRequest getEthereumBalanceRequest) throws ApiException {
        okhttp3.Call localVarCall = getEthereumBalanceValidateBeforeCall(authorization, getEthereumBalanceRequest, null);
        Type localVarReturnType = new TypeToken<GetEthereumBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getEthereumBalance (asynchronously)
     * Returns the ethereum balance of a given address.
     * @param authorization API Key (required)
     * @param getEthereumBalanceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEthereumBalanceAsync(String authorization, GetEthereumBalanceRequest getEthereumBalanceRequest, final ApiCallback<GetEthereumBalance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEthereumBalanceValidateBeforeCall(authorization, getEthereumBalanceRequest, _callback);
        Type localVarReturnType = new TypeToken<GetEthereumBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExchangeRate
     * @param authorization API Key (required)
     * @param getExchangeRateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExchangeRateCall(String authorization, GetExchangeRateRequest getExchangeRateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getExchangeRateRequest;

        // create path and map variables
        String localVarPath = "/getExchangeRate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExchangeRateValidateBeforeCall(String authorization, GetExchangeRateRequest getExchangeRateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getExchangeRate(Async)");
        }

        // verify the required parameter 'getExchangeRateRequest' is set
        if (getExchangeRateRequest == null) {
            throw new ApiException("Missing the required parameter 'getExchangeRateRequest' when calling getExchangeRate(Async)");
        }

        return getExchangeRateCall(authorization, getExchangeRateRequest, _callback);

    }

    /**
     * getExchangeRate
     * Returns the current Ethereum price in Euro or US Dollar.
     * @param authorization API Key (required)
     * @param getExchangeRateRequest  (required)
     * @return GetExchangeRate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetExchangeRate getExchangeRate(String authorization, GetExchangeRateRequest getExchangeRateRequest) throws ApiException {
        ApiResponse<GetExchangeRate> localVarResp = getExchangeRateWithHttpInfo(authorization, getExchangeRateRequest);
        return localVarResp.getData();
    }

    /**
     * getExchangeRate
     * Returns the current Ethereum price in Euro or US Dollar.
     * @param authorization API Key (required)
     * @param getExchangeRateRequest  (required)
     * @return ApiResponse&lt;GetExchangeRate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetExchangeRate> getExchangeRateWithHttpInfo(String authorization, GetExchangeRateRequest getExchangeRateRequest) throws ApiException {
        okhttp3.Call localVarCall = getExchangeRateValidateBeforeCall(authorization, getExchangeRateRequest, null);
        Type localVarReturnType = new TypeToken<GetExchangeRate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getExchangeRate (asynchronously)
     * Returns the current Ethereum price in Euro or US Dollar.
     * @param authorization API Key (required)
     * @param getExchangeRateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExchangeRateAsync(String authorization, GetExchangeRateRequest getExchangeRateRequest, final ApiCallback<GetExchangeRate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExchangeRateValidateBeforeCall(authorization, getExchangeRateRequest, _callback);
        Type localVarReturnType = new TypeToken<GetExchangeRate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGasPrice
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGasPriceCall(String contentType, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getGasPrice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGasPriceValidateBeforeCall(String contentType, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getGasPrice(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getGasPrice(Async)");
        }

        return getGasPriceCall(contentType, authorization, _callback);

    }

    /**
     * getGasPrice
     * Returns the current gas price in GWEI.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @return GetGasPrice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetGasPrice getGasPrice(String contentType, String authorization) throws ApiException {
        ApiResponse<GetGasPrice> localVarResp = getGasPriceWithHttpInfo(contentType, authorization);
        return localVarResp.getData();
    }

    /**
     * getGasPrice
     * Returns the current gas price in GWEI.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @return ApiResponse&lt;GetGasPrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGasPrice> getGasPriceWithHttpInfo(String contentType, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getGasPriceValidateBeforeCall(contentType, authorization, null);
        Type localVarReturnType = new TypeToken<GetGasPrice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getGasPrice (asynchronously)
     * Returns the current gas price in GWEI.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGasPriceAsync(String contentType, String authorization, final ApiCallback<GetGasPrice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGasPriceValidateBeforeCall(contentType, authorization, _callback);
        Type localVarReturnType = new TypeToken<GetGasPrice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLastBlockNumber
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastBlockNumberCall(String contentType, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getLastBlockNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLastBlockNumberValidateBeforeCall(String contentType, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getLastBlockNumber(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getLastBlockNumber(Async)");
        }

        return getLastBlockNumberCall(contentType, authorization, _callback);

    }

    /**
     * getLastBlockNumber
     * Returns the block number of the last mined ethereum block.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @return GetLastBlockNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetLastBlockNumber getLastBlockNumber(String contentType, String authorization) throws ApiException {
        ApiResponse<GetLastBlockNumber> localVarResp = getLastBlockNumberWithHttpInfo(contentType, authorization);
        return localVarResp.getData();
    }

    /**
     * getLastBlockNumber
     * Returns the block number of the last mined ethereum block.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @return ApiResponse&lt;GetLastBlockNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLastBlockNumber> getLastBlockNumberWithHttpInfo(String contentType, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getLastBlockNumberValidateBeforeCall(contentType, authorization, null);
        Type localVarReturnType = new TypeToken<GetLastBlockNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getLastBlockNumber (asynchronously)
     * Returns the block number of the last mined ethereum block.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastBlockNumberAsync(String contentType, String authorization, final ApiCallback<GetLastBlockNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLastBlockNumberValidateBeforeCall(contentType, authorization, _callback);
        Type localVarReturnType = new TypeToken<GetLastBlockNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getToken
     * @param authorization API Key (required)
     * @param getTokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenCall(String authorization, GetTokenRequest getTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTokenRequest;

        // create path and map variables
        String localVarPath = "/getToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenValidateBeforeCall(String authorization, GetTokenRequest getTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getToken(Async)");
        }

        // verify the required parameter 'getTokenRequest' is set
        if (getTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'getTokenRequest' when calling getToken(Async)");
        }

        return getTokenCall(authorization, getTokenRequest, _callback);

    }

    /**
     * getToken
     * Returns information about a specific ERC20 token like name, symbol, decimal places and total supply.
     * @param authorization API Key (required)
     * @param getTokenRequest  (required)
     * @return GetToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetToken getToken(String authorization, GetTokenRequest getTokenRequest) throws ApiException {
        ApiResponse<GetToken> localVarResp = getTokenWithHttpInfo(authorization, getTokenRequest);
        return localVarResp.getData();
    }

    /**
     * getToken
     * Returns information about a specific ERC20 token like name, symbol, decimal places and total supply.
     * @param authorization API Key (required)
     * @param getTokenRequest  (required)
     * @return ApiResponse&lt;GetToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetToken> getTokenWithHttpInfo(String authorization, GetTokenRequest getTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = getTokenValidateBeforeCall(authorization, getTokenRequest, null);
        Type localVarReturnType = new TypeToken<GetToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getToken (asynchronously)
     * Returns information about a specific ERC20 token like name, symbol, decimal places and total supply.
     * @param authorization API Key (required)
     * @param getTokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenAsync(String authorization, GetTokenRequest getTokenRequest, final ApiCallback<GetToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenValidateBeforeCall(authorization, getTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<GetToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTokenBalance
     * @param authorization API Key (required)
     * @param getTokenBalanceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenBalanceCall(String authorization, GetTokenBalanceRequest getTokenBalanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTokenBalanceRequest;

        // create path and map variables
        String localVarPath = "/getTokenBalance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenBalanceValidateBeforeCall(String authorization, GetTokenBalanceRequest getTokenBalanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getTokenBalance(Async)");
        }

        // verify the required parameter 'getTokenBalanceRequest' is set
        if (getTokenBalanceRequest == null) {
            throw new ApiException("Missing the required parameter 'getTokenBalanceRequest' when calling getTokenBalance(Async)");
        }

        return getTokenBalanceCall(authorization, getTokenBalanceRequest, _callback);

    }

    /**
     * getTokenBalance
     * Returns the token balance of a given address.
     * @param authorization API Key (required)
     * @param getTokenBalanceRequest  (required)
     * @return GetTokenBalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenBalance getTokenBalance(String authorization, GetTokenBalanceRequest getTokenBalanceRequest) throws ApiException {
        ApiResponse<GetTokenBalance> localVarResp = getTokenBalanceWithHttpInfo(authorization, getTokenBalanceRequest);
        return localVarResp.getData();
    }

    /**
     * getTokenBalance
     * Returns the token balance of a given address.
     * @param authorization API Key (required)
     * @param getTokenBalanceRequest  (required)
     * @return ApiResponse&lt;GetTokenBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTokenBalance> getTokenBalanceWithHttpInfo(String authorization, GetTokenBalanceRequest getTokenBalanceRequest) throws ApiException {
        okhttp3.Call localVarCall = getTokenBalanceValidateBeforeCall(authorization, getTokenBalanceRequest, null);
        Type localVarReturnType = new TypeToken<GetTokenBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getTokenBalance (asynchronously)
     * Returns the token balance of a given address.
     * @param authorization API Key (required)
     * @param getTokenBalanceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenBalanceAsync(String authorization, GetTokenBalanceRequest getTokenBalanceRequest, final ApiCallback<GetTokenBalance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenBalanceValidateBeforeCall(authorization, getTokenBalanceRequest, _callback);
        Type localVarReturnType = new TypeToken<GetTokenBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactions
     * @param authorization API Key (required)
     * @param getTransactionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsCall(String authorization, GetTransactionsRequest getTransactionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTransactionsRequest;

        // create path and map variables
        String localVarPath = "/getTransactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsValidateBeforeCall(String authorization, GetTransactionsRequest getTransactionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getTransactions(Async)");
        }

        // verify the required parameter 'getTransactionsRequest' is set
        if (getTransactionsRequest == null) {
            throw new ApiException("Missing the required parameter 'getTransactionsRequest' when calling getTransactions(Async)");
        }

        return getTransactionsCall(authorization, getTransactionsRequest, _callback);

    }

    /**
     * getTransactions
     * Returns information like confirmations, token contract address, amount, gas price and more of a given transaction.
     * @param authorization API Key (required)
     * @param getTransactionsRequest  (required)
     * @return GetTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetTransactions getTransactions(String authorization, GetTransactionsRequest getTransactionsRequest) throws ApiException {
        ApiResponse<GetTransactions> localVarResp = getTransactionsWithHttpInfo(authorization, getTransactionsRequest);
        return localVarResp.getData();
    }

    /**
     * getTransactions
     * Returns information like confirmations, token contract address, amount, gas price and more of a given transaction.
     * @param authorization API Key (required)
     * @param getTransactionsRequest  (required)
     * @return ApiResponse&lt;GetTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTransactions> getTransactionsWithHttpInfo(String authorization, GetTransactionsRequest getTransactionsRequest) throws ApiException {
        okhttp3.Call localVarCall = getTransactionsValidateBeforeCall(authorization, getTransactionsRequest, null);
        Type localVarReturnType = new TypeToken<GetTransactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getTransactions (asynchronously)
     * Returns information like confirmations, token contract address, amount, gas price and more of a given transaction.
     * @param authorization API Key (required)
     * @param getTransactionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsAsync(String authorization, GetTransactionsRequest getTransactionsRequest, final ApiCallback<GetTransactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsValidateBeforeCall(authorization, getTransactionsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetTransactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
