/*
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Cipherparams;
import org.openapitools.client.model.Kdfparams;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Crypto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:08.662869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crypto {
  public static final String SERIALIZED_NAME_CIPHER = "cipher";
  @SerializedName(SERIALIZED_NAME_CIPHER)
  private String cipher;

  public static final String SERIALIZED_NAME_CIPHERPARAMS = "cipherparams";
  @SerializedName(SERIALIZED_NAME_CIPHERPARAMS)
  private Cipherparams cipherparams;

  public static final String SERIALIZED_NAME_CIPHERTEXT = "ciphertext";
  @SerializedName(SERIALIZED_NAME_CIPHERTEXT)
  private String ciphertext;

  public static final String SERIALIZED_NAME_KDF = "kdf";
  @SerializedName(SERIALIZED_NAME_KDF)
  private String kdf;

  public static final String SERIALIZED_NAME_KDFPARAMS = "kdfparams";
  @SerializedName(SERIALIZED_NAME_KDFPARAMS)
  private Kdfparams kdfparams;

  public static final String SERIALIZED_NAME_MAC = "mac";
  @SerializedName(SERIALIZED_NAME_MAC)
  private String mac;

  public Crypto() {
  }

  public Crypto cipher(String cipher) {
    this.cipher = cipher;
    return this;
  }

  /**
   * Get cipher
   * @return cipher
   */
  @javax.annotation.Nonnull
  public String getCipher() {
    return cipher;
  }

  public void setCipher(String cipher) {
    this.cipher = cipher;
  }


  public Crypto cipherparams(Cipherparams cipherparams) {
    this.cipherparams = cipherparams;
    return this;
  }

  /**
   * Get cipherparams
   * @return cipherparams
   */
  @javax.annotation.Nonnull
  public Cipherparams getCipherparams() {
    return cipherparams;
  }

  public void setCipherparams(Cipherparams cipherparams) {
    this.cipherparams = cipherparams;
  }


  public Crypto ciphertext(String ciphertext) {
    this.ciphertext = ciphertext;
    return this;
  }

  /**
   * Get ciphertext
   * @return ciphertext
   */
  @javax.annotation.Nonnull
  public String getCiphertext() {
    return ciphertext;
  }

  public void setCiphertext(String ciphertext) {
    this.ciphertext = ciphertext;
  }


  public Crypto kdf(String kdf) {
    this.kdf = kdf;
    return this;
  }

  /**
   * Get kdf
   * @return kdf
   */
  @javax.annotation.Nonnull
  public String getKdf() {
    return kdf;
  }

  public void setKdf(String kdf) {
    this.kdf = kdf;
  }


  public Crypto kdfparams(Kdfparams kdfparams) {
    this.kdfparams = kdfparams;
    return this;
  }

  /**
   * Get kdfparams
   * @return kdfparams
   */
  @javax.annotation.Nonnull
  public Kdfparams getKdfparams() {
    return kdfparams;
  }

  public void setKdfparams(Kdfparams kdfparams) {
    this.kdfparams = kdfparams;
  }


  public Crypto mac(String mac) {
    this.mac = mac;
    return this;
  }

  /**
   * Get mac
   * @return mac
   */
  @javax.annotation.Nonnull
  public String getMac() {
    return mac;
  }

  public void setMac(String mac) {
    this.mac = mac;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crypto crypto = (Crypto) o;
    return Objects.equals(this.cipher, crypto.cipher) &&
        Objects.equals(this.cipherparams, crypto.cipherparams) &&
        Objects.equals(this.ciphertext, crypto.ciphertext) &&
        Objects.equals(this.kdf, crypto.kdf) &&
        Objects.equals(this.kdfparams, crypto.kdfparams) &&
        Objects.equals(this.mac, crypto.mac);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cipher, cipherparams, ciphertext, kdf, kdfparams, mac);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crypto {\n");
    sb.append("    cipher: ").append(toIndentedString(cipher)).append("\n");
    sb.append("    cipherparams: ").append(toIndentedString(cipherparams)).append("\n");
    sb.append("    ciphertext: ").append(toIndentedString(ciphertext)).append("\n");
    sb.append("    kdf: ").append(toIndentedString(kdf)).append("\n");
    sb.append("    kdfparams: ").append(toIndentedString(kdfparams)).append("\n");
    sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cipher");
    openapiFields.add("cipherparams");
    openapiFields.add("ciphertext");
    openapiFields.add("kdf");
    openapiFields.add("kdfparams");
    openapiFields.add("mac");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cipher");
    openapiRequiredFields.add("cipherparams");
    openapiRequiredFields.add("ciphertext");
    openapiRequiredFields.add("kdf");
    openapiRequiredFields.add("kdfparams");
    openapiRequiredFields.add("mac");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crypto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crypto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crypto is not found in the empty JSON string", Crypto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crypto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crypto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crypto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("cipher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cipher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cipher").toString()));
      }
      // validate the required field `cipherparams`
      Cipherparams.validateJsonElement(jsonObj.get("cipherparams"));
      if (!jsonObj.get("ciphertext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciphertext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ciphertext").toString()));
      }
      if (!jsonObj.get("kdf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kdf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kdf").toString()));
      }
      // validate the required field `kdfparams`
      Kdfparams.validateJsonElement(jsonObj.get("kdfparams"));
      if (!jsonObj.get("mac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crypto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crypto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crypto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crypto.class));

       return (TypeAdapter<T>) new TypeAdapter<Crypto>() {
           @Override
           public void write(JsonWriter out, Crypto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crypto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crypto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crypto
   * @throws IOException if the JSON string is invalid with respect to Crypto
   */
  public static Crypto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crypto.class);
  }

  /**
   * Convert an instance of Crypto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

