/*
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClearAddressRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:08.662869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClearAddressRequest {
  public static final String SERIALIZED_NAME_ETHEREUMADDRESS = "ethereumaddress";
  @SerializedName(SERIALIZED_NAME_ETHEREUMADDRESS)
  private String ethereumaddress;

  public static final String SERIALIZED_NAME_NEWADDRESS = "newaddress";
  @SerializedName(SERIALIZED_NAME_NEWADDRESS)
  private String newaddress;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public ClearAddressRequest() {
  }

  public ClearAddressRequest ethereumaddress(String ethereumaddress) {
    this.ethereumaddress = ethereumaddress;
    return this;
  }

  /**
   * Get ethereumaddress
   * @return ethereumaddress
   */
  @javax.annotation.Nonnull
  public String getEthereumaddress() {
    return ethereumaddress;
  }

  public void setEthereumaddress(String ethereumaddress) {
    this.ethereumaddress = ethereumaddress;
  }


  public ClearAddressRequest newaddress(String newaddress) {
    this.newaddress = newaddress;
    return this;
  }

  /**
   * Get newaddress
   * @return newaddress
   */
  @javax.annotation.Nonnull
  public String getNewaddress() {
    return newaddress;
  }

  public void setNewaddress(String newaddress) {
    this.newaddress = newaddress;
  }


  public ClearAddressRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nonnull
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClearAddressRequest clearAddressRequest = (ClearAddressRequest) o;
    return Objects.equals(this.ethereumaddress, clearAddressRequest.ethereumaddress) &&
        Objects.equals(this.newaddress, clearAddressRequest.newaddress) &&
        Objects.equals(this.password, clearAddressRequest.password);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ethereumaddress, newaddress, password);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClearAddressRequest {\n");
    sb.append("    ethereumaddress: ").append(toIndentedString(ethereumaddress)).append("\n");
    sb.append("    newaddress: ").append(toIndentedString(newaddress)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ethereumaddress");
    openapiFields.add("newaddress");
    openapiFields.add("password");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ethereumaddress");
    openapiRequiredFields.add("newaddress");
    openapiRequiredFields.add("password");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClearAddressRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClearAddressRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClearAddressRequest is not found in the empty JSON string", ClearAddressRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClearAddressRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClearAddressRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClearAddressRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ethereumaddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethereumaddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ethereumaddress").toString()));
      }
      if (!jsonObj.get("newaddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newaddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newaddress").toString()));
      }
      if (!jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClearAddressRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClearAddressRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClearAddressRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClearAddressRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ClearAddressRequest>() {
           @Override
           public void write(JsonWriter out, ClearAddressRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClearAddressRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClearAddressRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClearAddressRequest
   * @throws IOException if the JSON string is invalid with respect to ClearAddressRequest
   */
  public static ClearAddressRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClearAddressRequest.class);
  }

  /**
   * Convert an instance of ClearAddressRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

