/*
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeleteAddress;
import org.openapitools.client.model.DeleteAddressRequest;
import org.openapitools.client.model.ExportAddress;
import org.openapitools.client.model.ExportAddressRequest;
import org.openapitools.client.model.ImportAddress;
import org.openapitools.client.model.ImportAddressRequest;
import org.openapitools.client.model.ListAddresses;
import org.openapitools.client.model.NewAddress;
import org.openapitools.client.model.NewAddressRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressRequestsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AddressRequestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressRequestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAddress
     * @param authorization API Key (required)
     * @param deleteAddressRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAddressCall(String authorization, DeleteAddressRequest deleteAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAddressRequest;

        // create path and map variables
        String localVarPath = "/deleteAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAddressValidateBeforeCall(String authorization, DeleteAddressRequest deleteAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteAddress(Async)");
        }

        // verify the required parameter 'deleteAddressRequest' is set
        if (deleteAddressRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteAddressRequest' when calling deleteAddress(Async)");
        }

        return deleteAddressCall(authorization, deleteAddressRequest, _callback);

    }

    /**
     * deleteAddress
     * Deletes an existing ethereum address. Be careful when using this function.
     * @param authorization API Key (required)
     * @param deleteAddressRequest  (required)
     * @return DeleteAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAddress deleteAddress(String authorization, DeleteAddressRequest deleteAddressRequest) throws ApiException {
        ApiResponse<DeleteAddress> localVarResp = deleteAddressWithHttpInfo(authorization, deleteAddressRequest);
        return localVarResp.getData();
    }

    /**
     * deleteAddress
     * Deletes an existing ethereum address. Be careful when using this function.
     * @param authorization API Key (required)
     * @param deleteAddressRequest  (required)
     * @return ApiResponse&lt;DeleteAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAddress> deleteAddressWithHttpInfo(String authorization, DeleteAddressRequest deleteAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteAddressValidateBeforeCall(authorization, deleteAddressRequest, null);
        Type localVarReturnType = new TypeToken<DeleteAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * deleteAddress (asynchronously)
     * Deletes an existing ethereum address. Be careful when using this function.
     * @param authorization API Key (required)
     * @param deleteAddressRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAddressAsync(String authorization, DeleteAddressRequest deleteAddressRequest, final ApiCallback<DeleteAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAddressValidateBeforeCall(authorization, deleteAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportAddress
     * @param authorization API Key (required)
     * @param exportAddressRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAddressCall(String authorization, ExportAddressRequest exportAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportAddressRequest;

        // create path and map variables
        String localVarPath = "/exportAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportAddressValidateBeforeCall(String authorization, ExportAddressRequest exportAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling exportAddress(Async)");
        }

        // verify the required parameter 'exportAddressRequest' is set
        if (exportAddressRequest == null) {
            throw new ApiException("Missing the required parameter 'exportAddressRequest' when calling exportAddress(Async)");
        }

        return exportAddressCall(authorization, exportAddressRequest, _callback);

    }

    /**
     * exportAddress
     * Returns all ethereum addresses created with an account.
     * @param authorization API Key (required)
     * @param exportAddressRequest  (required)
     * @return ExportAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExportAddress exportAddress(String authorization, ExportAddressRequest exportAddressRequest) throws ApiException {
        ApiResponse<ExportAddress> localVarResp = exportAddressWithHttpInfo(authorization, exportAddressRequest);
        return localVarResp.getData();
    }

    /**
     * exportAddress
     * Returns all ethereum addresses created with an account.
     * @param authorization API Key (required)
     * @param exportAddressRequest  (required)
     * @return ApiResponse&lt;ExportAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportAddress> exportAddressWithHttpInfo(String authorization, ExportAddressRequest exportAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = exportAddressValidateBeforeCall(authorization, exportAddressRequest, null);
        Type localVarReturnType = new TypeToken<ExportAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * exportAddress (asynchronously)
     * Returns all ethereum addresses created with an account.
     * @param authorization API Key (required)
     * @param exportAddressRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAddressAsync(String authorization, ExportAddressRequest exportAddressRequest, final ApiCallback<ExportAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportAddressValidateBeforeCall(authorization, exportAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<ExportAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importAddress
     * @param authorization API Key (required)
     * @param importAddressRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importAddressCall(String authorization, ImportAddressRequest importAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importAddressRequest;

        // create path and map variables
        String localVarPath = "/importAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importAddressValidateBeforeCall(String authorization, ImportAddressRequest importAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling importAddress(Async)");
        }

        // verify the required parameter 'importAddressRequest' is set
        if (importAddressRequest == null) {
            throw new ApiException("Missing the required parameter 'importAddressRequest' when calling importAddress(Async)");
        }

        return importAddressCall(authorization, importAddressRequest, _callback);

    }

    /**
     * importAddress
     * Returns all ethereum addresses created with an account.
     * @param authorization API Key (required)
     * @param importAddressRequest  (required)
     * @return ImportAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImportAddress importAddress(String authorization, ImportAddressRequest importAddressRequest) throws ApiException {
        ApiResponse<ImportAddress> localVarResp = importAddressWithHttpInfo(authorization, importAddressRequest);
        return localVarResp.getData();
    }

    /**
     * importAddress
     * Returns all ethereum addresses created with an account.
     * @param authorization API Key (required)
     * @param importAddressRequest  (required)
     * @return ApiResponse&lt;ImportAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportAddress> importAddressWithHttpInfo(String authorization, ImportAddressRequest importAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = importAddressValidateBeforeCall(authorization, importAddressRequest, null);
        Type localVarReturnType = new TypeToken<ImportAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * importAddress (asynchronously)
     * Returns all ethereum addresses created with an account.
     * @param authorization API Key (required)
     * @param importAddressRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importAddressAsync(String authorization, ImportAddressRequest importAddressRequest, final ApiCallback<ImportAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = importAddressValidateBeforeCall(authorization, importAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<ImportAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAddresses
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAddressesCall(String contentType, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listAddresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAddressesValidateBeforeCall(String contentType, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listAddresses(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listAddresses(Async)");
        }

        return listAddressesCall(contentType, authorization, _callback);

    }

    /**
     * listAddresses
     * Returns all ethereum addresses created with an account.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @return ListAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListAddresses listAddresses(String contentType, String authorization) throws ApiException {
        ApiResponse<ListAddresses> localVarResp = listAddressesWithHttpInfo(contentType, authorization);
        return localVarResp.getData();
    }

    /**
     * listAddresses
     * Returns all ethereum addresses created with an account.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @return ApiResponse&lt;ListAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAddresses> listAddressesWithHttpInfo(String contentType, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listAddressesValidateBeforeCall(contentType, authorization, null);
        Type localVarReturnType = new TypeToken<ListAddresses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * listAddresses (asynchronously)
     * Returns all ethereum addresses created with an account.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAddressesAsync(String contentType, String authorization, final ApiCallback<ListAddresses> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAddressesValidateBeforeCall(contentType, authorization, _callback);
        Type localVarReturnType = new TypeToken<ListAddresses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for newAddress
     * @param authorization API Key (required)
     * @param newAddressRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newAddressCall(String authorization, NewAddressRequest newAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newAddressRequest;

        // create path and map variables
        String localVarPath = "/newAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newAddressValidateBeforeCall(String authorization, NewAddressRequest newAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling newAddress(Async)");
        }

        // verify the required parameter 'newAddressRequest' is set
        if (newAddressRequest == null) {
            throw new ApiException("Missing the required parameter 'newAddressRequest' when calling newAddress(Async)");
        }

        return newAddressCall(authorization, newAddressRequest, _callback);

    }

    /**
     * newAddress
     * Generates a new ethereum addresses you can use to send or receive funds. Do not lose the password! We can&#39;t restore access to an address if you lose it.
     * @param authorization API Key (required)
     * @param newAddressRequest  (required)
     * @return NewAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NewAddress newAddress(String authorization, NewAddressRequest newAddressRequest) throws ApiException {
        ApiResponse<NewAddress> localVarResp = newAddressWithHttpInfo(authorization, newAddressRequest);
        return localVarResp.getData();
    }

    /**
     * newAddress
     * Generates a new ethereum addresses you can use to send or receive funds. Do not lose the password! We can&#39;t restore access to an address if you lose it.
     * @param authorization API Key (required)
     * @param newAddressRequest  (required)
     * @return ApiResponse&lt;NewAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewAddress> newAddressWithHttpInfo(String authorization, NewAddressRequest newAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = newAddressValidateBeforeCall(authorization, newAddressRequest, null);
        Type localVarReturnType = new TypeToken<NewAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * newAddress (asynchronously)
     * Generates a new ethereum addresses you can use to send or receive funds. Do not lose the password! We can&#39;t restore access to an address if you lose it.
     * @param authorization API Key (required)
     * @param newAddressRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newAddressAsync(String authorization, NewAddressRequest newAddressRequest, final ApiCallback<NewAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = newAddressValidateBeforeCall(authorization, newAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<NewAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
