/*
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBlock
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:08.662869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetBlock {
  public static final String SERIALIZED_NAME_BLOCK_NUMBER = "block_number";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUMBER)
  private String blockNumber;

  public static final String SERIALIZED_NAME_DIFFICULTY = "difficulty";
  @SerializedName(SERIALIZED_NAME_DIFFICULTY)
  private String difficulty;

  public static final String SERIALIZED_NAME_GAS_LIMIT = "gas_limit";
  @SerializedName(SERIALIZED_NAME_GAS_LIMIT)
  private String gasLimit;

  public static final String SERIALIZED_NAME_GAS_USED = "gas_used";
  @SerializedName(SERIALIZED_NAME_GAS_USED)
  private String gasUsed;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_MINER = "miner";
  @SerializedName(SERIALIZED_NAME_MINER)
  private String miner;

  public static final String SERIALIZED_NAME_OK = "ok";
  @SerializedName(SERIALIZED_NAME_OK)
  private Boolean ok;

  public static final String SERIALIZED_NAME_PARENT_HASH = "parent_hash";
  @SerializedName(SERIALIZED_NAME_PARENT_HASH)
  private String parentHash;

  public static final String SERIALIZED_NAME_SIZE_IN_BYTES = "size_in_bytes";
  @SerializedName(SERIALIZED_NAME_SIZE_IN_BYTES)
  private String sizeInBytes;

  public static final String SERIALIZED_NAME_TIME_STAMP = "time_stamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private String timeStamp;

  public static final String SERIALIZED_NAME_TRANSACTIONS_COUNT = "transactions_count";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS_COUNT)
  private String transactionsCount;

  public GetBlock() {
  }

  public GetBlock blockNumber(String blockNumber) {
    this.blockNumber = blockNumber;
    return this;
  }

  /**
   * Get blockNumber
   * @return blockNumber
   */
  @javax.annotation.Nonnull
  public String getBlockNumber() {
    return blockNumber;
  }

  public void setBlockNumber(String blockNumber) {
    this.blockNumber = blockNumber;
  }


  public GetBlock difficulty(String difficulty) {
    this.difficulty = difficulty;
    return this;
  }

  /**
   * Get difficulty
   * @return difficulty
   */
  @javax.annotation.Nonnull
  public String getDifficulty() {
    return difficulty;
  }

  public void setDifficulty(String difficulty) {
    this.difficulty = difficulty;
  }


  public GetBlock gasLimit(String gasLimit) {
    this.gasLimit = gasLimit;
    return this;
  }

  /**
   * Get gasLimit
   * @return gasLimit
   */
  @javax.annotation.Nonnull
  public String getGasLimit() {
    return gasLimit;
  }

  public void setGasLimit(String gasLimit) {
    this.gasLimit = gasLimit;
  }


  public GetBlock gasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
    return this;
  }

  /**
   * Get gasUsed
   * @return gasUsed
   */
  @javax.annotation.Nonnull
  public String getGasUsed() {
    return gasUsed;
  }

  public void setGasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
  }


  public GetBlock hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * Get hash
   * @return hash
   */
  @javax.annotation.Nonnull
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public GetBlock miner(String miner) {
    this.miner = miner;
    return this;
  }

  /**
   * Get miner
   * @return miner
   */
  @javax.annotation.Nonnull
  public String getMiner() {
    return miner;
  }

  public void setMiner(String miner) {
    this.miner = miner;
  }


  public GetBlock ok(Boolean ok) {
    this.ok = ok;
    return this;
  }

  /**
   * Get ok
   * @return ok
   */
  @javax.annotation.Nonnull
  public Boolean getOk() {
    return ok;
  }

  public void setOk(Boolean ok) {
    this.ok = ok;
  }


  public GetBlock parentHash(String parentHash) {
    this.parentHash = parentHash;
    return this;
  }

  /**
   * Get parentHash
   * @return parentHash
   */
  @javax.annotation.Nonnull
  public String getParentHash() {
    return parentHash;
  }

  public void setParentHash(String parentHash) {
    this.parentHash = parentHash;
  }


  public GetBlock sizeInBytes(String sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
    return this;
  }

  /**
   * Get sizeInBytes
   * @return sizeInBytes
   */
  @javax.annotation.Nonnull
  public String getSizeInBytes() {
    return sizeInBytes;
  }

  public void setSizeInBytes(String sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
  }


  public GetBlock timeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * Get timeStamp
   * @return timeStamp
   */
  @javax.annotation.Nonnull
  public String getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
  }


  public GetBlock transactionsCount(String transactionsCount) {
    this.transactionsCount = transactionsCount;
    return this;
  }

  /**
   * Get transactionsCount
   * @return transactionsCount
   */
  @javax.annotation.Nonnull
  public String getTransactionsCount() {
    return transactionsCount;
  }

  public void setTransactionsCount(String transactionsCount) {
    this.transactionsCount = transactionsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBlock getBlock = (GetBlock) o;
    return Objects.equals(this.blockNumber, getBlock.blockNumber) &&
        Objects.equals(this.difficulty, getBlock.difficulty) &&
        Objects.equals(this.gasLimit, getBlock.gasLimit) &&
        Objects.equals(this.gasUsed, getBlock.gasUsed) &&
        Objects.equals(this.hash, getBlock.hash) &&
        Objects.equals(this.miner, getBlock.miner) &&
        Objects.equals(this.ok, getBlock.ok) &&
        Objects.equals(this.parentHash, getBlock.parentHash) &&
        Objects.equals(this.sizeInBytes, getBlock.sizeInBytes) &&
        Objects.equals(this.timeStamp, getBlock.timeStamp) &&
        Objects.equals(this.transactionsCount, getBlock.transactionsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockNumber, difficulty, gasLimit, gasUsed, hash, miner, ok, parentHash, sizeInBytes, timeStamp, transactionsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBlock {\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    difficulty: ").append(toIndentedString(difficulty)).append("\n");
    sb.append("    gasLimit: ").append(toIndentedString(gasLimit)).append("\n");
    sb.append("    gasUsed: ").append(toIndentedString(gasUsed)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    miner: ").append(toIndentedString(miner)).append("\n");
    sb.append("    ok: ").append(toIndentedString(ok)).append("\n");
    sb.append("    parentHash: ").append(toIndentedString(parentHash)).append("\n");
    sb.append("    sizeInBytes: ").append(toIndentedString(sizeInBytes)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    transactionsCount: ").append(toIndentedString(transactionsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("block_number");
    openapiFields.add("difficulty");
    openapiFields.add("gas_limit");
    openapiFields.add("gas_used");
    openapiFields.add("hash");
    openapiFields.add("miner");
    openapiFields.add("ok");
    openapiFields.add("parent_hash");
    openapiFields.add("size_in_bytes");
    openapiFields.add("time_stamp");
    openapiFields.add("transactions_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("block_number");
    openapiRequiredFields.add("difficulty");
    openapiRequiredFields.add("gas_limit");
    openapiRequiredFields.add("gas_used");
    openapiRequiredFields.add("hash");
    openapiRequiredFields.add("miner");
    openapiRequiredFields.add("ok");
    openapiRequiredFields.add("parent_hash");
    openapiRequiredFields.add("size_in_bytes");
    openapiRequiredFields.add("time_stamp");
    openapiRequiredFields.add("transactions_count");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBlock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBlock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBlock is not found in the empty JSON string", GetBlock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBlock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBlock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetBlock.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("block_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `block_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("block_number").toString()));
      }
      if (!jsonObj.get("difficulty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `difficulty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("difficulty").toString()));
      }
      if (!jsonObj.get("gas_limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gas_limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gas_limit").toString()));
      }
      if (!jsonObj.get("gas_used").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gas_used` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gas_used").toString()));
      }
      if (!jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      if (!jsonObj.get("miner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `miner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("miner").toString()));
      }
      if (!jsonObj.get("parent_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_hash").toString()));
      }
      if (!jsonObj.get("size_in_bytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size_in_bytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size_in_bytes").toString()));
      }
      if (!jsonObj.get("time_stamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_stamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_stamp").toString()));
      }
      if (!jsonObj.get("transactions_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactions_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactions_count").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBlock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBlock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBlock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBlock.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBlock>() {
           @Override
           public void write(JsonWriter out, GetBlock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBlock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBlock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBlock
   * @throws IOException if the JSON string is invalid with respect to GetBlock
   */
  public static GetBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBlock.class);
  }

  /**
   * Convert an instance of GetBlock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

