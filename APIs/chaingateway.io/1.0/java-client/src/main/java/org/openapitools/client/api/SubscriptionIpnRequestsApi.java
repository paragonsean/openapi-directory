/*
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListFailedIPNs;
import org.openapitools.client.model.ListSubscribedAddresses;
import org.openapitools.client.model.ResendFailedIPN;
import org.openapitools.client.model.ResendFailedIPNRequest;
import org.openapitools.client.model.SubscribeAddress;
import org.openapitools.client.model.SubscribeAddressRequest;
import org.openapitools.client.model.UnsubscribeAddress;
import org.openapitools.client.model.UnsubscribeAddressRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionIpnRequestsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionIpnRequestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionIpnRequestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listFailedIPNs
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFailedIPNsCall(String contentType, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listFailedIPNs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFailedIPNsValidateBeforeCall(String contentType, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listFailedIPNs(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listFailedIPNs(Async)");
        }

        return listFailedIPNsCall(contentType, authorization, _callback);

    }

    /**
     * listFailedIPNs
     * Returns all subscriptions/IPNs created with an account.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @return ListFailedIPNs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListFailedIPNs listFailedIPNs(String contentType, String authorization) throws ApiException {
        ApiResponse<ListFailedIPNs> localVarResp = listFailedIPNsWithHttpInfo(contentType, authorization);
        return localVarResp.getData();
    }

    /**
     * listFailedIPNs
     * Returns all subscriptions/IPNs created with an account.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @return ApiResponse&lt;ListFailedIPNs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFailedIPNs> listFailedIPNsWithHttpInfo(String contentType, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listFailedIPNsValidateBeforeCall(contentType, authorization, null);
        Type localVarReturnType = new TypeToken<ListFailedIPNs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * listFailedIPNs (asynchronously)
     * Returns all subscriptions/IPNs created with an account.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFailedIPNsAsync(String contentType, String authorization, final ApiCallback<ListFailedIPNs> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFailedIPNsValidateBeforeCall(contentType, authorization, _callback);
        Type localVarReturnType = new TypeToken<ListFailedIPNs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSubscribedAddresses
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubscribedAddressesCall(String contentType, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listSubscribedAddresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubscribedAddressesValidateBeforeCall(String contentType, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listSubscribedAddresses(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listSubscribedAddresses(Async)");
        }

        return listSubscribedAddressesCall(contentType, authorization, _callback);

    }

    /**
     * listSubscribedAddresses
     * Returns all subscriptions/IPNs created with an account.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @return ListSubscribedAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListSubscribedAddresses listSubscribedAddresses(String contentType, String authorization) throws ApiException {
        ApiResponse<ListSubscribedAddresses> localVarResp = listSubscribedAddressesWithHttpInfo(contentType, authorization);
        return localVarResp.getData();
    }

    /**
     * listSubscribedAddresses
     * Returns all subscriptions/IPNs created with an account.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @return ApiResponse&lt;ListSubscribedAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSubscribedAddresses> listSubscribedAddressesWithHttpInfo(String contentType, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listSubscribedAddressesValidateBeforeCall(contentType, authorization, null);
        Type localVarReturnType = new TypeToken<ListSubscribedAddresses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * listSubscribedAddresses (asynchronously)
     * Returns all subscriptions/IPNs created with an account.
     * @param contentType  (required)
     * @param authorization API Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubscribedAddressesAsync(String contentType, String authorization, final ApiCallback<ListSubscribedAddresses> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubscribedAddressesValidateBeforeCall(contentType, authorization, _callback);
        Type localVarReturnType = new TypeToken<ListSubscribedAddresses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendFailedIPN
     * @param authorization API Key (required)
     * @param resendFailedIPNRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendFailedIPNCall(String authorization, ResendFailedIPNRequest resendFailedIPNRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resendFailedIPNRequest;

        // create path and map variables
        String localVarPath = "/resendFailedIPN";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendFailedIPNValidateBeforeCall(String authorization, ResendFailedIPNRequest resendFailedIPNRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling resendFailedIPN(Async)");
        }

        // verify the required parameter 'resendFailedIPNRequest' is set
        if (resendFailedIPNRequest == null) {
            throw new ApiException("Missing the required parameter 'resendFailedIPNRequest' when calling resendFailedIPN(Async)");
        }

        return resendFailedIPNCall(authorization, resendFailedIPNRequest, _callback);

    }

    /**
     * resendFailedIPN
     * Returns all subscriptions/IPNs created with an account.
     * @param authorization API Key (required)
     * @param resendFailedIPNRequest  (required)
     * @return ResendFailedIPN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ResendFailedIPN resendFailedIPN(String authorization, ResendFailedIPNRequest resendFailedIPNRequest) throws ApiException {
        ApiResponse<ResendFailedIPN> localVarResp = resendFailedIPNWithHttpInfo(authorization, resendFailedIPNRequest);
        return localVarResp.getData();
    }

    /**
     * resendFailedIPN
     * Returns all subscriptions/IPNs created with an account.
     * @param authorization API Key (required)
     * @param resendFailedIPNRequest  (required)
     * @return ApiResponse&lt;ResendFailedIPN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResendFailedIPN> resendFailedIPNWithHttpInfo(String authorization, ResendFailedIPNRequest resendFailedIPNRequest) throws ApiException {
        okhttp3.Call localVarCall = resendFailedIPNValidateBeforeCall(authorization, resendFailedIPNRequest, null);
        Type localVarReturnType = new TypeToken<ResendFailedIPN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * resendFailedIPN (asynchronously)
     * Returns all subscriptions/IPNs created with an account.
     * @param authorization API Key (required)
     * @param resendFailedIPNRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendFailedIPNAsync(String authorization, ResendFailedIPNRequest resendFailedIPNRequest, final ApiCallback<ResendFailedIPN> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendFailedIPNValidateBeforeCall(authorization, resendFailedIPNRequest, _callback);
        Type localVarReturnType = new TypeToken<ResendFailedIPN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscribeAddress
     * @param authorization API Key (required)
     * @param subscribeAddressRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscribeAddressCall(String authorization, SubscribeAddressRequest subscribeAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscribeAddressRequest;

        // create path and map variables
        String localVarPath = "/subscribeAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeAddressValidateBeforeCall(String authorization, SubscribeAddressRequest subscribeAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling subscribeAddress(Async)");
        }

        // verify the required parameter 'subscribeAddressRequest' is set
        if (subscribeAddressRequest == null) {
            throw new ApiException("Missing the required parameter 'subscribeAddressRequest' when calling subscribeAddress(Async)");
        }

        return subscribeAddressCall(authorization, subscribeAddressRequest, _callback);

    }

    /**
     * subscribeAddress
     * Creates a new subscription/IPN for the given address (and contractaddress). You will receive a notification to the given url every time a deposit is received. Unsubscribe the address before sending tokens/ETH from it or you won&#39;t get reliable notifications anymore.  
     * @param authorization API Key (required)
     * @param subscribeAddressRequest  (required)
     * @return SubscribeAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SubscribeAddress subscribeAddress(String authorization, SubscribeAddressRequest subscribeAddressRequest) throws ApiException {
        ApiResponse<SubscribeAddress> localVarResp = subscribeAddressWithHttpInfo(authorization, subscribeAddressRequest);
        return localVarResp.getData();
    }

    /**
     * subscribeAddress
     * Creates a new subscription/IPN for the given address (and contractaddress). You will receive a notification to the given url every time a deposit is received. Unsubscribe the address before sending tokens/ETH from it or you won&#39;t get reliable notifications anymore.  
     * @param authorization API Key (required)
     * @param subscribeAddressRequest  (required)
     * @return ApiResponse&lt;SubscribeAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscribeAddress> subscribeAddressWithHttpInfo(String authorization, SubscribeAddressRequest subscribeAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = subscribeAddressValidateBeforeCall(authorization, subscribeAddressRequest, null);
        Type localVarReturnType = new TypeToken<SubscribeAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * subscribeAddress (asynchronously)
     * Creates a new subscription/IPN for the given address (and contractaddress). You will receive a notification to the given url every time a deposit is received. Unsubscribe the address before sending tokens/ETH from it or you won&#39;t get reliable notifications anymore.  
     * @param authorization API Key (required)
     * @param subscribeAddressRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscribeAddressAsync(String authorization, SubscribeAddressRequest subscribeAddressRequest, final ApiCallback<SubscribeAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscribeAddressValidateBeforeCall(authorization, subscribeAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<SubscribeAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unsubscribeAddress
     * @param authorization API Key (required)
     * @param unsubscribeAddressRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsubscribeAddressCall(String authorization, UnsubscribeAddressRequest unsubscribeAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unsubscribeAddressRequest;

        // create path and map variables
        String localVarPath = "/unsubscribeAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unsubscribeAddressValidateBeforeCall(String authorization, UnsubscribeAddressRequest unsubscribeAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling unsubscribeAddress(Async)");
        }

        // verify the required parameter 'unsubscribeAddressRequest' is set
        if (unsubscribeAddressRequest == null) {
            throw new ApiException("Missing the required parameter 'unsubscribeAddressRequest' when calling unsubscribeAddress(Async)");
        }

        return unsubscribeAddressCall(authorization, unsubscribeAddressRequest, _callback);

    }

    /**
     * unsubscribeAddress
     * Deletes an existing subscription/IPN for the given address (and contractaddress).
     * @param authorization API Key (required)
     * @param unsubscribeAddressRequest  (required)
     * @return UnsubscribeAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UnsubscribeAddress unsubscribeAddress(String authorization, UnsubscribeAddressRequest unsubscribeAddressRequest) throws ApiException {
        ApiResponse<UnsubscribeAddress> localVarResp = unsubscribeAddressWithHttpInfo(authorization, unsubscribeAddressRequest);
        return localVarResp.getData();
    }

    /**
     * unsubscribeAddress
     * Deletes an existing subscription/IPN for the given address (and contractaddress).
     * @param authorization API Key (required)
     * @param unsubscribeAddressRequest  (required)
     * @return ApiResponse&lt;UnsubscribeAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnsubscribeAddress> unsubscribeAddressWithHttpInfo(String authorization, UnsubscribeAddressRequest unsubscribeAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = unsubscribeAddressValidateBeforeCall(authorization, unsubscribeAddressRequest, null);
        Type localVarReturnType = new TypeToken<UnsubscribeAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * unsubscribeAddress (asynchronously)
     * Deletes an existing subscription/IPN for the given address (and contractaddress).
     * @param authorization API Key (required)
     * @param unsubscribeAddressRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsubscribeAddressAsync(String authorization, UnsubscribeAddressRequest unsubscribeAddressRequest, final ApiCallback<UnsubscribeAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = unsubscribeAddressValidateBeforeCall(authorization, unsubscribeAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<UnsubscribeAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
