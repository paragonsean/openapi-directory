/*
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ipn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:08.662869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Ipn {
  public static final String SERIALIZED_NAME_CONTRACTADDRESS = "contractaddress";
  @SerializedName(SERIALIZED_NAME_CONTRACTADDRESS)
  private String contractaddress;

  public static final String SERIALIZED_NAME_ETHEREUMADDRESS = "ethereumaddress";
  @SerializedName(SERIALIZED_NAME_ETHEREUMADDRESS)
  private String ethereumaddress;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Ipn() {
  }

  public Ipn contractaddress(String contractaddress) {
    this.contractaddress = contractaddress;
    return this;
  }

  /**
   * Get contractaddress
   * @return contractaddress
   */
  @javax.annotation.Nonnull
  public String getContractaddress() {
    return contractaddress;
  }

  public void setContractaddress(String contractaddress) {
    this.contractaddress = contractaddress;
  }


  public Ipn ethereumaddress(String ethereumaddress) {
    this.ethereumaddress = ethereumaddress;
    return this;
  }

  /**
   * Get ethereumaddress
   * @return ethereumaddress
   */
  @javax.annotation.Nonnull
  public String getEthereumaddress() {
    return ethereumaddress;
  }

  public void setEthereumaddress(String ethereumaddress) {
    this.ethereumaddress = ethereumaddress;
  }


  public Ipn url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ipn ipn = (Ipn) o;
    return Objects.equals(this.contractaddress, ipn.contractaddress) &&
        Objects.equals(this.ethereumaddress, ipn.ethereumaddress) &&
        Objects.equals(this.url, ipn.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractaddress, ethereumaddress, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ipn {\n");
    sb.append("    contractaddress: ").append(toIndentedString(contractaddress)).append("\n");
    sb.append("    ethereumaddress: ").append(toIndentedString(ethereumaddress)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractaddress");
    openapiFields.add("ethereumaddress");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contractaddress");
    openapiRequiredFields.add("ethereumaddress");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ipn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ipn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ipn is not found in the empty JSON string", Ipn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ipn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ipn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Ipn.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("contractaddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractaddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractaddress").toString()));
      }
      if (!jsonObj.get("ethereumaddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethereumaddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ethereumaddress").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ipn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ipn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ipn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ipn.class));

       return (TypeAdapter<T>) new TypeAdapter<Ipn>() {
           @Override
           public void write(JsonWriter out, Ipn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ipn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ipn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ipn
   * @throws IOException if the JSON string is invalid with respect to Ipn
   */
  public static Ipn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ipn.class);
  }

  /**
   * Convert an instance of Ipn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

