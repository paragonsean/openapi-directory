/*
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ClearAddress;
import org.openapitools.client.model.ClearAddressRequest;
import org.openapitools.client.model.SendEthereum;
import org.openapitools.client.model.SendEthereumRequest;
import org.openapitools.client.model.SendToken;
import org.openapitools.client.model.SendTokenRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionRequestsApi
 */
@Disabled
public class TransactionRequestsApiTest {

    private final TransactionRequestsApi api = new TransactionRequestsApi();

    /**
     * clearAddress
     *
     * Sends all available ethereum funds of an address to a specified receiver address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clearAddressTest() throws ApiException {
        String authorization = null;
        ClearAddressRequest clearAddressRequest = null;
        ClearAddress response = api.clearAddress(authorization, clearAddressRequest);
        // TODO: test validations
    }

    /**
     * sendEthereum
     *
     * Sends ethereum from an address controlled by the account to a specified receiver address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEthereumTest() throws ApiException {
        String authorization = null;
        SendEthereumRequest sendEthereumRequest = null;
        SendEthereum response = api.sendEthereum(authorization, sendEthereumRequest);
        // TODO: test validations
    }

    /**
     * sendToken
     *
     * Sends ERC20 tokens from an address controlled by the account to a specified receiver address. The token contract address is needed to specify the token. The use of the identifier parameter is recommend and awaits an unique string. Whenever a transaction is beeing sent, the identifier is checked and the transaction gets dropped if there is one with that identifier already.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendTokenTest() throws ApiException {
        String authorization = null;
        SendTokenRequest sendTokenRequest = null;
        SendToken response = api.sendToken(authorization, sendTokenRequest);
        // TODO: test validations
    }

}
