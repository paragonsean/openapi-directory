/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResendFailedIPNRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResendFailedIPNRequest::OAIResendFailedIPNRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResendFailedIPNRequest::OAIResendFailedIPNRequest() {
    this->initializeModel();
}

OAIResendFailedIPNRequest::~OAIResendFailedIPNRequest() {}

void OAIResendFailedIPNRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIResendFailedIPNRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResendFailedIPNRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIResendFailedIPNRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResendFailedIPNRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

qint32 OAIResendFailedIPNRequest::getId() const {
    return m_id;
}
void OAIResendFailedIPNRequest::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResendFailedIPNRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResendFailedIPNRequest::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIResendFailedIPNRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResendFailedIPNRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
