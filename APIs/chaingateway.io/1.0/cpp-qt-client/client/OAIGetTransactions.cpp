/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTransactions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTransactions::OAIGetTransactions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTransactions::OAIGetTransactions() {
    this->initializeModel();
}

OAIGetTransactions::~OAIGetTransactions() {}

void OAIGetTransactions::initializeModel() {

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_transactions_isSet = false;
    m_transactions_isValid = false;
}

void OAIGetTransactions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTransactions::fromJsonObject(QJsonObject json) {

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;
}

QString OAIGetTransactions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTransactions::asJsonObject() const {
    QJsonObject obj;
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_transactions.size() > 0) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    return obj;
}

bool OAIGetTransactions::isOk() const {
    return m_ok;
}
void OAIGetTransactions::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIGetTransactions::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIGetTransactions::is_ok_Valid() const{
    return m_ok_isValid;
}

QList<OAITransaction> OAIGetTransactions::getTransactions() const {
    return m_transactions;
}
void OAIGetTransactions::setTransactions(const QList<OAITransaction> &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIGetTransactions::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIGetTransactions::is_transactions_Valid() const{
    return m_transactions_isValid;
}

bool OAIGetTransactions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTransactions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ok_isValid && m_transactions_isValid && true;
}

} // namespace OpenAPI
