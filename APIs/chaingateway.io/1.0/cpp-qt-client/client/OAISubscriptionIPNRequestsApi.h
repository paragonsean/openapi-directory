/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubscriptionIPNRequestsApi_H
#define OAI_OAISubscriptionIPNRequestsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListFailedIPNs.h"
#include "OAIListSubscribedAddresses.h"
#include "OAIResendFailedIPN.h"
#include "OAIResendFailedIPNRequest.h"
#include "OAISubscribeAddress.h"
#include "OAISubscribeAddressRequest.h"
#include "OAIUnsubscribeAddress.h"
#include "OAIUnsubscribeAddressRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubscriptionIPNRequestsApi : public QObject {
    Q_OBJECT

public:
    OAISubscriptionIPNRequestsApi(const int timeOut = 0);
    ~OAISubscriptionIPNRequestsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  authorization QString [required]
    */
    virtual void listFailedIPNs(const QString &content_type, const QString &authorization);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  authorization QString [required]
    */
    virtual void listSubscribedAddresses(const QString &content_type, const QString &authorization);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_resend_failed_ipn_request OAIResendFailedIPNRequest [required]
    */
    virtual void resendFailedIPN(const QString &authorization, const OAIResendFailedIPNRequest &oai_resend_failed_ipn_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_subscribe_address_request OAISubscribeAddressRequest [required]
    */
    virtual void subscribeAddress(const QString &authorization, const OAISubscribeAddressRequest &oai_subscribe_address_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_unsubscribe_address_request OAIUnsubscribeAddressRequest [required]
    */
    virtual void unsubscribeAddress(const QString &authorization, const OAIUnsubscribeAddressRequest &oai_unsubscribe_address_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listFailedIPNsCallback(OAIHttpRequestWorker *worker);
    void listSubscribedAddressesCallback(OAIHttpRequestWorker *worker);
    void resendFailedIPNCallback(OAIHttpRequestWorker *worker);
    void subscribeAddressCallback(OAIHttpRequestWorker *worker);
    void unsubscribeAddressCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listFailedIPNsSignal(OAIListFailedIPNs summary);
    void listSubscribedAddressesSignal(OAIListSubscribedAddresses summary);
    void resendFailedIPNSignal(OAIResendFailedIPN summary);
    void subscribeAddressSignal(OAISubscribeAddress summary);
    void unsubscribeAddressSignal(OAIUnsubscribeAddress summary);


    void listFailedIPNsSignalFull(OAIHttpRequestWorker *worker, OAIListFailedIPNs summary);
    void listSubscribedAddressesSignalFull(OAIHttpRequestWorker *worker, OAIListSubscribedAddresses summary);
    void resendFailedIPNSignalFull(OAIHttpRequestWorker *worker, OAIResendFailedIPN summary);
    void subscribeAddressSignalFull(OAIHttpRequestWorker *worker, OAISubscribeAddress summary);
    void unsubscribeAddressSignalFull(OAIHttpRequestWorker *worker, OAIUnsubscribeAddress summary);

    Q_DECL_DEPRECATED_X("Use listFailedIPNsSignalError() instead")
    void listFailedIPNsSignalE(OAIListFailedIPNs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFailedIPNsSignalError(OAIListFailedIPNs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSubscribedAddressesSignalError() instead")
    void listSubscribedAddressesSignalE(OAIListSubscribedAddresses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSubscribedAddressesSignalError(OAIListSubscribedAddresses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendFailedIPNSignalError() instead")
    void resendFailedIPNSignalE(OAIResendFailedIPN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resendFailedIPNSignalError(OAIResendFailedIPN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeAddressSignalError() instead")
    void subscribeAddressSignalE(OAISubscribeAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeAddressSignalError(OAISubscribeAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeAddressSignalError() instead")
    void unsubscribeAddressSignalE(OAIUnsubscribeAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeAddressSignalError(OAIUnsubscribeAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listFailedIPNsSignalErrorFull() instead")
    void listFailedIPNsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFailedIPNsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSubscribedAddressesSignalErrorFull() instead")
    void listSubscribedAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSubscribedAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendFailedIPNSignalErrorFull() instead")
    void resendFailedIPNSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resendFailedIPNSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeAddressSignalErrorFull() instead")
    void subscribeAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeAddressSignalErrorFull() instead")
    void unsubscribeAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
