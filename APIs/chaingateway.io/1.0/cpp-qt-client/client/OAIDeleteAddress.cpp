/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAddress::OAIDeleteAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAddress::OAIDeleteAddress() {
    this->initializeModel();
}

OAIDeleteAddress::~OAIDeleteAddress() {}

void OAIDeleteAddress::initializeModel() {

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_ethereumaddress_isSet = false;
    m_ethereumaddress_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;
}

void OAIDeleteAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAddress::fromJsonObject(QJsonObject json) {

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_ethereumaddress_isValid = ::OpenAPI::fromJsonValue(m_ethereumaddress, json[QString("ethereumaddress")]);
    m_ethereumaddress_isSet = !json[QString("ethereumaddress")].isNull() && m_ethereumaddress_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;
}

QString OAIDeleteAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_ethereumaddress_isSet) {
        obj.insert(QString("ethereumaddress"), ::OpenAPI::toJsonValue(m_ethereumaddress));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    return obj;
}

bool OAIDeleteAddress::isDeleted() const {
    return m_deleted;
}
void OAIDeleteAddress::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIDeleteAddress::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIDeleteAddress::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIDeleteAddress::getEthereumaddress() const {
    return m_ethereumaddress;
}
void OAIDeleteAddress::setEthereumaddress(const QString &ethereumaddress) {
    m_ethereumaddress = ethereumaddress;
    m_ethereumaddress_isSet = true;
}

bool OAIDeleteAddress::is_ethereumaddress_Set() const{
    return m_ethereumaddress_isSet;
}

bool OAIDeleteAddress::is_ethereumaddress_Valid() const{
    return m_ethereumaddress_isValid;
}

bool OAIDeleteAddress::isOk() const {
    return m_ok;
}
void OAIDeleteAddress::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIDeleteAddress::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIDeleteAddress::is_ok_Valid() const{
    return m_ok_isValid;
}

bool OAIDeleteAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethereumaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deleted_isValid && m_ethereumaddress_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
