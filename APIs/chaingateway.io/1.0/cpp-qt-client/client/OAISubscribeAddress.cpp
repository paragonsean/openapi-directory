/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscribeAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscribeAddress::OAISubscribeAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscribeAddress::OAISubscribeAddress() {
    this->initializeModel();
}

OAISubscribeAddress::~OAISubscribeAddress() {}

void OAISubscribeAddress::initializeModel() {

    m_contractaddress_isSet = false;
    m_contractaddress_isValid = false;

    m_ethereumaddress_isSet = false;
    m_ethereumaddress_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAISubscribeAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscribeAddress::fromJsonObject(QJsonObject json) {

    m_contractaddress_isValid = ::OpenAPI::fromJsonValue(m_contractaddress, json[QString("contractaddress")]);
    m_contractaddress_isSet = !json[QString("contractaddress")].isNull() && m_contractaddress_isValid;

    m_ethereumaddress_isValid = ::OpenAPI::fromJsonValue(m_ethereumaddress, json[QString("ethereumaddress")]);
    m_ethereumaddress_isSet = !json[QString("ethereumaddress")].isNull() && m_ethereumaddress_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAISubscribeAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscribeAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_contractaddress_isSet) {
        obj.insert(QString("contractaddress"), ::OpenAPI::toJsonValue(m_contractaddress));
    }
    if (m_ethereumaddress_isSet) {
        obj.insert(QString("ethereumaddress"), ::OpenAPI::toJsonValue(m_ethereumaddress));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAISubscribeAddress::getContractaddress() const {
    return m_contractaddress;
}
void OAISubscribeAddress::setContractaddress(const QString &contractaddress) {
    m_contractaddress = contractaddress;
    m_contractaddress_isSet = true;
}

bool OAISubscribeAddress::is_contractaddress_Set() const{
    return m_contractaddress_isSet;
}

bool OAISubscribeAddress::is_contractaddress_Valid() const{
    return m_contractaddress_isValid;
}

QString OAISubscribeAddress::getEthereumaddress() const {
    return m_ethereumaddress;
}
void OAISubscribeAddress::setEthereumaddress(const QString &ethereumaddress) {
    m_ethereumaddress = ethereumaddress;
    m_ethereumaddress_isSet = true;
}

bool OAISubscribeAddress::is_ethereumaddress_Set() const{
    return m_ethereumaddress_isSet;
}

bool OAISubscribeAddress::is_ethereumaddress_Valid() const{
    return m_ethereumaddress_isValid;
}

bool OAISubscribeAddress::isOk() const {
    return m_ok;
}
void OAISubscribeAddress::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAISubscribeAddress::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAISubscribeAddress::is_ok_Valid() const{
    return m_ok_isValid;
}

QString OAISubscribeAddress::getUrl() const {
    return m_url;
}
void OAISubscribeAddress::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISubscribeAddress::is_url_Set() const{
    return m_url_isSet;
}

bool OAISubscribeAddress::is_url_Valid() const{
    return m_url_isValid;
}

bool OAISubscribeAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contractaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethereumaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscribeAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contractaddress_isValid && m_ethereumaddress_isValid && m_ok_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
