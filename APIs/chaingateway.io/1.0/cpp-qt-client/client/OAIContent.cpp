/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent::OAIContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent::OAIContent() {
    this->initializeModel();
}

OAIContent::~OAIContent() {}

void OAIContent::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_crypto_isSet = false;
    m_crypto_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_crypto_isValid = ::OpenAPI::fromJsonValue(m_crypto, json[QString("crypto")]);
    m_crypto_isSet = !json[QString("crypto")].isNull() && m_crypto_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_crypto.isSet()) {
        obj.insert(QString("crypto"), ::OpenAPI::toJsonValue(m_crypto));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIContent::getAddress() const {
    return m_address;
}
void OAIContent::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIContent::is_address_Set() const{
    return m_address_isSet;
}

bool OAIContent::is_address_Valid() const{
    return m_address_isValid;
}

OAICrypto OAIContent::getCrypto() const {
    return m_crypto;
}
void OAIContent::setCrypto(const OAICrypto &crypto) {
    m_crypto = crypto;
    m_crypto_isSet = true;
}

bool OAIContent::is_crypto_Set() const{
    return m_crypto_isSet;
}

bool OAIContent::is_crypto_Valid() const{
    return m_crypto_isValid;
}

QString OAIContent::getId() const {
    return m_id;
}
void OAIContent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContent::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIContent::getVersion() const {
    return m_version;
}
void OAIContent::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIContent::is_version_Set() const{
    return m_version_isSet;
}

bool OAIContent::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_crypto_isValid && m_id_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
