/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendEthereum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendEthereum::OAISendEthereum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendEthereum::OAISendEthereum() {
    this->initializeModel();
}

OAISendEthereum::~OAISendEthereum() {}

void OAISendEthereum::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_txid_isSet = false;
    m_txid_isValid = false;
}

void OAISendEthereum::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendEthereum::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_txid_isValid = ::OpenAPI::fromJsonValue(m_txid, json[QString("txid")]);
    m_txid_isSet = !json[QString("txid")].isNull() && m_txid_isValid;
}

QString OAISendEthereum::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendEthereum::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_txid_isSet) {
        obj.insert(QString("txid"), ::OpenAPI::toJsonValue(m_txid));
    }
    return obj;
}

QString OAISendEthereum::getAmount() const {
    return m_amount;
}
void OAISendEthereum::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAISendEthereum::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAISendEthereum::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAISendEthereum::getFrom() const {
    return m_from;
}
void OAISendEthereum::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAISendEthereum::is_from_Set() const{
    return m_from_isSet;
}

bool OAISendEthereum::is_from_Valid() const{
    return m_from_isValid;
}

bool OAISendEthereum::isOk() const {
    return m_ok;
}
void OAISendEthereum::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAISendEthereum::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAISendEthereum::is_ok_Valid() const{
    return m_ok_isValid;
}

QString OAISendEthereum::getTo() const {
    return m_to;
}
void OAISendEthereum::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAISendEthereum::is_to_Set() const{
    return m_to_isSet;
}

bool OAISendEthereum::is_to_Valid() const{
    return m_to_isValid;
}

QString OAISendEthereum::getTxid() const {
    return m_txid;
}
void OAISendEthereum::setTxid(const QString &txid) {
    m_txid = txid;
    m_txid_isSet = true;
}

bool OAISendEthereum::is_txid_Set() const{
    return m_txid_isSet;
}

bool OAISendEthereum::is_txid_Valid() const{
    return m_txid_isValid;
}

bool OAISendEthereum::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendEthereum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_from_isValid && m_ok_isValid && m_to_isValid && m_txid_isValid && true;
}

} // namespace OpenAPI
