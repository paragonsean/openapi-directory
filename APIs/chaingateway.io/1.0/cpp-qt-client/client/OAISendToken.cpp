/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendToken::OAISendToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendToken::OAISendToken() {
    this->initializeModel();
}

OAISendToken::~OAISendToken() {}

void OAISendToken::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_contractaddress_isSet = false;
    m_contractaddress_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_txid_isSet = false;
    m_txid_isValid = false;
}

void OAISendToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendToken::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_contractaddress_isValid = ::OpenAPI::fromJsonValue(m_contractaddress, json[QString("contractaddress")]);
    m_contractaddress_isSet = !json[QString("contractaddress")].isNull() && m_contractaddress_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_txid_isValid = ::OpenAPI::fromJsonValue(m_txid, json[QString("txid")]);
    m_txid_isSet = !json[QString("txid")].isNull() && m_txid_isValid;
}

QString OAISendToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendToken::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_contractaddress_isSet) {
        obj.insert(QString("contractaddress"), ::OpenAPI::toJsonValue(m_contractaddress));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_txid_isSet) {
        obj.insert(QString("txid"), ::OpenAPI::toJsonValue(m_txid));
    }
    return obj;
}

qint32 OAISendToken::getAmount() const {
    return m_amount;
}
void OAISendToken::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAISendToken::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAISendToken::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAISendToken::getContractaddress() const {
    return m_contractaddress;
}
void OAISendToken::setContractaddress(const QString &contractaddress) {
    m_contractaddress = contractaddress;
    m_contractaddress_isSet = true;
}

bool OAISendToken::is_contractaddress_Set() const{
    return m_contractaddress_isSet;
}

bool OAISendToken::is_contractaddress_Valid() const{
    return m_contractaddress_isValid;
}

QString OAISendToken::getFrom() const {
    return m_from;
}
void OAISendToken::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAISendToken::is_from_Set() const{
    return m_from_isSet;
}

bool OAISendToken::is_from_Valid() const{
    return m_from_isValid;
}

QString OAISendToken::getIdentifier() const {
    return m_identifier;
}
void OAISendToken::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAISendToken::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAISendToken::is_identifier_Valid() const{
    return m_identifier_isValid;
}

bool OAISendToken::isOk() const {
    return m_ok;
}
void OAISendToken::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAISendToken::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAISendToken::is_ok_Valid() const{
    return m_ok_isValid;
}

QString OAISendToken::getTo() const {
    return m_to;
}
void OAISendToken::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAISendToken::is_to_Set() const{
    return m_to_isSet;
}

bool OAISendToken::is_to_Valid() const{
    return m_to_isValid;
}

QString OAISendToken::getTxid() const {
    return m_txid;
}
void OAISendToken::setTxid(const QString &txid) {
    m_txid = txid;
    m_txid_isSet = true;
}

bool OAISendToken::is_txid_Set() const{
    return m_txid_isSet;
}

bool OAISendToken::is_txid_Valid() const{
    return m_txid_isValid;
}

bool OAISendToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contractaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_contractaddress_isValid && m_from_isValid && m_identifier_isValid && m_ok_isValid && m_to_isValid && m_txid_isValid && true;
}

} // namespace OpenAPI
