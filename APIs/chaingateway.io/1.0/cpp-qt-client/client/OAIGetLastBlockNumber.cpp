/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetLastBlockNumber.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetLastBlockNumber::OAIGetLastBlockNumber(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetLastBlockNumber::OAIGetLastBlockNumber() {
    this->initializeModel();
}

OAIGetLastBlockNumber::~OAIGetLastBlockNumber() {}

void OAIGetLastBlockNumber::initializeModel() {

    m_blocknumber_isSet = false;
    m_blocknumber_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;
}

void OAIGetLastBlockNumber::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetLastBlockNumber::fromJsonObject(QJsonObject json) {

    m_blocknumber_isValid = ::OpenAPI::fromJsonValue(m_blocknumber, json[QString("blocknumber")]);
    m_blocknumber_isSet = !json[QString("blocknumber")].isNull() && m_blocknumber_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;
}

QString OAIGetLastBlockNumber::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetLastBlockNumber::asJsonObject() const {
    QJsonObject obj;
    if (m_blocknumber_isSet) {
        obj.insert(QString("blocknumber"), ::OpenAPI::toJsonValue(m_blocknumber));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    return obj;
}

qint32 OAIGetLastBlockNumber::getBlocknumber() const {
    return m_blocknumber;
}
void OAIGetLastBlockNumber::setBlocknumber(const qint32 &blocknumber) {
    m_blocknumber = blocknumber;
    m_blocknumber_isSet = true;
}

bool OAIGetLastBlockNumber::is_blocknumber_Set() const{
    return m_blocknumber_isSet;
}

bool OAIGetLastBlockNumber::is_blocknumber_Valid() const{
    return m_blocknumber_isValid;
}

bool OAIGetLastBlockNumber::isOk() const {
    return m_ok;
}
void OAIGetLastBlockNumber::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIGetLastBlockNumber::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIGetLastBlockNumber::is_ok_Valid() const{
    return m_ok_isValid;
}

bool OAIGetLastBlockNumber::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocknumber_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetLastBlockNumber::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_blocknumber_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
