/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetExchangeRate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetExchangeRate::OAIGetExchangeRate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetExchangeRate::OAIGetExchangeRate() {
    this->initializeModel();
}

OAIGetExchangeRate::~OAIGetExchangeRate() {}

void OAIGetExchangeRate::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;
}

void OAIGetExchangeRate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetExchangeRate::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;
}

QString OAIGetExchangeRate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetExchangeRate::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    return obj;
}

QString OAIGetExchangeRate::getCurrency() const {
    return m_currency;
}
void OAIGetExchangeRate::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIGetExchangeRate::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIGetExchangeRate::is_currency_Valid() const{
    return m_currency_isValid;
}

bool OAIGetExchangeRate::isOk() const {
    return m_ok;
}
void OAIGetExchangeRate::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIGetExchangeRate::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIGetExchangeRate::is_ok_Valid() const{
    return m_ok_isValid;
}

double OAIGetExchangeRate::getRate() const {
    return m_rate;
}
void OAIGetExchangeRate::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIGetExchangeRate::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIGetExchangeRate::is_rate_Valid() const{
    return m_rate_isValid;
}

bool OAIGetExchangeRate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetExchangeRate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_ok_isValid && m_rate_isValid && true;
}

} // namespace OpenAPI
