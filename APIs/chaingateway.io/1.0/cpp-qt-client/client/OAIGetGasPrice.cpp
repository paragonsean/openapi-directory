/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetGasPrice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetGasPrice::OAIGetGasPrice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetGasPrice::OAIGetGasPrice() {
    this->initializeModel();
}

OAIGetGasPrice::~OAIGetGasPrice() {}

void OAIGetGasPrice::initializeModel() {

    m_gasprice_isSet = false;
    m_gasprice_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;
}

void OAIGetGasPrice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetGasPrice::fromJsonObject(QJsonObject json) {

    m_gasprice_isValid = ::OpenAPI::fromJsonValue(m_gasprice, json[QString("gasprice")]);
    m_gasprice_isSet = !json[QString("gasprice")].isNull() && m_gasprice_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;
}

QString OAIGetGasPrice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetGasPrice::asJsonObject() const {
    QJsonObject obj;
    if (m_gasprice_isSet) {
        obj.insert(QString("gasprice"), ::OpenAPI::toJsonValue(m_gasprice));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    return obj;
}

qint32 OAIGetGasPrice::getGasprice() const {
    return m_gasprice;
}
void OAIGetGasPrice::setGasprice(const qint32 &gasprice) {
    m_gasprice = gasprice;
    m_gasprice_isSet = true;
}

bool OAIGetGasPrice::is_gasprice_Set() const{
    return m_gasprice_isSet;
}

bool OAIGetGasPrice::is_gasprice_Valid() const{
    return m_gasprice_isValid;
}

bool OAIGetGasPrice::isOk() const {
    return m_ok;
}
void OAIGetGasPrice::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIGetGasPrice::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIGetGasPrice::is_ok_Valid() const{
    return m_ok_isValid;
}

bool OAIGetGasPrice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gasprice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetGasPrice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gasprice_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
