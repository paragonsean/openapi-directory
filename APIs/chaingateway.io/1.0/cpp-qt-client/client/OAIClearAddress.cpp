/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClearAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClearAddress::OAIClearAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClearAddress::OAIClearAddress() {
    this->initializeModel();
}

OAIClearAddress::~OAIClearAddress() {}

void OAIClearAddress::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_ethereumaddress_isSet = false;
    m_ethereumaddress_isValid = false;

    m_gas_isSet = false;
    m_gas_isValid = false;

    m_newaddress_isSet = false;
    m_newaddress_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_txid_isSet = false;
    m_txid_isValid = false;
}

void OAIClearAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClearAddress::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_ethereumaddress_isValid = ::OpenAPI::fromJsonValue(m_ethereumaddress, json[QString("ethereumaddress")]);
    m_ethereumaddress_isSet = !json[QString("ethereumaddress")].isNull() && m_ethereumaddress_isValid;

    m_gas_isValid = ::OpenAPI::fromJsonValue(m_gas, json[QString("gas")]);
    m_gas_isSet = !json[QString("gas")].isNull() && m_gas_isValid;

    m_newaddress_isValid = ::OpenAPI::fromJsonValue(m_newaddress, json[QString("newaddress")]);
    m_newaddress_isSet = !json[QString("newaddress")].isNull() && m_newaddress_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_txid_isValid = ::OpenAPI::fromJsonValue(m_txid, json[QString("txid")]);
    m_txid_isSet = !json[QString("txid")].isNull() && m_txid_isValid;
}

QString OAIClearAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClearAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_ethereumaddress_isSet) {
        obj.insert(QString("ethereumaddress"), ::OpenAPI::toJsonValue(m_ethereumaddress));
    }
    if (m_gas_isSet) {
        obj.insert(QString("gas"), ::OpenAPI::toJsonValue(m_gas));
    }
    if (m_newaddress_isSet) {
        obj.insert(QString("newaddress"), ::OpenAPI::toJsonValue(m_newaddress));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_txid_isSet) {
        obj.insert(QString("txid"), ::OpenAPI::toJsonValue(m_txid));
    }
    return obj;
}

double OAIClearAddress::getAmount() const {
    return m_amount;
}
void OAIClearAddress::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIClearAddress::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIClearAddress::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIClearAddress::getEthereumaddress() const {
    return m_ethereumaddress;
}
void OAIClearAddress::setEthereumaddress(const QString &ethereumaddress) {
    m_ethereumaddress = ethereumaddress;
    m_ethereumaddress_isSet = true;
}

bool OAIClearAddress::is_ethereumaddress_Set() const{
    return m_ethereumaddress_isSet;
}

bool OAIClearAddress::is_ethereumaddress_Valid() const{
    return m_ethereumaddress_isValid;
}

double OAIClearAddress::getGas() const {
    return m_gas;
}
void OAIClearAddress::setGas(const double &gas) {
    m_gas = gas;
    m_gas_isSet = true;
}

bool OAIClearAddress::is_gas_Set() const{
    return m_gas_isSet;
}

bool OAIClearAddress::is_gas_Valid() const{
    return m_gas_isValid;
}

QString OAIClearAddress::getNewaddress() const {
    return m_newaddress;
}
void OAIClearAddress::setNewaddress(const QString &newaddress) {
    m_newaddress = newaddress;
    m_newaddress_isSet = true;
}

bool OAIClearAddress::is_newaddress_Set() const{
    return m_newaddress_isSet;
}

bool OAIClearAddress::is_newaddress_Valid() const{
    return m_newaddress_isValid;
}

bool OAIClearAddress::isOk() const {
    return m_ok;
}
void OAIClearAddress::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIClearAddress::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIClearAddress::is_ok_Valid() const{
    return m_ok_isValid;
}

QString OAIClearAddress::getTotal() const {
    return m_total;
}
void OAIClearAddress::setTotal(const QString &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIClearAddress::is_total_Set() const{
    return m_total_isSet;
}

bool OAIClearAddress::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIClearAddress::getTxid() const {
    return m_txid;
}
void OAIClearAddress::setTxid(const QString &txid) {
    m_txid = txid;
    m_txid_isSet = true;
}

bool OAIClearAddress::is_txid_Set() const{
    return m_txid_isSet;
}

bool OAIClearAddress::is_txid_Valid() const{
    return m_txid_isValid;
}

bool OAIClearAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethereumaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_newaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClearAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_ethereumaddress_isValid && m_gas_isValid && m_newaddress_isValid && m_ok_isValid && m_total_isValid && m_txid_isValid && true;
}

} // namespace OpenAPI
