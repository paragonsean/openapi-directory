/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionRequestsApi_H
#define OAI_OAITransactionRequestsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClearAddress.h"
#include "OAIClearAddressRequest.h"
#include "OAISendEthereum.h"
#include "OAISendEthereumRequest.h"
#include "OAISendToken.h"
#include "OAISendTokenRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionRequestsApi : public QObject {
    Q_OBJECT

public:
    OAITransactionRequestsApi(const int timeOut = 0);
    ~OAITransactionRequestsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_clear_address_request OAIClearAddressRequest [required]
    */
    virtual void clearAddress(const QString &authorization, const OAIClearAddressRequest &oai_clear_address_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_send_ethereum_request OAISendEthereumRequest [required]
    */
    virtual void sendEthereum(const QString &authorization, const OAISendEthereumRequest &oai_send_ethereum_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_send_token_request OAISendTokenRequest [required]
    */
    virtual void sendToken(const QString &authorization, const OAISendTokenRequest &oai_send_token_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void clearAddressCallback(OAIHttpRequestWorker *worker);
    void sendEthereumCallback(OAIHttpRequestWorker *worker);
    void sendTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void clearAddressSignal(OAIClearAddress summary);
    void sendEthereumSignal(OAISendEthereum summary);
    void sendTokenSignal(OAISendToken summary);


    void clearAddressSignalFull(OAIHttpRequestWorker *worker, OAIClearAddress summary);
    void sendEthereumSignalFull(OAIHttpRequestWorker *worker, OAISendEthereum summary);
    void sendTokenSignalFull(OAIHttpRequestWorker *worker, OAISendToken summary);

    Q_DECL_DEPRECATED_X("Use clearAddressSignalError() instead")
    void clearAddressSignalE(OAIClearAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clearAddressSignalError(OAIClearAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendEthereumSignalError() instead")
    void sendEthereumSignalE(OAISendEthereum summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendEthereumSignalError(OAISendEthereum summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendTokenSignalError() instead")
    void sendTokenSignalE(OAISendToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendTokenSignalError(OAISendToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use clearAddressSignalErrorFull() instead")
    void clearAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clearAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendEthereumSignalErrorFull() instead")
    void sendEthereumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendEthereumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendTokenSignalErrorFull() instead")
    void sendTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
