/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBlock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBlock::OAIGetBlock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBlock::OAIGetBlock() {
    this->initializeModel();
}

OAIGetBlock::~OAIGetBlock() {}

void OAIGetBlock::initializeModel() {

    m_block_number_isSet = false;
    m_block_number_isValid = false;

    m_difficulty_isSet = false;
    m_difficulty_isValid = false;

    m_gas_limit_isSet = false;
    m_gas_limit_isValid = false;

    m_gas_used_isSet = false;
    m_gas_used_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_miner_isSet = false;
    m_miner_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_parent_hash_isSet = false;
    m_parent_hash_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_transactions_count_isSet = false;
    m_transactions_count_isValid = false;
}

void OAIGetBlock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBlock::fromJsonObject(QJsonObject json) {

    m_block_number_isValid = ::OpenAPI::fromJsonValue(m_block_number, json[QString("block_number")]);
    m_block_number_isSet = !json[QString("block_number")].isNull() && m_block_number_isValid;

    m_difficulty_isValid = ::OpenAPI::fromJsonValue(m_difficulty, json[QString("difficulty")]);
    m_difficulty_isSet = !json[QString("difficulty")].isNull() && m_difficulty_isValid;

    m_gas_limit_isValid = ::OpenAPI::fromJsonValue(m_gas_limit, json[QString("gas_limit")]);
    m_gas_limit_isSet = !json[QString("gas_limit")].isNull() && m_gas_limit_isValid;

    m_gas_used_isValid = ::OpenAPI::fromJsonValue(m_gas_used, json[QString("gas_used")]);
    m_gas_used_isSet = !json[QString("gas_used")].isNull() && m_gas_used_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_miner_isValid = ::OpenAPI::fromJsonValue(m_miner, json[QString("miner")]);
    m_miner_isSet = !json[QString("miner")].isNull() && m_miner_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_parent_hash_isValid = ::OpenAPI::fromJsonValue(m_parent_hash, json[QString("parent_hash")]);
    m_parent_hash_isSet = !json[QString("parent_hash")].isNull() && m_parent_hash_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("size_in_bytes")]);
    m_size_in_bytes_isSet = !json[QString("size_in_bytes")].isNull() && m_size_in_bytes_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("time_stamp")]);
    m_time_stamp_isSet = !json[QString("time_stamp")].isNull() && m_time_stamp_isValid;

    m_transactions_count_isValid = ::OpenAPI::fromJsonValue(m_transactions_count, json[QString("transactions_count")]);
    m_transactions_count_isSet = !json[QString("transactions_count")].isNull() && m_transactions_count_isValid;
}

QString OAIGetBlock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBlock::asJsonObject() const {
    QJsonObject obj;
    if (m_block_number_isSet) {
        obj.insert(QString("block_number"), ::OpenAPI::toJsonValue(m_block_number));
    }
    if (m_difficulty_isSet) {
        obj.insert(QString("difficulty"), ::OpenAPI::toJsonValue(m_difficulty));
    }
    if (m_gas_limit_isSet) {
        obj.insert(QString("gas_limit"), ::OpenAPI::toJsonValue(m_gas_limit));
    }
    if (m_gas_used_isSet) {
        obj.insert(QString("gas_used"), ::OpenAPI::toJsonValue(m_gas_used));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_miner_isSet) {
        obj.insert(QString("miner"), ::OpenAPI::toJsonValue(m_miner));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_parent_hash_isSet) {
        obj.insert(QString("parent_hash"), ::OpenAPI::toJsonValue(m_parent_hash));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("size_in_bytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("time_stamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_transactions_count_isSet) {
        obj.insert(QString("transactions_count"), ::OpenAPI::toJsonValue(m_transactions_count));
    }
    return obj;
}

QString OAIGetBlock::getBlockNumber() const {
    return m_block_number;
}
void OAIGetBlock::setBlockNumber(const QString &block_number) {
    m_block_number = block_number;
    m_block_number_isSet = true;
}

bool OAIGetBlock::is_block_number_Set() const{
    return m_block_number_isSet;
}

bool OAIGetBlock::is_block_number_Valid() const{
    return m_block_number_isValid;
}

QString OAIGetBlock::getDifficulty() const {
    return m_difficulty;
}
void OAIGetBlock::setDifficulty(const QString &difficulty) {
    m_difficulty = difficulty;
    m_difficulty_isSet = true;
}

bool OAIGetBlock::is_difficulty_Set() const{
    return m_difficulty_isSet;
}

bool OAIGetBlock::is_difficulty_Valid() const{
    return m_difficulty_isValid;
}

QString OAIGetBlock::getGasLimit() const {
    return m_gas_limit;
}
void OAIGetBlock::setGasLimit(const QString &gas_limit) {
    m_gas_limit = gas_limit;
    m_gas_limit_isSet = true;
}

bool OAIGetBlock::is_gas_limit_Set() const{
    return m_gas_limit_isSet;
}

bool OAIGetBlock::is_gas_limit_Valid() const{
    return m_gas_limit_isValid;
}

QString OAIGetBlock::getGasUsed() const {
    return m_gas_used;
}
void OAIGetBlock::setGasUsed(const QString &gas_used) {
    m_gas_used = gas_used;
    m_gas_used_isSet = true;
}

bool OAIGetBlock::is_gas_used_Set() const{
    return m_gas_used_isSet;
}

bool OAIGetBlock::is_gas_used_Valid() const{
    return m_gas_used_isValid;
}

QString OAIGetBlock::getHash() const {
    return m_hash;
}
void OAIGetBlock::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIGetBlock::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIGetBlock::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAIGetBlock::getMiner() const {
    return m_miner;
}
void OAIGetBlock::setMiner(const QString &miner) {
    m_miner = miner;
    m_miner_isSet = true;
}

bool OAIGetBlock::is_miner_Set() const{
    return m_miner_isSet;
}

bool OAIGetBlock::is_miner_Valid() const{
    return m_miner_isValid;
}

bool OAIGetBlock::isOk() const {
    return m_ok;
}
void OAIGetBlock::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIGetBlock::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIGetBlock::is_ok_Valid() const{
    return m_ok_isValid;
}

QString OAIGetBlock::getParentHash() const {
    return m_parent_hash;
}
void OAIGetBlock::setParentHash(const QString &parent_hash) {
    m_parent_hash = parent_hash;
    m_parent_hash_isSet = true;
}

bool OAIGetBlock::is_parent_hash_Set() const{
    return m_parent_hash_isSet;
}

bool OAIGetBlock::is_parent_hash_Valid() const{
    return m_parent_hash_isValid;
}

QString OAIGetBlock::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIGetBlock::setSizeInBytes(const QString &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIGetBlock::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIGetBlock::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

QString OAIGetBlock::getTimeStamp() const {
    return m_time_stamp;
}
void OAIGetBlock::setTimeStamp(const QString &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIGetBlock::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIGetBlock::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QString OAIGetBlock::getTransactionsCount() const {
    return m_transactions_count;
}
void OAIGetBlock::setTransactionsCount(const QString &transactions_count) {
    m_transactions_count = transactions_count;
    m_transactions_count_isSet = true;
}

bool OAIGetBlock::is_transactions_count_Set() const{
    return m_transactions_count_isSet;
}

bool OAIGetBlock::is_transactions_count_Valid() const{
    return m_transactions_count_isValid;
}

bool OAIGetBlock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_difficulty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gas_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gas_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_miner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBlock::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_block_number_isValid && m_difficulty_isValid && m_gas_limit_isValid && m_gas_used_isValid && m_hash_isValid && m_miner_isValid && m_ok_isValid && m_parent_hash_isValid && m_size_in_bytes_isValid && m_time_stamp_isValid && m_transactions_count_isValid && true;
}

} // namespace OpenAPI
