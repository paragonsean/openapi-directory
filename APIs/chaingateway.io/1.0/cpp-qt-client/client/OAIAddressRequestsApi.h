/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAddressRequestsApi_H
#define OAI_OAIAddressRequestsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeleteAddress.h"
#include "OAIDeleteAddressRequest.h"
#include "OAIExportAddress.h"
#include "OAIExportAddressRequest.h"
#include "OAIImportAddress.h"
#include "OAIImportAddressRequest.h"
#include "OAIListAddresses.h"
#include "OAINewAddress.h"
#include "OAINewAddressRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAddressRequestsApi : public QObject {
    Q_OBJECT

public:
    OAIAddressRequestsApi(const int timeOut = 0);
    ~OAIAddressRequestsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_delete_address_request OAIDeleteAddressRequest [required]
    */
    virtual void deleteAddress(const QString &authorization, const OAIDeleteAddressRequest &oai_delete_address_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_export_address_request OAIExportAddressRequest [required]
    */
    virtual void exportAddress(const QString &authorization, const OAIExportAddressRequest &oai_export_address_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_import_address_request OAIImportAddressRequest [required]
    */
    virtual void importAddress(const QString &authorization, const OAIImportAddressRequest &oai_import_address_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  authorization QString [required]
    */
    virtual void listAddresses(const QString &content_type, const QString &authorization);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_new_address_request OAINewAddressRequest [required]
    */
    virtual void newAddress(const QString &authorization, const OAINewAddressRequest &oai_new_address_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAddressCallback(OAIHttpRequestWorker *worker);
    void exportAddressCallback(OAIHttpRequestWorker *worker);
    void importAddressCallback(OAIHttpRequestWorker *worker);
    void listAddressesCallback(OAIHttpRequestWorker *worker);
    void newAddressCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAddressSignal(OAIDeleteAddress summary);
    void exportAddressSignal(OAIExportAddress summary);
    void importAddressSignal(OAIImportAddress summary);
    void listAddressesSignal(OAIListAddresses summary);
    void newAddressSignal(OAINewAddress summary);


    void deleteAddressSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAddress summary);
    void exportAddressSignalFull(OAIHttpRequestWorker *worker, OAIExportAddress summary);
    void importAddressSignalFull(OAIHttpRequestWorker *worker, OAIImportAddress summary);
    void listAddressesSignalFull(OAIHttpRequestWorker *worker, OAIListAddresses summary);
    void newAddressSignalFull(OAIHttpRequestWorker *worker, OAINewAddress summary);

    Q_DECL_DEPRECATED_X("Use deleteAddressSignalError() instead")
    void deleteAddressSignalE(OAIDeleteAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAddressSignalError(OAIDeleteAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportAddressSignalError() instead")
    void exportAddressSignalE(OAIExportAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportAddressSignalError(OAIExportAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importAddressSignalError() instead")
    void importAddressSignalE(OAIImportAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importAddressSignalError(OAIImportAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAddressesSignalError() instead")
    void listAddressesSignalE(OAIListAddresses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAddressesSignalError(OAIListAddresses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newAddressSignalError() instead")
    void newAddressSignalE(OAINewAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newAddressSignalError(OAINewAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAddressSignalErrorFull() instead")
    void deleteAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportAddressSignalErrorFull() instead")
    void exportAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importAddressSignalErrorFull() instead")
    void importAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAddressesSignalErrorFull() instead")
    void listAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newAddressSignalErrorFull() instead")
    void newAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
