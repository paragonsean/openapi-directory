/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAddresses.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAddresses::OAIListAddresses(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAddresses::OAIListAddresses() {
    this->initializeModel();
}

OAIListAddresses::~OAIListAddresses() {}

void OAIListAddresses::initializeModel() {

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;
}

void OAIListAddresses::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAddresses::fromJsonObject(QJsonObject json) {

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("addresses")]);
    m_addresses_isSet = !json[QString("addresses")].isNull() && m_addresses_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;
}

QString OAIListAddresses::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAddresses::asJsonObject() const {
    QJsonObject obj;
    if (m_addresses.size() > 0) {
        obj.insert(QString("addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    return obj;
}

QList<OAIAddress> OAIListAddresses::getAddresses() const {
    return m_addresses;
}
void OAIListAddresses::setAddresses(const QList<OAIAddress> &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAIListAddresses::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAIListAddresses::is_addresses_Valid() const{
    return m_addresses_isValid;
}

bool OAIListAddresses::isOk() const {
    return m_ok;
}
void OAIListAddresses::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIListAddresses::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIListAddresses::is_ok_Valid() const{
    return m_ok_isValid;
}

bool OAIListAddresses::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAddresses::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_addresses_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
