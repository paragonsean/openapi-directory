/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICrypto.h
 *
 * 
 */

#ifndef OAICrypto_H
#define OAICrypto_H

#include <QJsonObject>

#include "OAICipherparams.h"
#include "OAIKdfparams.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICipherparams;
class OAIKdfparams;

class OAICrypto : public OAIObject {
public:
    OAICrypto();
    OAICrypto(QString json);
    ~OAICrypto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCipher() const;
    void setCipher(const QString &cipher);
    bool is_cipher_Set() const;
    bool is_cipher_Valid() const;

    OAICipherparams getCipherparams() const;
    void setCipherparams(const OAICipherparams &cipherparams);
    bool is_cipherparams_Set() const;
    bool is_cipherparams_Valid() const;

    QString getCiphertext() const;
    void setCiphertext(const QString &ciphertext);
    bool is_ciphertext_Set() const;
    bool is_ciphertext_Valid() const;

    QString getKdf() const;
    void setKdf(const QString &kdf);
    bool is_kdf_Set() const;
    bool is_kdf_Valid() const;

    OAIKdfparams getKdfparams() const;
    void setKdfparams(const OAIKdfparams &kdfparams);
    bool is_kdfparams_Set() const;
    bool is_kdfparams_Valid() const;

    QString getMac() const;
    void setMac(const QString &mac);
    bool is_mac_Set() const;
    bool is_mac_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cipher;
    bool m_cipher_isSet;
    bool m_cipher_isValid;

    OAICipherparams m_cipherparams;
    bool m_cipherparams_isSet;
    bool m_cipherparams_isValid;

    QString m_ciphertext;
    bool m_ciphertext_isSet;
    bool m_ciphertext_isValid;

    QString m_kdf;
    bool m_kdf_isSet;
    bool m_kdf_isValid;

    OAIKdfparams m_kdfparams;
    bool m_kdfparams_isSet;
    bool m_kdfparams_isValid;

    QString m_mac;
    bool m_mac_isSet;
    bool m_mac_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICrypto)

#endif // OAICrypto_H
