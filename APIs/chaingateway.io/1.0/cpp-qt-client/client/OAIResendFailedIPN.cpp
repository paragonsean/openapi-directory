/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResendFailedIPN.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResendFailedIPN::OAIResendFailedIPN(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResendFailedIPN::OAIResendFailedIPN() {
    this->initializeModel();
}

OAIResendFailedIPN::~OAIResendFailedIPN() {}

void OAIResendFailedIPN::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;
}

void OAIResendFailedIPN::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResendFailedIPN::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;
}

QString OAIResendFailedIPN::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResendFailedIPN::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    return obj;
}

qint32 OAIResendFailedIPN::getId() const {
    return m_id;
}
void OAIResendFailedIPN::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResendFailedIPN::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResendFailedIPN::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIResendFailedIPN::isOk() const {
    return m_ok;
}
void OAIResendFailedIPN::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIResendFailedIPN::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIResendFailedIPN::is_ok_Valid() const{
    return m_ok_isValid;
}

bool OAIResendFailedIPN::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResendFailedIPN::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
