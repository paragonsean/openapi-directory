/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_block_number_isSet = false;
    m_block_number_isValid = false;

    m_contract_address_isSet = false;
    m_contract_address_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_gas_isSet = false;
    m_gas_isValid = false;

    m_gas_price_isSet = false;
    m_gas_price_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_token_decimals_isSet = false;
    m_token_decimals_isValid = false;

    m_token_name_isSet = false;
    m_token_name_isValid = false;

    m_token_supply_isSet = false;
    m_token_supply_isValid = false;

    m_token_symbol_isSet = false;
    m_token_symbol_isValid = false;

    m_txid_isSet = false;
    m_txid_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_block_number_isValid = ::OpenAPI::fromJsonValue(m_block_number, json[QString("block_number")]);
    m_block_number_isSet = !json[QString("block_number")].isNull() && m_block_number_isValid;

    m_contract_address_isValid = ::OpenAPI::fromJsonValue(m_contract_address, json[QString("contract_address")]);
    m_contract_address_isSet = !json[QString("contract_address")].isNull() && m_contract_address_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_gas_isValid = ::OpenAPI::fromJsonValue(m_gas, json[QString("gas")]);
    m_gas_isSet = !json[QString("gas")].isNull() && m_gas_isValid;

    m_gas_price_isValid = ::OpenAPI::fromJsonValue(m_gas_price, json[QString("gas_price")]);
    m_gas_price_isSet = !json[QString("gas_price")].isNull() && m_gas_price_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_token_decimals_isValid = ::OpenAPI::fromJsonValue(m_token_decimals, json[QString("token_decimals")]);
    m_token_decimals_isSet = !json[QString("token_decimals")].isNull() && m_token_decimals_isValid;

    m_token_name_isValid = ::OpenAPI::fromJsonValue(m_token_name, json[QString("token_name")]);
    m_token_name_isSet = !json[QString("token_name")].isNull() && m_token_name_isValid;

    m_token_supply_isValid = ::OpenAPI::fromJsonValue(m_token_supply, json[QString("token_supply")]);
    m_token_supply_isSet = !json[QString("token_supply")].isNull() && m_token_supply_isValid;

    m_token_symbol_isValid = ::OpenAPI::fromJsonValue(m_token_symbol, json[QString("token_symbol")]);
    m_token_symbol_isSet = !json[QString("token_symbol")].isNull() && m_token_symbol_isValid;

    m_txid_isValid = ::OpenAPI::fromJsonValue(m_txid, json[QString("txid")]);
    m_txid_isSet = !json[QString("txid")].isNull() && m_txid_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_block_number_isSet) {
        obj.insert(QString("block_number"), ::OpenAPI::toJsonValue(m_block_number));
    }
    if (m_contract_address_isSet) {
        obj.insert(QString("contract_address"), ::OpenAPI::toJsonValue(m_contract_address));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_gas_isSet) {
        obj.insert(QString("gas"), ::OpenAPI::toJsonValue(m_gas));
    }
    if (m_gas_price_isSet) {
        obj.insert(QString("gas_price"), ::OpenAPI::toJsonValue(m_gas_price));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_token_decimals_isSet) {
        obj.insert(QString("token_decimals"), ::OpenAPI::toJsonValue(m_token_decimals));
    }
    if (m_token_name_isSet) {
        obj.insert(QString("token_name"), ::OpenAPI::toJsonValue(m_token_name));
    }
    if (m_token_supply_isSet) {
        obj.insert(QString("token_supply"), ::OpenAPI::toJsonValue(m_token_supply));
    }
    if (m_token_symbol_isSet) {
        obj.insert(QString("token_symbol"), ::OpenAPI::toJsonValue(m_token_symbol));
    }
    if (m_txid_isSet) {
        obj.insert(QString("txid"), ::OpenAPI::toJsonValue(m_txid));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITransaction::getAmount() const {
    return m_amount;
}
void OAITransaction::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITransaction::getBlockNumber() const {
    return m_block_number;
}
void OAITransaction::setBlockNumber(const QString &block_number) {
    m_block_number = block_number;
    m_block_number_isSet = true;
}

bool OAITransaction::is_block_number_Set() const{
    return m_block_number_isSet;
}

bool OAITransaction::is_block_number_Valid() const{
    return m_block_number_isValid;
}

QString OAITransaction::getContractAddress() const {
    return m_contract_address;
}
void OAITransaction::setContractAddress(const QString &contract_address) {
    m_contract_address = contract_address;
    m_contract_address_isSet = true;
}

bool OAITransaction::is_contract_address_Set() const{
    return m_contract_address_isSet;
}

bool OAITransaction::is_contract_address_Valid() const{
    return m_contract_address_isValid;
}

QString OAITransaction::getFrom() const {
    return m_from;
}
void OAITransaction::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAITransaction::is_from_Set() const{
    return m_from_isSet;
}

bool OAITransaction::is_from_Valid() const{
    return m_from_isValid;
}

QString OAITransaction::getGas() const {
    return m_gas;
}
void OAITransaction::setGas(const QString &gas) {
    m_gas = gas;
    m_gas_isSet = true;
}

bool OAITransaction::is_gas_Set() const{
    return m_gas_isSet;
}

bool OAITransaction::is_gas_Valid() const{
    return m_gas_isValid;
}

QString OAITransaction::getGasPrice() const {
    return m_gas_price;
}
void OAITransaction::setGasPrice(const QString &gas_price) {
    m_gas_price = gas_price;
    m_gas_price_isSet = true;
}

bool OAITransaction::is_gas_price_Set() const{
    return m_gas_price_isSet;
}

bool OAITransaction::is_gas_price_Valid() const{
    return m_gas_price_isValid;
}

QString OAITransaction::getTo() const {
    return m_to;
}
void OAITransaction::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAITransaction::is_to_Set() const{
    return m_to_isSet;
}

bool OAITransaction::is_to_Valid() const{
    return m_to_isValid;
}

QString OAITransaction::getTokenDecimals() const {
    return m_token_decimals;
}
void OAITransaction::setTokenDecimals(const QString &token_decimals) {
    m_token_decimals = token_decimals;
    m_token_decimals_isSet = true;
}

bool OAITransaction::is_token_decimals_Set() const{
    return m_token_decimals_isSet;
}

bool OAITransaction::is_token_decimals_Valid() const{
    return m_token_decimals_isValid;
}

QString OAITransaction::getTokenName() const {
    return m_token_name;
}
void OAITransaction::setTokenName(const QString &token_name) {
    m_token_name = token_name;
    m_token_name_isSet = true;
}

bool OAITransaction::is_token_name_Set() const{
    return m_token_name_isSet;
}

bool OAITransaction::is_token_name_Valid() const{
    return m_token_name_isValid;
}

QString OAITransaction::getTokenSupply() const {
    return m_token_supply;
}
void OAITransaction::setTokenSupply(const QString &token_supply) {
    m_token_supply = token_supply;
    m_token_supply_isSet = true;
}

bool OAITransaction::is_token_supply_Set() const{
    return m_token_supply_isSet;
}

bool OAITransaction::is_token_supply_Valid() const{
    return m_token_supply_isValid;
}

QString OAITransaction::getTokenSymbol() const {
    return m_token_symbol;
}
void OAITransaction::setTokenSymbol(const QString &token_symbol) {
    m_token_symbol = token_symbol;
    m_token_symbol_isSet = true;
}

bool OAITransaction::is_token_symbol_Set() const{
    return m_token_symbol_isSet;
}

bool OAITransaction::is_token_symbol_Valid() const{
    return m_token_symbol_isValid;
}

QString OAITransaction::getTxid() const {
    return m_txid;
}
void OAITransaction::setTxid(const QString &txid) {
    m_txid = txid;
    m_txid_isSet = true;
}

bool OAITransaction::is_txid_Set() const{
    return m_txid_isSet;
}

bool OAITransaction::is_txid_Valid() const{
    return m_txid_isValid;
}

QString OAITransaction::getType() const {
    return m_type;
}
void OAITransaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransaction::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gas_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_decimals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_supply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_block_number_isValid && m_contract_address_isValid && m_from_isValid && m_gas_isValid && m_gas_price_isValid && m_to_isValid && m_token_decimals_isValid && m_token_name_isValid && m_token_supply_isValid && m_token_symbol_isValid && m_txid_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
