/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportAddressRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportAddressRequest::OAIExportAddressRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportAddressRequest::OAIExportAddressRequest() {
    this->initializeModel();
}

OAIExportAddressRequest::~OAIExportAddressRequest() {}

void OAIExportAddressRequest::initializeModel() {

    m_ethaddress_isSet = false;
    m_ethaddress_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;
}

void OAIExportAddressRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportAddressRequest::fromJsonObject(QJsonObject json) {

    m_ethaddress_isValid = ::OpenAPI::fromJsonValue(m_ethaddress, json[QString("ethaddress")]);
    m_ethaddress_isSet = !json[QString("ethaddress")].isNull() && m_ethaddress_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;
}

QString OAIExportAddressRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportAddressRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ethaddress_isSet) {
        obj.insert(QString("ethaddress"), ::OpenAPI::toJsonValue(m_ethaddress));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    return obj;
}

QString OAIExportAddressRequest::getEthaddress() const {
    return m_ethaddress;
}
void OAIExportAddressRequest::setEthaddress(const QString &ethaddress) {
    m_ethaddress = ethaddress;
    m_ethaddress_isSet = true;
}

bool OAIExportAddressRequest::is_ethaddress_Set() const{
    return m_ethaddress_isSet;
}

bool OAIExportAddressRequest::is_ethaddress_Valid() const{
    return m_ethaddress_isValid;
}

QString OAIExportAddressRequest::getPassword() const {
    return m_password;
}
void OAIExportAddressRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIExportAddressRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAIExportAddressRequest::is_password_Valid() const{
    return m_password_isValid;
}

bool OAIExportAddressRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ethaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportAddressRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ethaddress_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
