/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClearAddressRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClearAddressRequest::OAIClearAddressRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClearAddressRequest::OAIClearAddressRequest() {
    this->initializeModel();
}

OAIClearAddressRequest::~OAIClearAddressRequest() {}

void OAIClearAddressRequest::initializeModel() {

    m_ethereumaddress_isSet = false;
    m_ethereumaddress_isValid = false;

    m_newaddress_isSet = false;
    m_newaddress_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;
}

void OAIClearAddressRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClearAddressRequest::fromJsonObject(QJsonObject json) {

    m_ethereumaddress_isValid = ::OpenAPI::fromJsonValue(m_ethereumaddress, json[QString("ethereumaddress")]);
    m_ethereumaddress_isSet = !json[QString("ethereumaddress")].isNull() && m_ethereumaddress_isValid;

    m_newaddress_isValid = ::OpenAPI::fromJsonValue(m_newaddress, json[QString("newaddress")]);
    m_newaddress_isSet = !json[QString("newaddress")].isNull() && m_newaddress_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;
}

QString OAIClearAddressRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClearAddressRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ethereumaddress_isSet) {
        obj.insert(QString("ethereumaddress"), ::OpenAPI::toJsonValue(m_ethereumaddress));
    }
    if (m_newaddress_isSet) {
        obj.insert(QString("newaddress"), ::OpenAPI::toJsonValue(m_newaddress));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    return obj;
}

QString OAIClearAddressRequest::getEthereumaddress() const {
    return m_ethereumaddress;
}
void OAIClearAddressRequest::setEthereumaddress(const QString &ethereumaddress) {
    m_ethereumaddress = ethereumaddress;
    m_ethereumaddress_isSet = true;
}

bool OAIClearAddressRequest::is_ethereumaddress_Set() const{
    return m_ethereumaddress_isSet;
}

bool OAIClearAddressRequest::is_ethereumaddress_Valid() const{
    return m_ethereumaddress_isValid;
}

QString OAIClearAddressRequest::getNewaddress() const {
    return m_newaddress;
}
void OAIClearAddressRequest::setNewaddress(const QString &newaddress) {
    m_newaddress = newaddress;
    m_newaddress_isSet = true;
}

bool OAIClearAddressRequest::is_newaddress_Set() const{
    return m_newaddress_isSet;
}

bool OAIClearAddressRequest::is_newaddress_Valid() const{
    return m_newaddress_isValid;
}

QString OAIClearAddressRequest::getPassword() const {
    return m_password;
}
void OAIClearAddressRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIClearAddressRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAIClearAddressRequest::is_password_Valid() const{
    return m_password_isValid;
}

bool OAIClearAddressRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ethereumaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_newaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClearAddressRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ethereumaddress_isValid && m_newaddress_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
