/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICipherparams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICipherparams::OAICipherparams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICipherparams::OAICipherparams() {
    this->initializeModel();
}

OAICipherparams::~OAICipherparams() {}

void OAICipherparams::initializeModel() {

    m_iv_isSet = false;
    m_iv_isValid = false;
}

void OAICipherparams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICipherparams::fromJsonObject(QJsonObject json) {

    m_iv_isValid = ::OpenAPI::fromJsonValue(m_iv, json[QString("iv")]);
    m_iv_isSet = !json[QString("iv")].isNull() && m_iv_isValid;
}

QString OAICipherparams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICipherparams::asJsonObject() const {
    QJsonObject obj;
    if (m_iv_isSet) {
        obj.insert(QString("iv"), ::OpenAPI::toJsonValue(m_iv));
    }
    return obj;
}

QString OAICipherparams::getIv() const {
    return m_iv;
}
void OAICipherparams::setIv(const QString &iv) {
    m_iv = iv;
    m_iv_isSet = true;
}

bool OAICipherparams::is_iv_Set() const{
    return m_iv_isSet;
}

bool OAICipherparams::is_iv_Valid() const{
    return m_iv_isValid;
}

bool OAICipherparams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iv_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICipherparams::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_iv_isValid && true;
}

} // namespace OpenAPI
