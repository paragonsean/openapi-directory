/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTransactionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTransactionsRequest::OAIGetTransactionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTransactionsRequest::OAIGetTransactionsRequest() {
    this->initializeModel();
}

OAIGetTransactionsRequest::~OAIGetTransactionsRequest() {}

void OAIGetTransactionsRequest::initializeModel() {

    m_txid_isSet = false;
    m_txid_isValid = false;
}

void OAIGetTransactionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTransactionsRequest::fromJsonObject(QJsonObject json) {

    m_txid_isValid = ::OpenAPI::fromJsonValue(m_txid, json[QString("txid")]);
    m_txid_isSet = !json[QString("txid")].isNull() && m_txid_isValid;
}

QString OAIGetTransactionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTransactionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_txid_isSet) {
        obj.insert(QString("txid"), ::OpenAPI::toJsonValue(m_txid));
    }
    return obj;
}

QString OAIGetTransactionsRequest::getTxid() const {
    return m_txid;
}
void OAIGetTransactionsRequest::setTxid(const QString &txid) {
    m_txid = txid;
    m_txid_isSet = true;
}

bool OAIGetTransactionsRequest::is_txid_Set() const{
    return m_txid_isSet;
}

bool OAIGetTransactionsRequest::is_txid_Valid() const{
    return m_txid_isValid;
}

bool OAIGetTransactionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_txid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTransactionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_txid_isValid && true;
}

} // namespace OpenAPI
