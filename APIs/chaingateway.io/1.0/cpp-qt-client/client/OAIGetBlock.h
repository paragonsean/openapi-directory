/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetBlock.h
 *
 * 
 */

#ifndef OAIGetBlock_H
#define OAIGetBlock_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetBlock : public OAIObject {
public:
    OAIGetBlock();
    OAIGetBlock(QString json);
    ~OAIGetBlock() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBlockNumber() const;
    void setBlockNumber(const QString &block_number);
    bool is_block_number_Set() const;
    bool is_block_number_Valid() const;

    QString getDifficulty() const;
    void setDifficulty(const QString &difficulty);
    bool is_difficulty_Set() const;
    bool is_difficulty_Valid() const;

    QString getGasLimit() const;
    void setGasLimit(const QString &gas_limit);
    bool is_gas_limit_Set() const;
    bool is_gas_limit_Valid() const;

    QString getGasUsed() const;
    void setGasUsed(const QString &gas_used);
    bool is_gas_used_Set() const;
    bool is_gas_used_Valid() const;

    QString getHash() const;
    void setHash(const QString &hash);
    bool is_hash_Set() const;
    bool is_hash_Valid() const;

    QString getMiner() const;
    void setMiner(const QString &miner);
    bool is_miner_Set() const;
    bool is_miner_Valid() const;

    bool isOk() const;
    void setOk(const bool &ok);
    bool is_ok_Set() const;
    bool is_ok_Valid() const;

    QString getParentHash() const;
    void setParentHash(const QString &parent_hash);
    bool is_parent_hash_Set() const;
    bool is_parent_hash_Valid() const;

    QString getSizeInBytes() const;
    void setSizeInBytes(const QString &size_in_bytes);
    bool is_size_in_bytes_Set() const;
    bool is_size_in_bytes_Valid() const;

    QString getTimeStamp() const;
    void setTimeStamp(const QString &time_stamp);
    bool is_time_stamp_Set() const;
    bool is_time_stamp_Valid() const;

    QString getTransactionsCount() const;
    void setTransactionsCount(const QString &transactions_count);
    bool is_transactions_count_Set() const;
    bool is_transactions_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_block_number;
    bool m_block_number_isSet;
    bool m_block_number_isValid;

    QString m_difficulty;
    bool m_difficulty_isSet;
    bool m_difficulty_isValid;

    QString m_gas_limit;
    bool m_gas_limit_isSet;
    bool m_gas_limit_isValid;

    QString m_gas_used;
    bool m_gas_used_isSet;
    bool m_gas_used_isValid;

    QString m_hash;
    bool m_hash_isSet;
    bool m_hash_isValid;

    QString m_miner;
    bool m_miner_isSet;
    bool m_miner_isValid;

    bool m_ok;
    bool m_ok_isSet;
    bool m_ok_isValid;

    QString m_parent_hash;
    bool m_parent_hash_isSet;
    bool m_parent_hash_isValid;

    QString m_size_in_bytes;
    bool m_size_in_bytes_isSet;
    bool m_size_in_bytes_isValid;

    QString m_time_stamp;
    bool m_time_stamp_isSet;
    bool m_time_stamp_isValid;

    QString m_transactions_count;
    bool m_transactions_count_isSet;
    bool m_transactions_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetBlock)

#endif // OAIGetBlock_H
