/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailedIpn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailedIpn::OAIFailedIpn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailedIpn::OAIFailedIpn() {
    this->initializeModel();
}

OAIFailedIpn::~OAIFailedIpn() {}

void OAIFailedIpn::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_contractaddress_isSet = false;
    m_contractaddress_isValid = false;

    m_ethereumaddress_isSet = false;
    m_ethereumaddress_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIFailedIpn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailedIpn::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_contractaddress_isValid = ::OpenAPI::fromJsonValue(m_contractaddress, json[QString("contractaddress")]);
    m_contractaddress_isSet = !json[QString("contractaddress")].isNull() && m_contractaddress_isValid;

    m_ethereumaddress_isValid = ::OpenAPI::fromJsonValue(m_ethereumaddress, json[QString("ethereumaddress")]);
    m_ethereumaddress_isSet = !json[QString("ethereumaddress")].isNull() && m_ethereumaddress_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIFailedIpn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailedIpn::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_contractaddress_isSet) {
        obj.insert(QString("contractaddress"), ::OpenAPI::toJsonValue(m_contractaddress));
    }
    if (m_ethereumaddress_isSet) {
        obj.insert(QString("ethereumaddress"), ::OpenAPI::toJsonValue(m_ethereumaddress));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIFailedIpn::getAction() const {
    return m_action;
}
void OAIFailedIpn::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIFailedIpn::is_action_Set() const{
    return m_action_isSet;
}

bool OAIFailedIpn::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIFailedIpn::getAmount() const {
    return m_amount;
}
void OAIFailedIpn::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIFailedIpn::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIFailedIpn::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIFailedIpn::getContractaddress() const {
    return m_contractaddress;
}
void OAIFailedIpn::setContractaddress(const QString &contractaddress) {
    m_contractaddress = contractaddress;
    m_contractaddress_isSet = true;
}

bool OAIFailedIpn::is_contractaddress_Set() const{
    return m_contractaddress_isSet;
}

bool OAIFailedIpn::is_contractaddress_Valid() const{
    return m_contractaddress_isValid;
}

QString OAIFailedIpn::getEthereumaddress() const {
    return m_ethereumaddress;
}
void OAIFailedIpn::setEthereumaddress(const QString &ethereumaddress) {
    m_ethereumaddress = ethereumaddress;
    m_ethereumaddress_isSet = true;
}

bool OAIFailedIpn::is_ethereumaddress_Set() const{
    return m_ethereumaddress_isSet;
}

bool OAIFailedIpn::is_ethereumaddress_Valid() const{
    return m_ethereumaddress_isValid;
}

QString OAIFailedIpn::getId() const {
    return m_id;
}
void OAIFailedIpn::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFailedIpn::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFailedIpn::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFailedIpn::getTimestamp() const {
    return m_timestamp;
}
void OAIFailedIpn::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIFailedIpn::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIFailedIpn::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIFailedIpn::getUrl() const {
    return m_url;
}
void OAIFailedIpn::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFailedIpn::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFailedIpn::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIFailedIpn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contractaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethereumaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailedIpn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_amount_isValid && m_contractaddress_isValid && m_ethereumaddress_isValid && m_id_isValid && m_timestamp_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
