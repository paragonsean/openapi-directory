/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendEthereumRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendEthereumRequest::OAISendEthereumRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendEthereumRequest::OAISendEthereumRequest() {
    this->initializeModel();
}

OAISendEthereumRequest::~OAISendEthereumRequest() {}

void OAISendEthereumRequest::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAISendEthereumRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendEthereumRequest::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAISendEthereumRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendEthereumRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

double OAISendEthereumRequest::getAmount() const {
    return m_amount;
}
void OAISendEthereumRequest::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAISendEthereumRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAISendEthereumRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAISendEthereumRequest::getFrom() const {
    return m_from;
}
void OAISendEthereumRequest::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAISendEthereumRequest::is_from_Set() const{
    return m_from_isSet;
}

bool OAISendEthereumRequest::is_from_Valid() const{
    return m_from_isValid;
}

QString OAISendEthereumRequest::getPassword() const {
    return m_password;
}
void OAISendEthereumRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAISendEthereumRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAISendEthereumRequest::is_password_Valid() const{
    return m_password_isValid;
}

QString OAISendEthereumRequest::getTo() const {
    return m_to;
}
void OAISendEthereumRequest::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAISendEthereumRequest::is_to_Set() const{
    return m_to_isSet;
}

bool OAISendEthereumRequest::is_to_Valid() const{
    return m_to_isValid;
}

bool OAISendEthereumRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendEthereumRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_from_isValid && m_password_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
