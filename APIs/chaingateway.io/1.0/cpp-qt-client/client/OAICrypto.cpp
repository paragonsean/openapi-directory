/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrypto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrypto::OAICrypto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrypto::OAICrypto() {
    this->initializeModel();
}

OAICrypto::~OAICrypto() {}

void OAICrypto::initializeModel() {

    m_cipher_isSet = false;
    m_cipher_isValid = false;

    m_cipherparams_isSet = false;
    m_cipherparams_isValid = false;

    m_ciphertext_isSet = false;
    m_ciphertext_isValid = false;

    m_kdf_isSet = false;
    m_kdf_isValid = false;

    m_kdfparams_isSet = false;
    m_kdfparams_isValid = false;

    m_mac_isSet = false;
    m_mac_isValid = false;
}

void OAICrypto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrypto::fromJsonObject(QJsonObject json) {

    m_cipher_isValid = ::OpenAPI::fromJsonValue(m_cipher, json[QString("cipher")]);
    m_cipher_isSet = !json[QString("cipher")].isNull() && m_cipher_isValid;

    m_cipherparams_isValid = ::OpenAPI::fromJsonValue(m_cipherparams, json[QString("cipherparams")]);
    m_cipherparams_isSet = !json[QString("cipherparams")].isNull() && m_cipherparams_isValid;

    m_ciphertext_isValid = ::OpenAPI::fromJsonValue(m_ciphertext, json[QString("ciphertext")]);
    m_ciphertext_isSet = !json[QString("ciphertext")].isNull() && m_ciphertext_isValid;

    m_kdf_isValid = ::OpenAPI::fromJsonValue(m_kdf, json[QString("kdf")]);
    m_kdf_isSet = !json[QString("kdf")].isNull() && m_kdf_isValid;

    m_kdfparams_isValid = ::OpenAPI::fromJsonValue(m_kdfparams, json[QString("kdfparams")]);
    m_kdfparams_isSet = !json[QString("kdfparams")].isNull() && m_kdfparams_isValid;

    m_mac_isValid = ::OpenAPI::fromJsonValue(m_mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;
}

QString OAICrypto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrypto::asJsonObject() const {
    QJsonObject obj;
    if (m_cipher_isSet) {
        obj.insert(QString("cipher"), ::OpenAPI::toJsonValue(m_cipher));
    }
    if (m_cipherparams.isSet()) {
        obj.insert(QString("cipherparams"), ::OpenAPI::toJsonValue(m_cipherparams));
    }
    if (m_ciphertext_isSet) {
        obj.insert(QString("ciphertext"), ::OpenAPI::toJsonValue(m_ciphertext));
    }
    if (m_kdf_isSet) {
        obj.insert(QString("kdf"), ::OpenAPI::toJsonValue(m_kdf));
    }
    if (m_kdfparams.isSet()) {
        obj.insert(QString("kdfparams"), ::OpenAPI::toJsonValue(m_kdfparams));
    }
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(m_mac));
    }
    return obj;
}

QString OAICrypto::getCipher() const {
    return m_cipher;
}
void OAICrypto::setCipher(const QString &cipher) {
    m_cipher = cipher;
    m_cipher_isSet = true;
}

bool OAICrypto::is_cipher_Set() const{
    return m_cipher_isSet;
}

bool OAICrypto::is_cipher_Valid() const{
    return m_cipher_isValid;
}

OAICipherparams OAICrypto::getCipherparams() const {
    return m_cipherparams;
}
void OAICrypto::setCipherparams(const OAICipherparams &cipherparams) {
    m_cipherparams = cipherparams;
    m_cipherparams_isSet = true;
}

bool OAICrypto::is_cipherparams_Set() const{
    return m_cipherparams_isSet;
}

bool OAICrypto::is_cipherparams_Valid() const{
    return m_cipherparams_isValid;
}

QString OAICrypto::getCiphertext() const {
    return m_ciphertext;
}
void OAICrypto::setCiphertext(const QString &ciphertext) {
    m_ciphertext = ciphertext;
    m_ciphertext_isSet = true;
}

bool OAICrypto::is_ciphertext_Set() const{
    return m_ciphertext_isSet;
}

bool OAICrypto::is_ciphertext_Valid() const{
    return m_ciphertext_isValid;
}

QString OAICrypto::getKdf() const {
    return m_kdf;
}
void OAICrypto::setKdf(const QString &kdf) {
    m_kdf = kdf;
    m_kdf_isSet = true;
}

bool OAICrypto::is_kdf_Set() const{
    return m_kdf_isSet;
}

bool OAICrypto::is_kdf_Valid() const{
    return m_kdf_isValid;
}

OAIKdfparams OAICrypto::getKdfparams() const {
    return m_kdfparams;
}
void OAICrypto::setKdfparams(const OAIKdfparams &kdfparams) {
    m_kdfparams = kdfparams;
    m_kdfparams_isSet = true;
}

bool OAICrypto::is_kdfparams_Set() const{
    return m_kdfparams_isSet;
}

bool OAICrypto::is_kdfparams_Valid() const{
    return m_kdfparams_isValid;
}

QString OAICrypto::getMac() const {
    return m_mac;
}
void OAICrypto::setMac(const QString &mac) {
    m_mac = mac;
    m_mac_isSet = true;
}

bool OAICrypto::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAICrypto::is_mac_Valid() const{
    return m_mac_isValid;
}

bool OAICrypto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cipher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cipherparams.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ciphertext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kdf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kdfparams.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrypto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cipher_isValid && m_cipherparams_isValid && m_ciphertext_isValid && m_kdf_isValid && m_kdfparams_isValid && m_mac_isValid && true;
}

} // namespace OpenAPI
