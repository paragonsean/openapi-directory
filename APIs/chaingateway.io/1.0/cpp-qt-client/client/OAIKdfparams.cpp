/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKdfparams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKdfparams::OAIKdfparams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKdfparams::OAIKdfparams() {
    this->initializeModel();
}

OAIKdfparams::~OAIKdfparams() {}

void OAIKdfparams::initializeModel() {

    m_dklen_isSet = false;
    m_dklen_isValid = false;

    m_n_isSet = false;
    m_n_isValid = false;

    m_p_isSet = false;
    m_p_isValid = false;

    m_r_isSet = false;
    m_r_isValid = false;

    m_salt_isSet = false;
    m_salt_isValid = false;
}

void OAIKdfparams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKdfparams::fromJsonObject(QJsonObject json) {

    m_dklen_isValid = ::OpenAPI::fromJsonValue(m_dklen, json[QString("dklen")]);
    m_dklen_isSet = !json[QString("dklen")].isNull() && m_dklen_isValid;

    m_n_isValid = ::OpenAPI::fromJsonValue(m_n, json[QString("n")]);
    m_n_isSet = !json[QString("n")].isNull() && m_n_isValid;

    m_p_isValid = ::OpenAPI::fromJsonValue(m_p, json[QString("p")]);
    m_p_isSet = !json[QString("p")].isNull() && m_p_isValid;

    m_r_isValid = ::OpenAPI::fromJsonValue(m_r, json[QString("r")]);
    m_r_isSet = !json[QString("r")].isNull() && m_r_isValid;

    m_salt_isValid = ::OpenAPI::fromJsonValue(m_salt, json[QString("salt")]);
    m_salt_isSet = !json[QString("salt")].isNull() && m_salt_isValid;
}

QString OAIKdfparams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKdfparams::asJsonObject() const {
    QJsonObject obj;
    if (m_dklen_isSet) {
        obj.insert(QString("dklen"), ::OpenAPI::toJsonValue(m_dklen));
    }
    if (m_n_isSet) {
        obj.insert(QString("n"), ::OpenAPI::toJsonValue(m_n));
    }
    if (m_p_isSet) {
        obj.insert(QString("p"), ::OpenAPI::toJsonValue(m_p));
    }
    if (m_r_isSet) {
        obj.insert(QString("r"), ::OpenAPI::toJsonValue(m_r));
    }
    if (m_salt_isSet) {
        obj.insert(QString("salt"), ::OpenAPI::toJsonValue(m_salt));
    }
    return obj;
}

qint32 OAIKdfparams::getDklen() const {
    return m_dklen;
}
void OAIKdfparams::setDklen(const qint32 &dklen) {
    m_dklen = dklen;
    m_dklen_isSet = true;
}

bool OAIKdfparams::is_dklen_Set() const{
    return m_dklen_isSet;
}

bool OAIKdfparams::is_dklen_Valid() const{
    return m_dklen_isValid;
}

qint32 OAIKdfparams::getN() const {
    return m_n;
}
void OAIKdfparams::setN(const qint32 &n) {
    m_n = n;
    m_n_isSet = true;
}

bool OAIKdfparams::is_n_Set() const{
    return m_n_isSet;
}

bool OAIKdfparams::is_n_Valid() const{
    return m_n_isValid;
}

qint32 OAIKdfparams::getP() const {
    return m_p;
}
void OAIKdfparams::setP(const qint32 &p) {
    m_p = p;
    m_p_isSet = true;
}

bool OAIKdfparams::is_p_Set() const{
    return m_p_isSet;
}

bool OAIKdfparams::is_p_Valid() const{
    return m_p_isValid;
}

qint32 OAIKdfparams::getR() const {
    return m_r;
}
void OAIKdfparams::setR(const qint32 &r) {
    m_r = r;
    m_r_isSet = true;
}

bool OAIKdfparams::is_r_Set() const{
    return m_r_isSet;
}

bool OAIKdfparams::is_r_Valid() const{
    return m_r_isValid;
}

QString OAIKdfparams::getSalt() const {
    return m_salt;
}
void OAIKdfparams::setSalt(const QString &salt) {
    m_salt = salt;
    m_salt_isSet = true;
}

bool OAIKdfparams::is_salt_Set() const{
    return m_salt_isSet;
}

bool OAIKdfparams::is_salt_Valid() const{
    return m_salt_isValid;
}

bool OAIKdfparams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dklen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salt_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKdfparams::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dklen_isValid && m_n_isValid && m_p_isValid && m_r_isValid && m_salt_isValid && true;
}

} // namespace OpenAPI
