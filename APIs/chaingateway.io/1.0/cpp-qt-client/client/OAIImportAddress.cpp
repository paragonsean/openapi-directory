/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportAddress::OAIImportAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportAddress::OAIImportAddress() {
    this->initializeModel();
}

OAIImportAddress::~OAIImportAddress() {}

void OAIImportAddress::initializeModel() {

    m_ethaddress_isSet = false;
    m_ethaddress_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;
}

void OAIImportAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportAddress::fromJsonObject(QJsonObject json) {

    m_ethaddress_isValid = ::OpenAPI::fromJsonValue(m_ethaddress, json[QString("ethaddress")]);
    m_ethaddress_isSet = !json[QString("ethaddress")].isNull() && m_ethaddress_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;
}

QString OAIImportAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_ethaddress_isSet) {
        obj.insert(QString("ethaddress"), ::OpenAPI::toJsonValue(m_ethaddress));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    return obj;
}

QString OAIImportAddress::getEthaddress() const {
    return m_ethaddress;
}
void OAIImportAddress::setEthaddress(const QString &ethaddress) {
    m_ethaddress = ethaddress;
    m_ethaddress_isSet = true;
}

bool OAIImportAddress::is_ethaddress_Set() const{
    return m_ethaddress_isSet;
}

bool OAIImportAddress::is_ethaddress_Valid() const{
    return m_ethaddress_isValid;
}

QString OAIImportAddress::getFilename() const {
    return m_filename;
}
void OAIImportAddress::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIImportAddress::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIImportAddress::is_filename_Valid() const{
    return m_filename_isValid;
}

bool OAIImportAddress::isOk() const {
    return m_ok;
}
void OAIImportAddress::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIImportAddress::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIImportAddress::is_ok_Valid() const{
    return m_ok_isValid;
}

bool OAIImportAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ethaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ethaddress_isValid && m_filename_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
