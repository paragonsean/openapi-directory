/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInfoRequestsApi_H
#define OAI_OAIInfoRequestsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetBlock.h"
#include "OAIGetBlockRequest.h"
#include "OAIGetEthereumBalance.h"
#include "OAIGetEthereumBalanceRequest.h"
#include "OAIGetExchangeRate.h"
#include "OAIGetExchangeRateRequest.h"
#include "OAIGetGasPrice.h"
#include "OAIGetLastBlockNumber.h"
#include "OAIGetToken.h"
#include "OAIGetTokenBalance.h"
#include "OAIGetTokenBalanceRequest.h"
#include "OAIGetTokenRequest.h"
#include "OAIGetTransactions.h"
#include "OAIGetTransactionsRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInfoRequestsApi : public QObject {
    Q_OBJECT

public:
    OAIInfoRequestsApi(const int timeOut = 0);
    ~OAIInfoRequestsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_get_block_request OAIGetBlockRequest [required]
    */
    virtual void getBlock(const QString &authorization, const OAIGetBlockRequest &oai_get_block_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_get_ethereum_balance_request OAIGetEthereumBalanceRequest [required]
    */
    virtual void getEthereumBalance(const QString &authorization, const OAIGetEthereumBalanceRequest &oai_get_ethereum_balance_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_get_exchange_rate_request OAIGetExchangeRateRequest [required]
    */
    virtual void getExchangeRate(const QString &authorization, const OAIGetExchangeRateRequest &oai_get_exchange_rate_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  authorization QString [required]
    */
    virtual void getGasPrice(const QString &content_type, const QString &authorization);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  authorization QString [required]
    */
    virtual void getLastBlockNumber(const QString &content_type, const QString &authorization);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_get_token_request OAIGetTokenRequest [required]
    */
    virtual void getToken(const QString &authorization, const OAIGetTokenRequest &oai_get_token_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_get_token_balance_request OAIGetTokenBalanceRequest [required]
    */
    virtual void getTokenBalance(const QString &authorization, const OAIGetTokenBalanceRequest &oai_get_token_balance_request);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  oai_get_transactions_request OAIGetTransactionsRequest [required]
    */
    virtual void getTransactions(const QString &authorization, const OAIGetTransactionsRequest &oai_get_transactions_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getBlockCallback(OAIHttpRequestWorker *worker);
    void getEthereumBalanceCallback(OAIHttpRequestWorker *worker);
    void getExchangeRateCallback(OAIHttpRequestWorker *worker);
    void getGasPriceCallback(OAIHttpRequestWorker *worker);
    void getLastBlockNumberCallback(OAIHttpRequestWorker *worker);
    void getTokenCallback(OAIHttpRequestWorker *worker);
    void getTokenBalanceCallback(OAIHttpRequestWorker *worker);
    void getTransactionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getBlockSignal(OAIGetBlock summary);
    void getEthereumBalanceSignal(OAIGetEthereumBalance summary);
    void getExchangeRateSignal(OAIGetExchangeRate summary);
    void getGasPriceSignal(OAIGetGasPrice summary);
    void getLastBlockNumberSignal(OAIGetLastBlockNumber summary);
    void getTokenSignal(OAIGetToken summary);
    void getTokenBalanceSignal(OAIGetTokenBalance summary);
    void getTransactionsSignal(OAIGetTransactions summary);


    void getBlockSignalFull(OAIHttpRequestWorker *worker, OAIGetBlock summary);
    void getEthereumBalanceSignalFull(OAIHttpRequestWorker *worker, OAIGetEthereumBalance summary);
    void getExchangeRateSignalFull(OAIHttpRequestWorker *worker, OAIGetExchangeRate summary);
    void getGasPriceSignalFull(OAIHttpRequestWorker *worker, OAIGetGasPrice summary);
    void getLastBlockNumberSignalFull(OAIHttpRequestWorker *worker, OAIGetLastBlockNumber summary);
    void getTokenSignalFull(OAIHttpRequestWorker *worker, OAIGetToken summary);
    void getTokenBalanceSignalFull(OAIHttpRequestWorker *worker, OAIGetTokenBalance summary);
    void getTransactionsSignalFull(OAIHttpRequestWorker *worker, OAIGetTransactions summary);

    Q_DECL_DEPRECATED_X("Use getBlockSignalError() instead")
    void getBlockSignalE(OAIGetBlock summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBlockSignalError(OAIGetBlock summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEthereumBalanceSignalError() instead")
    void getEthereumBalanceSignalE(OAIGetEthereumBalance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEthereumBalanceSignalError(OAIGetEthereumBalance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExchangeRateSignalError() instead")
    void getExchangeRateSignalE(OAIGetExchangeRate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExchangeRateSignalError(OAIGetExchangeRate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGasPriceSignalError() instead")
    void getGasPriceSignalE(OAIGetGasPrice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGasPriceSignalError(OAIGetGasPrice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastBlockNumberSignalError() instead")
    void getLastBlockNumberSignalE(OAIGetLastBlockNumber summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastBlockNumberSignalError(OAIGetLastBlockNumber summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenSignalError() instead")
    void getTokenSignalE(OAIGetToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenSignalError(OAIGetToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenBalanceSignalError() instead")
    void getTokenBalanceSignalE(OAIGetTokenBalance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenBalanceSignalError(OAIGetTokenBalance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsSignalError() instead")
    void getTransactionsSignalE(OAIGetTransactions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsSignalError(OAIGetTransactions summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getBlockSignalErrorFull() instead")
    void getBlockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBlockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEthereumBalanceSignalErrorFull() instead")
    void getEthereumBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEthereumBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExchangeRateSignalErrorFull() instead")
    void getExchangeRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExchangeRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGasPriceSignalErrorFull() instead")
    void getGasPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGasPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastBlockNumberSignalErrorFull() instead")
    void getLastBlockNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastBlockNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenSignalErrorFull() instead")
    void getTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenBalanceSignalErrorFull() instead")
    void getTokenBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsSignalErrorFull() instead")
    void getTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
