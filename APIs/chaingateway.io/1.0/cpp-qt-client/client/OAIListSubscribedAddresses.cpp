/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSubscribedAddresses.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSubscribedAddresses::OAIListSubscribedAddresses(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSubscribedAddresses::OAIListSubscribedAddresses() {
    this->initializeModel();
}

OAIListSubscribedAddresses::~OAIListSubscribedAddresses() {}

void OAIListSubscribedAddresses::initializeModel() {

    m_ipns_isSet = false;
    m_ipns_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;
}

void OAIListSubscribedAddresses::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSubscribedAddresses::fromJsonObject(QJsonObject json) {

    m_ipns_isValid = ::OpenAPI::fromJsonValue(m_ipns, json[QString("ipns")]);
    m_ipns_isSet = !json[QString("ipns")].isNull() && m_ipns_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;
}

QString OAIListSubscribedAddresses::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSubscribedAddresses::asJsonObject() const {
    QJsonObject obj;
    if (m_ipns.size() > 0) {
        obj.insert(QString("ipns"), ::OpenAPI::toJsonValue(m_ipns));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    return obj;
}

QList<OAIIpn> OAIListSubscribedAddresses::getIpns() const {
    return m_ipns;
}
void OAIListSubscribedAddresses::setIpns(const QList<OAIIpn> &ipns) {
    m_ipns = ipns;
    m_ipns_isSet = true;
}

bool OAIListSubscribedAddresses::is_ipns_Set() const{
    return m_ipns_isSet;
}

bool OAIListSubscribedAddresses::is_ipns_Valid() const{
    return m_ipns_isValid;
}

bool OAIListSubscribedAddresses::isOk() const {
    return m_ok;
}
void OAIListSubscribedAddresses::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIListSubscribedAddresses::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIListSubscribedAddresses::is_ok_Valid() const{
    return m_ok_isValid;
}

bool OAIListSubscribedAddresses::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ipns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSubscribedAddresses::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ipns_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
