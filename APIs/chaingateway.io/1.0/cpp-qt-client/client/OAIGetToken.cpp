/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetToken::OAIGetToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetToken::OAIGetToken() {
    this->initializeModel();
}

OAIGetToken::~OAIGetToken() {}

void OAIGetToken::initializeModel() {

    m_contractaddress_isSet = false;
    m_contractaddress_isValid = false;

    m_decimals_isSet = false;
    m_decimals_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_supply_isSet = false;
    m_supply_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAIGetToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetToken::fromJsonObject(QJsonObject json) {

    m_contractaddress_isValid = ::OpenAPI::fromJsonValue(m_contractaddress, json[QString("contractaddress")]);
    m_contractaddress_isSet = !json[QString("contractaddress")].isNull() && m_contractaddress_isValid;

    m_decimals_isValid = ::OpenAPI::fromJsonValue(m_decimals, json[QString("decimals")]);
    m_decimals_isSet = !json[QString("decimals")].isNull() && m_decimals_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_supply_isValid = ::OpenAPI::fromJsonValue(m_supply, json[QString("supply")]);
    m_supply_isSet = !json[QString("supply")].isNull() && m_supply_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAIGetToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetToken::asJsonObject() const {
    QJsonObject obj;
    if (m_contractaddress_isSet) {
        obj.insert(QString("contractaddress"), ::OpenAPI::toJsonValue(m_contractaddress));
    }
    if (m_decimals_isSet) {
        obj.insert(QString("decimals"), ::OpenAPI::toJsonValue(m_decimals));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_supply_isSet) {
        obj.insert(QString("supply"), ::OpenAPI::toJsonValue(m_supply));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

QString OAIGetToken::getContractaddress() const {
    return m_contractaddress;
}
void OAIGetToken::setContractaddress(const QString &contractaddress) {
    m_contractaddress = contractaddress;
    m_contractaddress_isSet = true;
}

bool OAIGetToken::is_contractaddress_Set() const{
    return m_contractaddress_isSet;
}

bool OAIGetToken::is_contractaddress_Valid() const{
    return m_contractaddress_isValid;
}

qint32 OAIGetToken::getDecimals() const {
    return m_decimals;
}
void OAIGetToken::setDecimals(const qint32 &decimals) {
    m_decimals = decimals;
    m_decimals_isSet = true;
}

bool OAIGetToken::is_decimals_Set() const{
    return m_decimals_isSet;
}

bool OAIGetToken::is_decimals_Valid() const{
    return m_decimals_isValid;
}

QString OAIGetToken::getName() const {
    return m_name;
}
void OAIGetToken::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetToken::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetToken::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGetToken::isOk() const {
    return m_ok;
}
void OAIGetToken::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIGetToken::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIGetToken::is_ok_Valid() const{
    return m_ok_isValid;
}

qint64 OAIGetToken::getSupply() const {
    return m_supply;
}
void OAIGetToken::setSupply(const qint64 &supply) {
    m_supply = supply;
    m_supply_isSet = true;
}

bool OAIGetToken::is_supply_Set() const{
    return m_supply_isSet;
}

bool OAIGetToken::is_supply_Valid() const{
    return m_supply_isValid;
}

QString OAIGetToken::getSymbol() const {
    return m_symbol;
}
void OAIGetToken::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIGetToken::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIGetToken::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAIGetToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contractaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contractaddress_isValid && m_decimals_isValid && m_name_isValid && m_ok_isValid && m_supply_isValid && m_symbol_isValid && true;
}

} // namespace OpenAPI
