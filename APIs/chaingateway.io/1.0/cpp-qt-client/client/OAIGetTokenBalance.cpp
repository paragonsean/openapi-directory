/**
 * Chaingateway.io
 * # Chaingateway.io  REST API to build the bridge between Ethereum and the real world  Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.  To use our API, you need an API Key (Described as Authorization header in the examples below). To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).  For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).  If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTokenBalance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTokenBalance::OAIGetTokenBalance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTokenBalance::OAIGetTokenBalance() {
    this->initializeModel();
}

OAIGetTokenBalance::~OAIGetTokenBalance() {}

void OAIGetTokenBalance::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_contractaddress_isSet = false;
    m_contractaddress_isValid = false;

    m_ethereumaddress_isSet = false;
    m_ethereumaddress_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;
}

void OAIGetTokenBalance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTokenBalance::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_contractaddress_isValid = ::OpenAPI::fromJsonValue(m_contractaddress, json[QString("contractaddress")]);
    m_contractaddress_isSet = !json[QString("contractaddress")].isNull() && m_contractaddress_isValid;

    m_ethereumaddress_isValid = ::OpenAPI::fromJsonValue(m_ethereumaddress, json[QString("ethereumaddress")]);
    m_ethereumaddress_isSet = !json[QString("ethereumaddress")].isNull() && m_ethereumaddress_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;
}

QString OAIGetTokenBalance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTokenBalance::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_contractaddress_isSet) {
        obj.insert(QString("contractaddress"), ::OpenAPI::toJsonValue(m_contractaddress));
    }
    if (m_ethereumaddress_isSet) {
        obj.insert(QString("ethereumaddress"), ::OpenAPI::toJsonValue(m_ethereumaddress));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    return obj;
}

qint32 OAIGetTokenBalance::getBalance() const {
    return m_balance;
}
void OAIGetTokenBalance::setBalance(const qint32 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIGetTokenBalance::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIGetTokenBalance::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAIGetTokenBalance::getContractaddress() const {
    return m_contractaddress;
}
void OAIGetTokenBalance::setContractaddress(const QString &contractaddress) {
    m_contractaddress = contractaddress;
    m_contractaddress_isSet = true;
}

bool OAIGetTokenBalance::is_contractaddress_Set() const{
    return m_contractaddress_isSet;
}

bool OAIGetTokenBalance::is_contractaddress_Valid() const{
    return m_contractaddress_isValid;
}

QString OAIGetTokenBalance::getEthereumaddress() const {
    return m_ethereumaddress;
}
void OAIGetTokenBalance::setEthereumaddress(const QString &ethereumaddress) {
    m_ethereumaddress = ethereumaddress;
    m_ethereumaddress_isSet = true;
}

bool OAIGetTokenBalance::is_ethereumaddress_Set() const{
    return m_ethereumaddress_isSet;
}

bool OAIGetTokenBalance::is_ethereumaddress_Valid() const{
    return m_ethereumaddress_isValid;
}

bool OAIGetTokenBalance::isOk() const {
    return m_ok;
}
void OAIGetTokenBalance::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIGetTokenBalance::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIGetTokenBalance::is_ok_Valid() const{
    return m_ok_isValid;
}

bool OAIGetTokenBalance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contractaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethereumaddress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTokenBalance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_balance_isValid && m_contractaddress_isValid && m_ethereumaddress_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
