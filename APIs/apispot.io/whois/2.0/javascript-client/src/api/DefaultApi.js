/**
 * Bulk WHOIS API
 * Domain API (WHOIS, Check, Batch)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArrayOfBatch from '../model/ArrayOfBatch';
import Batch from '../model/Batch';
import CheckDomain200Response from '../model/CheckDomain200Response';
import CreateBatchRequest from '../model/CreateBatchRequest';
import DomainRank200Response from '../model/DomainRank200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 2.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkDomain operation.
     * @callback module:api/DefaultApi~checkDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckDomain200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check domain availability
     * @param {String} domain Domain
     * @param {module:api/DefaultApi~checkDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckDomain200Response}
     */
    checkDomain(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling checkDomain");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckDomain200Response;
      return this.apiClient.callApi(
        '/domains/{domain}/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBatch operation.
     * @callback module:api/DefaultApi~createBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Batch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create batch. Batch is then being processed until all provided items have been completed. At any time it can be `get` to provide current status with results optionally.
     * @param {module:model/CreateBatchRequest} createBatchRequest 
     * @param {module:api/DefaultApi~createBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Batch}
     */
    createBatch(createBatchRequest, callback) {
      let postBody = createBatchRequest;
      // verify the required parameter 'createBatchRequest' is set
      if (createBatchRequest === undefined || createBatchRequest === null) {
        throw new Error("Missing the required parameter 'createBatchRequest' when calling createBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Batch;
      return this.apiClient.callApi(
        '/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBatch operation.
     * @callback module:api/DefaultApi~deleteBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete batch
     * @param {String} id Batch ID
     * @param {module:api/DefaultApi~deleteBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBatch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/batch/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainRank operation.
     * @callback module:api/DefaultApi~domainRankCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainRank200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check domain rank (authority).
     * @param {String} domain Domain
     * @param {module:api/DefaultApi~domainRankCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainRank200Response}
     */
    domainRank(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling domainRank");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainRank200Response;
      return this.apiClient.callApi(
        '/domains/{domain}/rank', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatch operation.
     * @callback module:api/DefaultApi~getBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Batch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get batch
     * @param {String} id Batch ID
     * @param {module:api/DefaultApi~getBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Batch}
     */
    getBatch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Batch;
      return this.apiClient.callApi(
        '/batch/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatches operation.
     * @callback module:api/DefaultApi~getBatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArrayOfBatch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your batches
     * @param {module:api/DefaultApi~getBatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArrayOfBatch}
     */
    getBatches(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArrayOfBatch;
      return this.apiClient.callApi(
        '/batch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryDb operation.
     * @callback module:api/DefaultApi~queryDbCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query domain database
     * @param {String} query Query (contact name, dns, domain etc)
     * @param {module:api/DefaultApi~queryDbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    queryDb(query, callback) {
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryDb");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/db', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the whois operation.
     * @callback module:api/DefaultApi~whoisCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WHOIS query for a domain
     * @param {String} domain Domain
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] 
     * @param {module:api/DefaultApi~whoisCallback} callback The callback function, accepting three arguments: error, data, response
     */
    whois(domain, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling whois");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{domain}/whois', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
