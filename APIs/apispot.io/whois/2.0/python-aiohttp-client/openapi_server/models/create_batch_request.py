# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_batch_request_options import CreateBatchRequestOptions
from openapi_server import util


class CreateBatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domains: List[str]=None, operation: str=None, options: CreateBatchRequestOptions=None):
        """CreateBatchRequest - a model defined in OpenAPI

        :param domains: The domains of this CreateBatchRequest.
        :param operation: The operation of this CreateBatchRequest.
        :param options: The options of this CreateBatchRequest.
        """
        self.openapi_types = {
            'domains': List[str],
            'operation': str,
            'options': CreateBatchRequestOptions
        }

        self.attribute_map = {
            'domains': 'domains',
            'operation': 'operation',
            'options': 'options'
        }

        self._domains = domains
        self._operation = operation
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createBatch_request of this CreateBatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domains(self):
        """Gets the domains of this CreateBatchRequest.


        :return: The domains of this CreateBatchRequest.
        :rtype: List[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this CreateBatchRequest.


        :param domains: The domains of this CreateBatchRequest.
        :type domains: List[str]
        """
        if domains is None:
            raise ValueError("Invalid value for `domains`, must not be `None`")

        self._domains = domains

    @property
    def operation(self):
        """Gets the operation of this CreateBatchRequest.


        :return: The operation of this CreateBatchRequest.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this CreateBatchRequest.


        :param operation: The operation of this CreateBatchRequest.
        :type operation: str
        """
        allowed_values = ["whois", "check"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def options(self):
        """Gets the options of this CreateBatchRequest.


        :return: The options of this CreateBatchRequest.
        :rtype: CreateBatchRequestOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CreateBatchRequest.


        :param options: The options of this CreateBatchRequest.
        :type options: CreateBatchRequestOptions
        """

        self._options = options
