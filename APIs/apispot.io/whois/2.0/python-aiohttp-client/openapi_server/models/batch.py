# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Batch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed: bool=None, count: int=None, created_at: str=None, id: str=None, operation: str=None, results: List[object]=None, status: str=None):
        """Batch - a model defined in OpenAPI

        :param completed: The completed of this Batch.
        :param count: The count of this Batch.
        :param created_at: The created_at of this Batch.
        :param id: The id of this Batch.
        :param operation: The operation of this Batch.
        :param results: The results of this Batch.
        :param status: The status of this Batch.
        """
        self.openapi_types = {
            'completed': bool,
            'count': int,
            'created_at': str,
            'id': str,
            'operation': str,
            'results': List[object],
            'status': str
        }

        self.attribute_map = {
            'completed': 'completed',
            'count': 'count',
            'created_at': 'created_at',
            'id': 'id',
            'operation': 'operation',
            'results': 'results',
            'status': 'status'
        }

        self._completed = completed
        self._count = count
        self._created_at = created_at
        self._id = id
        self._operation = operation
        self._results = results
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Batch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Batch of this Batch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed(self):
        """Gets the completed of this Batch.


        :return: The completed of this Batch.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this Batch.


        :param completed: The completed of this Batch.
        :type completed: bool
        """

        self._completed = completed

    @property
    def count(self):
        """Gets the count of this Batch.


        :return: The count of this Batch.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Batch.


        :param count: The count of this Batch.
        :type count: int
        """

        self._count = count

    @property
    def created_at(self):
        """Gets the created_at of this Batch.


        :return: The created_at of this Batch.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Batch.


        :param created_at: The created_at of this Batch.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Batch.


        :return: The id of this Batch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Batch.


        :param id: The id of this Batch.
        :type id: str
        """

        self._id = id

    @property
    def operation(self):
        """Gets the operation of this Batch.


        :return: The operation of this Batch.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Batch.


        :param operation: The operation of this Batch.
        :type operation: str
        """

        self._operation = operation

    @property
    def results(self):
        """Gets the results of this Batch.


        :return: The results of this Batch.
        :rtype: List[object]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this Batch.


        :param results: The results of this Batch.
        :type results: List[object]
        """

        self._results = results

    @property
    def status(self):
        """Gets the status of this Batch.


        :return: The status of this Batch.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Batch.


        :param status: The status of this Batch.
        :type status: str
        """

        self._status = status
