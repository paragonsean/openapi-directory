/**
 * Bulk WHOIS API
 * Domain API (WHOIS, Check, Batch)
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatch::OAIBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatch::OAIBatch() {
    this->initializeModel();
}

OAIBatch::~OAIBatch() {}

void OAIBatch::initializeModel() {

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatch::fromJsonObject(QJsonObject json) {

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

bool OAIBatch::isCompleted() const {
    return m_completed;
}
void OAIBatch::setCompleted(const bool &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAIBatch::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAIBatch::is_completed_Valid() const{
    return m_completed_isValid;
}

qint32 OAIBatch::getCount() const {
    return m_count;
}
void OAIBatch::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIBatch::is_count_Set() const{
    return m_count_isSet;
}

bool OAIBatch::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIBatch::getCreatedAt() const {
    return m_created_at;
}
void OAIBatch::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBatch::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBatch::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIBatch::getId() const {
    return m_id;
}
void OAIBatch::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBatch::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBatch::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBatch::getOperation() const {
    return m_operation;
}
void OAIBatch::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIBatch::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIBatch::is_operation_Valid() const{
    return m_operation_isValid;
}

QList<QJsonValue> OAIBatch::getResults() const {
    return m_results;
}
void OAIBatch::setResults(const QList<QJsonValue> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIBatch::is_results_Set() const{
    return m_results_isSet;
}

bool OAIBatch::is_results_Valid() const{
    return m_results_isValid;
}

QString OAIBatch::getStatus() const {
    return m_status;
}
void OAIBatch::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBatch::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBatch::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
