/**
 * Bulk WHOIS API
 * Domain API (WHOIS, Check, Batch)
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArrayOfBatch.h"
#include "OAIBatch.h"
#include "OAICheckDomain_200_response.h"
#include "OAICreateBatch_request.h"
#include "OAIDomainRank_200_response.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  domain QString [required]
    */
    virtual void checkDomain(const QString &domain);

    /**
    * @param[in]  oai_create_batch_request OAICreateBatch_request [required]
    */
    virtual void createBatch(const OAICreateBatch_request &oai_create_batch_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteBatch(const QString &id);

    /**
    * @param[in]  domain QString [required]
    */
    virtual void domainRank(const QString &domain);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getBatch(const QString &id);


    virtual void getBatches();

    /**
    * @param[in]  query QString [required]
    */
    virtual void queryDb(const QString &query);

    /**
    * @param[in]  domain QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void whois(const QString &domain, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkDomainCallback(OAIHttpRequestWorker *worker);
    void createBatchCallback(OAIHttpRequestWorker *worker);
    void deleteBatchCallback(OAIHttpRequestWorker *worker);
    void domainRankCallback(OAIHttpRequestWorker *worker);
    void getBatchCallback(OAIHttpRequestWorker *worker);
    void getBatchesCallback(OAIHttpRequestWorker *worker);
    void queryDbCallback(OAIHttpRequestWorker *worker);
    void whoisCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkDomainSignal(OAICheckDomain_200_response summary);
    void createBatchSignal(OAIBatch summary);
    void deleteBatchSignal();
    void domainRankSignal(OAIDomainRank_200_response summary);
    void getBatchSignal(OAIBatch summary);
    void getBatchesSignal(OAIArrayOfBatch summary);
    void queryDbSignal(OAIObject summary);
    void whoisSignal();


    void checkDomainSignalFull(OAIHttpRequestWorker *worker, OAICheckDomain_200_response summary);
    void createBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatch summary);
    void deleteBatchSignalFull(OAIHttpRequestWorker *worker);
    void domainRankSignalFull(OAIHttpRequestWorker *worker, OAIDomainRank_200_response summary);
    void getBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatch summary);
    void getBatchesSignalFull(OAIHttpRequestWorker *worker, OAIArrayOfBatch summary);
    void queryDbSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void whoisSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use checkDomainSignalError() instead")
    void checkDomainSignalE(OAICheckDomain_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkDomainSignalError(OAICheckDomain_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBatchSignalError() instead")
    void createBatchSignalE(OAIBatch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchSignalError(OAIBatch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBatchSignalError() instead")
    void deleteBatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainRankSignalError() instead")
    void domainRankSignalE(OAIDomainRank_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainRankSignalError(OAIDomainRank_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchSignalError() instead")
    void getBatchSignalE(OAIBatch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchSignalError(OAIBatch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchesSignalError() instead")
    void getBatchesSignalE(OAIArrayOfBatch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchesSignalError(OAIArrayOfBatch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryDbSignalError() instead")
    void queryDbSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDbSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use whoisSignalError() instead")
    void whoisSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void whoisSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkDomainSignalErrorFull() instead")
    void checkDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBatchSignalErrorFull() instead")
    void createBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBatchSignalErrorFull() instead")
    void deleteBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainRankSignalErrorFull() instead")
    void domainRankSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainRankSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchSignalErrorFull() instead")
    void getBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchesSignalErrorFull() instead")
    void getBatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryDbSignalErrorFull() instead")
    void queryDbSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDbSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use whoisSignalErrorFull() instead")
    void whoisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void whoisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
