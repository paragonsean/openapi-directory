/**
 * SearchLy API v1
 * # Introduction The SearchLy API provides similarity searching based on song lyrics.  # Operations The API allows for the `/similarity/by_song` operation, which allows clients to search the similarity for an existing song in the database. Also, the API has an additional `/similarity/by_content` endpoint which allows clients to search similarity given a free String input through a JSON request body. Additional `/song/search` operation is available for searching songs given a query String.  # Endpoint The API endpoint for the SearchLy API v1 is as follows: ``` https://searchly.asuarez.dev/api/v1 ```  # Motivation This project was built in order to create an API for searching similarities based on song lyrics. There are a lot of songs in the industry and most of them are talking about the same topic. What I wanted to prove with SearchLy was to estimate how similar are two songs between them based on the meaning of their lyrics.  SearchLy is using a database of 100k songs from AZLyrics, using [this scraper](https://github.com/AlbertSuarez/azlyrics-scraper), which is being updated periodically. Then, using word2vec and NMSLIB, it was possible to create an index where you can search similarities using the k-nearest neighbors (KNN) algorithm.  > **Note**: I am currently using a micro-instance from DigitalOcean where the API is deployed, so you should expect a bad performance. However, if this API becomes popular I will deploy it in a bigger instance. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@asuarez.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIResponseSimilarity_response_similarity_list_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIResponseSimilarity_response_similarity_list_inner::OAIAPIResponseSimilarity_response_similarity_list_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIResponseSimilarity_response_similarity_list_inner::OAIAPIResponseSimilarity_response_similarity_list_inner() {
    this->initializeModel();
}

OAIAPIResponseSimilarity_response_similarity_list_inner::~OAIAPIResponseSimilarity_response_similarity_list_inner() {}

void OAIAPIResponseSimilarity_response_similarity_list_inner::initializeModel() {

    m_artist_name_isSet = false;
    m_artist_name_isValid = false;

    m_artist_url_isSet = false;
    m_artist_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_lyrics_isSet = false;
    m_lyrics_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_song_name_isSet = false;
    m_song_name_isValid = false;

    m_song_url_isSet = false;
    m_song_url_isValid = false;
}

void OAIAPIResponseSimilarity_response_similarity_list_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIResponseSimilarity_response_similarity_list_inner::fromJsonObject(QJsonObject json) {

    m_artist_name_isValid = ::OpenAPI::fromJsonValue(m_artist_name, json[QString("artist_name")]);
    m_artist_name_isSet = !json[QString("artist_name")].isNull() && m_artist_name_isValid;

    m_artist_url_isValid = ::OpenAPI::fromJsonValue(m_artist_url, json[QString("artist_url")]);
    m_artist_url_isSet = !json[QString("artist_url")].isNull() && m_artist_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("index_id")]);
    m_index_id_isSet = !json[QString("index_id")].isNull() && m_index_id_isValid;

    m_lyrics_isValid = ::OpenAPI::fromJsonValue(m_lyrics, json[QString("lyrics")]);
    m_lyrics_isSet = !json[QString("lyrics")].isNull() && m_lyrics_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_song_name_isValid = ::OpenAPI::fromJsonValue(m_song_name, json[QString("song_name")]);
    m_song_name_isSet = !json[QString("song_name")].isNull() && m_song_name_isValid;

    m_song_url_isValid = ::OpenAPI::fromJsonValue(m_song_url, json[QString("song_url")]);
    m_song_url_isSet = !json[QString("song_url")].isNull() && m_song_url_isValid;
}

QString OAIAPIResponseSimilarity_response_similarity_list_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIResponseSimilarity_response_similarity_list_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_artist_name_isSet) {
        obj.insert(QString("artist_name"), ::OpenAPI::toJsonValue(m_artist_name));
    }
    if (m_artist_url_isSet) {
        obj.insert(QString("artist_url"), ::OpenAPI::toJsonValue(m_artist_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_index_id_isSet) {
        obj.insert(QString("index_id"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_lyrics_isSet) {
        obj.insert(QString("lyrics"), ::OpenAPI::toJsonValue(m_lyrics));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_song_name_isSet) {
        obj.insert(QString("song_name"), ::OpenAPI::toJsonValue(m_song_name));
    }
    if (m_song_url_isSet) {
        obj.insert(QString("song_url"), ::OpenAPI::toJsonValue(m_song_url));
    }
    return obj;
}

QString OAIAPIResponseSimilarity_response_similarity_list_inner::getArtistName() const {
    return m_artist_name;
}
void OAIAPIResponseSimilarity_response_similarity_list_inner::setArtistName(const QString &artist_name) {
    m_artist_name = artist_name;
    m_artist_name_isSet = true;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_artist_name_Set() const{
    return m_artist_name_isSet;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_artist_name_Valid() const{
    return m_artist_name_isValid;
}

QString OAIAPIResponseSimilarity_response_similarity_list_inner::getArtistUrl() const {
    return m_artist_url;
}
void OAIAPIResponseSimilarity_response_similarity_list_inner::setArtistUrl(const QString &artist_url) {
    m_artist_url = artist_url;
    m_artist_url_isSet = true;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_artist_url_Set() const{
    return m_artist_url_isSet;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_artist_url_Valid() const{
    return m_artist_url_isValid;
}

qint32 OAIAPIResponseSimilarity_response_similarity_list_inner::getId() const {
    return m_id;
}
void OAIAPIResponseSimilarity_response_similarity_list_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIAPIResponseSimilarity_response_similarity_list_inner::getIndexId() const {
    return m_index_id;
}
void OAIAPIResponseSimilarity_response_similarity_list_inner::setIndexId(const qint32 &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QString OAIAPIResponseSimilarity_response_similarity_list_inner::getLyrics() const {
    return m_lyrics;
}
void OAIAPIResponseSimilarity_response_similarity_list_inner::setLyrics(const QString &lyrics) {
    m_lyrics = lyrics;
    m_lyrics_isSet = true;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_lyrics_Set() const{
    return m_lyrics_isSet;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_lyrics_Valid() const{
    return m_lyrics_isValid;
}

float OAIAPIResponseSimilarity_response_similarity_list_inner::getPercentage() const {
    return m_percentage;
}
void OAIAPIResponseSimilarity_response_similarity_list_inner::setPercentage(const float &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_percentage_Valid() const{
    return m_percentage_isValid;
}

QString OAIAPIResponseSimilarity_response_similarity_list_inner::getSongName() const {
    return m_song_name;
}
void OAIAPIResponseSimilarity_response_similarity_list_inner::setSongName(const QString &song_name) {
    m_song_name = song_name;
    m_song_name_isSet = true;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_song_name_Set() const{
    return m_song_name_isSet;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_song_name_Valid() const{
    return m_song_name_isValid;
}

QString OAIAPIResponseSimilarity_response_similarity_list_inner::getSongUrl() const {
    return m_song_url;
}
void OAIAPIResponseSimilarity_response_similarity_list_inner::setSongUrl(const QString &song_url) {
    m_song_url = song_url;
    m_song_url_isSet = true;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_song_url_Set() const{
    return m_song_url_isSet;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::is_song_url_Valid() const{
    return m_song_url_isValid;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artist_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lyrics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIResponseSimilarity_response_similarity_list_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
