/**
 * SearchLy API v1
 * # Introduction The SearchLy API provides similarity searching based on song lyrics.  # Operations The API allows for the `/similarity/by_song` operation, which allows clients to search the similarity for an existing song in the database. Also, the API has an additional `/similarity/by_content` endpoint which allows clients to search similarity given a free String input through a JSON request body. Additional `/song/search` operation is available for searching songs given a query String.  # Endpoint The API endpoint for the SearchLy API v1 is as follows: ``` https://searchly.asuarez.dev/api/v1 ```  # Motivation This project was built in order to create an API for searching similarities based on song lyrics. There are a lot of songs in the industry and most of them are talking about the same topic. What I wanted to prove with SearchLy was to estimate how similar are two songs between them based on the meaning of their lyrics.  SearchLy is using a database of 100k songs from AZLyrics, using [this scraper](https://github.com/AlbertSuarez/azlyrics-scraper), which is being updated periodically. Then, using word2vec and NMSLIB, it was possible to create an index where you can search similarities using the k-nearest neighbors (KNN) algorithm.  > **Note**: I am currently using a micro-instance from DigitalOcean where the API is deployed, so you should expect a bad performance. However, if this API becomes popular I will deploy it in a bigger instance. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@asuarez.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIResponseSimilarity_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIResponseSimilarity_response::OAIAPIResponseSimilarity_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIResponseSimilarity_response::OAIAPIResponseSimilarity_response() {
    this->initializeModel();
}

OAIAPIResponseSimilarity_response::~OAIAPIResponseSimilarity_response() {}

void OAIAPIResponseSimilarity_response::initializeModel() {

    m_similarity_list_isSet = false;
    m_similarity_list_isValid = false;
}

void OAIAPIResponseSimilarity_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIResponseSimilarity_response::fromJsonObject(QJsonObject json) {

    m_similarity_list_isValid = ::OpenAPI::fromJsonValue(m_similarity_list, json[QString("similarity_list")]);
    m_similarity_list_isSet = !json[QString("similarity_list")].isNull() && m_similarity_list_isValid;
}

QString OAIAPIResponseSimilarity_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIResponseSimilarity_response::asJsonObject() const {
    QJsonObject obj;
    if (m_similarity_list.size() > 0) {
        obj.insert(QString("similarity_list"), ::OpenAPI::toJsonValue(m_similarity_list));
    }
    return obj;
}

QList<OAIAPIResponseSimilarity_response_similarity_list_inner> OAIAPIResponseSimilarity_response::getSimilarityList() const {
    return m_similarity_list;
}
void OAIAPIResponseSimilarity_response::setSimilarityList(const QList<OAIAPIResponseSimilarity_response_similarity_list_inner> &similarity_list) {
    m_similarity_list = similarity_list;
    m_similarity_list_isSet = true;
}

bool OAIAPIResponseSimilarity_response::is_similarity_list_Set() const{
    return m_similarity_list_isSet;
}

bool OAIAPIResponseSimilarity_response::is_similarity_list_Valid() const{
    return m_similarity_list_isValid;
}

bool OAIAPIResponseSimilarity_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_similarity_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIResponseSimilarity_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
