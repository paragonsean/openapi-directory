/*
 * SearchLy API v1
 * # Introduction The SearchLy API provides similarity searching based on song lyrics.  # Operations The API allows for the `/similarity/by_song` operation, which allows clients to search the similarity for an existing song in the database. Also, the API has an additional `/similarity/by_content` endpoint which allows clients to search similarity given a free String input through a JSON request body. Additional `/song/search` operation is available for searching songs given a query String.  # Endpoint The API endpoint for the SearchLy API v1 is as follows: ``` https://searchly.asuarez.dev/api/v1 ```  # Motivation This project was built in order to create an API for searching similarities based on song lyrics. There are a lot of songs in the industry and most of them are talking about the same topic. What I wanted to prove with SearchLy was to estimate how similar are two songs between them based on the meaning of their lyrics.  SearchLy is using a database of 100k songs from AZLyrics, using [this scraper](https://github.com/AlbertSuarez/azlyrics-scraper), which is being updated periodically. Then, using word2vec and NMSLIB, it was possible to create an index where you can search similarities using the k-nearest neighbors (KNN) algorithm.  > **Note**: I am currently using a micro-instance from DigitalOcean where the API is deployed, so you should expect a bad performance. However, if this API becomes popular I will deploy it in a bigger instance. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hi@asuarez.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIResponseSimilarity;
import org.openapitools.client.model.SrcSearchlyApiV1ControllersSimilarityByContentRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SimilarityApi
 */
@Disabled
public class SimilarityApiTest {

    private final SimilarityApi api = new SimilarityApi();

    /**
     * API endpoint to search similarity using content
     *
     * Endpoint for an end-user client to search similarity by content.  If you want to run the /similarity/by_content operation, you can do so via an HTTP POST command to the following URL:  &#x60;&#x60;&#x60; https://searchly.asuarez.dev/api/v1/similarity/by_content &#x60;&#x60;&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void srcSearchlyApiV1ControllersSimilarityByContentTest() throws ApiException {
        SrcSearchlyApiV1ControllersSimilarityByContentRequest srcSearchlyApiV1ControllersSimilarityByContentRequest = null;
        APIResponseSimilarity response = api.srcSearchlyApiV1ControllersSimilarityByContent(srcSearchlyApiV1ControllersSimilarityByContentRequest);
        // TODO: test validations
    }

    /**
     * API endpoint to search similarity using a song identifier
     *
     * Endpoint for an end-user client to search similarity by song identifier.  If you want to run the /similarity/by_song operation, you can do so via an HTTP GET command to the following URL:  &#x60;&#x60;&#x60; https://searchly.asuarez.dev/api/v1/similarity/by_song &#x60;&#x60;&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void srcSearchlyApiV1ControllersSimilarityBySongTest() throws ApiException {
        Integer songId = null;
        APIResponseSimilarity response = api.srcSearchlyApiV1ControllersSimilarityBySong(songId);
        // TODO: test validations
    }

}
