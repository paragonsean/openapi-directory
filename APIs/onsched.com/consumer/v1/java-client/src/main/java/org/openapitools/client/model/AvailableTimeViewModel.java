/*
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AvailableTimeViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:57.922898-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailableTimeViewModel {
  public static final String SERIALIZED_NAME_ALLOWABLE_BOOKINGS = "allowableBookings";
  @SerializedName(SERIALIZED_NAME_ALLOWABLE_BOOKINGS)
  private Integer allowableBookings;

  public static final String SERIALIZED_NAME_ALLOWABLE_CAPACITY = "allowableCapacity";
  @SerializedName(SERIALIZED_NAME_ALLOWABLE_CAPACITY)
  private Integer allowableCapacity;

  public static final String SERIALIZED_NAME_AVAILABLE_BOOKINGS = "availableBookings";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BOOKINGS)
  private Integer availableBookings;

  public static final String SERIALIZED_NAME_AVAILABLE_CAPACITY = "availableCapacity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CAPACITY)
  private Integer availableCapacity;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DISPLAY_TIME = "displayTime";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TIME)
  private String displayTime;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_END_DATE_TIME = "endDateTime";
  @SerializedName(SERIALIZED_NAME_END_DATE_TIME)
  private String endDateTime;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "startDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private String startDateTime;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private Integer time;

  public static final String SERIALIZED_NAME_TRAVEL_APPOINTMENT_ID = "travelAppointmentId";
  @SerializedName(SERIALIZED_NAME_TRAVEL_APPOINTMENT_ID)
  private String travelAppointmentId;

  public static final String SERIALIZED_NAME_TRAVEL_TIME_MINS = "travelTimeMins";
  @SerializedName(SERIALIZED_NAME_TRAVEL_TIME_MINS)
  private Integer travelTimeMins;

  public AvailableTimeViewModel() {
  }

  public AvailableTimeViewModel allowableBookings(Integer allowableBookings) {
    this.allowableBookings = allowableBookings;
    return this;
  }

  /**
   * Get allowableBookings
   * @return allowableBookings
   */
  @javax.annotation.Nullable
  public Integer getAllowableBookings() {
    return allowableBookings;
  }

  public void setAllowableBookings(Integer allowableBookings) {
    this.allowableBookings = allowableBookings;
  }


  public AvailableTimeViewModel allowableCapacity(Integer allowableCapacity) {
    this.allowableCapacity = allowableCapacity;
    return this;
  }

  /**
   * Get allowableCapacity
   * @return allowableCapacity
   */
  @javax.annotation.Nullable
  public Integer getAllowableCapacity() {
    return allowableCapacity;
  }

  public void setAllowableCapacity(Integer allowableCapacity) {
    this.allowableCapacity = allowableCapacity;
  }


  public AvailableTimeViewModel availableBookings(Integer availableBookings) {
    this.availableBookings = availableBookings;
    return this;
  }

  /**
   * Get availableBookings
   * @return availableBookings
   */
  @javax.annotation.Nullable
  public Integer getAvailableBookings() {
    return availableBookings;
  }

  public void setAvailableBookings(Integer availableBookings) {
    this.availableBookings = availableBookings;
  }


  public AvailableTimeViewModel availableCapacity(Integer availableCapacity) {
    this.availableCapacity = availableCapacity;
    return this;
  }

  /**
   * Get availableCapacity
   * @return availableCapacity
   */
  @javax.annotation.Nullable
  public Integer getAvailableCapacity() {
    return availableCapacity;
  }

  public void setAvailableCapacity(Integer availableCapacity) {
    this.availableCapacity = availableCapacity;
  }


  public AvailableTimeViewModel date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public AvailableTimeViewModel displayTime(String displayTime) {
    this.displayTime = displayTime;
    return this;
  }

  /**
   * Get displayTime
   * @return displayTime
   */
  @javax.annotation.Nullable
  public String getDisplayTime() {
    return displayTime;
  }

  public void setDisplayTime(String displayTime) {
    this.displayTime = displayTime;
  }


  public AvailableTimeViewModel duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public AvailableTimeViewModel endDateTime(String endDateTime) {
    this.endDateTime = endDateTime;
    return this;
  }

  /**
   * Get endDateTime
   * @return endDateTime
   */
  @javax.annotation.Nullable
  public String getEndDateTime() {
    return endDateTime;
  }

  public void setEndDateTime(String endDateTime) {
    this.endDateTime = endDateTime;
  }


  public AvailableTimeViewModel resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public AvailableTimeViewModel startDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
    return this;
  }

  /**
   * Get startDateTime
   * @return startDateTime
   */
  @javax.annotation.Nullable
  public String getStartDateTime() {
    return startDateTime;
  }

  public void setStartDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
  }


  public AvailableTimeViewModel time(Integer time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public Integer getTime() {
    return time;
  }

  public void setTime(Integer time) {
    this.time = time;
  }


  public AvailableTimeViewModel travelAppointmentId(String travelAppointmentId) {
    this.travelAppointmentId = travelAppointmentId;
    return this;
  }

  /**
   * Get travelAppointmentId
   * @return travelAppointmentId
   */
  @javax.annotation.Nullable
  public String getTravelAppointmentId() {
    return travelAppointmentId;
  }

  public void setTravelAppointmentId(String travelAppointmentId) {
    this.travelAppointmentId = travelAppointmentId;
  }


  public AvailableTimeViewModel travelTimeMins(Integer travelTimeMins) {
    this.travelTimeMins = travelTimeMins;
    return this;
  }

  /**
   * Get travelTimeMins
   * @return travelTimeMins
   */
  @javax.annotation.Nullable
  public Integer getTravelTimeMins() {
    return travelTimeMins;
  }

  public void setTravelTimeMins(Integer travelTimeMins) {
    this.travelTimeMins = travelTimeMins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableTimeViewModel availableTimeViewModel = (AvailableTimeViewModel) o;
    return Objects.equals(this.allowableBookings, availableTimeViewModel.allowableBookings) &&
        Objects.equals(this.allowableCapacity, availableTimeViewModel.allowableCapacity) &&
        Objects.equals(this.availableBookings, availableTimeViewModel.availableBookings) &&
        Objects.equals(this.availableCapacity, availableTimeViewModel.availableCapacity) &&
        Objects.equals(this.date, availableTimeViewModel.date) &&
        Objects.equals(this.displayTime, availableTimeViewModel.displayTime) &&
        Objects.equals(this.duration, availableTimeViewModel.duration) &&
        Objects.equals(this.endDateTime, availableTimeViewModel.endDateTime) &&
        Objects.equals(this.resourceId, availableTimeViewModel.resourceId) &&
        Objects.equals(this.startDateTime, availableTimeViewModel.startDateTime) &&
        Objects.equals(this.time, availableTimeViewModel.time) &&
        Objects.equals(this.travelAppointmentId, availableTimeViewModel.travelAppointmentId) &&
        Objects.equals(this.travelTimeMins, availableTimeViewModel.travelTimeMins);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowableBookings, allowableCapacity, availableBookings, availableCapacity, date, displayTime, duration, endDateTime, resourceId, startDateTime, time, travelAppointmentId, travelTimeMins);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableTimeViewModel {\n");
    sb.append("    allowableBookings: ").append(toIndentedString(allowableBookings)).append("\n");
    sb.append("    allowableCapacity: ").append(toIndentedString(allowableCapacity)).append("\n");
    sb.append("    availableBookings: ").append(toIndentedString(availableBookings)).append("\n");
    sb.append("    availableCapacity: ").append(toIndentedString(availableCapacity)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    displayTime: ").append(toIndentedString(displayTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    endDateTime: ").append(toIndentedString(endDateTime)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    travelAppointmentId: ").append(toIndentedString(travelAppointmentId)).append("\n");
    sb.append("    travelTimeMins: ").append(toIndentedString(travelTimeMins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowableBookings");
    openapiFields.add("allowableCapacity");
    openapiFields.add("availableBookings");
    openapiFields.add("availableCapacity");
    openapiFields.add("date");
    openapiFields.add("displayTime");
    openapiFields.add("duration");
    openapiFields.add("endDateTime");
    openapiFields.add("resourceId");
    openapiFields.add("startDateTime");
    openapiFields.add("time");
    openapiFields.add("travelAppointmentId");
    openapiFields.add("travelTimeMins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailableTimeViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailableTimeViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailableTimeViewModel is not found in the empty JSON string", AvailableTimeViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailableTimeViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailableTimeViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("displayTime") != null && !jsonObj.get("displayTime").isJsonNull()) && !jsonObj.get("displayTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayTime").toString()));
      }
      if ((jsonObj.get("endDateTime") != null && !jsonObj.get("endDateTime").isJsonNull()) && !jsonObj.get("endDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDateTime").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if ((jsonObj.get("startDateTime") != null && !jsonObj.get("startDateTime").isJsonNull()) && !jsonObj.get("startDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDateTime").toString()));
      }
      if ((jsonObj.get("travelAppointmentId") != null && !jsonObj.get("travelAppointmentId").isJsonNull()) && !jsonObj.get("travelAppointmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `travelAppointmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("travelAppointmentId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailableTimeViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailableTimeViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailableTimeViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailableTimeViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailableTimeViewModel>() {
           @Override
           public void write(JsonWriter out, AvailableTimeViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailableTimeViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailableTimeViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailableTimeViewModel
   * @throws IOException if the JSON string is invalid with respect to AvailableTimeViewModel
   */
  public static AvailableTimeViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailableTimeViewModel.class);
  }

  /**
   * Convert an instance of AvailableTimeViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

