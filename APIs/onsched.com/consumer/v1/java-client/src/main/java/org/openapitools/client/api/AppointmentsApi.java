/*
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppointmentBookModel;
import org.openapitools.client.model.AppointmentInitialModel;
import org.openapitools.client.model.AppointmentInitialViewModel;
import org.openapitools.client.model.AppointmentListViewModel;
import org.openapitools.client.model.AppointmentRescheduleModel;
import org.openapitools.client.model.AppointmentReserveModel;
import org.openapitools.client.model.AppointmentViewModel;
import org.openapitools.client.model.BookingFieldListViewModel;
import org.openapitools.client.model.CustomFieldDefinitionListViewModel;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppointmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppointmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppointmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for consumerV1AppointmentsBookingfieldsGet
     * @param locationId id of business location (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsBookingfieldsGetCall(String locationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/appointments/bookingfields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1AppointmentsBookingfieldsGetValidateBeforeCall(String locationId, final ApiCallback _callback) throws ApiException {
        return consumerV1AppointmentsBookingfieldsGetCall(locationId, _callback);

    }

    /**
     * Get Custom Fields Labels
     * &lt;p&gt;Use this endpoint to return a locations &lt;b&gt;Appointment Booking Fields&lt;/b&gt;. Appointment booking fields are stored with each Appointment record. They are used when you need additional information collected during your booking process. It is tied to an appointment/visit and will be stored in the appointment record. Use the field name, type, and length to determine how to update these field values when posting an appointment.&lt;/p&gt;
     * @param locationId id of business location (optional)
     * @return BookingFieldListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BookingFieldListViewModel consumerV1AppointmentsBookingfieldsGet(String locationId) throws ApiException {
        ApiResponse<BookingFieldListViewModel> localVarResp = consumerV1AppointmentsBookingfieldsGetWithHttpInfo(locationId);
        return localVarResp.getData();
    }

    /**
     * Get Custom Fields Labels
     * &lt;p&gt;Use this endpoint to return a locations &lt;b&gt;Appointment Booking Fields&lt;/b&gt;. Appointment booking fields are stored with each Appointment record. They are used when you need additional information collected during your booking process. It is tied to an appointment/visit and will be stored in the appointment record. Use the field name, type, and length to determine how to update these field values when posting an appointment.&lt;/p&gt;
     * @param locationId id of business location (optional)
     * @return ApiResponse&lt;BookingFieldListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BookingFieldListViewModel> consumerV1AppointmentsBookingfieldsGetWithHttpInfo(String locationId) throws ApiException {
        okhttp3.Call localVarCall = consumerV1AppointmentsBookingfieldsGetValidateBeforeCall(locationId, null);
        Type localVarReturnType = new TypeToken<BookingFieldListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Custom Fields Labels (asynchronously)
     * &lt;p&gt;Use this endpoint to return a locations &lt;b&gt;Appointment Booking Fields&lt;/b&gt;. Appointment booking fields are stored with each Appointment record. They are used when you need additional information collected during your booking process. It is tied to an appointment/visit and will be stored in the appointment record. Use the field name, type, and length to determine how to update these field values when posting an appointment.&lt;/p&gt;
     * @param locationId id of business location (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsBookingfieldsGetAsync(String locationId, final ApiCallback<BookingFieldListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1AppointmentsBookingfieldsGetValidateBeforeCall(locationId, _callback);
        Type localVarReturnType = new TypeToken<BookingFieldListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1AppointmentsCustomfieldsGet
     * @param locationId id of business location (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsCustomfieldsGetCall(String locationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/appointments/customfields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1AppointmentsCustomfieldsGetValidateBeforeCall(String locationId, final ApiCallback _callback) throws ApiException {
        return consumerV1AppointmentsCustomfieldsGetCall(locationId, _callback);

    }

    /**
     * Get Custom Fields List
     * &lt;p&gt;Use this endpoint to return a locations &lt;b&gt;Appointment Custom Field&lt;/b&gt; definitions. Appointment custom fields are stored with each appointment. They are used when the information collected during the booking is specific to a particular appointment/visit. The response will list the custom fields used (customField1 - 10), the field type (string, number, date, boolean) and the length of each one.&lt;/p&gt;
     * @param locationId id of business location (optional)
     * @return CustomFieldDefinitionListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomFieldDefinitionListViewModel consumerV1AppointmentsCustomfieldsGet(String locationId) throws ApiException {
        ApiResponse<CustomFieldDefinitionListViewModel> localVarResp = consumerV1AppointmentsCustomfieldsGetWithHttpInfo(locationId);
        return localVarResp.getData();
    }

    /**
     * Get Custom Fields List
     * &lt;p&gt;Use this endpoint to return a locations &lt;b&gt;Appointment Custom Field&lt;/b&gt; definitions. Appointment custom fields are stored with each appointment. They are used when the information collected during the booking is specific to a particular appointment/visit. The response will list the custom fields used (customField1 - 10), the field type (string, number, date, boolean) and the length of each one.&lt;/p&gt;
     * @param locationId id of business location (optional)
     * @return ApiResponse&lt;CustomFieldDefinitionListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomFieldDefinitionListViewModel> consumerV1AppointmentsCustomfieldsGetWithHttpInfo(String locationId) throws ApiException {
        okhttp3.Call localVarCall = consumerV1AppointmentsCustomfieldsGetValidateBeforeCall(locationId, null);
        Type localVarReturnType = new TypeToken<CustomFieldDefinitionListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Custom Fields List (asynchronously)
     * &lt;p&gt;Use this endpoint to return a locations &lt;b&gt;Appointment Custom Field&lt;/b&gt; definitions. Appointment custom fields are stored with each appointment. They are used when the information collected during the booking is specific to a particular appointment/visit. The response will list the custom fields used (customField1 - 10), the field type (string, number, date, boolean) and the length of each one.&lt;/p&gt;
     * @param locationId id of business location (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsCustomfieldsGetAsync(String locationId, final ApiCallback<CustomFieldDefinitionListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1AppointmentsCustomfieldsGetValidateBeforeCall(locationId, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldDefinitionListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1AppointmentsGet
     * @param locationId id of business location (optional)
     * @param email Filter by email address (optional)
     * @param lastname Filter by lastname or part of it (optional)
     * @param phone Filter by phone number or part of it (optional)
     * @param serviceId Filter by service (optional)
     * @param calendarId Filter by calendar (optional)
     * @param resourceId Filter by resource (optional)
     * @param customerId Filter by customer (optional)
     * @param serviceAllocationId Filter by service allocation (optional)
     * @param startDate Format YYYY-MM-DD. Filter by on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter on/before endDate (optional)
     * @param status Filter by status: IN, BK, CN, RE, RS (optional)
     * @param bookedBy Filter by the email of who booked (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit, default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsGetCall(String locationId, String email, String lastname, String phone, String serviceId, String calendarId, String resourceId, String customerId, String serviceAllocationId, OffsetDateTime startDate, OffsetDateTime endDate, String status, String bookedBy, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/appointments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (lastname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastname", lastname));
        }

        if (phone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone", phone));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceId", serviceId));
        }

        if (calendarId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calendarId", calendarId));
        }

        if (resourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceId", resourceId));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (serviceAllocationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceAllocationId", serviceAllocationId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (bookedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookedBy", bookedBy));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1AppointmentsGetValidateBeforeCall(String locationId, String email, String lastname, String phone, String serviceId, String calendarId, String resourceId, String customerId, String serviceAllocationId, OffsetDateTime startDate, OffsetDateTime endDate, String status, String bookedBy, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return consumerV1AppointmentsGetCall(locationId, email, lastname, phone, serviceId, calendarId, resourceId, customerId, serviceAllocationId, startDate, endDate, status, bookedBy, offset, limit, _callback);

    }

    /**
     * Get Appointments
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Appointments&lt;/b&gt;. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param locationId id of business location (optional)
     * @param email Filter by email address (optional)
     * @param lastname Filter by lastname or part of it (optional)
     * @param phone Filter by phone number or part of it (optional)
     * @param serviceId Filter by service (optional)
     * @param calendarId Filter by calendar (optional)
     * @param resourceId Filter by resource (optional)
     * @param customerId Filter by customer (optional)
     * @param serviceAllocationId Filter by service allocation (optional)
     * @param startDate Format YYYY-MM-DD. Filter by on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter on/before endDate (optional)
     * @param status Filter by status: IN, BK, CN, RE, RS (optional)
     * @param bookedBy Filter by the email of who booked (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit, default 20, max 100 (optional)
     * @return AppointmentListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppointmentListViewModel consumerV1AppointmentsGet(String locationId, String email, String lastname, String phone, String serviceId, String calendarId, String resourceId, String customerId, String serviceAllocationId, OffsetDateTime startDate, OffsetDateTime endDate, String status, String bookedBy, Integer offset, Integer limit) throws ApiException {
        ApiResponse<AppointmentListViewModel> localVarResp = consumerV1AppointmentsGetWithHttpInfo(locationId, email, lastname, phone, serviceId, calendarId, resourceId, customerId, serviceAllocationId, startDate, endDate, status, bookedBy, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get Appointments
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Appointments&lt;/b&gt;. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param locationId id of business location (optional)
     * @param email Filter by email address (optional)
     * @param lastname Filter by lastname or part of it (optional)
     * @param phone Filter by phone number or part of it (optional)
     * @param serviceId Filter by service (optional)
     * @param calendarId Filter by calendar (optional)
     * @param resourceId Filter by resource (optional)
     * @param customerId Filter by customer (optional)
     * @param serviceAllocationId Filter by service allocation (optional)
     * @param startDate Format YYYY-MM-DD. Filter by on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter on/before endDate (optional)
     * @param status Filter by status: IN, BK, CN, RE, RS (optional)
     * @param bookedBy Filter by the email of who booked (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit, default 20, max 100 (optional)
     * @return ApiResponse&lt;AppointmentListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppointmentListViewModel> consumerV1AppointmentsGetWithHttpInfo(String locationId, String email, String lastname, String phone, String serviceId, String calendarId, String resourceId, String customerId, String serviceAllocationId, OffsetDateTime startDate, OffsetDateTime endDate, String status, String bookedBy, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = consumerV1AppointmentsGetValidateBeforeCall(locationId, email, lastname, phone, serviceId, calendarId, resourceId, customerId, serviceAllocationId, startDate, endDate, status, bookedBy, offset, limit, null);
        Type localVarReturnType = new TypeToken<AppointmentListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Appointments (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Appointments&lt;/b&gt;. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param locationId id of business location (optional)
     * @param email Filter by email address (optional)
     * @param lastname Filter by lastname or part of it (optional)
     * @param phone Filter by phone number or part of it (optional)
     * @param serviceId Filter by service (optional)
     * @param calendarId Filter by calendar (optional)
     * @param resourceId Filter by resource (optional)
     * @param customerId Filter by customer (optional)
     * @param serviceAllocationId Filter by service allocation (optional)
     * @param startDate Format YYYY-MM-DD. Filter by on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter on/before endDate (optional)
     * @param status Filter by status: IN, BK, CN, RE, RS (optional)
     * @param bookedBy Filter by the email of who booked (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit, default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsGetAsync(String locationId, String email, String lastname, String phone, String serviceId, String calendarId, String resourceId, String customerId, String serviceAllocationId, OffsetDateTime startDate, OffsetDateTime endDate, String status, String bookedBy, Integer offset, Integer limit, final ApiCallback<AppointmentListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1AppointmentsGetValidateBeforeCall(locationId, email, lastname, phone, serviceId, calendarId, resourceId, customerId, serviceAllocationId, startDate, endDate, status, bookedBy, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<AppointmentListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1AppointmentsIdBookPut
     * @param id appointment id to book (required)
     * @param appointmentBookModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdBookPutCall(String id, AppointmentBookModel appointmentBookModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appointmentBookModel;

        // create path and map variables
        String localVarPath = "/consumer/v1/appointments/{id}/book"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1AppointmentsIdBookPutValidateBeforeCall(String id, AppointmentBookModel appointmentBookModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1AppointmentsIdBookPut(Async)");
        }

        return consumerV1AppointmentsIdBookPutCall(id, appointmentBookModel, _callback);

    }

    /**
     * Book Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Book&lt;/b&gt; an appointment. Only appointments with an \&quot;IN\&quot; status, Initial, can be booked. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. Use the appointment id returned from the initial &lt;i&gt;POST /consumer/v1/appointments&lt;/i&gt; endpoint. Other pertinent fields can also be updated at the time of booking by including them in the post body. &lt;b&gt;Note: If no name or email address was provided in the initial Post Appointment, it will be required in the post body.&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to book (required)
     * @param appointmentBookModel  (optional)
     * @return AppointmentViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppointmentViewModel consumerV1AppointmentsIdBookPut(String id, AppointmentBookModel appointmentBookModel) throws ApiException {
        ApiResponse<AppointmentViewModel> localVarResp = consumerV1AppointmentsIdBookPutWithHttpInfo(id, appointmentBookModel);
        return localVarResp.getData();
    }

    /**
     * Book Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Book&lt;/b&gt; an appointment. Only appointments with an \&quot;IN\&quot; status, Initial, can be booked. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. Use the appointment id returned from the initial &lt;i&gt;POST /consumer/v1/appointments&lt;/i&gt; endpoint. Other pertinent fields can also be updated at the time of booking by including them in the post body. &lt;b&gt;Note: If no name or email address was provided in the initial Post Appointment, it will be required in the post body.&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to book (required)
     * @param appointmentBookModel  (optional)
     * @return ApiResponse&lt;AppointmentViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppointmentViewModel> consumerV1AppointmentsIdBookPutWithHttpInfo(String id, AppointmentBookModel appointmentBookModel) throws ApiException {
        okhttp3.Call localVarCall = consumerV1AppointmentsIdBookPutValidateBeforeCall(id, appointmentBookModel, null);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Book Appointment (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Book&lt;/b&gt; an appointment. Only appointments with an \&quot;IN\&quot; status, Initial, can be booked. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. Use the appointment id returned from the initial &lt;i&gt;POST /consumer/v1/appointments&lt;/i&gt; endpoint. Other pertinent fields can also be updated at the time of booking by including them in the post body. &lt;b&gt;Note: If no name or email address was provided in the initial Post Appointment, it will be required in the post body.&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to book (required)
     * @param appointmentBookModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdBookPutAsync(String id, AppointmentBookModel appointmentBookModel, final ApiCallback<AppointmentViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1AppointmentsIdBookPutValidateBeforeCall(id, appointmentBookModel, _callback);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1AppointmentsIdCancelPut
     * @param id appointment id to cancel (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdCancelPutCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/appointments/{id}/cancel"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1AppointmentsIdCancelPutValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1AppointmentsIdCancelPut(Async)");
        }

        return consumerV1AppointmentsIdCancelPutCall(id, _callback);

    }

    /**
     * Cancel Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Cancel&lt;/b&gt; an appointment booking or reservation. Only appointments with a \&quot;BK\&quot;, booked or \&quot;RS\&quot;, reserved status can be cancelled. Past dated appointments cannot be cancelled. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to cancel (required)
     * @return AppointmentViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppointmentViewModel consumerV1AppointmentsIdCancelPut(String id) throws ApiException {
        ApiResponse<AppointmentViewModel> localVarResp = consumerV1AppointmentsIdCancelPutWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Cancel Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Cancel&lt;/b&gt; an appointment booking or reservation. Only appointments with a \&quot;BK\&quot;, booked or \&quot;RS\&quot;, reserved status can be cancelled. Past dated appointments cannot be cancelled. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to cancel (required)
     * @return ApiResponse&lt;AppointmentViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppointmentViewModel> consumerV1AppointmentsIdCancelPutWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = consumerV1AppointmentsIdCancelPutValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel Appointment (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Cancel&lt;/b&gt; an appointment booking or reservation. Only appointments with a \&quot;BK\&quot;, booked or \&quot;RS\&quot;, reserved status can be cancelled. Past dated appointments cannot be cancelled. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to cancel (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdCancelPutAsync(String id, final ApiCallback<AppointmentViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1AppointmentsIdCancelPutValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1AppointmentsIdConfirmPut
     * @param id appointment id to confirm (required)
     * @param undo Use this parameter to undo the confirmed status (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdConfirmPutCall(Integer id, Boolean undo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/appointments/{id}/confirm"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (undo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("undo", undo));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1AppointmentsIdConfirmPutValidateBeforeCall(Integer id, Boolean undo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1AppointmentsIdConfirmPut(Async)");
        }

        return consumerV1AppointmentsIdConfirmPutCall(id, undo, _callback);

    }

    /**
     * Confirm Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Confirm&lt;/b&gt; an appointment. This updates the boolean confirmed field to TRUE. &lt;b&gt;NOTE:&lt;/b&gt; If the appointment status is set to \&quot;RS\&quot;, Reserved, it also updates the status of the appointment to \&quot;BK\&quot;, Booked. &lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to confirm (required)
     * @param undo Use this parameter to undo the confirmed status (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void consumerV1AppointmentsIdConfirmPut(Integer id, Boolean undo) throws ApiException {
        consumerV1AppointmentsIdConfirmPutWithHttpInfo(id, undo);
    }

    /**
     * Confirm Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Confirm&lt;/b&gt; an appointment. This updates the boolean confirmed field to TRUE. &lt;b&gt;NOTE:&lt;/b&gt; If the appointment status is set to \&quot;RS\&quot;, Reserved, it also updates the status of the appointment to \&quot;BK\&quot;, Booked. &lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to confirm (required)
     * @param undo Use this parameter to undo the confirmed status (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> consumerV1AppointmentsIdConfirmPutWithHttpInfo(Integer id, Boolean undo) throws ApiException {
        okhttp3.Call localVarCall = consumerV1AppointmentsIdConfirmPutValidateBeforeCall(id, undo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirm Appointment (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Confirm&lt;/b&gt; an appointment. This updates the boolean confirmed field to TRUE. &lt;b&gt;NOTE:&lt;/b&gt; If the appointment status is set to \&quot;RS\&quot;, Reserved, it also updates the status of the appointment to \&quot;BK\&quot;, Booked. &lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to confirm (required)
     * @param undo Use this parameter to undo the confirmed status (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdConfirmPutAsync(Integer id, Boolean undo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1AppointmentsIdConfirmPutValidateBeforeCall(id, undo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1AppointmentsIdDelete
     * @param id appointment id to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/appointments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1AppointmentsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1AppointmentsIdDelete(Async)");
        }

        return consumerV1AppointmentsIdDeleteCall(id, _callback);

    }

    /**
     * Delete Appointment
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; an appointment. Only appointments with a of \&quot;IN\&quot; status, initial, can be deleted. Past dated appointments cannot be deleted. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. Use the appointment id returned from the initial &lt;i&gt;POST /consumer/v1/appointments&lt;/i&gt; endpoint.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to delete (required)
     * @return AppointmentViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppointmentViewModel consumerV1AppointmentsIdDelete(String id) throws ApiException {
        ApiResponse<AppointmentViewModel> localVarResp = consumerV1AppointmentsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Appointment
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; an appointment. Only appointments with a of \&quot;IN\&quot; status, initial, can be deleted. Past dated appointments cannot be deleted. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. Use the appointment id returned from the initial &lt;i&gt;POST /consumer/v1/appointments&lt;/i&gt; endpoint.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to delete (required)
     * @return ApiResponse&lt;AppointmentViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppointmentViewModel> consumerV1AppointmentsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = consumerV1AppointmentsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Appointment (asynchronously)
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; an appointment. Only appointments with a of \&quot;IN\&quot; status, initial, can be deleted. Past dated appointments cannot be deleted. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. Use the appointment id returned from the initial &lt;i&gt;POST /consumer/v1/appointments&lt;/i&gt; endpoint.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdDeleteAsync(String id, final ApiCallback<AppointmentViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1AppointmentsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1AppointmentsIdGet
     * @param id id of appointment requested (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/appointments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1AppointmentsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1AppointmentsIdGet(Async)");
        }

        return consumerV1AppointmentsIdGetCall(id, _callback);

    }

    /**
     * Get Appointment
     * &lt;p&gt;Use this endpoint to return an &lt;b&gt;Appointment&lt;/b&gt; object. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param id id of appointment requested (required)
     * @return AppointmentViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppointmentViewModel consumerV1AppointmentsIdGet(String id) throws ApiException {
        ApiResponse<AppointmentViewModel> localVarResp = consumerV1AppointmentsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Appointment
     * &lt;p&gt;Use this endpoint to return an &lt;b&gt;Appointment&lt;/b&gt; object. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param id id of appointment requested (required)
     * @return ApiResponse&lt;AppointmentViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppointmentViewModel> consumerV1AppointmentsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = consumerV1AppointmentsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Appointment (asynchronously)
     * &lt;p&gt;Use this endpoint to return an &lt;b&gt;Appointment&lt;/b&gt; object. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param id id of appointment requested (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdGetAsync(String id, final ApiCallback<AppointmentViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1AppointmentsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1AppointmentsIdNoshowPut
     * @param id appointment id to mark as NoShow (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdNoshowPutCall(Integer id, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/consumer/v1/appointments/{id}/noshow"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1AppointmentsIdNoshowPutValidateBeforeCall(Integer id, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1AppointmentsIdNoshowPut(Async)");
        }

        return consumerV1AppointmentsIdNoshowPutCall(id, body, _callback);

    }

    /**
     * Set NoShow Status
     * &lt;p&gt;Use this endpoint to change the status of an appointment from \&quot;BK\&quot;, Booked to &lt;b&gt;\&quot;NS\&quot;, NoShow&lt;/b&gt;. This gives API consumers a way to internally track No Show appointments. It provides no added functionality in OnSched.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to mark as NoShow (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void consumerV1AppointmentsIdNoshowPut(Integer id, Object body) throws ApiException {
        consumerV1AppointmentsIdNoshowPutWithHttpInfo(id, body);
    }

    /**
     * Set NoShow Status
     * &lt;p&gt;Use this endpoint to change the status of an appointment from \&quot;BK\&quot;, Booked to &lt;b&gt;\&quot;NS\&quot;, NoShow&lt;/b&gt;. This gives API consumers a way to internally track No Show appointments. It provides no added functionality in OnSched.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to mark as NoShow (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> consumerV1AppointmentsIdNoshowPutWithHttpInfo(Integer id, Object body) throws ApiException {
        okhttp3.Call localVarCall = consumerV1AppointmentsIdNoshowPutValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set NoShow Status (asynchronously)
     * &lt;p&gt;Use this endpoint to change the status of an appointment from \&quot;BK\&quot;, Booked to &lt;b&gt;\&quot;NS\&quot;, NoShow&lt;/b&gt;. This gives API consumers a way to internally track No Show appointments. It provides no added functionality in OnSched.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to mark as NoShow (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdNoshowPutAsync(Integer id, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1AppointmentsIdNoshowPutValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1AppointmentsIdReschedulePut
     * @param id appointment id to reschedule (required)
     * @param appointmentRescheduleModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdReschedulePutCall(String id, AppointmentRescheduleModel appointmentRescheduleModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appointmentRescheduleModel;

        // create path and map variables
        String localVarPath = "/consumer/v1/appointments/{id}/reschedule"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1AppointmentsIdReschedulePutValidateBeforeCall(String id, AppointmentRescheduleModel appointmentRescheduleModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1AppointmentsIdReschedulePut(Async)");
        }

        return consumerV1AppointmentsIdReschedulePutCall(id, appointmentRescheduleModel, _callback);

    }

    /**
     * Reschedule Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reschedule&lt;/b&gt; an appointment booking. Only appointments in \&quot;BK\&quot;, booked status, can be Rescheduled. Past dated appointments cannot be rescheduled. A valid &lt;b&gt;appointment id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;StartDateTime&lt;/b&gt; and &lt;b&gt;EndDateTime&lt;/b&gt; are required. Use the ISO 8601 format for DateTime Timezone, e.g., &lt;b&gt;2016-10-30T09:00:00-5:00&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;The serviceId is optional. If changing the &lt;b&gt;serviceId&lt;/b&gt;, the new service id&#39;s duration must match the original service&#39;s duration.&lt;/p&gt;  &lt;p&gt;The resourceId is optional. If changing the &lt;b&gt;resourceId&lt;/b&gt;, verify the availability of the new resource prior to rescheduling.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT:&lt;/b&gt; Always run availability before rescheduling an appointment to verify the timeslot is open and available for the new time, service and/or resource requested. This is the only way to assure the slot is available. You cannot reschedule an appointment to a different location. If necessary, you should cancel and then book an appointment in the other location.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to reschedule (required)
     * @param appointmentRescheduleModel  (optional)
     * @return AppointmentViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppointmentViewModel consumerV1AppointmentsIdReschedulePut(String id, AppointmentRescheduleModel appointmentRescheduleModel) throws ApiException {
        ApiResponse<AppointmentViewModel> localVarResp = consumerV1AppointmentsIdReschedulePutWithHttpInfo(id, appointmentRescheduleModel);
        return localVarResp.getData();
    }

    /**
     * Reschedule Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reschedule&lt;/b&gt; an appointment booking. Only appointments in \&quot;BK\&quot;, booked status, can be Rescheduled. Past dated appointments cannot be rescheduled. A valid &lt;b&gt;appointment id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;StartDateTime&lt;/b&gt; and &lt;b&gt;EndDateTime&lt;/b&gt; are required. Use the ISO 8601 format for DateTime Timezone, e.g., &lt;b&gt;2016-10-30T09:00:00-5:00&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;The serviceId is optional. If changing the &lt;b&gt;serviceId&lt;/b&gt;, the new service id&#39;s duration must match the original service&#39;s duration.&lt;/p&gt;  &lt;p&gt;The resourceId is optional. If changing the &lt;b&gt;resourceId&lt;/b&gt;, verify the availability of the new resource prior to rescheduling.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT:&lt;/b&gt; Always run availability before rescheduling an appointment to verify the timeslot is open and available for the new time, service and/or resource requested. This is the only way to assure the slot is available. You cannot reschedule an appointment to a different location. If necessary, you should cancel and then book an appointment in the other location.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to reschedule (required)
     * @param appointmentRescheduleModel  (optional)
     * @return ApiResponse&lt;AppointmentViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppointmentViewModel> consumerV1AppointmentsIdReschedulePutWithHttpInfo(String id, AppointmentRescheduleModel appointmentRescheduleModel) throws ApiException {
        okhttp3.Call localVarCall = consumerV1AppointmentsIdReschedulePutValidateBeforeCall(id, appointmentRescheduleModel, null);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reschedule Appointment (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reschedule&lt;/b&gt; an appointment booking. Only appointments in \&quot;BK\&quot;, booked status, can be Rescheduled. Past dated appointments cannot be rescheduled. A valid &lt;b&gt;appointment id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;StartDateTime&lt;/b&gt; and &lt;b&gt;EndDateTime&lt;/b&gt; are required. Use the ISO 8601 format for DateTime Timezone, e.g., &lt;b&gt;2016-10-30T09:00:00-5:00&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;The serviceId is optional. If changing the &lt;b&gt;serviceId&lt;/b&gt;, the new service id&#39;s duration must match the original service&#39;s duration.&lt;/p&gt;  &lt;p&gt;The resourceId is optional. If changing the &lt;b&gt;resourceId&lt;/b&gt;, verify the availability of the new resource prior to rescheduling.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT:&lt;/b&gt; Always run availability before rescheduling an appointment to verify the timeslot is open and available for the new time, service and/or resource requested. This is the only way to assure the slot is available. You cannot reschedule an appointment to a different location. If necessary, you should cancel and then book an appointment in the other location.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointment Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to reschedule (required)
     * @param appointmentRescheduleModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdReschedulePutAsync(String id, AppointmentRescheduleModel appointmentRescheduleModel, final ApiCallback<AppointmentViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1AppointmentsIdReschedulePutValidateBeforeCall(id, appointmentRescheduleModel, _callback);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1AppointmentsIdReservePut
     * @param id appointment id to reserve (required)
     * @param sendNotifications  (optional)
     * @param appointmentReserveModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdReservePutCall(String id, Boolean sendNotifications, AppointmentReserveModel appointmentReserveModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appointmentReserveModel;

        // create path and map variables
        String localVarPath = "/consumer/v1/appointments/{id}/reserve"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendNotifications", sendNotifications));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1AppointmentsIdReservePutValidateBeforeCall(String id, Boolean sendNotifications, AppointmentReserveModel appointmentReserveModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1AppointmentsIdReservePut(Async)");
        }

        return consumerV1AppointmentsIdReservePutCall(id, sendNotifications, appointmentReserveModel, _callback);

    }

    /**
     * Reserve Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reserve&lt;/b&gt; an appointment. Only appointments with an \&quot;IN\&quot; status, Initial, can be reserved. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. Use the appointment id returned from the initial &lt;i&gt;POST /consumer/v1/appointments&lt;/i&gt; endpoint.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;NOTE: Reservations are different from Bookings as reservations are a two-step booking process that must be managed by the API consumer.&lt;/b&gt; An appointment that is reserved is not completely booked until other business conditions have been met. For example, an appointment may be reserved if it is not yet assigned to a resource or until the customer or resource explicitly confirms it.&lt;/p&gt;  &lt;p&gt;With reservations you have the ability to notify the customer of a reservation prior to officially booking and the workflow can be designed to indicate what conditions will need to be met in order to convert the reservation to a complete booking. A reservation converts to a complete booking when it is either Confirmed or Booked. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT: A reserved appointment time will not be released, i.e., become available to others, until it is Cancelled. The booking timer is not used with reserved appointments.&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to reserve (required)
     * @param sendNotifications  (optional)
     * @param appointmentReserveModel  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void consumerV1AppointmentsIdReservePut(String id, Boolean sendNotifications, AppointmentReserveModel appointmentReserveModel) throws ApiException {
        consumerV1AppointmentsIdReservePutWithHttpInfo(id, sendNotifications, appointmentReserveModel);
    }

    /**
     * Reserve Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reserve&lt;/b&gt; an appointment. Only appointments with an \&quot;IN\&quot; status, Initial, can be reserved. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. Use the appointment id returned from the initial &lt;i&gt;POST /consumer/v1/appointments&lt;/i&gt; endpoint.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;NOTE: Reservations are different from Bookings as reservations are a two-step booking process that must be managed by the API consumer.&lt;/b&gt; An appointment that is reserved is not completely booked until other business conditions have been met. For example, an appointment may be reserved if it is not yet assigned to a resource or until the customer or resource explicitly confirms it.&lt;/p&gt;  &lt;p&gt;With reservations you have the ability to notify the customer of a reservation prior to officially booking and the workflow can be designed to indicate what conditions will need to be met in order to convert the reservation to a complete booking. A reservation converts to a complete booking when it is either Confirmed or Booked. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT: A reserved appointment time will not be released, i.e., become available to others, until it is Cancelled. The booking timer is not used with reserved appointments.&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to reserve (required)
     * @param sendNotifications  (optional)
     * @param appointmentReserveModel  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> consumerV1AppointmentsIdReservePutWithHttpInfo(String id, Boolean sendNotifications, AppointmentReserveModel appointmentReserveModel) throws ApiException {
        okhttp3.Call localVarCall = consumerV1AppointmentsIdReservePutValidateBeforeCall(id, sendNotifications, appointmentReserveModel, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reserve Appointment (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reserve&lt;/b&gt; an appointment. Only appointments with an \&quot;IN\&quot; status, Initial, can be reserved. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. Use the appointment id returned from the initial &lt;i&gt;POST /consumer/v1/appointments&lt;/i&gt; endpoint.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;NOTE: Reservations are different from Bookings as reservations are a two-step booking process that must be managed by the API consumer.&lt;/b&gt; An appointment that is reserved is not completely booked until other business conditions have been met. For example, an appointment may be reserved if it is not yet assigned to a resource or until the customer or resource explicitly confirms it.&lt;/p&gt;  &lt;p&gt;With reservations you have the ability to notify the customer of a reservation prior to officially booking and the workflow can be designed to indicate what conditions will need to be met in order to convert the reservation to a complete booking. A reservation converts to a complete booking when it is either Confirmed or Booked. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT: A reserved appointment time will not be released, i.e., become available to others, until it is Cancelled. The booking timer is not used with reserved appointments.&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param id appointment id to reserve (required)
     * @param sendNotifications  (optional)
     * @param appointmentReserveModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsIdReservePutAsync(String id, Boolean sendNotifications, AppointmentReserveModel appointmentReserveModel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1AppointmentsIdReservePutValidateBeforeCall(id, sendNotifications, appointmentReserveModel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1AppointmentsPost
     * @param completeBooking Options are \&quot;BK\&quot;, \&quot;RS\&quot; or \&quot;IN\&quot; (optional)
     * @param appointmentInitialModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsPostCall(String completeBooking, AppointmentInitialModel appointmentInitialModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appointmentInitialModel;

        // create path and map variables
        String localVarPath = "/consumer/v1/appointments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (completeBooking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completeBooking", completeBooking));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1AppointmentsPostValidateBeforeCall(String completeBooking, AppointmentInitialModel appointmentInitialModel, final ApiCallback _callback) throws ApiException {
        return consumerV1AppointmentsPostCall(completeBooking, appointmentInitialModel, _callback);

    }

    /**
     * Create Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new appointment. The appointment will be created with an \&quot;IN\&quot;, Initial status. Posting an appointment with \&quot;IN\&quot; status requires minimal information and requires a \&quot;PUT book\&quot; call to complete the booking transaction, &lt;i&gt;PUT ​/consumer​/v1​/appointments​/{id}​/book&lt;/i&gt;. Alternatively, you can post an appointment using the &lt;b&gt;completeBooking&lt;/b&gt; option which completes the booking in one transaction, but it will require more data. The method you choose depends on your solutions workflow. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;StartDateTime&lt;/b&gt; and &lt;b&gt;EndDateTime&lt;/b&gt; are required. Use the ISO 8601 format for DateTime Timezone, e.g., &lt;b&gt;2016-10-30T09:00:00-5:00&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;A valid &lt;b&gt;serviceId&lt;/b&gt; is required. The serviceId provided must be valid for the location being booked. A valid serviceId is one that is scoped to a Primary Company Location or is associated with a Business Location&lt;/p&gt;  &lt;p&gt;OPTIONAL FIELDS INCLUDE: &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;locationId&lt;/b&gt; - if not supplied, the appointment will be posted to the primary business location. If you support multiple location, we recommend always supplying the locationId. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;resourceId&lt;/b&gt; - not required when posting with an \&quot;IN\&quot; status but is required when the appointment is booked. Use &lt;i&gt;GET /consumer/v1/resources&lt;/i&gt; for a list of resources. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;customerId&lt;/b&gt; - if supplied the name and email will be retrieved from the customer record. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;BookedBy&lt;/b&gt; - if not supplied the email address of the booked appointment is used or the ip address if no email address is provided. BookedBy is used in the Appointment Audit trail which can be viewed in the appointment object.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Location&lt;/b&gt; - is a string value representing the location of the appointment. It provides no added functionality in OnSched and should not be confused with locationId.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;TimezoneName&lt;/b&gt; - if used timezoneName must be in IANA format, &lt;i&gt;America/New_York&lt;/i&gt;. This is the timezone the appointment was booked in. Populating this information can help later in situations where appointments are booked before a Daylight Savings change. If no timezoneName is supplied, the Business Locations timezone will be used.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;COMPLETE BOOKING:&lt;/b&gt; This parameter provides a mechanism for immediate booking with the POST appointment endpoint. To complete the booking in one transaction, populate the &lt;b&gt;completeBooking&lt;/b&gt; parameter with a \&quot;BK\&quot;, booked or an \&quot;RS\&quot;, reserved status and provide an (&lt;b&gt;email&lt;/b&gt; and &lt;b&gt;name&lt;/b&gt;) or a &lt;b&gt;customerId&lt;/b&gt; in the post body. Doing so will book the appointment and send notifications all in one transaction. &lt;b&gt;Note:&lt;/b&gt; \&quot;IN\&quot; can also be used as a completeBooking option to support payment flows. With the \&quot;IN\&quot; option, notifications are NOT sent.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param completeBooking Options are \&quot;BK\&quot;, \&quot;RS\&quot; or \&quot;IN\&quot; (optional)
     * @param appointmentInitialModel  (optional)
     * @return AppointmentInitialViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppointmentInitialViewModel consumerV1AppointmentsPost(String completeBooking, AppointmentInitialModel appointmentInitialModel) throws ApiException {
        ApiResponse<AppointmentInitialViewModel> localVarResp = consumerV1AppointmentsPostWithHttpInfo(completeBooking, appointmentInitialModel);
        return localVarResp.getData();
    }

    /**
     * Create Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new appointment. The appointment will be created with an \&quot;IN\&quot;, Initial status. Posting an appointment with \&quot;IN\&quot; status requires minimal information and requires a \&quot;PUT book\&quot; call to complete the booking transaction, &lt;i&gt;PUT ​/consumer​/v1​/appointments​/{id}​/book&lt;/i&gt;. Alternatively, you can post an appointment using the &lt;b&gt;completeBooking&lt;/b&gt; option which completes the booking in one transaction, but it will require more data. The method you choose depends on your solutions workflow. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;StartDateTime&lt;/b&gt; and &lt;b&gt;EndDateTime&lt;/b&gt; are required. Use the ISO 8601 format for DateTime Timezone, e.g., &lt;b&gt;2016-10-30T09:00:00-5:00&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;A valid &lt;b&gt;serviceId&lt;/b&gt; is required. The serviceId provided must be valid for the location being booked. A valid serviceId is one that is scoped to a Primary Company Location or is associated with a Business Location&lt;/p&gt;  &lt;p&gt;OPTIONAL FIELDS INCLUDE: &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;locationId&lt;/b&gt; - if not supplied, the appointment will be posted to the primary business location. If you support multiple location, we recommend always supplying the locationId. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;resourceId&lt;/b&gt; - not required when posting with an \&quot;IN\&quot; status but is required when the appointment is booked. Use &lt;i&gt;GET /consumer/v1/resources&lt;/i&gt; for a list of resources. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;customerId&lt;/b&gt; - if supplied the name and email will be retrieved from the customer record. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;BookedBy&lt;/b&gt; - if not supplied the email address of the booked appointment is used or the ip address if no email address is provided. BookedBy is used in the Appointment Audit trail which can be viewed in the appointment object.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Location&lt;/b&gt; - is a string value representing the location of the appointment. It provides no added functionality in OnSched and should not be confused with locationId.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;TimezoneName&lt;/b&gt; - if used timezoneName must be in IANA format, &lt;i&gt;America/New_York&lt;/i&gt;. This is the timezone the appointment was booked in. Populating this information can help later in situations where appointments are booked before a Daylight Savings change. If no timezoneName is supplied, the Business Locations timezone will be used.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;COMPLETE BOOKING:&lt;/b&gt; This parameter provides a mechanism for immediate booking with the POST appointment endpoint. To complete the booking in one transaction, populate the &lt;b&gt;completeBooking&lt;/b&gt; parameter with a \&quot;BK\&quot;, booked or an \&quot;RS\&quot;, reserved status and provide an (&lt;b&gt;email&lt;/b&gt; and &lt;b&gt;name&lt;/b&gt;) or a &lt;b&gt;customerId&lt;/b&gt; in the post body. Doing so will book the appointment and send notifications all in one transaction. &lt;b&gt;Note:&lt;/b&gt; \&quot;IN\&quot; can also be used as a completeBooking option to support payment flows. With the \&quot;IN\&quot; option, notifications are NOT sent.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param completeBooking Options are \&quot;BK\&quot;, \&quot;RS\&quot; or \&quot;IN\&quot; (optional)
     * @param appointmentInitialModel  (optional)
     * @return ApiResponse&lt;AppointmentInitialViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppointmentInitialViewModel> consumerV1AppointmentsPostWithHttpInfo(String completeBooking, AppointmentInitialModel appointmentInitialModel) throws ApiException {
        okhttp3.Call localVarCall = consumerV1AppointmentsPostValidateBeforeCall(completeBooking, appointmentInitialModel, null);
        Type localVarReturnType = new TypeToken<AppointmentInitialViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Appointment (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new appointment. The appointment will be created with an \&quot;IN\&quot;, Initial status. Posting an appointment with \&quot;IN\&quot; status requires minimal information and requires a \&quot;PUT book\&quot; call to complete the booking transaction, &lt;i&gt;PUT ​/consumer​/v1​/appointments​/{id}​/book&lt;/i&gt;. Alternatively, you can post an appointment using the &lt;b&gt;completeBooking&lt;/b&gt; option which completes the booking in one transaction, but it will require more data. The method you choose depends on your solutions workflow. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;StartDateTime&lt;/b&gt; and &lt;b&gt;EndDateTime&lt;/b&gt; are required. Use the ISO 8601 format for DateTime Timezone, e.g., &lt;b&gt;2016-10-30T09:00:00-5:00&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;A valid &lt;b&gt;serviceId&lt;/b&gt; is required. The serviceId provided must be valid for the location being booked. A valid serviceId is one that is scoped to a Primary Company Location or is associated with a Business Location&lt;/p&gt;  &lt;p&gt;OPTIONAL FIELDS INCLUDE: &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;locationId&lt;/b&gt; - if not supplied, the appointment will be posted to the primary business location. If you support multiple location, we recommend always supplying the locationId. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;resourceId&lt;/b&gt; - not required when posting with an \&quot;IN\&quot; status but is required when the appointment is booked. Use &lt;i&gt;GET /consumer/v1/resources&lt;/i&gt; for a list of resources. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;customerId&lt;/b&gt; - if supplied the name and email will be retrieved from the customer record. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;BookedBy&lt;/b&gt; - if not supplied the email address of the booked appointment is used or the ip address if no email address is provided. BookedBy is used in the Appointment Audit trail which can be viewed in the appointment object.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Location&lt;/b&gt; - is a string value representing the location of the appointment. It provides no added functionality in OnSched and should not be confused with locationId.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;TimezoneName&lt;/b&gt; - if used timezoneName must be in IANA format, &lt;i&gt;America/New_York&lt;/i&gt;. This is the timezone the appointment was booked in. Populating this information can help later in situations where appointments are booked before a Daylight Savings change. If no timezoneName is supplied, the Business Locations timezone will be used.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;COMPLETE BOOKING:&lt;/b&gt; This parameter provides a mechanism for immediate booking with the POST appointment endpoint. To complete the booking in one transaction, populate the &lt;b&gt;completeBooking&lt;/b&gt; parameter with a \&quot;BK\&quot;, booked or an \&quot;RS\&quot;, reserved status and provide an (&lt;b&gt;email&lt;/b&gt; and &lt;b&gt;name&lt;/b&gt;) or a &lt;b&gt;customerId&lt;/b&gt; in the post body. Doing so will book the appointment and send notifications all in one transaction. &lt;b&gt;Note:&lt;/b&gt; \&quot;IN\&quot; can also be used as a completeBooking option to support payment flows. With the \&quot;IN\&quot; option, notifications are NOT sent.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param completeBooking Options are \&quot;BK\&quot;, \&quot;RS\&quot; or \&quot;IN\&quot; (optional)
     * @param appointmentInitialModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1AppointmentsPostAsync(String completeBooking, AppointmentInitialModel appointmentInitialModel, final ApiCallback<AppointmentInitialViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1AppointmentsPostValidateBeforeCall(completeBooking, appointmentInitialModel, _callback);
        Type localVarReturnType = new TypeToken<AppointmentInitialViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
