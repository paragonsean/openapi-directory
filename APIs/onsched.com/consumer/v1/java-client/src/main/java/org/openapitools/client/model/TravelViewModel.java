/*
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TravelViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:57.922898-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TravelViewModel {
  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private String distance;

  public static final String SERIALIZED_NAME_PROXIMITY = "proximity";
  @SerializedName(SERIALIZED_NAME_PROXIMITY)
  private String proximity;

  public static final String SERIALIZED_NAME_START_ADDRESS = "startAddress";
  @SerializedName(SERIALIZED_NAME_START_ADDRESS)
  private String startAddress;

  public static final String SERIALIZED_NAME_START_LAT = "startLat";
  @SerializedName(SERIALIZED_NAME_START_LAT)
  private String startLat;

  public static final String SERIALIZED_NAME_START_LON = "startLon";
  @SerializedName(SERIALIZED_NAME_START_LON)
  private String startLon;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public TravelViewModel() {
  }

  public TravelViewModel distance(String distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public String getDistance() {
    return distance;
  }

  public void setDistance(String distance) {
    this.distance = distance;
  }


  public TravelViewModel proximity(String proximity) {
    this.proximity = proximity;
    return this;
  }

  /**
   * Get proximity
   * @return proximity
   */
  @javax.annotation.Nullable
  public String getProximity() {
    return proximity;
  }

  public void setProximity(String proximity) {
    this.proximity = proximity;
  }


  public TravelViewModel startAddress(String startAddress) {
    this.startAddress = startAddress;
    return this;
  }

  /**
   * Get startAddress
   * @return startAddress
   */
  @javax.annotation.Nullable
  public String getStartAddress() {
    return startAddress;
  }

  public void setStartAddress(String startAddress) {
    this.startAddress = startAddress;
  }


  public TravelViewModel startLat(String startLat) {
    this.startLat = startLat;
    return this;
  }

  /**
   * Get startLat
   * @return startLat
   */
  @javax.annotation.Nullable
  public String getStartLat() {
    return startLat;
  }

  public void setStartLat(String startLat) {
    this.startLat = startLat;
  }


  public TravelViewModel startLon(String startLon) {
    this.startLon = startLon;
    return this;
  }

  /**
   * Get startLon
   * @return startLon
   */
  @javax.annotation.Nullable
  public String getStartLon() {
    return startLon;
  }

  public void setStartLon(String startLon) {
    this.startLon = startLon;
  }


  public TravelViewModel units(String units) {
    this.units = units;
    return this;
  }

  /**
   * Get units
   * @return units
   */
  @javax.annotation.Nullable
  public String getUnits() {
    return units;
  }

  public void setUnits(String units) {
    this.units = units;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TravelViewModel travelViewModel = (TravelViewModel) o;
    return Objects.equals(this.distance, travelViewModel.distance) &&
        Objects.equals(this.proximity, travelViewModel.proximity) &&
        Objects.equals(this.startAddress, travelViewModel.startAddress) &&
        Objects.equals(this.startLat, travelViewModel.startLat) &&
        Objects.equals(this.startLon, travelViewModel.startLon) &&
        Objects.equals(this.units, travelViewModel.units);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(distance, proximity, startAddress, startLat, startLon, units);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TravelViewModel {\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    proximity: ").append(toIndentedString(proximity)).append("\n");
    sb.append("    startAddress: ").append(toIndentedString(startAddress)).append("\n");
    sb.append("    startLat: ").append(toIndentedString(startLat)).append("\n");
    sb.append("    startLon: ").append(toIndentedString(startLon)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distance");
    openapiFields.add("proximity");
    openapiFields.add("startAddress");
    openapiFields.add("startLat");
    openapiFields.add("startLon");
    openapiFields.add("units");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TravelViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TravelViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TravelViewModel is not found in the empty JSON string", TravelViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TravelViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TravelViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("distance") != null && !jsonObj.get("distance").isJsonNull()) && !jsonObj.get("distance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distance").toString()));
      }
      if ((jsonObj.get("proximity") != null && !jsonObj.get("proximity").isJsonNull()) && !jsonObj.get("proximity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proximity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proximity").toString()));
      }
      if ((jsonObj.get("startAddress") != null && !jsonObj.get("startAddress").isJsonNull()) && !jsonObj.get("startAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startAddress").toString()));
      }
      if ((jsonObj.get("startLat") != null && !jsonObj.get("startLat").isJsonNull()) && !jsonObj.get("startLat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startLat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startLat").toString()));
      }
      if ((jsonObj.get("startLon") != null && !jsonObj.get("startLon").isJsonNull()) && !jsonObj.get("startLon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startLon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startLon").toString()));
      }
      if ((jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) && !jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TravelViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TravelViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TravelViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TravelViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<TravelViewModel>() {
           @Override
           public void write(JsonWriter out, TravelViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TravelViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TravelViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TravelViewModel
   * @throws IOException if the JSON string is invalid with respect to TravelViewModel
   */
  public static TravelViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TravelViewModel.class);
  }

  /**
   * Convert an instance of TravelViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

