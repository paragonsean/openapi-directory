/*
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.ResourceListViewModel;
import org.openapitools.client.model.ServiceAllocationListViewModel;
import org.openapitools.client.model.ServiceAllocationViewModel;
import org.openapitools.client.model.ServiceListViewModel;
import org.openapitools.client.model.ServiceSortOrder;
import org.openapitools.client.model.ServiceViewModel;
import org.openapitools.client.model.ServicesScope;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for consumerV1ServicesAllocationsIdGet
     * @param id id of serviceAllocation object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ServicesAllocationsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/services/allocations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1ServicesAllocationsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1ServicesAllocationsIdGet(Async)");
        }

        return consumerV1ServicesAllocationsIdGetCall(id, _callback);

    }

    /**
     * Get Service Allocation
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Service Allocation&lt;/b&gt; object. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required. Find service allocation id&#39;s by using the &lt;i&gt;GET/consumer​/v1​/services​/{id}​/allocations&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of serviceAllocation object (required)
     * @return ServiceAllocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAllocationViewModel consumerV1ServicesAllocationsIdGet(String id) throws ApiException {
        ApiResponse<ServiceAllocationViewModel> localVarResp = consumerV1ServicesAllocationsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Service Allocation
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Service Allocation&lt;/b&gt; object. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required. Find service allocation id&#39;s by using the &lt;i&gt;GET/consumer​/v1​/services​/{id}​/allocations&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of serviceAllocation object (required)
     * @return ApiResponse&lt;ServiceAllocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAllocationViewModel> consumerV1ServicesAllocationsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = consumerV1ServicesAllocationsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceAllocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Service Allocation (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Service Allocation&lt;/b&gt; object. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required. Find service allocation id&#39;s by using the &lt;i&gt;GET/consumer​/v1​/services​/{id}​/allocations&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of serviceAllocation object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ServicesAllocationsIdGetAsync(String id, final ApiCallback<ServiceAllocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1ServicesAllocationsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceAllocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1ServicesGet
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param serviceGroupId Filter by groupId (optional)
     * @param defaultService Filter by default service, default is false (optional)
     * @param allLocations Search All Locations, default is false (optional)
     * @param scope Filter by scope, Company, Location or All, default is All (optional)
     * @param name Filter by Name, supports Partial name search (optional)
     * @param serviceId Filter by ServiceId, using this parameter would ignore all other parameters (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param sortOrder Sort results using Natural Sort or Sorted alphabetically by Service Names, default is natural (optional)
     * @param sortDescending Sort results in Descending Order, default true (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ServicesGetCall(String locationId, Integer serviceGroupId, Boolean defaultService, Boolean allLocations, ServicesScope scope, String name, String serviceId, Integer offset, Integer limit, ServiceSortOrder sortOrder, Boolean sortDescending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (serviceGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceGroupId", serviceGroupId));
        }

        if (defaultService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultService", defaultService));
        }

        if (allLocations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allLocations", allLocations));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceId", serviceId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (sortDescending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDescending", sortDescending));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1ServicesGetValidateBeforeCall(String locationId, Integer serviceGroupId, Boolean defaultService, Boolean allLocations, ServicesScope scope, String name, String serviceId, Integer offset, Integer limit, ServiceSortOrder sortOrder, Boolean sortDescending, final ApiCallback _callback) throws ApiException {
        return consumerV1ServicesGetCall(locationId, serviceGroupId, defaultService, allLocations, scope, name, serviceId, offset, limit, sortOrder, sortDescending, _callback);

    }

    /**
     * List Services
     * &lt;p&gt;Use this endpoint to &lt;b&gt;List Services&lt;/b&gt; available at your business location and/or company. If not specified, the business location defaults to the primary business location. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param serviceGroupId Filter by groupId (optional)
     * @param defaultService Filter by default service, default is false (optional)
     * @param allLocations Search All Locations, default is false (optional)
     * @param scope Filter by scope, Company, Location or All, default is All (optional)
     * @param name Filter by Name, supports Partial name search (optional)
     * @param serviceId Filter by ServiceId, using this parameter would ignore all other parameters (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param sortOrder Sort results using Natural Sort or Sorted alphabetically by Service Names, default is natural (optional)
     * @param sortDescending Sort results in Descending Order, default true (optional)
     * @return ServiceListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceListViewModel consumerV1ServicesGet(String locationId, Integer serviceGroupId, Boolean defaultService, Boolean allLocations, ServicesScope scope, String name, String serviceId, Integer offset, Integer limit, ServiceSortOrder sortOrder, Boolean sortDescending) throws ApiException {
        ApiResponse<ServiceListViewModel> localVarResp = consumerV1ServicesGetWithHttpInfo(locationId, serviceGroupId, defaultService, allLocations, scope, name, serviceId, offset, limit, sortOrder, sortDescending);
        return localVarResp.getData();
    }

    /**
     * List Services
     * &lt;p&gt;Use this endpoint to &lt;b&gt;List Services&lt;/b&gt; available at your business location and/or company. If not specified, the business location defaults to the primary business location. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param serviceGroupId Filter by groupId (optional)
     * @param defaultService Filter by default service, default is false (optional)
     * @param allLocations Search All Locations, default is false (optional)
     * @param scope Filter by scope, Company, Location or All, default is All (optional)
     * @param name Filter by Name, supports Partial name search (optional)
     * @param serviceId Filter by ServiceId, using this parameter would ignore all other parameters (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param sortOrder Sort results using Natural Sort or Sorted alphabetically by Service Names, default is natural (optional)
     * @param sortDescending Sort results in Descending Order, default true (optional)
     * @return ApiResponse&lt;ServiceListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceListViewModel> consumerV1ServicesGetWithHttpInfo(String locationId, Integer serviceGroupId, Boolean defaultService, Boolean allLocations, ServicesScope scope, String name, String serviceId, Integer offset, Integer limit, ServiceSortOrder sortOrder, Boolean sortDescending) throws ApiException {
        okhttp3.Call localVarCall = consumerV1ServicesGetValidateBeforeCall(locationId, serviceGroupId, defaultService, allLocations, scope, name, serviceId, offset, limit, sortOrder, sortDescending, null);
        Type localVarReturnType = new TypeToken<ServiceListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Services (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;List Services&lt;/b&gt; available at your business location and/or company. If not specified, the business location defaults to the primary business location. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param serviceGroupId Filter by groupId (optional)
     * @param defaultService Filter by default service, default is false (optional)
     * @param allLocations Search All Locations, default is false (optional)
     * @param scope Filter by scope, Company, Location or All, default is All (optional)
     * @param name Filter by Name, supports Partial name search (optional)
     * @param serviceId Filter by ServiceId, using this parameter would ignore all other parameters (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param sortOrder Sort results using Natural Sort or Sorted alphabetically by Service Names, default is natural (optional)
     * @param sortDescending Sort results in Descending Order, default true (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ServicesGetAsync(String locationId, Integer serviceGroupId, Boolean defaultService, Boolean allLocations, ServicesScope scope, String name, String serviceId, Integer offset, Integer limit, ServiceSortOrder sortOrder, Boolean sortDescending, final ApiCallback<ServiceListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1ServicesGetValidateBeforeCall(locationId, serviceGroupId, defaultService, allLocations, scope, name, serviceId, offset, limit, sortOrder, sortDescending, _callback);
        Type localVarReturnType = new TypeToken<ServiceListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1ServicesIdAllocationsGet
     * @param id id of service to list allocations for, 0 for all (required)
     * @param locationId id of the location, defaults to the primary location (optional)
     * @param resourceId id of the resource to filter on (optional)
     * @param startDate Format YYYY-MM-DD: Filter allocations on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter allocations on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> service alloaction object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Service was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ServicesIdAllocationsGetCall(String id, String locationId, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/services/{id}/allocations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (resourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceId", resourceId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1ServicesIdAllocationsGetValidateBeforeCall(String id, String locationId, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1ServicesIdAllocationsGet(Async)");
        }

        return consumerV1ServicesIdAllocationsGetCall(id, locationId, resourceId, startDate, endDate, offset, limit, _callback);

    }

    /**
     * List Service Allocations
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Service Allocations&lt;/b&gt; associated with the requested service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Allocations are used for Event type services/bookings. Retrieve all allocations for a location by passing in zero as the service id. Otherwise, to get allocations for a specific service supply the service id. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: &lt;a href&#x3D;\&quot;https://docs.onsched.com/reference/post_setup-v1-services-id-allocations\&quot;&gt;Create Service Allocations&lt;/a&gt;&lt;/p&gt;
     * @param id id of service to list allocations for, 0 for all (required)
     * @param locationId id of the location, defaults to the primary location (optional)
     * @param resourceId id of the resource to filter on (optional)
     * @param startDate Format YYYY-MM-DD: Filter allocations on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter allocations on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ServiceAllocationListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> service alloaction object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Service was not found </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAllocationListViewModel consumerV1ServicesIdAllocationsGet(String id, String locationId, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ServiceAllocationListViewModel> localVarResp = consumerV1ServicesIdAllocationsGetWithHttpInfo(id, locationId, resourceId, startDate, endDate, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Service Allocations
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Service Allocations&lt;/b&gt; associated with the requested service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Allocations are used for Event type services/bookings. Retrieve all allocations for a location by passing in zero as the service id. Otherwise, to get allocations for a specific service supply the service id. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: &lt;a href&#x3D;\&quot;https://docs.onsched.com/reference/post_setup-v1-services-id-allocations\&quot;&gt;Create Service Allocations&lt;/a&gt;&lt;/p&gt;
     * @param id id of service to list allocations for, 0 for all (required)
     * @param locationId id of the location, defaults to the primary location (optional)
     * @param resourceId id of the resource to filter on (optional)
     * @param startDate Format YYYY-MM-DD: Filter allocations on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter allocations on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;ServiceAllocationListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> service alloaction object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Service was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAllocationListViewModel> consumerV1ServicesIdAllocationsGetWithHttpInfo(String id, String locationId, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = consumerV1ServicesIdAllocationsGetValidateBeforeCall(id, locationId, resourceId, startDate, endDate, offset, limit, null);
        Type localVarReturnType = new TypeToken<ServiceAllocationListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Service Allocations (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Service Allocations&lt;/b&gt; associated with the requested service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Allocations are used for Event type services/bookings. Retrieve all allocations for a location by passing in zero as the service id. Otherwise, to get allocations for a specific service supply the service id. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: &lt;a href&#x3D;\&quot;https://docs.onsched.com/reference/post_setup-v1-services-id-allocations\&quot;&gt;Create Service Allocations&lt;/a&gt;&lt;/p&gt;
     * @param id id of service to list allocations for, 0 for all (required)
     * @param locationId id of the location, defaults to the primary location (optional)
     * @param resourceId id of the resource to filter on (optional)
     * @param startDate Format YYYY-MM-DD: Filter allocations on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter allocations on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> service alloaction object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Service was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ServicesIdAllocationsGetAsync(String id, String locationId, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback<ServiceAllocationListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1ServicesIdAllocationsGetValidateBeforeCall(id, locationId, resourceId, startDate, endDate, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ServiceAllocationListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1ServicesIdGet
     * @param id id of service object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ServicesIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/services/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1ServicesIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1ServicesIdGet(Async)");
        }

        return consumerV1ServicesIdGetCall(id, _callback);

    }

    /**
     * Get Service
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Service&lt;/b&gt; object. A valid &lt;b&gt;service id&lt;/b&gt; is required. Find service id&#39;s by using the &lt;i&gt;GET /consumer/v1/services&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of service object (required)
     * @return ServiceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceViewModel consumerV1ServicesIdGet(Integer id) throws ApiException {
        ApiResponse<ServiceViewModel> localVarResp = consumerV1ServicesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Service
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Service&lt;/b&gt; object. A valid &lt;b&gt;service id&lt;/b&gt; is required. Find service id&#39;s by using the &lt;i&gt;GET /consumer/v1/services&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of service object (required)
     * @return ApiResponse&lt;ServiceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceViewModel> consumerV1ServicesIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = consumerV1ServicesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Service (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Service&lt;/b&gt; object. A valid &lt;b&gt;service id&lt;/b&gt; is required. Find service id&#39;s by using the &lt;i&gt;GET /consumer/v1/services&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of service object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ServicesIdGetAsync(Integer id, final ApiCallback<ServiceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1ServicesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1ServicesIdResourcesGet
     * @param id id of service object (required)
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ServicesIdResourcesGetCall(String id, String locationId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/services/{id}/resources"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1ServicesIdResourcesGetValidateBeforeCall(String id, String locationId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1ServicesIdResourcesGet(Async)");
        }

        return consumerV1ServicesIdResourcesGetCall(id, locationId, offset, limit, _callback);

    }

    /**
     * List Resources for Service
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resources that provide the Service requested&lt;/b&gt;. A valid &lt;b&gt;service id&lt;/b&gt; is required. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of service object (required)
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ResourceListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListViewModel consumerV1ServicesIdResourcesGet(String id, String locationId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ResourceListViewModel> localVarResp = consumerV1ServicesIdResourcesGetWithHttpInfo(id, locationId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Resources for Service
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resources that provide the Service requested&lt;/b&gt;. A valid &lt;b&gt;service id&lt;/b&gt; is required. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of service object (required)
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;ResourceListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListViewModel> consumerV1ServicesIdResourcesGetWithHttpInfo(String id, String locationId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = consumerV1ServicesIdResourcesGetValidateBeforeCall(id, locationId, offset, limit, null);
        Type localVarReturnType = new TypeToken<ResourceListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Resources for Service (asynchronously)
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resources that provide the Service requested&lt;/b&gt;. A valid &lt;b&gt;service id&lt;/b&gt; is required. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of service object (required)
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ServicesIdResourcesGetAsync(String id, String locationId, Integer offset, Integer limit, final ApiCallback<ResourceListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1ServicesIdResourcesGetValidateBeforeCall(id, locationId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ResourceListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
