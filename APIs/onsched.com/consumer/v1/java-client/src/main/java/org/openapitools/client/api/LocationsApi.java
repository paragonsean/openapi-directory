/*
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LocationListViewModel;
import org.openapitools.client.model.LocationViewModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for consumerV1LocationsGet
     * @param name Location name (full or partial) (optional)
     * @param nearestTo Search by distance nearest Geocoords, City, Postal/Zip Code (optional)
     * @param proximity Maximum distance to display (optional)
     * @param units Distance either imperial(miles), metric(kilometers) (optional)
     * @param serviceId Locations that offer this service (optional)
     * @param friendlyId Frienldy Id of location (optional)
     * @param regionId Locations within a specific region (optional)
     * @param ignorePrimary Don&#39;t include the Primary Location (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit, default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1LocationsGetCall(String name, String nearestTo, Integer proximity, String units, String serviceId, String friendlyId, String regionId, Boolean ignorePrimary, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (nearestTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nearestTo", nearestTo));
        }

        if (proximity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proximity", proximity));
        }

        if (units != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("units", units));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceId", serviceId));
        }

        if (friendlyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("friendlyId", friendlyId));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionId", regionId));
        }

        if (ignorePrimary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignorePrimary", ignorePrimary));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1LocationsGetValidateBeforeCall(String name, String nearestTo, Integer proximity, String units, String serviceId, String friendlyId, String regionId, Boolean ignorePrimary, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return consumerV1LocationsGetCall(name, nearestTo, proximity, units, serviceId, friendlyId, regionId, ignorePrimary, offset, limit, _callback);

    }

    /**
     * List Locations
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Business Locations&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and size. Default offset is 0, and limit is 20 and maximum is 100. Use the other query parameters to filter the results further. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param name Location name (full or partial) (optional)
     * @param nearestTo Search by distance nearest Geocoords, City, Postal/Zip Code (optional)
     * @param proximity Maximum distance to display (optional)
     * @param units Distance either imperial(miles), metric(kilometers) (optional)
     * @param serviceId Locations that offer this service (optional)
     * @param friendlyId Frienldy Id of location (optional)
     * @param regionId Locations within a specific region (optional)
     * @param ignorePrimary Don&#39;t include the Primary Location (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit, default 20, max 100 (optional)
     * @return LocationListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationListViewModel consumerV1LocationsGet(String name, String nearestTo, Integer proximity, String units, String serviceId, String friendlyId, String regionId, Boolean ignorePrimary, Integer offset, Integer limit) throws ApiException {
        ApiResponse<LocationListViewModel> localVarResp = consumerV1LocationsGetWithHttpInfo(name, nearestTo, proximity, units, serviceId, friendlyId, regionId, ignorePrimary, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Locations
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Business Locations&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and size. Default offset is 0, and limit is 20 and maximum is 100. Use the other query parameters to filter the results further. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param name Location name (full or partial) (optional)
     * @param nearestTo Search by distance nearest Geocoords, City, Postal/Zip Code (optional)
     * @param proximity Maximum distance to display (optional)
     * @param units Distance either imperial(miles), metric(kilometers) (optional)
     * @param serviceId Locations that offer this service (optional)
     * @param friendlyId Frienldy Id of location (optional)
     * @param regionId Locations within a specific region (optional)
     * @param ignorePrimary Don&#39;t include the Primary Location (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit, default 20, max 100 (optional)
     * @return ApiResponse&lt;LocationListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationListViewModel> consumerV1LocationsGetWithHttpInfo(String name, String nearestTo, Integer proximity, String units, String serviceId, String friendlyId, String regionId, Boolean ignorePrimary, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = consumerV1LocationsGetValidateBeforeCall(name, nearestTo, proximity, units, serviceId, friendlyId, regionId, ignorePrimary, offset, limit, null);
        Type localVarReturnType = new TypeToken<LocationListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Locations (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Business Locations&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and size. Default offset is 0, and limit is 20 and maximum is 100. Use the other query parameters to filter the results further. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param name Location name (full or partial) (optional)
     * @param nearestTo Search by distance nearest Geocoords, City, Postal/Zip Code (optional)
     * @param proximity Maximum distance to display (optional)
     * @param units Distance either imperial(miles), metric(kilometers) (optional)
     * @param serviceId Locations that offer this service (optional)
     * @param friendlyId Frienldy Id of location (optional)
     * @param regionId Locations within a specific region (optional)
     * @param ignorePrimary Don&#39;t include the Primary Location (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit, default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1LocationsGetAsync(String name, String nearestTo, Integer proximity, String units, String serviceId, String friendlyId, String regionId, Boolean ignorePrimary, Integer offset, Integer limit, final ApiCallback<LocationListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1LocationsGetValidateBeforeCall(name, nearestTo, proximity, units, serviceId, friendlyId, regionId, ignorePrimary, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<LocationListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1LocationsIdGet
     * @param id id of business location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1LocationsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/locations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1LocationsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1LocationsIdGet(Async)");
        }

        return consumerV1LocationsIdGetCall(id, _callback);

    }

    /**
     * Get Location
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Location&lt;/b&gt; object. A valid business &lt;b&gt;location id&lt;/b&gt; is required. Find all location id&#39;s by using the &lt;i&gt;GET /consumer/v1/locations&lt;/i&gt; endpoint.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param id id of business location (required)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel consumerV1LocationsIdGet(String id) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = consumerV1LocationsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Location
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Location&lt;/b&gt; object. A valid business &lt;b&gt;location id&lt;/b&gt; is required. Find all location id&#39;s by using the &lt;i&gt;GET /consumer/v1/locations&lt;/i&gt; endpoint.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param id id of business location (required)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> consumerV1LocationsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = consumerV1LocationsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Location (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Location&lt;/b&gt; object. A valid business &lt;b&gt;location id&lt;/b&gt; is required. Find all location id&#39;s by using the &lt;i&gt;GET /consumer/v1/locations&lt;/i&gt; endpoint.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param id id of business location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1LocationsIdGetAsync(String id, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1LocationsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
