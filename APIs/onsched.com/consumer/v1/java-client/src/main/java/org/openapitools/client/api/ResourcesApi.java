/*
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ResourceListViewModel;
import org.openapitools.client.model.ResourceServiceListViewModel;
import org.openapitools.client.model.ResourceViewModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for consumerV1ResourcesGet
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param resourceGroupId Filter by groupId (optional)
     * @param email Filter by email address (optional)
     * @param name Search by name, supports Partial name search (optional)
     * @param sortOrder Specify sort order of response (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ResourcesGetCall(String locationId, Integer resourceGroupId, String email, String name, String sortOrder, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (resourceGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceGroupId", resourceGroupId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1ResourcesGetValidateBeforeCall(String locationId, Integer resourceGroupId, String email, String name, String sortOrder, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return consumerV1ResourcesGetCall(locationId, resourceGroupId, email, name, sortOrder, offset, limit, _callback);

    }

    /**
     * List Resources
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Resources&lt;/b&gt; associated with a business location. If not specified, the business location defaults to the primary business location. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param resourceGroupId Filter by groupId (optional)
     * @param email Filter by email address (optional)
     * @param name Search by name, supports Partial name search (optional)
     * @param sortOrder Specify sort order of response (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ResourceListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListViewModel consumerV1ResourcesGet(String locationId, Integer resourceGroupId, String email, String name, String sortOrder, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ResourceListViewModel> localVarResp = consumerV1ResourcesGetWithHttpInfo(locationId, resourceGroupId, email, name, sortOrder, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Resources
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Resources&lt;/b&gt; associated with a business location. If not specified, the business location defaults to the primary business location. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param resourceGroupId Filter by groupId (optional)
     * @param email Filter by email address (optional)
     * @param name Search by name, supports Partial name search (optional)
     * @param sortOrder Specify sort order of response (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;ResourceListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListViewModel> consumerV1ResourcesGetWithHttpInfo(String locationId, Integer resourceGroupId, String email, String name, String sortOrder, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = consumerV1ResourcesGetValidateBeforeCall(locationId, resourceGroupId, email, name, sortOrder, offset, limit, null);
        Type localVarReturnType = new TypeToken<ResourceListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Resources (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Resources&lt;/b&gt; associated with a business location. If not specified, the business location defaults to the primary business location. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param resourceGroupId Filter by groupId (optional)
     * @param email Filter by email address (optional)
     * @param name Search by name, supports Partial name search (optional)
     * @param sortOrder Specify sort order of response (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ResourcesGetAsync(String locationId, Integer resourceGroupId, String email, String name, String sortOrder, Integer offset, Integer limit, final ApiCallback<ResourceListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1ResourcesGetValidateBeforeCall(locationId, resourceGroupId, email, name, sortOrder, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ResourceListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1ResourcesIdGet
     * @param id id of resource object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ResourcesIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/resources/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1ResourcesIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1ResourcesIdGet(Async)");
        }

        return consumerV1ResourcesIdGetCall(id, _callback);

    }

    /**
     * Get Resource
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource&lt;/b&gt; object. A valid &lt;b&gt;resource id&lt;/b&gt; is required. Find resource id&#39;s by using the &lt;i&gt;GET consumer/v1/resources&lt;/i&gt; endpoint. &lt;/p&gt;
     * @param id id of resource object (required)
     * @return ResourceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceViewModel consumerV1ResourcesIdGet(Integer id) throws ApiException {
        ApiResponse<ResourceViewModel> localVarResp = consumerV1ResourcesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Resource
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource&lt;/b&gt; object. A valid &lt;b&gt;resource id&lt;/b&gt; is required. Find resource id&#39;s by using the &lt;i&gt;GET consumer/v1/resources&lt;/i&gt; endpoint. &lt;/p&gt;
     * @param id id of resource object (required)
     * @return ApiResponse&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceViewModel> consumerV1ResourcesIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = consumerV1ResourcesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Resource (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource&lt;/b&gt; object. A valid &lt;b&gt;resource id&lt;/b&gt; is required. Find resource id&#39;s by using the &lt;i&gt;GET consumer/v1/resources&lt;/i&gt; endpoint. &lt;/p&gt;
     * @param id id of resource object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ResourcesIdGetAsync(Integer id, final ApiCallback<ResourceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1ResourcesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerV1ResourcesIdServicesGet
     * @param id id of resource object (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of resource services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ResourcesIdServicesGetCall(Integer id, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer/v1/resources/{id}/services"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerV1ResourcesIdServicesGetValidateBeforeCall(Integer id, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consumerV1ResourcesIdServicesGet(Async)");
        }

        return consumerV1ResourcesIdServicesGetCall(id, offset, limit, _callback);

    }

    /**
     * Get Resource Linked Services
     * &lt;p&gt;Use this endpoint to get a &lt;b&gt;List of Linked Services&lt;/b&gt; associated with the resource requested. The results are returned in pages. Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, the maximum limit is 100. Use the other query parameters to filter the results further.&lt;/p&gt;  &lt;p&gt;Resource linked services are used to explicitly define the services that can be booked for a specified resource. By default, all services are bookable for any resource. For more information: &lt;a href&#x3D;\&quot;https://docs.onsched.com/docs/linked-services\&quot;&gt;Linked Services Overview&lt;/a&gt;&lt;/p&gt;
     * @param id id of resource object (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ResourceServiceListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of resource services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ResourceServiceListViewModel consumerV1ResourcesIdServicesGet(Integer id, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ResourceServiceListViewModel> localVarResp = consumerV1ResourcesIdServicesGetWithHttpInfo(id, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get Resource Linked Services
     * &lt;p&gt;Use this endpoint to get a &lt;b&gt;List of Linked Services&lt;/b&gt; associated with the resource requested. The results are returned in pages. Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, the maximum limit is 100. Use the other query parameters to filter the results further.&lt;/p&gt;  &lt;p&gt;Resource linked services are used to explicitly define the services that can be booked for a specified resource. By default, all services are bookable for any resource. For more information: &lt;a href&#x3D;\&quot;https://docs.onsched.com/docs/linked-services\&quot;&gt;Linked Services Overview&lt;/a&gt;&lt;/p&gt;
     * @param id id of resource object (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;ResourceServiceListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of resource services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceServiceListViewModel> consumerV1ResourcesIdServicesGetWithHttpInfo(Integer id, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = consumerV1ResourcesIdServicesGetValidateBeforeCall(id, offset, limit, null);
        Type localVarReturnType = new TypeToken<ResourceServiceListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Resource Linked Services (asynchronously)
     * &lt;p&gt;Use this endpoint to get a &lt;b&gt;List of Linked Services&lt;/b&gt; associated with the resource requested. The results are returned in pages. Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, the maximum limit is 100. Use the other query parameters to filter the results further.&lt;/p&gt;  &lt;p&gt;Resource linked services are used to explicitly define the services that can be booked for a specified resource. By default, all services are bookable for any resource. For more information: &lt;a href&#x3D;\&quot;https://docs.onsched.com/docs/linked-services\&quot;&gt;Linked Services Overview&lt;/a&gt;&lt;/p&gt;
     * @param id id of resource object (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of resource services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerV1ResourcesIdServicesGetAsync(Integer id, Integer offset, Integer limit, final ApiCallback<ResourceServiceListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerV1ResourcesIdServicesGetValidateBeforeCall(id, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ResourceServiceListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
