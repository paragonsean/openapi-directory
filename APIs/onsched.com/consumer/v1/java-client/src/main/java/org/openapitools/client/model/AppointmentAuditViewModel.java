/*
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppointmentAuditViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:57.922898-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppointmentAuditViewModel {
  public static final String SERIALIZED_NAME_APPOINTMENT_ID = "appointmentId";
  @SerializedName(SERIALIZED_NAME_APPOINTMENT_ID)
  private String appointmentId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MODIFICATION_TYPE = "modificationType";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TYPE)
  private String modificationType;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private String modifiedBy;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modifiedOn";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private String modifiedOn;

  public static final String SERIALIZED_NAME_NOTES_AFTER = "notesAfter";
  @SerializedName(SERIALIZED_NAME_NOTES_AFTER)
  private String notesAfter;

  public static final String SERIALIZED_NAME_NOTES_BEFORE = "notesBefore";
  @SerializedName(SERIALIZED_NAME_NOTES_BEFORE)
  private String notesBefore;

  public static final String SERIALIZED_NAME_STATUS_AFTER = "statusAfter";
  @SerializedName(SERIALIZED_NAME_STATUS_AFTER)
  private String statusAfter;

  public static final String SERIALIZED_NAME_STATUS_BEFORE = "statusBefore";
  @SerializedName(SERIALIZED_NAME_STATUS_BEFORE)
  private String statusBefore;

  public AppointmentAuditViewModel() {
  }

  public AppointmentAuditViewModel appointmentId(String appointmentId) {
    this.appointmentId = appointmentId;
    return this;
  }

  /**
   * Get appointmentId
   * @return appointmentId
   */
  @javax.annotation.Nullable
  public String getAppointmentId() {
    return appointmentId;
  }

  public void setAppointmentId(String appointmentId) {
    this.appointmentId = appointmentId;
  }


  public AppointmentAuditViewModel id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AppointmentAuditViewModel modificationType(String modificationType) {
    this.modificationType = modificationType;
    return this;
  }

  /**
   * Get modificationType
   * @return modificationType
   */
  @javax.annotation.Nullable
  public String getModificationType() {
    return modificationType;
  }

  public void setModificationType(String modificationType) {
    this.modificationType = modificationType;
  }


  public AppointmentAuditViewModel modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

  /**
   * Get modifiedBy
   * @return modifiedBy
   */
  @javax.annotation.Nullable
  public String getModifiedBy() {
    return modifiedBy;
  }

  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public AppointmentAuditViewModel modifiedOn(String modifiedOn) {
    this.modifiedOn = modifiedOn;
    return this;
  }

  /**
   * Get modifiedOn
   * @return modifiedOn
   */
  @javax.annotation.Nullable
  public String getModifiedOn() {
    return modifiedOn;
  }

  public void setModifiedOn(String modifiedOn) {
    this.modifiedOn = modifiedOn;
  }


  public AppointmentAuditViewModel notesAfter(String notesAfter) {
    this.notesAfter = notesAfter;
    return this;
  }

  /**
   * Get notesAfter
   * @return notesAfter
   */
  @javax.annotation.Nullable
  public String getNotesAfter() {
    return notesAfter;
  }

  public void setNotesAfter(String notesAfter) {
    this.notesAfter = notesAfter;
  }


  public AppointmentAuditViewModel notesBefore(String notesBefore) {
    this.notesBefore = notesBefore;
    return this;
  }

  /**
   * Get notesBefore
   * @return notesBefore
   */
  @javax.annotation.Nullable
  public String getNotesBefore() {
    return notesBefore;
  }

  public void setNotesBefore(String notesBefore) {
    this.notesBefore = notesBefore;
  }


  public AppointmentAuditViewModel statusAfter(String statusAfter) {
    this.statusAfter = statusAfter;
    return this;
  }

  /**
   * Get statusAfter
   * @return statusAfter
   */
  @javax.annotation.Nullable
  public String getStatusAfter() {
    return statusAfter;
  }

  public void setStatusAfter(String statusAfter) {
    this.statusAfter = statusAfter;
  }


  public AppointmentAuditViewModel statusBefore(String statusBefore) {
    this.statusBefore = statusBefore;
    return this;
  }

  /**
   * Get statusBefore
   * @return statusBefore
   */
  @javax.annotation.Nullable
  public String getStatusBefore() {
    return statusBefore;
  }

  public void setStatusBefore(String statusBefore) {
    this.statusBefore = statusBefore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppointmentAuditViewModel appointmentAuditViewModel = (AppointmentAuditViewModel) o;
    return Objects.equals(this.appointmentId, appointmentAuditViewModel.appointmentId) &&
        Objects.equals(this.id, appointmentAuditViewModel.id) &&
        Objects.equals(this.modificationType, appointmentAuditViewModel.modificationType) &&
        Objects.equals(this.modifiedBy, appointmentAuditViewModel.modifiedBy) &&
        Objects.equals(this.modifiedOn, appointmentAuditViewModel.modifiedOn) &&
        Objects.equals(this.notesAfter, appointmentAuditViewModel.notesAfter) &&
        Objects.equals(this.notesBefore, appointmentAuditViewModel.notesBefore) &&
        Objects.equals(this.statusAfter, appointmentAuditViewModel.statusAfter) &&
        Objects.equals(this.statusBefore, appointmentAuditViewModel.statusBefore);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(appointmentId, id, modificationType, modifiedBy, modifiedOn, notesAfter, notesBefore, statusAfter, statusBefore);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppointmentAuditViewModel {\n");
    sb.append("    appointmentId: ").append(toIndentedString(appointmentId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modificationType: ").append(toIndentedString(modificationType)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    notesAfter: ").append(toIndentedString(notesAfter)).append("\n");
    sb.append("    notesBefore: ").append(toIndentedString(notesBefore)).append("\n");
    sb.append("    statusAfter: ").append(toIndentedString(statusAfter)).append("\n");
    sb.append("    statusBefore: ").append(toIndentedString(statusBefore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appointmentId");
    openapiFields.add("id");
    openapiFields.add("modificationType");
    openapiFields.add("modifiedBy");
    openapiFields.add("modifiedOn");
    openapiFields.add("notesAfter");
    openapiFields.add("notesBefore");
    openapiFields.add("statusAfter");
    openapiFields.add("statusBefore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppointmentAuditViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppointmentAuditViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppointmentAuditViewModel is not found in the empty JSON string", AppointmentAuditViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppointmentAuditViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppointmentAuditViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appointmentId") != null && !jsonObj.get("appointmentId").isJsonNull()) && !jsonObj.get("appointmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appointmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appointmentId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("modificationType") != null && !jsonObj.get("modificationType").isJsonNull()) && !jsonObj.get("modificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modificationType").toString()));
      }
      if ((jsonObj.get("modifiedBy") != null && !jsonObj.get("modifiedBy").isJsonNull()) && !jsonObj.get("modifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedBy").toString()));
      }
      if ((jsonObj.get("modifiedOn") != null && !jsonObj.get("modifiedOn").isJsonNull()) && !jsonObj.get("modifiedOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedOn").toString()));
      }
      if ((jsonObj.get("notesAfter") != null && !jsonObj.get("notesAfter").isJsonNull()) && !jsonObj.get("notesAfter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notesAfter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notesAfter").toString()));
      }
      if ((jsonObj.get("notesBefore") != null && !jsonObj.get("notesBefore").isJsonNull()) && !jsonObj.get("notesBefore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notesBefore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notesBefore").toString()));
      }
      if ((jsonObj.get("statusAfter") != null && !jsonObj.get("statusAfter").isJsonNull()) && !jsonObj.get("statusAfter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusAfter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusAfter").toString()));
      }
      if ((jsonObj.get("statusBefore") != null && !jsonObj.get("statusBefore").isJsonNull()) && !jsonObj.get("statusBefore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusBefore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusBefore").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppointmentAuditViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppointmentAuditViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppointmentAuditViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppointmentAuditViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AppointmentAuditViewModel>() {
           @Override
           public void write(JsonWriter out, AppointmentAuditViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppointmentAuditViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppointmentAuditViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppointmentAuditViewModel
   * @throws IOException if the JSON string is invalid with respect to AppointmentAuditViewModel
   */
  public static AppointmentAuditViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppointmentAuditViewModel.class);
  }

  /**
   * Convert an instance of AppointmentAuditViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

