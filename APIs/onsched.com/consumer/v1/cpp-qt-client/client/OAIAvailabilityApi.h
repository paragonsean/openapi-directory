/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAvailabilityApi_H
#define OAI_OAIAvailabilityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAvailabilityDayViewModel.h"
#include "OAIAvailabilityViewModel.h"
#include "OAIUnavailableTimeListViewModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAvailabilityApi : public QObject {
    Q_OBJECT

public:
    OAIAvailabilityApi(const int timeOut = 0);
    ~OAIAvailabilityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  start_date QDateTime [required]
    * @param[in]  end_date QDateTime [required]
    * @param[in]  location_id QString [optional]
    * @param[in]  resource_id QString [optional]
    * @param[in]  tz_offset qint32 [optional]
    */
    virtual void consumerV1AvailabilityServiceIdStartDateEndDateDaysGet(const QString &service_id, const QDateTime &start_date, const QDateTime &end_date, const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &tz_offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  start_date QDateTime [required]
    * @param[in]  end_date QDateTime [required]
    * @param[in]  start_time qint32 [optional]
    * @param[in]  end_time qint32 [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  resource_id QString [optional]
    * @param[in]  resource_group_id QString [optional]
    * @param[in]  resource_ids QString [optional]
    * @param[in]  round_robin QString [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  interval qint32 [optional]
    * @param[in]  timezone_name QString [optional]
    * @param[in]  tz_offset qint32 [optional]
    * @param[in]  destination QString [optional]
    * @param[in]  day_availability_start_date QDateTime [optional]
    * @param[in]  day_availability qint32 [optional]
    * @param[in]  first_day_available bool [optional]
    */
    virtual void consumerV1AvailabilityServiceIdStartDateEndDateGet(const QString &service_id, const QDateTime &start_date, const QDateTime &end_date, const ::OpenAPI::OptionalParam<qint32> &start_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &end_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &round_robin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &timezone_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &tz_offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &destination = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &day_availability_start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &day_availability = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &first_day_available = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  start_date QDateTime [required]
    * @param[in]  end_date QDateTime [required]
    * @param[in]  location_id QString [optional]
    * @param[in]  resource_id QString [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  tz_offset qint32 [optional]
    * @param[in]  skip_time_past_unavailability bool [optional]
    */
    virtual void consumerV1AvailabilityServiceIdStartDateEndDateUnavailableGet(const QString &service_id, const QDateTime &start_date, const QDateTime &end_date, const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &tz_offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &skip_time_past_unavailability = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void consumerV1AvailabilityServiceIdStartDateEndDateDaysGetCallback(OAIHttpRequestWorker *worker);
    void consumerV1AvailabilityServiceIdStartDateEndDateGetCallback(OAIHttpRequestWorker *worker);
    void consumerV1AvailabilityServiceIdStartDateEndDateUnavailableGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void consumerV1AvailabilityServiceIdStartDateEndDateDaysGetSignal(OAIAvailabilityDayViewModel summary);
    void consumerV1AvailabilityServiceIdStartDateEndDateGetSignal(OAIAvailabilityViewModel summary);
    void consumerV1AvailabilityServiceIdStartDateEndDateUnavailableGetSignal(OAIUnavailableTimeListViewModel summary);


    void consumerV1AvailabilityServiceIdStartDateEndDateDaysGetSignalFull(OAIHttpRequestWorker *worker, OAIAvailabilityDayViewModel summary);
    void consumerV1AvailabilityServiceIdStartDateEndDateGetSignalFull(OAIHttpRequestWorker *worker, OAIAvailabilityViewModel summary);
    void consumerV1AvailabilityServiceIdStartDateEndDateUnavailableGetSignalFull(OAIHttpRequestWorker *worker, OAIUnavailableTimeListViewModel summary);

    Q_DECL_DEPRECATED_X("Use consumerV1AvailabilityServiceIdStartDateEndDateDaysGetSignalError() instead")
    void consumerV1AvailabilityServiceIdStartDateEndDateDaysGetSignalE(OAIAvailabilityDayViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AvailabilityServiceIdStartDateEndDateDaysGetSignalError(OAIAvailabilityDayViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AvailabilityServiceIdStartDateEndDateGetSignalError() instead")
    void consumerV1AvailabilityServiceIdStartDateEndDateGetSignalE(OAIAvailabilityViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AvailabilityServiceIdStartDateEndDateGetSignalError(OAIAvailabilityViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AvailabilityServiceIdStartDateEndDateUnavailableGetSignalError() instead")
    void consumerV1AvailabilityServiceIdStartDateEndDateUnavailableGetSignalE(OAIUnavailableTimeListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AvailabilityServiceIdStartDateEndDateUnavailableGetSignalError(OAIUnavailableTimeListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use consumerV1AvailabilityServiceIdStartDateEndDateDaysGetSignalErrorFull() instead")
    void consumerV1AvailabilityServiceIdStartDateEndDateDaysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AvailabilityServiceIdStartDateEndDateDaysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AvailabilityServiceIdStartDateEndDateGetSignalErrorFull() instead")
    void consumerV1AvailabilityServiceIdStartDateEndDateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AvailabilityServiceIdStartDateEndDateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AvailabilityServiceIdStartDateEndDateUnavailableGetSignalErrorFull() instead")
    void consumerV1AvailabilityServiceIdStartDateEndDateUnavailableGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AvailabilityServiceIdStartDateEndDateUnavailableGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
