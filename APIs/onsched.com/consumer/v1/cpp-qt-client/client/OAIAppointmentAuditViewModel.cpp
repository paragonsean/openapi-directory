/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppointmentAuditViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppointmentAuditViewModel::OAIAppointmentAuditViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppointmentAuditViewModel::OAIAppointmentAuditViewModel() {
    this->initializeModel();
}

OAIAppointmentAuditViewModel::~OAIAppointmentAuditViewModel() {}

void OAIAppointmentAuditViewModel::initializeModel() {

    m_appointment_id_isSet = false;
    m_appointment_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modification_type_isSet = false;
    m_modification_type_isValid = false;

    m_modified_by_isSet = false;
    m_modified_by_isValid = false;

    m_modified_on_isSet = false;
    m_modified_on_isValid = false;

    m_notes_after_isSet = false;
    m_notes_after_isValid = false;

    m_notes_before_isSet = false;
    m_notes_before_isValid = false;

    m_status_after_isSet = false;
    m_status_after_isValid = false;

    m_status_before_isSet = false;
    m_status_before_isValid = false;
}

void OAIAppointmentAuditViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppointmentAuditViewModel::fromJsonObject(QJsonObject json) {

    m_appointment_id_isValid = ::OpenAPI::fromJsonValue(m_appointment_id, json[QString("appointmentId")]);
    m_appointment_id_isSet = !json[QString("appointmentId")].isNull() && m_appointment_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modification_type_isValid = ::OpenAPI::fromJsonValue(m_modification_type, json[QString("modificationType")]);
    m_modification_type_isSet = !json[QString("modificationType")].isNull() && m_modification_type_isValid;

    m_modified_by_isValid = ::OpenAPI::fromJsonValue(m_modified_by, json[QString("modifiedBy")]);
    m_modified_by_isSet = !json[QString("modifiedBy")].isNull() && m_modified_by_isValid;

    m_modified_on_isValid = ::OpenAPI::fromJsonValue(m_modified_on, json[QString("modifiedOn")]);
    m_modified_on_isSet = !json[QString("modifiedOn")].isNull() && m_modified_on_isValid;

    m_notes_after_isValid = ::OpenAPI::fromJsonValue(m_notes_after, json[QString("notesAfter")]);
    m_notes_after_isSet = !json[QString("notesAfter")].isNull() && m_notes_after_isValid;

    m_notes_before_isValid = ::OpenAPI::fromJsonValue(m_notes_before, json[QString("notesBefore")]);
    m_notes_before_isSet = !json[QString("notesBefore")].isNull() && m_notes_before_isValid;

    m_status_after_isValid = ::OpenAPI::fromJsonValue(m_status_after, json[QString("statusAfter")]);
    m_status_after_isSet = !json[QString("statusAfter")].isNull() && m_status_after_isValid;

    m_status_before_isValid = ::OpenAPI::fromJsonValue(m_status_before, json[QString("statusBefore")]);
    m_status_before_isSet = !json[QString("statusBefore")].isNull() && m_status_before_isValid;
}

QString OAIAppointmentAuditViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppointmentAuditViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_appointment_id_isSet) {
        obj.insert(QString("appointmentId"), ::OpenAPI::toJsonValue(m_appointment_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modification_type_isSet) {
        obj.insert(QString("modificationType"), ::OpenAPI::toJsonValue(m_modification_type));
    }
    if (m_modified_by_isSet) {
        obj.insert(QString("modifiedBy"), ::OpenAPI::toJsonValue(m_modified_by));
    }
    if (m_modified_on_isSet) {
        obj.insert(QString("modifiedOn"), ::OpenAPI::toJsonValue(m_modified_on));
    }
    if (m_notes_after_isSet) {
        obj.insert(QString("notesAfter"), ::OpenAPI::toJsonValue(m_notes_after));
    }
    if (m_notes_before_isSet) {
        obj.insert(QString("notesBefore"), ::OpenAPI::toJsonValue(m_notes_before));
    }
    if (m_status_after_isSet) {
        obj.insert(QString("statusAfter"), ::OpenAPI::toJsonValue(m_status_after));
    }
    if (m_status_before_isSet) {
        obj.insert(QString("statusBefore"), ::OpenAPI::toJsonValue(m_status_before));
    }
    return obj;
}

QString OAIAppointmentAuditViewModel::getAppointmentId() const {
    return m_appointment_id;
}
void OAIAppointmentAuditViewModel::setAppointmentId(const QString &appointment_id) {
    m_appointment_id = appointment_id;
    m_appointment_id_isSet = true;
}

bool OAIAppointmentAuditViewModel::is_appointment_id_Set() const{
    return m_appointment_id_isSet;
}

bool OAIAppointmentAuditViewModel::is_appointment_id_Valid() const{
    return m_appointment_id_isValid;
}

QString OAIAppointmentAuditViewModel::getId() const {
    return m_id;
}
void OAIAppointmentAuditViewModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppointmentAuditViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppointmentAuditViewModel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAppointmentAuditViewModel::getModificationType() const {
    return m_modification_type;
}
void OAIAppointmentAuditViewModel::setModificationType(const QString &modification_type) {
    m_modification_type = modification_type;
    m_modification_type_isSet = true;
}

bool OAIAppointmentAuditViewModel::is_modification_type_Set() const{
    return m_modification_type_isSet;
}

bool OAIAppointmentAuditViewModel::is_modification_type_Valid() const{
    return m_modification_type_isValid;
}

QString OAIAppointmentAuditViewModel::getModifiedBy() const {
    return m_modified_by;
}
void OAIAppointmentAuditViewModel::setModifiedBy(const QString &modified_by) {
    m_modified_by = modified_by;
    m_modified_by_isSet = true;
}

bool OAIAppointmentAuditViewModel::is_modified_by_Set() const{
    return m_modified_by_isSet;
}

bool OAIAppointmentAuditViewModel::is_modified_by_Valid() const{
    return m_modified_by_isValid;
}

QString OAIAppointmentAuditViewModel::getModifiedOn() const {
    return m_modified_on;
}
void OAIAppointmentAuditViewModel::setModifiedOn(const QString &modified_on) {
    m_modified_on = modified_on;
    m_modified_on_isSet = true;
}

bool OAIAppointmentAuditViewModel::is_modified_on_Set() const{
    return m_modified_on_isSet;
}

bool OAIAppointmentAuditViewModel::is_modified_on_Valid() const{
    return m_modified_on_isValid;
}

QString OAIAppointmentAuditViewModel::getNotesAfter() const {
    return m_notes_after;
}
void OAIAppointmentAuditViewModel::setNotesAfter(const QString &notes_after) {
    m_notes_after = notes_after;
    m_notes_after_isSet = true;
}

bool OAIAppointmentAuditViewModel::is_notes_after_Set() const{
    return m_notes_after_isSet;
}

bool OAIAppointmentAuditViewModel::is_notes_after_Valid() const{
    return m_notes_after_isValid;
}

QString OAIAppointmentAuditViewModel::getNotesBefore() const {
    return m_notes_before;
}
void OAIAppointmentAuditViewModel::setNotesBefore(const QString &notes_before) {
    m_notes_before = notes_before;
    m_notes_before_isSet = true;
}

bool OAIAppointmentAuditViewModel::is_notes_before_Set() const{
    return m_notes_before_isSet;
}

bool OAIAppointmentAuditViewModel::is_notes_before_Valid() const{
    return m_notes_before_isValid;
}

QString OAIAppointmentAuditViewModel::getStatusAfter() const {
    return m_status_after;
}
void OAIAppointmentAuditViewModel::setStatusAfter(const QString &status_after) {
    m_status_after = status_after;
    m_status_after_isSet = true;
}

bool OAIAppointmentAuditViewModel::is_status_after_Set() const{
    return m_status_after_isSet;
}

bool OAIAppointmentAuditViewModel::is_status_after_Valid() const{
    return m_status_after_isValid;
}

QString OAIAppointmentAuditViewModel::getStatusBefore() const {
    return m_status_before;
}
void OAIAppointmentAuditViewModel::setStatusBefore(const QString &status_before) {
    m_status_before = status_before;
    m_status_before_isSet = true;
}

bool OAIAppointmentAuditViewModel::is_status_before_Set() const{
    return m_status_before_isSet;
}

bool OAIAppointmentAuditViewModel::is_status_before_Valid() const{
    return m_status_before_isValid;
}

bool OAIAppointmentAuditViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appointment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_before_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppointmentAuditViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
