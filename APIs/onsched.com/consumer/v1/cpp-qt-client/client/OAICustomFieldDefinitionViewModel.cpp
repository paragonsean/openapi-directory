/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomFieldDefinitionViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomFieldDefinitionViewModel::OAICustomFieldDefinitionViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomFieldDefinitionViewModel::OAICustomFieldDefinitionViewModel() {
    this->initializeModel();
}

OAICustomFieldDefinitionViewModel::~OAICustomFieldDefinitionViewModel() {}

void OAICustomFieldDefinitionViewModel::initializeModel() {

    m_field_key_isSet = false;
    m_field_key_isValid = false;

    m_field_label_isSet = false;
    m_field_label_isValid = false;

    m_field_length_isSet = false;
    m_field_length_isValid = false;

    m_field_list_items_isSet = false;
    m_field_list_items_isValid = false;

    m_field_name_isSet = false;
    m_field_name_isValid = false;

    m_field_public_isSet = false;
    m_field_public_isValid = false;

    m_field_required_isSet = false;
    m_field_required_isValid = false;

    m_field_type_isSet = false;
    m_field_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lead_question_isSet = false;
    m_lead_question_isValid = false;

    m_lead_question_weight_isSet = false;
    m_lead_question_weight_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_sort_key_isSet = false;
    m_sort_key_isValid = false;
}

void OAICustomFieldDefinitionViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomFieldDefinitionViewModel::fromJsonObject(QJsonObject json) {

    m_field_key_isValid = ::OpenAPI::fromJsonValue(m_field_key, json[QString("fieldKey")]);
    m_field_key_isSet = !json[QString("fieldKey")].isNull() && m_field_key_isValid;

    m_field_label_isValid = ::OpenAPI::fromJsonValue(m_field_label, json[QString("fieldLabel")]);
    m_field_label_isSet = !json[QString("fieldLabel")].isNull() && m_field_label_isValid;

    m_field_length_isValid = ::OpenAPI::fromJsonValue(m_field_length, json[QString("fieldLength")]);
    m_field_length_isSet = !json[QString("fieldLength")].isNull() && m_field_length_isValid;

    m_field_list_items_isValid = ::OpenAPI::fromJsonValue(m_field_list_items, json[QString("fieldListItems")]);
    m_field_list_items_isSet = !json[QString("fieldListItems")].isNull() && m_field_list_items_isValid;

    m_field_name_isValid = ::OpenAPI::fromJsonValue(m_field_name, json[QString("fieldName")]);
    m_field_name_isSet = !json[QString("fieldName")].isNull() && m_field_name_isValid;

    m_field_public_isValid = ::OpenAPI::fromJsonValue(m_field_public, json[QString("fieldPublic")]);
    m_field_public_isSet = !json[QString("fieldPublic")].isNull() && m_field_public_isValid;

    m_field_required_isValid = ::OpenAPI::fromJsonValue(m_field_required, json[QString("fieldRequired")]);
    m_field_required_isSet = !json[QString("fieldRequired")].isNull() && m_field_required_isValid;

    m_field_type_isValid = ::OpenAPI::fromJsonValue(m_field_type, json[QString("fieldType")]);
    m_field_type_isSet = !json[QString("fieldType")].isNull() && m_field_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lead_question_isValid = ::OpenAPI::fromJsonValue(m_lead_question, json[QString("leadQuestion")]);
    m_lead_question_isSet = !json[QString("leadQuestion")].isNull() && m_lead_question_isValid;

    m_lead_question_weight_isValid = ::OpenAPI::fromJsonValue(m_lead_question_weight, json[QString("leadQuestionWeight")]);
    m_lead_question_weight_isSet = !json[QString("leadQuestionWeight")].isNull() && m_lead_question_weight_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_sort_key_isValid = ::OpenAPI::fromJsonValue(m_sort_key, json[QString("sortKey")]);
    m_sort_key_isSet = !json[QString("sortKey")].isNull() && m_sort_key_isValid;
}

QString OAICustomFieldDefinitionViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomFieldDefinitionViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_field_key_isSet) {
        obj.insert(QString("fieldKey"), ::OpenAPI::toJsonValue(m_field_key));
    }
    if (m_field_label_isSet) {
        obj.insert(QString("fieldLabel"), ::OpenAPI::toJsonValue(m_field_label));
    }
    if (m_field_length_isSet) {
        obj.insert(QString("fieldLength"), ::OpenAPI::toJsonValue(m_field_length));
    }
    if (m_field_list_items.size() > 0) {
        obj.insert(QString("fieldListItems"), ::OpenAPI::toJsonValue(m_field_list_items));
    }
    if (m_field_name_isSet) {
        obj.insert(QString("fieldName"), ::OpenAPI::toJsonValue(m_field_name));
    }
    if (m_field_public_isSet) {
        obj.insert(QString("fieldPublic"), ::OpenAPI::toJsonValue(m_field_public));
    }
    if (m_field_required_isSet) {
        obj.insert(QString("fieldRequired"), ::OpenAPI::toJsonValue(m_field_required));
    }
    if (m_field_type_isSet) {
        obj.insert(QString("fieldType"), ::OpenAPI::toJsonValue(m_field_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lead_question_isSet) {
        obj.insert(QString("leadQuestion"), ::OpenAPI::toJsonValue(m_lead_question));
    }
    if (m_lead_question_weight_isSet) {
        obj.insert(QString("leadQuestionWeight"), ::OpenAPI::toJsonValue(m_lead_question_weight));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_sort_key_isSet) {
        obj.insert(QString("sortKey"), ::OpenAPI::toJsonValue(m_sort_key));
    }
    return obj;
}

QString OAICustomFieldDefinitionViewModel::getFieldKey() const {
    return m_field_key;
}
void OAICustomFieldDefinitionViewModel::setFieldKey(const QString &field_key) {
    m_field_key = field_key;
    m_field_key_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_field_key_Set() const{
    return m_field_key_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_field_key_Valid() const{
    return m_field_key_isValid;
}

QString OAICustomFieldDefinitionViewModel::getFieldLabel() const {
    return m_field_label;
}
void OAICustomFieldDefinitionViewModel::setFieldLabel(const QString &field_label) {
    m_field_label = field_label;
    m_field_label_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_field_label_Set() const{
    return m_field_label_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_field_label_Valid() const{
    return m_field_label_isValid;
}

qint32 OAICustomFieldDefinitionViewModel::getFieldLength() const {
    return m_field_length;
}
void OAICustomFieldDefinitionViewModel::setFieldLength(const qint32 &field_length) {
    m_field_length = field_length;
    m_field_length_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_field_length_Set() const{
    return m_field_length_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_field_length_Valid() const{
    return m_field_length_isValid;
}

QList<OAICustomFieldListDefinitionViewModel> OAICustomFieldDefinitionViewModel::getFieldListItems() const {
    return m_field_list_items;
}
void OAICustomFieldDefinitionViewModel::setFieldListItems(const QList<OAICustomFieldListDefinitionViewModel> &field_list_items) {
    m_field_list_items = field_list_items;
    m_field_list_items_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_field_list_items_Set() const{
    return m_field_list_items_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_field_list_items_Valid() const{
    return m_field_list_items_isValid;
}

QString OAICustomFieldDefinitionViewModel::getFieldName() const {
    return m_field_name;
}
void OAICustomFieldDefinitionViewModel::setFieldName(const QString &field_name) {
    m_field_name = field_name;
    m_field_name_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_field_name_Set() const{
    return m_field_name_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_field_name_Valid() const{
    return m_field_name_isValid;
}

bool OAICustomFieldDefinitionViewModel::isFieldPublic() const {
    return m_field_public;
}
void OAICustomFieldDefinitionViewModel::setFieldPublic(const bool &field_public) {
    m_field_public = field_public;
    m_field_public_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_field_public_Set() const{
    return m_field_public_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_field_public_Valid() const{
    return m_field_public_isValid;
}

bool OAICustomFieldDefinitionViewModel::isFieldRequired() const {
    return m_field_required;
}
void OAICustomFieldDefinitionViewModel::setFieldRequired(const bool &field_required) {
    m_field_required = field_required;
    m_field_required_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_field_required_Set() const{
    return m_field_required_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_field_required_Valid() const{
    return m_field_required_isValid;
}

QString OAICustomFieldDefinitionViewModel::getFieldType() const {
    return m_field_type;
}
void OAICustomFieldDefinitionViewModel::setFieldType(const QString &field_type) {
    m_field_type = field_type;
    m_field_type_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_field_type_Set() const{
    return m_field_type_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_field_type_Valid() const{
    return m_field_type_isValid;
}

QString OAICustomFieldDefinitionViewModel::getId() const {
    return m_id;
}
void OAICustomFieldDefinitionViewModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICustomFieldDefinitionViewModel::isLeadQuestion() const {
    return m_lead_question;
}
void OAICustomFieldDefinitionViewModel::setLeadQuestion(const bool &lead_question) {
    m_lead_question = lead_question;
    m_lead_question_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_lead_question_Set() const{
    return m_lead_question_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_lead_question_Valid() const{
    return m_lead_question_isValid;
}

double OAICustomFieldDefinitionViewModel::getLeadQuestionWeight() const {
    return m_lead_question_weight;
}
void OAICustomFieldDefinitionViewModel::setLeadQuestionWeight(const double &lead_question_weight) {
    m_lead_question_weight = lead_question_weight;
    m_lead_question_weight_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_lead_question_weight_Set() const{
    return m_lead_question_weight_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_lead_question_weight_Valid() const{
    return m_lead_question_weight_isValid;
}

QString OAICustomFieldDefinitionViewModel::getObject() const {
    return m_object;
}
void OAICustomFieldDefinitionViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_object_Valid() const{
    return m_object_isValid;
}

qint32 OAICustomFieldDefinitionViewModel::getSortKey() const {
    return m_sort_key;
}
void OAICustomFieldDefinitionViewModel::setSortKey(const qint32 &sort_key) {
    m_sort_key = sort_key;
    m_sort_key_isSet = true;
}

bool OAICustomFieldDefinitionViewModel::is_sort_key_Set() const{
    return m_sort_key_isSet;
}

bool OAICustomFieldDefinitionViewModel::is_sort_key_Valid() const{
    return m_sort_key_isValid;
}

bool OAICustomFieldDefinitionViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_list_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_question_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomFieldDefinitionViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
