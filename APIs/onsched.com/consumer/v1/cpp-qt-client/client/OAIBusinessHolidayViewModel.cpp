/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBusinessHolidayViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBusinessHolidayViewModel::OAIBusinessHolidayViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBusinessHolidayViewModel::OAIBusinessHolidayViewModel() {
    this->initializeModel();
}

OAIBusinessHolidayViewModel::~OAIBusinessHolidayViewModel() {}

void OAIBusinessHolidayViewModel::initializeModel() {

    m_business_closed_isSet = false;
    m_business_closed_isValid = false;

    m_holiday_name_isSet = false;
    m_holiday_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_public_holiday_id_isSet = false;
    m_public_holiday_id_isValid = false;
}

void OAIBusinessHolidayViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBusinessHolidayViewModel::fromJsonObject(QJsonObject json) {

    m_business_closed_isValid = ::OpenAPI::fromJsonValue(m_business_closed, json[QString("businessClosed")]);
    m_business_closed_isSet = !json[QString("businessClosed")].isNull() && m_business_closed_isValid;

    m_holiday_name_isValid = ::OpenAPI::fromJsonValue(m_holiday_name, json[QString("holidayName")]);
    m_holiday_name_isSet = !json[QString("holidayName")].isNull() && m_holiday_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_public_holiday_id_isValid = ::OpenAPI::fromJsonValue(m_public_holiday_id, json[QString("publicHolidayId")]);
    m_public_holiday_id_isSet = !json[QString("publicHolidayId")].isNull() && m_public_holiday_id_isValid;
}

QString OAIBusinessHolidayViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBusinessHolidayViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_business_closed_isSet) {
        obj.insert(QString("businessClosed"), ::OpenAPI::toJsonValue(m_business_closed));
    }
    if (m_holiday_name_isSet) {
        obj.insert(QString("holidayName"), ::OpenAPI::toJsonValue(m_holiday_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_public_holiday_id_isSet) {
        obj.insert(QString("publicHolidayId"), ::OpenAPI::toJsonValue(m_public_holiday_id));
    }
    return obj;
}

bool OAIBusinessHolidayViewModel::isBusinessClosed() const {
    return m_business_closed;
}
void OAIBusinessHolidayViewModel::setBusinessClosed(const bool &business_closed) {
    m_business_closed = business_closed;
    m_business_closed_isSet = true;
}

bool OAIBusinessHolidayViewModel::is_business_closed_Set() const{
    return m_business_closed_isSet;
}

bool OAIBusinessHolidayViewModel::is_business_closed_Valid() const{
    return m_business_closed_isValid;
}

QString OAIBusinessHolidayViewModel::getHolidayName() const {
    return m_holiday_name;
}
void OAIBusinessHolidayViewModel::setHolidayName(const QString &holiday_name) {
    m_holiday_name = holiday_name;
    m_holiday_name_isSet = true;
}

bool OAIBusinessHolidayViewModel::is_holiday_name_Set() const{
    return m_holiday_name_isSet;
}

bool OAIBusinessHolidayViewModel::is_holiday_name_Valid() const{
    return m_holiday_name_isValid;
}

QString OAIBusinessHolidayViewModel::getId() const {
    return m_id;
}
void OAIBusinessHolidayViewModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBusinessHolidayViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBusinessHolidayViewModel::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIBusinessHolidayViewModel::getPublicHolidayId() const {
    return m_public_holiday_id;
}
void OAIBusinessHolidayViewModel::setPublicHolidayId(const qint32 &public_holiday_id) {
    m_public_holiday_id = public_holiday_id;
    m_public_holiday_id_isSet = true;
}

bool OAIBusinessHolidayViewModel::is_public_holiday_id_Set() const{
    return m_public_holiday_id_isSet;
}

bool OAIBusinessHolidayViewModel::is_public_holiday_id_Valid() const{
    return m_public_holiday_id_isValid;
}

bool OAIBusinessHolidayViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holiday_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_holiday_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBusinessHolidayViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
