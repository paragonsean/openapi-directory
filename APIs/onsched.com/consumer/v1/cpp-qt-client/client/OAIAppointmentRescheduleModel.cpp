/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppointmentRescheduleModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppointmentRescheduleModel::OAIAppointmentRescheduleModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppointmentRescheduleModel::OAIAppointmentRescheduleModel() {
    this->initializeModel();
}

OAIAppointmentRescheduleModel::~OAIAppointmentRescheduleModel() {}

void OAIAppointmentRescheduleModel::initializeModel() {

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_ids_isSet = false;
    m_resource_ids_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_travel_appointment_id_isSet = false;
    m_travel_appointment_id_isValid = false;

    m_travel_time_mins_isSet = false;
    m_travel_time_mins_isValid = false;
}

void OAIAppointmentRescheduleModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppointmentRescheduleModel::fromJsonObject(QJsonObject json) {

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_ids_isValid = ::OpenAPI::fromJsonValue(m_resource_ids, json[QString("resourceIds")]);
    m_resource_ids_isSet = !json[QString("resourceIds")].isNull() && m_resource_ids_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_travel_appointment_id_isValid = ::OpenAPI::fromJsonValue(m_travel_appointment_id, json[QString("travelAppointmentId")]);
    m_travel_appointment_id_isSet = !json[QString("travelAppointmentId")].isNull() && m_travel_appointment_id_isValid;

    m_travel_time_mins_isValid = ::OpenAPI::fromJsonValue(m_travel_time_mins, json[QString("travelTimeMins")]);
    m_travel_time_mins_isSet = !json[QString("travelTimeMins")].isNull() && m_travel_time_mins_isValid;
}

QString OAIAppointmentRescheduleModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppointmentRescheduleModel::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_ids_isSet) {
        obj.insert(QString("resourceIds"), ::OpenAPI::toJsonValue(m_resource_ids));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_travel_appointment_id_isSet) {
        obj.insert(QString("travelAppointmentId"), ::OpenAPI::toJsonValue(m_travel_appointment_id));
    }
    if (m_travel_time_mins_isSet) {
        obj.insert(QString("travelTimeMins"), ::OpenAPI::toJsonValue(m_travel_time_mins));
    }
    return obj;
}

QDateTime OAIAppointmentRescheduleModel::getEndDateTime() const {
    return m_end_date_time;
}
void OAIAppointmentRescheduleModel::setEndDateTime(const QDateTime &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIAppointmentRescheduleModel::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIAppointmentRescheduleModel::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

QString OAIAppointmentRescheduleModel::getResourceId() const {
    return m_resource_id;
}
void OAIAppointmentRescheduleModel::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIAppointmentRescheduleModel::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIAppointmentRescheduleModel::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIAppointmentRescheduleModel::getResourceIds() const {
    return m_resource_ids;
}
void OAIAppointmentRescheduleModel::setResourceIds(const QString &resource_ids) {
    m_resource_ids = resource_ids;
    m_resource_ids_isSet = true;
}

bool OAIAppointmentRescheduleModel::is_resource_ids_Set() const{
    return m_resource_ids_isSet;
}

bool OAIAppointmentRescheduleModel::is_resource_ids_Valid() const{
    return m_resource_ids_isValid;
}

QString OAIAppointmentRescheduleModel::getServiceId() const {
    return m_service_id;
}
void OAIAppointmentRescheduleModel::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIAppointmentRescheduleModel::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIAppointmentRescheduleModel::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QDateTime OAIAppointmentRescheduleModel::getStartDateTime() const {
    return m_start_date_time;
}
void OAIAppointmentRescheduleModel::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIAppointmentRescheduleModel::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIAppointmentRescheduleModel::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QString OAIAppointmentRescheduleModel::getTravelAppointmentId() const {
    return m_travel_appointment_id;
}
void OAIAppointmentRescheduleModel::setTravelAppointmentId(const QString &travel_appointment_id) {
    m_travel_appointment_id = travel_appointment_id;
    m_travel_appointment_id_isSet = true;
}

bool OAIAppointmentRescheduleModel::is_travel_appointment_id_Set() const{
    return m_travel_appointment_id_isSet;
}

bool OAIAppointmentRescheduleModel::is_travel_appointment_id_Valid() const{
    return m_travel_appointment_id_isValid;
}

qint32 OAIAppointmentRescheduleModel::getTravelTimeMins() const {
    return m_travel_time_mins;
}
void OAIAppointmentRescheduleModel::setTravelTimeMins(const qint32 &travel_time_mins) {
    m_travel_time_mins = travel_time_mins;
    m_travel_time_mins_isSet = true;
}

bool OAIAppointmentRescheduleModel::is_travel_time_mins_Set() const{
    return m_travel_time_mins_isSet;
}

bool OAIAppointmentRescheduleModel::is_travel_time_mins_Valid() const{
    return m_travel_time_mins_isValid;
}

bool OAIAppointmentRescheduleModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_appointment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_time_mins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppointmentRescheduleModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
