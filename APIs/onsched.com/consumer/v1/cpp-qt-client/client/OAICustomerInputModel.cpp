/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerInputModel::OAICustomerInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerInputModel::OAICustomerInputModel() {
    this->initializeModel();
}

OAICustomerInputModel::~OAICustomerInputModel() {}

void OAICustomerInputModel::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_firstname_isSet = false;
    m_firstname_isValid = false;

    m_lastname_isSet = false;
    m_lastname_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_type_isSet = false;
    m_notification_type_isValid = false;

    m_send_lead_notification_isSet = false;
    m_send_lead_notification_isValid = false;

    m_stripe_customer_id_isSet = false;
    m_stripe_customer_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICustomerInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerInputModel::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_firstname_isValid = ::OpenAPI::fromJsonValue(m_firstname, json[QString("firstname")]);
    m_firstname_isSet = !json[QString("firstname")].isNull() && m_firstname_isValid;

    m_lastname_isValid = ::OpenAPI::fromJsonValue(m_lastname, json[QString("lastname")]);
    m_lastname_isSet = !json[QString("lastname")].isNull() && m_lastname_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_type_isValid = ::OpenAPI::fromJsonValue(m_notification_type, json[QString("notificationType")]);
    m_notification_type_isSet = !json[QString("notificationType")].isNull() && m_notification_type_isValid;

    m_send_lead_notification_isValid = ::OpenAPI::fromJsonValue(m_send_lead_notification, json[QString("sendLeadNotification")]);
    m_send_lead_notification_isSet = !json[QString("sendLeadNotification")].isNull() && m_send_lead_notification_isValid;

    m_stripe_customer_id_isValid = ::OpenAPI::fromJsonValue(m_stripe_customer_id, json[QString("stripeCustomerId")]);
    m_stripe_customer_id_isSet = !json[QString("stripeCustomerId")].isNull() && m_stripe_customer_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICustomerInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_custom_fields.isSet()) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_firstname_isSet) {
        obj.insert(QString("firstname"), ::OpenAPI::toJsonValue(m_firstname));
    }
    if (m_lastname_isSet) {
        obj.insert(QString("lastname"), ::OpenAPI::toJsonValue(m_lastname));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_type_isSet) {
        obj.insert(QString("notificationType"), ::OpenAPI::toJsonValue(m_notification_type));
    }
    if (m_send_lead_notification_isSet) {
        obj.insert(QString("sendLeadNotification"), ::OpenAPI::toJsonValue(m_send_lead_notification));
    }
    if (m_stripe_customer_id_isSet) {
        obj.insert(QString("stripeCustomerId"), ::OpenAPI::toJsonValue(m_stripe_customer_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAddressInputModel OAICustomerInputModel::getAddress() const {
    return m_address;
}
void OAICustomerInputModel::setAddress(const OAIAddressInputModel &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAICustomerInputModel::is_address_Set() const{
    return m_address_isSet;
}

bool OAICustomerInputModel::is_address_Valid() const{
    return m_address_isValid;
}

OAIContactInputModel OAICustomerInputModel::getContact() const {
    return m_contact;
}
void OAICustomerInputModel::setContact(const OAIContactInputModel &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAICustomerInputModel::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAICustomerInputModel::is_contact_Valid() const{
    return m_contact_isValid;
}

OAICustomFieldInputModel OAICustomerInputModel::getCustomFields() const {
    return m_custom_fields;
}
void OAICustomerInputModel::setCustomFields(const OAICustomFieldInputModel &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICustomerInputModel::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICustomerInputModel::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAICustomerInputModel::getEmail() const {
    return m_email;
}
void OAICustomerInputModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICustomerInputModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAICustomerInputModel::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICustomerInputModel::getFirstname() const {
    return m_firstname;
}
void OAICustomerInputModel::setFirstname(const QString &firstname) {
    m_firstname = firstname;
    m_firstname_isSet = true;
}

bool OAICustomerInputModel::is_firstname_Set() const{
    return m_firstname_isSet;
}

bool OAICustomerInputModel::is_firstname_Valid() const{
    return m_firstname_isValid;
}

QString OAICustomerInputModel::getLastname() const {
    return m_lastname;
}
void OAICustomerInputModel::setLastname(const QString &lastname) {
    m_lastname = lastname;
    m_lastname_isSet = true;
}

bool OAICustomerInputModel::is_lastname_Set() const{
    return m_lastname_isSet;
}

bool OAICustomerInputModel::is_lastname_Valid() const{
    return m_lastname_isValid;
}

QString OAICustomerInputModel::getLocationId() const {
    return m_location_id;
}
void OAICustomerInputModel::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAICustomerInputModel::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAICustomerInputModel::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAICustomerInputModel::getName() const {
    return m_name;
}
void OAICustomerInputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomerInputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomerInputModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomerInputModel::getNotificationType() const {
    return m_notification_type;
}
void OAICustomerInputModel::setNotificationType(const QString &notification_type) {
    m_notification_type = notification_type;
    m_notification_type_isSet = true;
}

bool OAICustomerInputModel::is_notification_type_Set() const{
    return m_notification_type_isSet;
}

bool OAICustomerInputModel::is_notification_type_Valid() const{
    return m_notification_type_isValid;
}

bool OAICustomerInputModel::isSendLeadNotification() const {
    return m_send_lead_notification;
}
void OAICustomerInputModel::setSendLeadNotification(const bool &send_lead_notification) {
    m_send_lead_notification = send_lead_notification;
    m_send_lead_notification_isSet = true;
}

bool OAICustomerInputModel::is_send_lead_notification_Set() const{
    return m_send_lead_notification_isSet;
}

bool OAICustomerInputModel::is_send_lead_notification_Valid() const{
    return m_send_lead_notification_isValid;
}

QString OAICustomerInputModel::getStripeCustomerId() const {
    return m_stripe_customer_id;
}
void OAICustomerInputModel::setStripeCustomerId(const QString &stripe_customer_id) {
    m_stripe_customer_id = stripe_customer_id;
    m_stripe_customer_id_isSet = true;
}

bool OAICustomerInputModel::is_stripe_customer_id_Set() const{
    return m_stripe_customer_id_isSet;
}

bool OAICustomerInputModel::is_stripe_customer_id_Valid() const{
    return m_stripe_customer_id_isValid;
}

qint32 OAICustomerInputModel::getType() const {
    return m_type;
}
void OAICustomerInputModel::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomerInputModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomerInputModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICustomerInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_lead_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
