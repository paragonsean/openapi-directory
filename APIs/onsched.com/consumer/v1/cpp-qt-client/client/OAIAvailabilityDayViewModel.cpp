/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailabilityDayViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailabilityDayViewModel::OAIAvailabilityDayViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailabilityDayViewModel::OAIAvailabilityDayViewModel() {
    this->initializeModel();
}

OAIAvailabilityDayViewModel::~OAIAvailabilityDayViewModel() {}

void OAIAvailabilityDayViewModel::initializeModel() {

    m_available_days_isSet = false;
    m_available_days_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_resource_description_isSet = false;
    m_resource_description_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_service_description_isSet = false;
    m_service_description_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_tz_requested_isSet = false;
    m_tz_requested_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAvailabilityDayViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailabilityDayViewModel::fromJsonObject(QJsonObject json) {

    m_available_days_isValid = ::OpenAPI::fromJsonValue(m_available_days, json[QString("availableDays")]);
    m_available_days_isSet = !json[QString("availableDays")].isNull() && m_available_days_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_resource_description_isValid = ::OpenAPI::fromJsonValue(m_resource_description, json[QString("resourceDescription")]);
    m_resource_description_isSet = !json[QString("resourceDescription")].isNull() && m_resource_description_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_service_description_isValid = ::OpenAPI::fromJsonValue(m_service_description, json[QString("serviceDescription")]);
    m_service_description_isSet = !json[QString("serviceDescription")].isNull() && m_service_description_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_tz_requested_isValid = ::OpenAPI::fromJsonValue(m_tz_requested, json[QString("tzRequested")]);
    m_tz_requested_isSet = !json[QString("tzRequested")].isNull() && m_tz_requested_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAvailabilityDayViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailabilityDayViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_available_days.size() > 0) {
        obj.insert(QString("availableDays"), ::OpenAPI::toJsonValue(m_available_days));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_resource_description_isSet) {
        obj.insert(QString("resourceDescription"), ::OpenAPI::toJsonValue(m_resource_description));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_service_description_isSet) {
        obj.insert(QString("serviceDescription"), ::OpenAPI::toJsonValue(m_service_description));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_tz_requested_isSet) {
        obj.insert(QString("tzRequested"), ::OpenAPI::toJsonValue(m_tz_requested));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<OAIAvailableDayViewModel> OAIAvailabilityDayViewModel::getAvailableDays() const {
    return m_available_days;
}
void OAIAvailabilityDayViewModel::setAvailableDays(const QList<OAIAvailableDayViewModel> &available_days) {
    m_available_days = available_days;
    m_available_days_isSet = true;
}

bool OAIAvailabilityDayViewModel::is_available_days_Set() const{
    return m_available_days_isSet;
}

bool OAIAvailabilityDayViewModel::is_available_days_Valid() const{
    return m_available_days_isValid;
}

QString OAIAvailabilityDayViewModel::getObject() const {
    return m_object;
}
void OAIAvailabilityDayViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIAvailabilityDayViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIAvailabilityDayViewModel::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIAvailabilityDayViewModel::getResourceDescription() const {
    return m_resource_description;
}
void OAIAvailabilityDayViewModel::setResourceDescription(const QString &resource_description) {
    m_resource_description = resource_description;
    m_resource_description_isSet = true;
}

bool OAIAvailabilityDayViewModel::is_resource_description_Set() const{
    return m_resource_description_isSet;
}

bool OAIAvailabilityDayViewModel::is_resource_description_Valid() const{
    return m_resource_description_isValid;
}

QString OAIAvailabilityDayViewModel::getResourceId() const {
    return m_resource_id;
}
void OAIAvailabilityDayViewModel::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIAvailabilityDayViewModel::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIAvailabilityDayViewModel::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIAvailabilityDayViewModel::getResourceName() const {
    return m_resource_name;
}
void OAIAvailabilityDayViewModel::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIAvailabilityDayViewModel::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIAvailabilityDayViewModel::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIAvailabilityDayViewModel::getServiceDescription() const {
    return m_service_description;
}
void OAIAvailabilityDayViewModel::setServiceDescription(const QString &service_description) {
    m_service_description = service_description;
    m_service_description_isSet = true;
}

bool OAIAvailabilityDayViewModel::is_service_description_Set() const{
    return m_service_description_isSet;
}

bool OAIAvailabilityDayViewModel::is_service_description_Valid() const{
    return m_service_description_isValid;
}

QString OAIAvailabilityDayViewModel::getServiceId() const {
    return m_service_id;
}
void OAIAvailabilityDayViewModel::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIAvailabilityDayViewModel::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIAvailabilityDayViewModel::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIAvailabilityDayViewModel::getServiceName() const {
    return m_service_name;
}
void OAIAvailabilityDayViewModel::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIAvailabilityDayViewModel::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIAvailabilityDayViewModel::is_service_name_Valid() const{
    return m_service_name_isValid;
}

qint32 OAIAvailabilityDayViewModel::getTzRequested() const {
    return m_tz_requested;
}
void OAIAvailabilityDayViewModel::setTzRequested(const qint32 &tz_requested) {
    m_tz_requested = tz_requested;
    m_tz_requested_isSet = true;
}

bool OAIAvailabilityDayViewModel::is_tz_requested_Set() const{
    return m_tz_requested_isSet;
}

bool OAIAvailabilityDayViewModel::is_tz_requested_Valid() const{
    return m_tz_requested_isValid;
}

QString OAIAvailabilityDayViewModel::getUrl() const {
    return m_url;
}
void OAIAvailabilityDayViewModel::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAvailabilityDayViewModel::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAvailabilityDayViewModel::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAvailabilityDayViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tz_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailabilityDayViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
