/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailableDayViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailableDayViewModel::OAIAvailableDayViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailableDayViewModel::OAIAvailableDayViewModel() {
    this->initializeModel();
}

OAIAvailableDayViewModel::~OAIAvailableDayViewModel() {}

void OAIAvailableDayViewModel::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_booking_count_isSet = false;
    m_booking_count_isValid = false;

    m_booking_limit_isSet = false;
    m_booking_limit_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;
}

void OAIAvailableDayViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailableDayViewModel::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_booking_count_isValid = ::OpenAPI::fromJsonValue(m_booking_count, json[QString("bookingCount")]);
    m_booking_count_isSet = !json[QString("bookingCount")].isNull() && m_booking_count_isValid;

    m_booking_limit_isValid = ::OpenAPI::fromJsonValue(m_booking_limit, json[QString("bookingLimit")]);
    m_booking_limit_isSet = !json[QString("bookingLimit")].isNull() && m_booking_limit_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;
}

QString OAIAvailableDayViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailableDayViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_booking_count_isSet) {
        obj.insert(QString("bookingCount"), ::OpenAPI::toJsonValue(m_booking_count));
    }
    if (m_booking_limit_isSet) {
        obj.insert(QString("bookingLimit"), ::OpenAPI::toJsonValue(m_booking_limit));
    }
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    return obj;
}

bool OAIAvailableDayViewModel::isAvailable() const {
    return m_available;
}
void OAIAvailableDayViewModel::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIAvailableDayViewModel::is_available_Set() const{
    return m_available_isSet;
}

bool OAIAvailableDayViewModel::is_available_Valid() const{
    return m_available_isValid;
}

qint32 OAIAvailableDayViewModel::getBookingCount() const {
    return m_booking_count;
}
void OAIAvailableDayViewModel::setBookingCount(const qint32 &booking_count) {
    m_booking_count = booking_count;
    m_booking_count_isSet = true;
}

bool OAIAvailableDayViewModel::is_booking_count_Set() const{
    return m_booking_count_isSet;
}

bool OAIAvailableDayViewModel::is_booking_count_Valid() const{
    return m_booking_count_isValid;
}

qint32 OAIAvailableDayViewModel::getBookingLimit() const {
    return m_booking_limit;
}
void OAIAvailableDayViewModel::setBookingLimit(const qint32 &booking_limit) {
    m_booking_limit = booking_limit;
    m_booking_limit_isSet = true;
}

bool OAIAvailableDayViewModel::is_booking_limit_Set() const{
    return m_booking_limit_isSet;
}

bool OAIAvailableDayViewModel::is_booking_limit_Valid() const{
    return m_booking_limit_isValid;
}

bool OAIAvailableDayViewModel::isClosed() const {
    return m_closed;
}
void OAIAvailableDayViewModel::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIAvailableDayViewModel::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIAvailableDayViewModel::is_closed_Valid() const{
    return m_closed_isValid;
}

QString OAIAvailableDayViewModel::getDate() const {
    return m_date;
}
void OAIAvailableDayViewModel::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAvailableDayViewModel::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAvailableDayViewModel::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIAvailableDayViewModel::getObject() const {
    return m_object;
}
void OAIAvailableDayViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIAvailableDayViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIAvailableDayViewModel::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIAvailableDayViewModel::getReason() const {
    return m_reason;
}
void OAIAvailableDayViewModel::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIAvailableDayViewModel::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIAvailableDayViewModel::is_reason_Valid() const{
    return m_reason_isValid;
}

qint32 OAIAvailableDayViewModel::getReasonCode() const {
    return m_reason_code;
}
void OAIAvailableDayViewModel::setReasonCode(const qint32 &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIAvailableDayViewModel::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIAvailableDayViewModel::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

bool OAIAvailableDayViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailableDayViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
