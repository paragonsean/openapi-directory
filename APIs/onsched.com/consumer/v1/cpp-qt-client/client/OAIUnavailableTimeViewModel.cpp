/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnavailableTimeViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnavailableTimeViewModel::OAIUnavailableTimeViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnavailableTimeViewModel::OAIUnavailableTimeViewModel() {
    this->initializeModel();
}

OAIUnavailableTimeViewModel::~OAIUnavailableTimeViewModel() {}

void OAIUnavailableTimeViewModel::initializeModel() {

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_from_time_isSet = false;
    m_from_time_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_object_name_isSet = false;
    m_object_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_to_time_isSet = false;
    m_to_time_isValid = false;

    m_tz_offset_isSet = false;
    m_tz_offset_isValid = false;
}

void OAIUnavailableTimeViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnavailableTimeViewModel::fromJsonObject(QJsonObject json) {

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendarId")]);
    m_calendar_id_isSet = !json[QString("calendarId")].isNull() && m_calendar_id_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_from_time_isValid = ::OpenAPI::fromJsonValue(m_from_time, json[QString("fromTime")]);
    m_from_time_isSet = !json[QString("fromTime")].isNull() && m_from_time_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_object_name_isValid = ::OpenAPI::fromJsonValue(m_object_name, json[QString("objectName")]);
    m_object_name_isSet = !json[QString("objectName")].isNull() && m_object_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("reasonCode")]);
    m_reason_code_isSet = !json[QString("reasonCode")].isNull() && m_reason_code_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_to_time_isValid = ::OpenAPI::fromJsonValue(m_to_time, json[QString("toTime")]);
    m_to_time_isSet = !json[QString("toTime")].isNull() && m_to_time_isValid;

    m_tz_offset_isValid = ::OpenAPI::fromJsonValue(m_tz_offset, json[QString("tzOffset")]);
    m_tz_offset_isSet = !json[QString("tzOffset")].isNull() && m_tz_offset_isValid;
}

QString OAIUnavailableTimeViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnavailableTimeViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendarId"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_from_time_isSet) {
        obj.insert(QString("fromTime"), ::OpenAPI::toJsonValue(m_from_time));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_object_name_isSet) {
        obj.insert(QString("objectName"), ::OpenAPI::toJsonValue(m_object_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("reasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_to_time_isSet) {
        obj.insert(QString("toTime"), ::OpenAPI::toJsonValue(m_to_time));
    }
    if (m_tz_offset_isSet) {
        obj.insert(QString("tzOffset"), ::OpenAPI::toJsonValue(m_tz_offset));
    }
    return obj;
}

QString OAIUnavailableTimeViewModel::getCalendarId() const {
    return m_calendar_id;
}
void OAIUnavailableTimeViewModel::setCalendarId(const QString &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAIUnavailableTimeViewModel::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

QString OAIUnavailableTimeViewModel::getDate() const {
    return m_date;
}
void OAIUnavailableTimeViewModel::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_date_Set() const{
    return m_date_isSet;
}

bool OAIUnavailableTimeViewModel::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIUnavailableTimeViewModel::getEndDateTime() const {
    return m_end_date_time;
}
void OAIUnavailableTimeViewModel::setEndDateTime(const QString &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIUnavailableTimeViewModel::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

qint32 OAIUnavailableTimeViewModel::getEntityId() const {
    return m_entity_id;
}
void OAIUnavailableTimeViewModel::setEntityId(const qint32 &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIUnavailableTimeViewModel::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIUnavailableTimeViewModel::getEntityType() const {
    return m_entity_type;
}
void OAIUnavailableTimeViewModel::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIUnavailableTimeViewModel::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

qint32 OAIUnavailableTimeViewModel::getFromTime() const {
    return m_from_time;
}
void OAIUnavailableTimeViewModel::setFromTime(const qint32 &from_time) {
    m_from_time = from_time;
    m_from_time_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_from_time_Set() const{
    return m_from_time_isSet;
}

bool OAIUnavailableTimeViewModel::is_from_time_Valid() const{
    return m_from_time_isValid;
}

QString OAIUnavailableTimeViewModel::getLocationId() const {
    return m_location_id;
}
void OAIUnavailableTimeViewModel::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIUnavailableTimeViewModel::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIUnavailableTimeViewModel::getObjectName() const {
    return m_object_name;
}
void OAIUnavailableTimeViewModel::setObjectName(const QString &object_name) {
    m_object_name = object_name;
    m_object_name_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_object_name_Set() const{
    return m_object_name_isSet;
}

bool OAIUnavailableTimeViewModel::is_object_name_Valid() const{
    return m_object_name_isValid;
}

QString OAIUnavailableTimeViewModel::getReason() const {
    return m_reason;
}
void OAIUnavailableTimeViewModel::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIUnavailableTimeViewModel::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIUnavailableTimeViewModel::getReasonCode() const {
    return m_reason_code;
}
void OAIUnavailableTimeViewModel::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIUnavailableTimeViewModel::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

QString OAIUnavailableTimeViewModel::getResourceId() const {
    return m_resource_id;
}
void OAIUnavailableTimeViewModel::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIUnavailableTimeViewModel::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIUnavailableTimeViewModel::getResourceName() const {
    return m_resource_name;
}
void OAIUnavailableTimeViewModel::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIUnavailableTimeViewModel::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIUnavailableTimeViewModel::getServiceId() const {
    return m_service_id;
}
void OAIUnavailableTimeViewModel::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIUnavailableTimeViewModel::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIUnavailableTimeViewModel::getServiceName() const {
    return m_service_name;
}
void OAIUnavailableTimeViewModel::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIUnavailableTimeViewModel::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIUnavailableTimeViewModel::getStartDateTime() const {
    return m_start_date_time;
}
void OAIUnavailableTimeViewModel::setStartDateTime(const QString &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIUnavailableTimeViewModel::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

qint32 OAIUnavailableTimeViewModel::getToTime() const {
    return m_to_time;
}
void OAIUnavailableTimeViewModel::setToTime(const qint32 &to_time) {
    m_to_time = to_time;
    m_to_time_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_to_time_Set() const{
    return m_to_time_isSet;
}

bool OAIUnavailableTimeViewModel::is_to_time_Valid() const{
    return m_to_time_isValid;
}

qint32 OAIUnavailableTimeViewModel::getTzOffset() const {
    return m_tz_offset;
}
void OAIUnavailableTimeViewModel::setTzOffset(const qint32 &tz_offset) {
    m_tz_offset = tz_offset;
    m_tz_offset_isSet = true;
}

bool OAIUnavailableTimeViewModel::is_tz_offset_Set() const{
    return m_tz_offset_isSet;
}

bool OAIUnavailableTimeViewModel::is_tz_offset_Valid() const{
    return m_tz_offset_isValid;
}

bool OAIUnavailableTimeViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tz_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnavailableTimeViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
