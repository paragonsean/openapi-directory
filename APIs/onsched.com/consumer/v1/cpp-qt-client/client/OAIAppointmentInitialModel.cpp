/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppointmentInitialModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppointmentInitialModel::OAIAppointmentInitialModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppointmentInitialModel::OAIAppointmentInitialModel() {
    this->initializeModel();
}

OAIAppointmentInitialModel::~OAIAppointmentInitialModel() {}

void OAIAppointmentInitialModel::initializeModel() {

    m_appointment_booking_fields_isSet = false;
    m_appointment_booking_fields_isValid = false;

    m_booked_by_isSet = false;
    m_booked_by_isValid = false;

    m_booking_window_id_isSet = false;
    m_booking_window_id_isValid = false;

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_customer_booking_fields_isSet = false;
    m_customer_booking_fields_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_customer_message_isSet = false;
    m_customer_message_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_group_size_isSet = false;
    m_group_size_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_phone_type_isSet = false;
    m_phone_type_isValid = false;

    m_resource_group_id_isSet = false;
    m_resource_group_id_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_ids_isSet = false;
    m_resource_ids_isValid = false;

    m_service_allocation_id_isSet = false;
    m_service_allocation_id_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_timezone_name_isSet = false;
    m_timezone_name_isValid = false;

    m_travel_appointment_id_isSet = false;
    m_travel_appointment_id_isValid = false;

    m_travel_time_mins_isSet = false;
    m_travel_time_mins_isValid = false;
}

void OAIAppointmentInitialModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppointmentInitialModel::fromJsonObject(QJsonObject json) {

    m_appointment_booking_fields_isValid = ::OpenAPI::fromJsonValue(m_appointment_booking_fields, json[QString("appointmentBookingFields")]);
    m_appointment_booking_fields_isSet = !json[QString("appointmentBookingFields")].isNull() && m_appointment_booking_fields_isValid;

    m_booked_by_isValid = ::OpenAPI::fromJsonValue(m_booked_by, json[QString("bookedBy")]);
    m_booked_by_isSet = !json[QString("bookedBy")].isNull() && m_booked_by_isValid;

    m_booking_window_id_isValid = ::OpenAPI::fromJsonValue(m_booking_window_id, json[QString("bookingWindowId")]);
    m_booking_window_id_isSet = !json[QString("bookingWindowId")].isNull() && m_booking_window_id_isValid;

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendarId")]);
    m_calendar_id_isSet = !json[QString("calendarId")].isNull() && m_calendar_id_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_customer_booking_fields_isValid = ::OpenAPI::fromJsonValue(m_customer_booking_fields, json[QString("customerBookingFields")]);
    m_customer_booking_fields_isSet = !json[QString("customerBookingFields")].isNull() && m_customer_booking_fields_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_customer_message_isValid = ::OpenAPI::fromJsonValue(m_customer_message, json[QString("customerMessage")]);
    m_customer_message_isSet = !json[QString("customerMessage")].isNull() && m_customer_message_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_group_size_isValid = ::OpenAPI::fromJsonValue(m_group_size, json[QString("groupSize")]);
    m_group_size_isSet = !json[QString("groupSize")].isNull() && m_group_size_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_phone_type_isValid = ::OpenAPI::fromJsonValue(m_phone_type, json[QString("phoneType")]);
    m_phone_type_isSet = !json[QString("phoneType")].isNull() && m_phone_type_isValid;

    m_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_resource_group_id, json[QString("resourceGroupId")]);
    m_resource_group_id_isSet = !json[QString("resourceGroupId")].isNull() && m_resource_group_id_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_ids_isValid = ::OpenAPI::fromJsonValue(m_resource_ids, json[QString("resourceIds")]);
    m_resource_ids_isSet = !json[QString("resourceIds")].isNull() && m_resource_ids_isValid;

    m_service_allocation_id_isValid = ::OpenAPI::fromJsonValue(m_service_allocation_id, json[QString("serviceAllocationId")]);
    m_service_allocation_id_isSet = !json[QString("serviceAllocationId")].isNull() && m_service_allocation_id_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_timezone_name_isValid = ::OpenAPI::fromJsonValue(m_timezone_name, json[QString("timezoneName")]);
    m_timezone_name_isSet = !json[QString("timezoneName")].isNull() && m_timezone_name_isValid;

    m_travel_appointment_id_isValid = ::OpenAPI::fromJsonValue(m_travel_appointment_id, json[QString("travelAppointmentId")]);
    m_travel_appointment_id_isSet = !json[QString("travelAppointmentId")].isNull() && m_travel_appointment_id_isValid;

    m_travel_time_mins_isValid = ::OpenAPI::fromJsonValue(m_travel_time_mins, json[QString("travelTimeMins")]);
    m_travel_time_mins_isSet = !json[QString("travelTimeMins")].isNull() && m_travel_time_mins_isValid;
}

QString OAIAppointmentInitialModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppointmentInitialModel::asJsonObject() const {
    QJsonObject obj;
    if (m_appointment_booking_fields.size() > 0) {
        obj.insert(QString("appointmentBookingFields"), ::OpenAPI::toJsonValue(m_appointment_booking_fields));
    }
    if (m_booked_by_isSet) {
        obj.insert(QString("bookedBy"), ::OpenAPI::toJsonValue(m_booked_by));
    }
    if (m_booking_window_id_isSet) {
        obj.insert(QString("bookingWindowId"), ::OpenAPI::toJsonValue(m_booking_window_id));
    }
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendarId"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_custom_fields.isSet()) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_customer_booking_fields.size() > 0) {
        obj.insert(QString("customerBookingFields"), ::OpenAPI::toJsonValue(m_customer_booking_fields));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_customer_message_isSet) {
        obj.insert(QString("customerMessage"), ::OpenAPI::toJsonValue(m_customer_message));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_group_size_isSet) {
        obj.insert(QString("groupSize"), ::OpenAPI::toJsonValue(m_group_size));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_phone_type_isSet) {
        obj.insert(QString("phoneType"), ::OpenAPI::toJsonValue(m_phone_type));
    }
    if (m_resource_group_id_isSet) {
        obj.insert(QString("resourceGroupId"), ::OpenAPI::toJsonValue(m_resource_group_id));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_ids_isSet) {
        obj.insert(QString("resourceIds"), ::OpenAPI::toJsonValue(m_resource_ids));
    }
    if (m_service_allocation_id_isSet) {
        obj.insert(QString("serviceAllocationId"), ::OpenAPI::toJsonValue(m_service_allocation_id));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_timezone_name_isSet) {
        obj.insert(QString("timezoneName"), ::OpenAPI::toJsonValue(m_timezone_name));
    }
    if (m_travel_appointment_id_isSet) {
        obj.insert(QString("travelAppointmentId"), ::OpenAPI::toJsonValue(m_travel_appointment_id));
    }
    if (m_travel_time_mins_isSet) {
        obj.insert(QString("travelTimeMins"), ::OpenAPI::toJsonValue(m_travel_time_mins));
    }
    return obj;
}

QList<OAIBookingFieldItem> OAIAppointmentInitialModel::getAppointmentBookingFields() const {
    return m_appointment_booking_fields;
}
void OAIAppointmentInitialModel::setAppointmentBookingFields(const QList<OAIBookingFieldItem> &appointment_booking_fields) {
    m_appointment_booking_fields = appointment_booking_fields;
    m_appointment_booking_fields_isSet = true;
}

bool OAIAppointmentInitialModel::is_appointment_booking_fields_Set() const{
    return m_appointment_booking_fields_isSet;
}

bool OAIAppointmentInitialModel::is_appointment_booking_fields_Valid() const{
    return m_appointment_booking_fields_isValid;
}

QString OAIAppointmentInitialModel::getBookedBy() const {
    return m_booked_by;
}
void OAIAppointmentInitialModel::setBookedBy(const QString &booked_by) {
    m_booked_by = booked_by;
    m_booked_by_isSet = true;
}

bool OAIAppointmentInitialModel::is_booked_by_Set() const{
    return m_booked_by_isSet;
}

bool OAIAppointmentInitialModel::is_booked_by_Valid() const{
    return m_booked_by_isValid;
}

QString OAIAppointmentInitialModel::getBookingWindowId() const {
    return m_booking_window_id;
}
void OAIAppointmentInitialModel::setBookingWindowId(const QString &booking_window_id) {
    m_booking_window_id = booking_window_id;
    m_booking_window_id_isSet = true;
}

bool OAIAppointmentInitialModel::is_booking_window_id_Set() const{
    return m_booking_window_id_isSet;
}

bool OAIAppointmentInitialModel::is_booking_window_id_Valid() const{
    return m_booking_window_id_isValid;
}

QString OAIAppointmentInitialModel::getCalendarId() const {
    return m_calendar_id;
}
void OAIAppointmentInitialModel::setCalendarId(const QString &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAIAppointmentInitialModel::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAIAppointmentInitialModel::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

OAICustomFieldInputModel OAIAppointmentInitialModel::getCustomFields() const {
    return m_custom_fields;
}
void OAIAppointmentInitialModel::setCustomFields(const OAICustomFieldInputModel &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIAppointmentInitialModel::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIAppointmentInitialModel::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QList<OAIBookingFieldItem> OAIAppointmentInitialModel::getCustomerBookingFields() const {
    return m_customer_booking_fields;
}
void OAIAppointmentInitialModel::setCustomerBookingFields(const QList<OAIBookingFieldItem> &customer_booking_fields) {
    m_customer_booking_fields = customer_booking_fields;
    m_customer_booking_fields_isSet = true;
}

bool OAIAppointmentInitialModel::is_customer_booking_fields_Set() const{
    return m_customer_booking_fields_isSet;
}

bool OAIAppointmentInitialModel::is_customer_booking_fields_Valid() const{
    return m_customer_booking_fields_isValid;
}

QString OAIAppointmentInitialModel::getCustomerId() const {
    return m_customer_id;
}
void OAIAppointmentInitialModel::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIAppointmentInitialModel::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIAppointmentInitialModel::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIAppointmentInitialModel::getCustomerMessage() const {
    return m_customer_message;
}
void OAIAppointmentInitialModel::setCustomerMessage(const QString &customer_message) {
    m_customer_message = customer_message;
    m_customer_message_isSet = true;
}

bool OAIAppointmentInitialModel::is_customer_message_Set() const{
    return m_customer_message_isSet;
}

bool OAIAppointmentInitialModel::is_customer_message_Valid() const{
    return m_customer_message_isValid;
}

QString OAIAppointmentInitialModel::getEmail() const {
    return m_email;
}
void OAIAppointmentInitialModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAppointmentInitialModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAppointmentInitialModel::is_email_Valid() const{
    return m_email_isValid;
}

QDateTime OAIAppointmentInitialModel::getEndDateTime() const {
    return m_end_date_time;
}
void OAIAppointmentInitialModel::setEndDateTime(const QDateTime &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIAppointmentInitialModel::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIAppointmentInitialModel::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

qint32 OAIAppointmentInitialModel::getGroupSize() const {
    return m_group_size;
}
void OAIAppointmentInitialModel::setGroupSize(const qint32 &group_size) {
    m_group_size = group_size;
    m_group_size_isSet = true;
}

bool OAIAppointmentInitialModel::is_group_size_Set() const{
    return m_group_size_isSet;
}

bool OAIAppointmentInitialModel::is_group_size_Valid() const{
    return m_group_size_isValid;
}

QString OAIAppointmentInitialModel::getLocation() const {
    return m_location;
}
void OAIAppointmentInitialModel::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAppointmentInitialModel::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAppointmentInitialModel::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIAppointmentInitialModel::getLocationId() const {
    return m_location_id;
}
void OAIAppointmentInitialModel::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIAppointmentInitialModel::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIAppointmentInitialModel::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIAppointmentInitialModel::getName() const {
    return m_name;
}
void OAIAppointmentInitialModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAppointmentInitialModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAppointmentInitialModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAppointmentInitialModel::getNotes() const {
    return m_notes;
}
void OAIAppointmentInitialModel::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIAppointmentInitialModel::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIAppointmentInitialModel::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIAppointmentInitialModel::getPhone() const {
    return m_phone;
}
void OAIAppointmentInitialModel::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIAppointmentInitialModel::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIAppointmentInitialModel::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIAppointmentInitialModel::getPhoneType() const {
    return m_phone_type;
}
void OAIAppointmentInitialModel::setPhoneType(const QString &phone_type) {
    m_phone_type = phone_type;
    m_phone_type_isSet = true;
}

bool OAIAppointmentInitialModel::is_phone_type_Set() const{
    return m_phone_type_isSet;
}

bool OAIAppointmentInitialModel::is_phone_type_Valid() const{
    return m_phone_type_isValid;
}

QString OAIAppointmentInitialModel::getResourceGroupId() const {
    return m_resource_group_id;
}
void OAIAppointmentInitialModel::setResourceGroupId(const QString &resource_group_id) {
    m_resource_group_id = resource_group_id;
    m_resource_group_id_isSet = true;
}

bool OAIAppointmentInitialModel::is_resource_group_id_Set() const{
    return m_resource_group_id_isSet;
}

bool OAIAppointmentInitialModel::is_resource_group_id_Valid() const{
    return m_resource_group_id_isValid;
}

QString OAIAppointmentInitialModel::getResourceId() const {
    return m_resource_id;
}
void OAIAppointmentInitialModel::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIAppointmentInitialModel::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIAppointmentInitialModel::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIAppointmentInitialModel::getResourceIds() const {
    return m_resource_ids;
}
void OAIAppointmentInitialModel::setResourceIds(const QString &resource_ids) {
    m_resource_ids = resource_ids;
    m_resource_ids_isSet = true;
}

bool OAIAppointmentInitialModel::is_resource_ids_Set() const{
    return m_resource_ids_isSet;
}

bool OAIAppointmentInitialModel::is_resource_ids_Valid() const{
    return m_resource_ids_isValid;
}

QString OAIAppointmentInitialModel::getServiceAllocationId() const {
    return m_service_allocation_id;
}
void OAIAppointmentInitialModel::setServiceAllocationId(const QString &service_allocation_id) {
    m_service_allocation_id = service_allocation_id;
    m_service_allocation_id_isSet = true;
}

bool OAIAppointmentInitialModel::is_service_allocation_id_Set() const{
    return m_service_allocation_id_isSet;
}

bool OAIAppointmentInitialModel::is_service_allocation_id_Valid() const{
    return m_service_allocation_id_isValid;
}

QString OAIAppointmentInitialModel::getServiceId() const {
    return m_service_id;
}
void OAIAppointmentInitialModel::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIAppointmentInitialModel::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIAppointmentInitialModel::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QDateTime OAIAppointmentInitialModel::getStartDateTime() const {
    return m_start_date_time;
}
void OAIAppointmentInitialModel::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIAppointmentInitialModel::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIAppointmentInitialModel::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QString OAIAppointmentInitialModel::getTimezoneName() const {
    return m_timezone_name;
}
void OAIAppointmentInitialModel::setTimezoneName(const QString &timezone_name) {
    m_timezone_name = timezone_name;
    m_timezone_name_isSet = true;
}

bool OAIAppointmentInitialModel::is_timezone_name_Set() const{
    return m_timezone_name_isSet;
}

bool OAIAppointmentInitialModel::is_timezone_name_Valid() const{
    return m_timezone_name_isValid;
}

QString OAIAppointmentInitialModel::getTravelAppointmentId() const {
    return m_travel_appointment_id;
}
void OAIAppointmentInitialModel::setTravelAppointmentId(const QString &travel_appointment_id) {
    m_travel_appointment_id = travel_appointment_id;
    m_travel_appointment_id_isSet = true;
}

bool OAIAppointmentInitialModel::is_travel_appointment_id_Set() const{
    return m_travel_appointment_id_isSet;
}

bool OAIAppointmentInitialModel::is_travel_appointment_id_Valid() const{
    return m_travel_appointment_id_isValid;
}

qint32 OAIAppointmentInitialModel::getTravelTimeMins() const {
    return m_travel_time_mins;
}
void OAIAppointmentInitialModel::setTravelTimeMins(const qint32 &travel_time_mins) {
    m_travel_time_mins = travel_time_mins;
    m_travel_time_mins_isSet = true;
}

bool OAIAppointmentInitialModel::is_travel_time_mins_Set() const{
    return m_travel_time_mins_isSet;
}

bool OAIAppointmentInitialModel::is_travel_time_mins_Valid() const{
    return m_travel_time_mins_isValid;
}

bool OAIAppointmentInitialModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appointment_booking_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_booked_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_window_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_booking_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_allocation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_appointment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_time_mins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppointmentInitialModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
