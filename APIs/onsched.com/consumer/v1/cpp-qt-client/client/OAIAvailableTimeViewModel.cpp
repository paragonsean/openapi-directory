/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailableTimeViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailableTimeViewModel::OAIAvailableTimeViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailableTimeViewModel::OAIAvailableTimeViewModel() {
    this->initializeModel();
}

OAIAvailableTimeViewModel::~OAIAvailableTimeViewModel() {}

void OAIAvailableTimeViewModel::initializeModel() {

    m_allowable_bookings_isSet = false;
    m_allowable_bookings_isValid = false;

    m_allowable_capacity_isSet = false;
    m_allowable_capacity_isValid = false;

    m_available_bookings_isSet = false;
    m_available_bookings_isValid = false;

    m_available_capacity_isSet = false;
    m_available_capacity_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_display_time_isSet = false;
    m_display_time_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_travel_appointment_id_isSet = false;
    m_travel_appointment_id_isValid = false;

    m_travel_time_mins_isSet = false;
    m_travel_time_mins_isValid = false;
}

void OAIAvailableTimeViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailableTimeViewModel::fromJsonObject(QJsonObject json) {

    m_allowable_bookings_isValid = ::OpenAPI::fromJsonValue(m_allowable_bookings, json[QString("allowableBookings")]);
    m_allowable_bookings_isSet = !json[QString("allowableBookings")].isNull() && m_allowable_bookings_isValid;

    m_allowable_capacity_isValid = ::OpenAPI::fromJsonValue(m_allowable_capacity, json[QString("allowableCapacity")]);
    m_allowable_capacity_isSet = !json[QString("allowableCapacity")].isNull() && m_allowable_capacity_isValid;

    m_available_bookings_isValid = ::OpenAPI::fromJsonValue(m_available_bookings, json[QString("availableBookings")]);
    m_available_bookings_isSet = !json[QString("availableBookings")].isNull() && m_available_bookings_isValid;

    m_available_capacity_isValid = ::OpenAPI::fromJsonValue(m_available_capacity, json[QString("availableCapacity")]);
    m_available_capacity_isSet = !json[QString("availableCapacity")].isNull() && m_available_capacity_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_display_time_isValid = ::OpenAPI::fromJsonValue(m_display_time, json[QString("displayTime")]);
    m_display_time_isSet = !json[QString("displayTime")].isNull() && m_display_time_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_travel_appointment_id_isValid = ::OpenAPI::fromJsonValue(m_travel_appointment_id, json[QString("travelAppointmentId")]);
    m_travel_appointment_id_isSet = !json[QString("travelAppointmentId")].isNull() && m_travel_appointment_id_isValid;

    m_travel_time_mins_isValid = ::OpenAPI::fromJsonValue(m_travel_time_mins, json[QString("travelTimeMins")]);
    m_travel_time_mins_isSet = !json[QString("travelTimeMins")].isNull() && m_travel_time_mins_isValid;
}

QString OAIAvailableTimeViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailableTimeViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_allowable_bookings_isSet) {
        obj.insert(QString("allowableBookings"), ::OpenAPI::toJsonValue(m_allowable_bookings));
    }
    if (m_allowable_capacity_isSet) {
        obj.insert(QString("allowableCapacity"), ::OpenAPI::toJsonValue(m_allowable_capacity));
    }
    if (m_available_bookings_isSet) {
        obj.insert(QString("availableBookings"), ::OpenAPI::toJsonValue(m_available_bookings));
    }
    if (m_available_capacity_isSet) {
        obj.insert(QString("availableCapacity"), ::OpenAPI::toJsonValue(m_available_capacity));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_display_time_isSet) {
        obj.insert(QString("displayTime"), ::OpenAPI::toJsonValue(m_display_time));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_travel_appointment_id_isSet) {
        obj.insert(QString("travelAppointmentId"), ::OpenAPI::toJsonValue(m_travel_appointment_id));
    }
    if (m_travel_time_mins_isSet) {
        obj.insert(QString("travelTimeMins"), ::OpenAPI::toJsonValue(m_travel_time_mins));
    }
    return obj;
}

qint32 OAIAvailableTimeViewModel::getAllowableBookings() const {
    return m_allowable_bookings;
}
void OAIAvailableTimeViewModel::setAllowableBookings(const qint32 &allowable_bookings) {
    m_allowable_bookings = allowable_bookings;
    m_allowable_bookings_isSet = true;
}

bool OAIAvailableTimeViewModel::is_allowable_bookings_Set() const{
    return m_allowable_bookings_isSet;
}

bool OAIAvailableTimeViewModel::is_allowable_bookings_Valid() const{
    return m_allowable_bookings_isValid;
}

qint32 OAIAvailableTimeViewModel::getAllowableCapacity() const {
    return m_allowable_capacity;
}
void OAIAvailableTimeViewModel::setAllowableCapacity(const qint32 &allowable_capacity) {
    m_allowable_capacity = allowable_capacity;
    m_allowable_capacity_isSet = true;
}

bool OAIAvailableTimeViewModel::is_allowable_capacity_Set() const{
    return m_allowable_capacity_isSet;
}

bool OAIAvailableTimeViewModel::is_allowable_capacity_Valid() const{
    return m_allowable_capacity_isValid;
}

qint32 OAIAvailableTimeViewModel::getAvailableBookings() const {
    return m_available_bookings;
}
void OAIAvailableTimeViewModel::setAvailableBookings(const qint32 &available_bookings) {
    m_available_bookings = available_bookings;
    m_available_bookings_isSet = true;
}

bool OAIAvailableTimeViewModel::is_available_bookings_Set() const{
    return m_available_bookings_isSet;
}

bool OAIAvailableTimeViewModel::is_available_bookings_Valid() const{
    return m_available_bookings_isValid;
}

qint32 OAIAvailableTimeViewModel::getAvailableCapacity() const {
    return m_available_capacity;
}
void OAIAvailableTimeViewModel::setAvailableCapacity(const qint32 &available_capacity) {
    m_available_capacity = available_capacity;
    m_available_capacity_isSet = true;
}

bool OAIAvailableTimeViewModel::is_available_capacity_Set() const{
    return m_available_capacity_isSet;
}

bool OAIAvailableTimeViewModel::is_available_capacity_Valid() const{
    return m_available_capacity_isValid;
}

QString OAIAvailableTimeViewModel::getDate() const {
    return m_date;
}
void OAIAvailableTimeViewModel::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAvailableTimeViewModel::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAvailableTimeViewModel::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIAvailableTimeViewModel::getDisplayTime() const {
    return m_display_time;
}
void OAIAvailableTimeViewModel::setDisplayTime(const QString &display_time) {
    m_display_time = display_time;
    m_display_time_isSet = true;
}

bool OAIAvailableTimeViewModel::is_display_time_Set() const{
    return m_display_time_isSet;
}

bool OAIAvailableTimeViewModel::is_display_time_Valid() const{
    return m_display_time_isValid;
}

qint32 OAIAvailableTimeViewModel::getDuration() const {
    return m_duration;
}
void OAIAvailableTimeViewModel::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAvailableTimeViewModel::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAvailableTimeViewModel::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIAvailableTimeViewModel::getEndDateTime() const {
    return m_end_date_time;
}
void OAIAvailableTimeViewModel::setEndDateTime(const QString &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIAvailableTimeViewModel::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIAvailableTimeViewModel::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

QString OAIAvailableTimeViewModel::getResourceId() const {
    return m_resource_id;
}
void OAIAvailableTimeViewModel::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIAvailableTimeViewModel::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIAvailableTimeViewModel::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIAvailableTimeViewModel::getStartDateTime() const {
    return m_start_date_time;
}
void OAIAvailableTimeViewModel::setStartDateTime(const QString &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIAvailableTimeViewModel::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIAvailableTimeViewModel::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

qint32 OAIAvailableTimeViewModel::getTime() const {
    return m_time;
}
void OAIAvailableTimeViewModel::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIAvailableTimeViewModel::is_time_Set() const{
    return m_time_isSet;
}

bool OAIAvailableTimeViewModel::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIAvailableTimeViewModel::getTravelAppointmentId() const {
    return m_travel_appointment_id;
}
void OAIAvailableTimeViewModel::setTravelAppointmentId(const QString &travel_appointment_id) {
    m_travel_appointment_id = travel_appointment_id;
    m_travel_appointment_id_isSet = true;
}

bool OAIAvailableTimeViewModel::is_travel_appointment_id_Set() const{
    return m_travel_appointment_id_isSet;
}

bool OAIAvailableTimeViewModel::is_travel_appointment_id_Valid() const{
    return m_travel_appointment_id_isValid;
}

qint32 OAIAvailableTimeViewModel::getTravelTimeMins() const {
    return m_travel_time_mins;
}
void OAIAvailableTimeViewModel::setTravelTimeMins(const qint32 &travel_time_mins) {
    m_travel_time_mins = travel_time_mins;
    m_travel_time_mins_isSet = true;
}

bool OAIAvailableTimeViewModel::is_travel_time_mins_Set() const{
    return m_travel_time_mins_isSet;
}

bool OAIAvailableTimeViewModel::is_travel_time_mins_Valid() const{
    return m_travel_time_mins_isValid;
}

bool OAIAvailableTimeViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowable_bookings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowable_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_bookings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_appointment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_time_mins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailableTimeViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
