/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppointmentsApi_H
#define OAI_OAIAppointmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppointmentBookModel.h"
#include "OAIAppointmentInitialModel.h"
#include "OAIAppointmentInitialViewModel.h"
#include "OAIAppointmentListViewModel.h"
#include "OAIAppointmentRescheduleModel.h"
#include "OAIAppointmentReserveModel.h"
#include "OAIAppointmentViewModel.h"
#include "OAIBookingFieldListViewModel.h"
#include "OAICustomFieldDefinitionListViewModel.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppointmentsApi : public QObject {
    Q_OBJECT

public:
    OAIAppointmentsApi(const int timeOut = 0);
    ~OAIAppointmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location_id QString [optional]
    */
    virtual void consumerV1AppointmentsBookingfieldsGet(const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_id QString [optional]
    */
    virtual void consumerV1AppointmentsCustomfieldsGet(const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location_id QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  lastname QString [optional]
    * @param[in]  phone QString [optional]
    * @param[in]  service_id QString [optional]
    * @param[in]  calendar_id QString [optional]
    * @param[in]  resource_id QString [optional]
    * @param[in]  customer_id QString [optional]
    * @param[in]  service_allocation_id QString [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  status QString [optional]
    * @param[in]  booked_by QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void consumerV1AppointmentsGet(const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lastname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &calendar_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_allocation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &booked_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_appointment_book_model OAIAppointmentBookModel [optional]
    */
    virtual void consumerV1AppointmentsIdBookPut(const QString &id, const ::OpenAPI::OptionalParam<OAIAppointmentBookModel> &oai_appointment_book_model = ::OpenAPI::OptionalParam<OAIAppointmentBookModel>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void consumerV1AppointmentsIdCancelPut(const QString &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  undo bool [optional]
    */
    virtual void consumerV1AppointmentsIdConfirmPut(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &undo = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void consumerV1AppointmentsIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void consumerV1AppointmentsIdGet(const QString &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  body OAIObject [optional]
    */
    virtual void consumerV1AppointmentsIdNoshowPut(const qint32 &id, const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_appointment_reschedule_model OAIAppointmentRescheduleModel [optional]
    */
    virtual void consumerV1AppointmentsIdReschedulePut(const QString &id, const ::OpenAPI::OptionalParam<OAIAppointmentRescheduleModel> &oai_appointment_reschedule_model = ::OpenAPI::OptionalParam<OAIAppointmentRescheduleModel>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  send_notifications bool [optional]
    * @param[in]  oai_appointment_reserve_model OAIAppointmentReserveModel [optional]
    */
    virtual void consumerV1AppointmentsIdReservePut(const QString &id, const ::OpenAPI::OptionalParam<bool> &send_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIAppointmentReserveModel> &oai_appointment_reserve_model = ::OpenAPI::OptionalParam<OAIAppointmentReserveModel>());

    /**
    * @param[in]  complete_booking QString [optional]
    * @param[in]  oai_appointment_initial_model OAIAppointmentInitialModel [optional]
    */
    virtual void consumerV1AppointmentsPost(const ::OpenAPI::OptionalParam<QString> &complete_booking = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAppointmentInitialModel> &oai_appointment_initial_model = ::OpenAPI::OptionalParam<OAIAppointmentInitialModel>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void consumerV1AppointmentsBookingfieldsGetCallback(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsCustomfieldsGetCallback(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsGetCallback(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsIdBookPutCallback(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsIdCancelPutCallback(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsIdConfirmPutCallback(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsIdGetCallback(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsIdNoshowPutCallback(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsIdReschedulePutCallback(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsIdReservePutCallback(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void consumerV1AppointmentsBookingfieldsGetSignal(OAIBookingFieldListViewModel summary);
    void consumerV1AppointmentsCustomfieldsGetSignal(OAICustomFieldDefinitionListViewModel summary);
    void consumerV1AppointmentsGetSignal(OAIAppointmentListViewModel summary);
    void consumerV1AppointmentsIdBookPutSignal(OAIAppointmentViewModel summary);
    void consumerV1AppointmentsIdCancelPutSignal(OAIAppointmentViewModel summary);
    void consumerV1AppointmentsIdConfirmPutSignal();
    void consumerV1AppointmentsIdDeleteSignal(OAIAppointmentViewModel summary);
    void consumerV1AppointmentsIdGetSignal(OAIAppointmentViewModel summary);
    void consumerV1AppointmentsIdNoshowPutSignal();
    void consumerV1AppointmentsIdReschedulePutSignal(OAIAppointmentViewModel summary);
    void consumerV1AppointmentsIdReservePutSignal();
    void consumerV1AppointmentsPostSignal(OAIAppointmentInitialViewModel summary);


    void consumerV1AppointmentsBookingfieldsGetSignalFull(OAIHttpRequestWorker *worker, OAIBookingFieldListViewModel summary);
    void consumerV1AppointmentsCustomfieldsGetSignalFull(OAIHttpRequestWorker *worker, OAICustomFieldDefinitionListViewModel summary);
    void consumerV1AppointmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIAppointmentListViewModel summary);
    void consumerV1AppointmentsIdBookPutSignalFull(OAIHttpRequestWorker *worker, OAIAppointmentViewModel summary);
    void consumerV1AppointmentsIdCancelPutSignalFull(OAIHttpRequestWorker *worker, OAIAppointmentViewModel summary);
    void consumerV1AppointmentsIdConfirmPutSignalFull(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAppointmentViewModel summary);
    void consumerV1AppointmentsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAppointmentViewModel summary);
    void consumerV1AppointmentsIdNoshowPutSignalFull(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsIdReschedulePutSignalFull(OAIHttpRequestWorker *worker, OAIAppointmentViewModel summary);
    void consumerV1AppointmentsIdReservePutSignalFull(OAIHttpRequestWorker *worker);
    void consumerV1AppointmentsPostSignalFull(OAIHttpRequestWorker *worker, OAIAppointmentInitialViewModel summary);

    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsBookingfieldsGetSignalError() instead")
    void consumerV1AppointmentsBookingfieldsGetSignalE(OAIBookingFieldListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsBookingfieldsGetSignalError(OAIBookingFieldListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsCustomfieldsGetSignalError() instead")
    void consumerV1AppointmentsCustomfieldsGetSignalE(OAICustomFieldDefinitionListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsCustomfieldsGetSignalError(OAICustomFieldDefinitionListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsGetSignalError() instead")
    void consumerV1AppointmentsGetSignalE(OAIAppointmentListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsGetSignalError(OAIAppointmentListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdBookPutSignalError() instead")
    void consumerV1AppointmentsIdBookPutSignalE(OAIAppointmentViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdBookPutSignalError(OAIAppointmentViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdCancelPutSignalError() instead")
    void consumerV1AppointmentsIdCancelPutSignalE(OAIAppointmentViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdCancelPutSignalError(OAIAppointmentViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdConfirmPutSignalError() instead")
    void consumerV1AppointmentsIdConfirmPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdConfirmPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdDeleteSignalError() instead")
    void consumerV1AppointmentsIdDeleteSignalE(OAIAppointmentViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdDeleteSignalError(OAIAppointmentViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdGetSignalError() instead")
    void consumerV1AppointmentsIdGetSignalE(OAIAppointmentViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdGetSignalError(OAIAppointmentViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdNoshowPutSignalError() instead")
    void consumerV1AppointmentsIdNoshowPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdNoshowPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdReschedulePutSignalError() instead")
    void consumerV1AppointmentsIdReschedulePutSignalE(OAIAppointmentViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdReschedulePutSignalError(OAIAppointmentViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdReservePutSignalError() instead")
    void consumerV1AppointmentsIdReservePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdReservePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsPostSignalError() instead")
    void consumerV1AppointmentsPostSignalE(OAIAppointmentInitialViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsPostSignalError(OAIAppointmentInitialViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsBookingfieldsGetSignalErrorFull() instead")
    void consumerV1AppointmentsBookingfieldsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsBookingfieldsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsCustomfieldsGetSignalErrorFull() instead")
    void consumerV1AppointmentsCustomfieldsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsCustomfieldsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsGetSignalErrorFull() instead")
    void consumerV1AppointmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdBookPutSignalErrorFull() instead")
    void consumerV1AppointmentsIdBookPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdBookPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdCancelPutSignalErrorFull() instead")
    void consumerV1AppointmentsIdCancelPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdCancelPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdConfirmPutSignalErrorFull() instead")
    void consumerV1AppointmentsIdConfirmPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdConfirmPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdDeleteSignalErrorFull() instead")
    void consumerV1AppointmentsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdGetSignalErrorFull() instead")
    void consumerV1AppointmentsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdNoshowPutSignalErrorFull() instead")
    void consumerV1AppointmentsIdNoshowPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdNoshowPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdReschedulePutSignalErrorFull() instead")
    void consumerV1AppointmentsIdReschedulePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdReschedulePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsIdReservePutSignalErrorFull() instead")
    void consumerV1AppointmentsIdReservePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsIdReservePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1AppointmentsPostSignalErrorFull() instead")
    void consumerV1AppointmentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1AppointmentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
