/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppointmentViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppointmentViewModel::OAIAppointmentViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppointmentViewModel::OAIAppointmentViewModel() {
    this->initializeModel();
}

OAIAppointmentViewModel::~OAIAppointmentViewModel() {}

void OAIAppointmentViewModel::initializeModel() {

    m_audit_trail_isSet = false;
    m_audit_trail_isValid = false;

    m_booked_by_isSet = false;
    m_booked_by_isValid = false;

    m_business_name_isSet = false;
    m_business_name_isValid = false;

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_confirmation_number_isSet = false;
    m_confirmation_number_isValid = false;

    m_confirmed_isSet = false;
    m_confirmed_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_customer_message_isSet = false;
    m_customer_message_isValid = false;

    m_customers_isSet = false;
    m_customers_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_international_isSet = false;
    m_date_international_isValid = false;

    m_download_ics_url_isSet = false;
    m_download_ics_url_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_confirmation_sent_isSet = false;
    m_email_confirmation_sent_isValid = false;

    m_email_reminder_sent_isSet = false;
    m_email_reminder_sent_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_firstname_isSet = false;
    m_firstname_isValid = false;

    m_group_size_isSet = false;
    m_group_size_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_last_modified_on_isSet = false;
    m_last_modified_on_isValid = false;

    m_lastname_isSet = false;
    m_lastname_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_online_booking_isSet = false;
    m_online_booking_isValid = false;

    m_payment_status_isSet = false;
    m_payment_status_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_phone_ext_isSet = false;
    m_phone_ext_isValid = false;

    m_phone_type_isSet = false;
    m_phone_type_isValid = false;

    m_rescheduled_id_isSet = false;
    m_rescheduled_id_isValid = false;

    m_resource_email_isSet = false;
    m_resource_email_isValid = false;

    m_resource_group_id_isSet = false;
    m_resource_group_id_isValid = false;

    m_resource_group_name_isSet = false;
    m_resource_group_name_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_image_url_isSet = false;
    m_resource_image_url_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_service_allocation_id_isSet = false;
    m_service_allocation_id_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_image_url_isSet = false;
    m_service_image_url_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_sms_confirmation_sent_isSet = false;
    m_sms_confirmation_sent_isValid = false;

    m_sms_reminder_sent_isSet = false;
    m_sms_reminder_sent_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stripe_charge_id_isSet = false;
    m_stripe_charge_id_isValid = false;

    m_stripe_refund_id_isSet = false;
    m_stripe_refund_id_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_timezone_iana_isSet = false;
    m_timezone_iana_isValid = false;

    m_timezone_id_isSet = false;
    m_timezone_id_isValid = false;
}

void OAIAppointmentViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppointmentViewModel::fromJsonObject(QJsonObject json) {

    m_audit_trail_isValid = ::OpenAPI::fromJsonValue(m_audit_trail, json[QString("auditTrail")]);
    m_audit_trail_isSet = !json[QString("auditTrail")].isNull() && m_audit_trail_isValid;

    m_booked_by_isValid = ::OpenAPI::fromJsonValue(m_booked_by, json[QString("bookedBy")]);
    m_booked_by_isSet = !json[QString("bookedBy")].isNull() && m_booked_by_isValid;

    m_business_name_isValid = ::OpenAPI::fromJsonValue(m_business_name, json[QString("businessName")]);
    m_business_name_isSet = !json[QString("businessName")].isNull() && m_business_name_isValid;

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendarId")]);
    m_calendar_id_isSet = !json[QString("calendarId")].isNull() && m_calendar_id_isValid;

    m_confirmation_number_isValid = ::OpenAPI::fromJsonValue(m_confirmation_number, json[QString("confirmationNumber")]);
    m_confirmation_number_isSet = !json[QString("confirmationNumber")].isNull() && m_confirmation_number_isValid;

    m_confirmed_isValid = ::OpenAPI::fromJsonValue(m_confirmed, json[QString("confirmed")]);
    m_confirmed_isSet = !json[QString("confirmed")].isNull() && m_confirmed_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_customer_message_isValid = ::OpenAPI::fromJsonValue(m_customer_message, json[QString("customerMessage")]);
    m_customer_message_isSet = !json[QString("customerMessage")].isNull() && m_customer_message_isValid;

    m_customers_isValid = ::OpenAPI::fromJsonValue(m_customers, json[QString("customers")]);
    m_customers_isSet = !json[QString("customers")].isNull() && m_customers_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_date_international_isValid = ::OpenAPI::fromJsonValue(m_date_international, json[QString("dateInternational")]);
    m_date_international_isSet = !json[QString("dateInternational")].isNull() && m_date_international_isValid;

    m_download_ics_url_isValid = ::OpenAPI::fromJsonValue(m_download_ics_url, json[QString("downloadIcsUrl")]);
    m_download_ics_url_isSet = !json[QString("downloadIcsUrl")].isNull() && m_download_ics_url_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_confirmation_sent_isValid = ::OpenAPI::fromJsonValue(m_email_confirmation_sent, json[QString("emailConfirmationSent")]);
    m_email_confirmation_sent_isSet = !json[QString("emailConfirmationSent")].isNull() && m_email_confirmation_sent_isValid;

    m_email_reminder_sent_isValid = ::OpenAPI::fromJsonValue(m_email_reminder_sent, json[QString("emailReminderSent")]);
    m_email_reminder_sent_isSet = !json[QString("emailReminderSent")].isNull() && m_email_reminder_sent_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_firstname_isValid = ::OpenAPI::fromJsonValue(m_firstname, json[QString("firstname")]);
    m_firstname_isSet = !json[QString("firstname")].isNull() && m_firstname_isValid;

    m_group_size_isValid = ::OpenAPI::fromJsonValue(m_group_size, json[QString("groupSize")]);
    m_group_size_isSet = !json[QString("groupSize")].isNull() && m_group_size_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("lastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("lastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_last_modified_on_isValid = ::OpenAPI::fromJsonValue(m_last_modified_on, json[QString("lastModifiedOn")]);
    m_last_modified_on_isSet = !json[QString("lastModifiedOn")].isNull() && m_last_modified_on_isValid;

    m_lastname_isValid = ::OpenAPI::fromJsonValue(m_lastname, json[QString("lastname")]);
    m_lastname_isSet = !json[QString("lastname")].isNull() && m_lastname_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_online_booking_isValid = ::OpenAPI::fromJsonValue(m_online_booking, json[QString("onlineBooking")]);
    m_online_booking_isSet = !json[QString("onlineBooking")].isNull() && m_online_booking_isValid;

    m_payment_status_isValid = ::OpenAPI::fromJsonValue(m_payment_status, json[QString("paymentStatus")]);
    m_payment_status_isSet = !json[QString("paymentStatus")].isNull() && m_payment_status_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_phone_ext_isValid = ::OpenAPI::fromJsonValue(m_phone_ext, json[QString("phoneExt")]);
    m_phone_ext_isSet = !json[QString("phoneExt")].isNull() && m_phone_ext_isValid;

    m_phone_type_isValid = ::OpenAPI::fromJsonValue(m_phone_type, json[QString("phoneType")]);
    m_phone_type_isSet = !json[QString("phoneType")].isNull() && m_phone_type_isValid;

    m_rescheduled_id_isValid = ::OpenAPI::fromJsonValue(m_rescheduled_id, json[QString("rescheduledId")]);
    m_rescheduled_id_isSet = !json[QString("rescheduledId")].isNull() && m_rescheduled_id_isValid;

    m_resource_email_isValid = ::OpenAPI::fromJsonValue(m_resource_email, json[QString("resourceEmail")]);
    m_resource_email_isSet = !json[QString("resourceEmail")].isNull() && m_resource_email_isValid;

    m_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_resource_group_id, json[QString("resourceGroupId")]);
    m_resource_group_id_isSet = !json[QString("resourceGroupId")].isNull() && m_resource_group_id_isValid;

    m_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_resource_group_name, json[QString("resourceGroupName")]);
    m_resource_group_name_isSet = !json[QString("resourceGroupName")].isNull() && m_resource_group_name_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_image_url_isValid = ::OpenAPI::fromJsonValue(m_resource_image_url, json[QString("resourceImageUrl")]);
    m_resource_image_url_isSet = !json[QString("resourceImageUrl")].isNull() && m_resource_image_url_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_service_allocation_id_isValid = ::OpenAPI::fromJsonValue(m_service_allocation_id, json[QString("serviceAllocationId")]);
    m_service_allocation_id_isSet = !json[QString("serviceAllocationId")].isNull() && m_service_allocation_id_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_image_url_isValid = ::OpenAPI::fromJsonValue(m_service_image_url, json[QString("serviceImageUrl")]);
    m_service_image_url_isSet = !json[QString("serviceImageUrl")].isNull() && m_service_image_url_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_sms_confirmation_sent_isValid = ::OpenAPI::fromJsonValue(m_sms_confirmation_sent, json[QString("smsConfirmationSent")]);
    m_sms_confirmation_sent_isSet = !json[QString("smsConfirmationSent")].isNull() && m_sms_confirmation_sent_isValid;

    m_sms_reminder_sent_isValid = ::OpenAPI::fromJsonValue(m_sms_reminder_sent, json[QString("smsReminderSent")]);
    m_sms_reminder_sent_isSet = !json[QString("smsReminderSent")].isNull() && m_sms_reminder_sent_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stripe_charge_id_isValid = ::OpenAPI::fromJsonValue(m_stripe_charge_id, json[QString("stripeChargeId")]);
    m_stripe_charge_id_isSet = !json[QString("stripeChargeId")].isNull() && m_stripe_charge_id_isValid;

    m_stripe_refund_id_isValid = ::OpenAPI::fromJsonValue(m_stripe_refund_id, json[QString("stripeRefundId")]);
    m_stripe_refund_id_isSet = !json[QString("stripeRefundId")].isNull() && m_stripe_refund_id_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_timezone_iana_isValid = ::OpenAPI::fromJsonValue(m_timezone_iana, json[QString("timezoneIana")]);
    m_timezone_iana_isSet = !json[QString("timezoneIana")].isNull() && m_timezone_iana_isValid;

    m_timezone_id_isValid = ::OpenAPI::fromJsonValue(m_timezone_id, json[QString("timezoneId")]);
    m_timezone_id_isSet = !json[QString("timezoneId")].isNull() && m_timezone_id_isValid;
}

QString OAIAppointmentViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppointmentViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_trail.size() > 0) {
        obj.insert(QString("auditTrail"), ::OpenAPI::toJsonValue(m_audit_trail));
    }
    if (m_booked_by_isSet) {
        obj.insert(QString("bookedBy"), ::OpenAPI::toJsonValue(m_booked_by));
    }
    if (m_business_name_isSet) {
        obj.insert(QString("businessName"), ::OpenAPI::toJsonValue(m_business_name));
    }
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendarId"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_confirmation_number_isSet) {
        obj.insert(QString("confirmationNumber"), ::OpenAPI::toJsonValue(m_confirmation_number));
    }
    if (m_confirmed_isSet) {
        obj.insert(QString("confirmed"), ::OpenAPI::toJsonValue(m_confirmed));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_customer_message_isSet) {
        obj.insert(QString("customerMessage"), ::OpenAPI::toJsonValue(m_customer_message));
    }
    if (m_customers.size() > 0) {
        obj.insert(QString("customers"), ::OpenAPI::toJsonValue(m_customers));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_international_isSet) {
        obj.insert(QString("dateInternational"), ::OpenAPI::toJsonValue(m_date_international));
    }
    if (m_download_ics_url_isSet) {
        obj.insert(QString("downloadIcsUrl"), ::OpenAPI::toJsonValue(m_download_ics_url));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_confirmation_sent_isSet) {
        obj.insert(QString("emailConfirmationSent"), ::OpenAPI::toJsonValue(m_email_confirmation_sent));
    }
    if (m_email_reminder_sent_isSet) {
        obj.insert(QString("emailReminderSent"), ::OpenAPI::toJsonValue(m_email_reminder_sent));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_firstname_isSet) {
        obj.insert(QString("firstname"), ::OpenAPI::toJsonValue(m_firstname));
    }
    if (m_group_size_isSet) {
        obj.insert(QString("groupSize"), ::OpenAPI::toJsonValue(m_group_size));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_last_modified_by_isSet) {
        obj.insert(QString("lastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_last_modified_on_isSet) {
        obj.insert(QString("lastModifiedOn"), ::OpenAPI::toJsonValue(m_last_modified_on));
    }
    if (m_lastname_isSet) {
        obj.insert(QString("lastname"), ::OpenAPI::toJsonValue(m_lastname));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_online_booking_isSet) {
        obj.insert(QString("onlineBooking"), ::OpenAPI::toJsonValue(m_online_booking));
    }
    if (m_payment_status_isSet) {
        obj.insert(QString("paymentStatus"), ::OpenAPI::toJsonValue(m_payment_status));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_phone_ext_isSet) {
        obj.insert(QString("phoneExt"), ::OpenAPI::toJsonValue(m_phone_ext));
    }
    if (m_phone_type_isSet) {
        obj.insert(QString("phoneType"), ::OpenAPI::toJsonValue(m_phone_type));
    }
    if (m_rescheduled_id_isSet) {
        obj.insert(QString("rescheduledId"), ::OpenAPI::toJsonValue(m_rescheduled_id));
    }
    if (m_resource_email_isSet) {
        obj.insert(QString("resourceEmail"), ::OpenAPI::toJsonValue(m_resource_email));
    }
    if (m_resource_group_id_isSet) {
        obj.insert(QString("resourceGroupId"), ::OpenAPI::toJsonValue(m_resource_group_id));
    }
    if (m_resource_group_name_isSet) {
        obj.insert(QString("resourceGroupName"), ::OpenAPI::toJsonValue(m_resource_group_name));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_image_url_isSet) {
        obj.insert(QString("resourceImageUrl"), ::OpenAPI::toJsonValue(m_resource_image_url));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_service_allocation_id_isSet) {
        obj.insert(QString("serviceAllocationId"), ::OpenAPI::toJsonValue(m_service_allocation_id));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_image_url_isSet) {
        obj.insert(QString("serviceImageUrl"), ::OpenAPI::toJsonValue(m_service_image_url));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_sms_confirmation_sent_isSet) {
        obj.insert(QString("smsConfirmationSent"), ::OpenAPI::toJsonValue(m_sms_confirmation_sent));
    }
    if (m_sms_reminder_sent_isSet) {
        obj.insert(QString("smsReminderSent"), ::OpenAPI::toJsonValue(m_sms_reminder_sent));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stripe_charge_id_isSet) {
        obj.insert(QString("stripeChargeId"), ::OpenAPI::toJsonValue(m_stripe_charge_id));
    }
    if (m_stripe_refund_id_isSet) {
        obj.insert(QString("stripeRefundId"), ::OpenAPI::toJsonValue(m_stripe_refund_id));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_timezone_iana_isSet) {
        obj.insert(QString("timezoneIana"), ::OpenAPI::toJsonValue(m_timezone_iana));
    }
    if (m_timezone_id_isSet) {
        obj.insert(QString("timezoneId"), ::OpenAPI::toJsonValue(m_timezone_id));
    }
    return obj;
}

QList<OAIAppointmentAuditViewModel> OAIAppointmentViewModel::getAuditTrail() const {
    return m_audit_trail;
}
void OAIAppointmentViewModel::setAuditTrail(const QList<OAIAppointmentAuditViewModel> &audit_trail) {
    m_audit_trail = audit_trail;
    m_audit_trail_isSet = true;
}

bool OAIAppointmentViewModel::is_audit_trail_Set() const{
    return m_audit_trail_isSet;
}

bool OAIAppointmentViewModel::is_audit_trail_Valid() const{
    return m_audit_trail_isValid;
}

QString OAIAppointmentViewModel::getBookedBy() const {
    return m_booked_by;
}
void OAIAppointmentViewModel::setBookedBy(const QString &booked_by) {
    m_booked_by = booked_by;
    m_booked_by_isSet = true;
}

bool OAIAppointmentViewModel::is_booked_by_Set() const{
    return m_booked_by_isSet;
}

bool OAIAppointmentViewModel::is_booked_by_Valid() const{
    return m_booked_by_isValid;
}

QString OAIAppointmentViewModel::getBusinessName() const {
    return m_business_name;
}
void OAIAppointmentViewModel::setBusinessName(const QString &business_name) {
    m_business_name = business_name;
    m_business_name_isSet = true;
}

bool OAIAppointmentViewModel::is_business_name_Set() const{
    return m_business_name_isSet;
}

bool OAIAppointmentViewModel::is_business_name_Valid() const{
    return m_business_name_isValid;
}

QString OAIAppointmentViewModel::getCalendarId() const {
    return m_calendar_id;
}
void OAIAppointmentViewModel::setCalendarId(const QString &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAIAppointmentViewModel::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAIAppointmentViewModel::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

QString OAIAppointmentViewModel::getConfirmationNumber() const {
    return m_confirmation_number;
}
void OAIAppointmentViewModel::setConfirmationNumber(const QString &confirmation_number) {
    m_confirmation_number = confirmation_number;
    m_confirmation_number_isSet = true;
}

bool OAIAppointmentViewModel::is_confirmation_number_Set() const{
    return m_confirmation_number_isSet;
}

bool OAIAppointmentViewModel::is_confirmation_number_Valid() const{
    return m_confirmation_number_isValid;
}

bool OAIAppointmentViewModel::isConfirmed() const {
    return m_confirmed;
}
void OAIAppointmentViewModel::setConfirmed(const bool &confirmed) {
    m_confirmed = confirmed;
    m_confirmed_isSet = true;
}

bool OAIAppointmentViewModel::is_confirmed_Set() const{
    return m_confirmed_isSet;
}

bool OAIAppointmentViewModel::is_confirmed_Valid() const{
    return m_confirmed_isValid;
}

QString OAIAppointmentViewModel::getCreateDate() const {
    return m_create_date;
}
void OAIAppointmentViewModel::setCreateDate(const QString &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIAppointmentViewModel::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIAppointmentViewModel::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QMap<QString, OAICustomFieldViewModel> OAIAppointmentViewModel::getCustomFields() const {
    return m_custom_fields;
}
void OAIAppointmentViewModel::setCustomFields(const QMap<QString, OAICustomFieldViewModel> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIAppointmentViewModel::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIAppointmentViewModel::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIAppointmentViewModel::getCustomerId() const {
    return m_customer_id;
}
void OAIAppointmentViewModel::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIAppointmentViewModel::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIAppointmentViewModel::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIAppointmentViewModel::getCustomerMessage() const {
    return m_customer_message;
}
void OAIAppointmentViewModel::setCustomerMessage(const QString &customer_message) {
    m_customer_message = customer_message;
    m_customer_message_isSet = true;
}

bool OAIAppointmentViewModel::is_customer_message_Set() const{
    return m_customer_message_isSet;
}

bool OAIAppointmentViewModel::is_customer_message_Valid() const{
    return m_customer_message_isValid;
}

QList<OAIAppointmentCustomerViewModel> OAIAppointmentViewModel::getCustomers() const {
    return m_customers;
}
void OAIAppointmentViewModel::setCustomers(const QList<OAIAppointmentCustomerViewModel> &customers) {
    m_customers = customers;
    m_customers_isSet = true;
}

bool OAIAppointmentViewModel::is_customers_Set() const{
    return m_customers_isSet;
}

bool OAIAppointmentViewModel::is_customers_Valid() const{
    return m_customers_isValid;
}

QString OAIAppointmentViewModel::getDate() const {
    return m_date;
}
void OAIAppointmentViewModel::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAppointmentViewModel::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAppointmentViewModel::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIAppointmentViewModel::getDateInternational() const {
    return m_date_international;
}
void OAIAppointmentViewModel::setDateInternational(const QString &date_international) {
    m_date_international = date_international;
    m_date_international_isSet = true;
}

bool OAIAppointmentViewModel::is_date_international_Set() const{
    return m_date_international_isSet;
}

bool OAIAppointmentViewModel::is_date_international_Valid() const{
    return m_date_international_isValid;
}

QString OAIAppointmentViewModel::getDownloadIcsUrl() const {
    return m_download_ics_url;
}
void OAIAppointmentViewModel::setDownloadIcsUrl(const QString &download_ics_url) {
    m_download_ics_url = download_ics_url;
    m_download_ics_url_isSet = true;
}

bool OAIAppointmentViewModel::is_download_ics_url_Set() const{
    return m_download_ics_url_isSet;
}

bool OAIAppointmentViewModel::is_download_ics_url_Valid() const{
    return m_download_ics_url_isValid;
}

qint32 OAIAppointmentViewModel::getDuration() const {
    return m_duration;
}
void OAIAppointmentViewModel::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAppointmentViewModel::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAppointmentViewModel::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIAppointmentViewModel::getEmail() const {
    return m_email;
}
void OAIAppointmentViewModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAppointmentViewModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAppointmentViewModel::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAppointmentViewModel::getEmailConfirmationSent() const {
    return m_email_confirmation_sent;
}
void OAIAppointmentViewModel::setEmailConfirmationSent(const QString &email_confirmation_sent) {
    m_email_confirmation_sent = email_confirmation_sent;
    m_email_confirmation_sent_isSet = true;
}

bool OAIAppointmentViewModel::is_email_confirmation_sent_Set() const{
    return m_email_confirmation_sent_isSet;
}

bool OAIAppointmentViewModel::is_email_confirmation_sent_Valid() const{
    return m_email_confirmation_sent_isValid;
}

QString OAIAppointmentViewModel::getEmailReminderSent() const {
    return m_email_reminder_sent;
}
void OAIAppointmentViewModel::setEmailReminderSent(const QString &email_reminder_sent) {
    m_email_reminder_sent = email_reminder_sent;
    m_email_reminder_sent_isSet = true;
}

bool OAIAppointmentViewModel::is_email_reminder_sent_Set() const{
    return m_email_reminder_sent_isSet;
}

bool OAIAppointmentViewModel::is_email_reminder_sent_Valid() const{
    return m_email_reminder_sent_isValid;
}

QString OAIAppointmentViewModel::getEndDateTime() const {
    return m_end_date_time;
}
void OAIAppointmentViewModel::setEndDateTime(const QString &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIAppointmentViewModel::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIAppointmentViewModel::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

QString OAIAppointmentViewModel::getFirstname() const {
    return m_firstname;
}
void OAIAppointmentViewModel::setFirstname(const QString &firstname) {
    m_firstname = firstname;
    m_firstname_isSet = true;
}

bool OAIAppointmentViewModel::is_firstname_Set() const{
    return m_firstname_isSet;
}

bool OAIAppointmentViewModel::is_firstname_Valid() const{
    return m_firstname_isValid;
}

qint32 OAIAppointmentViewModel::getGroupSize() const {
    return m_group_size;
}
void OAIAppointmentViewModel::setGroupSize(const qint32 &group_size) {
    m_group_size = group_size;
    m_group_size_isSet = true;
}

bool OAIAppointmentViewModel::is_group_size_Set() const{
    return m_group_size_isSet;
}

bool OAIAppointmentViewModel::is_group_size_Valid() const{
    return m_group_size_isValid;
}

QString OAIAppointmentViewModel::getId() const {
    return m_id;
}
void OAIAppointmentViewModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppointmentViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppointmentViewModel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAppointmentViewModel::getIpAddress() const {
    return m_ip_address;
}
void OAIAppointmentViewModel::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIAppointmentViewModel::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIAppointmentViewModel::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIAppointmentViewModel::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIAppointmentViewModel::setLastModifiedBy(const QString &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIAppointmentViewModel::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIAppointmentViewModel::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

QString OAIAppointmentViewModel::getLastModifiedOn() const {
    return m_last_modified_on;
}
void OAIAppointmentViewModel::setLastModifiedOn(const QString &last_modified_on) {
    m_last_modified_on = last_modified_on;
    m_last_modified_on_isSet = true;
}

bool OAIAppointmentViewModel::is_last_modified_on_Set() const{
    return m_last_modified_on_isSet;
}

bool OAIAppointmentViewModel::is_last_modified_on_Valid() const{
    return m_last_modified_on_isValid;
}

QString OAIAppointmentViewModel::getLastname() const {
    return m_lastname;
}
void OAIAppointmentViewModel::setLastname(const QString &lastname) {
    m_lastname = lastname;
    m_lastname_isSet = true;
}

bool OAIAppointmentViewModel::is_lastname_Set() const{
    return m_lastname_isSet;
}

bool OAIAppointmentViewModel::is_lastname_Valid() const{
    return m_lastname_isValid;
}

QString OAIAppointmentViewModel::getLatitude() const {
    return m_latitude;
}
void OAIAppointmentViewModel::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIAppointmentViewModel::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIAppointmentViewModel::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIAppointmentViewModel::getLocation() const {
    return m_location;
}
void OAIAppointmentViewModel::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAppointmentViewModel::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAppointmentViewModel::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIAppointmentViewModel::getLocationId() const {
    return m_location_id;
}
void OAIAppointmentViewModel::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIAppointmentViewModel::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIAppointmentViewModel::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIAppointmentViewModel::getLongitude() const {
    return m_longitude;
}
void OAIAppointmentViewModel::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIAppointmentViewModel::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIAppointmentViewModel::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIAppointmentViewModel::getName() const {
    return m_name;
}
void OAIAppointmentViewModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAppointmentViewModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAppointmentViewModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAppointmentViewModel::getNotes() const {
    return m_notes;
}
void OAIAppointmentViewModel::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIAppointmentViewModel::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIAppointmentViewModel::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIAppointmentViewModel::getObject() const {
    return m_object;
}
void OAIAppointmentViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIAppointmentViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIAppointmentViewModel::is_object_Valid() const{
    return m_object_isValid;
}

bool OAIAppointmentViewModel::isOnlineBooking() const {
    return m_online_booking;
}
void OAIAppointmentViewModel::setOnlineBooking(const bool &online_booking) {
    m_online_booking = online_booking;
    m_online_booking_isSet = true;
}

bool OAIAppointmentViewModel::is_online_booking_Set() const{
    return m_online_booking_isSet;
}

bool OAIAppointmentViewModel::is_online_booking_Valid() const{
    return m_online_booking_isValid;
}

qint32 OAIAppointmentViewModel::getPaymentStatus() const {
    return m_payment_status;
}
void OAIAppointmentViewModel::setPaymentStatus(const qint32 &payment_status) {
    m_payment_status = payment_status;
    m_payment_status_isSet = true;
}

bool OAIAppointmentViewModel::is_payment_status_Set() const{
    return m_payment_status_isSet;
}

bool OAIAppointmentViewModel::is_payment_status_Valid() const{
    return m_payment_status_isValid;
}

QString OAIAppointmentViewModel::getPhone() const {
    return m_phone;
}
void OAIAppointmentViewModel::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIAppointmentViewModel::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIAppointmentViewModel::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIAppointmentViewModel::getPhoneExt() const {
    return m_phone_ext;
}
void OAIAppointmentViewModel::setPhoneExt(const QString &phone_ext) {
    m_phone_ext = phone_ext;
    m_phone_ext_isSet = true;
}

bool OAIAppointmentViewModel::is_phone_ext_Set() const{
    return m_phone_ext_isSet;
}

bool OAIAppointmentViewModel::is_phone_ext_Valid() const{
    return m_phone_ext_isValid;
}

QString OAIAppointmentViewModel::getPhoneType() const {
    return m_phone_type;
}
void OAIAppointmentViewModel::setPhoneType(const QString &phone_type) {
    m_phone_type = phone_type;
    m_phone_type_isSet = true;
}

bool OAIAppointmentViewModel::is_phone_type_Set() const{
    return m_phone_type_isSet;
}

bool OAIAppointmentViewModel::is_phone_type_Valid() const{
    return m_phone_type_isValid;
}

QString OAIAppointmentViewModel::getRescheduledId() const {
    return m_rescheduled_id;
}
void OAIAppointmentViewModel::setRescheduledId(const QString &rescheduled_id) {
    m_rescheduled_id = rescheduled_id;
    m_rescheduled_id_isSet = true;
}

bool OAIAppointmentViewModel::is_rescheduled_id_Set() const{
    return m_rescheduled_id_isSet;
}

bool OAIAppointmentViewModel::is_rescheduled_id_Valid() const{
    return m_rescheduled_id_isValid;
}

QString OAIAppointmentViewModel::getResourceEmail() const {
    return m_resource_email;
}
void OAIAppointmentViewModel::setResourceEmail(const QString &resource_email) {
    m_resource_email = resource_email;
    m_resource_email_isSet = true;
}

bool OAIAppointmentViewModel::is_resource_email_Set() const{
    return m_resource_email_isSet;
}

bool OAIAppointmentViewModel::is_resource_email_Valid() const{
    return m_resource_email_isValid;
}

QString OAIAppointmentViewModel::getResourceGroupId() const {
    return m_resource_group_id;
}
void OAIAppointmentViewModel::setResourceGroupId(const QString &resource_group_id) {
    m_resource_group_id = resource_group_id;
    m_resource_group_id_isSet = true;
}

bool OAIAppointmentViewModel::is_resource_group_id_Set() const{
    return m_resource_group_id_isSet;
}

bool OAIAppointmentViewModel::is_resource_group_id_Valid() const{
    return m_resource_group_id_isValid;
}

QString OAIAppointmentViewModel::getResourceGroupName() const {
    return m_resource_group_name;
}
void OAIAppointmentViewModel::setResourceGroupName(const QString &resource_group_name) {
    m_resource_group_name = resource_group_name;
    m_resource_group_name_isSet = true;
}

bool OAIAppointmentViewModel::is_resource_group_name_Set() const{
    return m_resource_group_name_isSet;
}

bool OAIAppointmentViewModel::is_resource_group_name_Valid() const{
    return m_resource_group_name_isValid;
}

QString OAIAppointmentViewModel::getResourceId() const {
    return m_resource_id;
}
void OAIAppointmentViewModel::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIAppointmentViewModel::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIAppointmentViewModel::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIAppointmentViewModel::getResourceImageUrl() const {
    return m_resource_image_url;
}
void OAIAppointmentViewModel::setResourceImageUrl(const QString &resource_image_url) {
    m_resource_image_url = resource_image_url;
    m_resource_image_url_isSet = true;
}

bool OAIAppointmentViewModel::is_resource_image_url_Set() const{
    return m_resource_image_url_isSet;
}

bool OAIAppointmentViewModel::is_resource_image_url_Valid() const{
    return m_resource_image_url_isValid;
}

QString OAIAppointmentViewModel::getResourceName() const {
    return m_resource_name;
}
void OAIAppointmentViewModel::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIAppointmentViewModel::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIAppointmentViewModel::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QList<OAIAppointmentResourceViewModel> OAIAppointmentViewModel::getResources() const {
    return m_resources;
}
void OAIAppointmentViewModel::setResources(const QList<OAIAppointmentResourceViewModel> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIAppointmentViewModel::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIAppointmentViewModel::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIAppointmentViewModel::getServiceAllocationId() const {
    return m_service_allocation_id;
}
void OAIAppointmentViewModel::setServiceAllocationId(const QString &service_allocation_id) {
    m_service_allocation_id = service_allocation_id;
    m_service_allocation_id_isSet = true;
}

bool OAIAppointmentViewModel::is_service_allocation_id_Set() const{
    return m_service_allocation_id_isSet;
}

bool OAIAppointmentViewModel::is_service_allocation_id_Valid() const{
    return m_service_allocation_id_isValid;
}

QString OAIAppointmentViewModel::getServiceId() const {
    return m_service_id;
}
void OAIAppointmentViewModel::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIAppointmentViewModel::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIAppointmentViewModel::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIAppointmentViewModel::getServiceImageUrl() const {
    return m_service_image_url;
}
void OAIAppointmentViewModel::setServiceImageUrl(const QString &service_image_url) {
    m_service_image_url = service_image_url;
    m_service_image_url_isSet = true;
}

bool OAIAppointmentViewModel::is_service_image_url_Set() const{
    return m_service_image_url_isSet;
}

bool OAIAppointmentViewModel::is_service_image_url_Valid() const{
    return m_service_image_url_isValid;
}

QString OAIAppointmentViewModel::getServiceName() const {
    return m_service_name;
}
void OAIAppointmentViewModel::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIAppointmentViewModel::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIAppointmentViewModel::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIAppointmentViewModel::getSmsConfirmationSent() const {
    return m_sms_confirmation_sent;
}
void OAIAppointmentViewModel::setSmsConfirmationSent(const QString &sms_confirmation_sent) {
    m_sms_confirmation_sent = sms_confirmation_sent;
    m_sms_confirmation_sent_isSet = true;
}

bool OAIAppointmentViewModel::is_sms_confirmation_sent_Set() const{
    return m_sms_confirmation_sent_isSet;
}

bool OAIAppointmentViewModel::is_sms_confirmation_sent_Valid() const{
    return m_sms_confirmation_sent_isValid;
}

QString OAIAppointmentViewModel::getSmsReminderSent() const {
    return m_sms_reminder_sent;
}
void OAIAppointmentViewModel::setSmsReminderSent(const QString &sms_reminder_sent) {
    m_sms_reminder_sent = sms_reminder_sent;
    m_sms_reminder_sent_isSet = true;
}

bool OAIAppointmentViewModel::is_sms_reminder_sent_Set() const{
    return m_sms_reminder_sent_isSet;
}

bool OAIAppointmentViewModel::is_sms_reminder_sent_Valid() const{
    return m_sms_reminder_sent_isValid;
}

QString OAIAppointmentViewModel::getStartDateTime() const {
    return m_start_date_time;
}
void OAIAppointmentViewModel::setStartDateTime(const QString &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIAppointmentViewModel::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIAppointmentViewModel::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QString OAIAppointmentViewModel::getStatus() const {
    return m_status;
}
void OAIAppointmentViewModel::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAppointmentViewModel::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAppointmentViewModel::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAppointmentViewModel::getStripeChargeId() const {
    return m_stripe_charge_id;
}
void OAIAppointmentViewModel::setStripeChargeId(const QString &stripe_charge_id) {
    m_stripe_charge_id = stripe_charge_id;
    m_stripe_charge_id_isSet = true;
}

bool OAIAppointmentViewModel::is_stripe_charge_id_Set() const{
    return m_stripe_charge_id_isSet;
}

bool OAIAppointmentViewModel::is_stripe_charge_id_Valid() const{
    return m_stripe_charge_id_isValid;
}

QString OAIAppointmentViewModel::getStripeRefundId() const {
    return m_stripe_refund_id;
}
void OAIAppointmentViewModel::setStripeRefundId(const QString &stripe_refund_id) {
    m_stripe_refund_id = stripe_refund_id;
    m_stripe_refund_id_isSet = true;
}

bool OAIAppointmentViewModel::is_stripe_refund_id_Set() const{
    return m_stripe_refund_id_isSet;
}

bool OAIAppointmentViewModel::is_stripe_refund_id_Valid() const{
    return m_stripe_refund_id_isValid;
}

qint32 OAIAppointmentViewModel::getTime() const {
    return m_time;
}
void OAIAppointmentViewModel::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIAppointmentViewModel::is_time_Set() const{
    return m_time_isSet;
}

bool OAIAppointmentViewModel::is_time_Valid() const{
    return m_time_isValid;
}

qint32 OAIAppointmentViewModel::getTimezone() const {
    return m_timezone;
}
void OAIAppointmentViewModel::setTimezone(const qint32 &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIAppointmentViewModel::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIAppointmentViewModel::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIAppointmentViewModel::getTimezoneIana() const {
    return m_timezone_iana;
}
void OAIAppointmentViewModel::setTimezoneIana(const QString &timezone_iana) {
    m_timezone_iana = timezone_iana;
    m_timezone_iana_isSet = true;
}

bool OAIAppointmentViewModel::is_timezone_iana_Set() const{
    return m_timezone_iana_isSet;
}

bool OAIAppointmentViewModel::is_timezone_iana_Valid() const{
    return m_timezone_iana_isValid;
}

QString OAIAppointmentViewModel::getTimezoneId() const {
    return m_timezone_id;
}
void OAIAppointmentViewModel::setTimezoneId(const QString &timezone_id) {
    m_timezone_id = timezone_id;
    m_timezone_id_isSet = true;
}

bool OAIAppointmentViewModel::is_timezone_id_Set() const{
    return m_timezone_id_isSet;
}

bool OAIAppointmentViewModel::is_timezone_id_Valid() const{
    return m_timezone_id_isValid;
}

bool OAIAppointmentViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_trail.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_booked_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_international_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_ics_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_confirmation_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_reminder_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_booking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_ext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rescheduled_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_allocation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_confirmation_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_reminder_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_charge_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_refund_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_iana_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppointmentViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
