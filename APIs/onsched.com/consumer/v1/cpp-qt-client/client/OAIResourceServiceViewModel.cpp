/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceServiceViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceServiceViewModel::OAIResourceServiceViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceServiceViewModel::OAIResourceServiceViewModel() {
    this->initializeModel();
}

OAIResourceServiceViewModel::~OAIResourceServiceViewModel() {}

void OAIResourceServiceViewModel::initializeModel() {

    m_object_isSet = false;
    m_object_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIResourceServiceViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceServiceViewModel::fromJsonObject(QJsonObject json) {

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;
}

QString OAIResourceServiceViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceServiceViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

QString OAIResourceServiceViewModel::getObject() const {
    return m_object;
}
void OAIResourceServiceViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIResourceServiceViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIResourceServiceViewModel::is_object_Valid() const{
    return m_object_isValid;
}

qint32 OAIResourceServiceViewModel::getResourceId() const {
    return m_resource_id;
}
void OAIResourceServiceViewModel::setResourceId(const qint32 &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIResourceServiceViewModel::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIResourceServiceViewModel::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIResourceServiceViewModel::getResourceName() const {
    return m_resource_name;
}
void OAIResourceServiceViewModel::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIResourceServiceViewModel::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIResourceServiceViewModel::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

qint32 OAIResourceServiceViewModel::getServiceId() const {
    return m_service_id;
}
void OAIResourceServiceViewModel::setServiceId(const qint32 &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIResourceServiceViewModel::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIResourceServiceViewModel::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIResourceServiceViewModel::getServiceName() const {
    return m_service_name;
}
void OAIResourceServiceViewModel::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIResourceServiceViewModel::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIResourceServiceViewModel::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIResourceServiceViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceServiceViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
