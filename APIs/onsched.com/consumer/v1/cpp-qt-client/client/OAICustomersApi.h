/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomersApi_H
#define OAI_OAICustomersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBookingFieldListViewModel.h"
#include "OAICountryViewModel.h"
#include "OAICustomFieldDefinitionListViewModel.h"
#include "OAICustomerInputModel.h"
#include "OAICustomerListViewModel.h"
#include "OAICustomerUpdateModel.h"
#include "OAICustomerViewModel.h"
#include "OAIStateViewModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomersApi : public QObject {
    Q_OBJECT

public:
    OAICustomersApi(const int timeOut = 0);
    ~OAICustomersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location_id QString [optional]
    */
    virtual void consumerV1CustomersBookingfieldsGet(const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>());


    virtual void consumerV1CustomersCountriesGet();

    /**
    * @param[in]  location_id QString [optional]
    * @param[in]  lead_questions bool [optional]
    */
    virtual void consumerV1CustomersCustomfieldsGet(const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &lead_questions = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  location_id QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  lastname QString [optional]
    * @param[in]  deleted bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void consumerV1CustomersGet(const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lastname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void consumerV1CustomersIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void consumerV1CustomersIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_customer_update_model OAICustomerUpdateModel [optional]
    */
    virtual void consumerV1CustomersIdPut(const QString &id, const ::OpenAPI::OptionalParam<OAICustomerUpdateModel> &oai_customer_update_model = ::OpenAPI::OptionalParam<OAICustomerUpdateModel>());

    /**
    * @param[in]  oai_customer_input_model OAICustomerInputModel [optional]
    */
    virtual void consumerV1CustomersPost(const ::OpenAPI::OptionalParam<OAICustomerInputModel> &oai_customer_input_model = ::OpenAPI::OptionalParam<OAICustomerInputModel>());

    /**
    * @param[in]  country QString [optional]
    */
    virtual void consumerV1CustomersStatesGet(const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void consumerV1CustomersBookingfieldsGetCallback(OAIHttpRequestWorker *worker);
    void consumerV1CustomersCountriesGetCallback(OAIHttpRequestWorker *worker);
    void consumerV1CustomersCustomfieldsGetCallback(OAIHttpRequestWorker *worker);
    void consumerV1CustomersGetCallback(OAIHttpRequestWorker *worker);
    void consumerV1CustomersIdDeleteCallback(OAIHttpRequestWorker *worker);
    void consumerV1CustomersIdGetCallback(OAIHttpRequestWorker *worker);
    void consumerV1CustomersIdPutCallback(OAIHttpRequestWorker *worker);
    void consumerV1CustomersPostCallback(OAIHttpRequestWorker *worker);
    void consumerV1CustomersStatesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void consumerV1CustomersBookingfieldsGetSignal(OAIBookingFieldListViewModel summary);
    void consumerV1CustomersCountriesGetSignal(QList<OAICountryViewModel> summary);
    void consumerV1CustomersCustomfieldsGetSignal(OAICustomFieldDefinitionListViewModel summary);
    void consumerV1CustomersGetSignal(OAICustomerListViewModel summary);
    void consumerV1CustomersIdDeleteSignal();
    void consumerV1CustomersIdGetSignal(OAICustomerViewModel summary);
    void consumerV1CustomersIdPutSignal();
    void consumerV1CustomersPostSignal(OAICustomerViewModel summary);
    void consumerV1CustomersStatesGetSignal(QList<OAIStateViewModel> summary);


    void consumerV1CustomersBookingfieldsGetSignalFull(OAIHttpRequestWorker *worker, OAIBookingFieldListViewModel summary);
    void consumerV1CustomersCountriesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICountryViewModel> summary);
    void consumerV1CustomersCustomfieldsGetSignalFull(OAIHttpRequestWorker *worker, OAICustomFieldDefinitionListViewModel summary);
    void consumerV1CustomersGetSignalFull(OAIHttpRequestWorker *worker, OAICustomerListViewModel summary);
    void consumerV1CustomersIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void consumerV1CustomersIdGetSignalFull(OAIHttpRequestWorker *worker, OAICustomerViewModel summary);
    void consumerV1CustomersIdPutSignalFull(OAIHttpRequestWorker *worker);
    void consumerV1CustomersPostSignalFull(OAIHttpRequestWorker *worker, OAICustomerViewModel summary);
    void consumerV1CustomersStatesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStateViewModel> summary);

    Q_DECL_DEPRECATED_X("Use consumerV1CustomersBookingfieldsGetSignalError() instead")
    void consumerV1CustomersBookingfieldsGetSignalE(OAIBookingFieldListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersBookingfieldsGetSignalError(OAIBookingFieldListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersCountriesGetSignalError() instead")
    void consumerV1CustomersCountriesGetSignalE(QList<OAICountryViewModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersCountriesGetSignalError(QList<OAICountryViewModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersCustomfieldsGetSignalError() instead")
    void consumerV1CustomersCustomfieldsGetSignalE(OAICustomFieldDefinitionListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersCustomfieldsGetSignalError(OAICustomFieldDefinitionListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersGetSignalError() instead")
    void consumerV1CustomersGetSignalE(OAICustomerListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersGetSignalError(OAICustomerListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersIdDeleteSignalError() instead")
    void consumerV1CustomersIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersIdGetSignalError() instead")
    void consumerV1CustomersIdGetSignalE(OAICustomerViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersIdGetSignalError(OAICustomerViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersIdPutSignalError() instead")
    void consumerV1CustomersIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersPostSignalError() instead")
    void consumerV1CustomersPostSignalE(OAICustomerViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersPostSignalError(OAICustomerViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersStatesGetSignalError() instead")
    void consumerV1CustomersStatesGetSignalE(QList<OAIStateViewModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersStatesGetSignalError(QList<OAIStateViewModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use consumerV1CustomersBookingfieldsGetSignalErrorFull() instead")
    void consumerV1CustomersBookingfieldsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersBookingfieldsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersCountriesGetSignalErrorFull() instead")
    void consumerV1CustomersCountriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersCountriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersCustomfieldsGetSignalErrorFull() instead")
    void consumerV1CustomersCustomfieldsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersCustomfieldsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersGetSignalErrorFull() instead")
    void consumerV1CustomersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersIdDeleteSignalErrorFull() instead")
    void consumerV1CustomersIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersIdGetSignalErrorFull() instead")
    void consumerV1CustomersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersIdPutSignalErrorFull() instead")
    void consumerV1CustomersIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersPostSignalErrorFull() instead")
    void consumerV1CustomersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerV1CustomersStatesGetSignalErrorFull() instead")
    void consumerV1CustomersStatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerV1CustomersStatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
