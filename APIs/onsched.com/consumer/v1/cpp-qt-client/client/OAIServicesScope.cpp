/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServicesScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServicesScope::OAIServicesScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServicesScope::OAIServicesScope() {
    this->initializeModel();
}

OAIServicesScope::~OAIServicesScope() {}

void OAIServicesScope::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIServicesScope::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIServicesScope::fromJson(QString jsonString) {
    
    if ( jsonString.compare("company", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicesScope::COMPANY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("location", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicesScope::LOCATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("all", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicesScope::ALL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIServicesScope::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIServicesScope::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIServicesScope::COMPANY:
            val = "company";
            break;
        case eOAIServicesScope::LOCATION:
            val = "location";
            break;
        case eOAIServicesScope::ALL:
            val = "all";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIServicesScope::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIServicesScope::eOAIServicesScope OAIServicesScope::getValue() const {
    return m_value;
}

void OAIServicesScope::setValue(const OAIServicesScope::eOAIServicesScope& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIServicesScope::isSet() const {
    
    return m_value_isSet;
}

bool OAIServicesScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
