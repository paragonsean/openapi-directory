/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailabilityViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailabilityViewModel::OAIAvailabilityViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailabilityViewModel::OAIAvailabilityViewModel() {
    this->initializeModel();
}

OAIAvailabilityViewModel::~OAIAvailabilityViewModel() {}

void OAIAvailabilityViewModel::initializeModel() {

    m_available_days_isSet = false;
    m_available_days_isValid = false;

    m_available_times_isSet = false;
    m_available_times_isValid = false;

    m_business_name_isSet = false;
    m_business_name_isValid = false;

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_calendar_resource_group_id_isSet = false;
    m_calendar_resource_group_id_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_first_available_date_isSet = false;
    m_first_available_date_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_resource_description_isSet = false;
    m_resource_description_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_ids_isSet = false;
    m_resource_ids_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_service_description_isSet = false;
    m_service_description_isValid = false;

    m_service_duration_isSet = false;
    m_service_duration_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_timezone_name_isSet = false;
    m_timezone_name_isValid = false;

    m_tz_requested_isSet = false;
    m_tz_requested_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAvailabilityViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailabilityViewModel::fromJsonObject(QJsonObject json) {

    m_available_days_isValid = ::OpenAPI::fromJsonValue(m_available_days, json[QString("availableDays")]);
    m_available_days_isSet = !json[QString("availableDays")].isNull() && m_available_days_isValid;

    m_available_times_isValid = ::OpenAPI::fromJsonValue(m_available_times, json[QString("availableTimes")]);
    m_available_times_isSet = !json[QString("availableTimes")].isNull() && m_available_times_isValid;

    m_business_name_isValid = ::OpenAPI::fromJsonValue(m_business_name, json[QString("businessName")]);
    m_business_name_isSet = !json[QString("businessName")].isNull() && m_business_name_isValid;

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendarId")]);
    m_calendar_id_isSet = !json[QString("calendarId")].isNull() && m_calendar_id_isValid;

    m_calendar_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_resource_group_id, json[QString("calendarResourceGroupId")]);
    m_calendar_resource_group_id_isSet = !json[QString("calendarResourceGroupId")].isNull() && m_calendar_resource_group_id_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_first_available_date_isValid = ::OpenAPI::fromJsonValue(m_first_available_date, json[QString("firstAvailableDate")]);
    m_first_available_date_isSet = !json[QString("firstAvailableDate")].isNull() && m_first_available_date_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_resource_description_isValid = ::OpenAPI::fromJsonValue(m_resource_description, json[QString("resourceDescription")]);
    m_resource_description_isSet = !json[QString("resourceDescription")].isNull() && m_resource_description_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_ids_isValid = ::OpenAPI::fromJsonValue(m_resource_ids, json[QString("resourceIds")]);
    m_resource_ids_isSet = !json[QString("resourceIds")].isNull() && m_resource_ids_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_service_description_isValid = ::OpenAPI::fromJsonValue(m_service_description, json[QString("serviceDescription")]);
    m_service_description_isSet = !json[QString("serviceDescription")].isNull() && m_service_description_isValid;

    m_service_duration_isValid = ::OpenAPI::fromJsonValue(m_service_duration, json[QString("serviceDuration")]);
    m_service_duration_isSet = !json[QString("serviceDuration")].isNull() && m_service_duration_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_timezone_name_isValid = ::OpenAPI::fromJsonValue(m_timezone_name, json[QString("timezoneName")]);
    m_timezone_name_isSet = !json[QString("timezoneName")].isNull() && m_timezone_name_isValid;

    m_tz_requested_isValid = ::OpenAPI::fromJsonValue(m_tz_requested, json[QString("tzRequested")]);
    m_tz_requested_isSet = !json[QString("tzRequested")].isNull() && m_tz_requested_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAvailabilityViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailabilityViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_available_days.size() > 0) {
        obj.insert(QString("availableDays"), ::OpenAPI::toJsonValue(m_available_days));
    }
    if (m_available_times.size() > 0) {
        obj.insert(QString("availableTimes"), ::OpenAPI::toJsonValue(m_available_times));
    }
    if (m_business_name_isSet) {
        obj.insert(QString("businessName"), ::OpenAPI::toJsonValue(m_business_name));
    }
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendarId"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_calendar_resource_group_id_isSet) {
        obj.insert(QString("calendarResourceGroupId"), ::OpenAPI::toJsonValue(m_calendar_resource_group_id));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_first_available_date_isSet) {
        obj.insert(QString("firstAvailableDate"), ::OpenAPI::toJsonValue(m_first_available_date));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_resource_description_isSet) {
        obj.insert(QString("resourceDescription"), ::OpenAPI::toJsonValue(m_resource_description));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_ids_isSet) {
        obj.insert(QString("resourceIds"), ::OpenAPI::toJsonValue(m_resource_ids));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_service_description_isSet) {
        obj.insert(QString("serviceDescription"), ::OpenAPI::toJsonValue(m_service_description));
    }
    if (m_service_duration_isSet) {
        obj.insert(QString("serviceDuration"), ::OpenAPI::toJsonValue(m_service_duration));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_timezone_name_isSet) {
        obj.insert(QString("timezoneName"), ::OpenAPI::toJsonValue(m_timezone_name));
    }
    if (m_tz_requested_isSet) {
        obj.insert(QString("tzRequested"), ::OpenAPI::toJsonValue(m_tz_requested));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<OAIAvailableDayViewModel> OAIAvailabilityViewModel::getAvailableDays() const {
    return m_available_days;
}
void OAIAvailabilityViewModel::setAvailableDays(const QList<OAIAvailableDayViewModel> &available_days) {
    m_available_days = available_days;
    m_available_days_isSet = true;
}

bool OAIAvailabilityViewModel::is_available_days_Set() const{
    return m_available_days_isSet;
}

bool OAIAvailabilityViewModel::is_available_days_Valid() const{
    return m_available_days_isValid;
}

QList<OAIAvailableTimeViewModel> OAIAvailabilityViewModel::getAvailableTimes() const {
    return m_available_times;
}
void OAIAvailabilityViewModel::setAvailableTimes(const QList<OAIAvailableTimeViewModel> &available_times) {
    m_available_times = available_times;
    m_available_times_isSet = true;
}

bool OAIAvailabilityViewModel::is_available_times_Set() const{
    return m_available_times_isSet;
}

bool OAIAvailabilityViewModel::is_available_times_Valid() const{
    return m_available_times_isValid;
}

QString OAIAvailabilityViewModel::getBusinessName() const {
    return m_business_name;
}
void OAIAvailabilityViewModel::setBusinessName(const QString &business_name) {
    m_business_name = business_name;
    m_business_name_isSet = true;
}

bool OAIAvailabilityViewModel::is_business_name_Set() const{
    return m_business_name_isSet;
}

bool OAIAvailabilityViewModel::is_business_name_Valid() const{
    return m_business_name_isValid;
}

QString OAIAvailabilityViewModel::getCalendarId() const {
    return m_calendar_id;
}
void OAIAvailabilityViewModel::setCalendarId(const QString &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAIAvailabilityViewModel::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAIAvailabilityViewModel::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

QString OAIAvailabilityViewModel::getCalendarResourceGroupId() const {
    return m_calendar_resource_group_id;
}
void OAIAvailabilityViewModel::setCalendarResourceGroupId(const QString &calendar_resource_group_id) {
    m_calendar_resource_group_id = calendar_resource_group_id;
    m_calendar_resource_group_id_isSet = true;
}

bool OAIAvailabilityViewModel::is_calendar_resource_group_id_Set() const{
    return m_calendar_resource_group_id_isSet;
}

bool OAIAvailabilityViewModel::is_calendar_resource_group_id_Valid() const{
    return m_calendar_resource_group_id_isValid;
}

QString OAIAvailabilityViewModel::getEndDate() const {
    return m_end_date;
}
void OAIAvailabilityViewModel::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIAvailabilityViewModel::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIAvailabilityViewModel::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIAvailabilityViewModel::getFirstAvailableDate() const {
    return m_first_available_date;
}
void OAIAvailabilityViewModel::setFirstAvailableDate(const QString &first_available_date) {
    m_first_available_date = first_available_date;
    m_first_available_date_isSet = true;
}

bool OAIAvailabilityViewModel::is_first_available_date_Set() const{
    return m_first_available_date_isSet;
}

bool OAIAvailabilityViewModel::is_first_available_date_Valid() const{
    return m_first_available_date_isValid;
}

QString OAIAvailabilityViewModel::getLocationId() const {
    return m_location_id;
}
void OAIAvailabilityViewModel::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIAvailabilityViewModel::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIAvailabilityViewModel::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIAvailabilityViewModel::getObject() const {
    return m_object;
}
void OAIAvailabilityViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIAvailabilityViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIAvailabilityViewModel::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIAvailabilityViewModel::getResourceDescription() const {
    return m_resource_description;
}
void OAIAvailabilityViewModel::setResourceDescription(const QString &resource_description) {
    m_resource_description = resource_description;
    m_resource_description_isSet = true;
}

bool OAIAvailabilityViewModel::is_resource_description_Set() const{
    return m_resource_description_isSet;
}

bool OAIAvailabilityViewModel::is_resource_description_Valid() const{
    return m_resource_description_isValid;
}

QString OAIAvailabilityViewModel::getResourceId() const {
    return m_resource_id;
}
void OAIAvailabilityViewModel::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIAvailabilityViewModel::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIAvailabilityViewModel::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIAvailabilityViewModel::getResourceIds() const {
    return m_resource_ids;
}
void OAIAvailabilityViewModel::setResourceIds(const QString &resource_ids) {
    m_resource_ids = resource_ids;
    m_resource_ids_isSet = true;
}

bool OAIAvailabilityViewModel::is_resource_ids_Set() const{
    return m_resource_ids_isSet;
}

bool OAIAvailabilityViewModel::is_resource_ids_Valid() const{
    return m_resource_ids_isValid;
}

QString OAIAvailabilityViewModel::getResourceName() const {
    return m_resource_name;
}
void OAIAvailabilityViewModel::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIAvailabilityViewModel::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIAvailabilityViewModel::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIAvailabilityViewModel::getServiceDescription() const {
    return m_service_description;
}
void OAIAvailabilityViewModel::setServiceDescription(const QString &service_description) {
    m_service_description = service_description;
    m_service_description_isSet = true;
}

bool OAIAvailabilityViewModel::is_service_description_Set() const{
    return m_service_description_isSet;
}

bool OAIAvailabilityViewModel::is_service_description_Valid() const{
    return m_service_description_isValid;
}

qint32 OAIAvailabilityViewModel::getServiceDuration() const {
    return m_service_duration;
}
void OAIAvailabilityViewModel::setServiceDuration(const qint32 &service_duration) {
    m_service_duration = service_duration;
    m_service_duration_isSet = true;
}

bool OAIAvailabilityViewModel::is_service_duration_Set() const{
    return m_service_duration_isSet;
}

bool OAIAvailabilityViewModel::is_service_duration_Valid() const{
    return m_service_duration_isValid;
}

QString OAIAvailabilityViewModel::getServiceId() const {
    return m_service_id;
}
void OAIAvailabilityViewModel::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIAvailabilityViewModel::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIAvailabilityViewModel::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIAvailabilityViewModel::getServiceName() const {
    return m_service_name;
}
void OAIAvailabilityViewModel::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIAvailabilityViewModel::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIAvailabilityViewModel::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIAvailabilityViewModel::getStartDate() const {
    return m_start_date;
}
void OAIAvailabilityViewModel::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIAvailabilityViewModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIAvailabilityViewModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIAvailabilityViewModel::getTimezoneName() const {
    return m_timezone_name;
}
void OAIAvailabilityViewModel::setTimezoneName(const QString &timezone_name) {
    m_timezone_name = timezone_name;
    m_timezone_name_isSet = true;
}

bool OAIAvailabilityViewModel::is_timezone_name_Set() const{
    return m_timezone_name_isSet;
}

bool OAIAvailabilityViewModel::is_timezone_name_Valid() const{
    return m_timezone_name_isValid;
}

qint32 OAIAvailabilityViewModel::getTzRequested() const {
    return m_tz_requested;
}
void OAIAvailabilityViewModel::setTzRequested(const qint32 &tz_requested) {
    m_tz_requested = tz_requested;
    m_tz_requested_isSet = true;
}

bool OAIAvailabilityViewModel::is_tz_requested_Set() const{
    return m_tz_requested_isSet;
}

bool OAIAvailabilityViewModel::is_tz_requested_Valid() const{
    return m_tz_requested_isValid;
}

QString OAIAvailabilityViewModel::getUrl() const {
    return m_url;
}
void OAIAvailabilityViewModel::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAvailabilityViewModel::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAvailabilityViewModel::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAvailabilityViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_times.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_available_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tz_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailabilityViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
