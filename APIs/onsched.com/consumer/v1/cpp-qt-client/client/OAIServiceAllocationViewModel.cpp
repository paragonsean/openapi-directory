/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceAllocationViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceAllocationViewModel::OAIServiceAllocationViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceAllocationViewModel::OAIServiceAllocationViewModel() {
    this->initializeModel();
}

OAIServiceAllocationViewModel::~OAIServiceAllocationViewModel() {}

void OAIServiceAllocationViewModel::initializeModel() {

    m_booking_count_isSet = false;
    m_booking_count_isValid = false;

    m_booking_limit_isSet = false;
    m_booking_limit_isValid = false;

    m_deleted_status_isSet = false;
    m_deleted_status_isValid = false;

    m_deleted_time_isSet = false;
    m_deleted_time_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_repeat_isSet = false;
    m_repeat_isValid = false;

    m_repeats_isSet = false;
    m_repeats_isValid = false;

    m_resource_address_isSet = false;
    m_resource_address_isValid = false;

    m_resource_description_isSet = false;
    m_resource_description_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_image_url_isSet = false;
    m_resource_image_url_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_resource_phone_isSet = false;
    m_resource_phone_isValid = false;

    m_service_description_isSet = false;
    m_service_description_isValid = false;

    m_service_duration_isSet = false;
    m_service_duration_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_image_url_isSet = false;
    m_service_image_url_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_timezone_name_isSet = false;
    m_timezone_name_isValid = false;

    m_timezone_offset_isSet = false;
    m_timezone_offset_isValid = false;
}

void OAIServiceAllocationViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceAllocationViewModel::fromJsonObject(QJsonObject json) {

    m_booking_count_isValid = ::OpenAPI::fromJsonValue(m_booking_count, json[QString("bookingCount")]);
    m_booking_count_isSet = !json[QString("bookingCount")].isNull() && m_booking_count_isValid;

    m_booking_limit_isValid = ::OpenAPI::fromJsonValue(m_booking_limit, json[QString("bookingLimit")]);
    m_booking_limit_isSet = !json[QString("bookingLimit")].isNull() && m_booking_limit_isValid;

    m_deleted_status_isValid = ::OpenAPI::fromJsonValue(m_deleted_status, json[QString("deletedStatus")]);
    m_deleted_status_isSet = !json[QString("deletedStatus")].isNull() && m_deleted_status_isValid;

    m_deleted_time_isValid = ::OpenAPI::fromJsonValue(m_deleted_time, json[QString("deletedTime")]);
    m_deleted_time_isSet = !json[QString("deletedTime")].isNull() && m_deleted_time_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_repeat_isValid = ::OpenAPI::fromJsonValue(m_repeat, json[QString("repeat")]);
    m_repeat_isSet = !json[QString("repeat")].isNull() && m_repeat_isValid;

    m_repeats_isValid = ::OpenAPI::fromJsonValue(m_repeats, json[QString("repeats")]);
    m_repeats_isSet = !json[QString("repeats")].isNull() && m_repeats_isValid;

    m_resource_address_isValid = ::OpenAPI::fromJsonValue(m_resource_address, json[QString("resourceAddress")]);
    m_resource_address_isSet = !json[QString("resourceAddress")].isNull() && m_resource_address_isValid;

    m_resource_description_isValid = ::OpenAPI::fromJsonValue(m_resource_description, json[QString("resourceDescription")]);
    m_resource_description_isSet = !json[QString("resourceDescription")].isNull() && m_resource_description_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_image_url_isValid = ::OpenAPI::fromJsonValue(m_resource_image_url, json[QString("resourceImageUrl")]);
    m_resource_image_url_isSet = !json[QString("resourceImageUrl")].isNull() && m_resource_image_url_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_resource_phone_isValid = ::OpenAPI::fromJsonValue(m_resource_phone, json[QString("resourcePhone")]);
    m_resource_phone_isSet = !json[QString("resourcePhone")].isNull() && m_resource_phone_isValid;

    m_service_description_isValid = ::OpenAPI::fromJsonValue(m_service_description, json[QString("serviceDescription")]);
    m_service_description_isSet = !json[QString("serviceDescription")].isNull() && m_service_description_isValid;

    m_service_duration_isValid = ::OpenAPI::fromJsonValue(m_service_duration, json[QString("serviceDuration")]);
    m_service_duration_isSet = !json[QString("serviceDuration")].isNull() && m_service_duration_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_image_url_isValid = ::OpenAPI::fromJsonValue(m_service_image_url, json[QString("serviceImageUrl")]);
    m_service_image_url_isSet = !json[QString("serviceImageUrl")].isNull() && m_service_image_url_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_timezone_name_isValid = ::OpenAPI::fromJsonValue(m_timezone_name, json[QString("timezoneName")]);
    m_timezone_name_isSet = !json[QString("timezoneName")].isNull() && m_timezone_name_isValid;

    m_timezone_offset_isValid = ::OpenAPI::fromJsonValue(m_timezone_offset, json[QString("timezoneOffset")]);
    m_timezone_offset_isSet = !json[QString("timezoneOffset")].isNull() && m_timezone_offset_isValid;
}

QString OAIServiceAllocationViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceAllocationViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_booking_count_isSet) {
        obj.insert(QString("bookingCount"), ::OpenAPI::toJsonValue(m_booking_count));
    }
    if (m_booking_limit_isSet) {
        obj.insert(QString("bookingLimit"), ::OpenAPI::toJsonValue(m_booking_limit));
    }
    if (m_deleted_status_isSet) {
        obj.insert(QString("deletedStatus"), ::OpenAPI::toJsonValue(m_deleted_status));
    }
    if (m_deleted_time_isSet) {
        obj.insert(QString("deletedTime"), ::OpenAPI::toJsonValue(m_deleted_time));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_repeat.isSet()) {
        obj.insert(QString("repeat"), ::OpenAPI::toJsonValue(m_repeat));
    }
    if (m_repeats_isSet) {
        obj.insert(QString("repeats"), ::OpenAPI::toJsonValue(m_repeats));
    }
    if (m_resource_address.isSet()) {
        obj.insert(QString("resourceAddress"), ::OpenAPI::toJsonValue(m_resource_address));
    }
    if (m_resource_description_isSet) {
        obj.insert(QString("resourceDescription"), ::OpenAPI::toJsonValue(m_resource_description));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_image_url_isSet) {
        obj.insert(QString("resourceImageUrl"), ::OpenAPI::toJsonValue(m_resource_image_url));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_resource_phone.isSet()) {
        obj.insert(QString("resourcePhone"), ::OpenAPI::toJsonValue(m_resource_phone));
    }
    if (m_service_description_isSet) {
        obj.insert(QString("serviceDescription"), ::OpenAPI::toJsonValue(m_service_description));
    }
    if (m_service_duration_isSet) {
        obj.insert(QString("serviceDuration"), ::OpenAPI::toJsonValue(m_service_duration));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_image_url_isSet) {
        obj.insert(QString("serviceImageUrl"), ::OpenAPI::toJsonValue(m_service_image_url));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_timezone_name_isSet) {
        obj.insert(QString("timezoneName"), ::OpenAPI::toJsonValue(m_timezone_name));
    }
    if (m_timezone_offset_isSet) {
        obj.insert(QString("timezoneOffset"), ::OpenAPI::toJsonValue(m_timezone_offset));
    }
    return obj;
}

qint32 OAIServiceAllocationViewModel::getBookingCount() const {
    return m_booking_count;
}
void OAIServiceAllocationViewModel::setBookingCount(const qint32 &booking_count) {
    m_booking_count = booking_count;
    m_booking_count_isSet = true;
}

bool OAIServiceAllocationViewModel::is_booking_count_Set() const{
    return m_booking_count_isSet;
}

bool OAIServiceAllocationViewModel::is_booking_count_Valid() const{
    return m_booking_count_isValid;
}

qint32 OAIServiceAllocationViewModel::getBookingLimit() const {
    return m_booking_limit;
}
void OAIServiceAllocationViewModel::setBookingLimit(const qint32 &booking_limit) {
    m_booking_limit = booking_limit;
    m_booking_limit_isSet = true;
}

bool OAIServiceAllocationViewModel::is_booking_limit_Set() const{
    return m_booking_limit_isSet;
}

bool OAIServiceAllocationViewModel::is_booking_limit_Valid() const{
    return m_booking_limit_isValid;
}

bool OAIServiceAllocationViewModel::isDeletedStatus() const {
    return m_deleted_status;
}
void OAIServiceAllocationViewModel::setDeletedStatus(const bool &deleted_status) {
    m_deleted_status = deleted_status;
    m_deleted_status_isSet = true;
}

bool OAIServiceAllocationViewModel::is_deleted_status_Set() const{
    return m_deleted_status_isSet;
}

bool OAIServiceAllocationViewModel::is_deleted_status_Valid() const{
    return m_deleted_status_isValid;
}

QString OAIServiceAllocationViewModel::getDeletedTime() const {
    return m_deleted_time;
}
void OAIServiceAllocationViewModel::setDeletedTime(const QString &deleted_time) {
    m_deleted_time = deleted_time;
    m_deleted_time_isSet = true;
}

bool OAIServiceAllocationViewModel::is_deleted_time_Set() const{
    return m_deleted_time_isSet;
}

bool OAIServiceAllocationViewModel::is_deleted_time_Valid() const{
    return m_deleted_time_isValid;
}

QString OAIServiceAllocationViewModel::getEndDate() const {
    return m_end_date;
}
void OAIServiceAllocationViewModel::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIServiceAllocationViewModel::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIServiceAllocationViewModel::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAIServiceAllocationViewModel::getEndTime() const {
    return m_end_time;
}
void OAIServiceAllocationViewModel::setEndTime(const qint32 &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIServiceAllocationViewModel::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIServiceAllocationViewModel::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIServiceAllocationViewModel::getId() const {
    return m_id;
}
void OAIServiceAllocationViewModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceAllocationViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceAllocationViewModel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIServiceAllocationViewModel::getLocationId() const {
    return m_location_id;
}
void OAIServiceAllocationViewModel::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIServiceAllocationViewModel::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIServiceAllocationViewModel::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIServiceAllocationViewModel::getObject() const {
    return m_object;
}
void OAIServiceAllocationViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIServiceAllocationViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIServiceAllocationViewModel::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIServiceAllocationViewModel::getReason() const {
    return m_reason;
}
void OAIServiceAllocationViewModel::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIServiceAllocationViewModel::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIServiceAllocationViewModel::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIRepeatViewModel OAIServiceAllocationViewModel::getRepeat() const {
    return m_repeat;
}
void OAIServiceAllocationViewModel::setRepeat(const OAIRepeatViewModel &repeat) {
    m_repeat = repeat;
    m_repeat_isSet = true;
}

bool OAIServiceAllocationViewModel::is_repeat_Set() const{
    return m_repeat_isSet;
}

bool OAIServiceAllocationViewModel::is_repeat_Valid() const{
    return m_repeat_isValid;
}

bool OAIServiceAllocationViewModel::isRepeats() const {
    return m_repeats;
}
void OAIServiceAllocationViewModel::setRepeats(const bool &repeats) {
    m_repeats = repeats;
    m_repeats_isSet = true;
}

bool OAIServiceAllocationViewModel::is_repeats_Set() const{
    return m_repeats_isSet;
}

bool OAIServiceAllocationViewModel::is_repeats_Valid() const{
    return m_repeats_isValid;
}

OAIAddressViewModel OAIServiceAllocationViewModel::getResourceAddress() const {
    return m_resource_address;
}
void OAIServiceAllocationViewModel::setResourceAddress(const OAIAddressViewModel &resource_address) {
    m_resource_address = resource_address;
    m_resource_address_isSet = true;
}

bool OAIServiceAllocationViewModel::is_resource_address_Set() const{
    return m_resource_address_isSet;
}

bool OAIServiceAllocationViewModel::is_resource_address_Valid() const{
    return m_resource_address_isValid;
}

QString OAIServiceAllocationViewModel::getResourceDescription() const {
    return m_resource_description;
}
void OAIServiceAllocationViewModel::setResourceDescription(const QString &resource_description) {
    m_resource_description = resource_description;
    m_resource_description_isSet = true;
}

bool OAIServiceAllocationViewModel::is_resource_description_Set() const{
    return m_resource_description_isSet;
}

bool OAIServiceAllocationViewModel::is_resource_description_Valid() const{
    return m_resource_description_isValid;
}

QString OAIServiceAllocationViewModel::getResourceId() const {
    return m_resource_id;
}
void OAIServiceAllocationViewModel::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIServiceAllocationViewModel::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIServiceAllocationViewModel::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIServiceAllocationViewModel::getResourceImageUrl() const {
    return m_resource_image_url;
}
void OAIServiceAllocationViewModel::setResourceImageUrl(const QString &resource_image_url) {
    m_resource_image_url = resource_image_url;
    m_resource_image_url_isSet = true;
}

bool OAIServiceAllocationViewModel::is_resource_image_url_Set() const{
    return m_resource_image_url_isSet;
}

bool OAIServiceAllocationViewModel::is_resource_image_url_Valid() const{
    return m_resource_image_url_isValid;
}

QString OAIServiceAllocationViewModel::getResourceName() const {
    return m_resource_name;
}
void OAIServiceAllocationViewModel::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIServiceAllocationViewModel::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIServiceAllocationViewModel::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

OAIPhoneViewModel OAIServiceAllocationViewModel::getResourcePhone() const {
    return m_resource_phone;
}
void OAIServiceAllocationViewModel::setResourcePhone(const OAIPhoneViewModel &resource_phone) {
    m_resource_phone = resource_phone;
    m_resource_phone_isSet = true;
}

bool OAIServiceAllocationViewModel::is_resource_phone_Set() const{
    return m_resource_phone_isSet;
}

bool OAIServiceAllocationViewModel::is_resource_phone_Valid() const{
    return m_resource_phone_isValid;
}

QString OAIServiceAllocationViewModel::getServiceDescription() const {
    return m_service_description;
}
void OAIServiceAllocationViewModel::setServiceDescription(const QString &service_description) {
    m_service_description = service_description;
    m_service_description_isSet = true;
}

bool OAIServiceAllocationViewModel::is_service_description_Set() const{
    return m_service_description_isSet;
}

bool OAIServiceAllocationViewModel::is_service_description_Valid() const{
    return m_service_description_isValid;
}

qint32 OAIServiceAllocationViewModel::getServiceDuration() const {
    return m_service_duration;
}
void OAIServiceAllocationViewModel::setServiceDuration(const qint32 &service_duration) {
    m_service_duration = service_duration;
    m_service_duration_isSet = true;
}

bool OAIServiceAllocationViewModel::is_service_duration_Set() const{
    return m_service_duration_isSet;
}

bool OAIServiceAllocationViewModel::is_service_duration_Valid() const{
    return m_service_duration_isValid;
}

QString OAIServiceAllocationViewModel::getServiceId() const {
    return m_service_id;
}
void OAIServiceAllocationViewModel::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIServiceAllocationViewModel::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIServiceAllocationViewModel::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIServiceAllocationViewModel::getServiceImageUrl() const {
    return m_service_image_url;
}
void OAIServiceAllocationViewModel::setServiceImageUrl(const QString &service_image_url) {
    m_service_image_url = service_image_url;
    m_service_image_url_isSet = true;
}

bool OAIServiceAllocationViewModel::is_service_image_url_Set() const{
    return m_service_image_url_isSet;
}

bool OAIServiceAllocationViewModel::is_service_image_url_Valid() const{
    return m_service_image_url_isValid;
}

QString OAIServiceAllocationViewModel::getServiceName() const {
    return m_service_name;
}
void OAIServiceAllocationViewModel::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIServiceAllocationViewModel::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIServiceAllocationViewModel::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIServiceAllocationViewModel::getStartDate() const {
    return m_start_date;
}
void OAIServiceAllocationViewModel::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIServiceAllocationViewModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIServiceAllocationViewModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

qint32 OAIServiceAllocationViewModel::getStartTime() const {
    return m_start_time;
}
void OAIServiceAllocationViewModel::setStartTime(const qint32 &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIServiceAllocationViewModel::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIServiceAllocationViewModel::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIServiceAllocationViewModel::getTimezoneName() const {
    return m_timezone_name;
}
void OAIServiceAllocationViewModel::setTimezoneName(const QString &timezone_name) {
    m_timezone_name = timezone_name;
    m_timezone_name_isSet = true;
}

bool OAIServiceAllocationViewModel::is_timezone_name_Set() const{
    return m_timezone_name_isSet;
}

bool OAIServiceAllocationViewModel::is_timezone_name_Valid() const{
    return m_timezone_name_isValid;
}

qint32 OAIServiceAllocationViewModel::getTimezoneOffset() const {
    return m_timezone_offset;
}
void OAIServiceAllocationViewModel::setTimezoneOffset(const qint32 &timezone_offset) {
    m_timezone_offset = timezone_offset;
    m_timezone_offset_isSet = true;
}

bool OAIServiceAllocationViewModel::is_timezone_offset_Set() const{
    return m_timezone_offset_isSet;
}

bool OAIServiceAllocationViewModel::is_timezone_offset_Valid() const{
    return m_timezone_offset_isValid;
}

bool OAIServiceAllocationViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_booking_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceAllocationViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
