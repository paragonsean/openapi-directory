# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_input_model import AddressInputModel
from openapi_server.models.contact_input_model import ContactInputModel
from openapi_server.models.custom_field_input_model import CustomFieldInputModel
from openapi_server import util


class CustomerInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: AddressInputModel=None, contact: ContactInputModel=None, custom_fields: CustomFieldInputModel=None, email: str=None, firstname: str=None, lastname: str=None, location_id: str=None, name: str=None, notification_type: str=None, send_lead_notification: bool=None, stripe_customer_id: str=None, type: int=None):
        """CustomerInputModel - a model defined in OpenAPI

        :param address: The address of this CustomerInputModel.
        :param contact: The contact of this CustomerInputModel.
        :param custom_fields: The custom_fields of this CustomerInputModel.
        :param email: The email of this CustomerInputModel.
        :param firstname: The firstname of this CustomerInputModel.
        :param lastname: The lastname of this CustomerInputModel.
        :param location_id: The location_id of this CustomerInputModel.
        :param name: The name of this CustomerInputModel.
        :param notification_type: The notification_type of this CustomerInputModel.
        :param send_lead_notification: The send_lead_notification of this CustomerInputModel.
        :param stripe_customer_id: The stripe_customer_id of this CustomerInputModel.
        :param type: The type of this CustomerInputModel.
        """
        self.openapi_types = {
            'address': AddressInputModel,
            'contact': ContactInputModel,
            'custom_fields': CustomFieldInputModel,
            'email': str,
            'firstname': str,
            'lastname': str,
            'location_id': str,
            'name': str,
            'notification_type': str,
            'send_lead_notification': bool,
            'stripe_customer_id': str,
            'type': int
        }

        self.attribute_map = {
            'address': 'address',
            'contact': 'contact',
            'custom_fields': 'customFields',
            'email': 'email',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'location_id': 'locationId',
            'name': 'name',
            'notification_type': 'notificationType',
            'send_lead_notification': 'sendLeadNotification',
            'stripe_customer_id': 'stripeCustomerId',
            'type': 'type'
        }

        self._address = address
        self._contact = contact
        self._custom_fields = custom_fields
        self._email = email
        self._firstname = firstname
        self._lastname = lastname
        self._location_id = location_id
        self._name = name
        self._notification_type = notification_type
        self._send_lead_notification = send_lead_notification
        self._stripe_customer_id = stripe_customer_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerInputModel of this CustomerInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this CustomerInputModel.


        :return: The address of this CustomerInputModel.
        :rtype: AddressInputModel
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CustomerInputModel.


        :param address: The address of this CustomerInputModel.
        :type address: AddressInputModel
        """

        self._address = address

    @property
    def contact(self):
        """Gets the contact of this CustomerInputModel.


        :return: The contact of this CustomerInputModel.
        :rtype: ContactInputModel
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this CustomerInputModel.


        :param contact: The contact of this CustomerInputModel.
        :type contact: ContactInputModel
        """

        self._contact = contact

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CustomerInputModel.


        :return: The custom_fields of this CustomerInputModel.
        :rtype: CustomFieldInputModel
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CustomerInputModel.


        :param custom_fields: The custom_fields of this CustomerInputModel.
        :type custom_fields: CustomFieldInputModel
        """

        self._custom_fields = custom_fields

    @property
    def email(self):
        """Gets the email of this CustomerInputModel.


        :return: The email of this CustomerInputModel.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerInputModel.


        :param email: The email of this CustomerInputModel.
        :type email: str
        """

        self._email = email

    @property
    def firstname(self):
        """Gets the firstname of this CustomerInputModel.


        :return: The firstname of this CustomerInputModel.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this CustomerInputModel.


        :param firstname: The firstname of this CustomerInputModel.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this CustomerInputModel.


        :return: The lastname of this CustomerInputModel.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this CustomerInputModel.


        :param lastname: The lastname of this CustomerInputModel.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def location_id(self):
        """Gets the location_id of this CustomerInputModel.

        

        :return: The location_id of this CustomerInputModel.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this CustomerInputModel.

        

        :param location_id: The location_id of this CustomerInputModel.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def name(self):
        """Gets the name of this CustomerInputModel.


        :return: The name of this CustomerInputModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomerInputModel.


        :param name: The name of this CustomerInputModel.
        :type name: str
        """

        self._name = name

    @property
    def notification_type(self):
        """Gets the notification_type of this CustomerInputModel.

        0 = default(Email), 1 = Email, 2 = SMS, 3 = Email and SMS

        :return: The notification_type of this CustomerInputModel.
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this CustomerInputModel.

        0 = default(Email), 1 = Email, 2 = SMS, 3 = Email and SMS

        :param notification_type: The notification_type of this CustomerInputModel.
        :type notification_type: str
        """

        self._notification_type = notification_type

    @property
    def send_lead_notification(self):
        """Gets the send_lead_notification of this CustomerInputModel.


        :return: The send_lead_notification of this CustomerInputModel.
        :rtype: bool
        """
        return self._send_lead_notification

    @send_lead_notification.setter
    def send_lead_notification(self, send_lead_notification):
        """Sets the send_lead_notification of this CustomerInputModel.


        :param send_lead_notification: The send_lead_notification of this CustomerInputModel.
        :type send_lead_notification: bool
        """

        self._send_lead_notification = send_lead_notification

    @property
    def stripe_customer_id(self):
        """Gets the stripe_customer_id of this CustomerInputModel.


        :return: The stripe_customer_id of this CustomerInputModel.
        :rtype: str
        """
        return self._stripe_customer_id

    @stripe_customer_id.setter
    def stripe_customer_id(self, stripe_customer_id):
        """Sets the stripe_customer_id of this CustomerInputModel.


        :param stripe_customer_id: The stripe_customer_id of this CustomerInputModel.
        :type stripe_customer_id: str
        """

        self._stripe_customer_id = stripe_customer_id

    @property
    def type(self):
        """Gets the type of this CustomerInputModel.


        :return: The type of this CustomerInputModel.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomerInputModel.


        :param type: The type of this CustomerInputModel.
        :type type: int
        """

        self._type = type
