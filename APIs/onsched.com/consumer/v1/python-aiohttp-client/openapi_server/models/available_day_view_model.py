# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AvailableDayViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, booking_count: int=None, booking_limit: int=None, closed: bool=None, _date: str=None, object: str=None, reason: str=None, reason_code: int=None):
        """AvailableDayViewModel - a model defined in OpenAPI

        :param available: The available of this AvailableDayViewModel.
        :param booking_count: The booking_count of this AvailableDayViewModel.
        :param booking_limit: The booking_limit of this AvailableDayViewModel.
        :param closed: The closed of this AvailableDayViewModel.
        :param _date: The _date of this AvailableDayViewModel.
        :param object: The object of this AvailableDayViewModel.
        :param reason: The reason of this AvailableDayViewModel.
        :param reason_code: The reason_code of this AvailableDayViewModel.
        """
        self.openapi_types = {
            'available': bool,
            'booking_count': int,
            'booking_limit': int,
            'closed': bool,
            '_date': str,
            'object': str,
            'reason': str,
            'reason_code': int
        }

        self.attribute_map = {
            'available': 'available',
            'booking_count': 'bookingCount',
            'booking_limit': 'bookingLimit',
            'closed': 'closed',
            '_date': 'date',
            'object': 'object',
            'reason': 'reason',
            'reason_code': 'reasonCode'
        }

        self._available = available
        self._booking_count = booking_count
        self._booking_limit = booking_limit
        self._closed = closed
        self.__date = _date
        self._object = object
        self._reason = reason
        self._reason_code = reason_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableDayViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailableDayViewModel of this AvailableDayViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this AvailableDayViewModel.


        :return: The available of this AvailableDayViewModel.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this AvailableDayViewModel.


        :param available: The available of this AvailableDayViewModel.
        :type available: bool
        """

        self._available = available

    @property
    def booking_count(self):
        """Gets the booking_count of this AvailableDayViewModel.


        :return: The booking_count of this AvailableDayViewModel.
        :rtype: int
        """
        return self._booking_count

    @booking_count.setter
    def booking_count(self, booking_count):
        """Sets the booking_count of this AvailableDayViewModel.


        :param booking_count: The booking_count of this AvailableDayViewModel.
        :type booking_count: int
        """

        self._booking_count = booking_count

    @property
    def booking_limit(self):
        """Gets the booking_limit of this AvailableDayViewModel.


        :return: The booking_limit of this AvailableDayViewModel.
        :rtype: int
        """
        return self._booking_limit

    @booking_limit.setter
    def booking_limit(self, booking_limit):
        """Sets the booking_limit of this AvailableDayViewModel.


        :param booking_limit: The booking_limit of this AvailableDayViewModel.
        :type booking_limit: int
        """

        self._booking_limit = booking_limit

    @property
    def closed(self):
        """Gets the closed of this AvailableDayViewModel.


        :return: The closed of this AvailableDayViewModel.
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this AvailableDayViewModel.


        :param closed: The closed of this AvailableDayViewModel.
        :type closed: bool
        """

        self._closed = closed

    @property
    def _date(self):
        """Gets the _date of this AvailableDayViewModel.


        :return: The _date of this AvailableDayViewModel.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AvailableDayViewModel.


        :param _date: The _date of this AvailableDayViewModel.
        :type _date: str
        """

        self.__date = _date

    @property
    def object(self):
        """Gets the object of this AvailableDayViewModel.


        :return: The object of this AvailableDayViewModel.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this AvailableDayViewModel.


        :param object: The object of this AvailableDayViewModel.
        :type object: str
        """

        self._object = object

    @property
    def reason(self):
        """Gets the reason of this AvailableDayViewModel.


        :return: The reason of this AvailableDayViewModel.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this AvailableDayViewModel.


        :param reason: The reason of this AvailableDayViewModel.
        :type reason: str
        """

        self._reason = reason

    @property
    def reason_code(self):
        """Gets the reason_code of this AvailableDayViewModel.


        :return: The reason_code of this AvailableDayViewModel.
        :rtype: int
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this AvailableDayViewModel.


        :param reason_code: The reason_code of this AvailableDayViewModel.
        :type reason_code: int
        """

        self._reason_code = reason_code
