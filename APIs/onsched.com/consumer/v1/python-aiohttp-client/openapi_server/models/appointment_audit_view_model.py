# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppointmentAuditViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appointment_id: str=None, id: str=None, modification_type: str=None, modified_by: str=None, modified_on: str=None, notes_after: str=None, notes_before: str=None, status_after: str=None, status_before: str=None):
        """AppointmentAuditViewModel - a model defined in OpenAPI

        :param appointment_id: The appointment_id of this AppointmentAuditViewModel.
        :param id: The id of this AppointmentAuditViewModel.
        :param modification_type: The modification_type of this AppointmentAuditViewModel.
        :param modified_by: The modified_by of this AppointmentAuditViewModel.
        :param modified_on: The modified_on of this AppointmentAuditViewModel.
        :param notes_after: The notes_after of this AppointmentAuditViewModel.
        :param notes_before: The notes_before of this AppointmentAuditViewModel.
        :param status_after: The status_after of this AppointmentAuditViewModel.
        :param status_before: The status_before of this AppointmentAuditViewModel.
        """
        self.openapi_types = {
            'appointment_id': str,
            'id': str,
            'modification_type': str,
            'modified_by': str,
            'modified_on': str,
            'notes_after': str,
            'notes_before': str,
            'status_after': str,
            'status_before': str
        }

        self.attribute_map = {
            'appointment_id': 'appointmentId',
            'id': 'id',
            'modification_type': 'modificationType',
            'modified_by': 'modifiedBy',
            'modified_on': 'modifiedOn',
            'notes_after': 'notesAfter',
            'notes_before': 'notesBefore',
            'status_after': 'statusAfter',
            'status_before': 'statusBefore'
        }

        self._appointment_id = appointment_id
        self._id = id
        self._modification_type = modification_type
        self._modified_by = modified_by
        self._modified_on = modified_on
        self._notes_after = notes_after
        self._notes_before = notes_before
        self._status_after = status_after
        self._status_before = status_before

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppointmentAuditViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppointmentAuditViewModel of this AppointmentAuditViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appointment_id(self):
        """Gets the appointment_id of this AppointmentAuditViewModel.


        :return: The appointment_id of this AppointmentAuditViewModel.
        :rtype: str
        """
        return self._appointment_id

    @appointment_id.setter
    def appointment_id(self, appointment_id):
        """Sets the appointment_id of this AppointmentAuditViewModel.


        :param appointment_id: The appointment_id of this AppointmentAuditViewModel.
        :type appointment_id: str
        """

        self._appointment_id = appointment_id

    @property
    def id(self):
        """Gets the id of this AppointmentAuditViewModel.


        :return: The id of this AppointmentAuditViewModel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppointmentAuditViewModel.


        :param id: The id of this AppointmentAuditViewModel.
        :type id: str
        """

        self._id = id

    @property
    def modification_type(self):
        """Gets the modification_type of this AppointmentAuditViewModel.


        :return: The modification_type of this AppointmentAuditViewModel.
        :rtype: str
        """
        return self._modification_type

    @modification_type.setter
    def modification_type(self, modification_type):
        """Sets the modification_type of this AppointmentAuditViewModel.


        :param modification_type: The modification_type of this AppointmentAuditViewModel.
        :type modification_type: str
        """

        self._modification_type = modification_type

    @property
    def modified_by(self):
        """Gets the modified_by of this AppointmentAuditViewModel.


        :return: The modified_by of this AppointmentAuditViewModel.
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this AppointmentAuditViewModel.


        :param modified_by: The modified_by of this AppointmentAuditViewModel.
        :type modified_by: str
        """

        self._modified_by = modified_by

    @property
    def modified_on(self):
        """Gets the modified_on of this AppointmentAuditViewModel.


        :return: The modified_on of this AppointmentAuditViewModel.
        :rtype: str
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this AppointmentAuditViewModel.


        :param modified_on: The modified_on of this AppointmentAuditViewModel.
        :type modified_on: str
        """

        self._modified_on = modified_on

    @property
    def notes_after(self):
        """Gets the notes_after of this AppointmentAuditViewModel.


        :return: The notes_after of this AppointmentAuditViewModel.
        :rtype: str
        """
        return self._notes_after

    @notes_after.setter
    def notes_after(self, notes_after):
        """Sets the notes_after of this AppointmentAuditViewModel.


        :param notes_after: The notes_after of this AppointmentAuditViewModel.
        :type notes_after: str
        """

        self._notes_after = notes_after

    @property
    def notes_before(self):
        """Gets the notes_before of this AppointmentAuditViewModel.


        :return: The notes_before of this AppointmentAuditViewModel.
        :rtype: str
        """
        return self._notes_before

    @notes_before.setter
    def notes_before(self, notes_before):
        """Sets the notes_before of this AppointmentAuditViewModel.


        :param notes_before: The notes_before of this AppointmentAuditViewModel.
        :type notes_before: str
        """

        self._notes_before = notes_before

    @property
    def status_after(self):
        """Gets the status_after of this AppointmentAuditViewModel.


        :return: The status_after of this AppointmentAuditViewModel.
        :rtype: str
        """
        return self._status_after

    @status_after.setter
    def status_after(self, status_after):
        """Sets the status_after of this AppointmentAuditViewModel.


        :param status_after: The status_after of this AppointmentAuditViewModel.
        :type status_after: str
        """

        self._status_after = status_after

    @property
    def status_before(self):
        """Gets the status_before of this AppointmentAuditViewModel.


        :return: The status_before of this AppointmentAuditViewModel.
        :rtype: str
        """
        return self._status_before

    @status_before.setter
    def status_before(self, status_before):
        """Sets the status_before of this AppointmentAuditViewModel.


        :param status_before: The status_before of this AppointmentAuditViewModel.
        :type status_before: str
        """

        self._status_before = status_before
