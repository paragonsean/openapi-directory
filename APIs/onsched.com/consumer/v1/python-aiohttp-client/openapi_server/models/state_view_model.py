# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StateViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, country: str=None, country_name: str=None, name: str=None, object: str=None):
        """StateViewModel - a model defined in OpenAPI

        :param code: The code of this StateViewModel.
        :param country: The country of this StateViewModel.
        :param country_name: The country_name of this StateViewModel.
        :param name: The name of this StateViewModel.
        :param object: The object of this StateViewModel.
        """
        self.openapi_types = {
            'code': str,
            'country': str,
            'country_name': str,
            'name': str,
            'object': str
        }

        self.attribute_map = {
            'code': 'code',
            'country': 'country',
            'country_name': 'countryName',
            'name': 'name',
            'object': 'object'
        }

        self._code = code
        self._country = country
        self._country_name = country_name
        self._name = name
        self._object = object

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StateViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StateViewModel of this StateViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this StateViewModel.


        :return: The code of this StateViewModel.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this StateViewModel.


        :param code: The code of this StateViewModel.
        :type code: str
        """

        self._code = code

    @property
    def country(self):
        """Gets the country of this StateViewModel.


        :return: The country of this StateViewModel.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this StateViewModel.


        :param country: The country of this StateViewModel.
        :type country: str
        """

        self._country = country

    @property
    def country_name(self):
        """Gets the country_name of this StateViewModel.


        :return: The country_name of this StateViewModel.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this StateViewModel.


        :param country_name: The country_name of this StateViewModel.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def name(self):
        """Gets the name of this StateViewModel.


        :return: The name of this StateViewModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StateViewModel.


        :param name: The name of this StateViewModel.
        :type name: str
        """

        self._name = name

    @property
    def object(self):
        """Gets the object of this StateViewModel.


        :return: The object of this StateViewModel.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this StateViewModel.


        :param object: The object of this StateViewModel.
        :type object: str
        """

        self._object = object
