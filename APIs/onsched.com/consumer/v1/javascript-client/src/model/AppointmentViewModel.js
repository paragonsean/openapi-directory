/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppointmentAuditViewModel from './AppointmentAuditViewModel';
import AppointmentCustomerViewModel from './AppointmentCustomerViewModel';
import AppointmentResourceViewModel from './AppointmentResourceViewModel';
import CustomFieldViewModel from './CustomFieldViewModel';

/**
 * The AppointmentViewModel model module.
 * @module model/AppointmentViewModel
 * @version v1
 */
class AppointmentViewModel {
    /**
     * Constructs a new <code>AppointmentViewModel</code>.
     * @alias module:model/AppointmentViewModel
     */
    constructor() { 
        
        AppointmentViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppointmentViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppointmentViewModel} obj Optional instance to populate.
     * @return {module:model/AppointmentViewModel} The populated <code>AppointmentViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppointmentViewModel();

            if (data.hasOwnProperty('auditTrail')) {
                obj['auditTrail'] = ApiClient.convertToType(data['auditTrail'], [AppointmentAuditViewModel]);
            }
            if (data.hasOwnProperty('bookedBy')) {
                obj['bookedBy'] = ApiClient.convertToType(data['bookedBy'], 'String');
            }
            if (data.hasOwnProperty('businessName')) {
                obj['businessName'] = ApiClient.convertToType(data['businessName'], 'String');
            }
            if (data.hasOwnProperty('calendarId')) {
                obj['calendarId'] = ApiClient.convertToType(data['calendarId'], 'String');
            }
            if (data.hasOwnProperty('confirmationNumber')) {
                obj['confirmationNumber'] = ApiClient.convertToType(data['confirmationNumber'], 'String');
            }
            if (data.hasOwnProperty('confirmed')) {
                obj['confirmed'] = ApiClient.convertToType(data['confirmed'], 'Boolean');
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'String');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': CustomFieldViewModel});
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('customerMessage')) {
                obj['customerMessage'] = ApiClient.convertToType(data['customerMessage'], 'String');
            }
            if (data.hasOwnProperty('customers')) {
                obj['customers'] = ApiClient.convertToType(data['customers'], [AppointmentCustomerViewModel]);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('dateInternational')) {
                obj['dateInternational'] = ApiClient.convertToType(data['dateInternational'], 'String');
            }
            if (data.hasOwnProperty('downloadIcsUrl')) {
                obj['downloadIcsUrl'] = ApiClient.convertToType(data['downloadIcsUrl'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('emailConfirmationSent')) {
                obj['emailConfirmationSent'] = ApiClient.convertToType(data['emailConfirmationSent'], 'String');
            }
            if (data.hasOwnProperty('emailReminderSent')) {
                obj['emailReminderSent'] = ApiClient.convertToType(data['emailReminderSent'], 'String');
            }
            if (data.hasOwnProperty('endDateTime')) {
                obj['endDateTime'] = ApiClient.convertToType(data['endDateTime'], 'String');
            }
            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('groupSize')) {
                obj['groupSize'] = ApiClient.convertToType(data['groupSize'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedBy')) {
                obj['lastModifiedBy'] = ApiClient.convertToType(data['lastModifiedBy'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedOn')) {
                obj['lastModifiedOn'] = ApiClient.convertToType(data['lastModifiedOn'], 'String');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('onlineBooking')) {
                obj['onlineBooking'] = ApiClient.convertToType(data['onlineBooking'], 'Boolean');
            }
            if (data.hasOwnProperty('paymentStatus')) {
                obj['paymentStatus'] = ApiClient.convertToType(data['paymentStatus'], 'Number');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('phoneExt')) {
                obj['phoneExt'] = ApiClient.convertToType(data['phoneExt'], 'String');
            }
            if (data.hasOwnProperty('phoneType')) {
                obj['phoneType'] = ApiClient.convertToType(data['phoneType'], 'String');
            }
            if (data.hasOwnProperty('rescheduledId')) {
                obj['rescheduledId'] = ApiClient.convertToType(data['rescheduledId'], 'String');
            }
            if (data.hasOwnProperty('resourceEmail')) {
                obj['resourceEmail'] = ApiClient.convertToType(data['resourceEmail'], 'String');
            }
            if (data.hasOwnProperty('resourceGroupId')) {
                obj['resourceGroupId'] = ApiClient.convertToType(data['resourceGroupId'], 'String');
            }
            if (data.hasOwnProperty('resourceGroupName')) {
                obj['resourceGroupName'] = ApiClient.convertToType(data['resourceGroupName'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('resourceImageUrl')) {
                obj['resourceImageUrl'] = ApiClient.convertToType(data['resourceImageUrl'], 'String');
            }
            if (data.hasOwnProperty('resourceName')) {
                obj['resourceName'] = ApiClient.convertToType(data['resourceName'], 'String');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], [AppointmentResourceViewModel]);
            }
            if (data.hasOwnProperty('serviceAllocationId')) {
                obj['serviceAllocationId'] = ApiClient.convertToType(data['serviceAllocationId'], 'String');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('serviceImageUrl')) {
                obj['serviceImageUrl'] = ApiClient.convertToType(data['serviceImageUrl'], 'String');
            }
            if (data.hasOwnProperty('serviceName')) {
                obj['serviceName'] = ApiClient.convertToType(data['serviceName'], 'String');
            }
            if (data.hasOwnProperty('smsConfirmationSent')) {
                obj['smsConfirmationSent'] = ApiClient.convertToType(data['smsConfirmationSent'], 'String');
            }
            if (data.hasOwnProperty('smsReminderSent')) {
                obj['smsReminderSent'] = ApiClient.convertToType(data['smsReminderSent'], 'String');
            }
            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('stripeChargeId')) {
                obj['stripeChargeId'] = ApiClient.convertToType(data['stripeChargeId'], 'String');
            }
            if (data.hasOwnProperty('stripeRefundId')) {
                obj['stripeRefundId'] = ApiClient.convertToType(data['stripeRefundId'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Number');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'Number');
            }
            if (data.hasOwnProperty('timezoneIana')) {
                obj['timezoneIana'] = ApiClient.convertToType(data['timezoneIana'], 'String');
            }
            if (data.hasOwnProperty('timezoneId')) {
                obj['timezoneId'] = ApiClient.convertToType(data['timezoneId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppointmentViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppointmentViewModel</code>.
     */
    static validateJSON(data) {
        if (data['auditTrail']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['auditTrail'])) {
                throw new Error("Expected the field `auditTrail` to be an array in the JSON data but got " + data['auditTrail']);
            }
            // validate the optional field `auditTrail` (array)
            for (const item of data['auditTrail']) {
                AppointmentAuditViewModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['bookedBy'] && !(typeof data['bookedBy'] === 'string' || data['bookedBy'] instanceof String)) {
            throw new Error("Expected the field `bookedBy` to be a primitive type in the JSON string but got " + data['bookedBy']);
        }
        // ensure the json data is a string
        if (data['businessName'] && !(typeof data['businessName'] === 'string' || data['businessName'] instanceof String)) {
            throw new Error("Expected the field `businessName` to be a primitive type in the JSON string but got " + data['businessName']);
        }
        // ensure the json data is a string
        if (data['calendarId'] && !(typeof data['calendarId'] === 'string' || data['calendarId'] instanceof String)) {
            throw new Error("Expected the field `calendarId` to be a primitive type in the JSON string but got " + data['calendarId']);
        }
        // ensure the json data is a string
        if (data['confirmationNumber'] && !(typeof data['confirmationNumber'] === 'string' || data['confirmationNumber'] instanceof String)) {
            throw new Error("Expected the field `confirmationNumber` to be a primitive type in the JSON string but got " + data['confirmationNumber']);
        }
        // ensure the json data is a string
        if (data['createDate'] && !(typeof data['createDate'] === 'string' || data['createDate'] instanceof String)) {
            throw new Error("Expected the field `createDate` to be a primitive type in the JSON string but got " + data['createDate']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['customerMessage'] && !(typeof data['customerMessage'] === 'string' || data['customerMessage'] instanceof String)) {
            throw new Error("Expected the field `customerMessage` to be a primitive type in the JSON string but got " + data['customerMessage']);
        }
        if (data['customers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customers'])) {
                throw new Error("Expected the field `customers` to be an array in the JSON data but got " + data['customers']);
            }
            // validate the optional field `customers` (array)
            for (const item of data['customers']) {
                AppointmentCustomerViewModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['dateInternational'] && !(typeof data['dateInternational'] === 'string' || data['dateInternational'] instanceof String)) {
            throw new Error("Expected the field `dateInternational` to be a primitive type in the JSON string but got " + data['dateInternational']);
        }
        // ensure the json data is a string
        if (data['downloadIcsUrl'] && !(typeof data['downloadIcsUrl'] === 'string' || data['downloadIcsUrl'] instanceof String)) {
            throw new Error("Expected the field `downloadIcsUrl` to be a primitive type in the JSON string but got " + data['downloadIcsUrl']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['emailConfirmationSent'] && !(typeof data['emailConfirmationSent'] === 'string' || data['emailConfirmationSent'] instanceof String)) {
            throw new Error("Expected the field `emailConfirmationSent` to be a primitive type in the JSON string but got " + data['emailConfirmationSent']);
        }
        // ensure the json data is a string
        if (data['emailReminderSent'] && !(typeof data['emailReminderSent'] === 'string' || data['emailReminderSent'] instanceof String)) {
            throw new Error("Expected the field `emailReminderSent` to be a primitive type in the JSON string but got " + data['emailReminderSent']);
        }
        // ensure the json data is a string
        if (data['endDateTime'] && !(typeof data['endDateTime'] === 'string' || data['endDateTime'] instanceof String)) {
            throw new Error("Expected the field `endDateTime` to be a primitive type in the JSON string but got " + data['endDateTime']);
        }
        // ensure the json data is a string
        if (data['firstname'] && !(typeof data['firstname'] === 'string' || data['firstname'] instanceof String)) {
            throw new Error("Expected the field `firstname` to be a primitive type in the JSON string but got " + data['firstname']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['lastModifiedBy'] && !(typeof data['lastModifiedBy'] === 'string' || data['lastModifiedBy'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got " + data['lastModifiedBy']);
        }
        // ensure the json data is a string
        if (data['lastModifiedOn'] && !(typeof data['lastModifiedOn'] === 'string' || data['lastModifiedOn'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedOn` to be a primitive type in the JSON string but got " + data['lastModifiedOn']);
        }
        // ensure the json data is a string
        if (data['lastname'] && !(typeof data['lastname'] === 'string' || data['lastname'] instanceof String)) {
            throw new Error("Expected the field `lastname` to be a primitive type in the JSON string but got " + data['lastname']);
        }
        // ensure the json data is a string
        if (data['latitude'] && !(typeof data['latitude'] === 'string' || data['latitude'] instanceof String)) {
            throw new Error("Expected the field `latitude` to be a primitive type in the JSON string but got " + data['latitude']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['longitude'] && !(typeof data['longitude'] === 'string' || data['longitude'] instanceof String)) {
            throw new Error("Expected the field `longitude` to be a primitive type in the JSON string but got " + data['longitude']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['phoneExt'] && !(typeof data['phoneExt'] === 'string' || data['phoneExt'] instanceof String)) {
            throw new Error("Expected the field `phoneExt` to be a primitive type in the JSON string but got " + data['phoneExt']);
        }
        // ensure the json data is a string
        if (data['phoneType'] && !(typeof data['phoneType'] === 'string' || data['phoneType'] instanceof String)) {
            throw new Error("Expected the field `phoneType` to be a primitive type in the JSON string but got " + data['phoneType']);
        }
        // ensure the json data is a string
        if (data['rescheduledId'] && !(typeof data['rescheduledId'] === 'string' || data['rescheduledId'] instanceof String)) {
            throw new Error("Expected the field `rescheduledId` to be a primitive type in the JSON string but got " + data['rescheduledId']);
        }
        // ensure the json data is a string
        if (data['resourceEmail'] && !(typeof data['resourceEmail'] === 'string' || data['resourceEmail'] instanceof String)) {
            throw new Error("Expected the field `resourceEmail` to be a primitive type in the JSON string but got " + data['resourceEmail']);
        }
        // ensure the json data is a string
        if (data['resourceGroupId'] && !(typeof data['resourceGroupId'] === 'string' || data['resourceGroupId'] instanceof String)) {
            throw new Error("Expected the field `resourceGroupId` to be a primitive type in the JSON string but got " + data['resourceGroupId']);
        }
        // ensure the json data is a string
        if (data['resourceGroupName'] && !(typeof data['resourceGroupName'] === 'string' || data['resourceGroupName'] instanceof String)) {
            throw new Error("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got " + data['resourceGroupName']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['resourceImageUrl'] && !(typeof data['resourceImageUrl'] === 'string' || data['resourceImageUrl'] instanceof String)) {
            throw new Error("Expected the field `resourceImageUrl` to be a primitive type in the JSON string but got " + data['resourceImageUrl']);
        }
        // ensure the json data is a string
        if (data['resourceName'] && !(typeof data['resourceName'] === 'string' || data['resourceName'] instanceof String)) {
            throw new Error("Expected the field `resourceName` to be a primitive type in the JSON string but got " + data['resourceName']);
        }
        if (data['resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resources'])) {
                throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
            }
            // validate the optional field `resources` (array)
            for (const item of data['resources']) {
                AppointmentResourceViewModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceAllocationId'] && !(typeof data['serviceAllocationId'] === 'string' || data['serviceAllocationId'] instanceof String)) {
            throw new Error("Expected the field `serviceAllocationId` to be a primitive type in the JSON string but got " + data['serviceAllocationId']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['serviceImageUrl'] && !(typeof data['serviceImageUrl'] === 'string' || data['serviceImageUrl'] instanceof String)) {
            throw new Error("Expected the field `serviceImageUrl` to be a primitive type in the JSON string but got " + data['serviceImageUrl']);
        }
        // ensure the json data is a string
        if (data['serviceName'] && !(typeof data['serviceName'] === 'string' || data['serviceName'] instanceof String)) {
            throw new Error("Expected the field `serviceName` to be a primitive type in the JSON string but got " + data['serviceName']);
        }
        // ensure the json data is a string
        if (data['smsConfirmationSent'] && !(typeof data['smsConfirmationSent'] === 'string' || data['smsConfirmationSent'] instanceof String)) {
            throw new Error("Expected the field `smsConfirmationSent` to be a primitive type in the JSON string but got " + data['smsConfirmationSent']);
        }
        // ensure the json data is a string
        if (data['smsReminderSent'] && !(typeof data['smsReminderSent'] === 'string' || data['smsReminderSent'] instanceof String)) {
            throw new Error("Expected the field `smsReminderSent` to be a primitive type in the JSON string but got " + data['smsReminderSent']);
        }
        // ensure the json data is a string
        if (data['startDateTime'] && !(typeof data['startDateTime'] === 'string' || data['startDateTime'] instanceof String)) {
            throw new Error("Expected the field `startDateTime` to be a primitive type in the JSON string but got " + data['startDateTime']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['stripeChargeId'] && !(typeof data['stripeChargeId'] === 'string' || data['stripeChargeId'] instanceof String)) {
            throw new Error("Expected the field `stripeChargeId` to be a primitive type in the JSON string but got " + data['stripeChargeId']);
        }
        // ensure the json data is a string
        if (data['stripeRefundId'] && !(typeof data['stripeRefundId'] === 'string' || data['stripeRefundId'] instanceof String)) {
            throw new Error("Expected the field `stripeRefundId` to be a primitive type in the JSON string but got " + data['stripeRefundId']);
        }
        // ensure the json data is a string
        if (data['timezoneIana'] && !(typeof data['timezoneIana'] === 'string' || data['timezoneIana'] instanceof String)) {
            throw new Error("Expected the field `timezoneIana` to be a primitive type in the JSON string but got " + data['timezoneIana']);
        }
        // ensure the json data is a string
        if (data['timezoneId'] && !(typeof data['timezoneId'] === 'string' || data['timezoneId'] instanceof String)) {
            throw new Error("Expected the field `timezoneId` to be a primitive type in the JSON string but got " + data['timezoneId']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/AppointmentAuditViewModel>} auditTrail
 */
AppointmentViewModel.prototype['auditTrail'] = undefined;

/**
 * @member {String} bookedBy
 */
AppointmentViewModel.prototype['bookedBy'] = undefined;

/**
 * @member {String} businessName
 */
AppointmentViewModel.prototype['businessName'] = undefined;

/**
 * @member {String} calendarId
 */
AppointmentViewModel.prototype['calendarId'] = undefined;

/**
 * @member {String} confirmationNumber
 */
AppointmentViewModel.prototype['confirmationNumber'] = undefined;

/**
 * @member {Boolean} confirmed
 */
AppointmentViewModel.prototype['confirmed'] = undefined;

/**
 * @member {String} createDate
 */
AppointmentViewModel.prototype['createDate'] = undefined;

/**
 * @member {Object.<String, module:model/CustomFieldViewModel>} customFields
 */
AppointmentViewModel.prototype['customFields'] = undefined;

/**
 * @member {String} customerId
 */
AppointmentViewModel.prototype['customerId'] = undefined;

/**
 * @member {String} customerMessage
 */
AppointmentViewModel.prototype['customerMessage'] = undefined;

/**
 * @member {Array.<module:model/AppointmentCustomerViewModel>} customers
 */
AppointmentViewModel.prototype['customers'] = undefined;

/**
 * @member {String} date
 */
AppointmentViewModel.prototype['date'] = undefined;

/**
 * @member {String} dateInternational
 */
AppointmentViewModel.prototype['dateInternational'] = undefined;

/**
 * @member {String} downloadIcsUrl
 */
AppointmentViewModel.prototype['downloadIcsUrl'] = undefined;

/**
 * @member {Number} duration
 */
AppointmentViewModel.prototype['duration'] = undefined;

/**
 * @member {String} email
 */
AppointmentViewModel.prototype['email'] = undefined;

/**
 * @member {String} emailConfirmationSent
 */
AppointmentViewModel.prototype['emailConfirmationSent'] = undefined;

/**
 * @member {String} emailReminderSent
 */
AppointmentViewModel.prototype['emailReminderSent'] = undefined;

/**
 * @member {String} endDateTime
 */
AppointmentViewModel.prototype['endDateTime'] = undefined;

/**
 * @member {String} firstname
 */
AppointmentViewModel.prototype['firstname'] = undefined;

/**
 * @member {Number} groupSize
 */
AppointmentViewModel.prototype['groupSize'] = undefined;

/**
 * @member {String} id
 */
AppointmentViewModel.prototype['id'] = undefined;

/**
 * @member {String} ipAddress
 */
AppointmentViewModel.prototype['ipAddress'] = undefined;

/**
 * @member {String} lastModifiedBy
 */
AppointmentViewModel.prototype['lastModifiedBy'] = undefined;

/**
 * @member {String} lastModifiedOn
 */
AppointmentViewModel.prototype['lastModifiedOn'] = undefined;

/**
 * @member {String} lastname
 */
AppointmentViewModel.prototype['lastname'] = undefined;

/**
 * @member {String} latitude
 */
AppointmentViewModel.prototype['latitude'] = undefined;

/**
 * @member {String} location
 */
AppointmentViewModel.prototype['location'] = undefined;

/**
 * @member {String} locationId
 */
AppointmentViewModel.prototype['locationId'] = undefined;

/**
 * @member {String} longitude
 */
AppointmentViewModel.prototype['longitude'] = undefined;

/**
 * @member {String} name
 */
AppointmentViewModel.prototype['name'] = undefined;

/**
 * @member {String} notes
 */
AppointmentViewModel.prototype['notes'] = undefined;

/**
 * @member {String} object
 */
AppointmentViewModel.prototype['object'] = undefined;

/**
 * @member {Boolean} onlineBooking
 */
AppointmentViewModel.prototype['onlineBooking'] = undefined;

/**
 * @member {Number} paymentStatus
 */
AppointmentViewModel.prototype['paymentStatus'] = undefined;

/**
 * @member {String} phone
 */
AppointmentViewModel.prototype['phone'] = undefined;

/**
 * @member {String} phoneExt
 */
AppointmentViewModel.prototype['phoneExt'] = undefined;

/**
 * @member {String} phoneType
 */
AppointmentViewModel.prototype['phoneType'] = undefined;

/**
 * @member {String} rescheduledId
 */
AppointmentViewModel.prototype['rescheduledId'] = undefined;

/**
 * @member {String} resourceEmail
 */
AppointmentViewModel.prototype['resourceEmail'] = undefined;

/**
 * @member {String} resourceGroupId
 */
AppointmentViewModel.prototype['resourceGroupId'] = undefined;

/**
 * @member {String} resourceGroupName
 */
AppointmentViewModel.prototype['resourceGroupName'] = undefined;

/**
 * @member {String} resourceId
 */
AppointmentViewModel.prototype['resourceId'] = undefined;

/**
 * @member {String} resourceImageUrl
 */
AppointmentViewModel.prototype['resourceImageUrl'] = undefined;

/**
 * @member {String} resourceName
 */
AppointmentViewModel.prototype['resourceName'] = undefined;

/**
 * @member {Array.<module:model/AppointmentResourceViewModel>} resources
 */
AppointmentViewModel.prototype['resources'] = undefined;

/**
 * @member {String} serviceAllocationId
 */
AppointmentViewModel.prototype['serviceAllocationId'] = undefined;

/**
 * @member {String} serviceId
 */
AppointmentViewModel.prototype['serviceId'] = undefined;

/**
 * @member {String} serviceImageUrl
 */
AppointmentViewModel.prototype['serviceImageUrl'] = undefined;

/**
 * @member {String} serviceName
 */
AppointmentViewModel.prototype['serviceName'] = undefined;

/**
 * @member {String} smsConfirmationSent
 */
AppointmentViewModel.prototype['smsConfirmationSent'] = undefined;

/**
 * @member {String} smsReminderSent
 */
AppointmentViewModel.prototype['smsReminderSent'] = undefined;

/**
 * @member {String} startDateTime
 */
AppointmentViewModel.prototype['startDateTime'] = undefined;

/**
 * @member {String} status
 */
AppointmentViewModel.prototype['status'] = undefined;

/**
 * @member {String} stripeChargeId
 */
AppointmentViewModel.prototype['stripeChargeId'] = undefined;

/**
 * @member {String} stripeRefundId
 */
AppointmentViewModel.prototype['stripeRefundId'] = undefined;

/**
 * @member {Number} time
 */
AppointmentViewModel.prototype['time'] = undefined;

/**
 * @member {Number} timezone
 */
AppointmentViewModel.prototype['timezone'] = undefined;

/**
 * @member {String} timezoneIana
 */
AppointmentViewModel.prototype['timezoneIana'] = undefined;

/**
 * @member {String} timezoneId
 */
AppointmentViewModel.prototype['timezoneId'] = undefined;






export default AppointmentViewModel;

