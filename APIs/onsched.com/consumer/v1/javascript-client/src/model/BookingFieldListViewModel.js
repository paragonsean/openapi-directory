/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BookingFieldViewModel from './BookingFieldViewModel';

/**
 * The BookingFieldListViewModel model module.
 * @module model/BookingFieldListViewModel
 * @version v1
 */
class BookingFieldListViewModel {
    /**
     * Constructs a new <code>BookingFieldListViewModel</code>.
     * @alias module:model/BookingFieldListViewModel
     */
    constructor() { 
        
        BookingFieldListViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BookingFieldListViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BookingFieldListViewModel} obj Optional instance to populate.
     * @return {module:model/BookingFieldListViewModel} The populated <code>BookingFieldListViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BookingFieldListViewModel();

            if (data.hasOwnProperty('bookingFields')) {
                obj['bookingFields'] = ApiClient.convertToType(data['bookingFields'], [BookingFieldViewModel]);
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BookingFieldListViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BookingFieldListViewModel</code>.
     */
    static validateJSON(data) {
        if (data['bookingFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bookingFields'])) {
                throw new Error("Expected the field `bookingFields` to be an array in the JSON data but got " + data['bookingFields']);
            }
            // validate the optional field `bookingFields` (array)
            for (const item of data['bookingFields']) {
                BookingFieldViewModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/BookingFieldViewModel>} bookingFields
 */
BookingFieldListViewModel.prototype['bookingFields'] = undefined;

/**
 * @member {String} object
 */
BookingFieldListViewModel.prototype['object'] = undefined;

/**
 * @member {Number} total
 */
BookingFieldListViewModel.prototype['total'] = undefined;






export default BookingFieldListViewModel;

