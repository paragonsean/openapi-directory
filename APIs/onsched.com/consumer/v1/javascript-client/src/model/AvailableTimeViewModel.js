/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AvailableTimeViewModel model module.
 * @module model/AvailableTimeViewModel
 * @version v1
 */
class AvailableTimeViewModel {
    /**
     * Constructs a new <code>AvailableTimeViewModel</code>.
     * @alias module:model/AvailableTimeViewModel
     */
    constructor() { 
        
        AvailableTimeViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AvailableTimeViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailableTimeViewModel} obj Optional instance to populate.
     * @return {module:model/AvailableTimeViewModel} The populated <code>AvailableTimeViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailableTimeViewModel();

            if (data.hasOwnProperty('allowableBookings')) {
                obj['allowableBookings'] = ApiClient.convertToType(data['allowableBookings'], 'Number');
            }
            if (data.hasOwnProperty('allowableCapacity')) {
                obj['allowableCapacity'] = ApiClient.convertToType(data['allowableCapacity'], 'Number');
            }
            if (data.hasOwnProperty('availableBookings')) {
                obj['availableBookings'] = ApiClient.convertToType(data['availableBookings'], 'Number');
            }
            if (data.hasOwnProperty('availableCapacity')) {
                obj['availableCapacity'] = ApiClient.convertToType(data['availableCapacity'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('displayTime')) {
                obj['displayTime'] = ApiClient.convertToType(data['displayTime'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('endDateTime')) {
                obj['endDateTime'] = ApiClient.convertToType(data['endDateTime'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Number');
            }
            if (data.hasOwnProperty('travelAppointmentId')) {
                obj['travelAppointmentId'] = ApiClient.convertToType(data['travelAppointmentId'], 'String');
            }
            if (data.hasOwnProperty('travelTimeMins')) {
                obj['travelTimeMins'] = ApiClient.convertToType(data['travelTimeMins'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailableTimeViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailableTimeViewModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['displayTime'] && !(typeof data['displayTime'] === 'string' || data['displayTime'] instanceof String)) {
            throw new Error("Expected the field `displayTime` to be a primitive type in the JSON string but got " + data['displayTime']);
        }
        // ensure the json data is a string
        if (data['endDateTime'] && !(typeof data['endDateTime'] === 'string' || data['endDateTime'] instanceof String)) {
            throw new Error("Expected the field `endDateTime` to be a primitive type in the JSON string but got " + data['endDateTime']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['startDateTime'] && !(typeof data['startDateTime'] === 'string' || data['startDateTime'] instanceof String)) {
            throw new Error("Expected the field `startDateTime` to be a primitive type in the JSON string but got " + data['startDateTime']);
        }
        // ensure the json data is a string
        if (data['travelAppointmentId'] && !(typeof data['travelAppointmentId'] === 'string' || data['travelAppointmentId'] instanceof String)) {
            throw new Error("Expected the field `travelAppointmentId` to be a primitive type in the JSON string but got " + data['travelAppointmentId']);
        }

        return true;
    }


}



/**
 * @member {Number} allowableBookings
 */
AvailableTimeViewModel.prototype['allowableBookings'] = undefined;

/**
 * @member {Number} allowableCapacity
 */
AvailableTimeViewModel.prototype['allowableCapacity'] = undefined;

/**
 * @member {Number} availableBookings
 */
AvailableTimeViewModel.prototype['availableBookings'] = undefined;

/**
 * @member {Number} availableCapacity
 */
AvailableTimeViewModel.prototype['availableCapacity'] = undefined;

/**
 * @member {String} date
 */
AvailableTimeViewModel.prototype['date'] = undefined;

/**
 * @member {String} displayTime
 */
AvailableTimeViewModel.prototype['displayTime'] = undefined;

/**
 * @member {Number} duration
 */
AvailableTimeViewModel.prototype['duration'] = undefined;

/**
 * @member {String} endDateTime
 */
AvailableTimeViewModel.prototype['endDateTime'] = undefined;

/**
 * @member {String} resourceId
 */
AvailableTimeViewModel.prototype['resourceId'] = undefined;

/**
 * @member {String} startDateTime
 */
AvailableTimeViewModel.prototype['startDateTime'] = undefined;

/**
 * @member {Number} time
 */
AvailableTimeViewModel.prototype['time'] = undefined;

/**
 * @member {String} travelAppointmentId
 */
AvailableTimeViewModel.prototype['travelAppointmentId'] = undefined;

/**
 * @member {Number} travelTimeMins
 */
AvailableTimeViewModel.prototype['travelTimeMins'] = undefined;






export default AvailableTimeViewModel;

