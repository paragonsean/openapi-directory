/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailableDayViewModel from './AvailableDayViewModel';
import AvailableTimeViewModel from './AvailableTimeViewModel';

/**
 * The AvailabilityViewModel model module.
 * @module model/AvailabilityViewModel
 * @version v1
 */
class AvailabilityViewModel {
    /**
     * Constructs a new <code>AvailabilityViewModel</code>.
     * @alias module:model/AvailabilityViewModel
     */
    constructor() { 
        
        AvailabilityViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AvailabilityViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailabilityViewModel} obj Optional instance to populate.
     * @return {module:model/AvailabilityViewModel} The populated <code>AvailabilityViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailabilityViewModel();

            if (data.hasOwnProperty('availableDays')) {
                obj['availableDays'] = ApiClient.convertToType(data['availableDays'], [AvailableDayViewModel]);
            }
            if (data.hasOwnProperty('availableTimes')) {
                obj['availableTimes'] = ApiClient.convertToType(data['availableTimes'], [AvailableTimeViewModel]);
            }
            if (data.hasOwnProperty('businessName')) {
                obj['businessName'] = ApiClient.convertToType(data['businessName'], 'String');
            }
            if (data.hasOwnProperty('calendarId')) {
                obj['calendarId'] = ApiClient.convertToType(data['calendarId'], 'String');
            }
            if (data.hasOwnProperty('calendarResourceGroupId')) {
                obj['calendarResourceGroupId'] = ApiClient.convertToType(data['calendarResourceGroupId'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'String');
            }
            if (data.hasOwnProperty('firstAvailableDate')) {
                obj['firstAvailableDate'] = ApiClient.convertToType(data['firstAvailableDate'], 'String');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('resourceDescription')) {
                obj['resourceDescription'] = ApiClient.convertToType(data['resourceDescription'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('resourceIds')) {
                obj['resourceIds'] = ApiClient.convertToType(data['resourceIds'], 'String');
            }
            if (data.hasOwnProperty('resourceName')) {
                obj['resourceName'] = ApiClient.convertToType(data['resourceName'], 'String');
            }
            if (data.hasOwnProperty('serviceDescription')) {
                obj['serviceDescription'] = ApiClient.convertToType(data['serviceDescription'], 'String');
            }
            if (data.hasOwnProperty('serviceDuration')) {
                obj['serviceDuration'] = ApiClient.convertToType(data['serviceDuration'], 'Number');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('serviceName')) {
                obj['serviceName'] = ApiClient.convertToType(data['serviceName'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('timezoneName')) {
                obj['timezoneName'] = ApiClient.convertToType(data['timezoneName'], 'String');
            }
            if (data.hasOwnProperty('tzRequested')) {
                obj['tzRequested'] = ApiClient.convertToType(data['tzRequested'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailabilityViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailabilityViewModel</code>.
     */
    static validateJSON(data) {
        if (data['availableDays']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availableDays'])) {
                throw new Error("Expected the field `availableDays` to be an array in the JSON data but got " + data['availableDays']);
            }
            // validate the optional field `availableDays` (array)
            for (const item of data['availableDays']) {
                AvailableDayViewModel.validateJSON(item);
            };
        }
        if (data['availableTimes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availableTimes'])) {
                throw new Error("Expected the field `availableTimes` to be an array in the JSON data but got " + data['availableTimes']);
            }
            // validate the optional field `availableTimes` (array)
            for (const item of data['availableTimes']) {
                AvailableTimeViewModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['businessName'] && !(typeof data['businessName'] === 'string' || data['businessName'] instanceof String)) {
            throw new Error("Expected the field `businessName` to be a primitive type in the JSON string but got " + data['businessName']);
        }
        // ensure the json data is a string
        if (data['calendarId'] && !(typeof data['calendarId'] === 'string' || data['calendarId'] instanceof String)) {
            throw new Error("Expected the field `calendarId` to be a primitive type in the JSON string but got " + data['calendarId']);
        }
        // ensure the json data is a string
        if (data['calendarResourceGroupId'] && !(typeof data['calendarResourceGroupId'] === 'string' || data['calendarResourceGroupId'] instanceof String)) {
            throw new Error("Expected the field `calendarResourceGroupId` to be a primitive type in the JSON string but got " + data['calendarResourceGroupId']);
        }
        // ensure the json data is a string
        if (data['endDate'] && !(typeof data['endDate'] === 'string' || data['endDate'] instanceof String)) {
            throw new Error("Expected the field `endDate` to be a primitive type in the JSON string but got " + data['endDate']);
        }
        // ensure the json data is a string
        if (data['firstAvailableDate'] && !(typeof data['firstAvailableDate'] === 'string' || data['firstAvailableDate'] instanceof String)) {
            throw new Error("Expected the field `firstAvailableDate` to be a primitive type in the JSON string but got " + data['firstAvailableDate']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['resourceDescription'] && !(typeof data['resourceDescription'] === 'string' || data['resourceDescription'] instanceof String)) {
            throw new Error("Expected the field `resourceDescription` to be a primitive type in the JSON string but got " + data['resourceDescription']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['resourceIds'] && !(typeof data['resourceIds'] === 'string' || data['resourceIds'] instanceof String)) {
            throw new Error("Expected the field `resourceIds` to be a primitive type in the JSON string but got " + data['resourceIds']);
        }
        // ensure the json data is a string
        if (data['resourceName'] && !(typeof data['resourceName'] === 'string' || data['resourceName'] instanceof String)) {
            throw new Error("Expected the field `resourceName` to be a primitive type in the JSON string but got " + data['resourceName']);
        }
        // ensure the json data is a string
        if (data['serviceDescription'] && !(typeof data['serviceDescription'] === 'string' || data['serviceDescription'] instanceof String)) {
            throw new Error("Expected the field `serviceDescription` to be a primitive type in the JSON string but got " + data['serviceDescription']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['serviceName'] && !(typeof data['serviceName'] === 'string' || data['serviceName'] instanceof String)) {
            throw new Error("Expected the field `serviceName` to be a primitive type in the JSON string but got " + data['serviceName']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }
        // ensure the json data is a string
        if (data['timezoneName'] && !(typeof data['timezoneName'] === 'string' || data['timezoneName'] instanceof String)) {
            throw new Error("Expected the field `timezoneName` to be a primitive type in the JSON string but got " + data['timezoneName']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/AvailableDayViewModel>} availableDays
 */
AvailabilityViewModel.prototype['availableDays'] = undefined;

/**
 * @member {Array.<module:model/AvailableTimeViewModel>} availableTimes
 */
AvailabilityViewModel.prototype['availableTimes'] = undefined;

/**
 * @member {String} businessName
 */
AvailabilityViewModel.prototype['businessName'] = undefined;

/**
 * @member {String} calendarId
 */
AvailabilityViewModel.prototype['calendarId'] = undefined;

/**
 * @member {String} calendarResourceGroupId
 */
AvailabilityViewModel.prototype['calendarResourceGroupId'] = undefined;

/**
 * @member {String} endDate
 */
AvailabilityViewModel.prototype['endDate'] = undefined;

/**
 * @member {String} firstAvailableDate
 */
AvailabilityViewModel.prototype['firstAvailableDate'] = undefined;

/**
 * @member {String} locationId
 */
AvailabilityViewModel.prototype['locationId'] = undefined;

/**
 * @member {String} object
 */
AvailabilityViewModel.prototype['object'] = undefined;

/**
 * @member {String} resourceDescription
 */
AvailabilityViewModel.prototype['resourceDescription'] = undefined;

/**
 * @member {String} resourceId
 */
AvailabilityViewModel.prototype['resourceId'] = undefined;

/**
 * @member {String} resourceIds
 */
AvailabilityViewModel.prototype['resourceIds'] = undefined;

/**
 * @member {String} resourceName
 */
AvailabilityViewModel.prototype['resourceName'] = undefined;

/**
 * @member {String} serviceDescription
 */
AvailabilityViewModel.prototype['serviceDescription'] = undefined;

/**
 * @member {Number} serviceDuration
 */
AvailabilityViewModel.prototype['serviceDuration'] = undefined;

/**
 * @member {String} serviceId
 */
AvailabilityViewModel.prototype['serviceId'] = undefined;

/**
 * @member {String} serviceName
 */
AvailabilityViewModel.prototype['serviceName'] = undefined;

/**
 * @member {String} startDate
 */
AvailabilityViewModel.prototype['startDate'] = undefined;

/**
 * Returns the Timezone Name in IANA format if a TimezoneName was passed into an Availability call; otherwise this property is hidden
 * @member {String} timezoneName
 */
AvailabilityViewModel.prototype['timezoneName'] = undefined;

/**
 * Returns the timezone offset if a tzOffset was supplied into an Availability call; null if a TimezoneName was passed; otherwise the Business timezone offset is returned
 * @member {Number} tzRequested
 */
AvailabilityViewModel.prototype['tzRequested'] = undefined;

/**
 * @member {String} url
 */
AvailabilityViewModel.prototype['url'] = undefined;






export default AvailabilityViewModel;

