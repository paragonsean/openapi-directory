/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BookingFieldItem from './BookingFieldItem';
import CustomFieldInputModel from './CustomFieldInputModel';

/**
 * The AppointmentInitialModel model module.
 * @module model/AppointmentInitialModel
 * @version v1
 */
class AppointmentInitialModel {
    /**
     * Constructs a new <code>AppointmentInitialModel</code>.
     * @alias module:model/AppointmentInitialModel
     */
    constructor() { 
        
        AppointmentInitialModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppointmentInitialModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppointmentInitialModel} obj Optional instance to populate.
     * @return {module:model/AppointmentInitialModel} The populated <code>AppointmentInitialModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppointmentInitialModel();

            if (data.hasOwnProperty('appointmentBookingFields')) {
                obj['appointmentBookingFields'] = ApiClient.convertToType(data['appointmentBookingFields'], [BookingFieldItem]);
            }
            if (data.hasOwnProperty('bookedBy')) {
                obj['bookedBy'] = ApiClient.convertToType(data['bookedBy'], 'String');
            }
            if (data.hasOwnProperty('bookingWindowId')) {
                obj['bookingWindowId'] = ApiClient.convertToType(data['bookingWindowId'], 'String');
            }
            if (data.hasOwnProperty('calendarId')) {
                obj['calendarId'] = ApiClient.convertToType(data['calendarId'], 'String');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = CustomFieldInputModel.constructFromObject(data['customFields']);
            }
            if (data.hasOwnProperty('customerBookingFields')) {
                obj['customerBookingFields'] = ApiClient.convertToType(data['customerBookingFields'], [BookingFieldItem]);
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('customerMessage')) {
                obj['customerMessage'] = ApiClient.convertToType(data['customerMessage'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('endDateTime')) {
                obj['endDateTime'] = ApiClient.convertToType(data['endDateTime'], 'Date');
            }
            if (data.hasOwnProperty('groupSize')) {
                obj['groupSize'] = ApiClient.convertToType(data['groupSize'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('phoneType')) {
                obj['phoneType'] = ApiClient.convertToType(data['phoneType'], 'String');
            }
            if (data.hasOwnProperty('resourceGroupId')) {
                obj['resourceGroupId'] = ApiClient.convertToType(data['resourceGroupId'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('resourceIds')) {
                obj['resourceIds'] = ApiClient.convertToType(data['resourceIds'], 'String');
            }
            if (data.hasOwnProperty('serviceAllocationId')) {
                obj['serviceAllocationId'] = ApiClient.convertToType(data['serviceAllocationId'], 'String');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'Date');
            }
            if (data.hasOwnProperty('timezoneName')) {
                obj['timezoneName'] = ApiClient.convertToType(data['timezoneName'], 'String');
            }
            if (data.hasOwnProperty('travelAppointmentId')) {
                obj['travelAppointmentId'] = ApiClient.convertToType(data['travelAppointmentId'], 'String');
            }
            if (data.hasOwnProperty('travelTimeMins')) {
                obj['travelTimeMins'] = ApiClient.convertToType(data['travelTimeMins'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppointmentInitialModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppointmentInitialModel</code>.
     */
    static validateJSON(data) {
        if (data['appointmentBookingFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appointmentBookingFields'])) {
                throw new Error("Expected the field `appointmentBookingFields` to be an array in the JSON data but got " + data['appointmentBookingFields']);
            }
            // validate the optional field `appointmentBookingFields` (array)
            for (const item of data['appointmentBookingFields']) {
                BookingFieldItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['bookedBy'] && !(typeof data['bookedBy'] === 'string' || data['bookedBy'] instanceof String)) {
            throw new Error("Expected the field `bookedBy` to be a primitive type in the JSON string but got " + data['bookedBy']);
        }
        // ensure the json data is a string
        if (data['bookingWindowId'] && !(typeof data['bookingWindowId'] === 'string' || data['bookingWindowId'] instanceof String)) {
            throw new Error("Expected the field `bookingWindowId` to be a primitive type in the JSON string but got " + data['bookingWindowId']);
        }
        // ensure the json data is a string
        if (data['calendarId'] && !(typeof data['calendarId'] === 'string' || data['calendarId'] instanceof String)) {
            throw new Error("Expected the field `calendarId` to be a primitive type in the JSON string but got " + data['calendarId']);
        }
        // validate the optional field `customFields`
        if (data['customFields']) { // data not null
          CustomFieldInputModel.validateJSON(data['customFields']);
        }
        if (data['customerBookingFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customerBookingFields'])) {
                throw new Error("Expected the field `customerBookingFields` to be an array in the JSON data but got " + data['customerBookingFields']);
            }
            // validate the optional field `customerBookingFields` (array)
            for (const item of data['customerBookingFields']) {
                BookingFieldItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['customerMessage'] && !(typeof data['customerMessage'] === 'string' || data['customerMessage'] instanceof String)) {
            throw new Error("Expected the field `customerMessage` to be a primitive type in the JSON string but got " + data['customerMessage']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['phoneType'] && !(typeof data['phoneType'] === 'string' || data['phoneType'] instanceof String)) {
            throw new Error("Expected the field `phoneType` to be a primitive type in the JSON string but got " + data['phoneType']);
        }
        // ensure the json data is a string
        if (data['resourceGroupId'] && !(typeof data['resourceGroupId'] === 'string' || data['resourceGroupId'] instanceof String)) {
            throw new Error("Expected the field `resourceGroupId` to be a primitive type in the JSON string but got " + data['resourceGroupId']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['resourceIds'] && !(typeof data['resourceIds'] === 'string' || data['resourceIds'] instanceof String)) {
            throw new Error("Expected the field `resourceIds` to be a primitive type in the JSON string but got " + data['resourceIds']);
        }
        // ensure the json data is a string
        if (data['serviceAllocationId'] && !(typeof data['serviceAllocationId'] === 'string' || data['serviceAllocationId'] instanceof String)) {
            throw new Error("Expected the field `serviceAllocationId` to be a primitive type in the JSON string but got " + data['serviceAllocationId']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['timezoneName'] && !(typeof data['timezoneName'] === 'string' || data['timezoneName'] instanceof String)) {
            throw new Error("Expected the field `timezoneName` to be a primitive type in the JSON string but got " + data['timezoneName']);
        }
        // ensure the json data is a string
        if (data['travelAppointmentId'] && !(typeof data['travelAppointmentId'] === 'string' || data['travelAppointmentId'] instanceof String)) {
            throw new Error("Expected the field `travelAppointmentId` to be a primitive type in the JSON string but got " + data['travelAppointmentId']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/BookingFieldItem>} appointmentBookingFields
 */
AppointmentInitialModel.prototype['appointmentBookingFields'] = undefined;

/**
 * @member {String} bookedBy
 */
AppointmentInitialModel.prototype['bookedBy'] = undefined;

/**
 * @member {String} bookingWindowId
 */
AppointmentInitialModel.prototype['bookingWindowId'] = undefined;

/**
 * @member {String} calendarId
 */
AppointmentInitialModel.prototype['calendarId'] = undefined;

/**
 * @member {module:model/CustomFieldInputModel} customFields
 */
AppointmentInitialModel.prototype['customFields'] = undefined;

/**
 * @member {Array.<module:model/BookingFieldItem>} customerBookingFields
 */
AppointmentInitialModel.prototype['customerBookingFields'] = undefined;

/**
 * @member {String} customerId
 */
AppointmentInitialModel.prototype['customerId'] = undefined;

/**
 * @member {String} customerMessage
 */
AppointmentInitialModel.prototype['customerMessage'] = undefined;

/**
 * @member {String} email
 */
AppointmentInitialModel.prototype['email'] = undefined;

/**
 * @member {Date} endDateTime
 */
AppointmentInitialModel.prototype['endDateTime'] = undefined;

/**
 * @member {Number} groupSize
 */
AppointmentInitialModel.prototype['groupSize'] = undefined;

/**
 * @member {String} location
 */
AppointmentInitialModel.prototype['location'] = undefined;

/**
 * @member {String} locationId
 */
AppointmentInitialModel.prototype['locationId'] = undefined;

/**
 * @member {String} name
 */
AppointmentInitialModel.prototype['name'] = undefined;

/**
 * @member {String} notes
 */
AppointmentInitialModel.prototype['notes'] = undefined;

/**
 * @member {String} phone
 */
AppointmentInitialModel.prototype['phone'] = undefined;

/**
 * @member {String} phoneType
 */
AppointmentInitialModel.prototype['phoneType'] = undefined;

/**
 * @member {String} resourceGroupId
 */
AppointmentInitialModel.prototype['resourceGroupId'] = undefined;

/**
 * @member {String} resourceId
 */
AppointmentInitialModel.prototype['resourceId'] = undefined;

/**
 * @member {String} resourceIds
 */
AppointmentInitialModel.prototype['resourceIds'] = undefined;

/**
 * @member {String} serviceAllocationId
 */
AppointmentInitialModel.prototype['serviceAllocationId'] = undefined;

/**
 * @member {String} serviceId
 */
AppointmentInitialModel.prototype['serviceId'] = undefined;

/**
 * @member {Date} startDateTime
 */
AppointmentInitialModel.prototype['startDateTime'] = undefined;

/**
 * @member {String} timezoneName
 */
AppointmentInitialModel.prototype['timezoneName'] = undefined;

/**
 * @member {String} travelAppointmentId
 */
AppointmentInitialModel.prototype['travelAppointmentId'] = undefined;

/**
 * @member {Number} travelTimeMins
 */
AppointmentInitialModel.prototype['travelTimeMins'] = undefined;






export default AppointmentInitialModel;

