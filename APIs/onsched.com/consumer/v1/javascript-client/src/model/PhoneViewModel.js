/**
 * OnSched Consumer API
 * Build secure and scalable custom apps for Online Booking. Our flexible API provides many options for availability and booking.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PhoneViewModel model module.
 * @module model/PhoneViewModel
 * @version v1
 */
class PhoneViewModel {
    /**
     * Constructs a new <code>PhoneViewModel</code>.
     * @alias module:model/PhoneViewModel
     */
    constructor() { 
        
        PhoneViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PhoneViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PhoneViewModel} obj Optional instance to populate.
     * @return {module:model/PhoneViewModel} The populated <code>PhoneViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PhoneViewModel();

            if (data.hasOwnProperty('businessPhone')) {
                obj['businessPhone'] = ApiClient.convertToType(data['businessPhone'], 'String');
            }
            if (data.hasOwnProperty('businessPhoneExt')) {
                obj['businessPhoneExt'] = ApiClient.convertToType(data['businessPhoneExt'], 'String');
            }
            if (data.hasOwnProperty('homePhone')) {
                obj['homePhone'] = ApiClient.convertToType(data['homePhone'], 'String');
            }
            if (data.hasOwnProperty('mobilePhone')) {
                obj['mobilePhone'] = ApiClient.convertToType(data['mobilePhone'], 'String');
            }
            if (data.hasOwnProperty('phoneType')) {
                obj['phoneType'] = ApiClient.convertToType(data['phoneType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PhoneViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PhoneViewModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['businessPhone'] && !(typeof data['businessPhone'] === 'string' || data['businessPhone'] instanceof String)) {
            throw new Error("Expected the field `businessPhone` to be a primitive type in the JSON string but got " + data['businessPhone']);
        }
        // ensure the json data is a string
        if (data['businessPhoneExt'] && !(typeof data['businessPhoneExt'] === 'string' || data['businessPhoneExt'] instanceof String)) {
            throw new Error("Expected the field `businessPhoneExt` to be a primitive type in the JSON string but got " + data['businessPhoneExt']);
        }
        // ensure the json data is a string
        if (data['homePhone'] && !(typeof data['homePhone'] === 'string' || data['homePhone'] instanceof String)) {
            throw new Error("Expected the field `homePhone` to be a primitive type in the JSON string but got " + data['homePhone']);
        }
        // ensure the json data is a string
        if (data['mobilePhone'] && !(typeof data['mobilePhone'] === 'string' || data['mobilePhone'] instanceof String)) {
            throw new Error("Expected the field `mobilePhone` to be a primitive type in the JSON string but got " + data['mobilePhone']);
        }
        // ensure the json data is a string
        if (data['phoneType'] && !(typeof data['phoneType'] === 'string' || data['phoneType'] instanceof String)) {
            throw new Error("Expected the field `phoneType` to be a primitive type in the JSON string but got " + data['phoneType']);
        }

        return true;
    }


}



/**
 * @member {String} businessPhone
 */
PhoneViewModel.prototype['businessPhone'] = undefined;

/**
 * @member {String} businessPhoneExt
 */
PhoneViewModel.prototype['businessPhoneExt'] = undefined;

/**
 * @member {String} homePhone
 */
PhoneViewModel.prototype['homePhone'] = undefined;

/**
 * @member {String} mobilePhone
 */
PhoneViewModel.prototype['mobilePhone'] = undefined;

/**
 * @member {String} phoneType
 */
PhoneViewModel.prototype['phoneType'] = undefined;






export default PhoneViewModel;

