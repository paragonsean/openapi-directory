/**
 * OnSched API Utility
 * Endpoints for system utilities. e.g.Health
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreadPoolInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreadPoolInfo::OAIThreadPoolInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreadPoolInfo::OAIThreadPoolInfo() {
    this->initializeModel();
}

OAIThreadPoolInfo::~OAIThreadPoolInfo() {}

void OAIThreadPoolInfo::initializeModel() {

    m_available_completion_threads_isSet = false;
    m_available_completion_threads_isValid = false;

    m_available_worker_threads_isSet = false;
    m_available_worker_threads_isValid = false;

    m_max_completion_threads_isSet = false;
    m_max_completion_threads_isValid = false;

    m_max_worker_threads_isSet = false;
    m_max_worker_threads_isValid = false;

    m_min_completion_threads_isSet = false;
    m_min_completion_threads_isValid = false;

    m_min_worker_threads_isSet = false;
    m_min_worker_threads_isValid = false;

    m_occupied_completion_threads_isSet = false;
    m_occupied_completion_threads_isValid = false;

    m_occupied_worker_threads_isSet = false;
    m_occupied_worker_threads_isValid = false;
}

void OAIThreadPoolInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreadPoolInfo::fromJsonObject(QJsonObject json) {

    m_available_completion_threads_isValid = ::OpenAPI::fromJsonValue(m_available_completion_threads, json[QString("availableCompletionThreads")]);
    m_available_completion_threads_isSet = !json[QString("availableCompletionThreads")].isNull() && m_available_completion_threads_isValid;

    m_available_worker_threads_isValid = ::OpenAPI::fromJsonValue(m_available_worker_threads, json[QString("availableWorkerThreads")]);
    m_available_worker_threads_isSet = !json[QString("availableWorkerThreads")].isNull() && m_available_worker_threads_isValid;

    m_max_completion_threads_isValid = ::OpenAPI::fromJsonValue(m_max_completion_threads, json[QString("maxCompletionThreads")]);
    m_max_completion_threads_isSet = !json[QString("maxCompletionThreads")].isNull() && m_max_completion_threads_isValid;

    m_max_worker_threads_isValid = ::OpenAPI::fromJsonValue(m_max_worker_threads, json[QString("maxWorkerThreads")]);
    m_max_worker_threads_isSet = !json[QString("maxWorkerThreads")].isNull() && m_max_worker_threads_isValid;

    m_min_completion_threads_isValid = ::OpenAPI::fromJsonValue(m_min_completion_threads, json[QString("minCompletionThreads")]);
    m_min_completion_threads_isSet = !json[QString("minCompletionThreads")].isNull() && m_min_completion_threads_isValid;

    m_min_worker_threads_isValid = ::OpenAPI::fromJsonValue(m_min_worker_threads, json[QString("minWorkerThreads")]);
    m_min_worker_threads_isSet = !json[QString("minWorkerThreads")].isNull() && m_min_worker_threads_isValid;

    m_occupied_completion_threads_isValid = ::OpenAPI::fromJsonValue(m_occupied_completion_threads, json[QString("occupiedCompletionThreads")]);
    m_occupied_completion_threads_isSet = !json[QString("occupiedCompletionThreads")].isNull() && m_occupied_completion_threads_isValid;

    m_occupied_worker_threads_isValid = ::OpenAPI::fromJsonValue(m_occupied_worker_threads, json[QString("occupiedWorkerThreads")]);
    m_occupied_worker_threads_isSet = !json[QString("occupiedWorkerThreads")].isNull() && m_occupied_worker_threads_isValid;
}

QString OAIThreadPoolInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreadPoolInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_available_completion_threads_isSet) {
        obj.insert(QString("availableCompletionThreads"), ::OpenAPI::toJsonValue(m_available_completion_threads));
    }
    if (m_available_worker_threads_isSet) {
        obj.insert(QString("availableWorkerThreads"), ::OpenAPI::toJsonValue(m_available_worker_threads));
    }
    if (m_max_completion_threads_isSet) {
        obj.insert(QString("maxCompletionThreads"), ::OpenAPI::toJsonValue(m_max_completion_threads));
    }
    if (m_max_worker_threads_isSet) {
        obj.insert(QString("maxWorkerThreads"), ::OpenAPI::toJsonValue(m_max_worker_threads));
    }
    if (m_min_completion_threads_isSet) {
        obj.insert(QString("minCompletionThreads"), ::OpenAPI::toJsonValue(m_min_completion_threads));
    }
    if (m_min_worker_threads_isSet) {
        obj.insert(QString("minWorkerThreads"), ::OpenAPI::toJsonValue(m_min_worker_threads));
    }
    if (m_occupied_completion_threads_isSet) {
        obj.insert(QString("occupiedCompletionThreads"), ::OpenAPI::toJsonValue(m_occupied_completion_threads));
    }
    if (m_occupied_worker_threads_isSet) {
        obj.insert(QString("occupiedWorkerThreads"), ::OpenAPI::toJsonValue(m_occupied_worker_threads));
    }
    return obj;
}

qint32 OAIThreadPoolInfo::getAvailableCompletionThreads() const {
    return m_available_completion_threads;
}
void OAIThreadPoolInfo::setAvailableCompletionThreads(const qint32 &available_completion_threads) {
    m_available_completion_threads = available_completion_threads;
    m_available_completion_threads_isSet = true;
}

bool OAIThreadPoolInfo::is_available_completion_threads_Set() const{
    return m_available_completion_threads_isSet;
}

bool OAIThreadPoolInfo::is_available_completion_threads_Valid() const{
    return m_available_completion_threads_isValid;
}

qint32 OAIThreadPoolInfo::getAvailableWorkerThreads() const {
    return m_available_worker_threads;
}
void OAIThreadPoolInfo::setAvailableWorkerThreads(const qint32 &available_worker_threads) {
    m_available_worker_threads = available_worker_threads;
    m_available_worker_threads_isSet = true;
}

bool OAIThreadPoolInfo::is_available_worker_threads_Set() const{
    return m_available_worker_threads_isSet;
}

bool OAIThreadPoolInfo::is_available_worker_threads_Valid() const{
    return m_available_worker_threads_isValid;
}

qint32 OAIThreadPoolInfo::getMaxCompletionThreads() const {
    return m_max_completion_threads;
}
void OAIThreadPoolInfo::setMaxCompletionThreads(const qint32 &max_completion_threads) {
    m_max_completion_threads = max_completion_threads;
    m_max_completion_threads_isSet = true;
}

bool OAIThreadPoolInfo::is_max_completion_threads_Set() const{
    return m_max_completion_threads_isSet;
}

bool OAIThreadPoolInfo::is_max_completion_threads_Valid() const{
    return m_max_completion_threads_isValid;
}

qint32 OAIThreadPoolInfo::getMaxWorkerThreads() const {
    return m_max_worker_threads;
}
void OAIThreadPoolInfo::setMaxWorkerThreads(const qint32 &max_worker_threads) {
    m_max_worker_threads = max_worker_threads;
    m_max_worker_threads_isSet = true;
}

bool OAIThreadPoolInfo::is_max_worker_threads_Set() const{
    return m_max_worker_threads_isSet;
}

bool OAIThreadPoolInfo::is_max_worker_threads_Valid() const{
    return m_max_worker_threads_isValid;
}

qint32 OAIThreadPoolInfo::getMinCompletionThreads() const {
    return m_min_completion_threads;
}
void OAIThreadPoolInfo::setMinCompletionThreads(const qint32 &min_completion_threads) {
    m_min_completion_threads = min_completion_threads;
    m_min_completion_threads_isSet = true;
}

bool OAIThreadPoolInfo::is_min_completion_threads_Set() const{
    return m_min_completion_threads_isSet;
}

bool OAIThreadPoolInfo::is_min_completion_threads_Valid() const{
    return m_min_completion_threads_isValid;
}

qint32 OAIThreadPoolInfo::getMinWorkerThreads() const {
    return m_min_worker_threads;
}
void OAIThreadPoolInfo::setMinWorkerThreads(const qint32 &min_worker_threads) {
    m_min_worker_threads = min_worker_threads;
    m_min_worker_threads_isSet = true;
}

bool OAIThreadPoolInfo::is_min_worker_threads_Set() const{
    return m_min_worker_threads_isSet;
}

bool OAIThreadPoolInfo::is_min_worker_threads_Valid() const{
    return m_min_worker_threads_isValid;
}

qint32 OAIThreadPoolInfo::getOccupiedCompletionThreads() const {
    return m_occupied_completion_threads;
}
void OAIThreadPoolInfo::setOccupiedCompletionThreads(const qint32 &occupied_completion_threads) {
    m_occupied_completion_threads = occupied_completion_threads;
    m_occupied_completion_threads_isSet = true;
}

bool OAIThreadPoolInfo::is_occupied_completion_threads_Set() const{
    return m_occupied_completion_threads_isSet;
}

bool OAIThreadPoolInfo::is_occupied_completion_threads_Valid() const{
    return m_occupied_completion_threads_isValid;
}

qint32 OAIThreadPoolInfo::getOccupiedWorkerThreads() const {
    return m_occupied_worker_threads;
}
void OAIThreadPoolInfo::setOccupiedWorkerThreads(const qint32 &occupied_worker_threads) {
    m_occupied_worker_threads = occupied_worker_threads;
    m_occupied_worker_threads_isSet = true;
}

bool OAIThreadPoolInfo::is_occupied_worker_threads_Set() const{
    return m_occupied_worker_threads_isSet;
}

bool OAIThreadPoolInfo::is_occupied_worker_threads_Valid() const{
    return m_occupied_worker_threads_isValid;
}

bool OAIThreadPoolInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_completion_threads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_worker_threads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_completion_threads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_worker_threads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_completion_threads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_worker_threads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occupied_completion_threads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occupied_worker_threads_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreadPoolInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
