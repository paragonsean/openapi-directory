# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreadPoolInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_completion_threads: int=None, available_worker_threads: int=None, max_completion_threads: int=None, max_worker_threads: int=None, min_completion_threads: int=None, min_worker_threads: int=None, occupied_completion_threads: int=None, occupied_worker_threads: int=None):
        """ThreadPoolInfo - a model defined in OpenAPI

        :param available_completion_threads: The available_completion_threads of this ThreadPoolInfo.
        :param available_worker_threads: The available_worker_threads of this ThreadPoolInfo.
        :param max_completion_threads: The max_completion_threads of this ThreadPoolInfo.
        :param max_worker_threads: The max_worker_threads of this ThreadPoolInfo.
        :param min_completion_threads: The min_completion_threads of this ThreadPoolInfo.
        :param min_worker_threads: The min_worker_threads of this ThreadPoolInfo.
        :param occupied_completion_threads: The occupied_completion_threads of this ThreadPoolInfo.
        :param occupied_worker_threads: The occupied_worker_threads of this ThreadPoolInfo.
        """
        self.openapi_types = {
            'available_completion_threads': int,
            'available_worker_threads': int,
            'max_completion_threads': int,
            'max_worker_threads': int,
            'min_completion_threads': int,
            'min_worker_threads': int,
            'occupied_completion_threads': int,
            'occupied_worker_threads': int
        }

        self.attribute_map = {
            'available_completion_threads': 'availableCompletionThreads',
            'available_worker_threads': 'availableWorkerThreads',
            'max_completion_threads': 'maxCompletionThreads',
            'max_worker_threads': 'maxWorkerThreads',
            'min_completion_threads': 'minCompletionThreads',
            'min_worker_threads': 'minWorkerThreads',
            'occupied_completion_threads': 'occupiedCompletionThreads',
            'occupied_worker_threads': 'occupiedWorkerThreads'
        }

        self._available_completion_threads = available_completion_threads
        self._available_worker_threads = available_worker_threads
        self._max_completion_threads = max_completion_threads
        self._max_worker_threads = max_worker_threads
        self._min_completion_threads = min_completion_threads
        self._min_worker_threads = min_worker_threads
        self._occupied_completion_threads = occupied_completion_threads
        self._occupied_worker_threads = occupied_worker_threads

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreadPoolInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreadPoolInfo of this ThreadPoolInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_completion_threads(self):
        """Gets the available_completion_threads of this ThreadPoolInfo.


        :return: The available_completion_threads of this ThreadPoolInfo.
        :rtype: int
        """
        return self._available_completion_threads

    @available_completion_threads.setter
    def available_completion_threads(self, available_completion_threads):
        """Sets the available_completion_threads of this ThreadPoolInfo.


        :param available_completion_threads: The available_completion_threads of this ThreadPoolInfo.
        :type available_completion_threads: int
        """

        self._available_completion_threads = available_completion_threads

    @property
    def available_worker_threads(self):
        """Gets the available_worker_threads of this ThreadPoolInfo.


        :return: The available_worker_threads of this ThreadPoolInfo.
        :rtype: int
        """
        return self._available_worker_threads

    @available_worker_threads.setter
    def available_worker_threads(self, available_worker_threads):
        """Sets the available_worker_threads of this ThreadPoolInfo.


        :param available_worker_threads: The available_worker_threads of this ThreadPoolInfo.
        :type available_worker_threads: int
        """

        self._available_worker_threads = available_worker_threads

    @property
    def max_completion_threads(self):
        """Gets the max_completion_threads of this ThreadPoolInfo.


        :return: The max_completion_threads of this ThreadPoolInfo.
        :rtype: int
        """
        return self._max_completion_threads

    @max_completion_threads.setter
    def max_completion_threads(self, max_completion_threads):
        """Sets the max_completion_threads of this ThreadPoolInfo.


        :param max_completion_threads: The max_completion_threads of this ThreadPoolInfo.
        :type max_completion_threads: int
        """

        self._max_completion_threads = max_completion_threads

    @property
    def max_worker_threads(self):
        """Gets the max_worker_threads of this ThreadPoolInfo.


        :return: The max_worker_threads of this ThreadPoolInfo.
        :rtype: int
        """
        return self._max_worker_threads

    @max_worker_threads.setter
    def max_worker_threads(self, max_worker_threads):
        """Sets the max_worker_threads of this ThreadPoolInfo.


        :param max_worker_threads: The max_worker_threads of this ThreadPoolInfo.
        :type max_worker_threads: int
        """

        self._max_worker_threads = max_worker_threads

    @property
    def min_completion_threads(self):
        """Gets the min_completion_threads of this ThreadPoolInfo.


        :return: The min_completion_threads of this ThreadPoolInfo.
        :rtype: int
        """
        return self._min_completion_threads

    @min_completion_threads.setter
    def min_completion_threads(self, min_completion_threads):
        """Sets the min_completion_threads of this ThreadPoolInfo.


        :param min_completion_threads: The min_completion_threads of this ThreadPoolInfo.
        :type min_completion_threads: int
        """

        self._min_completion_threads = min_completion_threads

    @property
    def min_worker_threads(self):
        """Gets the min_worker_threads of this ThreadPoolInfo.


        :return: The min_worker_threads of this ThreadPoolInfo.
        :rtype: int
        """
        return self._min_worker_threads

    @min_worker_threads.setter
    def min_worker_threads(self, min_worker_threads):
        """Sets the min_worker_threads of this ThreadPoolInfo.


        :param min_worker_threads: The min_worker_threads of this ThreadPoolInfo.
        :type min_worker_threads: int
        """

        self._min_worker_threads = min_worker_threads

    @property
    def occupied_completion_threads(self):
        """Gets the occupied_completion_threads of this ThreadPoolInfo.


        :return: The occupied_completion_threads of this ThreadPoolInfo.
        :rtype: int
        """
        return self._occupied_completion_threads

    @occupied_completion_threads.setter
    def occupied_completion_threads(self, occupied_completion_threads):
        """Sets the occupied_completion_threads of this ThreadPoolInfo.


        :param occupied_completion_threads: The occupied_completion_threads of this ThreadPoolInfo.
        :type occupied_completion_threads: int
        """

        self._occupied_completion_threads = occupied_completion_threads

    @property
    def occupied_worker_threads(self):
        """Gets the occupied_worker_threads of this ThreadPoolInfo.


        :return: The occupied_worker_threads of this ThreadPoolInfo.
        :rtype: int
        """
        return self._occupied_worker_threads

    @occupied_worker_threads.setter
    def occupied_worker_threads(self, occupied_worker_threads):
        """Sets the occupied_worker_threads of this ThreadPoolInfo.


        :param occupied_worker_threads: The occupied_worker_threads of this ThreadPoolInfo.
        :type occupied_worker_threads: int
        """

        self._occupied_worker_threads = occupied_worker_threads
