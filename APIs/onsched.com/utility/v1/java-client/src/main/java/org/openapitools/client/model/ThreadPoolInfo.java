/*
 * OnSched API Utility
 * Endpoints for system utilities. e.g.Health
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ThreadPoolInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:54.508739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ThreadPoolInfo {
  public static final String SERIALIZED_NAME_AVAILABLE_COMPLETION_THREADS = "availableCompletionThreads";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_COMPLETION_THREADS)
  private Integer availableCompletionThreads;

  public static final String SERIALIZED_NAME_AVAILABLE_WORKER_THREADS = "availableWorkerThreads";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_WORKER_THREADS)
  private Integer availableWorkerThreads;

  public static final String SERIALIZED_NAME_MAX_COMPLETION_THREADS = "maxCompletionThreads";
  @SerializedName(SERIALIZED_NAME_MAX_COMPLETION_THREADS)
  private Integer maxCompletionThreads;

  public static final String SERIALIZED_NAME_MAX_WORKER_THREADS = "maxWorkerThreads";
  @SerializedName(SERIALIZED_NAME_MAX_WORKER_THREADS)
  private Integer maxWorkerThreads;

  public static final String SERIALIZED_NAME_MIN_COMPLETION_THREADS = "minCompletionThreads";
  @SerializedName(SERIALIZED_NAME_MIN_COMPLETION_THREADS)
  private Integer minCompletionThreads;

  public static final String SERIALIZED_NAME_MIN_WORKER_THREADS = "minWorkerThreads";
  @SerializedName(SERIALIZED_NAME_MIN_WORKER_THREADS)
  private Integer minWorkerThreads;

  public static final String SERIALIZED_NAME_OCCUPIED_COMPLETION_THREADS = "occupiedCompletionThreads";
  @SerializedName(SERIALIZED_NAME_OCCUPIED_COMPLETION_THREADS)
  private Integer occupiedCompletionThreads;

  public static final String SERIALIZED_NAME_OCCUPIED_WORKER_THREADS = "occupiedWorkerThreads";
  @SerializedName(SERIALIZED_NAME_OCCUPIED_WORKER_THREADS)
  private Integer occupiedWorkerThreads;

  public ThreadPoolInfo() {
  }

  public ThreadPoolInfo availableCompletionThreads(Integer availableCompletionThreads) {
    this.availableCompletionThreads = availableCompletionThreads;
    return this;
  }

  /**
   * Get availableCompletionThreads
   * @return availableCompletionThreads
   */
  @javax.annotation.Nullable
  public Integer getAvailableCompletionThreads() {
    return availableCompletionThreads;
  }

  public void setAvailableCompletionThreads(Integer availableCompletionThreads) {
    this.availableCompletionThreads = availableCompletionThreads;
  }


  public ThreadPoolInfo availableWorkerThreads(Integer availableWorkerThreads) {
    this.availableWorkerThreads = availableWorkerThreads;
    return this;
  }

  /**
   * Get availableWorkerThreads
   * @return availableWorkerThreads
   */
  @javax.annotation.Nullable
  public Integer getAvailableWorkerThreads() {
    return availableWorkerThreads;
  }

  public void setAvailableWorkerThreads(Integer availableWorkerThreads) {
    this.availableWorkerThreads = availableWorkerThreads;
  }


  public ThreadPoolInfo maxCompletionThreads(Integer maxCompletionThreads) {
    this.maxCompletionThreads = maxCompletionThreads;
    return this;
  }

  /**
   * Get maxCompletionThreads
   * @return maxCompletionThreads
   */
  @javax.annotation.Nullable
  public Integer getMaxCompletionThreads() {
    return maxCompletionThreads;
  }

  public void setMaxCompletionThreads(Integer maxCompletionThreads) {
    this.maxCompletionThreads = maxCompletionThreads;
  }


  public ThreadPoolInfo maxWorkerThreads(Integer maxWorkerThreads) {
    this.maxWorkerThreads = maxWorkerThreads;
    return this;
  }

  /**
   * Get maxWorkerThreads
   * @return maxWorkerThreads
   */
  @javax.annotation.Nullable
  public Integer getMaxWorkerThreads() {
    return maxWorkerThreads;
  }

  public void setMaxWorkerThreads(Integer maxWorkerThreads) {
    this.maxWorkerThreads = maxWorkerThreads;
  }


  public ThreadPoolInfo minCompletionThreads(Integer minCompletionThreads) {
    this.minCompletionThreads = minCompletionThreads;
    return this;
  }

  /**
   * Get minCompletionThreads
   * @return minCompletionThreads
   */
  @javax.annotation.Nullable
  public Integer getMinCompletionThreads() {
    return minCompletionThreads;
  }

  public void setMinCompletionThreads(Integer minCompletionThreads) {
    this.minCompletionThreads = minCompletionThreads;
  }


  public ThreadPoolInfo minWorkerThreads(Integer minWorkerThreads) {
    this.minWorkerThreads = minWorkerThreads;
    return this;
  }

  /**
   * Get minWorkerThreads
   * @return minWorkerThreads
   */
  @javax.annotation.Nullable
  public Integer getMinWorkerThreads() {
    return minWorkerThreads;
  }

  public void setMinWorkerThreads(Integer minWorkerThreads) {
    this.minWorkerThreads = minWorkerThreads;
  }


  public ThreadPoolInfo occupiedCompletionThreads(Integer occupiedCompletionThreads) {
    this.occupiedCompletionThreads = occupiedCompletionThreads;
    return this;
  }

  /**
   * Get occupiedCompletionThreads
   * @return occupiedCompletionThreads
   */
  @javax.annotation.Nullable
  public Integer getOccupiedCompletionThreads() {
    return occupiedCompletionThreads;
  }

  public void setOccupiedCompletionThreads(Integer occupiedCompletionThreads) {
    this.occupiedCompletionThreads = occupiedCompletionThreads;
  }


  public ThreadPoolInfo occupiedWorkerThreads(Integer occupiedWorkerThreads) {
    this.occupiedWorkerThreads = occupiedWorkerThreads;
    return this;
  }

  /**
   * Get occupiedWorkerThreads
   * @return occupiedWorkerThreads
   */
  @javax.annotation.Nullable
  public Integer getOccupiedWorkerThreads() {
    return occupiedWorkerThreads;
  }

  public void setOccupiedWorkerThreads(Integer occupiedWorkerThreads) {
    this.occupiedWorkerThreads = occupiedWorkerThreads;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreadPoolInfo threadPoolInfo = (ThreadPoolInfo) o;
    return Objects.equals(this.availableCompletionThreads, threadPoolInfo.availableCompletionThreads) &&
        Objects.equals(this.availableWorkerThreads, threadPoolInfo.availableWorkerThreads) &&
        Objects.equals(this.maxCompletionThreads, threadPoolInfo.maxCompletionThreads) &&
        Objects.equals(this.maxWorkerThreads, threadPoolInfo.maxWorkerThreads) &&
        Objects.equals(this.minCompletionThreads, threadPoolInfo.minCompletionThreads) &&
        Objects.equals(this.minWorkerThreads, threadPoolInfo.minWorkerThreads) &&
        Objects.equals(this.occupiedCompletionThreads, threadPoolInfo.occupiedCompletionThreads) &&
        Objects.equals(this.occupiedWorkerThreads, threadPoolInfo.occupiedWorkerThreads);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableCompletionThreads, availableWorkerThreads, maxCompletionThreads, maxWorkerThreads, minCompletionThreads, minWorkerThreads, occupiedCompletionThreads, occupiedWorkerThreads);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreadPoolInfo {\n");
    sb.append("    availableCompletionThreads: ").append(toIndentedString(availableCompletionThreads)).append("\n");
    sb.append("    availableWorkerThreads: ").append(toIndentedString(availableWorkerThreads)).append("\n");
    sb.append("    maxCompletionThreads: ").append(toIndentedString(maxCompletionThreads)).append("\n");
    sb.append("    maxWorkerThreads: ").append(toIndentedString(maxWorkerThreads)).append("\n");
    sb.append("    minCompletionThreads: ").append(toIndentedString(minCompletionThreads)).append("\n");
    sb.append("    minWorkerThreads: ").append(toIndentedString(minWorkerThreads)).append("\n");
    sb.append("    occupiedCompletionThreads: ").append(toIndentedString(occupiedCompletionThreads)).append("\n");
    sb.append("    occupiedWorkerThreads: ").append(toIndentedString(occupiedWorkerThreads)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableCompletionThreads");
    openapiFields.add("availableWorkerThreads");
    openapiFields.add("maxCompletionThreads");
    openapiFields.add("maxWorkerThreads");
    openapiFields.add("minCompletionThreads");
    openapiFields.add("minWorkerThreads");
    openapiFields.add("occupiedCompletionThreads");
    openapiFields.add("occupiedWorkerThreads");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ThreadPoolInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThreadPoolInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThreadPoolInfo is not found in the empty JSON string", ThreadPoolInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ThreadPoolInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThreadPoolInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThreadPoolInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThreadPoolInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThreadPoolInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThreadPoolInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ThreadPoolInfo>() {
           @Override
           public void write(JsonWriter out, ThreadPoolInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThreadPoolInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ThreadPoolInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ThreadPoolInfo
   * @throws IOException if the JSON string is invalid with respect to ThreadPoolInfo
   */
  public static ThreadPoolInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThreadPoolInfo.class);
  }

  /**
   * Convert an instance of ThreadPoolInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

