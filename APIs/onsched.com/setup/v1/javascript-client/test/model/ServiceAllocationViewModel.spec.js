/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OnSchedSetupApi);
  }
}(this, function(expect, OnSchedSetupApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OnSchedSetupApi.ServiceAllocationViewModel();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServiceAllocationViewModel', function() {
    it('should create an instance of ServiceAllocationViewModel', function() {
      // uncomment below and update the code to test ServiceAllocationViewModel
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be.a(OnSchedSetupApi.ServiceAllocationViewModel);
    });

    it('should have the property bookingCount (base name: "bookingCount")', function() {
      // uncomment below and update the code to test the property bookingCount
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property bookingLimit (base name: "bookingLimit")', function() {
      // uncomment below and update the code to test the property bookingLimit
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property deletedStatus (base name: "deletedStatus")', function() {
      // uncomment below and update the code to test the property deletedStatus
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property deletedTime (base name: "deletedTime")', function() {
      // uncomment below and update the code to test the property deletedTime
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "endDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "endTime")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property locationId (base name: "locationId")', function() {
      // uncomment below and update the code to test the property locationId
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property object (base name: "object")', function() {
      // uncomment below and update the code to test the property object
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property reason (base name: "reason")', function() {
      // uncomment below and update the code to test the property reason
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property repeat (base name: "repeat")', function() {
      // uncomment below and update the code to test the property repeat
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property repeats (base name: "repeats")', function() {
      // uncomment below and update the code to test the property repeats
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property resourceAddress (base name: "resourceAddress")', function() {
      // uncomment below and update the code to test the property resourceAddress
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property resourceDescription (base name: "resourceDescription")', function() {
      // uncomment below and update the code to test the property resourceDescription
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property resourceId (base name: "resourceId")', function() {
      // uncomment below and update the code to test the property resourceId
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property resourceImageUrl (base name: "resourceImageUrl")', function() {
      // uncomment below and update the code to test the property resourceImageUrl
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property resourceName (base name: "resourceName")', function() {
      // uncomment below and update the code to test the property resourceName
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property resourcePhone (base name: "resourcePhone")', function() {
      // uncomment below and update the code to test the property resourcePhone
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property serviceDescription (base name: "serviceDescription")', function() {
      // uncomment below and update the code to test the property serviceDescription
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property serviceDuration (base name: "serviceDuration")', function() {
      // uncomment below and update the code to test the property serviceDuration
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property serviceId (base name: "serviceId")', function() {
      // uncomment below and update the code to test the property serviceId
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property serviceImageUrl (base name: "serviceImageUrl")', function() {
      // uncomment below and update the code to test the property serviceImageUrl
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property serviceName (base name: "serviceName")', function() {
      // uncomment below and update the code to test the property serviceName
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "startDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property timezoneName (base name: "timezoneName")', function() {
      // uncomment below and update the code to test the property timezoneName
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

    it('should have the property timezoneOffset (base name: "timezoneOffset")', function() {
      // uncomment below and update the code to test the property timezoneOffset
      //var instance = new OnSchedSetupApi.ServiceAllocationViewModel();
      //expect(instance).to.be();
    });

  });

}));
