/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TravelViewModel model module.
 * @module model/TravelViewModel
 * @version v1
 */
class TravelViewModel {
    /**
     * Constructs a new <code>TravelViewModel</code>.
     * @alias module:model/TravelViewModel
     */
    constructor() { 
        
        TravelViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TravelViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TravelViewModel} obj Optional instance to populate.
     * @return {module:model/TravelViewModel} The populated <code>TravelViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TravelViewModel();

            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'String');
            }
            if (data.hasOwnProperty('proximity')) {
                obj['proximity'] = ApiClient.convertToType(data['proximity'], 'String');
            }
            if (data.hasOwnProperty('startAddress')) {
                obj['startAddress'] = ApiClient.convertToType(data['startAddress'], 'String');
            }
            if (data.hasOwnProperty('startLat')) {
                obj['startLat'] = ApiClient.convertToType(data['startLat'], 'String');
            }
            if (data.hasOwnProperty('startLon')) {
                obj['startLon'] = ApiClient.convertToType(data['startLon'], 'String');
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TravelViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TravelViewModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['distance'] && !(typeof data['distance'] === 'string' || data['distance'] instanceof String)) {
            throw new Error("Expected the field `distance` to be a primitive type in the JSON string but got " + data['distance']);
        }
        // ensure the json data is a string
        if (data['proximity'] && !(typeof data['proximity'] === 'string' || data['proximity'] instanceof String)) {
            throw new Error("Expected the field `proximity` to be a primitive type in the JSON string but got " + data['proximity']);
        }
        // ensure the json data is a string
        if (data['startAddress'] && !(typeof data['startAddress'] === 'string' || data['startAddress'] instanceof String)) {
            throw new Error("Expected the field `startAddress` to be a primitive type in the JSON string but got " + data['startAddress']);
        }
        // ensure the json data is a string
        if (data['startLat'] && !(typeof data['startLat'] === 'string' || data['startLat'] instanceof String)) {
            throw new Error("Expected the field `startLat` to be a primitive type in the JSON string but got " + data['startLat']);
        }
        // ensure the json data is a string
        if (data['startLon'] && !(typeof data['startLon'] === 'string' || data['startLon'] instanceof String)) {
            throw new Error("Expected the field `startLon` to be a primitive type in the JSON string but got " + data['startLon']);
        }
        // ensure the json data is a string
        if (data['units'] && !(typeof data['units'] === 'string' || data['units'] instanceof String)) {
            throw new Error("Expected the field `units` to be a primitive type in the JSON string but got " + data['units']);
        }

        return true;
    }


}



/**
 * @member {String} distance
 */
TravelViewModel.prototype['distance'] = undefined;

/**
 * @member {String} proximity
 */
TravelViewModel.prototype['proximity'] = undefined;

/**
 * @member {String} startAddress
 */
TravelViewModel.prototype['startAddress'] = undefined;

/**
 * @member {String} startLat
 */
TravelViewModel.prototype['startLat'] = undefined;

/**
 * @member {String} startLon
 */
TravelViewModel.prototype['startLon'] = undefined;

/**
 * @member {String} units
 */
TravelViewModel.prototype['units'] = undefined;






export default TravelViewModel;

