/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressViewModel from './AddressViewModel';
import AppointmentReminderViewModel from './AppointmentReminderViewModel';
import BusinessDefaultsViewModel from './BusinessDefaultsViewModel';
import BusinessHolidayViewModel from './BusinessHolidayViewModel';
import BusinessHoursViewModel from './BusinessHoursViewModel';
import BusinessServiceViewModel from './BusinessServiceViewModel';
import OnlineSettingsViewModel from './OnlineSettingsViewModel';
import TravelViewModel from './TravelViewModel';

/**
 * The LocationViewModel model module.
 * @module model/LocationViewModel
 * @version v1
 */
class LocationViewModel {
    /**
     * Constructs a new <code>LocationViewModel</code>.
     * @alias module:model/LocationViewModel
     */
    constructor() { 
        
        LocationViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationViewModel} obj Optional instance to populate.
     * @return {module:model/LocationViewModel} The populated <code>LocationViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationViewModel();

            if (data.hasOwnProperty('address')) {
                obj['address'] = AddressViewModel.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('adminEmail')) {
                obj['adminEmail'] = ApiClient.convertToType(data['adminEmail'], 'String');
            }
            if (data.hasOwnProperty('adminName')) {
                obj['adminName'] = ApiClient.convertToType(data['adminName'], 'String');
            }
            if (data.hasOwnProperty('appointmentReminders')) {
                obj['appointmentReminders'] = AppointmentReminderViewModel.constructFromObject(data['appointmentReminders']);
            }
            if (data.hasOwnProperty('businessHolidays')) {
                obj['businessHolidays'] = ApiClient.convertToType(data['businessHolidays'], [BusinessHolidayViewModel]);
            }
            if (data.hasOwnProperty('businessHours')) {
                obj['businessHours'] = BusinessHoursViewModel.constructFromObject(data['businessHours']);
            }
            if (data.hasOwnProperty('companyId')) {
                obj['companyId'] = ApiClient.convertToType(data['companyId'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('defaults')) {
                obj['defaults'] = BusinessDefaultsViewModel.constructFromObject(data['defaults']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fax')) {
                obj['fax'] = ApiClient.convertToType(data['fax'], 'String');
            }
            if (data.hasOwnProperty('friendlyId')) {
                obj['friendlyId'] = ApiClient.convertToType(data['friendlyId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('imageUrl')) {
                obj['imageUrl'] = ApiClient.convertToType(data['imageUrl'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('primaryBusiness')) {
                obj['primaryBusiness'] = ApiClient.convertToType(data['primaryBusiness'], 'Boolean');
            }
            if (data.hasOwnProperty('primaryCalendarId')) {
                obj['primaryCalendarId'] = ApiClient.convertToType(data['primaryCalendarId'], 'String');
            }
            if (data.hasOwnProperty('regionId')) {
                obj['regionId'] = ApiClient.convertToType(data['regionId'], 'String');
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = ApiClient.convertToType(data['services'], [BusinessServiceViewModel]);
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = OnlineSettingsViewModel.constructFromObject(data['settings']);
            }
            if (data.hasOwnProperty('timezoneIana')) {
                obj['timezoneIana'] = ApiClient.convertToType(data['timezoneIana'], 'String');
            }
            if (data.hasOwnProperty('timezoneId')) {
                obj['timezoneId'] = ApiClient.convertToType(data['timezoneId'], 'String');
            }
            if (data.hasOwnProperty('timezoneOffset')) {
                obj['timezoneOffset'] = ApiClient.convertToType(data['timezoneOffset'], 'Number');
            }
            if (data.hasOwnProperty('travel')) {
                obj['travel'] = TravelViewModel.constructFromObject(data['travel']);
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationViewModel</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          AddressViewModel.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['adminEmail'] && !(typeof data['adminEmail'] === 'string' || data['adminEmail'] instanceof String)) {
            throw new Error("Expected the field `adminEmail` to be a primitive type in the JSON string but got " + data['adminEmail']);
        }
        // ensure the json data is a string
        if (data['adminName'] && !(typeof data['adminName'] === 'string' || data['adminName'] instanceof String)) {
            throw new Error("Expected the field `adminName` to be a primitive type in the JSON string but got " + data['adminName']);
        }
        // validate the optional field `appointmentReminders`
        if (data['appointmentReminders']) { // data not null
          AppointmentReminderViewModel.validateJSON(data['appointmentReminders']);
        }
        if (data['businessHolidays']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['businessHolidays'])) {
                throw new Error("Expected the field `businessHolidays` to be an array in the JSON data but got " + data['businessHolidays']);
            }
            // validate the optional field `businessHolidays` (array)
            for (const item of data['businessHolidays']) {
                BusinessHolidayViewModel.validateJSON(item);
            };
        }
        // validate the optional field `businessHours`
        if (data['businessHours']) { // data not null
          BusinessHoursViewModel.validateJSON(data['businessHours']);
        }
        // ensure the json data is a string
        if (data['companyId'] && !(typeof data['companyId'] === 'string' || data['companyId'] instanceof String)) {
            throw new Error("Expected the field `companyId` to be a primitive type in the JSON string but got " + data['companyId']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // validate the optional field `defaults`
        if (data['defaults']) { // data not null
          BusinessDefaultsViewModel.validateJSON(data['defaults']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fax'] && !(typeof data['fax'] === 'string' || data['fax'] instanceof String)) {
            throw new Error("Expected the field `fax` to be a primitive type in the JSON string but got " + data['fax']);
        }
        // ensure the json data is a string
        if (data['friendlyId'] && !(typeof data['friendlyId'] === 'string' || data['friendlyId'] instanceof String)) {
            throw new Error("Expected the field `friendlyId` to be a primitive type in the JSON string but got " + data['friendlyId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['imageUrl'] && !(typeof data['imageUrl'] === 'string' || data['imageUrl'] instanceof String)) {
            throw new Error("Expected the field `imageUrl` to be a primitive type in the JSON string but got " + data['imageUrl']);
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['primaryCalendarId'] && !(typeof data['primaryCalendarId'] === 'string' || data['primaryCalendarId'] instanceof String)) {
            throw new Error("Expected the field `primaryCalendarId` to be a primitive type in the JSON string but got " + data['primaryCalendarId']);
        }
        // ensure the json data is a string
        if (data['regionId'] && !(typeof data['regionId'] === 'string' || data['regionId'] instanceof String)) {
            throw new Error("Expected the field `regionId` to be a primitive type in the JSON string but got " + data['regionId']);
        }
        if (data['services']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['services'])) {
                throw new Error("Expected the field `services` to be an array in the JSON data but got " + data['services']);
            }
            // validate the optional field `services` (array)
            for (const item of data['services']) {
                BusinessServiceViewModel.validateJSON(item);
            };
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          OnlineSettingsViewModel.validateJSON(data['settings']);
        }
        // ensure the json data is a string
        if (data['timezoneIana'] && !(typeof data['timezoneIana'] === 'string' || data['timezoneIana'] instanceof String)) {
            throw new Error("Expected the field `timezoneIana` to be a primitive type in the JSON string but got " + data['timezoneIana']);
        }
        // ensure the json data is a string
        if (data['timezoneId'] && !(typeof data['timezoneId'] === 'string' || data['timezoneId'] instanceof String)) {
            throw new Error("Expected the field `timezoneId` to be a primitive type in the JSON string but got " + data['timezoneId']);
        }
        // validate the optional field `travel`
        if (data['travel']) { // data not null
          TravelViewModel.validateJSON(data['travel']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * @member {module:model/AddressViewModel} address
 */
LocationViewModel.prototype['address'] = undefined;

/**
 * @member {String} adminEmail
 */
LocationViewModel.prototype['adminEmail'] = undefined;

/**
 * @member {String} adminName
 */
LocationViewModel.prototype['adminName'] = undefined;

/**
 * @member {module:model/AppointmentReminderViewModel} appointmentReminders
 */
LocationViewModel.prototype['appointmentReminders'] = undefined;

/**
 * @member {Array.<module:model/BusinessHolidayViewModel>} businessHolidays
 */
LocationViewModel.prototype['businessHolidays'] = undefined;

/**
 * @member {module:model/BusinessHoursViewModel} businessHours
 */
LocationViewModel.prototype['businessHours'] = undefined;

/**
 * @member {String} companyId
 */
LocationViewModel.prototype['companyId'] = undefined;

/**
 * @member {String} companyName
 */
LocationViewModel.prototype['companyName'] = undefined;

/**
 * @member {module:model/BusinessDefaultsViewModel} defaults
 */
LocationViewModel.prototype['defaults'] = undefined;

/**
 * @member {String} email
 */
LocationViewModel.prototype['email'] = undefined;

/**
 * @member {String} fax
 */
LocationViewModel.prototype['fax'] = undefined;

/**
 * @member {String} friendlyId
 */
LocationViewModel.prototype['friendlyId'] = undefined;

/**
 * @member {String} id
 */
LocationViewModel.prototype['id'] = undefined;

/**
 * @member {String} imageUrl
 */
LocationViewModel.prototype['imageUrl'] = undefined;

/**
 * @member {Number} latitude
 */
LocationViewModel.prototype['latitude'] = undefined;

/**
 * @member {String} logo
 */
LocationViewModel.prototype['logo'] = undefined;

/**
 * @member {Number} longitude
 */
LocationViewModel.prototype['longitude'] = undefined;

/**
 * @member {String} name
 */
LocationViewModel.prototype['name'] = undefined;

/**
 * @member {String} object
 */
LocationViewModel.prototype['object'] = undefined;

/**
 * @member {String} phone
 */
LocationViewModel.prototype['phone'] = undefined;

/**
 * @member {Boolean} primaryBusiness
 */
LocationViewModel.prototype['primaryBusiness'] = undefined;

/**
 * @member {String} primaryCalendarId
 */
LocationViewModel.prototype['primaryCalendarId'] = undefined;

/**
 * @member {String} regionId
 */
LocationViewModel.prototype['regionId'] = undefined;

/**
 * @member {Array.<module:model/BusinessServiceViewModel>} services
 */
LocationViewModel.prototype['services'] = undefined;

/**
 * @member {module:model/OnlineSettingsViewModel} settings
 */
LocationViewModel.prototype['settings'] = undefined;

/**
 * @member {String} timezoneIana
 */
LocationViewModel.prototype['timezoneIana'] = undefined;

/**
 * @member {String} timezoneId
 */
LocationViewModel.prototype['timezoneId'] = undefined;

/**
 * @member {Number} timezoneOffset
 */
LocationViewModel.prototype['timezoneOffset'] = undefined;

/**
 * @member {module:model/TravelViewModel} travel
 */
LocationViewModel.prototype['travel'] = undefined;

/**
 * @member {String} website
 */
LocationViewModel.prototype['website'] = undefined;






export default LocationViewModel;

