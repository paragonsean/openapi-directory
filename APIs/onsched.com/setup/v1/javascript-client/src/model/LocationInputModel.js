/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressInputModel from './AddressInputModel';
import AppointmentRemindersInputModel from './AppointmentRemindersInputModel';
import BusinessDefaultsInputModel from './BusinessDefaultsInputModel';
import BusinessHoursInputModel from './BusinessHoursInputModel';
import OnlineSettingsInputModel from './OnlineSettingsInputModel';

/**
 * The LocationInputModel model module.
 * @module model/LocationInputModel
 * @version v1
 */
class LocationInputModel {
    /**
     * Constructs a new <code>LocationInputModel</code>.
     * @alias module:model/LocationInputModel
     */
    constructor() { 
        
        LocationInputModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationInputModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationInputModel} obj Optional instance to populate.
     * @return {module:model/LocationInputModel} The populated <code>LocationInputModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationInputModel();

            if (data.hasOwnProperty('address')) {
                obj['address'] = AddressInputModel.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('adminEmail')) {
                obj['adminEmail'] = ApiClient.convertToType(data['adminEmail'], 'String');
            }
            if (data.hasOwnProperty('adminName')) {
                obj['adminName'] = ApiClient.convertToType(data['adminName'], 'String');
            }
            if (data.hasOwnProperty('appointmentReminders')) {
                obj['appointmentReminders'] = AppointmentRemindersInputModel.constructFromObject(data['appointmentReminders']);
            }
            if (data.hasOwnProperty('businessHours')) {
                obj['businessHours'] = BusinessHoursInputModel.constructFromObject(data['businessHours']);
            }
            if (data.hasOwnProperty('defaults')) {
                obj['defaults'] = BusinessDefaultsInputModel.constructFromObject(data['defaults']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fax')) {
                obj['fax'] = ApiClient.convertToType(data['fax'], 'String');
            }
            if (data.hasOwnProperty('friendlyId')) {
                obj['friendlyId'] = ApiClient.convertToType(data['friendlyId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('regionId')) {
                obj['regionId'] = ApiClient.convertToType(data['regionId'], 'String');
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = OnlineSettingsInputModel.constructFromObject(data['settings']);
            }
            if (data.hasOwnProperty('timezoneName')) {
                obj['timezoneName'] = ApiClient.convertToType(data['timezoneName'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationInputModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationInputModel</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          AddressInputModel.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['adminEmail'] && !(typeof data['adminEmail'] === 'string' || data['adminEmail'] instanceof String)) {
            throw new Error("Expected the field `adminEmail` to be a primitive type in the JSON string but got " + data['adminEmail']);
        }
        // ensure the json data is a string
        if (data['adminName'] && !(typeof data['adminName'] === 'string' || data['adminName'] instanceof String)) {
            throw new Error("Expected the field `adminName` to be a primitive type in the JSON string but got " + data['adminName']);
        }
        // validate the optional field `appointmentReminders`
        if (data['appointmentReminders']) { // data not null
          AppointmentRemindersInputModel.validateJSON(data['appointmentReminders']);
        }
        // validate the optional field `businessHours`
        if (data['businessHours']) { // data not null
          BusinessHoursInputModel.validateJSON(data['businessHours']);
        }
        // validate the optional field `defaults`
        if (data['defaults']) { // data not null
          BusinessDefaultsInputModel.validateJSON(data['defaults']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fax'] && !(typeof data['fax'] === 'string' || data['fax'] instanceof String)) {
            throw new Error("Expected the field `fax` to be a primitive type in the JSON string but got " + data['fax']);
        }
        // ensure the json data is a string
        if (data['friendlyId'] && !(typeof data['friendlyId'] === 'string' || data['friendlyId'] instanceof String)) {
            throw new Error("Expected the field `friendlyId` to be a primitive type in the JSON string but got " + data['friendlyId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['regionId'] && !(typeof data['regionId'] === 'string' || data['regionId'] instanceof String)) {
            throw new Error("Expected the field `regionId` to be a primitive type in the JSON string but got " + data['regionId']);
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          OnlineSettingsInputModel.validateJSON(data['settings']);
        }
        // ensure the json data is a string
        if (data['timezoneName'] && !(typeof data['timezoneName'] === 'string' || data['timezoneName'] instanceof String)) {
            throw new Error("Expected the field `timezoneName` to be a primitive type in the JSON string but got " + data['timezoneName']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * @member {module:model/AddressInputModel} address
 */
LocationInputModel.prototype['address'] = undefined;

/**
 * Field is required.
 * @member {String} adminEmail
 */
LocationInputModel.prototype['adminEmail'] = undefined;

/**
 * This field is no longer required and has been deprecated.
 * @member {String} adminName
 */
LocationInputModel.prototype['adminName'] = undefined;

/**
 * @member {module:model/AppointmentRemindersInputModel} appointmentReminders
 */
LocationInputModel.prototype['appointmentReminders'] = undefined;

/**
 * @member {module:model/BusinessHoursInputModel} businessHours
 */
LocationInputModel.prototype['businessHours'] = undefined;

/**
 * @member {module:model/BusinessDefaultsInputModel} defaults
 */
LocationInputModel.prototype['defaults'] = undefined;

/**
 * @member {String} email
 */
LocationInputModel.prototype['email'] = undefined;

/**
 * @member {String} fax
 */
LocationInputModel.prototype['fax'] = undefined;

/**
 * Use the friendlyId as an alternative to the assigned locationId  Choose something easy and meaningful. Must be unique within your company.  FriendlyId's are limited to maximum of 64 characters.
 * @member {String} friendlyId
 */
LocationInputModel.prototype['friendlyId'] = undefined;

/**
 * @member {String} name
 */
LocationInputModel.prototype['name'] = undefined;

/**
 * GroupSize Limits the number of people that can come  along on a single appointment
 * @member {String} phone
 */
LocationInputModel.prototype['phone'] = undefined;

/**
 * @member {String} regionId
 */
LocationInputModel.prototype['regionId'] = undefined;

/**
 * @member {module:model/OnlineSettingsInputModel} settings
 */
LocationInputModel.prototype['settings'] = undefined;

/**
 * Field is required. It is in Iana format. e.g. America/New_York. Use moment.js in your client for ease of timezone detection and selection
 * @member {String} timezoneName
 */
LocationInputModel.prototype['timezoneName'] = undefined;

/**
 * @member {String} website
 */
LocationInputModel.prototype['website'] = undefined;






export default LocationInputModel;

