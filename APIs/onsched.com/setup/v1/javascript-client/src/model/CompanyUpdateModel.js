/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CompanyUpdateModel model module.
 * @module model/CompanyUpdateModel
 * @version v1
 */
class CompanyUpdateModel {
    /**
     * Constructs a new <code>CompanyUpdateModel</code>.
     * @alias module:model/CompanyUpdateModel
     */
    constructor() { 
        
        CompanyUpdateModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompanyUpdateModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompanyUpdateModel} obj Optional instance to populate.
     * @return {module:model/CompanyUpdateModel} The populated <code>CompanyUpdateModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompanyUpdateModel();

            if (data.hasOwnProperty('addressLine1')) {
                obj['addressLine1'] = ApiClient.convertToType(data['addressLine1'], 'String');
            }
            if (data.hasOwnProperty('addressLine2')) {
                obj['addressLine2'] = ApiClient.convertToType(data['addressLine2'], 'String');
            }
            if (data.hasOwnProperty('bookingWebhookUrl')) {
                obj['bookingWebhookUrl'] = ApiClient.convertToType(data['bookingWebhookUrl'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('customerWebhookUrl')) {
                obj['customerWebhookUrl'] = ApiClient.convertToType(data['customerWebhookUrl'], 'String');
            }
            if (data.hasOwnProperty('disableEmailAndSmsNotifications')) {
                obj['disableEmailAndSmsNotifications'] = ApiClient.convertToType(data['disableEmailAndSmsNotifications'], 'Boolean');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fax')) {
                obj['fax'] = ApiClient.convertToType(data['fax'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notificationFromEmailAddress')) {
                obj['notificationFromEmailAddress'] = ApiClient.convertToType(data['notificationFromEmailAddress'], 'String');
            }
            if (data.hasOwnProperty('notificationFromName')) {
                obj['notificationFromName'] = ApiClient.convertToType(data['notificationFromName'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('registrationEmail')) {
                obj['registrationEmail'] = ApiClient.convertToType(data['registrationEmail'], 'String');
            }
            if (data.hasOwnProperty('reminderWebhookUrl')) {
                obj['reminderWebhookUrl'] = ApiClient.convertToType(data['reminderWebhookUrl'], 'String');
            }
            if (data.hasOwnProperty('resourceWebhookUrl')) {
                obj['resourceWebhookUrl'] = ApiClient.convertToType(data['resourceWebhookUrl'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('timezoneName')) {
                obj['timezoneName'] = ApiClient.convertToType(data['timezoneName'], 'String');
            }
            if (data.hasOwnProperty('webhookSignatureHash')) {
                obj['webhookSignatureHash'] = ApiClient.convertToType(data['webhookSignatureHash'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompanyUpdateModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompanyUpdateModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addressLine1'] && !(typeof data['addressLine1'] === 'string' || data['addressLine1'] instanceof String)) {
            throw new Error("Expected the field `addressLine1` to be a primitive type in the JSON string but got " + data['addressLine1']);
        }
        // ensure the json data is a string
        if (data['addressLine2'] && !(typeof data['addressLine2'] === 'string' || data['addressLine2'] instanceof String)) {
            throw new Error("Expected the field `addressLine2` to be a primitive type in the JSON string but got " + data['addressLine2']);
        }
        // ensure the json data is a string
        if (data['bookingWebhookUrl'] && !(typeof data['bookingWebhookUrl'] === 'string' || data['bookingWebhookUrl'] instanceof String)) {
            throw new Error("Expected the field `bookingWebhookUrl` to be a primitive type in the JSON string but got " + data['bookingWebhookUrl']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['customerWebhookUrl'] && !(typeof data['customerWebhookUrl'] === 'string' || data['customerWebhookUrl'] instanceof String)) {
            throw new Error("Expected the field `customerWebhookUrl` to be a primitive type in the JSON string but got " + data['customerWebhookUrl']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fax'] && !(typeof data['fax'] === 'string' || data['fax'] instanceof String)) {
            throw new Error("Expected the field `fax` to be a primitive type in the JSON string but got " + data['fax']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notificationFromEmailAddress'] && !(typeof data['notificationFromEmailAddress'] === 'string' || data['notificationFromEmailAddress'] instanceof String)) {
            throw new Error("Expected the field `notificationFromEmailAddress` to be a primitive type in the JSON string but got " + data['notificationFromEmailAddress']);
        }
        // ensure the json data is a string
        if (data['notificationFromName'] && !(typeof data['notificationFromName'] === 'string' || data['notificationFromName'] instanceof String)) {
            throw new Error("Expected the field `notificationFromName` to be a primitive type in the JSON string but got " + data['notificationFromName']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['registrationEmail'] && !(typeof data['registrationEmail'] === 'string' || data['registrationEmail'] instanceof String)) {
            throw new Error("Expected the field `registrationEmail` to be a primitive type in the JSON string but got " + data['registrationEmail']);
        }
        // ensure the json data is a string
        if (data['reminderWebhookUrl'] && !(typeof data['reminderWebhookUrl'] === 'string' || data['reminderWebhookUrl'] instanceof String)) {
            throw new Error("Expected the field `reminderWebhookUrl` to be a primitive type in the JSON string but got " + data['reminderWebhookUrl']);
        }
        // ensure the json data is a string
        if (data['resourceWebhookUrl'] && !(typeof data['resourceWebhookUrl'] === 'string' || data['resourceWebhookUrl'] instanceof String)) {
            throw new Error("Expected the field `resourceWebhookUrl` to be a primitive type in the JSON string but got " + data['resourceWebhookUrl']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['timezoneName'] && !(typeof data['timezoneName'] === 'string' || data['timezoneName'] instanceof String)) {
            throw new Error("Expected the field `timezoneName` to be a primitive type in the JSON string but got " + data['timezoneName']);
        }
        // ensure the json data is a string
        if (data['webhookSignatureHash'] && !(typeof data['webhookSignatureHash'] === 'string' || data['webhookSignatureHash'] instanceof String)) {
            throw new Error("Expected the field `webhookSignatureHash` to be a primitive type in the JSON string but got " + data['webhookSignatureHash']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * @member {String} addressLine1
 */
CompanyUpdateModel.prototype['addressLine1'] = undefined;

/**
 * @member {String} addressLine2
 */
CompanyUpdateModel.prototype['addressLine2'] = undefined;

/**
 * @member {String} bookingWebhookUrl
 */
CompanyUpdateModel.prototype['bookingWebhookUrl'] = undefined;

/**
 * @member {String} city
 */
CompanyUpdateModel.prototype['city'] = undefined;

/**
 * @member {String} country
 */
CompanyUpdateModel.prototype['country'] = undefined;

/**
 * @member {String} customerWebhookUrl
 */
CompanyUpdateModel.prototype['customerWebhookUrl'] = undefined;

/**
 * @member {Boolean} disableEmailAndSmsNotifications
 */
CompanyUpdateModel.prototype['disableEmailAndSmsNotifications'] = undefined;

/**
 * @member {String} email
 */
CompanyUpdateModel.prototype['email'] = undefined;

/**
 * @member {String} fax
 */
CompanyUpdateModel.prototype['fax'] = undefined;

/**
 * @member {String} name
 */
CompanyUpdateModel.prototype['name'] = undefined;

/**
 * @member {String} notificationFromEmailAddress
 */
CompanyUpdateModel.prototype['notificationFromEmailAddress'] = undefined;

/**
 * @member {String} notificationFromName
 */
CompanyUpdateModel.prototype['notificationFromName'] = undefined;

/**
 * @member {String} phone
 */
CompanyUpdateModel.prototype['phone'] = undefined;

/**
 * @member {String} postalCode
 */
CompanyUpdateModel.prototype['postalCode'] = undefined;

/**
 * @member {String} registrationEmail
 */
CompanyUpdateModel.prototype['registrationEmail'] = undefined;

/**
 * @member {String} reminderWebhookUrl
 */
CompanyUpdateModel.prototype['reminderWebhookUrl'] = undefined;

/**
 * @member {String} resourceWebhookUrl
 */
CompanyUpdateModel.prototype['resourceWebhookUrl'] = undefined;

/**
 * @member {String} state
 */
CompanyUpdateModel.prototype['state'] = undefined;

/**
 * @member {String} timezoneName
 */
CompanyUpdateModel.prototype['timezoneName'] = undefined;

/**
 * @member {String} webhookSignatureHash
 */
CompanyUpdateModel.prototype['webhookSignatureHash'] = undefined;

/**
 * @member {String} website
 */
CompanyUpdateModel.prototype['website'] = undefined;






export default CompanyUpdateModel;

