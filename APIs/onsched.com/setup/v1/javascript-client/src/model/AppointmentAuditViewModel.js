/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppointmentAuditViewModel model module.
 * @module model/AppointmentAuditViewModel
 * @version v1
 */
class AppointmentAuditViewModel {
    /**
     * Constructs a new <code>AppointmentAuditViewModel</code>.
     * @alias module:model/AppointmentAuditViewModel
     */
    constructor() { 
        
        AppointmentAuditViewModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppointmentAuditViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppointmentAuditViewModel} obj Optional instance to populate.
     * @return {module:model/AppointmentAuditViewModel} The populated <code>AppointmentAuditViewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppointmentAuditViewModel();

            if (data.hasOwnProperty('appointmentId')) {
                obj['appointmentId'] = ApiClient.convertToType(data['appointmentId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('modificationType')) {
                obj['modificationType'] = ApiClient.convertToType(data['modificationType'], 'String');
            }
            if (data.hasOwnProperty('modifiedBy')) {
                obj['modifiedBy'] = ApiClient.convertToType(data['modifiedBy'], 'String');
            }
            if (data.hasOwnProperty('modifiedOn')) {
                obj['modifiedOn'] = ApiClient.convertToType(data['modifiedOn'], 'String');
            }
            if (data.hasOwnProperty('notesAfter')) {
                obj['notesAfter'] = ApiClient.convertToType(data['notesAfter'], 'String');
            }
            if (data.hasOwnProperty('notesBefore')) {
                obj['notesBefore'] = ApiClient.convertToType(data['notesBefore'], 'String');
            }
            if (data.hasOwnProperty('statusAfter')) {
                obj['statusAfter'] = ApiClient.convertToType(data['statusAfter'], 'String');
            }
            if (data.hasOwnProperty('statusBefore')) {
                obj['statusBefore'] = ApiClient.convertToType(data['statusBefore'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppointmentAuditViewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppointmentAuditViewModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appointmentId'] && !(typeof data['appointmentId'] === 'string' || data['appointmentId'] instanceof String)) {
            throw new Error("Expected the field `appointmentId` to be a primitive type in the JSON string but got " + data['appointmentId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['modificationType'] && !(typeof data['modificationType'] === 'string' || data['modificationType'] instanceof String)) {
            throw new Error("Expected the field `modificationType` to be a primitive type in the JSON string but got " + data['modificationType']);
        }
        // ensure the json data is a string
        if (data['modifiedBy'] && !(typeof data['modifiedBy'] === 'string' || data['modifiedBy'] instanceof String)) {
            throw new Error("Expected the field `modifiedBy` to be a primitive type in the JSON string but got " + data['modifiedBy']);
        }
        // ensure the json data is a string
        if (data['modifiedOn'] && !(typeof data['modifiedOn'] === 'string' || data['modifiedOn'] instanceof String)) {
            throw new Error("Expected the field `modifiedOn` to be a primitive type in the JSON string but got " + data['modifiedOn']);
        }
        // ensure the json data is a string
        if (data['notesAfter'] && !(typeof data['notesAfter'] === 'string' || data['notesAfter'] instanceof String)) {
            throw new Error("Expected the field `notesAfter` to be a primitive type in the JSON string but got " + data['notesAfter']);
        }
        // ensure the json data is a string
        if (data['notesBefore'] && !(typeof data['notesBefore'] === 'string' || data['notesBefore'] instanceof String)) {
            throw new Error("Expected the field `notesBefore` to be a primitive type in the JSON string but got " + data['notesBefore']);
        }
        // ensure the json data is a string
        if (data['statusAfter'] && !(typeof data['statusAfter'] === 'string' || data['statusAfter'] instanceof String)) {
            throw new Error("Expected the field `statusAfter` to be a primitive type in the JSON string but got " + data['statusAfter']);
        }
        // ensure the json data is a string
        if (data['statusBefore'] && !(typeof data['statusBefore'] === 'string' || data['statusBefore'] instanceof String)) {
            throw new Error("Expected the field `statusBefore` to be a primitive type in the JSON string but got " + data['statusBefore']);
        }

        return true;
    }


}



/**
 * @member {String} appointmentId
 */
AppointmentAuditViewModel.prototype['appointmentId'] = undefined;

/**
 * @member {String} id
 */
AppointmentAuditViewModel.prototype['id'] = undefined;

/**
 * @member {String} modificationType
 */
AppointmentAuditViewModel.prototype['modificationType'] = undefined;

/**
 * @member {String} modifiedBy
 */
AppointmentAuditViewModel.prototype['modifiedBy'] = undefined;

/**
 * @member {String} modifiedOn
 */
AppointmentAuditViewModel.prototype['modifiedOn'] = undefined;

/**
 * @member {String} notesAfter
 */
AppointmentAuditViewModel.prototype['notesAfter'] = undefined;

/**
 * @member {String} notesBefore
 */
AppointmentAuditViewModel.prototype['notesBefore'] = undefined;

/**
 * @member {String} statusAfter
 */
AppointmentAuditViewModel.prototype['statusAfter'] = undefined;

/**
 * @member {String} statusBefore
 */
AppointmentAuditViewModel.prototype['statusBefore'] = undefined;






export default AppointmentAuditViewModel;

