/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailabilityInputModel from './AvailabilityInputModel';
import CustomFieldInputModel from './CustomFieldInputModel';
import ServiceFeesInputModel from './ServiceFeesInputModel';
import ServiceOptionsInputModel from './ServiceOptionsInputModel';
import ServiceSettingsInputModel from './ServiceSettingsInputModel';

/**
 * The ServiceInputModel model module.
 * @module model/ServiceInputModel
 * @version v1
 */
class ServiceInputModel {
    /**
     * Constructs a new <code>ServiceInputModel</code>.
     * @alias module:model/ServiceInputModel
     */
    constructor() { 
        
        ServiceInputModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceInputModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceInputModel} obj Optional instance to populate.
     * @return {module:model/ServiceInputModel} The populated <code>ServiceInputModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceInputModel();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = AvailabilityInputModel.constructFromObject(data['availability']);
            }
            if (data.hasOwnProperty('bookingInterval')) {
                obj['bookingInterval'] = ApiClient.convertToType(data['bookingInterval'], 'Number');
            }
            if (data.hasOwnProperty('bookingLimit')) {
                obj['bookingLimit'] = ApiClient.convertToType(data['bookingLimit'], 'Number');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = CustomFieldInputModel.constructFromObject(data['customFields']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('fees')) {
                obj['fees'] = ServiceFeesInputModel.constructFromObject(data['fees']);
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('maxCapacity')) {
                obj['maxCapacity'] = ApiClient.convertToType(data['maxCapacity'], 'Number');
            }
            if (data.hasOwnProperty('maxGroupSize')) {
                obj['maxGroupSize'] = ApiClient.convertToType(data['maxGroupSize'], 'Number');
            }
            if (data.hasOwnProperty('mediaPageUrl')) {
                obj['mediaPageUrl'] = ApiClient.convertToType(data['mediaPageUrl'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ServiceOptionsInputModel.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('serviceGroupId')) {
                obj['serviceGroupId'] = ApiClient.convertToType(data['serviceGroupId'], 'String');
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = ServiceSettingsInputModel.constructFromObject(data['settings']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceInputModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceInputModel</code>.
     */
    static validateJSON(data) {
        // validate the optional field `availability`
        if (data['availability']) { // data not null
          AvailabilityInputModel.validateJSON(data['availability']);
        }
        // validate the optional field `customFields`
        if (data['customFields']) { // data not null
          CustomFieldInputModel.validateJSON(data['customFields']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `fees`
        if (data['fees']) { // data not null
          ServiceFeesInputModel.validateJSON(data['fees']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['mediaPageUrl'] && !(typeof data['mediaPageUrl'] === 'string' || data['mediaPageUrl'] instanceof String)) {
            throw new Error("Expected the field `mediaPageUrl` to be a primitive type in the JSON string but got " + data['mediaPageUrl']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          ServiceOptionsInputModel.validateJSON(data['options']);
        }
        // ensure the json data is a string
        if (data['serviceGroupId'] && !(typeof data['serviceGroupId'] === 'string' || data['serviceGroupId'] instanceof String)) {
            throw new Error("Expected the field `serviceGroupId` to be a primitive type in the JSON string but got " + data['serviceGroupId']);
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          ServiceSettingsInputModel.validateJSON(data['settings']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/AvailabilityInputModel} availability
 */
ServiceInputModel.prototype['availability'] = undefined;

/**
 * @member {Number} bookingInterval
 */
ServiceInputModel.prototype['bookingInterval'] = undefined;

/**
 * @member {Number} bookingLimit
 */
ServiceInputModel.prototype['bookingLimit'] = undefined;

/**
 * @member {module:model/CustomFieldInputModel} customFields
 */
ServiceInputModel.prototype['customFields'] = undefined;

/**
 * @member {String} description
 */
ServiceInputModel.prototype['description'] = undefined;

/**
 * @member {Number} duration
 */
ServiceInputModel.prototype['duration'] = undefined;

/**
 * @member {module:model/ServiceFeesInputModel} fees
 */
ServiceInputModel.prototype['fees'] = undefined;

/**
 * @member {String} locationId
 */
ServiceInputModel.prototype['locationId'] = undefined;

/**
 * @member {Number} maxCapacity
 */
ServiceInputModel.prototype['maxCapacity'] = undefined;

/**
 * @member {Number} maxGroupSize
 */
ServiceInputModel.prototype['maxGroupSize'] = undefined;

/**
 * @member {String} mediaPageUrl
 */
ServiceInputModel.prototype['mediaPageUrl'] = undefined;

/**
 * @member {String} name
 */
ServiceInputModel.prototype['name'] = undefined;

/**
 * @member {module:model/ServiceOptionsInputModel} options
 */
ServiceInputModel.prototype['options'] = undefined;

/**
 * @member {Boolean} public
 */
ServiceInputModel.prototype['public'] = undefined;

/**
 * @member {String} serviceGroupId
 */
ServiceInputModel.prototype['serviceGroupId'] = undefined;

/**
 * @member {module:model/ServiceSettingsInputModel} settings
 */
ServiceInputModel.prototype['settings'] = undefined;

/**
 * @member {String} type
 */
ServiceInputModel.prototype['type'] = undefined;






export default ServiceInputModel;

