/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CalendarBlockInputModel from '../model/CalendarBlockInputModel';
import CalendarBlockListViewModel from '../model/CalendarBlockListViewModel';
import CalendarBlockUpdateModel from '../model/CalendarBlockUpdateModel';
import CalendarBlockViewModel from '../model/CalendarBlockViewModel';
import ResourceBlockViewModel from '../model/ResourceBlockViewModel';
import ScheduleInputModel from '../model/ScheduleInputModel';
import ScheduleListViewModel from '../model/ScheduleListViewModel';
import ScheduleUpdateModel from '../model/ScheduleUpdateModel';
import ScheduleViewModel from '../model/ScheduleViewModel';
import ServiceListViewModel from '../model/ServiceListViewModel';

/**
* Calendars service.
* @module api/CalendarsApi
* @version v1
*/
export default class CalendarsApi {

    /**
    * Constructs a new CalendarsApi. 
    * @alias module:api/CalendarsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the setupV1CalendarsBlockIdDelete operation.
     * @callback module:api/CalendarsApi~setupV1CalendarsBlockIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalendarBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Calendar Block
     * <p>Use this endpoint to permanently <b>Delete</b> a calendar block. A valid <b>calendarBlock id</b> is required.</p>
     * @param {String} id id of a calendarBlock object
     * @param {module:api/CalendarsApi~setupV1CalendarsBlockIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalendarBlockViewModel}
     */
    setupV1CalendarsBlockIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1CalendarsBlockIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CalendarBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/calendars/block/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1CalendarsBlockIdPut operation.
     * @callback module:api/CalendarsApi~setupV1CalendarsBlockIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalendarBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Calendar Block
     * <p>Use this endpoint to <b>Create</b> a Calendar Block. A valid <b>calendarBlock id</b> is required. Refer to the <i>POST ​/setup​/v1​/calendars​/{id}​/block</i> endpoint for fieldnames and details.</p>
     * @param {String} id id of calendarBlock object
     * @param {Object} opts Optional parameters
     * @param {module:model/CalendarBlockUpdateModel} [calendarBlockUpdateModel] Resource Block input model
     * @param {module:api/CalendarsApi~setupV1CalendarsBlockIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalendarBlockViewModel}
     */
    setupV1CalendarsBlockIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['calendarBlockUpdateModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1CalendarsBlockIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = CalendarBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/calendars/block/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1CalendarsBlocksIdGet operation.
     * @callback module:api/CalendarsApi~setupV1CalendarsBlocksIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalendarBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Calendar Block
     * <p>Use this endpoint to return a <b>Calendar Block</b>. A valid <b>calendarBlock id</b> is required. </p>
     * @param {String} id id of calendarBlock object
     * @param {module:api/CalendarsApi~setupV1CalendarsBlocksIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalendarBlockViewModel}
     */
    setupV1CalendarsBlocksIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1CalendarsBlocksIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CalendarBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/calendars/blocks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1CalendarsGet operation.
     * @callback module:api/CalendarsApi~setupV1CalendarsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleListViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Calendars
     * <p>Use this endpoint to return a <b>List of Calendars</b> from the requested location. If not specified, the business location defaults to the primary business location. </p>
     * @param {Object} opts Optional parameters
     * @param {String} [locationId] id of business location, defaults to primary business location
     * @param {Boolean} [deleted] Filter by deleted status
     * @param {Number} [offset] Starting row of page, default 0
     * @param {Number} [limit] Page limit default 20, max 100
     * @param {module:api/CalendarsApi~setupV1CalendarsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleListViewModel}
     */
    setupV1CalendarsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'locationId': opts['locationId'],
        'deleted': opts['deleted'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleListViewModel;
      return this.apiClient.callApi(
        '/setup/v1/calendars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1CalendarsIdBlockPost operation.
     * @callback module:api/CalendarsApi~setupV1CalendarsIdBlockPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Calendar Block
     * <p>Use this endpoint to <b>Create</b> a Calendar Block. A valid <b>calendar id</b> is required.</p>  <p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>.</p>  <p>Calendar blocks can be set to specific time ranges or for the whole day. Th block a whole day set the startTime to 0 and endTime to 2400.</p>  <p>Calendar blocks can be for a specific date range instance or set to repeat at a specified frequency.</p>  <p>    <b>Repeat object: (repeats = true)</b>  </p>  <p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>  <p>Use the <b>interval</b> property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. <b>If using the repeat functionality an interval value is required</b>.</p>  <p>    <b>DAILY BLOCKS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>  <p>    <b>WEEKLY BLOCKS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b>  is required and should be set to <b>“W”</b>.  You must specify the <b>weekdays</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>. For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.</p>  <p>    <b>MONTHLY BLOCKS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly, <b>monthDay</b> is the day of the month you want blocked.  If monthDay=’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For <b>monthType M</b>, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>  <p>    <b>Repeats will end on the date specified by the end date.</b>  </p>
     * @param {String} id id of calendar object
     * @param {Object} opts Optional parameters
     * @param {module:model/CalendarBlockInputModel} [calendarBlockInputModel] 
     * @param {module:api/CalendarsApi~setupV1CalendarsIdBlockPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceBlockViewModel}
     */
    setupV1CalendarsIdBlockPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['calendarBlockInputModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1CalendarsIdBlockPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ResourceBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/calendars/{id}/block', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1CalendarsIdBlocksGet operation.
     * @callback module:api/CalendarsApi~setupV1CalendarsIdBlocksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalendarBlockListViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Calendar Blocks
     * <p>Use this endpoint to return a <b>List of Calendar Blocks</b> for the requested calendar. A valid <b>calendar id</b> is required. </p>
     * @param {String} id id of calendar to list blocks
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Starting row of page, default 0
     * @param {Number} [limit] Page limit default 20, max 100
     * @param {module:api/CalendarsApi~setupV1CalendarsIdBlocksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalendarBlockListViewModel}
     */
    setupV1CalendarsIdBlocksGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1CalendarsIdBlocksGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CalendarBlockListViewModel;
      return this.apiClient.callApi(
        '/setup/v1/calendars/{id}/blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1CalendarsIdDelete operation.
     * @callback module:api/CalendarsApi~setupV1CalendarsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Calendar
     * <p>Use this endpoint to <b>Delete</b> a calendar object. A valid <b>calendar id</b> is required. The calendar is not permanently deleted and can be recovered by using the <i>PUT ​/setup​/v1​/calendars​/{id}​/recover </i>endpoint.</p>
     * @param {String} id id of calendar object
     * @param {module:api/CalendarsApi~setupV1CalendarsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleViewModel}
     */
    setupV1CalendarsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1CalendarsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleViewModel;
      return this.apiClient.callApi(
        '/setup/v1/calendars/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1CalendarsIdGet operation.
     * @callback module:api/CalendarsApi~setupV1CalendarsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Calendar
     * <p>Use this endpoint to return a <b>Calendar</b> object. A valid <b>calendar id</b> is required.</p>
     * @param {String} id id of calendar object
     * @param {module:api/CalendarsApi~setupV1CalendarsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleViewModel}
     */
    setupV1CalendarsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1CalendarsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleViewModel;
      return this.apiClient.callApi(
        '/setup/v1/calendars/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1CalendarsIdPut operation.
     * @callback module:api/CalendarsApi~setupV1CalendarsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Calendar
     * <p>Use this endpoint to <b>Update</b> a calendar object. A valid <b>calendar id</b> is required. When your company was created a calendar object was automatically created with 24-hour weekly availability. Its <b>name = Main</b>, the <b>type = resource</b> and by default the <b>interval = 30 mins</b>. We are currently supporting resource calendar type. Other types were part of our Legacy Application and has no relevance in the API product.</p>
     * @param {String} id id of calendar object
     * @param {Object} opts Optional parameters
     * @param {module:model/ScheduleUpdateModel} [scheduleUpdateModel] Input model for the calendar object
     * @param {module:api/CalendarsApi~setupV1CalendarsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleViewModel}
     */
    setupV1CalendarsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['scheduleUpdateModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1CalendarsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ScheduleViewModel;
      return this.apiClient.callApi(
        '/setup/v1/calendars/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1CalendarsIdRecoverPut operation.
     * @callback module:api/CalendarsApi~setupV1CalendarsIdRecoverPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recover Calendar
     * <p>Use this endpoint to <b>Recover</b> a previously deleted calendar object. A valid <b>calendar id</b> is required.</p>
     * @param {String} id id of calendar object
     * @param {module:api/CalendarsApi~setupV1CalendarsIdRecoverPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleViewModel}
     */
    setupV1CalendarsIdRecoverPut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1CalendarsIdRecoverPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduleViewModel;
      return this.apiClient.callApi(
        '/setup/v1/calendars/{id}/recover', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1CalendarsIdServicesGet operation.
     * @callback module:api/CalendarsApi~setupV1CalendarsIdServicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceListViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Calendar Services
     * <p>Use this endpoint to return a <b>List of Linked Services</b> of a calendar object. A valid <b>calendar id</b> is required. Find calendar id's by using the <i>GET /setup/v1/calendars</i> endpoint.</p>
     * @param {String} id id of calendar object
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Starting row of page, default 0
     * @param {Number} [limit] Page limit default 20, max 100
     * @param {module:api/CalendarsApi~setupV1CalendarsIdServicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceListViewModel}
     */
    setupV1CalendarsIdServicesGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1CalendarsIdServicesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceListViewModel;
      return this.apiClient.callApi(
        '/setup/v1/calendars/{id}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1CalendarsPost operation.
     * @callback module:api/CalendarsApi~setupV1CalendarsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DEPRECATING: Create
     * <p>    <b>DEPRECATING:</b> Create Calendar</p>  <p>We are no longer supporting Multiple Calendar Functionality as it is part of our Legacy Application and has no relevance in the API.</p>
     * @param {Object} opts Optional parameters
     * @param {module:model/ScheduleInputModel} [scheduleInputModel] 
     * @param {module:api/CalendarsApi~setupV1CalendarsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleViewModel}
     */
    setupV1CalendarsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['scheduleInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ScheduleViewModel;
      return this.apiClient.callApi(
        '/setup/v1/calendars', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
