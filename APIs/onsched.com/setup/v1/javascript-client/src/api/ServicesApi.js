/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AvailabilityInputModel from '../model/AvailabilityInputModel';
import ResourceBlockViewModel from '../model/ResourceBlockViewModel';
import ResourceListViewModel from '../model/ResourceListViewModel';
import ServiceAllocationInputModel from '../model/ServiceAllocationInputModel';
import ServiceAllocationListViewModel from '../model/ServiceAllocationListViewModel';
import ServiceAllocationUpdateModel from '../model/ServiceAllocationUpdateModel';
import ServiceAllocationViewModel from '../model/ServiceAllocationViewModel';
import ServiceAllocationsInputModel from '../model/ServiceAllocationsInputModel';
import ServiceAvailabilityViewModel from '../model/ServiceAvailabilityViewModel';
import ServiceBlockInputModel from '../model/ServiceBlockInputModel';
import ServiceBlockListViewModel from '../model/ServiceBlockListViewModel';
import ServiceBlockUpdateModel from '../model/ServiceBlockUpdateModel';
import ServiceBlockViewModel from '../model/ServiceBlockViewModel';
import ServiceCalendarInputModel from '../model/ServiceCalendarInputModel';
import ServiceCalendarViewModel from '../model/ServiceCalendarViewModel';
import ServiceImageInputModel from '../model/ServiceImageInputModel';
import ServiceInputModel from '../model/ServiceInputModel';
import ServiceListViewModel from '../model/ServiceListViewModel';
import ServiceUpdateModel from '../model/ServiceUpdateModel';
import ServiceViewModel from '../model/ServiceViewModel';

/**
* Services service.
* @module api/ServicesApi
* @version v1
*/
export default class ServicesApi {

    /**
    * Constructs a new ServicesApi. 
    * @alias module:api/ServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the setupV1ServicesAllocationsIdDelete operation.
     * @callback module:api/ServicesApi~setupV1ServicesAllocationsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceAllocationViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Allocation
     * <p>Use this endpoint to permanently <b>Delete</b> a service allocation. A valid <b>serviceAllocation id</b> is required.</p>
     * @param {String} id id of serviceAllocation object
     * @param {module:api/ServicesApi~setupV1ServicesAllocationsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceAllocationViewModel}
     */
    setupV1ServicesAllocationsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesAllocationsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceAllocationViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/allocations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesAllocationsIdGet operation.
     * @callback module:api/ServicesApi~setupV1ServicesAllocationsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceAllocationViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Allocation
     * <p>Use this endpoint to <b>Get a Service Allocation</b>. A valid <b>serviceAllocation id</b> is required.</p>
     * @param {String} id id of serviceAllocation object
     * @param {module:api/ServicesApi~setupV1ServicesAllocationsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceAllocationViewModel}
     */
    setupV1ServicesAllocationsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesAllocationsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceAllocationViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/allocations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesAllocationsIdPut operation.
     * @callback module:api/ServicesApi~setupV1ServicesAllocationsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceAllocationViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Allocation
     * <p>Use this endpoint to <b>Update</b> a service allocation. A valid <b>serviceAllocation id</b> is required. Refer to the <i>POST /setup/v1/services/{id}/allocations</i> endpoint for fields names and details.</p>
     * @param {String} id id of serviceAllocation object
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceAllocationUpdateModel} [serviceAllocationUpdateModel] Service allocation update model
     * @param {module:api/ServicesApi~setupV1ServicesAllocationsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceAllocationViewModel}
     */
    setupV1ServicesAllocationsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['serviceAllocationUpdateModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesAllocationsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ServiceAllocationViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/allocations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesBlockIdDelete operation.
     * @callback module:api/ServicesApi~setupV1ServicesBlockIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Block
     * <p>Use this endpoint to permanently <b>Delete</b> a Service Block. A valid <b>serviceBlock id</b> is required.</p>
     * @param {String} id id of serviceBlock object
     * @param {module:api/ServicesApi~setupV1ServicesBlockIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceBlockViewModel}
     */
    setupV1ServicesBlockIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesBlockIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/block/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesBlockIdPut operation.
     * @callback module:api/ServicesApi~setupV1ServicesBlockIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Block
     * <p>Use this endpoint to <b>Update</b> a Service Block. A valid <b>serviceBlock id</b> is required.</p>
     * @param {String} id id of serviceBlock object
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceBlockUpdateModel} [serviceBlockUpdateModel] Service Block update model
     * @param {module:api/ServicesApi~setupV1ServicesBlockIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceBlockViewModel}
     */
    setupV1ServicesBlockIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['serviceBlockUpdateModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesBlockIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ServiceBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/block/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesBlocksIdGet operation.
     * @callback module:api/ServicesApi~setupV1ServicesBlocksIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Block
     * <p>Use this endpoint to <b>Get a Service Block</b>. A valid <b>serviceBlock id</b> is required.</p>
     * @param {String} id id of serviceBlock object
     * @param {module:api/ServicesApi~setupV1ServicesBlocksIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceBlockViewModel}
     */
    setupV1ServicesBlocksIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesBlocksIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/blocks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesCalendarIdDelete operation.
     * @callback module:api/ServicesApi~setupV1ServicesCalendarIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceCalendarViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Service Links
     * <p>Use this endpoint to <b>Delete</b> service links from the calendar specified. A valid <b>calendar id</b> is required.</p>
     * @param {String} id id of calender to delete service links from
     * @param {module:api/ServicesApi~setupV1ServicesCalendarIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceCalendarViewModel}
     */
    setupV1ServicesCalendarIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesCalendarIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceCalendarViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/calendar/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesCalendarPost operation.
     * @callback module:api/ServicesApi~setupV1ServicesCalendarPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceCalendarViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link Service to Calendar
     * <p>Use this endpoint to <b>Link a Service</b> to a calendar. </p>
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceCalendarInputModel} [serviceCalendarInputModel] 
     * @param {module:api/ServicesApi~setupV1ServicesCalendarPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceCalendarViewModel}
     */
    setupV1ServicesCalendarPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['serviceCalendarInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ServiceCalendarViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/calendar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesGet operation.
     * @callback module:api/ServicesApi~setupV1ServicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceListViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Services
     * <p>Use this endpoint to return a <b>List of Service</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [locationId] id of business location, defaults to primary business location
     * @param {Number} [serviceGroupId] Filter services by groupId
     * @param {Boolean} [deleted] Filter by deleted status
     * @param {Number} [offset] Starting row of page, default 0
     * @param {Number} [limit] Page limit default 20, max 100
     * @param {module:api/ServicesApi~setupV1ServicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceListViewModel}
     */
    setupV1ServicesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'locationId': opts['locationId'],
        'serviceGroupId': opts['serviceGroupId'],
        'deleted': opts['deleted'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceListViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdAllocationsBulkPost operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdAllocationsBulkPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServiceAllocationViewModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Allocations Bulk
     * <p>Use this endpoint to <b>Create</b> bulk service allocations. A valid <b>service id</b> is required. Use this endpoint only if you need to POST multiple service allocations in one transaction. For details refer to: <a href=\"POST ​/setup​/v1​/services​/{id}​/allocations\">Post Service Allocation</a></p>
     * @param {String} id id of service object
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceAllocationsInputModel} [serviceAllocationsInputModel] 
     * @param {module:api/ServicesApi~setupV1ServicesIdAllocationsBulkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServiceAllocationViewModel>}
     */
    setupV1ServicesIdAllocationsBulkPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['serviceAllocationsInputModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdAllocationsBulkPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = [ServiceAllocationViewModel];
      return this.apiClient.callApi(
        '/setup/v1/services/{id}/allocations/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdAllocationsGet operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdAllocationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceAllocationListViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Service Allocations
     * <p>Use this endpoint to return a <b>List of Service Allocations</b> for a specified service. A valid <b>service id</b> is required. Service allocations are used for <b>Event type services only</b> where the events are offered on specific dates and times. Retrieve all allocations for a location by passing in 0 as the service id.</p>  <p>The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
     * @param {String} id id of  service to list allocations for, 0 for all
     * @param {Object} opts Optional parameters
     * @param {String} [locationId] The id of the location. Defaults to the primary location
     * @param {String} [resourceId] The id of the resource to filter on
     * @param {Date} [startDate] Format YYYY-MM-DD. Filter appointments by on/after startDate
     * @param {Date} [endDate] Format YYYY-MM-DD. Filter appointments on/before endDate
     * @param {Number} [offset] Starting row of page, default 0
     * @param {Number} [limit] Page limit default 20, max 100
     * @param {module:api/ServicesApi~setupV1ServicesIdAllocationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceAllocationListViewModel}
     */
    setupV1ServicesIdAllocationsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdAllocationsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'locationId': opts['locationId'],
        'resourceId': opts['resourceId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceAllocationListViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}/allocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdAllocationsPost operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdAllocationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceAllocationViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Allocation
     * <p>Use this endpoint to <b>Create</b> a service allocation for a service. A valid <b>service id</b> is required. Service allocations are used for <b>Event type services only</b>. Service allocations allow you to specify the time(s) a service is available as opposed to using weekly availability which represents a weekly schedule, ie: Mon-Fri 9am-5pm.</p>  <p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>. Service allocations can be set to specific time ranges or for the whole day by setting startTime=0 and endTime=2400. Service allocations can repeat for a specific date range instance or set to repeat at a specified frequency.</p>  <p>    <b>Repeat object: (repeats = true)</b>  </p>  <p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>  <p>Use the <b>interval</b> property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  <b>If using the repeat functionality an interval value is required</b>.</p>  <p>    <b>DAILY ALLOCATIONS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>  <p>    <b>WEEKLY ALLOCATIONS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b> is required and should be set to <b>“W”</b>. You must specify the <b>“weekdays”</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.</p>  <p>    <b>MONTHLY ALLOCATIONS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly. <b>monthDay</b> is the day of the month you want allocated.  If monthDay=’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For <b>monthType M</b>, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>  <p>    <b>Repeats will end on the date specified by the end date.</b>  </p>
     * @param {String} id id of service object
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceAllocationInputModel} [serviceAllocationInputModel] 
     * @param {module:api/ServicesApi~setupV1ServicesIdAllocationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceAllocationViewModel}
     */
    setupV1ServicesIdAllocationsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['serviceAllocationInputModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdAllocationsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ServiceAllocationViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}/allocations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdAvailabilityGet operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdAvailabilityGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceAvailabilityViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Weekly Availability
     * <p>Use this endpoint to return the <b>Weekly Service Availability</b> for an appointment service. A valid <b>service id</b> is required. Weekly availability is returned for services where the Type = 1. For event type services, where service Type = 2, refer to the <i>GET ​/setup​/v1​/services​/{id}​/allocations</i> endpoint.</p>
     * @param {String} id id of service object
     * @param {module:api/ServicesApi~setupV1ServicesIdAvailabilityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceAvailabilityViewModel}
     */
    setupV1ServicesIdAvailabilityGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdAvailabilityGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceAvailabilityViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}/availability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdAvailabilityPut operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdAvailabilityPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceAvailabilityViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Weekly Availability
     * <p>Use this endpoint to <b>Update</b> service weekly availability. A valid <b>service id</b> is required. The availability day entries are created when a service object is created.</p>  <p>To update weekly availability hours, all days of the week must be provided. Days are defined as <b>sun, mon, tue, wed, thu, fri</b> and <b>sat</b>. The <b>startTime</b> and <b>endTime</b> fields are entered in <b>military format. e.g., 800 is 8:00am, 2230 is 10:30pm</b>. We support 24-hour availability, set startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0.</p>  <p>If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the business location.</p>
     * @param {String} id id of service object
     * @param {Object} opts Optional parameters
     * @param {module:model/AvailabilityInputModel} [availabilityInputModel] Service Availability Input Model
     * @param {module:api/ServicesApi~setupV1ServicesIdAvailabilityPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceAvailabilityViewModel}
     */
    setupV1ServicesIdAvailabilityPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['availabilityInputModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdAvailabilityPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ServiceAvailabilityViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}/availability', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdBlockPost operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdBlockPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Block
     * <p>Use this endpoint to <b>Create</b> a Service Block. A valid <b>service id</b> is required.</p>  <p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>.</p>  <p>Service blocks can be set to specific time ranges or for the whole day. To block a whole day set startTime to 0 and endTime to 2400.</p>  <p>Service blocks can be for a specific date range instance or set to repeat at a specified frequency. </p>  <p>    <b>Repeat object: (repeats = true)</b>  </p>  <p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>  <p>Use the <b>interval</b> property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. <b>If using the repeat functionality an interval value is required</b>.</p>  <p>    <b>DAILY BLOCKS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>  <p>    <b>WEEKLY BLOCKS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b> is required and should be set to <b>“W”</b>.  You must specify the <b>weekdays</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>. For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.</p>  <p>    <b>MONTHLY BLOCKS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly, <b>monthDay</b> is the day of the month you want blocked.  If monthDay=’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For <b>monthType M</b>, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>  <p>    <b>Repeats will end on the date specified by the end date.</b>  </p>
     * @param {String} id id of service object
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceBlockInputModel} [serviceBlockInputModel] 
     * @param {module:api/ServicesApi~setupV1ServicesIdBlockPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceBlockViewModel}
     */
    setupV1ServicesIdBlockPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['serviceBlockInputModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdBlockPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ServiceBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}/block', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdBlocksGet operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdBlocksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceBlockListViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Service Blocks
     * <p>Use this endpoint to return a list of <b>Service Blocks</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
     * @param {String} id id of service to list blocks for
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Format YYYY-MM-DD. Filter blocks on/after startDate
     * @param {Date} [endDate] Format YYYY-MM-DD. Filter on/before endDate
     * @param {Number} [offset] Starting row of page, default 0
     * @param {Number} [limit] Page limit default 20, max 100
     * @param {module:api/ServicesApi~setupV1ServicesIdBlocksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceBlockListViewModel}
     */
    setupV1ServicesIdBlocksGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdBlocksGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceBlockListViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}/blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdCalendarGet operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdCalendarGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceCalendarViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Linked Calendar
     * <p>Use this endpoint to <b>Get the Linked Calendar</b> for the service requested. A valid <b>service id</b> is required. A service can only be linked to one calendar in a location.</p>
     * @param {String} id id of service object
     * @param {Object} opts Optional parameters
     * @param {String} [locationId] id of business location, defaults to primary business location
     * @param {module:api/ServicesApi~setupV1ServicesIdCalendarGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceCalendarViewModel}
     */
    setupV1ServicesIdCalendarGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdCalendarGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'locationId': opts['locationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceCalendarViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}/calendar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdDelete operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Service
     * <p>Use this endpoint to <b>Delete</b> a service object. A valid <b>service id</b> is required. The service is not permanently deleted and can be recovered by using the <i>PUT /setup​/v1​/services​/{id}​/recover</i> endpoint.</p>
     * @param {String} id id of service object
     * @param {module:api/ServicesApi~setupV1ServicesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceViewModel}
     */
    setupV1ServicesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdDeleteimageDelete operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdDeleteimageDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Service Image
     * <p>Use this endpoint to permanently <b>Delete</b> a previously uploaded service image. A valid <b>service id</b> is required.</p>
     * @param {String} id id of service object
     * @param {module:api/ServicesApi~setupV1ServicesIdDeleteimageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceViewModel}
     */
    setupV1ServicesIdDeleteimageDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdDeleteimageDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}/deleteimage', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdGet operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Service
     * <p>Use this endpoint to return a <b>Service</b> object. A valid <b>service id</b> is required. Find service id's by using the <i>GET /setup/v1/services</i> endpoint.</p>
     * @param {Number} id id of service object
     * @param {module:api/ServicesApi~setupV1ServicesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceViewModel}
     */
    setupV1ServicesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdPut operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Service
     * <p>Use this endpoint to <b>Update</b> a service object. A valid <b>service id</b> is required.</p>
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceUpdateModel} [serviceUpdateModel] 
     * @param {module:api/ServicesApi~setupV1ServicesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceViewModel}
     */
    setupV1ServicesIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['serviceUpdateModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ServiceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdRecoverPut operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdRecoverPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recover Service
     * <p>Use this endpoint to <b>Recover</b> a deleted service object. A valid <b>service id</b> is required.</p>
     * @param {String} id 
     * @param {module:api/ServicesApi~setupV1ServicesIdRecoverPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceViewModel}
     */
    setupV1ServicesIdRecoverPut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdRecoverPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}/recover', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdResourcesGet operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdResourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceListViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Resources for Service
     * <p>Use this endpoint to return a list of <b>Resources</b> that provide the requested service. A valid <b>service id</b> is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
     * @param {String} id id of service object
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Starting row of page, default 0
     * @param {Number} [limit] Page limit default 20, max 100
     * @param {String} [googleAuthReturnUrl] Google calendar authorization return url
     * @param {String} [outlookAuthReturnUrl] Outlook calendar authorization return url
     * @param {module:api/ServicesApi~setupV1ServicesIdResourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceListViewModel}
     */
    setupV1ServicesIdResourcesGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdResourcesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'googleAuthReturnUrl': opts['googleAuthReturnUrl'],
        'outlookAuthReturnUrl': opts['outlookAuthReturnUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceListViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesIdUploadimagePost operation.
     * @callback module:api/ServicesApi~setupV1ServicesIdUploadimagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Service Image
     * <p>Use this endpoint to <b>Upload</b> an image to the service. A valid <b>service id</b> is required. You must convert the image to a <b>base64 encoded string</b> and pass that string as input along with your <b>filename</b>.</p>
     * @param {String} id id of service object
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceImageInputModel} [serviceImageInputModel] Input model for image upload
     * @param {module:api/ServicesApi~setupV1ServicesIdUploadimagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceViewModel}
     */
    setupV1ServicesIdUploadimagePost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['serviceImageInputModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ServicesIdUploadimagePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ServiceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services/{id}/uploadimage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ServicesPost operation.
     * @callback module:api/ServicesApi~setupV1ServicesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Service
     * <p>Use this endpoint to <b>Create</b> a new service. If not specified, the business location defaults to the primary business location. Note: Posting a service to the Primary Business Location will scope as company scoped and make the service available to all locations. If you want a service to only be available from a specific location, include the business location id.</p>  <p>Required fields: <b>Name</b> and <b>Duration</b></p>  <p>The service <b>Type</b> is either, <b>1 = Appointment</b> or <b>2 = Event</b>. Default is 1 if not specified.</p>  <p>For type = 1, Appointments - Create an availability entry for each weekday to provide the service for. <b>All days of the week must be provided when adding service availability.</b> Days are defined as <b>sun, mon, tue, wed, thu, fri</b> and <b>sat</b>. Start and End Times are entered in military format. e.g., 800 is 8:00am, 2230 is 10:30pm. If not provided, it defaults to the primary location business hours.</p>  <p>We support 24-hour availability, set startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0. If you require times in between specified hours to be unavailable, use the service block endpoint at: <i>POST ​/setup​/v1​/services​/{id}​/block</i>.</p>  <p>For type = 2, Events - Create service allocations for their availability. Refer to the: <i>POST /setup​/v1​/services​/{id}​/allocations</i> to set up service allocations for the event.</p>  <p>Options are available for customer selected durations, for details: <a href=\"https://docs.onsched.com/docs/services-overview#variable-duration\">Variable Duration Overview</a></p>  <p>Additional parameters include but are not limited to bookingLimit, maxCapacity and maxGroupSize. For details: <a href=\"https://docs.onsched.com/docs/service-max-capacity\">Service Limits Overview</a></p>
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceInputModel} [serviceInputModel] 
     * @param {module:api/ServicesApi~setupV1ServicesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceViewModel}
     */
    setupV1ServicesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['serviceInputModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ServiceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
