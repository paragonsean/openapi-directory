/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppointmentViewModel from '../model/AppointmentViewModel';
import AvailabilityInputModel from '../model/AvailabilityInputModel';
import CalendarAuthViewModel from '../model/CalendarAuthViewModel';
import ResourceAllocationInputModel from '../model/ResourceAllocationInputModel';
import ResourceAllocationListViewModel from '../model/ResourceAllocationListViewModel';
import ResourceAllocationUpdateModel from '../model/ResourceAllocationUpdateModel';
import ResourceAllocationViewModel from '../model/ResourceAllocationViewModel';
import ResourceAvailabilityViewModel from '../model/ResourceAvailabilityViewModel';
import ResourceBlockInputModel from '../model/ResourceBlockInputModel';
import ResourceBlockListViewModel from '../model/ResourceBlockListViewModel';
import ResourceBlockUpdateModel from '../model/ResourceBlockUpdateModel';
import ResourceBlockViewModel from '../model/ResourceBlockViewModel';
import ResourceImageInputModel from '../model/ResourceImageInputModel';
import ResourceInputModel from '../model/ResourceInputModel';
import ResourceListViewModel from '../model/ResourceListViewModel';
import ResourceUpdateModel from '../model/ResourceUpdateModel';
import ResourceViewModel from '../model/ResourceViewModel';
import ResourcesInputModel from '../model/ResourcesInputModel';
import ResourcesUpdateModel from '../model/ResourcesUpdateModel';
import SystemTimezoneViewModel from '../model/SystemTimezoneViewModel';

/**
* Resources service.
* @module api/ResourcesApi
* @version v1
*/
export default class ResourcesApi {

    /**
    * Constructs a new ResourcesApi. 
    * @alias module:api/ResourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the setupV1ResourcesAllocationsIdDelete operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesAllocationsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Allocation
     * <p>Use this endpoint to <b>Delete</b> a Resource Allocation. A valid <b>resourceAllocation id</b> is required.</p>
     * @param {String} id id of resourceAllocation object
     * @param {module:api/ResourcesApi~setupV1ResourcesAllocationsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceBlockViewModel}
     */
    setupV1ResourcesAllocationsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesAllocationsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/allocations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesAllocationsIdGet operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesAllocationsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceAllocationViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Allocation
     * <p>Use this endpoint to return a <b>Resource Allocation</b>. A valid <b>resourceAllocation id</b> is required. </p>
     * @param {String} id id of resourceAllocation object
     * @param {module:api/ResourcesApi~setupV1ResourcesAllocationsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceAllocationViewModel}
     */
    setupV1ResourcesAllocationsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesAllocationsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceAllocationViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/allocations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesAllocationsIdPut operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesAllocationsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Allocation
     * <p>Use this endpoint to <b>Update</b> a resource allocation. A valid <b>resourceAllocation id</b> is required. Refer to the <i>POST /setup/v1/resources/{id}/allocations</i> endpoint for details.</p>
     * @param {String} id id of resourceAllocation object
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceAllocationUpdateModel} [resourceAllocationUpdateModel] Resource allocation update model
     * @param {module:api/ResourcesApi~setupV1ResourcesAllocationsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceBlockViewModel}
     */
    setupV1ResourcesAllocationsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['resourceAllocationUpdateModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesAllocationsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ResourceBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/allocations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesBlockIdDelete operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesBlockIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Block
     * <p>Use this endpoint to <b>Delete</b> a Resource Block. A valid <b>resourceBlock id</b> is required.</p>
     * @param {String} id id of resourceBlock object
     * @param {module:api/ResourcesApi~setupV1ResourcesBlockIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceBlockViewModel}
     */
    setupV1ResourcesBlockIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesBlockIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/block/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesBlockIdPut operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesBlockIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Block
     * <p>Use this endpoint to <b>Update</b> a Resource Block. A valid <b>resourceBlock id</b> is required. Refer to the <i>POST ​/setup​/v1​/resources​/{id}​/block</i> endpoint for fieldnames and details.</p>
     * @param {String} id id of resourceBlock object
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceBlockUpdateModel} [resourceBlockUpdateModel] Resource Block update model
     * @param {module:api/ResourcesApi~setupV1ResourcesBlockIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceBlockViewModel}
     */
    setupV1ResourcesBlockIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['resourceBlockUpdateModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesBlockIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ResourceBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/block/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesBlocksIdGet operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesBlocksIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Block
     * <p>Use this endpoint to <b>Get</b> a Resource Block. A valid <b>resourceBlock id</b> is required.</p>
     * @param {String} id id of resourceBlock object
     * @param {module:api/ResourcesApi~setupV1ResourcesBlocksIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceBlockViewModel}
     */
    setupV1ResourcesBlocksIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesBlocksIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/blocks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesBulkPost operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesBulkPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResourceViewModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Resources Bulk
     * <p>Use this endpoint to <b>Bulk Create</b> resources. Valid <b>resource ids</b> are required. The posted list of resources cannot exceed 100 resource objects per transaction for performance purposes.</p>  <p>Required Fields: <b>Email Address</b> and <b>Name</b></p>  <p>Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the <i>POST ​/setup​/v1​/resources​/{id}​/services</i> endpoint for details about explicitly linking services.</p>  <p>Set the resource availability type by using the <b>recurringAvailability</b> flag. Set recurringAvailability to <b>True</b> for <b>Weekly Availability</b> or <b>False</b> for <b>Resource Allocations</b>.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [googleAuthReturnUrl] Google calendar authorization return url
     * @param {String} [outlookAuthReturnUrl] Outlook calendar authorization return url
     * @param {module:model/ResourcesInputModel} [resourcesInputModel] Resources input model
     * @param {module:api/ResourcesApi~setupV1ResourcesBulkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResourceViewModel>}
     */
    setupV1ResourcesBulkPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['resourcesInputModel'];

      let pathParams = {
      };
      let queryParams = {
        'googleAuthReturnUrl': opts['googleAuthReturnUrl'],
        'outlookAuthReturnUrl': opts['outlookAuthReturnUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = [ResourceViewModel];
      return this.apiClient.callApi(
        '/setup/v1/resources/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesBulkPut operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesBulkPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResourceViewModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Resources Bulk
     * <p>Use this endpoint to <b>Bulk Update</b> resources. Valid <b>resource id's</b> are required. The list of resources cannot exceed 100 resource objects per transaction for performance purposes.</p>  <p>Required Fields: <b>Email Address</b> and <b>Name</b></p>  <p>Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the <i>POST ​/setup​/v1​/resources​/{id}​/services</i> endpoint for details about explicitly linking services.</p>  <p>Set the resource availability type by using the <b>recurringAvailability</b> flag. Set recurringAvailability to <b>True</b> for <b>Weekly Availability</b> or <b>False</b> for <b>Resource Allocations</b>.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [googleAuthReturnUrl] Google calendar authorization return url
     * @param {String} [outlookAuthReturnUrl] Outlook calendar authorization return url
     * @param {module:model/ResourcesUpdateModel} [resourcesUpdateModel] Resources update model
     * @param {module:api/ResourcesApi~setupV1ResourcesBulkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResourceViewModel>}
     */
    setupV1ResourcesBulkPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['resourcesUpdateModel'];

      let pathParams = {
      };
      let queryParams = {
        'googleAuthReturnUrl': opts['googleAuthReturnUrl'],
        'outlookAuthReturnUrl': opts['outlookAuthReturnUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = [ResourceViewModel];
      return this.apiClient.callApi(
        '/setup/v1/resources/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesGet operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceListViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Resources
     * <p>Use this endpoint to return a <b>List of Resources</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [locationId] id of business location, defaults to primary business location
     * @param {String} [resourceGroupId] Filter by group Id
     * @param {String} [email] Filter by email address
     * @param {String} [name] Search by name
     * @param {Boolean} [deleted] Show by deleted status, default is false
     * @param {String} [googleAuthReturnUrl] Google calendar authorization return url
     * @param {String} [outlookAuthReturnUrl] Outlook calendar authorization return url
     * @param {Number} [offset] Starting row of page, default 0
     * @param {Number} [limit] Page limit default 20, max is 100
     * @param {module:api/ResourcesApi~setupV1ResourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceListViewModel}
     */
    setupV1ResourcesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'locationId': opts['locationId'],
        'resourceGroupId': opts['resourceGroupId'],
        'email': opts['email'],
        'name': opts['name'],
        'deleted': opts['deleted'],
        'googleAuthReturnUrl': opts['googleAuthReturnUrl'],
        'outlookAuthReturnUrl': opts['outlookAuthReturnUrl'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceListViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdAllocationsGet operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdAllocationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceAllocationListViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Resource Allocations
     * <p>Use this endpoint to return a list of <b>Resource Allocations</b> for a specified resource. We recommend using allocations if a resource's schedule changes frequently from day to day or week to week. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
     * @param {String} id id of resource to list allocations for
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] yyyy-mm-dd, filter allocations on/after startDate
     * @param {Date} [endDate] yyyy-mm-dd, filter on/before endDate
     * @param {Number} [offset] Starting row of page, default 0
     * @param {Number} [limit] Page limit default 20, max 100
     * @param {module:api/ResourcesApi~setupV1ResourcesIdAllocationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceAllocationListViewModel}
     */
    setupV1ResourcesIdAllocationsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdAllocationsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceAllocationListViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/allocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdAllocationsPost operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdAllocationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Allocation
     * <p>Use this endpoint to <b>Create</b> a resource allocation for a resource. A valid <b>resource id</b> is required.</p>  <p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>. Resource allocations can be set to specific time ranges or for the whole day by setting startTime=0 and endTime=2400. They can repeat for a specific date range instance or set to repeat at a specified frequency.</p>  <p>    <b>Repeat object: (repeats = true)</b>  </p>  <p>The <b>frequency</b> can be set to a value of <b>D, W or M </b>for <b>Day, Week</b> or <b>Month</b> respectively.</p>  <p>Use the <b>interval</b> property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  <b>If using the repeat functionality an interval value is required</b>.</p>  <p>    <b>DAILY ALLOCATIONS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>  <p>    <b>WEEKLY ALLOCATIONS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b> is required and should be set to <b>“W”</b>. You must specify the <b>“weekdays”</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.</p>  <p>    <b>MONTHLY ALLOCATIONS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly. <b>monthDay</b> is the day of the month you want allocated.  If monthDay=’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For <b>monthType M</b>, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>  <p>    <b>Repeats will end on the date specified by the end date.</b>  </p>
     * @param {String} id id of resource object
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceAllocationInputModel} [resourceAllocationInputModel] 
     * @param {module:api/ResourcesApi~setupV1ResourcesIdAllocationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceBlockViewModel}
     */
    setupV1ResourcesIdAllocationsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['resourceAllocationInputModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdAllocationsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ResourceBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/allocations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdAvailabilityGet operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdAvailabilityGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceAvailabilityViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Weekly Availability
     * <p>Use this endpoint to view the <b>Weekly Availability</b> for a resource. The displayed available times are represented in the resource's timezone. The resource timezone can be set to any world timezone. If not provided, by default it is set to the Business timezone.</p>
     * @param {String} id id of resource object
     * @param {module:api/ResourcesApi~setupV1ResourcesIdAvailabilityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceAvailabilityViewModel}
     */
    setupV1ResourcesIdAvailabilityGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdAvailabilityGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceAvailabilityViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/availability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdAvailabilityPut operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdAvailabilityPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceAvailabilityViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Weekly Availability
     * <p>Use this endpoint to <b>Update</b> resource weekly availability. A valid <b>resource id</b> is required. The availability day entries are created when a resource object is created.</p>  <p>To update weekly availability hours, all days of the week must be provided. Days are defined as <b>sun, mon, tue, wed, thu, fri</b> and <b>sat</b>. The <b>startTime</b> and <b>endTime</b> fields are entered in <b>military format. e.g., 800 is 8:00am, 2230 is 10:30pm</b>. We support 24-hour availability, set startTime=0 and endTime=2400. To set a whole day as unavailable, set both the startTime and endTime to 0.</p>  <p>If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the resource. Resources can be set to any world timezone. </p>
     * @param {String} id id of resource object
     * @param {Object} opts Optional parameters
     * @param {module:model/AvailabilityInputModel} [availabilityInputModel] Resource Availability Input Model
     * @param {module:api/ResourcesApi~setupV1ResourcesIdAvailabilityPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceAvailabilityViewModel}
     */
    setupV1ResourcesIdAvailabilityPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['availabilityInputModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdAvailabilityPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ResourceAvailabilityViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/availability', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdBlockPost operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdBlockPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceBlockViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Block
     * <p>Use this endpoint to <b>Create</b> a Resource Block. A valid <b>resource id</b> is required.</p>  <p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>.</p>  <p>Resource blocks can be set to specific time ranges or for the whole day. Use the <b>AllDay</b> setting to create an all-day block. <b>AllDay</b> will automatically set startTime to 0 and endTime to 2400.</p>  <p>Resource blocks can be for a specific date range instance or set to repeat at a specified frequency. </p>  <p>    <b>Repeat object: (repeats = true)</b>  </p>  <p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>  <p>Use the <b>interval</b> property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. <b>If using the repeat functionality an interval value is required</b>.</p>  <p>    <b>DAILY BLOCKS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>  <p>    <b>WEEKLY BLOCKS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b> is required and should be set to <b>“W”</b>.  You must specify the <b>weekdays</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>. For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.</p>  <p>    <b>MONTHLY BLOCKS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly, <b>monthDay</b> is the day of the month you want blocked.  If monthDay=’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For <b>monthType M</b>, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”. </p>  <p>    <b>Repeats will end on the date specified by the end date.</b>  </p>
     * @param {String} id id of resource object
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceBlockInputModel} [resourceBlockInputModel] 
     * @param {module:api/ResourcesApi~setupV1ResourcesIdBlockPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceBlockViewModel}
     */
    setupV1ResourcesIdBlockPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['resourceBlockInputModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdBlockPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ResourceBlockViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/block', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdBlocksGet operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdBlocksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceBlockListViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Resource Blocks
     * <p>Use this endpoint to return a list of <b>Resource Blocks</b>. A valid <b>resource id</b> is required. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
     * @param {String} id id of resource to list blocks for
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] YYYY-MM-DD, filter blocks on/after startDate
     * @param {Date} [endDate] YYYY-MM-DD, filter on/before endDate
     * @param {Number} [offset] Starting row of page, default 0
     * @param {Number} [limit] Page limit default 20, max 100
     * @param {module:api/ResourcesApi~setupV1ResourcesIdBlocksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceBlockListViewModel}
     */
    setupV1ResourcesIdBlocksGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdBlocksGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceBlockListViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGet operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalendarAuthViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Resource Google URL
     * <p>Use this endpoint to return the <b>Resources Google Calendar Authorization URL</b>. A valid <b>resource id</b> and <b>Google Email Address</b> are required.</p>
     * @param {String} id id of resource object
     * @param {String} googleEmailAddress Email address of Google Calendar
     * @param {Object} opts Optional parameters
     * @param {String} [googleAuthReturnUrl] Google calendar authorization return url
     * @param {module:api/ResourcesApi~setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalendarAuthViewModel}
     */
    setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGet(id, googleEmailAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGet");
      }
      // verify the required parameter 'googleEmailAddress' is set
      if (googleEmailAddress === undefined || googleEmailAddress === null) {
        throw new Error("Missing the required parameter 'googleEmailAddress' when calling setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGet");
      }

      let pathParams = {
        'id': id,
        'googleEmailAddress': googleEmailAddress
      };
      let queryParams = {
        'googleAuthReturnUrl': opts['googleAuthReturnUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CalendarAuthViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/calendar/auth/google/{googleEmailAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGet operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalendarAuthViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Resource Outlook URL
     * <p>Use this endpoint to return the <b>Resources Outlook Calendar Authorization URL</b>. A valid <b>resource id</b> and <b>Outlook Email Address</b> are required.</p>
     * @param {String} id id of resource object
     * @param {String} outlookEmailAddress Email address of Outlook Calendar
     * @param {Object} opts Optional parameters
     * @param {String} [outlookAuthReturnUrl] Outlook calendar authorization return url
     * @param {module:api/ResourcesApi~setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalendarAuthViewModel}
     */
    setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGet(id, outlookEmailAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGet");
      }
      // verify the required parameter 'outlookEmailAddress' is set
      if (outlookEmailAddress === undefined || outlookEmailAddress === null) {
        throw new Error("Missing the required parameter 'outlookEmailAddress' when calling setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGet");
      }

      let pathParams = {
        'id': id,
        'outlookEmailAddress': outlookEmailAddress
      };
      let queryParams = {
        'outlookAuthReturnUrl': opts['outlookAuthReturnUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CalendarAuthViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/calendar/auth/outlook/{outlookEmailAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdDelete operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Resource
     * <p>Use this endpoint to <b>Delete</b> a resource. The resource is not permanently deleted and can be recovered. A valid <b>resource id</b> is required.</p>
     * @param {String} id id of resource object
     * @param {module:api/ResourcesApi~setupV1ResourcesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceViewModel}
     */
    setupV1ResourcesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdDeleteimageDelete operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdDeleteimageDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Resource Image
     * <p>Use this endpoint to permanently <b>Delete</b> a previously uploaded resource image. A valid <b>resource id</b> is required.</p>
     * @param {String} id id of resource object
     * @param {module:api/ResourcesApi~setupV1ResourcesIdDeleteimageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceViewModel}
     */
    setupV1ResourcesIdDeleteimageDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdDeleteimageDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/deleteimage', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdGet operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Resource
     * <p>Use this endpoint to return a <b>Resource</b> object. A valid <b>resource id</b> is required. Find resource id's by using the: <i>GET /setup/v1/resources</i> endpoint.</p>
     * @param {String} id id of resource object
     * @param {Object} opts Optional parameters
     * @param {String} [googleAuthReturnUrl] Google calendar authorization return url
     * @param {String} [outlookAuthReturnUrl] Outlook calendar authorization return url
     * @param {module:api/ResourcesApi~setupV1ResourcesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceViewModel}
     */
    setupV1ResourcesIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'googleAuthReturnUrl': opts['googleAuthReturnUrl'],
        'outlookAuthReturnUrl': opts['outlookAuthReturnUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdPut operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Resource
     * <p>Use this endpoint to <b>Update</b> a resource. A valid <b>resource id</b> is required.</p>  <p>Required Fields: <b>Email Address</b> and <b>Name</b></p>  <p>Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the <i>POST ​/setup​/v1​/resources​/{id}​/services</i> endpoint for details about explicitly linking services.</p>  <p>Set the resource availability type by using the <b>recurringAvailability</b> flag. Set recurringAvailability to <b>True</b> for <b>Weekly Availability</b> or <b>False</b> for <b>Resource Allocations</b>.</p>
     * @param {String} id id of resource object
     * @param {Object} opts Optional parameters
     * @param {String} [googleAuthReturnUrl] Google calendar authorization return url
     * @param {String} [outlookAuthReturnUrl] Outlook calendar authorization return url
     * @param {module:model/ResourceUpdateModel} [resourceUpdateModel] Resource Update Model
     * @param {module:api/ResourcesApi~setupV1ResourcesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceViewModel}
     */
    setupV1ResourcesIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['resourceUpdateModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'googleAuthReturnUrl': opts['googleAuthReturnUrl'],
        'outlookAuthReturnUrl': opts['outlookAuthReturnUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ResourceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdReassignAppointmentsResourceIdPut operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdReassignAppointmentsResourceIdPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppointmentViewModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reassign Resource
     * <p>Use this endpoint to <b>Reassign</b> appointments from one resource to another. If the startDate is not supplied, the default is today's date + 1 day; If the endDate is not supplied, all future appointments from the start date will be reassigned. If the calendar id is not supplied the default is the primary calendar of the location.</p>
     * @param {String} id id of the original resource
     * @param {String} resourceId id of the target resource
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] YYYY-MM-DD, Appt range start date
     * @param {Date} [endDate] YYYY-MM-DD, Appt range end date
     * @param {String} [calendarId] CalendarId of calendar containing appointments
     * @param {module:api/ResourcesApi~setupV1ResourcesIdReassignAppointmentsResourceIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppointmentViewModel>}
     */
    setupV1ResourcesIdReassignAppointmentsResourceIdPut(id, resourceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdReassignAppointmentsResourceIdPut");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling setupV1ResourcesIdReassignAppointmentsResourceIdPut");
      }

      let pathParams = {
        'id': id,
        'resourceId': resourceId
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'calendarId': opts['calendarId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppointmentViewModel];
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/reassign/appointments/{resourceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdRecoverPut operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdRecoverPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recover Resource
     * <p>Use this endpoint to <b>Recover</b> a deleted resource. A valid <b>resource id</b> is required.</p>
     * @param {String} id id of resource object
     * @param {Object} opts Optional parameters
     * @param {String} [googleAuthReturnUrl] Google calendar authorization return url
     * @param {String} [outlookAuthReturnUrl] Outlook calendar authorization return url
     * @param {module:api/ResourcesApi~setupV1ResourcesIdRecoverPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceViewModel}
     */
    setupV1ResourcesIdRecoverPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdRecoverPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'googleAuthReturnUrl': opts['googleAuthReturnUrl'],
        'outlookAuthReturnUrl': opts['outlookAuthReturnUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/recover', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdServicesDelete operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdServicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Linked Services
     * <p>Use this endpoint to <b>Delete</b> linked services from a Resource, i.e. unlink the services. A valid <b>resource id</b> is required. Once deleted, all services become available to the resource.</p>
     * @param {String} id id of resource object
     * @param {module:api/ResourcesApi~setupV1ResourcesIdServicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceViewModel}
     */
    setupV1ResourcesIdServicesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdServicesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/services', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdServicesPost operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdServicesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Linked Services
     * <p>Use this endpoint to explicitly <b>Link Services</b> to a Resource. A valid <b>resource id</b> is required.</p>  <p>    <b>Note:</b> By default, the services array is empty which signifies that all services are provided by the resource. Linking services here will add to the linked service(s) array available to this resource. This will limit the services available to the resource.</p>  <p>You cannot post services that already exist in the array, you can only add new ones. Use the <i>PUT ​/setup​/v1​/resources​/{id}​/services</i> endpoint to update the entire list.</p>
     * @param {String} id id of resource object
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [requestBody] Array of valid service object id's
     * @param {module:api/ResourcesApi~setupV1ResourcesIdServicesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceViewModel}
     */
    setupV1ResourcesIdServicesPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdServicesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ResourceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdServicesPut operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdServicesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Linked Services
     * <p>Use this endpoint to <b>Update</b> the linked services of a Resource. A valid <b>resource id</b> is required.</p>  <p>Updating services with this endpoint will update the linked services available to the resource. Only those services will be available to the resource.</p>  <p>    <b>Note:</b> This is a destructive process, any existing linked services will be removed and replaced with the list of services supplied here. Provide the resources complete list of services when using this endpoint.</p>
     * @param {String} id id of resource object
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [requestBody] Array of valid service object id's
     * @param {module:api/ResourcesApi~setupV1ResourcesIdServicesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceViewModel}
     */
    setupV1ResourcesIdServicesPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdServicesPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ResourceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/services', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesIdUploadimagePost operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesIdUploadimagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Resource Image
     * <p>Use this endpoint to <b>Upload</b> a resource image to the resource. A valid <b>resource id</b> is required. You must convert the image to a <b>base64 encoded string</b> and pass that string as input along with your <b>filename</b>.</p>
     * @param {String} id id of resource object
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceImageInputModel} [resourceImageInputModel] Input model for image upload
     * @param {module:api/ResourcesApi~setupV1ResourcesIdUploadimagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceViewModel}
     */
    setupV1ResourcesIdUploadimagePost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['resourceImageInputModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1ResourcesIdUploadimagePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ResourceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/{id}/uploadimage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesPost operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Resource
     * <p>Use this endpoint to <b>Create</b> a new resource.</p>  <p>Required Fields: <b>Email Address</b> and <b>Name</b></p>  <p>Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the <i>POST ​/setup​/v1​/resources​/{id}​/services</i> endpoint for details about explicitly linking services.</p>  <p>Set the resource availability type by using the <b>recurringAvailability</b> flag. Set recurringAvailability to <b>True</b> for <b>Weekly Availability</b> or <b>False</b> for <b>Resource Allocations</b>.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [googleAuthReturnUrl] Google calendar authorization return url
     * @param {String} [outlookAuthReturnUrl] Outlook calendar authorization return url
     * @param {module:model/ResourceInputModel} [resourceInputModel] Resource input model
     * @param {module:api/ResourcesApi~setupV1ResourcesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceViewModel}
     */
    setupV1ResourcesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['resourceInputModel'];

      let pathParams = {
      };
      let queryParams = {
        'googleAuthReturnUrl': opts['googleAuthReturnUrl'],
        'outlookAuthReturnUrl': opts['outlookAuthReturnUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = ResourceViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1ResourcesTimezonesGet operation.
     * @callback module:api/ResourcesApi~setupV1ResourcesTimezonesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemTimezoneViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Time Zones
     * <p>Use this endpoint to return a <b>List of Time Zones</b>.</p>
     * @param {module:api/ResourcesApi~setupV1ResourcesTimezonesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SystemTimezoneViewModel}
     */
    setupV1ResourcesTimezonesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemTimezoneViewModel;
      return this.apiClient.callApi(
        '/setup/v1/resources/timezones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
