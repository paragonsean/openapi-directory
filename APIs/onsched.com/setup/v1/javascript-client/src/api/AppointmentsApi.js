/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppointmentListViewModel from '../model/AppointmentListViewModel';
import AppointmentViewModel from '../model/AppointmentViewModel';

/**
* Appointments service.
* @module api/AppointmentsApi
* @version v1
*/
export default class AppointmentsApi {

    /**
    * Constructs a new AppointmentsApi. 
    * @alias module:api/AppointmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the setupV1AppointmentsGet operation.
     * @callback module:api/AppointmentsApi~setupV1AppointmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppointmentListViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Appointments
     * <p>Use this endpoint to return a <b>List of Appointments</b>. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: <a href=\"https://onsched.readme.io/docs/appointments-overview\">Appointments Overview</a></p>
     * @param {Object} opts Optional parameters
     * @param {String} [locationId] id of business location, defaults to primary business location
     * @param {String} [email] Filter appointments by email address
     * @param {String} [lastname] Filter appointments by lastname or part of
     * @param {String} [serviceId] Filter appointments by service
     * @param {String} [calendarId] Filter appointments by calendar
     * @param {String} [resourceId] Filter appointments by resource
     * @param {String} [customerId] Filter appointments by customer
     * @param {String} [serviceAllocationId] Filter appointments by service allocation
     * @param {Date} [startDate] Format YYYY-MM-DD: Filter appointments by on/after startDate
     * @param {Date} [endDate] Format YYYY-MM-DD: Filter appointments on/before endDate
     * @param {String} [status] Filter appointments by status: IN, BK, CN, RE, RS
     * @param {String} [bookedBy] Filter appointments by user email who booked
     * @param {Number} [offset] Starting row of page, default 0
     * @param {Number} [limit] Page limit default 20, max 100
     * @param {module:api/AppointmentsApi~setupV1AppointmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppointmentListViewModel}
     */
    setupV1AppointmentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'locationId': opts['locationId'],
        'email': opts['email'],
        'lastname': opts['lastname'],
        'serviceId': opts['serviceId'],
        'calendarId': opts['calendarId'],
        'resourceId': opts['resourceId'],
        'customerId': opts['customerId'],
        'serviceAllocationId': opts['serviceAllocationId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'status': opts['status'],
        'bookedBy': opts['bookedBy'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppointmentListViewModel;
      return this.apiClient.callApi(
        '/setup/v1/appointments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1AppointmentsIdGet operation.
     * @callback module:api/AppointmentsApi~setupV1AppointmentsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppointmentViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Appointment
     * <p>Use this endpoint to return an <b>Appointment</b> object. A valid <b>appointment id</b> is required. Find appointment id's by using the <i>GET​/setup​/v1​/appointments</i> endpoint.</p>
     * @param {String} id id of appointment object
     * @param {module:api/AppointmentsApi~setupV1AppointmentsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppointmentViewModel}
     */
    setupV1AppointmentsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1AppointmentsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppointmentViewModel;
      return this.apiClient.callApi(
        '/setup/v1/appointments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupV1AppointmentsIdReassignResourceResourceIdPut operation.
     * @callback module:api/AppointmentsApi~setupV1AppointmentsIdReassignResourceResourceIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppointmentViewModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reassign Appointment
     * <p>Use this endpoint to <b>Reassign</b> an appointment from one resource to another. The result returned is a single appointment that was reassigned to the target resource. A valid <b>appointment id</b> and <b>resource id</b> is required. Find appointment id's by using the <i>GET /setup/v1/appointments</i> endpoint, find resource id's by using the <i>GET ​/setup​/v1​/resources</i> endpoint.</p>
     * @param {String} id id of appointment object
     * @param {String} resourceId id of target resource
     * @param {module:api/AppointmentsApi~setupV1AppointmentsIdReassignResourceResourceIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppointmentViewModel}
     */
    setupV1AppointmentsIdReassignResourceResourceIdPut(id, resourceId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupV1AppointmentsIdReassignResourceResourceIdPut");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling setupV1AppointmentsIdReassignResourceResourceIdPut");
      }

      let pathParams = {
        'id': id,
        'resourceId': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppointmentViewModel;
      return this.apiClient.callApi(
        '/setup/v1/appointments/{id}/reassign/resource/{resourceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
