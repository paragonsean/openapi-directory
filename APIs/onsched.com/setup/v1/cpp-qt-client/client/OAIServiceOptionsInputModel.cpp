/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceOptionsInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceOptionsInputModel::OAIServiceOptionsInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceOptionsInputModel::OAIServiceOptionsInputModel() {
    this->initializeModel();
}

OAIServiceOptionsInputModel::~OAIServiceOptionsInputModel() {}

void OAIServiceOptionsInputModel::initializeModel() {

    m_consumer_padding_isSet = false;
    m_consumer_padding_isValid = false;

    m_default_service_isSet = false;
    m_default_service_isValid = false;

    m_duration_interval_isSet = false;
    m_duration_interval_isValid = false;

    m_duration_max_isSet = false;
    m_duration_max_isValid = false;

    m_duration_min_isSet = false;
    m_duration_min_isValid = false;

    m_duration_select_isSet = false;
    m_duration_select_isValid = false;

    m_padding_isSet = false;
    m_padding_isValid = false;
}

void OAIServiceOptionsInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceOptionsInputModel::fromJsonObject(QJsonObject json) {

    m_consumer_padding_isValid = ::OpenAPI::fromJsonValue(m_consumer_padding, json[QString("consumerPadding")]);
    m_consumer_padding_isSet = !json[QString("consumerPadding")].isNull() && m_consumer_padding_isValid;

    m_default_service_isValid = ::OpenAPI::fromJsonValue(m_default_service, json[QString("defaultService")]);
    m_default_service_isSet = !json[QString("defaultService")].isNull() && m_default_service_isValid;

    m_duration_interval_isValid = ::OpenAPI::fromJsonValue(m_duration_interval, json[QString("durationInterval")]);
    m_duration_interval_isSet = !json[QString("durationInterval")].isNull() && m_duration_interval_isValid;

    m_duration_max_isValid = ::OpenAPI::fromJsonValue(m_duration_max, json[QString("durationMax")]);
    m_duration_max_isSet = !json[QString("durationMax")].isNull() && m_duration_max_isValid;

    m_duration_min_isValid = ::OpenAPI::fromJsonValue(m_duration_min, json[QString("durationMin")]);
    m_duration_min_isSet = !json[QString("durationMin")].isNull() && m_duration_min_isValid;

    m_duration_select_isValid = ::OpenAPI::fromJsonValue(m_duration_select, json[QString("durationSelect")]);
    m_duration_select_isSet = !json[QString("durationSelect")].isNull() && m_duration_select_isValid;

    m_padding_isValid = ::OpenAPI::fromJsonValue(m_padding, json[QString("padding")]);
    m_padding_isSet = !json[QString("padding")].isNull() && m_padding_isValid;
}

QString OAIServiceOptionsInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceOptionsInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_padding_isSet) {
        obj.insert(QString("consumerPadding"), ::OpenAPI::toJsonValue(m_consumer_padding));
    }
    if (m_default_service_isSet) {
        obj.insert(QString("defaultService"), ::OpenAPI::toJsonValue(m_default_service));
    }
    if (m_duration_interval_isSet) {
        obj.insert(QString("durationInterval"), ::OpenAPI::toJsonValue(m_duration_interval));
    }
    if (m_duration_max_isSet) {
        obj.insert(QString("durationMax"), ::OpenAPI::toJsonValue(m_duration_max));
    }
    if (m_duration_min_isSet) {
        obj.insert(QString("durationMin"), ::OpenAPI::toJsonValue(m_duration_min));
    }
    if (m_duration_select_isSet) {
        obj.insert(QString("durationSelect"), ::OpenAPI::toJsonValue(m_duration_select));
    }
    if (m_padding_isSet) {
        obj.insert(QString("padding"), ::OpenAPI::toJsonValue(m_padding));
    }
    return obj;
}

bool OAIServiceOptionsInputModel::isConsumerPadding() const {
    return m_consumer_padding;
}
void OAIServiceOptionsInputModel::setConsumerPadding(const bool &consumer_padding) {
    m_consumer_padding = consumer_padding;
    m_consumer_padding_isSet = true;
}

bool OAIServiceOptionsInputModel::is_consumer_padding_Set() const{
    return m_consumer_padding_isSet;
}

bool OAIServiceOptionsInputModel::is_consumer_padding_Valid() const{
    return m_consumer_padding_isValid;
}

bool OAIServiceOptionsInputModel::isDefaultService() const {
    return m_default_service;
}
void OAIServiceOptionsInputModel::setDefaultService(const bool &default_service) {
    m_default_service = default_service;
    m_default_service_isSet = true;
}

bool OAIServiceOptionsInputModel::is_default_service_Set() const{
    return m_default_service_isSet;
}

bool OAIServiceOptionsInputModel::is_default_service_Valid() const{
    return m_default_service_isValid;
}

qint32 OAIServiceOptionsInputModel::getDurationInterval() const {
    return m_duration_interval;
}
void OAIServiceOptionsInputModel::setDurationInterval(const qint32 &duration_interval) {
    m_duration_interval = duration_interval;
    m_duration_interval_isSet = true;
}

bool OAIServiceOptionsInputModel::is_duration_interval_Set() const{
    return m_duration_interval_isSet;
}

bool OAIServiceOptionsInputModel::is_duration_interval_Valid() const{
    return m_duration_interval_isValid;
}

qint32 OAIServiceOptionsInputModel::getDurationMax() const {
    return m_duration_max;
}
void OAIServiceOptionsInputModel::setDurationMax(const qint32 &duration_max) {
    m_duration_max = duration_max;
    m_duration_max_isSet = true;
}

bool OAIServiceOptionsInputModel::is_duration_max_Set() const{
    return m_duration_max_isSet;
}

bool OAIServiceOptionsInputModel::is_duration_max_Valid() const{
    return m_duration_max_isValid;
}

qint32 OAIServiceOptionsInputModel::getDurationMin() const {
    return m_duration_min;
}
void OAIServiceOptionsInputModel::setDurationMin(const qint32 &duration_min) {
    m_duration_min = duration_min;
    m_duration_min_isSet = true;
}

bool OAIServiceOptionsInputModel::is_duration_min_Set() const{
    return m_duration_min_isSet;
}

bool OAIServiceOptionsInputModel::is_duration_min_Valid() const{
    return m_duration_min_isValid;
}

bool OAIServiceOptionsInputModel::isDurationSelect() const {
    return m_duration_select;
}
void OAIServiceOptionsInputModel::setDurationSelect(const bool &duration_select) {
    m_duration_select = duration_select;
    m_duration_select_isSet = true;
}

bool OAIServiceOptionsInputModel::is_duration_select_Set() const{
    return m_duration_select_isSet;
}

bool OAIServiceOptionsInputModel::is_duration_select_Valid() const{
    return m_duration_select_isValid;
}

qint32 OAIServiceOptionsInputModel::getPadding() const {
    return m_padding;
}
void OAIServiceOptionsInputModel::setPadding(const qint32 &padding) {
    m_padding = padding;
    m_padding_isSet = true;
}

bool OAIServiceOptionsInputModel::is_padding_Set() const{
    return m_padding_isSet;
}

bool OAIServiceOptionsInputModel::is_padding_Valid() const{
    return m_padding_isValid;
}

bool OAIServiceOptionsInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_padding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_select_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceOptionsInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
