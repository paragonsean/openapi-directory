/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceFeesInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceFeesInputModel::OAIServiceFeesInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceFeesInputModel::OAIServiceFeesInputModel() {
    this->initializeModel();
}

OAIServiceFeesInputModel::~OAIServiceFeesInputModel() {}

void OAIServiceFeesInputModel::initializeModel() {

    m_cancellation_fee_amount_isSet = false;
    m_cancellation_fee_amount_isValid = false;

    m_cancellation_fee_taxable_isSet = false;
    m_cancellation_fee_taxable_isValid = false;

    m_fee_amount_isSet = false;
    m_fee_amount_isValid = false;

    m_fee_taxable_isSet = false;
    m_fee_taxable_isValid = false;

    m_non_refundable_isSet = false;
    m_non_refundable_isValid = false;
}

void OAIServiceFeesInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceFeesInputModel::fromJsonObject(QJsonObject json) {

    m_cancellation_fee_amount_isValid = ::OpenAPI::fromJsonValue(m_cancellation_fee_amount, json[QString("cancellationFeeAmount")]);
    m_cancellation_fee_amount_isSet = !json[QString("cancellationFeeAmount")].isNull() && m_cancellation_fee_amount_isValid;

    m_cancellation_fee_taxable_isValid = ::OpenAPI::fromJsonValue(m_cancellation_fee_taxable, json[QString("cancellationFeeTaxable")]);
    m_cancellation_fee_taxable_isSet = !json[QString("cancellationFeeTaxable")].isNull() && m_cancellation_fee_taxable_isValid;

    m_fee_amount_isValid = ::OpenAPI::fromJsonValue(m_fee_amount, json[QString("feeAmount")]);
    m_fee_amount_isSet = !json[QString("feeAmount")].isNull() && m_fee_amount_isValid;

    m_fee_taxable_isValid = ::OpenAPI::fromJsonValue(m_fee_taxable, json[QString("feeTaxable")]);
    m_fee_taxable_isSet = !json[QString("feeTaxable")].isNull() && m_fee_taxable_isValid;

    m_non_refundable_isValid = ::OpenAPI::fromJsonValue(m_non_refundable, json[QString("nonRefundable")]);
    m_non_refundable_isSet = !json[QString("nonRefundable")].isNull() && m_non_refundable_isValid;
}

QString OAIServiceFeesInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceFeesInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_cancellation_fee_amount_isSet) {
        obj.insert(QString("cancellationFeeAmount"), ::OpenAPI::toJsonValue(m_cancellation_fee_amount));
    }
    if (m_cancellation_fee_taxable_isSet) {
        obj.insert(QString("cancellationFeeTaxable"), ::OpenAPI::toJsonValue(m_cancellation_fee_taxable));
    }
    if (m_fee_amount_isSet) {
        obj.insert(QString("feeAmount"), ::OpenAPI::toJsonValue(m_fee_amount));
    }
    if (m_fee_taxable_isSet) {
        obj.insert(QString("feeTaxable"), ::OpenAPI::toJsonValue(m_fee_taxable));
    }
    if (m_non_refundable_isSet) {
        obj.insert(QString("nonRefundable"), ::OpenAPI::toJsonValue(m_non_refundable));
    }
    return obj;
}

double OAIServiceFeesInputModel::getCancellationFeeAmount() const {
    return m_cancellation_fee_amount;
}
void OAIServiceFeesInputModel::setCancellationFeeAmount(const double &cancellation_fee_amount) {
    m_cancellation_fee_amount = cancellation_fee_amount;
    m_cancellation_fee_amount_isSet = true;
}

bool OAIServiceFeesInputModel::is_cancellation_fee_amount_Set() const{
    return m_cancellation_fee_amount_isSet;
}

bool OAIServiceFeesInputModel::is_cancellation_fee_amount_Valid() const{
    return m_cancellation_fee_amount_isValid;
}

bool OAIServiceFeesInputModel::isCancellationFeeTaxable() const {
    return m_cancellation_fee_taxable;
}
void OAIServiceFeesInputModel::setCancellationFeeTaxable(const bool &cancellation_fee_taxable) {
    m_cancellation_fee_taxable = cancellation_fee_taxable;
    m_cancellation_fee_taxable_isSet = true;
}

bool OAIServiceFeesInputModel::is_cancellation_fee_taxable_Set() const{
    return m_cancellation_fee_taxable_isSet;
}

bool OAIServiceFeesInputModel::is_cancellation_fee_taxable_Valid() const{
    return m_cancellation_fee_taxable_isValid;
}

double OAIServiceFeesInputModel::getFeeAmount() const {
    return m_fee_amount;
}
void OAIServiceFeesInputModel::setFeeAmount(const double &fee_amount) {
    m_fee_amount = fee_amount;
    m_fee_amount_isSet = true;
}

bool OAIServiceFeesInputModel::is_fee_amount_Set() const{
    return m_fee_amount_isSet;
}

bool OAIServiceFeesInputModel::is_fee_amount_Valid() const{
    return m_fee_amount_isValid;
}

bool OAIServiceFeesInputModel::isFeeTaxable() const {
    return m_fee_taxable;
}
void OAIServiceFeesInputModel::setFeeTaxable(const bool &fee_taxable) {
    m_fee_taxable = fee_taxable;
    m_fee_taxable_isSet = true;
}

bool OAIServiceFeesInputModel::is_fee_taxable_Set() const{
    return m_fee_taxable_isSet;
}

bool OAIServiceFeesInputModel::is_fee_taxable_Valid() const{
    return m_fee_taxable_isValid;
}

bool OAIServiceFeesInputModel::isNonRefundable() const {
    return m_non_refundable;
}
void OAIServiceFeesInputModel::setNonRefundable(const bool &non_refundable) {
    m_non_refundable = non_refundable;
    m_non_refundable_isSet = true;
}

bool OAIServiceFeesInputModel::is_non_refundable_Set() const{
    return m_non_refundable_isSet;
}

bool OAIServiceFeesInputModel::is_non_refundable_Valid() const{
    return m_non_refundable_isValid;
}

bool OAIServiceFeesInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancellation_fee_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_fee_taxable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_taxable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_refundable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceFeesInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
