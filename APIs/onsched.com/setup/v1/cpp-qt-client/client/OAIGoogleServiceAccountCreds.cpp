/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleServiceAccountCreds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleServiceAccountCreds::OAIGoogleServiceAccountCreds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleServiceAccountCreds::OAIGoogleServiceAccountCreds() {
    this->initializeModel();
}

OAIGoogleServiceAccountCreds::~OAIGoogleServiceAccountCreds() {}

void OAIGoogleServiceAccountCreds::initializeModel() {

    m_auth_provider_x509_cert_url_isSet = false;
    m_auth_provider_x509_cert_url_isValid = false;

    m_auth_uri_isSet = false;
    m_auth_uri_isValid = false;

    m_client_email_isSet = false;
    m_client_email_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_x509_cert_url_isSet = false;
    m_client_x509_cert_url_isValid = false;

    m_private_key_isSet = false;
    m_private_key_isValid = false;

    m_private_key_id_isSet = false;
    m_private_key_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_token_uri_isSet = false;
    m_token_uri_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleServiceAccountCreds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleServiceAccountCreds::fromJsonObject(QJsonObject json) {

    m_auth_provider_x509_cert_url_isValid = ::OpenAPI::fromJsonValue(m_auth_provider_x509_cert_url, json[QString("auth_provider_x509_cert_url")]);
    m_auth_provider_x509_cert_url_isSet = !json[QString("auth_provider_x509_cert_url")].isNull() && m_auth_provider_x509_cert_url_isValid;

    m_auth_uri_isValid = ::OpenAPI::fromJsonValue(m_auth_uri, json[QString("auth_uri")]);
    m_auth_uri_isSet = !json[QString("auth_uri")].isNull() && m_auth_uri_isValid;

    m_client_email_isValid = ::OpenAPI::fromJsonValue(m_client_email, json[QString("client_email")]);
    m_client_email_isSet = !json[QString("client_email")].isNull() && m_client_email_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_x509_cert_url_isValid = ::OpenAPI::fromJsonValue(m_client_x509_cert_url, json[QString("client_x509_cert_url")]);
    m_client_x509_cert_url_isSet = !json[QString("client_x509_cert_url")].isNull() && m_client_x509_cert_url_isValid;

    m_private_key_isValid = ::OpenAPI::fromJsonValue(m_private_key, json[QString("private_key")]);
    m_private_key_isSet = !json[QString("private_key")].isNull() && m_private_key_isValid;

    m_private_key_id_isValid = ::OpenAPI::fromJsonValue(m_private_key_id, json[QString("private_key_id")]);
    m_private_key_id_isSet = !json[QString("private_key_id")].isNull() && m_private_key_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_token_uri_isValid = ::OpenAPI::fromJsonValue(m_token_uri, json[QString("token_uri")]);
    m_token_uri_isSet = !json[QString("token_uri")].isNull() && m_token_uri_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleServiceAccountCreds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleServiceAccountCreds::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_provider_x509_cert_url_isSet) {
        obj.insert(QString("auth_provider_x509_cert_url"), ::OpenAPI::toJsonValue(m_auth_provider_x509_cert_url));
    }
    if (m_auth_uri_isSet) {
        obj.insert(QString("auth_uri"), ::OpenAPI::toJsonValue(m_auth_uri));
    }
    if (m_client_email_isSet) {
        obj.insert(QString("client_email"), ::OpenAPI::toJsonValue(m_client_email));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_x509_cert_url_isSet) {
        obj.insert(QString("client_x509_cert_url"), ::OpenAPI::toJsonValue(m_client_x509_cert_url));
    }
    if (m_private_key_isSet) {
        obj.insert(QString("private_key"), ::OpenAPI::toJsonValue(m_private_key));
    }
    if (m_private_key_id_isSet) {
        obj.insert(QString("private_key_id"), ::OpenAPI::toJsonValue(m_private_key_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_token_uri_isSet) {
        obj.insert(QString("token_uri"), ::OpenAPI::toJsonValue(m_token_uri));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGoogleServiceAccountCreds::getAuthProviderX509CertUrl() const {
    return m_auth_provider_x509_cert_url;
}
void OAIGoogleServiceAccountCreds::setAuthProviderX509CertUrl(const QString &auth_provider_x509_cert_url) {
    m_auth_provider_x509_cert_url = auth_provider_x509_cert_url;
    m_auth_provider_x509_cert_url_isSet = true;
}

bool OAIGoogleServiceAccountCreds::is_auth_provider_x509_cert_url_Set() const{
    return m_auth_provider_x509_cert_url_isSet;
}

bool OAIGoogleServiceAccountCreds::is_auth_provider_x509_cert_url_Valid() const{
    return m_auth_provider_x509_cert_url_isValid;
}

QString OAIGoogleServiceAccountCreds::getAuthUri() const {
    return m_auth_uri;
}
void OAIGoogleServiceAccountCreds::setAuthUri(const QString &auth_uri) {
    m_auth_uri = auth_uri;
    m_auth_uri_isSet = true;
}

bool OAIGoogleServiceAccountCreds::is_auth_uri_Set() const{
    return m_auth_uri_isSet;
}

bool OAIGoogleServiceAccountCreds::is_auth_uri_Valid() const{
    return m_auth_uri_isValid;
}

QString OAIGoogleServiceAccountCreds::getClientEmail() const {
    return m_client_email;
}
void OAIGoogleServiceAccountCreds::setClientEmail(const QString &client_email) {
    m_client_email = client_email;
    m_client_email_isSet = true;
}

bool OAIGoogleServiceAccountCreds::is_client_email_Set() const{
    return m_client_email_isSet;
}

bool OAIGoogleServiceAccountCreds::is_client_email_Valid() const{
    return m_client_email_isValid;
}

QString OAIGoogleServiceAccountCreds::getClientId() const {
    return m_client_id;
}
void OAIGoogleServiceAccountCreds::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIGoogleServiceAccountCreds::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIGoogleServiceAccountCreds::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIGoogleServiceAccountCreds::getClientX509CertUrl() const {
    return m_client_x509_cert_url;
}
void OAIGoogleServiceAccountCreds::setClientX509CertUrl(const QString &client_x509_cert_url) {
    m_client_x509_cert_url = client_x509_cert_url;
    m_client_x509_cert_url_isSet = true;
}

bool OAIGoogleServiceAccountCreds::is_client_x509_cert_url_Set() const{
    return m_client_x509_cert_url_isSet;
}

bool OAIGoogleServiceAccountCreds::is_client_x509_cert_url_Valid() const{
    return m_client_x509_cert_url_isValid;
}

QString OAIGoogleServiceAccountCreds::getPrivateKey() const {
    return m_private_key;
}
void OAIGoogleServiceAccountCreds::setPrivateKey(const QString &private_key) {
    m_private_key = private_key;
    m_private_key_isSet = true;
}

bool OAIGoogleServiceAccountCreds::is_private_key_Set() const{
    return m_private_key_isSet;
}

bool OAIGoogleServiceAccountCreds::is_private_key_Valid() const{
    return m_private_key_isValid;
}

QString OAIGoogleServiceAccountCreds::getPrivateKeyId() const {
    return m_private_key_id;
}
void OAIGoogleServiceAccountCreds::setPrivateKeyId(const QString &private_key_id) {
    m_private_key_id = private_key_id;
    m_private_key_id_isSet = true;
}

bool OAIGoogleServiceAccountCreds::is_private_key_id_Set() const{
    return m_private_key_id_isSet;
}

bool OAIGoogleServiceAccountCreds::is_private_key_id_Valid() const{
    return m_private_key_id_isValid;
}

QString OAIGoogleServiceAccountCreds::getProjectId() const {
    return m_project_id;
}
void OAIGoogleServiceAccountCreds::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIGoogleServiceAccountCreds::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIGoogleServiceAccountCreds::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIGoogleServiceAccountCreds::getTokenUri() const {
    return m_token_uri;
}
void OAIGoogleServiceAccountCreds::setTokenUri(const QString &token_uri) {
    m_token_uri = token_uri;
    m_token_uri_isSet = true;
}

bool OAIGoogleServiceAccountCreds::is_token_uri_Set() const{
    return m_token_uri_isSet;
}

bool OAIGoogleServiceAccountCreds::is_token_uri_Valid() const{
    return m_token_uri_isValid;
}

QString OAIGoogleServiceAccountCreds::getType() const {
    return m_type;
}
void OAIGoogleServiceAccountCreds::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleServiceAccountCreds::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleServiceAccountCreds::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleServiceAccountCreds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_provider_x509_cert_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_x509_cert_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleServiceAccountCreds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
