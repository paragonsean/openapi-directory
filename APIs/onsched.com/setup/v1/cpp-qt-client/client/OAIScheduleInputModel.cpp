/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleInputModel::OAIScheduleInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleInputModel::OAIScheduleInputModel() {
    this->initializeModel();
}

OAIScheduleInputModel::~OAIScheduleInputModel() {}

void OAIScheduleInputModel::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_bookings_per_slot_isSet = false;
    m_bookings_per_slot_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_group_id_isSet = false;
    m_resource_group_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIScheduleInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleInputModel::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_bookings_per_slot_isValid = ::OpenAPI::fromJsonValue(m_bookings_per_slot, json[QString("bookingsPerSlot")]);
    m_bookings_per_slot_isSet = !json[QString("bookingsPerSlot")].isNull() && m_bookings_per_slot_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_resource_group_id, json[QString("resourceGroupId")]);
    m_resource_group_id_isSet = !json[QString("resourceGroupId")].isNull() && m_resource_group_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIScheduleInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.isSet()) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_bookings_per_slot_isSet) {
        obj.insert(QString("bookingsPerSlot"), ::OpenAPI::toJsonValue(m_bookings_per_slot));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_group_id_isSet) {
        obj.insert(QString("resourceGroupId"), ::OpenAPI::toJsonValue(m_resource_group_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAvailabilityInputModel OAIScheduleInputModel::getAvailability() const {
    return m_availability;
}
void OAIScheduleInputModel::setAvailability(const OAIAvailabilityInputModel &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIScheduleInputModel::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIScheduleInputModel::is_availability_Valid() const{
    return m_availability_isValid;
}

qint32 OAIScheduleInputModel::getBookingsPerSlot() const {
    return m_bookings_per_slot;
}
void OAIScheduleInputModel::setBookingsPerSlot(const qint32 &bookings_per_slot) {
    m_bookings_per_slot = bookings_per_slot;
    m_bookings_per_slot_isSet = true;
}

bool OAIScheduleInputModel::is_bookings_per_slot_Set() const{
    return m_bookings_per_slot_isSet;
}

bool OAIScheduleInputModel::is_bookings_per_slot_Valid() const{
    return m_bookings_per_slot_isValid;
}

qint32 OAIScheduleInputModel::getInterval() const {
    return m_interval;
}
void OAIScheduleInputModel::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIScheduleInputModel::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIScheduleInputModel::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAIScheduleInputModel::getLocationId() const {
    return m_location_id;
}
void OAIScheduleInputModel::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIScheduleInputModel::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIScheduleInputModel::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIScheduleInputModel::getName() const {
    return m_name;
}
void OAIScheduleInputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScheduleInputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScheduleInputModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIScheduleInputModel::getResourceGroupId() const {
    return m_resource_group_id;
}
void OAIScheduleInputModel::setResourceGroupId(const QString &resource_group_id) {
    m_resource_group_id = resource_group_id;
    m_resource_group_id_isSet = true;
}

bool OAIScheduleInputModel::is_resource_group_id_Set() const{
    return m_resource_group_id_isSet;
}

bool OAIScheduleInputModel::is_resource_group_id_Valid() const{
    return m_resource_group_id_isValid;
}

QString OAIScheduleInputModel::getType() const {
    return m_type;
}
void OAIScheduleInputModel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIScheduleInputModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIScheduleInputModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIScheduleInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookings_per_slot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
