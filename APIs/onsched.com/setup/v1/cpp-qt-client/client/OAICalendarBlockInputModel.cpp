/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalendarBlockInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalendarBlockInputModel::OAICalendarBlockInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalendarBlockInputModel::OAICalendarBlockInputModel() {
    this->initializeModel();
}

OAICalendarBlockInputModel::~OAICalendarBlockInputModel() {}

void OAICalendarBlockInputModel::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_repeat_isSet = false;
    m_repeat_isValid = false;

    m_repeats_isSet = false;
    m_repeats_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAICalendarBlockInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalendarBlockInputModel::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_repeat_isValid = ::OpenAPI::fromJsonValue(m_repeat, json[QString("repeat")]);
    m_repeat_isSet = !json[QString("repeat")].isNull() && m_repeat_isValid;

    m_repeats_isValid = ::OpenAPI::fromJsonValue(m_repeats, json[QString("repeats")]);
    m_repeats_isSet = !json[QString("repeats")].isNull() && m_repeats_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAICalendarBlockInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalendarBlockInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_repeat.isSet()) {
        obj.insert(QString("repeat"), ::OpenAPI::toJsonValue(m_repeat));
    }
    if (m_repeats_isSet) {
        obj.insert(QString("repeats"), ::OpenAPI::toJsonValue(m_repeats));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QDate OAICalendarBlockInputModel::getEndDate() const {
    return m_end_date;
}
void OAICalendarBlockInputModel::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAICalendarBlockInputModel::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAICalendarBlockInputModel::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAICalendarBlockInputModel::getEndTime() const {
    return m_end_time;
}
void OAICalendarBlockInputModel::setEndTime(const qint32 &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICalendarBlockInputModel::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICalendarBlockInputModel::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAICalendarBlockInputModel::getReason() const {
    return m_reason;
}
void OAICalendarBlockInputModel::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAICalendarBlockInputModel::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAICalendarBlockInputModel::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIRepeatInputModel OAICalendarBlockInputModel::getRepeat() const {
    return m_repeat;
}
void OAICalendarBlockInputModel::setRepeat(const OAIRepeatInputModel &repeat) {
    m_repeat = repeat;
    m_repeat_isSet = true;
}

bool OAICalendarBlockInputModel::is_repeat_Set() const{
    return m_repeat_isSet;
}

bool OAICalendarBlockInputModel::is_repeat_Valid() const{
    return m_repeat_isValid;
}

bool OAICalendarBlockInputModel::isRepeats() const {
    return m_repeats;
}
void OAICalendarBlockInputModel::setRepeats(const bool &repeats) {
    m_repeats = repeats;
    m_repeats_isSet = true;
}

bool OAICalendarBlockInputModel::is_repeats_Set() const{
    return m_repeats_isSet;
}

bool OAICalendarBlockInputModel::is_repeats_Valid() const{
    return m_repeats_isValid;
}

QDate OAICalendarBlockInputModel::getStartDate() const {
    return m_start_date;
}
void OAICalendarBlockInputModel::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAICalendarBlockInputModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAICalendarBlockInputModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

qint32 OAICalendarBlockInputModel::getStartTime() const {
    return m_start_time;
}
void OAICalendarBlockInputModel::setStartTime(const qint32 &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICalendarBlockInputModel::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICalendarBlockInputModel::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAICalendarBlockInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalendarBlockInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
