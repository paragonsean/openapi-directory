/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimezonesViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimezonesViewModel::OAITimezonesViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimezonesViewModel::OAITimezonesViewModel() {
    this->initializeModel();
}

OAITimezonesViewModel::~OAITimezonesViewModel() {}

void OAITimezonesViewModel::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_timezone_ianna_isSet = false;
    m_timezone_ianna_isValid = false;

    m_tz_offset_isSet = false;
    m_tz_offset_isValid = false;
}

void OAITimezonesViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimezonesViewModel::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_timezone_ianna_isValid = ::OpenAPI::fromJsonValue(m_timezone_ianna, json[QString("timezoneIanna")]);
    m_timezone_ianna_isSet = !json[QString("timezoneIanna")].isNull() && m_timezone_ianna_isValid;

    m_tz_offset_isValid = ::OpenAPI::fromJsonValue(m_tz_offset, json[QString("tzOffset")]);
    m_tz_offset_isSet = !json[QString("tzOffset")].isNull() && m_tz_offset_isValid;
}

QString OAITimezonesViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimezonesViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_timezone_ianna_isSet) {
        obj.insert(QString("timezoneIanna"), ::OpenAPI::toJsonValue(m_timezone_ianna));
    }
    if (m_tz_offset_isSet) {
        obj.insert(QString("tzOffset"), ::OpenAPI::toJsonValue(m_tz_offset));
    }
    return obj;
}

QString OAITimezonesViewModel::getName() const {
    return m_name;
}
void OAITimezonesViewModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITimezonesViewModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAITimezonesViewModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITimezonesViewModel::getRegion() const {
    return m_region;
}
void OAITimezonesViewModel::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAITimezonesViewModel::is_region_Set() const{
    return m_region_isSet;
}

bool OAITimezonesViewModel::is_region_Valid() const{
    return m_region_isValid;
}

QString OAITimezonesViewModel::getTimezoneIanna() const {
    return m_timezone_ianna;
}
void OAITimezonesViewModel::setTimezoneIanna(const QString &timezone_ianna) {
    m_timezone_ianna = timezone_ianna;
    m_timezone_ianna_isSet = true;
}

bool OAITimezonesViewModel::is_timezone_ianna_Set() const{
    return m_timezone_ianna_isSet;
}

bool OAITimezonesViewModel::is_timezone_ianna_Valid() const{
    return m_timezone_ianna_isValid;
}

qint32 OAITimezonesViewModel::getTzOffset() const {
    return m_tz_offset;
}
void OAITimezonesViewModel::setTzOffset(const qint32 &tz_offset) {
    m_tz_offset = tz_offset;
    m_tz_offset_isSet = true;
}

bool OAITimezonesViewModel::is_tz_offset_Set() const{
    return m_tz_offset_isSet;
}

bool OAITimezonesViewModel::is_tz_offset_Valid() const{
    return m_tz_offset_isValid;
}

bool OAITimezonesViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_ianna_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tz_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimezonesViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
