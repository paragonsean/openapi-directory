/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppointmentReminderViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppointmentReminderViewModel::OAIAppointmentReminderViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppointmentReminderViewModel::OAIAppointmentReminderViewModel() {
    this->initializeModel();
}

OAIAppointmentReminderViewModel::~OAIAppointmentReminderViewModel() {}

void OAIAppointmentReminderViewModel::initializeModel() {

    m_email_first_reminder_isSet = false;
    m_email_first_reminder_isValid = false;

    m_email_first_reminder_interval_isSet = false;
    m_email_first_reminder_interval_isValid = false;

    m_email_second_reminder_isSet = false;
    m_email_second_reminder_isValid = false;

    m_email_second_reminder_interval_isSet = false;
    m_email_second_reminder_interval_isValid = false;

    m_sms_first_reminder_isSet = false;
    m_sms_first_reminder_isValid = false;

    m_sms_first_reminder_interval_isSet = false;
    m_sms_first_reminder_interval_isValid = false;

    m_sms_second_reminder_isSet = false;
    m_sms_second_reminder_isValid = false;

    m_sms_second_reminder_interval_isSet = false;
    m_sms_second_reminder_interval_isValid = false;
}

void OAIAppointmentReminderViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppointmentReminderViewModel::fromJsonObject(QJsonObject json) {

    m_email_first_reminder_isValid = ::OpenAPI::fromJsonValue(m_email_first_reminder, json[QString("emailFirstReminder")]);
    m_email_first_reminder_isSet = !json[QString("emailFirstReminder")].isNull() && m_email_first_reminder_isValid;

    m_email_first_reminder_interval_isValid = ::OpenAPI::fromJsonValue(m_email_first_reminder_interval, json[QString("emailFirstReminderInterval")]);
    m_email_first_reminder_interval_isSet = !json[QString("emailFirstReminderInterval")].isNull() && m_email_first_reminder_interval_isValid;

    m_email_second_reminder_isValid = ::OpenAPI::fromJsonValue(m_email_second_reminder, json[QString("emailSecondReminder")]);
    m_email_second_reminder_isSet = !json[QString("emailSecondReminder")].isNull() && m_email_second_reminder_isValid;

    m_email_second_reminder_interval_isValid = ::OpenAPI::fromJsonValue(m_email_second_reminder_interval, json[QString("emailSecondReminderInterval")]);
    m_email_second_reminder_interval_isSet = !json[QString("emailSecondReminderInterval")].isNull() && m_email_second_reminder_interval_isValid;

    m_sms_first_reminder_isValid = ::OpenAPI::fromJsonValue(m_sms_first_reminder, json[QString("smsFirstReminder")]);
    m_sms_first_reminder_isSet = !json[QString("smsFirstReminder")].isNull() && m_sms_first_reminder_isValid;

    m_sms_first_reminder_interval_isValid = ::OpenAPI::fromJsonValue(m_sms_first_reminder_interval, json[QString("smsFirstReminderInterval")]);
    m_sms_first_reminder_interval_isSet = !json[QString("smsFirstReminderInterval")].isNull() && m_sms_first_reminder_interval_isValid;

    m_sms_second_reminder_isValid = ::OpenAPI::fromJsonValue(m_sms_second_reminder, json[QString("smsSecondReminder")]);
    m_sms_second_reminder_isSet = !json[QString("smsSecondReminder")].isNull() && m_sms_second_reminder_isValid;

    m_sms_second_reminder_interval_isValid = ::OpenAPI::fromJsonValue(m_sms_second_reminder_interval, json[QString("smsSecondReminderInterval")]);
    m_sms_second_reminder_interval_isSet = !json[QString("smsSecondReminderInterval")].isNull() && m_sms_second_reminder_interval_isValid;
}

QString OAIAppointmentReminderViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppointmentReminderViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_email_first_reminder_isSet) {
        obj.insert(QString("emailFirstReminder"), ::OpenAPI::toJsonValue(m_email_first_reminder));
    }
    if (m_email_first_reminder_interval_isSet) {
        obj.insert(QString("emailFirstReminderInterval"), ::OpenAPI::toJsonValue(m_email_first_reminder_interval));
    }
    if (m_email_second_reminder_isSet) {
        obj.insert(QString("emailSecondReminder"), ::OpenAPI::toJsonValue(m_email_second_reminder));
    }
    if (m_email_second_reminder_interval_isSet) {
        obj.insert(QString("emailSecondReminderInterval"), ::OpenAPI::toJsonValue(m_email_second_reminder_interval));
    }
    if (m_sms_first_reminder_isSet) {
        obj.insert(QString("smsFirstReminder"), ::OpenAPI::toJsonValue(m_sms_first_reminder));
    }
    if (m_sms_first_reminder_interval_isSet) {
        obj.insert(QString("smsFirstReminderInterval"), ::OpenAPI::toJsonValue(m_sms_first_reminder_interval));
    }
    if (m_sms_second_reminder_isSet) {
        obj.insert(QString("smsSecondReminder"), ::OpenAPI::toJsonValue(m_sms_second_reminder));
    }
    if (m_sms_second_reminder_interval_isSet) {
        obj.insert(QString("smsSecondReminderInterval"), ::OpenAPI::toJsonValue(m_sms_second_reminder_interval));
    }
    return obj;
}

qint32 OAIAppointmentReminderViewModel::getEmailFirstReminder() const {
    return m_email_first_reminder;
}
void OAIAppointmentReminderViewModel::setEmailFirstReminder(const qint32 &email_first_reminder) {
    m_email_first_reminder = email_first_reminder;
    m_email_first_reminder_isSet = true;
}

bool OAIAppointmentReminderViewModel::is_email_first_reminder_Set() const{
    return m_email_first_reminder_isSet;
}

bool OAIAppointmentReminderViewModel::is_email_first_reminder_Valid() const{
    return m_email_first_reminder_isValid;
}

qint32 OAIAppointmentReminderViewModel::getEmailFirstReminderInterval() const {
    return m_email_first_reminder_interval;
}
void OAIAppointmentReminderViewModel::setEmailFirstReminderInterval(const qint32 &email_first_reminder_interval) {
    m_email_first_reminder_interval = email_first_reminder_interval;
    m_email_first_reminder_interval_isSet = true;
}

bool OAIAppointmentReminderViewModel::is_email_first_reminder_interval_Set() const{
    return m_email_first_reminder_interval_isSet;
}

bool OAIAppointmentReminderViewModel::is_email_first_reminder_interval_Valid() const{
    return m_email_first_reminder_interval_isValid;
}

qint32 OAIAppointmentReminderViewModel::getEmailSecondReminder() const {
    return m_email_second_reminder;
}
void OAIAppointmentReminderViewModel::setEmailSecondReminder(const qint32 &email_second_reminder) {
    m_email_second_reminder = email_second_reminder;
    m_email_second_reminder_isSet = true;
}

bool OAIAppointmentReminderViewModel::is_email_second_reminder_Set() const{
    return m_email_second_reminder_isSet;
}

bool OAIAppointmentReminderViewModel::is_email_second_reminder_Valid() const{
    return m_email_second_reminder_isValid;
}

qint32 OAIAppointmentReminderViewModel::getEmailSecondReminderInterval() const {
    return m_email_second_reminder_interval;
}
void OAIAppointmentReminderViewModel::setEmailSecondReminderInterval(const qint32 &email_second_reminder_interval) {
    m_email_second_reminder_interval = email_second_reminder_interval;
    m_email_second_reminder_interval_isSet = true;
}

bool OAIAppointmentReminderViewModel::is_email_second_reminder_interval_Set() const{
    return m_email_second_reminder_interval_isSet;
}

bool OAIAppointmentReminderViewModel::is_email_second_reminder_interval_Valid() const{
    return m_email_second_reminder_interval_isValid;
}

qint32 OAIAppointmentReminderViewModel::getSmsFirstReminder() const {
    return m_sms_first_reminder;
}
void OAIAppointmentReminderViewModel::setSmsFirstReminder(const qint32 &sms_first_reminder) {
    m_sms_first_reminder = sms_first_reminder;
    m_sms_first_reminder_isSet = true;
}

bool OAIAppointmentReminderViewModel::is_sms_first_reminder_Set() const{
    return m_sms_first_reminder_isSet;
}

bool OAIAppointmentReminderViewModel::is_sms_first_reminder_Valid() const{
    return m_sms_first_reminder_isValid;
}

qint32 OAIAppointmentReminderViewModel::getSmsFirstReminderInterval() const {
    return m_sms_first_reminder_interval;
}
void OAIAppointmentReminderViewModel::setSmsFirstReminderInterval(const qint32 &sms_first_reminder_interval) {
    m_sms_first_reminder_interval = sms_first_reminder_interval;
    m_sms_first_reminder_interval_isSet = true;
}

bool OAIAppointmentReminderViewModel::is_sms_first_reminder_interval_Set() const{
    return m_sms_first_reminder_interval_isSet;
}

bool OAIAppointmentReminderViewModel::is_sms_first_reminder_interval_Valid() const{
    return m_sms_first_reminder_interval_isValid;
}

qint32 OAIAppointmentReminderViewModel::getSmsSecondReminder() const {
    return m_sms_second_reminder;
}
void OAIAppointmentReminderViewModel::setSmsSecondReminder(const qint32 &sms_second_reminder) {
    m_sms_second_reminder = sms_second_reminder;
    m_sms_second_reminder_isSet = true;
}

bool OAIAppointmentReminderViewModel::is_sms_second_reminder_Set() const{
    return m_sms_second_reminder_isSet;
}

bool OAIAppointmentReminderViewModel::is_sms_second_reminder_Valid() const{
    return m_sms_second_reminder_isValid;
}

qint32 OAIAppointmentReminderViewModel::getSmsSecondReminderInterval() const {
    return m_sms_second_reminder_interval;
}
void OAIAppointmentReminderViewModel::setSmsSecondReminderInterval(const qint32 &sms_second_reminder_interval) {
    m_sms_second_reminder_interval = sms_second_reminder_interval;
    m_sms_second_reminder_interval_isSet = true;
}

bool OAIAppointmentReminderViewModel::is_sms_second_reminder_interval_Set() const{
    return m_sms_second_reminder_interval_isSet;
}

bool OAIAppointmentReminderViewModel::is_sms_second_reminder_interval_Valid() const{
    return m_sms_second_reminder_interval_isValid;
}

bool OAIAppointmentReminderViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_first_reminder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_first_reminder_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_second_reminder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_second_reminder_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_first_reminder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_first_reminder_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_second_reminder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_second_reminder_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppointmentReminderViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
