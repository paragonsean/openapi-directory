/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITravelViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITravelViewModel::OAITravelViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITravelViewModel::OAITravelViewModel() {
    this->initializeModel();
}

OAITravelViewModel::~OAITravelViewModel() {}

void OAITravelViewModel::initializeModel() {

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_proximity_isSet = false;
    m_proximity_isValid = false;

    m_start_address_isSet = false;
    m_start_address_isValid = false;

    m_start_lat_isSet = false;
    m_start_lat_isValid = false;

    m_start_lon_isSet = false;
    m_start_lon_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAITravelViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITravelViewModel::fromJsonObject(QJsonObject json) {

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_proximity_isValid = ::OpenAPI::fromJsonValue(m_proximity, json[QString("proximity")]);
    m_proximity_isSet = !json[QString("proximity")].isNull() && m_proximity_isValid;

    m_start_address_isValid = ::OpenAPI::fromJsonValue(m_start_address, json[QString("startAddress")]);
    m_start_address_isSet = !json[QString("startAddress")].isNull() && m_start_address_isValid;

    m_start_lat_isValid = ::OpenAPI::fromJsonValue(m_start_lat, json[QString("startLat")]);
    m_start_lat_isSet = !json[QString("startLat")].isNull() && m_start_lat_isValid;

    m_start_lon_isValid = ::OpenAPI::fromJsonValue(m_start_lon, json[QString("startLon")]);
    m_start_lon_isSet = !json[QString("startLon")].isNull() && m_start_lon_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAITravelViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITravelViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_proximity_isSet) {
        obj.insert(QString("proximity"), ::OpenAPI::toJsonValue(m_proximity));
    }
    if (m_start_address_isSet) {
        obj.insert(QString("startAddress"), ::OpenAPI::toJsonValue(m_start_address));
    }
    if (m_start_lat_isSet) {
        obj.insert(QString("startLat"), ::OpenAPI::toJsonValue(m_start_lat));
    }
    if (m_start_lon_isSet) {
        obj.insert(QString("startLon"), ::OpenAPI::toJsonValue(m_start_lon));
    }
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    return obj;
}

QString OAITravelViewModel::getDistance() const {
    return m_distance;
}
void OAITravelViewModel::setDistance(const QString &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAITravelViewModel::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAITravelViewModel::is_distance_Valid() const{
    return m_distance_isValid;
}

QString OAITravelViewModel::getProximity() const {
    return m_proximity;
}
void OAITravelViewModel::setProximity(const QString &proximity) {
    m_proximity = proximity;
    m_proximity_isSet = true;
}

bool OAITravelViewModel::is_proximity_Set() const{
    return m_proximity_isSet;
}

bool OAITravelViewModel::is_proximity_Valid() const{
    return m_proximity_isValid;
}

QString OAITravelViewModel::getStartAddress() const {
    return m_start_address;
}
void OAITravelViewModel::setStartAddress(const QString &start_address) {
    m_start_address = start_address;
    m_start_address_isSet = true;
}

bool OAITravelViewModel::is_start_address_Set() const{
    return m_start_address_isSet;
}

bool OAITravelViewModel::is_start_address_Valid() const{
    return m_start_address_isValid;
}

QString OAITravelViewModel::getStartLat() const {
    return m_start_lat;
}
void OAITravelViewModel::setStartLat(const QString &start_lat) {
    m_start_lat = start_lat;
    m_start_lat_isSet = true;
}

bool OAITravelViewModel::is_start_lat_Set() const{
    return m_start_lat_isSet;
}

bool OAITravelViewModel::is_start_lat_Valid() const{
    return m_start_lat_isValid;
}

QString OAITravelViewModel::getStartLon() const {
    return m_start_lon;
}
void OAITravelViewModel::setStartLon(const QString &start_lon) {
    m_start_lon = start_lon;
    m_start_lon_isSet = true;
}

bool OAITravelViewModel::is_start_lon_Set() const{
    return m_start_lon_isSet;
}

bool OAITravelViewModel::is_start_lon_Valid() const{
    return m_start_lon_isValid;
}

QString OAITravelViewModel::getUnits() const {
    return m_units;
}
void OAITravelViewModel::setUnits(const QString &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAITravelViewModel::is_units_Set() const{
    return m_units_isSet;
}

bool OAITravelViewModel::is_units_Valid() const{
    return m_units_isValid;
}

bool OAITravelViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proximity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITravelViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
