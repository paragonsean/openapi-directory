/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepeatInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepeatInputModel::OAIRepeatInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepeatInputModel::OAIRepeatInputModel() {
    this->initializeModel();
}

OAIRepeatInputModel::~OAIRepeatInputModel() {}

void OAIRepeatInputModel::initializeModel() {

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_month_day_isSet = false;
    m_month_day_isValid = false;

    m_month_type_isSet = false;
    m_month_type_isValid = false;

    m_weekdays_isSet = false;
    m_weekdays_isValid = false;
}

void OAIRepeatInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepeatInputModel::fromJsonObject(QJsonObject json) {

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_month_day_isValid = ::OpenAPI::fromJsonValue(m_month_day, json[QString("monthDay")]);
    m_month_day_isSet = !json[QString("monthDay")].isNull() && m_month_day_isValid;

    m_month_type_isValid = ::OpenAPI::fromJsonValue(m_month_type, json[QString("monthType")]);
    m_month_type_isSet = !json[QString("monthType")].isNull() && m_month_type_isValid;

    m_weekdays_isValid = ::OpenAPI::fromJsonValue(m_weekdays, json[QString("weekdays")]);
    m_weekdays_isSet = !json[QString("weekdays")].isNull() && m_weekdays_isValid;
}

QString OAIRepeatInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepeatInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_month_day_isSet) {
        obj.insert(QString("monthDay"), ::OpenAPI::toJsonValue(m_month_day));
    }
    if (m_month_type_isSet) {
        obj.insert(QString("monthType"), ::OpenAPI::toJsonValue(m_month_type));
    }
    if (m_weekdays_isSet) {
        obj.insert(QString("weekdays"), ::OpenAPI::toJsonValue(m_weekdays));
    }
    return obj;
}

QString OAIRepeatInputModel::getFrequency() const {
    return m_frequency;
}
void OAIRepeatInputModel::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIRepeatInputModel::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIRepeatInputModel::is_frequency_Valid() const{
    return m_frequency_isValid;
}

qint32 OAIRepeatInputModel::getInterval() const {
    return m_interval;
}
void OAIRepeatInputModel::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIRepeatInputModel::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIRepeatInputModel::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAIRepeatInputModel::getMonthDay() const {
    return m_month_day;
}
void OAIRepeatInputModel::setMonthDay(const qint32 &month_day) {
    m_month_day = month_day;
    m_month_day_isSet = true;
}

bool OAIRepeatInputModel::is_month_day_Set() const{
    return m_month_day_isSet;
}

bool OAIRepeatInputModel::is_month_day_Valid() const{
    return m_month_day_isValid;
}

QString OAIRepeatInputModel::getMonthType() const {
    return m_month_type;
}
void OAIRepeatInputModel::setMonthType(const QString &month_type) {
    m_month_type = month_type;
    m_month_type_isSet = true;
}

bool OAIRepeatInputModel::is_month_type_Set() const{
    return m_month_type_isSet;
}

bool OAIRepeatInputModel::is_month_type_Valid() const{
    return m_month_type_isValid;
}

QString OAIRepeatInputModel::getWeekdays() const {
    return m_weekdays;
}
void OAIRepeatInputModel::setWeekdays(const QString &weekdays) {
    m_weekdays = weekdays;
    m_weekdays_isSet = true;
}

bool OAIRepeatInputModel::is_weekdays_Set() const{
    return m_weekdays_isSet;
}

bool OAIRepeatInputModel::is_weekdays_Valid() const{
    return m_weekdays_isValid;
}

bool OAIRepeatInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekdays_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepeatInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
