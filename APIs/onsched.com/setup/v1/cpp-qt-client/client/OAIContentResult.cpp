/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentResult::OAIContentResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentResult::OAIContentResult() {
    this->initializeModel();
}

OAIContentResult::~OAIContentResult() {}

void OAIContentResult::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIContentResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentResult::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;
}

QString OAIContentResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentResult::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

QString OAIContentResult::getContent() const {
    return m_content;
}
void OAIContentResult::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIContentResult::is_content_Set() const{
    return m_content_isSet;
}

bool OAIContentResult::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIContentResult::getContentType() const {
    return m_content_type;
}
void OAIContentResult::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIContentResult::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIContentResult::is_content_type_Valid() const{
    return m_content_type_isValid;
}

qint32 OAIContentResult::getStatusCode() const {
    return m_status_code;
}
void OAIContentResult::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIContentResult::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIContentResult::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIContentResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
