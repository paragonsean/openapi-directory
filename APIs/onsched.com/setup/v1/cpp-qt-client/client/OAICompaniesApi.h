/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICompaniesApi_H
#define OAI_OAICompaniesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICompanyDomainInputModel.h"
#include "OAICompanyDomainListViewModel.h"
#include "OAICompanyDomainUpdateModel.h"
#include "OAICompanyDomainViewModel.h"
#include "OAICompanyInputModel.h"
#include "OAICompanyUpdateModel.h"
#include "OAICompanyViewModel.h"
#include "OAIContentResult.h"
#include "OAIEmailTemplateListViewModel.h"
#include "OAIMasterEmailTemplateSettingsViewModel.h"
#include "OAIMasterTemplateSettingsInputModel.h"
#include "OAIRegionInputModel.h"
#include "OAIRegionListViewModel.h"
#include "OAIRegionUpdateModel.h"
#include "OAIRegionViewModel.h"
#include "OAITimezoneViewModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICompaniesApi : public QObject {
    Q_OBJECT

public:
    OAICompaniesApi(const int timeOut = 0);
    ~OAICompaniesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void setupV1CompaniesDomainsGet();

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1CompaniesDomainsIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1CompaniesDomainsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_company_domain_update_model OAICompanyDomainUpdateModel [optional]
    */
    virtual void setupV1CompaniesDomainsIdPut(const QString &id, const ::OpenAPI::OptionalParam<OAICompanyDomainUpdateModel> &oai_company_domain_update_model = ::OpenAPI::OptionalParam<OAICompanyDomainUpdateModel>());

    /**
    * @param[in]  oai_company_domain_input_model OAICompanyDomainInputModel [optional]
    */
    virtual void setupV1CompaniesDomainsPost(const ::OpenAPI::OptionalParam<OAICompanyDomainInputModel> &oai_company_domain_input_model = ::OpenAPI::OptionalParam<OAICompanyDomainInputModel>());


    virtual void setupV1CompaniesEmailTemplatesGet();


    virtual void setupV1CompaniesEmailTemplatesMasterDelete();


    virtual void setupV1CompaniesEmailTemplatesMasterGet();

    /**
    * @param[in]  oai_master_template_settings_input_model OAIMasterTemplateSettingsInputModel [optional]
    */
    virtual void setupV1CompaniesEmailTemplatesMasterPost(const ::OpenAPI::OptionalParam<OAIMasterTemplateSettingsInputModel> &oai_master_template_settings_input_model = ::OpenAPI::OptionalParam<OAIMasterTemplateSettingsInputModel>());

    /**
    * @param[in]  template_name QString [required]
    */
    virtual void setupV1CompaniesEmailTemplatesTemplateNameGet(const QString &template_name);


    virtual void setupV1CompaniesGet();

    /**
    * @param[in]  oai_company_input_model OAICompanyInputModel [optional]
    */
    virtual void setupV1CompaniesPost(const ::OpenAPI::OptionalParam<OAICompanyInputModel> &oai_company_input_model = ::OpenAPI::OptionalParam<OAICompanyInputModel>());

    /**
    * @param[in]  oai_company_update_model OAICompanyUpdateModel [optional]
    */
    virtual void setupV1CompaniesPut(const ::OpenAPI::OptionalParam<OAICompanyUpdateModel> &oai_company_update_model = ::OpenAPI::OptionalParam<OAICompanyUpdateModel>());

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void setupV1CompaniesRegionsGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1CompaniesRegionsIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1CompaniesRegionsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_region_update_model OAIRegionUpdateModel [optional]
    */
    virtual void setupV1CompaniesRegionsIdPut(const QString &id, const ::OpenAPI::OptionalParam<OAIRegionUpdateModel> &oai_region_update_model = ::OpenAPI::OptionalParam<OAIRegionUpdateModel>());

    /**
    * @param[in]  oai_region_input_model OAIRegionInputModel [optional]
    */
    virtual void setupV1CompaniesRegionsPost(const ::OpenAPI::OptionalParam<OAIRegionInputModel> &oai_region_input_model = ::OpenAPI::OptionalParam<OAIRegionInputModel>());

    /**
    * @param[in]  date QDateTime [required]
    */
    virtual void setupV1CompaniesTimezonesDateGet(const QDateTime &date);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void setupV1CompaniesDomainsGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesDomainsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesDomainsIdGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesDomainsIdPutCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesDomainsPostCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesEmailTemplatesGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesEmailTemplatesMasterDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesEmailTemplatesMasterGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesEmailTemplatesMasterPostCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesEmailTemplatesTemplateNameGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesPostCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesPutCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesRegionsGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesRegionsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesRegionsIdGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesRegionsIdPutCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesRegionsPostCallback(OAIHttpRequestWorker *worker);
    void setupV1CompaniesTimezonesDateGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void setupV1CompaniesDomainsGetSignal(OAICompanyDomainListViewModel summary);
    void setupV1CompaniesDomainsIdDeleteSignal(OAICompanyDomainViewModel summary);
    void setupV1CompaniesDomainsIdGetSignal(OAICompanyDomainViewModel summary);
    void setupV1CompaniesDomainsIdPutSignal(OAICompanyDomainViewModel summary);
    void setupV1CompaniesDomainsPostSignal(OAICompanyDomainViewModel summary);
    void setupV1CompaniesEmailTemplatesGetSignal(OAIEmailTemplateListViewModel summary);
    void setupV1CompaniesEmailTemplatesMasterDeleteSignal(OAIMasterEmailTemplateSettingsViewModel summary);
    void setupV1CompaniesEmailTemplatesMasterGetSignal(OAIMasterEmailTemplateSettingsViewModel summary);
    void setupV1CompaniesEmailTemplatesMasterPostSignal(OAIMasterEmailTemplateSettingsViewModel summary);
    void setupV1CompaniesEmailTemplatesTemplateNameGetSignal(OAIContentResult summary);
    void setupV1CompaniesGetSignal(OAICompanyViewModel summary);
    void setupV1CompaniesPostSignal(OAICompanyViewModel summary);
    void setupV1CompaniesPutSignal(OAICompanyViewModel summary);
    void setupV1CompaniesRegionsGetSignal(OAIRegionListViewModel summary);
    void setupV1CompaniesRegionsIdDeleteSignal(OAIRegionViewModel summary);
    void setupV1CompaniesRegionsIdGetSignal(OAIRegionViewModel summary);
    void setupV1CompaniesRegionsIdPutSignal(OAIRegionViewModel summary);
    void setupV1CompaniesRegionsPostSignal(OAIRegionViewModel summary);
    void setupV1CompaniesTimezonesDateGetSignal(OAITimezoneViewModel summary);


    void setupV1CompaniesDomainsGetSignalFull(OAIHttpRequestWorker *worker, OAICompanyDomainListViewModel summary);
    void setupV1CompaniesDomainsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAICompanyDomainViewModel summary);
    void setupV1CompaniesDomainsIdGetSignalFull(OAIHttpRequestWorker *worker, OAICompanyDomainViewModel summary);
    void setupV1CompaniesDomainsIdPutSignalFull(OAIHttpRequestWorker *worker, OAICompanyDomainViewModel summary);
    void setupV1CompaniesDomainsPostSignalFull(OAIHttpRequestWorker *worker, OAICompanyDomainViewModel summary);
    void setupV1CompaniesEmailTemplatesGetSignalFull(OAIHttpRequestWorker *worker, OAIEmailTemplateListViewModel summary);
    void setupV1CompaniesEmailTemplatesMasterDeleteSignalFull(OAIHttpRequestWorker *worker, OAIMasterEmailTemplateSettingsViewModel summary);
    void setupV1CompaniesEmailTemplatesMasterGetSignalFull(OAIHttpRequestWorker *worker, OAIMasterEmailTemplateSettingsViewModel summary);
    void setupV1CompaniesEmailTemplatesMasterPostSignalFull(OAIHttpRequestWorker *worker, OAIMasterEmailTemplateSettingsViewModel summary);
    void setupV1CompaniesEmailTemplatesTemplateNameGetSignalFull(OAIHttpRequestWorker *worker, OAIContentResult summary);
    void setupV1CompaniesGetSignalFull(OAIHttpRequestWorker *worker, OAICompanyViewModel summary);
    void setupV1CompaniesPostSignalFull(OAIHttpRequestWorker *worker, OAICompanyViewModel summary);
    void setupV1CompaniesPutSignalFull(OAIHttpRequestWorker *worker, OAICompanyViewModel summary);
    void setupV1CompaniesRegionsGetSignalFull(OAIHttpRequestWorker *worker, OAIRegionListViewModel summary);
    void setupV1CompaniesRegionsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIRegionViewModel summary);
    void setupV1CompaniesRegionsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIRegionViewModel summary);
    void setupV1CompaniesRegionsIdPutSignalFull(OAIHttpRequestWorker *worker, OAIRegionViewModel summary);
    void setupV1CompaniesRegionsPostSignalFull(OAIHttpRequestWorker *worker, OAIRegionViewModel summary);
    void setupV1CompaniesTimezonesDateGetSignalFull(OAIHttpRequestWorker *worker, OAITimezoneViewModel summary);

    Q_DECL_DEPRECATED_X("Use setupV1CompaniesDomainsGetSignalError() instead")
    void setupV1CompaniesDomainsGetSignalE(OAICompanyDomainListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesDomainsGetSignalError(OAICompanyDomainListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesDomainsIdDeleteSignalError() instead")
    void setupV1CompaniesDomainsIdDeleteSignalE(OAICompanyDomainViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesDomainsIdDeleteSignalError(OAICompanyDomainViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesDomainsIdGetSignalError() instead")
    void setupV1CompaniesDomainsIdGetSignalE(OAICompanyDomainViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesDomainsIdGetSignalError(OAICompanyDomainViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesDomainsIdPutSignalError() instead")
    void setupV1CompaniesDomainsIdPutSignalE(OAICompanyDomainViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesDomainsIdPutSignalError(OAICompanyDomainViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesDomainsPostSignalError() instead")
    void setupV1CompaniesDomainsPostSignalE(OAICompanyDomainViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesDomainsPostSignalError(OAICompanyDomainViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesEmailTemplatesGetSignalError() instead")
    void setupV1CompaniesEmailTemplatesGetSignalE(OAIEmailTemplateListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesEmailTemplatesGetSignalError(OAIEmailTemplateListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesEmailTemplatesMasterDeleteSignalError() instead")
    void setupV1CompaniesEmailTemplatesMasterDeleteSignalE(OAIMasterEmailTemplateSettingsViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesEmailTemplatesMasterDeleteSignalError(OAIMasterEmailTemplateSettingsViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesEmailTemplatesMasterGetSignalError() instead")
    void setupV1CompaniesEmailTemplatesMasterGetSignalE(OAIMasterEmailTemplateSettingsViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesEmailTemplatesMasterGetSignalError(OAIMasterEmailTemplateSettingsViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesEmailTemplatesMasterPostSignalError() instead")
    void setupV1CompaniesEmailTemplatesMasterPostSignalE(OAIMasterEmailTemplateSettingsViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesEmailTemplatesMasterPostSignalError(OAIMasterEmailTemplateSettingsViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesEmailTemplatesTemplateNameGetSignalError() instead")
    void setupV1CompaniesEmailTemplatesTemplateNameGetSignalE(OAIContentResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesEmailTemplatesTemplateNameGetSignalError(OAIContentResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesGetSignalError() instead")
    void setupV1CompaniesGetSignalE(OAICompanyViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesGetSignalError(OAICompanyViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesPostSignalError() instead")
    void setupV1CompaniesPostSignalE(OAICompanyViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesPostSignalError(OAICompanyViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesPutSignalError() instead")
    void setupV1CompaniesPutSignalE(OAICompanyViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesPutSignalError(OAICompanyViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesRegionsGetSignalError() instead")
    void setupV1CompaniesRegionsGetSignalE(OAIRegionListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesRegionsGetSignalError(OAIRegionListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesRegionsIdDeleteSignalError() instead")
    void setupV1CompaniesRegionsIdDeleteSignalE(OAIRegionViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesRegionsIdDeleteSignalError(OAIRegionViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesRegionsIdGetSignalError() instead")
    void setupV1CompaniesRegionsIdGetSignalE(OAIRegionViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesRegionsIdGetSignalError(OAIRegionViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesRegionsIdPutSignalError() instead")
    void setupV1CompaniesRegionsIdPutSignalE(OAIRegionViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesRegionsIdPutSignalError(OAIRegionViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesRegionsPostSignalError() instead")
    void setupV1CompaniesRegionsPostSignalE(OAIRegionViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesRegionsPostSignalError(OAIRegionViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesTimezonesDateGetSignalError() instead")
    void setupV1CompaniesTimezonesDateGetSignalE(OAITimezoneViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesTimezonesDateGetSignalError(OAITimezoneViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use setupV1CompaniesDomainsGetSignalErrorFull() instead")
    void setupV1CompaniesDomainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesDomainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesDomainsIdDeleteSignalErrorFull() instead")
    void setupV1CompaniesDomainsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesDomainsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesDomainsIdGetSignalErrorFull() instead")
    void setupV1CompaniesDomainsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesDomainsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesDomainsIdPutSignalErrorFull() instead")
    void setupV1CompaniesDomainsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesDomainsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesDomainsPostSignalErrorFull() instead")
    void setupV1CompaniesDomainsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesDomainsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesEmailTemplatesGetSignalErrorFull() instead")
    void setupV1CompaniesEmailTemplatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesEmailTemplatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesEmailTemplatesMasterDeleteSignalErrorFull() instead")
    void setupV1CompaniesEmailTemplatesMasterDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesEmailTemplatesMasterDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesEmailTemplatesMasterGetSignalErrorFull() instead")
    void setupV1CompaniesEmailTemplatesMasterGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesEmailTemplatesMasterGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesEmailTemplatesMasterPostSignalErrorFull() instead")
    void setupV1CompaniesEmailTemplatesMasterPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesEmailTemplatesMasterPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesEmailTemplatesTemplateNameGetSignalErrorFull() instead")
    void setupV1CompaniesEmailTemplatesTemplateNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesEmailTemplatesTemplateNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesGetSignalErrorFull() instead")
    void setupV1CompaniesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesPostSignalErrorFull() instead")
    void setupV1CompaniesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesPutSignalErrorFull() instead")
    void setupV1CompaniesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesRegionsGetSignalErrorFull() instead")
    void setupV1CompaniesRegionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesRegionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesRegionsIdDeleteSignalErrorFull() instead")
    void setupV1CompaniesRegionsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesRegionsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesRegionsIdGetSignalErrorFull() instead")
    void setupV1CompaniesRegionsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesRegionsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesRegionsIdPutSignalErrorFull() instead")
    void setupV1CompaniesRegionsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesRegionsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesRegionsPostSignalErrorFull() instead")
    void setupV1CompaniesRegionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesRegionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CompaniesTimezonesDateGetSignalErrorFull() instead")
    void setupV1CompaniesTimezonesDateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CompaniesTimezonesDateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
