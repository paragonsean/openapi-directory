/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBusinessPermissionViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBusinessPermissionViewModel::OAIBusinessPermissionViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBusinessPermissionViewModel::OAIBusinessPermissionViewModel() {
    this->initializeModel();
}

OAIBusinessPermissionViewModel::~OAIBusinessPermissionViewModel() {}

void OAIBusinessPermissionViewModel::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIBusinessPermissionViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBusinessPermissionViewModel::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("function")]);
    m_function_isSet = !json[QString("function")].isNull() && m_function_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIBusinessPermissionViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBusinessPermissionViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_access_isSet) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_function_isSet) {
        obj.insert(QString("function"), ::OpenAPI::toJsonValue(m_function));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIBusinessPermissionViewModel::getAccess() const {
    return m_access;
}
void OAIBusinessPermissionViewModel::setAccess(const QString &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIBusinessPermissionViewModel::is_access_Set() const{
    return m_access_isSet;
}

bool OAIBusinessPermissionViewModel::is_access_Valid() const{
    return m_access_isValid;
}

QString OAIBusinessPermissionViewModel::getFunction() const {
    return m_function;
}
void OAIBusinessPermissionViewModel::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIBusinessPermissionViewModel::is_function_Set() const{
    return m_function_isSet;
}

bool OAIBusinessPermissionViewModel::is_function_Valid() const{
    return m_function_isValid;
}

QString OAIBusinessPermissionViewModel::getObject() const {
    return m_object;
}
void OAIBusinessPermissionViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIBusinessPermissionViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIBusinessPermissionViewModel::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIBusinessPermissionViewModel::getRole() const {
    return m_role;
}
void OAIBusinessPermissionViewModel::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIBusinessPermissionViewModel::is_role_Set() const{
    return m_role_isSet;
}

bool OAIBusinessPermissionViewModel::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIBusinessPermissionViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBusinessPermissionViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
