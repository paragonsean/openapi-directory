/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICalendarsApi_H
#define OAI_OAICalendarsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICalendarBlockInputModel.h"
#include "OAICalendarBlockListViewModel.h"
#include "OAICalendarBlockUpdateModel.h"
#include "OAICalendarBlockViewModel.h"
#include "OAIResourceBlockViewModel.h"
#include "OAIScheduleInputModel.h"
#include "OAIScheduleListViewModel.h"
#include "OAIScheduleUpdateModel.h"
#include "OAIScheduleViewModel.h"
#include "OAIServiceListViewModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICalendarsApi : public QObject {
    Q_OBJECT

public:
    OAICalendarsApi(const int timeOut = 0);
    ~OAICalendarsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1CalendarsBlockIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_calendar_block_update_model OAICalendarBlockUpdateModel [optional]
    */
    virtual void setupV1CalendarsBlockIdPut(const QString &id, const ::OpenAPI::OptionalParam<OAICalendarBlockUpdateModel> &oai_calendar_block_update_model = ::OpenAPI::OptionalParam<OAICalendarBlockUpdateModel>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1CalendarsBlocksIdGet(const QString &id);

    /**
    * @param[in]  location_id QString [optional]
    * @param[in]  deleted bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void setupV1CalendarsGet(const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_calendar_block_input_model OAICalendarBlockInputModel [optional]
    */
    virtual void setupV1CalendarsIdBlockPost(const QString &id, const ::OpenAPI::OptionalParam<OAICalendarBlockInputModel> &oai_calendar_block_input_model = ::OpenAPI::OptionalParam<OAICalendarBlockInputModel>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void setupV1CalendarsIdBlocksGet(const QString &id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1CalendarsIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1CalendarsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_schedule_update_model OAIScheduleUpdateModel [optional]
    */
    virtual void setupV1CalendarsIdPut(const QString &id, const ::OpenAPI::OptionalParam<OAIScheduleUpdateModel> &oai_schedule_update_model = ::OpenAPI::OptionalParam<OAIScheduleUpdateModel>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1CalendarsIdRecoverPut(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void setupV1CalendarsIdServicesGet(const QString &id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_schedule_input_model OAIScheduleInputModel [optional]
    */
    virtual void setupV1CalendarsPost(const ::OpenAPI::OptionalParam<OAIScheduleInputModel> &oai_schedule_input_model = ::OpenAPI::OptionalParam<OAIScheduleInputModel>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void setupV1CalendarsBlockIdDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1CalendarsBlockIdPutCallback(OAIHttpRequestWorker *worker);
    void setupV1CalendarsBlocksIdGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CalendarsGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CalendarsIdBlockPostCallback(OAIHttpRequestWorker *worker);
    void setupV1CalendarsIdBlocksGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CalendarsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1CalendarsIdGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CalendarsIdPutCallback(OAIHttpRequestWorker *worker);
    void setupV1CalendarsIdRecoverPutCallback(OAIHttpRequestWorker *worker);
    void setupV1CalendarsIdServicesGetCallback(OAIHttpRequestWorker *worker);
    void setupV1CalendarsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void setupV1CalendarsBlockIdDeleteSignal(OAICalendarBlockViewModel summary);
    void setupV1CalendarsBlockIdPutSignal(OAICalendarBlockViewModel summary);
    void setupV1CalendarsBlocksIdGetSignal(OAICalendarBlockViewModel summary);
    void setupV1CalendarsGetSignal(OAIScheduleListViewModel summary);
    void setupV1CalendarsIdBlockPostSignal(OAIResourceBlockViewModel summary);
    void setupV1CalendarsIdBlocksGetSignal(OAICalendarBlockListViewModel summary);
    void setupV1CalendarsIdDeleteSignal(OAIScheduleViewModel summary);
    void setupV1CalendarsIdGetSignal(OAIScheduleViewModel summary);
    void setupV1CalendarsIdPutSignal(OAIScheduleViewModel summary);
    void setupV1CalendarsIdRecoverPutSignal(OAIScheduleViewModel summary);
    void setupV1CalendarsIdServicesGetSignal(OAIServiceListViewModel summary);
    void setupV1CalendarsPostSignal(OAIScheduleViewModel summary);


    void setupV1CalendarsBlockIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAICalendarBlockViewModel summary);
    void setupV1CalendarsBlockIdPutSignalFull(OAIHttpRequestWorker *worker, OAICalendarBlockViewModel summary);
    void setupV1CalendarsBlocksIdGetSignalFull(OAIHttpRequestWorker *worker, OAICalendarBlockViewModel summary);
    void setupV1CalendarsGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleListViewModel summary);
    void setupV1CalendarsIdBlockPostSignalFull(OAIHttpRequestWorker *worker, OAIResourceBlockViewModel summary);
    void setupV1CalendarsIdBlocksGetSignalFull(OAIHttpRequestWorker *worker, OAICalendarBlockListViewModel summary);
    void setupV1CalendarsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIScheduleViewModel summary);
    void setupV1CalendarsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleViewModel summary);
    void setupV1CalendarsIdPutSignalFull(OAIHttpRequestWorker *worker, OAIScheduleViewModel summary);
    void setupV1CalendarsIdRecoverPutSignalFull(OAIHttpRequestWorker *worker, OAIScheduleViewModel summary);
    void setupV1CalendarsIdServicesGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceListViewModel summary);
    void setupV1CalendarsPostSignalFull(OAIHttpRequestWorker *worker, OAIScheduleViewModel summary);

    Q_DECL_DEPRECATED_X("Use setupV1CalendarsBlockIdDeleteSignalError() instead")
    void setupV1CalendarsBlockIdDeleteSignalE(OAICalendarBlockViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsBlockIdDeleteSignalError(OAICalendarBlockViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsBlockIdPutSignalError() instead")
    void setupV1CalendarsBlockIdPutSignalE(OAICalendarBlockViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsBlockIdPutSignalError(OAICalendarBlockViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsBlocksIdGetSignalError() instead")
    void setupV1CalendarsBlocksIdGetSignalE(OAICalendarBlockViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsBlocksIdGetSignalError(OAICalendarBlockViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsGetSignalError() instead")
    void setupV1CalendarsGetSignalE(OAIScheduleListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsGetSignalError(OAIScheduleListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdBlockPostSignalError() instead")
    void setupV1CalendarsIdBlockPostSignalE(OAIResourceBlockViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdBlockPostSignalError(OAIResourceBlockViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdBlocksGetSignalError() instead")
    void setupV1CalendarsIdBlocksGetSignalE(OAICalendarBlockListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdBlocksGetSignalError(OAICalendarBlockListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdDeleteSignalError() instead")
    void setupV1CalendarsIdDeleteSignalE(OAIScheduleViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdDeleteSignalError(OAIScheduleViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdGetSignalError() instead")
    void setupV1CalendarsIdGetSignalE(OAIScheduleViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdGetSignalError(OAIScheduleViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdPutSignalError() instead")
    void setupV1CalendarsIdPutSignalE(OAIScheduleViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdPutSignalError(OAIScheduleViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdRecoverPutSignalError() instead")
    void setupV1CalendarsIdRecoverPutSignalE(OAIScheduleViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdRecoverPutSignalError(OAIScheduleViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdServicesGetSignalError() instead")
    void setupV1CalendarsIdServicesGetSignalE(OAIServiceListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdServicesGetSignalError(OAIServiceListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsPostSignalError() instead")
    void setupV1CalendarsPostSignalE(OAIScheduleViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsPostSignalError(OAIScheduleViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use setupV1CalendarsBlockIdDeleteSignalErrorFull() instead")
    void setupV1CalendarsBlockIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsBlockIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsBlockIdPutSignalErrorFull() instead")
    void setupV1CalendarsBlockIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsBlockIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsBlocksIdGetSignalErrorFull() instead")
    void setupV1CalendarsBlocksIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsBlocksIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsGetSignalErrorFull() instead")
    void setupV1CalendarsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdBlockPostSignalErrorFull() instead")
    void setupV1CalendarsIdBlockPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdBlockPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdBlocksGetSignalErrorFull() instead")
    void setupV1CalendarsIdBlocksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdBlocksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdDeleteSignalErrorFull() instead")
    void setupV1CalendarsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdGetSignalErrorFull() instead")
    void setupV1CalendarsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdPutSignalErrorFull() instead")
    void setupV1CalendarsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdRecoverPutSignalErrorFull() instead")
    void setupV1CalendarsIdRecoverPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdRecoverPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsIdServicesGetSignalErrorFull() instead")
    void setupV1CalendarsIdServicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsIdServicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1CalendarsPostSignalErrorFull() instead")
    void setupV1CalendarsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1CalendarsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
