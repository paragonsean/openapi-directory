/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISystemTimezoneViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemTimezoneViewModel::OAISystemTimezoneViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemTimezoneViewModel::OAISystemTimezoneViewModel() {
    this->initializeModel();
}

OAISystemTimezoneViewModel::~OAISystemTimezoneViewModel() {}

void OAISystemTimezoneViewModel::initializeModel() {

    m_base_utc_offset_isSet = false;
    m_base_utc_offset_isValid = false;

    m_daylight_name_isSet = false;
    m_daylight_name_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_standard_name_isSet = false;
    m_standard_name_isValid = false;

    m_supports_daylight_saving_time_isSet = false;
    m_supports_daylight_saving_time_isValid = false;

    m_timezone_iana_isSet = false;
    m_timezone_iana_isValid = false;

    m_timezone_id_isSet = false;
    m_timezone_id_isValid = false;
}

void OAISystemTimezoneViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemTimezoneViewModel::fromJsonObject(QJsonObject json) {

    m_base_utc_offset_isValid = ::OpenAPI::fromJsonValue(m_base_utc_offset, json[QString("baseUtcOffset")]);
    m_base_utc_offset_isSet = !json[QString("baseUtcOffset")].isNull() && m_base_utc_offset_isValid;

    m_daylight_name_isValid = ::OpenAPI::fromJsonValue(m_daylight_name, json[QString("daylightName")]);
    m_daylight_name_isSet = !json[QString("daylightName")].isNull() && m_daylight_name_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_standard_name_isValid = ::OpenAPI::fromJsonValue(m_standard_name, json[QString("standardName")]);
    m_standard_name_isSet = !json[QString("standardName")].isNull() && m_standard_name_isValid;

    m_supports_daylight_saving_time_isValid = ::OpenAPI::fromJsonValue(m_supports_daylight_saving_time, json[QString("supportsDaylightSavingTime")]);
    m_supports_daylight_saving_time_isSet = !json[QString("supportsDaylightSavingTime")].isNull() && m_supports_daylight_saving_time_isValid;

    m_timezone_iana_isValid = ::OpenAPI::fromJsonValue(m_timezone_iana, json[QString("timezoneIana")]);
    m_timezone_iana_isSet = !json[QString("timezoneIana")].isNull() && m_timezone_iana_isValid;

    m_timezone_id_isValid = ::OpenAPI::fromJsonValue(m_timezone_id, json[QString("timezoneId")]);
    m_timezone_id_isSet = !json[QString("timezoneId")].isNull() && m_timezone_id_isValid;
}

QString OAISystemTimezoneViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemTimezoneViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_base_utc_offset_isSet) {
        obj.insert(QString("baseUtcOffset"), ::OpenAPI::toJsonValue(m_base_utc_offset));
    }
    if (m_daylight_name_isSet) {
        obj.insert(QString("daylightName"), ::OpenAPI::toJsonValue(m_daylight_name));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_standard_name_isSet) {
        obj.insert(QString("standardName"), ::OpenAPI::toJsonValue(m_standard_name));
    }
    if (m_supports_daylight_saving_time_isSet) {
        obj.insert(QString("supportsDaylightSavingTime"), ::OpenAPI::toJsonValue(m_supports_daylight_saving_time));
    }
    if (m_timezone_iana_isSet) {
        obj.insert(QString("timezoneIana"), ::OpenAPI::toJsonValue(m_timezone_iana));
    }
    if (m_timezone_id_isSet) {
        obj.insert(QString("timezoneId"), ::OpenAPI::toJsonValue(m_timezone_id));
    }
    return obj;
}

qint32 OAISystemTimezoneViewModel::getBaseUtcOffset() const {
    return m_base_utc_offset;
}
void OAISystemTimezoneViewModel::setBaseUtcOffset(const qint32 &base_utc_offset) {
    m_base_utc_offset = base_utc_offset;
    m_base_utc_offset_isSet = true;
}

bool OAISystemTimezoneViewModel::is_base_utc_offset_Set() const{
    return m_base_utc_offset_isSet;
}

bool OAISystemTimezoneViewModel::is_base_utc_offset_Valid() const{
    return m_base_utc_offset_isValid;
}

QString OAISystemTimezoneViewModel::getDaylightName() const {
    return m_daylight_name;
}
void OAISystemTimezoneViewModel::setDaylightName(const QString &daylight_name) {
    m_daylight_name = daylight_name;
    m_daylight_name_isSet = true;
}

bool OAISystemTimezoneViewModel::is_daylight_name_Set() const{
    return m_daylight_name_isSet;
}

bool OAISystemTimezoneViewModel::is_daylight_name_Valid() const{
    return m_daylight_name_isValid;
}

QString OAISystemTimezoneViewModel::getDisplayName() const {
    return m_display_name;
}
void OAISystemTimezoneViewModel::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISystemTimezoneViewModel::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISystemTimezoneViewModel::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAISystemTimezoneViewModel::getStandardName() const {
    return m_standard_name;
}
void OAISystemTimezoneViewModel::setStandardName(const QString &standard_name) {
    m_standard_name = standard_name;
    m_standard_name_isSet = true;
}

bool OAISystemTimezoneViewModel::is_standard_name_Set() const{
    return m_standard_name_isSet;
}

bool OAISystemTimezoneViewModel::is_standard_name_Valid() const{
    return m_standard_name_isValid;
}

bool OAISystemTimezoneViewModel::isSupportsDaylightSavingTime() const {
    return m_supports_daylight_saving_time;
}
void OAISystemTimezoneViewModel::setSupportsDaylightSavingTime(const bool &supports_daylight_saving_time) {
    m_supports_daylight_saving_time = supports_daylight_saving_time;
    m_supports_daylight_saving_time_isSet = true;
}

bool OAISystemTimezoneViewModel::is_supports_daylight_saving_time_Set() const{
    return m_supports_daylight_saving_time_isSet;
}

bool OAISystemTimezoneViewModel::is_supports_daylight_saving_time_Valid() const{
    return m_supports_daylight_saving_time_isValid;
}

QString OAISystemTimezoneViewModel::getTimezoneIana() const {
    return m_timezone_iana;
}
void OAISystemTimezoneViewModel::setTimezoneIana(const QString &timezone_iana) {
    m_timezone_iana = timezone_iana;
    m_timezone_iana_isSet = true;
}

bool OAISystemTimezoneViewModel::is_timezone_iana_Set() const{
    return m_timezone_iana_isSet;
}

bool OAISystemTimezoneViewModel::is_timezone_iana_Valid() const{
    return m_timezone_iana_isValid;
}

QString OAISystemTimezoneViewModel::getTimezoneId() const {
    return m_timezone_id;
}
void OAISystemTimezoneViewModel::setTimezoneId(const QString &timezone_id) {
    m_timezone_id = timezone_id;
    m_timezone_id_isSet = true;
}

bool OAISystemTimezoneViewModel::is_timezone_id_Set() const{
    return m_timezone_id_isSet;
}

bool OAISystemTimezoneViewModel::is_timezone_id_Valid() const{
    return m_timezone_id_isValid;
}

bool OAISystemTimezoneViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_utc_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daylight_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_daylight_saving_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_iana_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemTimezoneViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
