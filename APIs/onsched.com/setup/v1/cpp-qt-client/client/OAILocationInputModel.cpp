/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationInputModel::OAILocationInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationInputModel::OAILocationInputModel() {
    this->initializeModel();
}

OAILocationInputModel::~OAILocationInputModel() {}

void OAILocationInputModel::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_admin_email_isSet = false;
    m_admin_email_isValid = false;

    m_admin_name_isSet = false;
    m_admin_name_isValid = false;

    m_appointment_reminders_isSet = false;
    m_appointment_reminders_isValid = false;

    m_business_hours_isSet = false;
    m_business_hours_isValid = false;

    m_defaults_isSet = false;
    m_defaults_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_friendly_id_isSet = false;
    m_friendly_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_region_id_isSet = false;
    m_region_id_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_timezone_name_isSet = false;
    m_timezone_name_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAILocationInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationInputModel::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_admin_email_isValid = ::OpenAPI::fromJsonValue(m_admin_email, json[QString("adminEmail")]);
    m_admin_email_isSet = !json[QString("adminEmail")].isNull() && m_admin_email_isValid;

    m_admin_name_isValid = ::OpenAPI::fromJsonValue(m_admin_name, json[QString("adminName")]);
    m_admin_name_isSet = !json[QString("adminName")].isNull() && m_admin_name_isValid;

    m_appointment_reminders_isValid = ::OpenAPI::fromJsonValue(m_appointment_reminders, json[QString("appointmentReminders")]);
    m_appointment_reminders_isSet = !json[QString("appointmentReminders")].isNull() && m_appointment_reminders_isValid;

    m_business_hours_isValid = ::OpenAPI::fromJsonValue(m_business_hours, json[QString("businessHours")]);
    m_business_hours_isSet = !json[QString("businessHours")].isNull() && m_business_hours_isValid;

    m_defaults_isValid = ::OpenAPI::fromJsonValue(m_defaults, json[QString("defaults")]);
    m_defaults_isSet = !json[QString("defaults")].isNull() && m_defaults_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_friendly_id_isValid = ::OpenAPI::fromJsonValue(m_friendly_id, json[QString("friendlyId")]);
    m_friendly_id_isSet = !json[QString("friendlyId")].isNull() && m_friendly_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_region_id_isValid = ::OpenAPI::fromJsonValue(m_region_id, json[QString("regionId")]);
    m_region_id_isSet = !json[QString("regionId")].isNull() && m_region_id_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_timezone_name_isValid = ::OpenAPI::fromJsonValue(m_timezone_name, json[QString("timezoneName")]);
    m_timezone_name_isSet = !json[QString("timezoneName")].isNull() && m_timezone_name_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAILocationInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_admin_email_isSet) {
        obj.insert(QString("adminEmail"), ::OpenAPI::toJsonValue(m_admin_email));
    }
    if (m_admin_name_isSet) {
        obj.insert(QString("adminName"), ::OpenAPI::toJsonValue(m_admin_name));
    }
    if (m_appointment_reminders.isSet()) {
        obj.insert(QString("appointmentReminders"), ::OpenAPI::toJsonValue(m_appointment_reminders));
    }
    if (m_business_hours.isSet()) {
        obj.insert(QString("businessHours"), ::OpenAPI::toJsonValue(m_business_hours));
    }
    if (m_defaults.isSet()) {
        obj.insert(QString("defaults"), ::OpenAPI::toJsonValue(m_defaults));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_friendly_id_isSet) {
        obj.insert(QString("friendlyId"), ::OpenAPI::toJsonValue(m_friendly_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_region_id_isSet) {
        obj.insert(QString("regionId"), ::OpenAPI::toJsonValue(m_region_id));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_timezone_name_isSet) {
        obj.insert(QString("timezoneName"), ::OpenAPI::toJsonValue(m_timezone_name));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

OAIAddressInputModel OAILocationInputModel::getAddress() const {
    return m_address;
}
void OAILocationInputModel::setAddress(const OAIAddressInputModel &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILocationInputModel::is_address_Set() const{
    return m_address_isSet;
}

bool OAILocationInputModel::is_address_Valid() const{
    return m_address_isValid;
}

QString OAILocationInputModel::getAdminEmail() const {
    return m_admin_email;
}
void OAILocationInputModel::setAdminEmail(const QString &admin_email) {
    m_admin_email = admin_email;
    m_admin_email_isSet = true;
}

bool OAILocationInputModel::is_admin_email_Set() const{
    return m_admin_email_isSet;
}

bool OAILocationInputModel::is_admin_email_Valid() const{
    return m_admin_email_isValid;
}

QString OAILocationInputModel::getAdminName() const {
    return m_admin_name;
}
void OAILocationInputModel::setAdminName(const QString &admin_name) {
    m_admin_name = admin_name;
    m_admin_name_isSet = true;
}

bool OAILocationInputModel::is_admin_name_Set() const{
    return m_admin_name_isSet;
}

bool OAILocationInputModel::is_admin_name_Valid() const{
    return m_admin_name_isValid;
}

OAIAppointmentRemindersInputModel OAILocationInputModel::getAppointmentReminders() const {
    return m_appointment_reminders;
}
void OAILocationInputModel::setAppointmentReminders(const OAIAppointmentRemindersInputModel &appointment_reminders) {
    m_appointment_reminders = appointment_reminders;
    m_appointment_reminders_isSet = true;
}

bool OAILocationInputModel::is_appointment_reminders_Set() const{
    return m_appointment_reminders_isSet;
}

bool OAILocationInputModel::is_appointment_reminders_Valid() const{
    return m_appointment_reminders_isValid;
}

OAIBusinessHoursInputModel OAILocationInputModel::getBusinessHours() const {
    return m_business_hours;
}
void OAILocationInputModel::setBusinessHours(const OAIBusinessHoursInputModel &business_hours) {
    m_business_hours = business_hours;
    m_business_hours_isSet = true;
}

bool OAILocationInputModel::is_business_hours_Set() const{
    return m_business_hours_isSet;
}

bool OAILocationInputModel::is_business_hours_Valid() const{
    return m_business_hours_isValid;
}

OAIBusinessDefaultsInputModel OAILocationInputModel::getDefaults() const {
    return m_defaults;
}
void OAILocationInputModel::setDefaults(const OAIBusinessDefaultsInputModel &defaults) {
    m_defaults = defaults;
    m_defaults_isSet = true;
}

bool OAILocationInputModel::is_defaults_Set() const{
    return m_defaults_isSet;
}

bool OAILocationInputModel::is_defaults_Valid() const{
    return m_defaults_isValid;
}

QString OAILocationInputModel::getEmail() const {
    return m_email;
}
void OAILocationInputModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAILocationInputModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAILocationInputModel::is_email_Valid() const{
    return m_email_isValid;
}

QString OAILocationInputModel::getFax() const {
    return m_fax;
}
void OAILocationInputModel::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAILocationInputModel::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAILocationInputModel::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAILocationInputModel::getFriendlyId() const {
    return m_friendly_id;
}
void OAILocationInputModel::setFriendlyId(const QString &friendly_id) {
    m_friendly_id = friendly_id;
    m_friendly_id_isSet = true;
}

bool OAILocationInputModel::is_friendly_id_Set() const{
    return m_friendly_id_isSet;
}

bool OAILocationInputModel::is_friendly_id_Valid() const{
    return m_friendly_id_isValid;
}

QString OAILocationInputModel::getName() const {
    return m_name;
}
void OAILocationInputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILocationInputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAILocationInputModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILocationInputModel::getPhone() const {
    return m_phone;
}
void OAILocationInputModel::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAILocationInputModel::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAILocationInputModel::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAILocationInputModel::getRegionId() const {
    return m_region_id;
}
void OAILocationInputModel::setRegionId(const QString &region_id) {
    m_region_id = region_id;
    m_region_id_isSet = true;
}

bool OAILocationInputModel::is_region_id_Set() const{
    return m_region_id_isSet;
}

bool OAILocationInputModel::is_region_id_Valid() const{
    return m_region_id_isValid;
}

OAIOnlineSettingsInputModel OAILocationInputModel::getSettings() const {
    return m_settings;
}
void OAILocationInputModel::setSettings(const OAIOnlineSettingsInputModel &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAILocationInputModel::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAILocationInputModel::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAILocationInputModel::getTimezoneName() const {
    return m_timezone_name;
}
void OAILocationInputModel::setTimezoneName(const QString &timezone_name) {
    m_timezone_name = timezone_name;
    m_timezone_name_isSet = true;
}

bool OAILocationInputModel::is_timezone_name_Set() const{
    return m_timezone_name_isSet;
}

bool OAILocationInputModel::is_timezone_name_Valid() const{
    return m_timezone_name_isValid;
}

QString OAILocationInputModel::getWebsite() const {
    return m_website;
}
void OAILocationInputModel::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAILocationInputModel::is_website_Set() const{
    return m_website_isSet;
}

bool OAILocationInputModel::is_website_Valid() const{
    return m_website_isValid;
}

bool OAILocationInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_appointment_reminders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
