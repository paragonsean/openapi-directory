/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceCalendarViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceCalendarViewModel::OAIServiceCalendarViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceCalendarViewModel::OAIServiceCalendarViewModel() {
    this->initializeModel();
}

OAIServiceCalendarViewModel::~OAIServiceCalendarViewModel() {}

void OAIServiceCalendarViewModel::initializeModel() {

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_calendar_name_isSet = false;
    m_calendar_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIServiceCalendarViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceCalendarViewModel::fromJsonObject(QJsonObject json) {

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendarId")]);
    m_calendar_id_isSet = !json[QString("calendarId")].isNull() && m_calendar_id_isValid;

    m_calendar_name_isValid = ::OpenAPI::fromJsonValue(m_calendar_name, json[QString("calendarName")]);
    m_calendar_name_isSet = !json[QString("calendarName")].isNull() && m_calendar_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;
}

QString OAIServiceCalendarViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceCalendarViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendarId"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_calendar_name_isSet) {
        obj.insert(QString("calendarName"), ::OpenAPI::toJsonValue(m_calendar_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

QString OAIServiceCalendarViewModel::getCalendarId() const {
    return m_calendar_id;
}
void OAIServiceCalendarViewModel::setCalendarId(const QString &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAIServiceCalendarViewModel::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAIServiceCalendarViewModel::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

QString OAIServiceCalendarViewModel::getCalendarName() const {
    return m_calendar_name;
}
void OAIServiceCalendarViewModel::setCalendarName(const QString &calendar_name) {
    m_calendar_name = calendar_name;
    m_calendar_name_isSet = true;
}

bool OAIServiceCalendarViewModel::is_calendar_name_Set() const{
    return m_calendar_name_isSet;
}

bool OAIServiceCalendarViewModel::is_calendar_name_Valid() const{
    return m_calendar_name_isValid;
}

QString OAIServiceCalendarViewModel::getId() const {
    return m_id;
}
void OAIServiceCalendarViewModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceCalendarViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceCalendarViewModel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIServiceCalendarViewModel::getLocationId() const {
    return m_location_id;
}
void OAIServiceCalendarViewModel::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIServiceCalendarViewModel::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIServiceCalendarViewModel::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIServiceCalendarViewModel::getServiceId() const {
    return m_service_id;
}
void OAIServiceCalendarViewModel::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIServiceCalendarViewModel::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIServiceCalendarViewModel::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIServiceCalendarViewModel::getServiceName() const {
    return m_service_name;
}
void OAIServiceCalendarViewModel::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIServiceCalendarViewModel::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIServiceCalendarViewModel::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIServiceCalendarViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceCalendarViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
