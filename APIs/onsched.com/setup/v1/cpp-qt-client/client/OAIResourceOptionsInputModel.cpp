/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceOptionsInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceOptionsInputModel::OAIResourceOptionsInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceOptionsInputModel::OAIResourceOptionsInputModel() {
    this->initializeModel();
}

OAIResourceOptionsInputModel::~OAIResourceOptionsInputModel() {}

void OAIResourceOptionsInputModel::initializeModel() {

    m_bio_link_isSet = false;
    m_bio_link_isValid = false;

    m_booking_notification_isSet = false;
    m_booking_notification_isValid = false;

    m_calendar_availability_isSet = false;
    m_calendar_availability_isValid = false;

    m_display_color_isSet = false;
    m_display_color_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_google_calendar_id_isSet = false;
    m_google_calendar_id_isValid = false;

    m_hourly_isSet = false;
    m_hourly_isValid = false;

    m_ignore_business_hours_isSet = false;
    m_ignore_business_hours_isValid = false;

    m_notification_type_isSet = false;
    m_notification_type_isValid = false;

    m_outlook_calendar_id_isSet = false;
    m_outlook_calendar_id_isValid = false;

    m_sort_key_isSet = false;
    m_sort_key_isValid = false;
}

void OAIResourceOptionsInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceOptionsInputModel::fromJsonObject(QJsonObject json) {

    m_bio_link_isValid = ::OpenAPI::fromJsonValue(m_bio_link, json[QString("bioLink")]);
    m_bio_link_isSet = !json[QString("bioLink")].isNull() && m_bio_link_isValid;

    m_booking_notification_isValid = ::OpenAPI::fromJsonValue(m_booking_notification, json[QString("bookingNotification")]);
    m_booking_notification_isSet = !json[QString("bookingNotification")].isNull() && m_booking_notification_isValid;

    m_calendar_availability_isValid = ::OpenAPI::fromJsonValue(m_calendar_availability, json[QString("calendarAvailability")]);
    m_calendar_availability_isSet = !json[QString("calendarAvailability")].isNull() && m_calendar_availability_isValid;

    m_display_color_isValid = ::OpenAPI::fromJsonValue(m_display_color, json[QString("displayColor")]);
    m_display_color_isSet = !json[QString("displayColor")].isNull() && m_display_color_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("effectiveDate")]);
    m_effective_date_isSet = !json[QString("effectiveDate")].isNull() && m_effective_date_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_google_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_google_calendar_id, json[QString("googleCalendarId")]);
    m_google_calendar_id_isSet = !json[QString("googleCalendarId")].isNull() && m_google_calendar_id_isValid;

    m_hourly_isValid = ::OpenAPI::fromJsonValue(m_hourly, json[QString("hourly")]);
    m_hourly_isSet = !json[QString("hourly")].isNull() && m_hourly_isValid;

    m_ignore_business_hours_isValid = ::OpenAPI::fromJsonValue(m_ignore_business_hours, json[QString("ignoreBusinessHours")]);
    m_ignore_business_hours_isSet = !json[QString("ignoreBusinessHours")].isNull() && m_ignore_business_hours_isValid;

    m_notification_type_isValid = ::OpenAPI::fromJsonValue(m_notification_type, json[QString("notificationType")]);
    m_notification_type_isSet = !json[QString("notificationType")].isNull() && m_notification_type_isValid;

    m_outlook_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_outlook_calendar_id, json[QString("outlookCalendarId")]);
    m_outlook_calendar_id_isSet = !json[QString("outlookCalendarId")].isNull() && m_outlook_calendar_id_isValid;

    m_sort_key_isValid = ::OpenAPI::fromJsonValue(m_sort_key, json[QString("sortKey")]);
    m_sort_key_isSet = !json[QString("sortKey")].isNull() && m_sort_key_isValid;
}

QString OAIResourceOptionsInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceOptionsInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_bio_link_isSet) {
        obj.insert(QString("bioLink"), ::OpenAPI::toJsonValue(m_bio_link));
    }
    if (m_booking_notification_isSet) {
        obj.insert(QString("bookingNotification"), ::OpenAPI::toJsonValue(m_booking_notification));
    }
    if (m_calendar_availability_isSet) {
        obj.insert(QString("calendarAvailability"), ::OpenAPI::toJsonValue(m_calendar_availability));
    }
    if (m_display_color_isSet) {
        obj.insert(QString("displayColor"), ::OpenAPI::toJsonValue(m_display_color));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("effectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_google_calendar_id_isSet) {
        obj.insert(QString("googleCalendarId"), ::OpenAPI::toJsonValue(m_google_calendar_id));
    }
    if (m_hourly_isSet) {
        obj.insert(QString("hourly"), ::OpenAPI::toJsonValue(m_hourly));
    }
    if (m_ignore_business_hours_isSet) {
        obj.insert(QString("ignoreBusinessHours"), ::OpenAPI::toJsonValue(m_ignore_business_hours));
    }
    if (m_notification_type_isSet) {
        obj.insert(QString("notificationType"), ::OpenAPI::toJsonValue(m_notification_type));
    }
    if (m_outlook_calendar_id_isSet) {
        obj.insert(QString("outlookCalendarId"), ::OpenAPI::toJsonValue(m_outlook_calendar_id));
    }
    if (m_sort_key_isSet) {
        obj.insert(QString("sortKey"), ::OpenAPI::toJsonValue(m_sort_key));
    }
    return obj;
}

QString OAIResourceOptionsInputModel::getBioLink() const {
    return m_bio_link;
}
void OAIResourceOptionsInputModel::setBioLink(const QString &bio_link) {
    m_bio_link = bio_link;
    m_bio_link_isSet = true;
}

bool OAIResourceOptionsInputModel::is_bio_link_Set() const{
    return m_bio_link_isSet;
}

bool OAIResourceOptionsInputModel::is_bio_link_Valid() const{
    return m_bio_link_isValid;
}

qint32 OAIResourceOptionsInputModel::getBookingNotification() const {
    return m_booking_notification;
}
void OAIResourceOptionsInputModel::setBookingNotification(const qint32 &booking_notification) {
    m_booking_notification = booking_notification;
    m_booking_notification_isSet = true;
}

bool OAIResourceOptionsInputModel::is_booking_notification_Set() const{
    return m_booking_notification_isSet;
}

bool OAIResourceOptionsInputModel::is_booking_notification_Valid() const{
    return m_booking_notification_isValid;
}

qint32 OAIResourceOptionsInputModel::getCalendarAvailability() const {
    return m_calendar_availability;
}
void OAIResourceOptionsInputModel::setCalendarAvailability(const qint32 &calendar_availability) {
    m_calendar_availability = calendar_availability;
    m_calendar_availability_isSet = true;
}

bool OAIResourceOptionsInputModel::is_calendar_availability_Set() const{
    return m_calendar_availability_isSet;
}

bool OAIResourceOptionsInputModel::is_calendar_availability_Valid() const{
    return m_calendar_availability_isValid;
}

QString OAIResourceOptionsInputModel::getDisplayColor() const {
    return m_display_color;
}
void OAIResourceOptionsInputModel::setDisplayColor(const QString &display_color) {
    m_display_color = display_color;
    m_display_color_isSet = true;
}

bool OAIResourceOptionsInputModel::is_display_color_Set() const{
    return m_display_color_isSet;
}

bool OAIResourceOptionsInputModel::is_display_color_Valid() const{
    return m_display_color_isValid;
}

QDateTime OAIResourceOptionsInputModel::getEffectiveDate() const {
    return m_effective_date;
}
void OAIResourceOptionsInputModel::setEffectiveDate(const QDateTime &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIResourceOptionsInputModel::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIResourceOptionsInputModel::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

QString OAIResourceOptionsInputModel::getGender() const {
    return m_gender;
}
void OAIResourceOptionsInputModel::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIResourceOptionsInputModel::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIResourceOptionsInputModel::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIResourceOptionsInputModel::getGoogleCalendarId() const {
    return m_google_calendar_id;
}
void OAIResourceOptionsInputModel::setGoogleCalendarId(const QString &google_calendar_id) {
    m_google_calendar_id = google_calendar_id;
    m_google_calendar_id_isSet = true;
}

bool OAIResourceOptionsInputModel::is_google_calendar_id_Set() const{
    return m_google_calendar_id_isSet;
}

bool OAIResourceOptionsInputModel::is_google_calendar_id_Valid() const{
    return m_google_calendar_id_isValid;
}

double OAIResourceOptionsInputModel::getHourly() const {
    return m_hourly;
}
void OAIResourceOptionsInputModel::setHourly(const double &hourly) {
    m_hourly = hourly;
    m_hourly_isSet = true;
}

bool OAIResourceOptionsInputModel::is_hourly_Set() const{
    return m_hourly_isSet;
}

bool OAIResourceOptionsInputModel::is_hourly_Valid() const{
    return m_hourly_isValid;
}

bool OAIResourceOptionsInputModel::isIgnoreBusinessHours() const {
    return m_ignore_business_hours;
}
void OAIResourceOptionsInputModel::setIgnoreBusinessHours(const bool &ignore_business_hours) {
    m_ignore_business_hours = ignore_business_hours;
    m_ignore_business_hours_isSet = true;
}

bool OAIResourceOptionsInputModel::is_ignore_business_hours_Set() const{
    return m_ignore_business_hours_isSet;
}

bool OAIResourceOptionsInputModel::is_ignore_business_hours_Valid() const{
    return m_ignore_business_hours_isValid;
}

qint32 OAIResourceOptionsInputModel::getNotificationType() const {
    return m_notification_type;
}
void OAIResourceOptionsInputModel::setNotificationType(const qint32 &notification_type) {
    m_notification_type = notification_type;
    m_notification_type_isSet = true;
}

bool OAIResourceOptionsInputModel::is_notification_type_Set() const{
    return m_notification_type_isSet;
}

bool OAIResourceOptionsInputModel::is_notification_type_Valid() const{
    return m_notification_type_isValid;
}

QString OAIResourceOptionsInputModel::getOutlookCalendarId() const {
    return m_outlook_calendar_id;
}
void OAIResourceOptionsInputModel::setOutlookCalendarId(const QString &outlook_calendar_id) {
    m_outlook_calendar_id = outlook_calendar_id;
    m_outlook_calendar_id_isSet = true;
}

bool OAIResourceOptionsInputModel::is_outlook_calendar_id_Set() const{
    return m_outlook_calendar_id_isSet;
}

bool OAIResourceOptionsInputModel::is_outlook_calendar_id_Valid() const{
    return m_outlook_calendar_id_isValid;
}

qint32 OAIResourceOptionsInputModel::getSortKey() const {
    return m_sort_key;
}
void OAIResourceOptionsInputModel::setSortKey(const qint32 &sort_key) {
    m_sort_key = sort_key;
    m_sort_key_isSet = true;
}

bool OAIResourceOptionsInputModel::is_sort_key_Set() const{
    return m_sort_key_isSet;
}

bool OAIResourceOptionsInputModel::is_sort_key_Valid() const{
    return m_sort_key_isValid;
}

bool OAIResourceOptionsInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bio_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_business_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlook_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceOptionsInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
