/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceViewModel::OAIResourceViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceViewModel::OAIResourceViewModel() {
    this->initializeModel();
}

OAIResourceViewModel::~OAIResourceViewModel() {}

void OAIResourceViewModel::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_bio_link_isSet = false;
    m_bio_link_isValid = false;

    m_booking_notification_isSet = false;
    m_booking_notification_isValid = false;

    m_calendar_availability_isSet = false;
    m_calendar_availability_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_deleted_status_isSet = false;
    m_deleted_status_isValid = false;

    m_deleted_time_isSet = false;
    m_deleted_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_google_calendar_auth_url_isSet = false;
    m_google_calendar_auth_url_isValid = false;

    m_google_calendar_authorized_isSet = false;
    m_google_calendar_authorized_isValid = false;

    m_google_calendar_id_isSet = false;
    m_google_calendar_id_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_hourly_isSet = false;
    m_hourly_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ignore_business_hours_isSet = false;
    m_ignore_business_hours_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_type_isSet = false;
    m_notification_type_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_outlook_calendar_auth_url_isSet = false;
    m_outlook_calendar_auth_url_isValid = false;

    m_outlook_calendar_authorized_isSet = false;
    m_outlook_calendar_authorized_isValid = false;

    m_outlook_calendar_id_isSet = false;
    m_outlook_calendar_id_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_recurring_availability_isSet = false;
    m_recurring_availability_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_skype_name_isSet = false;
    m_skype_name_isValid = false;

    m_sort_key_isSet = false;
    m_sort_key_isValid = false;

    m_timezone_iana_isSet = false;
    m_timezone_iana_isValid = false;

    m_timezone_id_isSet = false;
    m_timezone_id_isValid = false;

    m_timezone_offset_isSet = false;
    m_timezone_offset_isValid = false;
}

void OAIResourceViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceViewModel::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_bio_link_isValid = ::OpenAPI::fromJsonValue(m_bio_link, json[QString("bioLink")]);
    m_bio_link_isSet = !json[QString("bioLink")].isNull() && m_bio_link_isValid;

    m_booking_notification_isValid = ::OpenAPI::fromJsonValue(m_booking_notification, json[QString("bookingNotification")]);
    m_booking_notification_isSet = !json[QString("bookingNotification")].isNull() && m_booking_notification_isValid;

    m_calendar_availability_isValid = ::OpenAPI::fromJsonValue(m_calendar_availability, json[QString("calendarAvailability")]);
    m_calendar_availability_isSet = !json[QString("calendarAvailability")].isNull() && m_calendar_availability_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_deleted_status_isValid = ::OpenAPI::fromJsonValue(m_deleted_status, json[QString("deletedStatus")]);
    m_deleted_status_isSet = !json[QString("deletedStatus")].isNull() && m_deleted_status_isValid;

    m_deleted_time_isValid = ::OpenAPI::fromJsonValue(m_deleted_time, json[QString("deletedTime")]);
    m_deleted_time_isSet = !json[QString("deletedTime")].isNull() && m_deleted_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("effectiveDate")]);
    m_effective_date_isSet = !json[QString("effectiveDate")].isNull() && m_effective_date_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_google_calendar_auth_url_isValid = ::OpenAPI::fromJsonValue(m_google_calendar_auth_url, json[QString("googleCalendarAuthUrl")]);
    m_google_calendar_auth_url_isSet = !json[QString("googleCalendarAuthUrl")].isNull() && m_google_calendar_auth_url_isValid;

    m_google_calendar_authorized_isValid = ::OpenAPI::fromJsonValue(m_google_calendar_authorized, json[QString("googleCalendarAuthorized")]);
    m_google_calendar_authorized_isSet = !json[QString("googleCalendarAuthorized")].isNull() && m_google_calendar_authorized_isValid;

    m_google_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_google_calendar_id, json[QString("googleCalendarId")]);
    m_google_calendar_id_isSet = !json[QString("googleCalendarId")].isNull() && m_google_calendar_id_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_hourly_isValid = ::OpenAPI::fromJsonValue(m_hourly, json[QString("hourly")]);
    m_hourly_isSet = !json[QString("hourly")].isNull() && m_hourly_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ignore_business_hours_isValid = ::OpenAPI::fromJsonValue(m_ignore_business_hours, json[QString("ignoreBusinessHours")]);
    m_ignore_business_hours_isSet = !json[QString("ignoreBusinessHours")].isNull() && m_ignore_business_hours_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_type_isValid = ::OpenAPI::fromJsonValue(m_notification_type, json[QString("notificationType")]);
    m_notification_type_isSet = !json[QString("notificationType")].isNull() && m_notification_type_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_outlook_calendar_auth_url_isValid = ::OpenAPI::fromJsonValue(m_outlook_calendar_auth_url, json[QString("outlookCalendarAuthUrl")]);
    m_outlook_calendar_auth_url_isSet = !json[QString("outlookCalendarAuthUrl")].isNull() && m_outlook_calendar_auth_url_isValid;

    m_outlook_calendar_authorized_isValid = ::OpenAPI::fromJsonValue(m_outlook_calendar_authorized, json[QString("outlookCalendarAuthorized")]);
    m_outlook_calendar_authorized_isSet = !json[QString("outlookCalendarAuthorized")].isNull() && m_outlook_calendar_authorized_isValid;

    m_outlook_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_outlook_calendar_id, json[QString("outlookCalendarId")]);
    m_outlook_calendar_id_isSet = !json[QString("outlookCalendarId")].isNull() && m_outlook_calendar_id_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_recurring_availability_isValid = ::OpenAPI::fromJsonValue(m_recurring_availability, json[QString("recurringAvailability")]);
    m_recurring_availability_isSet = !json[QString("recurringAvailability")].isNull() && m_recurring_availability_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_skype_name_isValid = ::OpenAPI::fromJsonValue(m_skype_name, json[QString("skypeName")]);
    m_skype_name_isSet = !json[QString("skypeName")].isNull() && m_skype_name_isValid;

    m_sort_key_isValid = ::OpenAPI::fromJsonValue(m_sort_key, json[QString("sortKey")]);
    m_sort_key_isSet = !json[QString("sortKey")].isNull() && m_sort_key_isValid;

    m_timezone_iana_isValid = ::OpenAPI::fromJsonValue(m_timezone_iana, json[QString("timezoneIana")]);
    m_timezone_iana_isSet = !json[QString("timezoneIana")].isNull() && m_timezone_iana_isValid;

    m_timezone_id_isValid = ::OpenAPI::fromJsonValue(m_timezone_id, json[QString("timezoneId")]);
    m_timezone_id_isSet = !json[QString("timezoneId")].isNull() && m_timezone_id_isValid;

    m_timezone_offset_isValid = ::OpenAPI::fromJsonValue(m_timezone_offset, json[QString("timezoneOffset")]);
    m_timezone_offset_isSet = !json[QString("timezoneOffset")].isNull() && m_timezone_offset_isValid;
}

QString OAIResourceViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_availability.isSet()) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_bio_link_isSet) {
        obj.insert(QString("bioLink"), ::OpenAPI::toJsonValue(m_bio_link));
    }
    if (m_booking_notification_isSet) {
        obj.insert(QString("bookingNotification"), ::OpenAPI::toJsonValue(m_booking_notification));
    }
    if (m_calendar_availability_isSet) {
        obj.insert(QString("calendarAvailability"), ::OpenAPI::toJsonValue(m_calendar_availability));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_custom_fields.isSet()) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_deleted_status_isSet) {
        obj.insert(QString("deletedStatus"), ::OpenAPI::toJsonValue(m_deleted_status));
    }
    if (m_deleted_time_isSet) {
        obj.insert(QString("deletedTime"), ::OpenAPI::toJsonValue(m_deleted_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("effectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_google_calendar_auth_url_isSet) {
        obj.insert(QString("googleCalendarAuthUrl"), ::OpenAPI::toJsonValue(m_google_calendar_auth_url));
    }
    if (m_google_calendar_authorized_isSet) {
        obj.insert(QString("googleCalendarAuthorized"), ::OpenAPI::toJsonValue(m_google_calendar_authorized));
    }
    if (m_google_calendar_id_isSet) {
        obj.insert(QString("googleCalendarId"), ::OpenAPI::toJsonValue(m_google_calendar_id));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_hourly_isSet) {
        obj.insert(QString("hourly"), ::OpenAPI::toJsonValue(m_hourly));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ignore_business_hours_isSet) {
        obj.insert(QString("ignoreBusinessHours"), ::OpenAPI::toJsonValue(m_ignore_business_hours));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_type_isSet) {
        obj.insert(QString("notificationType"), ::OpenAPI::toJsonValue(m_notification_type));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_outlook_calendar_auth_url_isSet) {
        obj.insert(QString("outlookCalendarAuthUrl"), ::OpenAPI::toJsonValue(m_outlook_calendar_auth_url));
    }
    if (m_outlook_calendar_authorized_isSet) {
        obj.insert(QString("outlookCalendarAuthorized"), ::OpenAPI::toJsonValue(m_outlook_calendar_authorized));
    }
    if (m_outlook_calendar_id_isSet) {
        obj.insert(QString("outlookCalendarId"), ::OpenAPI::toJsonValue(m_outlook_calendar_id));
    }
    if (m_phone.isSet()) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_recurring_availability_isSet) {
        obj.insert(QString("recurringAvailability"), ::OpenAPI::toJsonValue(m_recurring_availability));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_skype_name_isSet) {
        obj.insert(QString("skypeName"), ::OpenAPI::toJsonValue(m_skype_name));
    }
    if (m_sort_key_isSet) {
        obj.insert(QString("sortKey"), ::OpenAPI::toJsonValue(m_sort_key));
    }
    if (m_timezone_iana_isSet) {
        obj.insert(QString("timezoneIana"), ::OpenAPI::toJsonValue(m_timezone_iana));
    }
    if (m_timezone_id_isSet) {
        obj.insert(QString("timezoneId"), ::OpenAPI::toJsonValue(m_timezone_id));
    }
    if (m_timezone_offset_isSet) {
        obj.insert(QString("timezoneOffset"), ::OpenAPI::toJsonValue(m_timezone_offset));
    }
    return obj;
}

OAIAddressViewModel OAIResourceViewModel::getAddress() const {
    return m_address;
}
void OAIResourceViewModel::setAddress(const OAIAddressViewModel &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIResourceViewModel::is_address_Set() const{
    return m_address_isSet;
}

bool OAIResourceViewModel::is_address_Valid() const{
    return m_address_isValid;
}

OAIResourceHoursViewModel OAIResourceViewModel::getAvailability() const {
    return m_availability;
}
void OAIResourceViewModel::setAvailability(const OAIResourceHoursViewModel &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIResourceViewModel::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIResourceViewModel::is_availability_Valid() const{
    return m_availability_isValid;
}

QString OAIResourceViewModel::getBioLink() const {
    return m_bio_link;
}
void OAIResourceViewModel::setBioLink(const QString &bio_link) {
    m_bio_link = bio_link;
    m_bio_link_isSet = true;
}

bool OAIResourceViewModel::is_bio_link_Set() const{
    return m_bio_link_isSet;
}

bool OAIResourceViewModel::is_bio_link_Valid() const{
    return m_bio_link_isValid;
}

qint32 OAIResourceViewModel::getBookingNotification() const {
    return m_booking_notification;
}
void OAIResourceViewModel::setBookingNotification(const qint32 &booking_notification) {
    m_booking_notification = booking_notification;
    m_booking_notification_isSet = true;
}

bool OAIResourceViewModel::is_booking_notification_Set() const{
    return m_booking_notification_isSet;
}

bool OAIResourceViewModel::is_booking_notification_Valid() const{
    return m_booking_notification_isValid;
}

qint32 OAIResourceViewModel::getCalendarAvailability() const {
    return m_calendar_availability;
}
void OAIResourceViewModel::setCalendarAvailability(const qint32 &calendar_availability) {
    m_calendar_availability = calendar_availability;
    m_calendar_availability_isSet = true;
}

bool OAIResourceViewModel::is_calendar_availability_Set() const{
    return m_calendar_availability_isSet;
}

bool OAIResourceViewModel::is_calendar_availability_Valid() const{
    return m_calendar_availability_isValid;
}

OAIContactViewModel OAIResourceViewModel::getContact() const {
    return m_contact;
}
void OAIResourceViewModel::setContact(const OAIContactViewModel &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIResourceViewModel::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIResourceViewModel::is_contact_Valid() const{
    return m_contact_isValid;
}

OAICustomFieldInputModel OAIResourceViewModel::getCustomFields() const {
    return m_custom_fields;
}
void OAIResourceViewModel::setCustomFields(const OAICustomFieldInputModel &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIResourceViewModel::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIResourceViewModel::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

bool OAIResourceViewModel::isDeletedStatus() const {
    return m_deleted_status;
}
void OAIResourceViewModel::setDeletedStatus(const bool &deleted_status) {
    m_deleted_status = deleted_status;
    m_deleted_status_isSet = true;
}

bool OAIResourceViewModel::is_deleted_status_Set() const{
    return m_deleted_status_isSet;
}

bool OAIResourceViewModel::is_deleted_status_Valid() const{
    return m_deleted_status_isValid;
}

QDateTime OAIResourceViewModel::getDeletedTime() const {
    return m_deleted_time;
}
void OAIResourceViewModel::setDeletedTime(const QDateTime &deleted_time) {
    m_deleted_time = deleted_time;
    m_deleted_time_isSet = true;
}

bool OAIResourceViewModel::is_deleted_time_Set() const{
    return m_deleted_time_isSet;
}

bool OAIResourceViewModel::is_deleted_time_Valid() const{
    return m_deleted_time_isValid;
}

QString OAIResourceViewModel::getDescription() const {
    return m_description;
}
void OAIResourceViewModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIResourceViewModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIResourceViewModel::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIResourceViewModel::getEffectiveDate() const {
    return m_effective_date;
}
void OAIResourceViewModel::setEffectiveDate(const QDateTime &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIResourceViewModel::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIResourceViewModel::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

QString OAIResourceViewModel::getEmail() const {
    return m_email;
}
void OAIResourceViewModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIResourceViewModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAIResourceViewModel::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIResourceViewModel::getGender() const {
    return m_gender;
}
void OAIResourceViewModel::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIResourceViewModel::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIResourceViewModel::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIResourceViewModel::getGoogleCalendarAuthUrl() const {
    return m_google_calendar_auth_url;
}
void OAIResourceViewModel::setGoogleCalendarAuthUrl(const QString &google_calendar_auth_url) {
    m_google_calendar_auth_url = google_calendar_auth_url;
    m_google_calendar_auth_url_isSet = true;
}

bool OAIResourceViewModel::is_google_calendar_auth_url_Set() const{
    return m_google_calendar_auth_url_isSet;
}

bool OAIResourceViewModel::is_google_calendar_auth_url_Valid() const{
    return m_google_calendar_auth_url_isValid;
}

bool OAIResourceViewModel::isGoogleCalendarAuthorized() const {
    return m_google_calendar_authorized;
}
void OAIResourceViewModel::setGoogleCalendarAuthorized(const bool &google_calendar_authorized) {
    m_google_calendar_authorized = google_calendar_authorized;
    m_google_calendar_authorized_isSet = true;
}

bool OAIResourceViewModel::is_google_calendar_authorized_Set() const{
    return m_google_calendar_authorized_isSet;
}

bool OAIResourceViewModel::is_google_calendar_authorized_Valid() const{
    return m_google_calendar_authorized_isValid;
}

QString OAIResourceViewModel::getGoogleCalendarId() const {
    return m_google_calendar_id;
}
void OAIResourceViewModel::setGoogleCalendarId(const QString &google_calendar_id) {
    m_google_calendar_id = google_calendar_id;
    m_google_calendar_id_isSet = true;
}

bool OAIResourceViewModel::is_google_calendar_id_Set() const{
    return m_google_calendar_id_isSet;
}

bool OAIResourceViewModel::is_google_calendar_id_Valid() const{
    return m_google_calendar_id_isValid;
}

qint32 OAIResourceViewModel::getGroupId() const {
    return m_group_id;
}
void OAIResourceViewModel::setGroupId(const qint32 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIResourceViewModel::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIResourceViewModel::is_group_id_Valid() const{
    return m_group_id_isValid;
}

double OAIResourceViewModel::getHourly() const {
    return m_hourly;
}
void OAIResourceViewModel::setHourly(const double &hourly) {
    m_hourly = hourly;
    m_hourly_isSet = true;
}

bool OAIResourceViewModel::is_hourly_Set() const{
    return m_hourly_isSet;
}

bool OAIResourceViewModel::is_hourly_Valid() const{
    return m_hourly_isValid;
}

QString OAIResourceViewModel::getId() const {
    return m_id;
}
void OAIResourceViewModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResourceViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResourceViewModel::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIResourceViewModel::isIgnoreBusinessHours() const {
    return m_ignore_business_hours;
}
void OAIResourceViewModel::setIgnoreBusinessHours(const bool &ignore_business_hours) {
    m_ignore_business_hours = ignore_business_hours;
    m_ignore_business_hours_isSet = true;
}

bool OAIResourceViewModel::is_ignore_business_hours_Set() const{
    return m_ignore_business_hours_isSet;
}

bool OAIResourceViewModel::is_ignore_business_hours_Valid() const{
    return m_ignore_business_hours_isValid;
}

QString OAIResourceViewModel::getImageUrl() const {
    return m_image_url;
}
void OAIResourceViewModel::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIResourceViewModel::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIResourceViewModel::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIResourceViewModel::getLocationId() const {
    return m_location_id;
}
void OAIResourceViewModel::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIResourceViewModel::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIResourceViewModel::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIResourceViewModel::getName() const {
    return m_name;
}
void OAIResourceViewModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceViewModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceViewModel::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIResourceViewModel::getNotificationType() const {
    return m_notification_type;
}
void OAIResourceViewModel::setNotificationType(const qint32 &notification_type) {
    m_notification_type = notification_type;
    m_notification_type_isSet = true;
}

bool OAIResourceViewModel::is_notification_type_Set() const{
    return m_notification_type_isSet;
}

bool OAIResourceViewModel::is_notification_type_Valid() const{
    return m_notification_type_isValid;
}

QString OAIResourceViewModel::getObject() const {
    return m_object;
}
void OAIResourceViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIResourceViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIResourceViewModel::is_object_Valid() const{
    return m_object_isValid;
}

OAIResourceOptionsInputModel OAIResourceViewModel::getOptions() const {
    return m_options;
}
void OAIResourceViewModel::setOptions(const OAIResourceOptionsInputModel &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIResourceViewModel::is_options_Set() const{
    return m_options_isSet;
}

bool OAIResourceViewModel::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIResourceViewModel::getOutlookCalendarAuthUrl() const {
    return m_outlook_calendar_auth_url;
}
void OAIResourceViewModel::setOutlookCalendarAuthUrl(const QString &outlook_calendar_auth_url) {
    m_outlook_calendar_auth_url = outlook_calendar_auth_url;
    m_outlook_calendar_auth_url_isSet = true;
}

bool OAIResourceViewModel::is_outlook_calendar_auth_url_Set() const{
    return m_outlook_calendar_auth_url_isSet;
}

bool OAIResourceViewModel::is_outlook_calendar_auth_url_Valid() const{
    return m_outlook_calendar_auth_url_isValid;
}

bool OAIResourceViewModel::isOutlookCalendarAuthorized() const {
    return m_outlook_calendar_authorized;
}
void OAIResourceViewModel::setOutlookCalendarAuthorized(const bool &outlook_calendar_authorized) {
    m_outlook_calendar_authorized = outlook_calendar_authorized;
    m_outlook_calendar_authorized_isSet = true;
}

bool OAIResourceViewModel::is_outlook_calendar_authorized_Set() const{
    return m_outlook_calendar_authorized_isSet;
}

bool OAIResourceViewModel::is_outlook_calendar_authorized_Valid() const{
    return m_outlook_calendar_authorized_isValid;
}

QString OAIResourceViewModel::getOutlookCalendarId() const {
    return m_outlook_calendar_id;
}
void OAIResourceViewModel::setOutlookCalendarId(const QString &outlook_calendar_id) {
    m_outlook_calendar_id = outlook_calendar_id;
    m_outlook_calendar_id_isSet = true;
}

bool OAIResourceViewModel::is_outlook_calendar_id_Set() const{
    return m_outlook_calendar_id_isSet;
}

bool OAIResourceViewModel::is_outlook_calendar_id_Valid() const{
    return m_outlook_calendar_id_isValid;
}

OAIPhoneViewModel OAIResourceViewModel::getPhone() const {
    return m_phone;
}
void OAIResourceViewModel::setPhone(const OAIPhoneViewModel &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIResourceViewModel::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIResourceViewModel::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAIResourceViewModel::isRecurringAvailability() const {
    return m_recurring_availability;
}
void OAIResourceViewModel::setRecurringAvailability(const bool &recurring_availability) {
    m_recurring_availability = recurring_availability;
    m_recurring_availability_isSet = true;
}

bool OAIResourceViewModel::is_recurring_availability_Set() const{
    return m_recurring_availability_isSet;
}

bool OAIResourceViewModel::is_recurring_availability_Valid() const{
    return m_recurring_availability_isValid;
}

QList<OAIResourceServiceViewModel> OAIResourceViewModel::getServices() const {
    return m_services;
}
void OAIResourceViewModel::setServices(const QList<OAIResourceServiceViewModel> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIResourceViewModel::is_services_Set() const{
    return m_services_isSet;
}

bool OAIResourceViewModel::is_services_Valid() const{
    return m_services_isValid;
}

QString OAIResourceViewModel::getSkypeName() const {
    return m_skype_name;
}
void OAIResourceViewModel::setSkypeName(const QString &skype_name) {
    m_skype_name = skype_name;
    m_skype_name_isSet = true;
}

bool OAIResourceViewModel::is_skype_name_Set() const{
    return m_skype_name_isSet;
}

bool OAIResourceViewModel::is_skype_name_Valid() const{
    return m_skype_name_isValid;
}

qint32 OAIResourceViewModel::getSortKey() const {
    return m_sort_key;
}
void OAIResourceViewModel::setSortKey(const qint32 &sort_key) {
    m_sort_key = sort_key;
    m_sort_key_isSet = true;
}

bool OAIResourceViewModel::is_sort_key_Set() const{
    return m_sort_key_isSet;
}

bool OAIResourceViewModel::is_sort_key_Valid() const{
    return m_sort_key_isValid;
}

QString OAIResourceViewModel::getTimezoneIana() const {
    return m_timezone_iana;
}
void OAIResourceViewModel::setTimezoneIana(const QString &timezone_iana) {
    m_timezone_iana = timezone_iana;
    m_timezone_iana_isSet = true;
}

bool OAIResourceViewModel::is_timezone_iana_Set() const{
    return m_timezone_iana_isSet;
}

bool OAIResourceViewModel::is_timezone_iana_Valid() const{
    return m_timezone_iana_isValid;
}

QString OAIResourceViewModel::getTimezoneId() const {
    return m_timezone_id;
}
void OAIResourceViewModel::setTimezoneId(const QString &timezone_id) {
    m_timezone_id = timezone_id;
    m_timezone_id_isSet = true;
}

bool OAIResourceViewModel::is_timezone_id_Set() const{
    return m_timezone_id_isSet;
}

bool OAIResourceViewModel::is_timezone_id_Valid() const{
    return m_timezone_id_isValid;
}

qint32 OAIResourceViewModel::getTimezoneOffset() const {
    return m_timezone_offset;
}
void OAIResourceViewModel::setTimezoneOffset(const qint32 &timezone_offset) {
    m_timezone_offset = timezone_offset;
    m_timezone_offset_isSet = true;
}

bool OAIResourceViewModel::is_timezone_offset_Set() const{
    return m_timezone_offset_isSet;
}

bool OAIResourceViewModel::is_timezone_offset_Valid() const{
    return m_timezone_offset_isValid;
}

bool OAIResourceViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_calendar_auth_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_calendar_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_business_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlook_calendar_auth_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlook_calendar_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlook_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skype_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_iana_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
