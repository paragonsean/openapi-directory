/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceAllocationViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceAllocationViewModel::OAIResourceAllocationViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceAllocationViewModel::OAIResourceAllocationViewModel() {
    this->initializeModel();
}

OAIResourceAllocationViewModel::~OAIResourceAllocationViewModel() {}

void OAIResourceAllocationViewModel::initializeModel() {

    m_business_id_isSet = false;
    m_business_id_isValid = false;

    m_deleted_status_isSet = false;
    m_deleted_status_isValid = false;

    m_deleted_time_isSet = false;
    m_deleted_time_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_repeat_isSet = false;
    m_repeat_isValid = false;

    m_repeats_isSet = false;
    m_repeats_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIResourceAllocationViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceAllocationViewModel::fromJsonObject(QJsonObject json) {

    m_business_id_isValid = ::OpenAPI::fromJsonValue(m_business_id, json[QString("businessId")]);
    m_business_id_isSet = !json[QString("businessId")].isNull() && m_business_id_isValid;

    m_deleted_status_isValid = ::OpenAPI::fromJsonValue(m_deleted_status, json[QString("deletedStatus")]);
    m_deleted_status_isSet = !json[QString("deletedStatus")].isNull() && m_deleted_status_isValid;

    m_deleted_time_isValid = ::OpenAPI::fromJsonValue(m_deleted_time, json[QString("deletedTime")]);
    m_deleted_time_isSet = !json[QString("deletedTime")].isNull() && m_deleted_time_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_repeat_isValid = ::OpenAPI::fromJsonValue(m_repeat, json[QString("repeat")]);
    m_repeat_isSet = !json[QString("repeat")].isNull() && m_repeat_isValid;

    m_repeats_isValid = ::OpenAPI::fromJsonValue(m_repeats, json[QString("repeats")]);
    m_repeats_isSet = !json[QString("repeats")].isNull() && m_repeats_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIResourceAllocationViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceAllocationViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_business_id_isSet) {
        obj.insert(QString("businessId"), ::OpenAPI::toJsonValue(m_business_id));
    }
    if (m_deleted_status_isSet) {
        obj.insert(QString("deletedStatus"), ::OpenAPI::toJsonValue(m_deleted_status));
    }
    if (m_deleted_time_isSet) {
        obj.insert(QString("deletedTime"), ::OpenAPI::toJsonValue(m_deleted_time));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_repeat.isSet()) {
        obj.insert(QString("repeat"), ::OpenAPI::toJsonValue(m_repeat));
    }
    if (m_repeats_isSet) {
        obj.insert(QString("repeats"), ::OpenAPI::toJsonValue(m_repeats));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

qint32 OAIResourceAllocationViewModel::getBusinessId() const {
    return m_business_id;
}
void OAIResourceAllocationViewModel::setBusinessId(const qint32 &business_id) {
    m_business_id = business_id;
    m_business_id_isSet = true;
}

bool OAIResourceAllocationViewModel::is_business_id_Set() const{
    return m_business_id_isSet;
}

bool OAIResourceAllocationViewModel::is_business_id_Valid() const{
    return m_business_id_isValid;
}

bool OAIResourceAllocationViewModel::isDeletedStatus() const {
    return m_deleted_status;
}
void OAIResourceAllocationViewModel::setDeletedStatus(const bool &deleted_status) {
    m_deleted_status = deleted_status;
    m_deleted_status_isSet = true;
}

bool OAIResourceAllocationViewModel::is_deleted_status_Set() const{
    return m_deleted_status_isSet;
}

bool OAIResourceAllocationViewModel::is_deleted_status_Valid() const{
    return m_deleted_status_isValid;
}

QString OAIResourceAllocationViewModel::getDeletedTime() const {
    return m_deleted_time;
}
void OAIResourceAllocationViewModel::setDeletedTime(const QString &deleted_time) {
    m_deleted_time = deleted_time;
    m_deleted_time_isSet = true;
}

bool OAIResourceAllocationViewModel::is_deleted_time_Set() const{
    return m_deleted_time_isSet;
}

bool OAIResourceAllocationViewModel::is_deleted_time_Valid() const{
    return m_deleted_time_isValid;
}

QString OAIResourceAllocationViewModel::getEndDate() const {
    return m_end_date;
}
void OAIResourceAllocationViewModel::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIResourceAllocationViewModel::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIResourceAllocationViewModel::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAIResourceAllocationViewModel::getEndTime() const {
    return m_end_time;
}
void OAIResourceAllocationViewModel::setEndTime(const qint32 &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIResourceAllocationViewModel::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIResourceAllocationViewModel::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIResourceAllocationViewModel::getId() const {
    return m_id;
}
void OAIResourceAllocationViewModel::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResourceAllocationViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResourceAllocationViewModel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResourceAllocationViewModel::getObject() const {
    return m_object;
}
void OAIResourceAllocationViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIResourceAllocationViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIResourceAllocationViewModel::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIResourceAllocationViewModel::getReason() const {
    return m_reason;
}
void OAIResourceAllocationViewModel::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIResourceAllocationViewModel::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIResourceAllocationViewModel::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIRepeatViewModel OAIResourceAllocationViewModel::getRepeat() const {
    return m_repeat;
}
void OAIResourceAllocationViewModel::setRepeat(const OAIRepeatViewModel &repeat) {
    m_repeat = repeat;
    m_repeat_isSet = true;
}

bool OAIResourceAllocationViewModel::is_repeat_Set() const{
    return m_repeat_isSet;
}

bool OAIResourceAllocationViewModel::is_repeat_Valid() const{
    return m_repeat_isValid;
}

bool OAIResourceAllocationViewModel::isRepeats() const {
    return m_repeats;
}
void OAIResourceAllocationViewModel::setRepeats(const bool &repeats) {
    m_repeats = repeats;
    m_repeats_isSet = true;
}

bool OAIResourceAllocationViewModel::is_repeats_Set() const{
    return m_repeats_isSet;
}

bool OAIResourceAllocationViewModel::is_repeats_Valid() const{
    return m_repeats_isValid;
}

qint32 OAIResourceAllocationViewModel::getResourceId() const {
    return m_resource_id;
}
void OAIResourceAllocationViewModel::setResourceId(const qint32 &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIResourceAllocationViewModel::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIResourceAllocationViewModel::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIResourceAllocationViewModel::getStartDate() const {
    return m_start_date;
}
void OAIResourceAllocationViewModel::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIResourceAllocationViewModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIResourceAllocationViewModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

qint32 OAIResourceAllocationViewModel::getStartTime() const {
    return m_start_time;
}
void OAIResourceAllocationViewModel::setStartTime(const qint32 &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIResourceAllocationViewModel::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIResourceAllocationViewModel::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIResourceAllocationViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceAllocationViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
