/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceAvailabilityViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceAvailabilityViewModel::OAIResourceAvailabilityViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceAvailabilityViewModel::OAIResourceAvailabilityViewModel() {
    this->initializeModel();
}

OAIResourceAvailabilityViewModel::~OAIResourceAvailabilityViewModel() {}

void OAIResourceAvailabilityViewModel::initializeModel() {

    m_business_id_isSet = false;
    m_business_id_isValid = false;

    m_ignore_business_hours_isSet = false;
    m_ignore_business_hours_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_resource_tzo_isSet = false;
    m_resource_tzo_isValid = false;

    m_weekdays_isSet = false;
    m_weekdays_isValid = false;
}

void OAIResourceAvailabilityViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceAvailabilityViewModel::fromJsonObject(QJsonObject json) {

    m_business_id_isValid = ::OpenAPI::fromJsonValue(m_business_id, json[QString("businessId")]);
    m_business_id_isSet = !json[QString("businessId")].isNull() && m_business_id_isValid;

    m_ignore_business_hours_isValid = ::OpenAPI::fromJsonValue(m_ignore_business_hours, json[QString("ignoreBusinessHours")]);
    m_ignore_business_hours_isSet = !json[QString("ignoreBusinessHours")].isNull() && m_ignore_business_hours_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_resource_tzo_isValid = ::OpenAPI::fromJsonValue(m_resource_tzo, json[QString("resourceTzo")]);
    m_resource_tzo_isSet = !json[QString("resourceTzo")].isNull() && m_resource_tzo_isValid;

    m_weekdays_isValid = ::OpenAPI::fromJsonValue(m_weekdays, json[QString("weekdays")]);
    m_weekdays_isSet = !json[QString("weekdays")].isNull() && m_weekdays_isValid;
}

QString OAIResourceAvailabilityViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceAvailabilityViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_business_id_isSet) {
        obj.insert(QString("businessId"), ::OpenAPI::toJsonValue(m_business_id));
    }
    if (m_ignore_business_hours_isSet) {
        obj.insert(QString("ignoreBusinessHours"), ::OpenAPI::toJsonValue(m_ignore_business_hours));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_resource_tzo_isSet) {
        obj.insert(QString("resourceTzo"), ::OpenAPI::toJsonValue(m_resource_tzo));
    }
    if (m_weekdays.isSet()) {
        obj.insert(QString("weekdays"), ::OpenAPI::toJsonValue(m_weekdays));
    }
    return obj;
}

qint32 OAIResourceAvailabilityViewModel::getBusinessId() const {
    return m_business_id;
}
void OAIResourceAvailabilityViewModel::setBusinessId(const qint32 &business_id) {
    m_business_id = business_id;
    m_business_id_isSet = true;
}

bool OAIResourceAvailabilityViewModel::is_business_id_Set() const{
    return m_business_id_isSet;
}

bool OAIResourceAvailabilityViewModel::is_business_id_Valid() const{
    return m_business_id_isValid;
}

bool OAIResourceAvailabilityViewModel::isIgnoreBusinessHours() const {
    return m_ignore_business_hours;
}
void OAIResourceAvailabilityViewModel::setIgnoreBusinessHours(const bool &ignore_business_hours) {
    m_ignore_business_hours = ignore_business_hours;
    m_ignore_business_hours_isSet = true;
}

bool OAIResourceAvailabilityViewModel::is_ignore_business_hours_Set() const{
    return m_ignore_business_hours_isSet;
}

bool OAIResourceAvailabilityViewModel::is_ignore_business_hours_Valid() const{
    return m_ignore_business_hours_isValid;
}

qint32 OAIResourceAvailabilityViewModel::getResourceId() const {
    return m_resource_id;
}
void OAIResourceAvailabilityViewModel::setResourceId(const qint32 &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIResourceAvailabilityViewModel::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIResourceAvailabilityViewModel::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIResourceAvailabilityViewModel::getResourceName() const {
    return m_resource_name;
}
void OAIResourceAvailabilityViewModel::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIResourceAvailabilityViewModel::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIResourceAvailabilityViewModel::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

qint32 OAIResourceAvailabilityViewModel::getResourceTzo() const {
    return m_resource_tzo;
}
void OAIResourceAvailabilityViewModel::setResourceTzo(const qint32 &resource_tzo) {
    m_resource_tzo = resource_tzo;
    m_resource_tzo_isSet = true;
}

bool OAIResourceAvailabilityViewModel::is_resource_tzo_Set() const{
    return m_resource_tzo_isSet;
}

bool OAIResourceAvailabilityViewModel::is_resource_tzo_Valid() const{
    return m_resource_tzo_isValid;
}

OAIAvailabilityViewModel2 OAIResourceAvailabilityViewModel::getWeekdays() const {
    return m_weekdays;
}
void OAIResourceAvailabilityViewModel::setWeekdays(const OAIAvailabilityViewModel2 &weekdays) {
    m_weekdays = weekdays;
    m_weekdays_isSet = true;
}

bool OAIResourceAvailabilityViewModel::is_weekdays_Set() const{
    return m_weekdays_isSet;
}

bool OAIResourceAvailabilityViewModel::is_weekdays_Valid() const{
    return m_weekdays_isValid;
}

bool OAIResourceAvailabilityViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_business_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_tzo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekdays.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceAvailabilityViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
