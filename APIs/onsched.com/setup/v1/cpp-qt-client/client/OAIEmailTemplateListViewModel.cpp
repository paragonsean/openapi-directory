/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailTemplateListViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailTemplateListViewModel::OAIEmailTemplateListViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailTemplateListViewModel::OAIEmailTemplateListViewModel() {
    this->initializeModel();
}

OAIEmailTemplateListViewModel::~OAIEmailTemplateListViewModel() {}

void OAIEmailTemplateListViewModel::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIEmailTemplateListViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailTemplateListViewModel::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIEmailTemplateListViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailTemplateListViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<OAIEmailTemplateViewModel> OAIEmailTemplateListViewModel::getData() const {
    return m_data;
}
void OAIEmailTemplateListViewModel::setData(const QList<OAIEmailTemplateViewModel> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIEmailTemplateListViewModel::is_data_Set() const{
    return m_data_isSet;
}

bool OAIEmailTemplateListViewModel::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIEmailTemplateListViewModel::getObject() const {
    return m_object;
}
void OAIEmailTemplateListViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIEmailTemplateListViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIEmailTemplateListViewModel::is_object_Valid() const{
    return m_object_isValid;
}

qint32 OAIEmailTemplateListViewModel::getTotal() const {
    return m_total;
}
void OAIEmailTemplateListViewModel::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIEmailTemplateListViewModel::is_total_Set() const{
    return m_total_isSet;
}

bool OAIEmailTemplateListViewModel::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIEmailTemplateListViewModel::getUrl() const {
    return m_url;
}
void OAIEmailTemplateListViewModel::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEmailTemplateListViewModel::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEmailTemplateListViewModel::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIEmailTemplateListViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailTemplateListViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
