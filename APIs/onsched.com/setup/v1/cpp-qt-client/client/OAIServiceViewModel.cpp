/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceViewModel::OAIServiceViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceViewModel::OAIServiceViewModel() {
    this->initializeModel();
}

OAIServiceViewModel::~OAIServiceViewModel() {}

void OAIServiceViewModel::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_book_ahead_unit_isSet = false;
    m_book_ahead_unit_isValid = false;

    m_book_ahead_value_isSet = false;
    m_book_ahead_value_isValid = false;

    m_book_in_advance_isSet = false;
    m_book_in_advance_isValid = false;

    m_booking_interval_isSet = false;
    m_booking_interval_isValid = false;

    m_booking_limit_isSet = false;
    m_booking_limit_isValid = false;

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_calendar_resource_group_id_isSet = false;
    m_calendar_resource_group_id_isValid = false;

    m_cancellation_fee_amount_isSet = false;
    m_cancellation_fee_amount_isValid = false;

    m_cancellation_fee_taxable_isSet = false;
    m_cancellation_fee_taxable_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_consumer_padding_isSet = false;
    m_consumer_padding_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_daily_booking_limit_count_isSet = false;
    m_daily_booking_limit_count_isValid = false;

    m_daily_booking_limit_minutes_isSet = false;
    m_daily_booking_limit_minutes_isValid = false;

    m_default_service_isSet = false;
    m_default_service_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_duration_interval_isSet = false;
    m_duration_interval_isValid = false;

    m_duration_max_isSet = false;
    m_duration_max_isValid = false;

    m_duration_min_isSet = false;
    m_duration_min_isValid = false;

    m_duration_select_isSet = false;
    m_duration_select_isValid = false;

    m_fee_amount_isSet = false;
    m_fee_amount_isValid = false;

    m_fee_taxable_isSet = false;
    m_fee_taxable_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_max_booking_limit_isSet = false;
    m_max_booking_limit_isValid = false;

    m_max_capacity_isSet = false;
    m_max_capacity_isValid = false;

    m_max_group_size_isSet = false;
    m_max_group_size_isValid = false;

    m_max_resource_booking_limit_isSet = false;
    m_max_resource_booking_limit_isValid = false;

    m_media_page_url_isSet = false;
    m_media_page_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_non_refundable_isSet = false;
    m_non_refundable_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_padding_isSet = false;
    m_padding_isValid = false;

    m_round_robin_isSet = false;
    m_round_robin_isValid = false;

    m_service_group_id_isSet = false;
    m_service_group_id_isValid = false;

    m_service_group_name_isSet = false;
    m_service_group_name_isValid = false;

    m_show_online_isSet = false;
    m_show_online_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIServiceViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceViewModel::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_book_ahead_unit_isValid = ::OpenAPI::fromJsonValue(m_book_ahead_unit, json[QString("bookAheadUnit")]);
    m_book_ahead_unit_isSet = !json[QString("bookAheadUnit")].isNull() && m_book_ahead_unit_isValid;

    m_book_ahead_value_isValid = ::OpenAPI::fromJsonValue(m_book_ahead_value, json[QString("bookAheadValue")]);
    m_book_ahead_value_isSet = !json[QString("bookAheadValue")].isNull() && m_book_ahead_value_isValid;

    m_book_in_advance_isValid = ::OpenAPI::fromJsonValue(m_book_in_advance, json[QString("bookInAdvance")]);
    m_book_in_advance_isSet = !json[QString("bookInAdvance")].isNull() && m_book_in_advance_isValid;

    m_booking_interval_isValid = ::OpenAPI::fromJsonValue(m_booking_interval, json[QString("bookingInterval")]);
    m_booking_interval_isSet = !json[QString("bookingInterval")].isNull() && m_booking_interval_isValid;

    m_booking_limit_isValid = ::OpenAPI::fromJsonValue(m_booking_limit, json[QString("bookingLimit")]);
    m_booking_limit_isSet = !json[QString("bookingLimit")].isNull() && m_booking_limit_isValid;

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendarId")]);
    m_calendar_id_isSet = !json[QString("calendarId")].isNull() && m_calendar_id_isValid;

    m_calendar_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_resource_group_id, json[QString("calendarResourceGroupId")]);
    m_calendar_resource_group_id_isSet = !json[QString("calendarResourceGroupId")].isNull() && m_calendar_resource_group_id_isValid;

    m_cancellation_fee_amount_isValid = ::OpenAPI::fromJsonValue(m_cancellation_fee_amount, json[QString("cancellationFeeAmount")]);
    m_cancellation_fee_amount_isSet = !json[QString("cancellationFeeAmount")].isNull() && m_cancellation_fee_amount_isValid;

    m_cancellation_fee_taxable_isValid = ::OpenAPI::fromJsonValue(m_cancellation_fee_taxable, json[QString("cancellationFeeTaxable")]);
    m_cancellation_fee_taxable_isSet = !json[QString("cancellationFeeTaxable")].isNull() && m_cancellation_fee_taxable_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("companyId")]);
    m_company_id_isSet = !json[QString("companyId")].isNull() && m_company_id_isValid;

    m_consumer_padding_isValid = ::OpenAPI::fromJsonValue(m_consumer_padding, json[QString("consumerPadding")]);
    m_consumer_padding_isSet = !json[QString("consumerPadding")].isNull() && m_consumer_padding_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_daily_booking_limit_count_isValid = ::OpenAPI::fromJsonValue(m_daily_booking_limit_count, json[QString("dailyBookingLimitCount")]);
    m_daily_booking_limit_count_isSet = !json[QString("dailyBookingLimitCount")].isNull() && m_daily_booking_limit_count_isValid;

    m_daily_booking_limit_minutes_isValid = ::OpenAPI::fromJsonValue(m_daily_booking_limit_minutes, json[QString("dailyBookingLimitMinutes")]);
    m_daily_booking_limit_minutes_isSet = !json[QString("dailyBookingLimitMinutes")].isNull() && m_daily_booking_limit_minutes_isValid;

    m_default_service_isValid = ::OpenAPI::fromJsonValue(m_default_service, json[QString("defaultService")]);
    m_default_service_isSet = !json[QString("defaultService")].isNull() && m_default_service_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_duration_interval_isValid = ::OpenAPI::fromJsonValue(m_duration_interval, json[QString("durationInterval")]);
    m_duration_interval_isSet = !json[QString("durationInterval")].isNull() && m_duration_interval_isValid;

    m_duration_max_isValid = ::OpenAPI::fromJsonValue(m_duration_max, json[QString("durationMax")]);
    m_duration_max_isSet = !json[QString("durationMax")].isNull() && m_duration_max_isValid;

    m_duration_min_isValid = ::OpenAPI::fromJsonValue(m_duration_min, json[QString("durationMin")]);
    m_duration_min_isSet = !json[QString("durationMin")].isNull() && m_duration_min_isValid;

    m_duration_select_isValid = ::OpenAPI::fromJsonValue(m_duration_select, json[QString("durationSelect")]);
    m_duration_select_isSet = !json[QString("durationSelect")].isNull() && m_duration_select_isValid;

    m_fee_amount_isValid = ::OpenAPI::fromJsonValue(m_fee_amount, json[QString("feeAmount")]);
    m_fee_amount_isSet = !json[QString("feeAmount")].isNull() && m_fee_amount_isValid;

    m_fee_taxable_isValid = ::OpenAPI::fromJsonValue(m_fee_taxable, json[QString("feeTaxable")]);
    m_fee_taxable_isSet = !json[QString("feeTaxable")].isNull() && m_fee_taxable_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_max_booking_limit_isValid = ::OpenAPI::fromJsonValue(m_max_booking_limit, json[QString("maxBookingLimit")]);
    m_max_booking_limit_isSet = !json[QString("maxBookingLimit")].isNull() && m_max_booking_limit_isValid;

    m_max_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_capacity, json[QString("maxCapacity")]);
    m_max_capacity_isSet = !json[QString("maxCapacity")].isNull() && m_max_capacity_isValid;

    m_max_group_size_isValid = ::OpenAPI::fromJsonValue(m_max_group_size, json[QString("maxGroupSize")]);
    m_max_group_size_isSet = !json[QString("maxGroupSize")].isNull() && m_max_group_size_isValid;

    m_max_resource_booking_limit_isValid = ::OpenAPI::fromJsonValue(m_max_resource_booking_limit, json[QString("maxResourceBookingLimit")]);
    m_max_resource_booking_limit_isSet = !json[QString("maxResourceBookingLimit")].isNull() && m_max_resource_booking_limit_isValid;

    m_media_page_url_isValid = ::OpenAPI::fromJsonValue(m_media_page_url, json[QString("mediaPageUrl")]);
    m_media_page_url_isSet = !json[QString("mediaPageUrl")].isNull() && m_media_page_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_non_refundable_isValid = ::OpenAPI::fromJsonValue(m_non_refundable, json[QString("nonRefundable")]);
    m_non_refundable_isSet = !json[QString("nonRefundable")].isNull() && m_non_refundable_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_padding_isValid = ::OpenAPI::fromJsonValue(m_padding, json[QString("padding")]);
    m_padding_isSet = !json[QString("padding")].isNull() && m_padding_isValid;

    m_round_robin_isValid = ::OpenAPI::fromJsonValue(m_round_robin, json[QString("roundRobin")]);
    m_round_robin_isSet = !json[QString("roundRobin")].isNull() && m_round_robin_isValid;

    m_service_group_id_isValid = ::OpenAPI::fromJsonValue(m_service_group_id, json[QString("serviceGroupId")]);
    m_service_group_id_isSet = !json[QString("serviceGroupId")].isNull() && m_service_group_id_isValid;

    m_service_group_name_isValid = ::OpenAPI::fromJsonValue(m_service_group_name, json[QString("serviceGroupName")]);
    m_service_group_name_isSet = !json[QString("serviceGroupName")].isNull() && m_service_group_name_isValid;

    m_show_online_isValid = ::OpenAPI::fromJsonValue(m_show_online, json[QString("showOnline")]);
    m_show_online_isSet = !json[QString("showOnline")].isNull() && m_show_online_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIServiceViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.isSet()) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_book_ahead_unit_isSet) {
        obj.insert(QString("bookAheadUnit"), ::OpenAPI::toJsonValue(m_book_ahead_unit));
    }
    if (m_book_ahead_value_isSet) {
        obj.insert(QString("bookAheadValue"), ::OpenAPI::toJsonValue(m_book_ahead_value));
    }
    if (m_book_in_advance_isSet) {
        obj.insert(QString("bookInAdvance"), ::OpenAPI::toJsonValue(m_book_in_advance));
    }
    if (m_booking_interval_isSet) {
        obj.insert(QString("bookingInterval"), ::OpenAPI::toJsonValue(m_booking_interval));
    }
    if (m_booking_limit_isSet) {
        obj.insert(QString("bookingLimit"), ::OpenAPI::toJsonValue(m_booking_limit));
    }
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendarId"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_calendar_resource_group_id_isSet) {
        obj.insert(QString("calendarResourceGroupId"), ::OpenAPI::toJsonValue(m_calendar_resource_group_id));
    }
    if (m_cancellation_fee_amount_isSet) {
        obj.insert(QString("cancellationFeeAmount"), ::OpenAPI::toJsonValue(m_cancellation_fee_amount));
    }
    if (m_cancellation_fee_taxable_isSet) {
        obj.insert(QString("cancellationFeeTaxable"), ::OpenAPI::toJsonValue(m_cancellation_fee_taxable));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("companyId"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_consumer_padding_isSet) {
        obj.insert(QString("consumerPadding"), ::OpenAPI::toJsonValue(m_consumer_padding));
    }
    if (m_custom_fields.isSet()) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_daily_booking_limit_count_isSet) {
        obj.insert(QString("dailyBookingLimitCount"), ::OpenAPI::toJsonValue(m_daily_booking_limit_count));
    }
    if (m_daily_booking_limit_minutes_isSet) {
        obj.insert(QString("dailyBookingLimitMinutes"), ::OpenAPI::toJsonValue(m_daily_booking_limit_minutes));
    }
    if (m_default_service_isSet) {
        obj.insert(QString("defaultService"), ::OpenAPI::toJsonValue(m_default_service));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_duration_interval_isSet) {
        obj.insert(QString("durationInterval"), ::OpenAPI::toJsonValue(m_duration_interval));
    }
    if (m_duration_max_isSet) {
        obj.insert(QString("durationMax"), ::OpenAPI::toJsonValue(m_duration_max));
    }
    if (m_duration_min_isSet) {
        obj.insert(QString("durationMin"), ::OpenAPI::toJsonValue(m_duration_min));
    }
    if (m_duration_select_isSet) {
        obj.insert(QString("durationSelect"), ::OpenAPI::toJsonValue(m_duration_select));
    }
    if (m_fee_amount_isSet) {
        obj.insert(QString("feeAmount"), ::OpenAPI::toJsonValue(m_fee_amount));
    }
    if (m_fee_taxable_isSet) {
        obj.insert(QString("feeTaxable"), ::OpenAPI::toJsonValue(m_fee_taxable));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_max_booking_limit_isSet) {
        obj.insert(QString("maxBookingLimit"), ::OpenAPI::toJsonValue(m_max_booking_limit));
    }
    if (m_max_capacity_isSet) {
        obj.insert(QString("maxCapacity"), ::OpenAPI::toJsonValue(m_max_capacity));
    }
    if (m_max_group_size_isSet) {
        obj.insert(QString("maxGroupSize"), ::OpenAPI::toJsonValue(m_max_group_size));
    }
    if (m_max_resource_booking_limit_isSet) {
        obj.insert(QString("maxResourceBookingLimit"), ::OpenAPI::toJsonValue(m_max_resource_booking_limit));
    }
    if (m_media_page_url_isSet) {
        obj.insert(QString("mediaPageUrl"), ::OpenAPI::toJsonValue(m_media_page_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_non_refundable_isSet) {
        obj.insert(QString("nonRefundable"), ::OpenAPI::toJsonValue(m_non_refundable));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_padding_isSet) {
        obj.insert(QString("padding"), ::OpenAPI::toJsonValue(m_padding));
    }
    if (m_round_robin_isSet) {
        obj.insert(QString("roundRobin"), ::OpenAPI::toJsonValue(m_round_robin));
    }
    if (m_service_group_id_isSet) {
        obj.insert(QString("serviceGroupId"), ::OpenAPI::toJsonValue(m_service_group_id));
    }
    if (m_service_group_name_isSet) {
        obj.insert(QString("serviceGroupName"), ::OpenAPI::toJsonValue(m_service_group_name));
    }
    if (m_show_online_isSet) {
        obj.insert(QString("showOnline"), ::OpenAPI::toJsonValue(m_show_online));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIServiceHoursViewModel OAIServiceViewModel::getAvailability() const {
    return m_availability;
}
void OAIServiceViewModel::setAvailability(const OAIServiceHoursViewModel &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIServiceViewModel::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIServiceViewModel::is_availability_Valid() const{
    return m_availability_isValid;
}

qint32 OAIServiceViewModel::getBookAheadUnit() const {
    return m_book_ahead_unit;
}
void OAIServiceViewModel::setBookAheadUnit(const qint32 &book_ahead_unit) {
    m_book_ahead_unit = book_ahead_unit;
    m_book_ahead_unit_isSet = true;
}

bool OAIServiceViewModel::is_book_ahead_unit_Set() const{
    return m_book_ahead_unit_isSet;
}

bool OAIServiceViewModel::is_book_ahead_unit_Valid() const{
    return m_book_ahead_unit_isValid;
}

qint32 OAIServiceViewModel::getBookAheadValue() const {
    return m_book_ahead_value;
}
void OAIServiceViewModel::setBookAheadValue(const qint32 &book_ahead_value) {
    m_book_ahead_value = book_ahead_value;
    m_book_ahead_value_isSet = true;
}

bool OAIServiceViewModel::is_book_ahead_value_Set() const{
    return m_book_ahead_value_isSet;
}

bool OAIServiceViewModel::is_book_ahead_value_Valid() const{
    return m_book_ahead_value_isValid;
}

qint32 OAIServiceViewModel::getBookInAdvance() const {
    return m_book_in_advance;
}
void OAIServiceViewModel::setBookInAdvance(const qint32 &book_in_advance) {
    m_book_in_advance = book_in_advance;
    m_book_in_advance_isSet = true;
}

bool OAIServiceViewModel::is_book_in_advance_Set() const{
    return m_book_in_advance_isSet;
}

bool OAIServiceViewModel::is_book_in_advance_Valid() const{
    return m_book_in_advance_isValid;
}

qint32 OAIServiceViewModel::getBookingInterval() const {
    return m_booking_interval;
}
void OAIServiceViewModel::setBookingInterval(const qint32 &booking_interval) {
    m_booking_interval = booking_interval;
    m_booking_interval_isSet = true;
}

bool OAIServiceViewModel::is_booking_interval_Set() const{
    return m_booking_interval_isSet;
}

bool OAIServiceViewModel::is_booking_interval_Valid() const{
    return m_booking_interval_isValid;
}

qint32 OAIServiceViewModel::getBookingLimit() const {
    return m_booking_limit;
}
void OAIServiceViewModel::setBookingLimit(const qint32 &booking_limit) {
    m_booking_limit = booking_limit;
    m_booking_limit_isSet = true;
}

bool OAIServiceViewModel::is_booking_limit_Set() const{
    return m_booking_limit_isSet;
}

bool OAIServiceViewModel::is_booking_limit_Valid() const{
    return m_booking_limit_isValid;
}

QString OAIServiceViewModel::getCalendarId() const {
    return m_calendar_id;
}
void OAIServiceViewModel::setCalendarId(const QString &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAIServiceViewModel::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAIServiceViewModel::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

QString OAIServiceViewModel::getCalendarResourceGroupId() const {
    return m_calendar_resource_group_id;
}
void OAIServiceViewModel::setCalendarResourceGroupId(const QString &calendar_resource_group_id) {
    m_calendar_resource_group_id = calendar_resource_group_id;
    m_calendar_resource_group_id_isSet = true;
}

bool OAIServiceViewModel::is_calendar_resource_group_id_Set() const{
    return m_calendar_resource_group_id_isSet;
}

bool OAIServiceViewModel::is_calendar_resource_group_id_Valid() const{
    return m_calendar_resource_group_id_isValid;
}

double OAIServiceViewModel::getCancellationFeeAmount() const {
    return m_cancellation_fee_amount;
}
void OAIServiceViewModel::setCancellationFeeAmount(const double &cancellation_fee_amount) {
    m_cancellation_fee_amount = cancellation_fee_amount;
    m_cancellation_fee_amount_isSet = true;
}

bool OAIServiceViewModel::is_cancellation_fee_amount_Set() const{
    return m_cancellation_fee_amount_isSet;
}

bool OAIServiceViewModel::is_cancellation_fee_amount_Valid() const{
    return m_cancellation_fee_amount_isValid;
}

bool OAIServiceViewModel::isCancellationFeeTaxable() const {
    return m_cancellation_fee_taxable;
}
void OAIServiceViewModel::setCancellationFeeTaxable(const bool &cancellation_fee_taxable) {
    m_cancellation_fee_taxable = cancellation_fee_taxable;
    m_cancellation_fee_taxable_isSet = true;
}

bool OAIServiceViewModel::is_cancellation_fee_taxable_Set() const{
    return m_cancellation_fee_taxable_isSet;
}

bool OAIServiceViewModel::is_cancellation_fee_taxable_Valid() const{
    return m_cancellation_fee_taxable_isValid;
}

QString OAIServiceViewModel::getCompanyId() const {
    return m_company_id;
}
void OAIServiceViewModel::setCompanyId(const QString &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAIServiceViewModel::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAIServiceViewModel::is_company_id_Valid() const{
    return m_company_id_isValid;
}

bool OAIServiceViewModel::isConsumerPadding() const {
    return m_consumer_padding;
}
void OAIServiceViewModel::setConsumerPadding(const bool &consumer_padding) {
    m_consumer_padding = consumer_padding;
    m_consumer_padding_isSet = true;
}

bool OAIServiceViewModel::is_consumer_padding_Set() const{
    return m_consumer_padding_isSet;
}

bool OAIServiceViewModel::is_consumer_padding_Valid() const{
    return m_consumer_padding_isValid;
}

OAICustomFieldInputModel OAIServiceViewModel::getCustomFields() const {
    return m_custom_fields;
}
void OAIServiceViewModel::setCustomFields(const OAICustomFieldInputModel &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIServiceViewModel::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIServiceViewModel::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint32 OAIServiceViewModel::getDailyBookingLimitCount() const {
    return m_daily_booking_limit_count;
}
void OAIServiceViewModel::setDailyBookingLimitCount(const qint32 &daily_booking_limit_count) {
    m_daily_booking_limit_count = daily_booking_limit_count;
    m_daily_booking_limit_count_isSet = true;
}

bool OAIServiceViewModel::is_daily_booking_limit_count_Set() const{
    return m_daily_booking_limit_count_isSet;
}

bool OAIServiceViewModel::is_daily_booking_limit_count_Valid() const{
    return m_daily_booking_limit_count_isValid;
}

qint32 OAIServiceViewModel::getDailyBookingLimitMinutes() const {
    return m_daily_booking_limit_minutes;
}
void OAIServiceViewModel::setDailyBookingLimitMinutes(const qint32 &daily_booking_limit_minutes) {
    m_daily_booking_limit_minutes = daily_booking_limit_minutes;
    m_daily_booking_limit_minutes_isSet = true;
}

bool OAIServiceViewModel::is_daily_booking_limit_minutes_Set() const{
    return m_daily_booking_limit_minutes_isSet;
}

bool OAIServiceViewModel::is_daily_booking_limit_minutes_Valid() const{
    return m_daily_booking_limit_minutes_isValid;
}

bool OAIServiceViewModel::isDefaultService() const {
    return m_default_service;
}
void OAIServiceViewModel::setDefaultService(const bool &default_service) {
    m_default_service = default_service;
    m_default_service_isSet = true;
}

bool OAIServiceViewModel::is_default_service_Set() const{
    return m_default_service_isSet;
}

bool OAIServiceViewModel::is_default_service_Valid() const{
    return m_default_service_isValid;
}

QString OAIServiceViewModel::getDescription() const {
    return m_description;
}
void OAIServiceViewModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceViewModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceViewModel::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIServiceViewModel::getDuration() const {
    return m_duration;
}
void OAIServiceViewModel::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIServiceViewModel::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIServiceViewModel::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAIServiceViewModel::getDurationInterval() const {
    return m_duration_interval;
}
void OAIServiceViewModel::setDurationInterval(const qint32 &duration_interval) {
    m_duration_interval = duration_interval;
    m_duration_interval_isSet = true;
}

bool OAIServiceViewModel::is_duration_interval_Set() const{
    return m_duration_interval_isSet;
}

bool OAIServiceViewModel::is_duration_interval_Valid() const{
    return m_duration_interval_isValid;
}

qint32 OAIServiceViewModel::getDurationMax() const {
    return m_duration_max;
}
void OAIServiceViewModel::setDurationMax(const qint32 &duration_max) {
    m_duration_max = duration_max;
    m_duration_max_isSet = true;
}

bool OAIServiceViewModel::is_duration_max_Set() const{
    return m_duration_max_isSet;
}

bool OAIServiceViewModel::is_duration_max_Valid() const{
    return m_duration_max_isValid;
}

qint32 OAIServiceViewModel::getDurationMin() const {
    return m_duration_min;
}
void OAIServiceViewModel::setDurationMin(const qint32 &duration_min) {
    m_duration_min = duration_min;
    m_duration_min_isSet = true;
}

bool OAIServiceViewModel::is_duration_min_Set() const{
    return m_duration_min_isSet;
}

bool OAIServiceViewModel::is_duration_min_Valid() const{
    return m_duration_min_isValid;
}

bool OAIServiceViewModel::isDurationSelect() const {
    return m_duration_select;
}
void OAIServiceViewModel::setDurationSelect(const bool &duration_select) {
    m_duration_select = duration_select;
    m_duration_select_isSet = true;
}

bool OAIServiceViewModel::is_duration_select_Set() const{
    return m_duration_select_isSet;
}

bool OAIServiceViewModel::is_duration_select_Valid() const{
    return m_duration_select_isValid;
}

double OAIServiceViewModel::getFeeAmount() const {
    return m_fee_amount;
}
void OAIServiceViewModel::setFeeAmount(const double &fee_amount) {
    m_fee_amount = fee_amount;
    m_fee_amount_isSet = true;
}

bool OAIServiceViewModel::is_fee_amount_Set() const{
    return m_fee_amount_isSet;
}

bool OAIServiceViewModel::is_fee_amount_Valid() const{
    return m_fee_amount_isValid;
}

bool OAIServiceViewModel::isFeeTaxable() const {
    return m_fee_taxable;
}
void OAIServiceViewModel::setFeeTaxable(const bool &fee_taxable) {
    m_fee_taxable = fee_taxable;
    m_fee_taxable_isSet = true;
}

bool OAIServiceViewModel::is_fee_taxable_Set() const{
    return m_fee_taxable_isSet;
}

bool OAIServiceViewModel::is_fee_taxable_Valid() const{
    return m_fee_taxable_isValid;
}

QString OAIServiceViewModel::getId() const {
    return m_id;
}
void OAIServiceViewModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceViewModel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIServiceViewModel::getImageUrl() const {
    return m_image_url;
}
void OAIServiceViewModel::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIServiceViewModel::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIServiceViewModel::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIServiceViewModel::getLocationId() const {
    return m_location_id;
}
void OAIServiceViewModel::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIServiceViewModel::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIServiceViewModel::is_location_id_Valid() const{
    return m_location_id_isValid;
}

qint32 OAIServiceViewModel::getMaxBookingLimit() const {
    return m_max_booking_limit;
}
void OAIServiceViewModel::setMaxBookingLimit(const qint32 &max_booking_limit) {
    m_max_booking_limit = max_booking_limit;
    m_max_booking_limit_isSet = true;
}

bool OAIServiceViewModel::is_max_booking_limit_Set() const{
    return m_max_booking_limit_isSet;
}

bool OAIServiceViewModel::is_max_booking_limit_Valid() const{
    return m_max_booking_limit_isValid;
}

qint32 OAIServiceViewModel::getMaxCapacity() const {
    return m_max_capacity;
}
void OAIServiceViewModel::setMaxCapacity(const qint32 &max_capacity) {
    m_max_capacity = max_capacity;
    m_max_capacity_isSet = true;
}

bool OAIServiceViewModel::is_max_capacity_Set() const{
    return m_max_capacity_isSet;
}

bool OAIServiceViewModel::is_max_capacity_Valid() const{
    return m_max_capacity_isValid;
}

qint32 OAIServiceViewModel::getMaxGroupSize() const {
    return m_max_group_size;
}
void OAIServiceViewModel::setMaxGroupSize(const qint32 &max_group_size) {
    m_max_group_size = max_group_size;
    m_max_group_size_isSet = true;
}

bool OAIServiceViewModel::is_max_group_size_Set() const{
    return m_max_group_size_isSet;
}

bool OAIServiceViewModel::is_max_group_size_Valid() const{
    return m_max_group_size_isValid;
}

qint32 OAIServiceViewModel::getMaxResourceBookingLimit() const {
    return m_max_resource_booking_limit;
}
void OAIServiceViewModel::setMaxResourceBookingLimit(const qint32 &max_resource_booking_limit) {
    m_max_resource_booking_limit = max_resource_booking_limit;
    m_max_resource_booking_limit_isSet = true;
}

bool OAIServiceViewModel::is_max_resource_booking_limit_Set() const{
    return m_max_resource_booking_limit_isSet;
}

bool OAIServiceViewModel::is_max_resource_booking_limit_Valid() const{
    return m_max_resource_booking_limit_isValid;
}

QString OAIServiceViewModel::getMediaPageUrl() const {
    return m_media_page_url;
}
void OAIServiceViewModel::setMediaPageUrl(const QString &media_page_url) {
    m_media_page_url = media_page_url;
    m_media_page_url_isSet = true;
}

bool OAIServiceViewModel::is_media_page_url_Set() const{
    return m_media_page_url_isSet;
}

bool OAIServiceViewModel::is_media_page_url_Valid() const{
    return m_media_page_url_isValid;
}

QString OAIServiceViewModel::getName() const {
    return m_name;
}
void OAIServiceViewModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceViewModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceViewModel::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIServiceViewModel::isNonRefundable() const {
    return m_non_refundable;
}
void OAIServiceViewModel::setNonRefundable(const bool &non_refundable) {
    m_non_refundable = non_refundable;
    m_non_refundable_isSet = true;
}

bool OAIServiceViewModel::is_non_refundable_Set() const{
    return m_non_refundable_isSet;
}

bool OAIServiceViewModel::is_non_refundable_Valid() const{
    return m_non_refundable_isValid;
}

QString OAIServiceViewModel::getObject() const {
    return m_object;
}
void OAIServiceViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIServiceViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIServiceViewModel::is_object_Valid() const{
    return m_object_isValid;
}

qint32 OAIServiceViewModel::getPadding() const {
    return m_padding;
}
void OAIServiceViewModel::setPadding(const qint32 &padding) {
    m_padding = padding;
    m_padding_isSet = true;
}

bool OAIServiceViewModel::is_padding_Set() const{
    return m_padding_isSet;
}

bool OAIServiceViewModel::is_padding_Valid() const{
    return m_padding_isValid;
}

qint32 OAIServiceViewModel::getRoundRobin() const {
    return m_round_robin;
}
void OAIServiceViewModel::setRoundRobin(const qint32 &round_robin) {
    m_round_robin = round_robin;
    m_round_robin_isSet = true;
}

bool OAIServiceViewModel::is_round_robin_Set() const{
    return m_round_robin_isSet;
}

bool OAIServiceViewModel::is_round_robin_Valid() const{
    return m_round_robin_isValid;
}

qint32 OAIServiceViewModel::getServiceGroupId() const {
    return m_service_group_id;
}
void OAIServiceViewModel::setServiceGroupId(const qint32 &service_group_id) {
    m_service_group_id = service_group_id;
    m_service_group_id_isSet = true;
}

bool OAIServiceViewModel::is_service_group_id_Set() const{
    return m_service_group_id_isSet;
}

bool OAIServiceViewModel::is_service_group_id_Valid() const{
    return m_service_group_id_isValid;
}

QString OAIServiceViewModel::getServiceGroupName() const {
    return m_service_group_name;
}
void OAIServiceViewModel::setServiceGroupName(const QString &service_group_name) {
    m_service_group_name = service_group_name;
    m_service_group_name_isSet = true;
}

bool OAIServiceViewModel::is_service_group_name_Set() const{
    return m_service_group_name_isSet;
}

bool OAIServiceViewModel::is_service_group_name_Valid() const{
    return m_service_group_name_isValid;
}

bool OAIServiceViewModel::isShowOnline() const {
    return m_show_online;
}
void OAIServiceViewModel::setShowOnline(const bool &show_online) {
    m_show_online = show_online;
    m_show_online_isSet = true;
}

bool OAIServiceViewModel::is_show_online_Set() const{
    return m_show_online_isSet;
}

bool OAIServiceViewModel::is_show_online_Valid() const{
    return m_show_online_isValid;
}

QString OAIServiceViewModel::getType() const {
    return m_type;
}
void OAIServiceViewModel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIServiceViewModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIServiceViewModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIServiceViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_ahead_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_ahead_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_book_in_advance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_fee_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_fee_taxable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_padding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_booking_limit_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_booking_limit_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_select_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_taxable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_booking_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_group_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_resource_booking_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_refundable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_round_robin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
