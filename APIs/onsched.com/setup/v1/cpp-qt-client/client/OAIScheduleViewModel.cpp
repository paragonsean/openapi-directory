/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleViewModel::OAIScheduleViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleViewModel::OAIScheduleViewModel() {
    this->initializeModel();
}

OAIScheduleViewModel::~OAIScheduleViewModel() {}

void OAIScheduleViewModel::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_bookings_per_slot_isSet = false;
    m_bookings_per_slot_isValid = false;

    m_deleted_status_isSet = false;
    m_deleted_status_isValid = false;

    m_deleted_time_isSet = false;
    m_deleted_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_resource_group_id_isSet = false;
    m_resource_group_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIScheduleViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleViewModel::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_bookings_per_slot_isValid = ::OpenAPI::fromJsonValue(m_bookings_per_slot, json[QString("bookingsPerSlot")]);
    m_bookings_per_slot_isSet = !json[QString("bookingsPerSlot")].isNull() && m_bookings_per_slot_isValid;

    m_deleted_status_isValid = ::OpenAPI::fromJsonValue(m_deleted_status, json[QString("deletedStatus")]);
    m_deleted_status_isSet = !json[QString("deletedStatus")].isNull() && m_deleted_status_isValid;

    m_deleted_time_isValid = ::OpenAPI::fromJsonValue(m_deleted_time, json[QString("deletedTime")]);
    m_deleted_time_isSet = !json[QString("deletedTime")].isNull() && m_deleted_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_resource_group_id, json[QString("resourceGroupId")]);
    m_resource_group_id_isSet = !json[QString("resourceGroupId")].isNull() && m_resource_group_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIScheduleViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.isSet()) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_bookings_per_slot_isSet) {
        obj.insert(QString("bookingsPerSlot"), ::OpenAPI::toJsonValue(m_bookings_per_slot));
    }
    if (m_deleted_status_isSet) {
        obj.insert(QString("deletedStatus"), ::OpenAPI::toJsonValue(m_deleted_status));
    }
    if (m_deleted_time_isSet) {
        obj.insert(QString("deletedTime"), ::OpenAPI::toJsonValue(m_deleted_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_resource_group_id_isSet) {
        obj.insert(QString("resourceGroupId"), ::OpenAPI::toJsonValue(m_resource_group_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICalendarHoursViewModel OAIScheduleViewModel::getAvailability() const {
    return m_availability;
}
void OAIScheduleViewModel::setAvailability(const OAICalendarHoursViewModel &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIScheduleViewModel::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIScheduleViewModel::is_availability_Valid() const{
    return m_availability_isValid;
}

qint32 OAIScheduleViewModel::getBookingsPerSlot() const {
    return m_bookings_per_slot;
}
void OAIScheduleViewModel::setBookingsPerSlot(const qint32 &bookings_per_slot) {
    m_bookings_per_slot = bookings_per_slot;
    m_bookings_per_slot_isSet = true;
}

bool OAIScheduleViewModel::is_bookings_per_slot_Set() const{
    return m_bookings_per_slot_isSet;
}

bool OAIScheduleViewModel::is_bookings_per_slot_Valid() const{
    return m_bookings_per_slot_isValid;
}

bool OAIScheduleViewModel::isDeletedStatus() const {
    return m_deleted_status;
}
void OAIScheduleViewModel::setDeletedStatus(const bool &deleted_status) {
    m_deleted_status = deleted_status;
    m_deleted_status_isSet = true;
}

bool OAIScheduleViewModel::is_deleted_status_Set() const{
    return m_deleted_status_isSet;
}

bool OAIScheduleViewModel::is_deleted_status_Valid() const{
    return m_deleted_status_isValid;
}

QDateTime OAIScheduleViewModel::getDeletedTime() const {
    return m_deleted_time;
}
void OAIScheduleViewModel::setDeletedTime(const QDateTime &deleted_time) {
    m_deleted_time = deleted_time;
    m_deleted_time_isSet = true;
}

bool OAIScheduleViewModel::is_deleted_time_Set() const{
    return m_deleted_time_isSet;
}

bool OAIScheduleViewModel::is_deleted_time_Valid() const{
    return m_deleted_time_isValid;
}

QString OAIScheduleViewModel::getId() const {
    return m_id;
}
void OAIScheduleViewModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScheduleViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScheduleViewModel::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIScheduleViewModel::getInterval() const {
    return m_interval;
}
void OAIScheduleViewModel::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIScheduleViewModel::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIScheduleViewModel::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAIScheduleViewModel::getLocationId() const {
    return m_location_id;
}
void OAIScheduleViewModel::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIScheduleViewModel::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIScheduleViewModel::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIScheduleViewModel::getName() const {
    return m_name;
}
void OAIScheduleViewModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScheduleViewModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScheduleViewModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIScheduleViewModel::getObject() const {
    return m_object;
}
void OAIScheduleViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIScheduleViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIScheduleViewModel::is_object_Valid() const{
    return m_object_isValid;
}

bool OAIScheduleViewModel::isPrimary() const {
    return m_primary;
}
void OAIScheduleViewModel::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIScheduleViewModel::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIScheduleViewModel::is_primary_Valid() const{
    return m_primary_isValid;
}

QString OAIScheduleViewModel::getResourceGroupId() const {
    return m_resource_group_id;
}
void OAIScheduleViewModel::setResourceGroupId(const QString &resource_group_id) {
    m_resource_group_id = resource_group_id;
    m_resource_group_id_isSet = true;
}

bool OAIScheduleViewModel::is_resource_group_id_Set() const{
    return m_resource_group_id_isSet;
}

bool OAIScheduleViewModel::is_resource_group_id_Valid() const{
    return m_resource_group_id_isValid;
}

QString OAIScheduleViewModel::getType() const {
    return m_type;
}
void OAIScheduleViewModel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIScheduleViewModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIScheduleViewModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIScheduleViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookings_per_slot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
