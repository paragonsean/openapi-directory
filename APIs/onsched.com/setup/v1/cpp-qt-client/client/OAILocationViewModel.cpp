/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationViewModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationViewModel::OAILocationViewModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationViewModel::OAILocationViewModel() {
    this->initializeModel();
}

OAILocationViewModel::~OAILocationViewModel() {}

void OAILocationViewModel::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_admin_email_isSet = false;
    m_admin_email_isValid = false;

    m_admin_name_isSet = false;
    m_admin_name_isValid = false;

    m_appointment_reminders_isSet = false;
    m_appointment_reminders_isValid = false;

    m_business_holidays_isSet = false;
    m_business_holidays_isValid = false;

    m_business_hours_isSet = false;
    m_business_hours_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_defaults_isSet = false;
    m_defaults_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_friendly_id_isSet = false;
    m_friendly_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_primary_business_isSet = false;
    m_primary_business_isValid = false;

    m_primary_calendar_id_isSet = false;
    m_primary_calendar_id_isValid = false;

    m_region_id_isSet = false;
    m_region_id_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_timezone_iana_isSet = false;
    m_timezone_iana_isValid = false;

    m_timezone_id_isSet = false;
    m_timezone_id_isValid = false;

    m_timezone_offset_isSet = false;
    m_timezone_offset_isValid = false;

    m_travel_isSet = false;
    m_travel_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAILocationViewModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationViewModel::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_admin_email_isValid = ::OpenAPI::fromJsonValue(m_admin_email, json[QString("adminEmail")]);
    m_admin_email_isSet = !json[QString("adminEmail")].isNull() && m_admin_email_isValid;

    m_admin_name_isValid = ::OpenAPI::fromJsonValue(m_admin_name, json[QString("adminName")]);
    m_admin_name_isSet = !json[QString("adminName")].isNull() && m_admin_name_isValid;

    m_appointment_reminders_isValid = ::OpenAPI::fromJsonValue(m_appointment_reminders, json[QString("appointmentReminders")]);
    m_appointment_reminders_isSet = !json[QString("appointmentReminders")].isNull() && m_appointment_reminders_isValid;

    m_business_holidays_isValid = ::OpenAPI::fromJsonValue(m_business_holidays, json[QString("businessHolidays")]);
    m_business_holidays_isSet = !json[QString("businessHolidays")].isNull() && m_business_holidays_isValid;

    m_business_hours_isValid = ::OpenAPI::fromJsonValue(m_business_hours, json[QString("businessHours")]);
    m_business_hours_isSet = !json[QString("businessHours")].isNull() && m_business_hours_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("companyId")]);
    m_company_id_isSet = !json[QString("companyId")].isNull() && m_company_id_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_defaults_isValid = ::OpenAPI::fromJsonValue(m_defaults, json[QString("defaults")]);
    m_defaults_isSet = !json[QString("defaults")].isNull() && m_defaults_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_friendly_id_isValid = ::OpenAPI::fromJsonValue(m_friendly_id, json[QString("friendlyId")]);
    m_friendly_id_isSet = !json[QString("friendlyId")].isNull() && m_friendly_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_primary_business_isValid = ::OpenAPI::fromJsonValue(m_primary_business, json[QString("primaryBusiness")]);
    m_primary_business_isSet = !json[QString("primaryBusiness")].isNull() && m_primary_business_isValid;

    m_primary_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_primary_calendar_id, json[QString("primaryCalendarId")]);
    m_primary_calendar_id_isSet = !json[QString("primaryCalendarId")].isNull() && m_primary_calendar_id_isValid;

    m_region_id_isValid = ::OpenAPI::fromJsonValue(m_region_id, json[QString("regionId")]);
    m_region_id_isSet = !json[QString("regionId")].isNull() && m_region_id_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_timezone_iana_isValid = ::OpenAPI::fromJsonValue(m_timezone_iana, json[QString("timezoneIana")]);
    m_timezone_iana_isSet = !json[QString("timezoneIana")].isNull() && m_timezone_iana_isValid;

    m_timezone_id_isValid = ::OpenAPI::fromJsonValue(m_timezone_id, json[QString("timezoneId")]);
    m_timezone_id_isSet = !json[QString("timezoneId")].isNull() && m_timezone_id_isValid;

    m_timezone_offset_isValid = ::OpenAPI::fromJsonValue(m_timezone_offset, json[QString("timezoneOffset")]);
    m_timezone_offset_isSet = !json[QString("timezoneOffset")].isNull() && m_timezone_offset_isValid;

    m_travel_isValid = ::OpenAPI::fromJsonValue(m_travel, json[QString("travel")]);
    m_travel_isSet = !json[QString("travel")].isNull() && m_travel_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAILocationViewModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationViewModel::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_admin_email_isSet) {
        obj.insert(QString("adminEmail"), ::OpenAPI::toJsonValue(m_admin_email));
    }
    if (m_admin_name_isSet) {
        obj.insert(QString("adminName"), ::OpenAPI::toJsonValue(m_admin_name));
    }
    if (m_appointment_reminders.isSet()) {
        obj.insert(QString("appointmentReminders"), ::OpenAPI::toJsonValue(m_appointment_reminders));
    }
    if (m_business_holidays.size() > 0) {
        obj.insert(QString("businessHolidays"), ::OpenAPI::toJsonValue(m_business_holidays));
    }
    if (m_business_hours.isSet()) {
        obj.insert(QString("businessHours"), ::OpenAPI::toJsonValue(m_business_hours));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("companyId"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_defaults.isSet()) {
        obj.insert(QString("defaults"), ::OpenAPI::toJsonValue(m_defaults));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_friendly_id_isSet) {
        obj.insert(QString("friendlyId"), ::OpenAPI::toJsonValue(m_friendly_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_primary_business_isSet) {
        obj.insert(QString("primaryBusiness"), ::OpenAPI::toJsonValue(m_primary_business));
    }
    if (m_primary_calendar_id_isSet) {
        obj.insert(QString("primaryCalendarId"), ::OpenAPI::toJsonValue(m_primary_calendar_id));
    }
    if (m_region_id_isSet) {
        obj.insert(QString("regionId"), ::OpenAPI::toJsonValue(m_region_id));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_timezone_iana_isSet) {
        obj.insert(QString("timezoneIana"), ::OpenAPI::toJsonValue(m_timezone_iana));
    }
    if (m_timezone_id_isSet) {
        obj.insert(QString("timezoneId"), ::OpenAPI::toJsonValue(m_timezone_id));
    }
    if (m_timezone_offset_isSet) {
        obj.insert(QString("timezoneOffset"), ::OpenAPI::toJsonValue(m_timezone_offset));
    }
    if (m_travel.isSet()) {
        obj.insert(QString("travel"), ::OpenAPI::toJsonValue(m_travel));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

OAIAddressViewModel OAILocationViewModel::getAddress() const {
    return m_address;
}
void OAILocationViewModel::setAddress(const OAIAddressViewModel &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILocationViewModel::is_address_Set() const{
    return m_address_isSet;
}

bool OAILocationViewModel::is_address_Valid() const{
    return m_address_isValid;
}

QString OAILocationViewModel::getAdminEmail() const {
    return m_admin_email;
}
void OAILocationViewModel::setAdminEmail(const QString &admin_email) {
    m_admin_email = admin_email;
    m_admin_email_isSet = true;
}

bool OAILocationViewModel::is_admin_email_Set() const{
    return m_admin_email_isSet;
}

bool OAILocationViewModel::is_admin_email_Valid() const{
    return m_admin_email_isValid;
}

QString OAILocationViewModel::getAdminName() const {
    return m_admin_name;
}
void OAILocationViewModel::setAdminName(const QString &admin_name) {
    m_admin_name = admin_name;
    m_admin_name_isSet = true;
}

bool OAILocationViewModel::is_admin_name_Set() const{
    return m_admin_name_isSet;
}

bool OAILocationViewModel::is_admin_name_Valid() const{
    return m_admin_name_isValid;
}

OAIAppointmentReminderViewModel OAILocationViewModel::getAppointmentReminders() const {
    return m_appointment_reminders;
}
void OAILocationViewModel::setAppointmentReminders(const OAIAppointmentReminderViewModel &appointment_reminders) {
    m_appointment_reminders = appointment_reminders;
    m_appointment_reminders_isSet = true;
}

bool OAILocationViewModel::is_appointment_reminders_Set() const{
    return m_appointment_reminders_isSet;
}

bool OAILocationViewModel::is_appointment_reminders_Valid() const{
    return m_appointment_reminders_isValid;
}

QList<OAIBusinessHolidayViewModel> OAILocationViewModel::getBusinessHolidays() const {
    return m_business_holidays;
}
void OAILocationViewModel::setBusinessHolidays(const QList<OAIBusinessHolidayViewModel> &business_holidays) {
    m_business_holidays = business_holidays;
    m_business_holidays_isSet = true;
}

bool OAILocationViewModel::is_business_holidays_Set() const{
    return m_business_holidays_isSet;
}

bool OAILocationViewModel::is_business_holidays_Valid() const{
    return m_business_holidays_isValid;
}

OAIBusinessHoursViewModel OAILocationViewModel::getBusinessHours() const {
    return m_business_hours;
}
void OAILocationViewModel::setBusinessHours(const OAIBusinessHoursViewModel &business_hours) {
    m_business_hours = business_hours;
    m_business_hours_isSet = true;
}

bool OAILocationViewModel::is_business_hours_Set() const{
    return m_business_hours_isSet;
}

bool OAILocationViewModel::is_business_hours_Valid() const{
    return m_business_hours_isValid;
}

QString OAILocationViewModel::getCompanyId() const {
    return m_company_id;
}
void OAILocationViewModel::setCompanyId(const QString &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAILocationViewModel::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAILocationViewModel::is_company_id_Valid() const{
    return m_company_id_isValid;
}

QString OAILocationViewModel::getCompanyName() const {
    return m_company_name;
}
void OAILocationViewModel::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAILocationViewModel::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAILocationViewModel::is_company_name_Valid() const{
    return m_company_name_isValid;
}

OAIBusinessDefaultsViewModel OAILocationViewModel::getDefaults() const {
    return m_defaults;
}
void OAILocationViewModel::setDefaults(const OAIBusinessDefaultsViewModel &defaults) {
    m_defaults = defaults;
    m_defaults_isSet = true;
}

bool OAILocationViewModel::is_defaults_Set() const{
    return m_defaults_isSet;
}

bool OAILocationViewModel::is_defaults_Valid() const{
    return m_defaults_isValid;
}

QString OAILocationViewModel::getEmail() const {
    return m_email;
}
void OAILocationViewModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAILocationViewModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAILocationViewModel::is_email_Valid() const{
    return m_email_isValid;
}

QString OAILocationViewModel::getFax() const {
    return m_fax;
}
void OAILocationViewModel::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAILocationViewModel::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAILocationViewModel::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAILocationViewModel::getFriendlyId() const {
    return m_friendly_id;
}
void OAILocationViewModel::setFriendlyId(const QString &friendly_id) {
    m_friendly_id = friendly_id;
    m_friendly_id_isSet = true;
}

bool OAILocationViewModel::is_friendly_id_Set() const{
    return m_friendly_id_isSet;
}

bool OAILocationViewModel::is_friendly_id_Valid() const{
    return m_friendly_id_isValid;
}

QString OAILocationViewModel::getId() const {
    return m_id;
}
void OAILocationViewModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILocationViewModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAILocationViewModel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILocationViewModel::getImageUrl() const {
    return m_image_url;
}
void OAILocationViewModel::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAILocationViewModel::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAILocationViewModel::is_image_url_Valid() const{
    return m_image_url_isValid;
}

double OAILocationViewModel::getLatitude() const {
    return m_latitude;
}
void OAILocationViewModel::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAILocationViewModel::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAILocationViewModel::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAILocationViewModel::getLogo() const {
    return m_logo;
}
void OAILocationViewModel::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAILocationViewModel::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAILocationViewModel::is_logo_Valid() const{
    return m_logo_isValid;
}

double OAILocationViewModel::getLongitude() const {
    return m_longitude;
}
void OAILocationViewModel::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAILocationViewModel::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAILocationViewModel::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAILocationViewModel::getName() const {
    return m_name;
}
void OAILocationViewModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILocationViewModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAILocationViewModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILocationViewModel::getObject() const {
    return m_object;
}
void OAILocationViewModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAILocationViewModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAILocationViewModel::is_object_Valid() const{
    return m_object_isValid;
}

QString OAILocationViewModel::getPhone() const {
    return m_phone;
}
void OAILocationViewModel::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAILocationViewModel::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAILocationViewModel::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAILocationViewModel::isPrimaryBusiness() const {
    return m_primary_business;
}
void OAILocationViewModel::setPrimaryBusiness(const bool &primary_business) {
    m_primary_business = primary_business;
    m_primary_business_isSet = true;
}

bool OAILocationViewModel::is_primary_business_Set() const{
    return m_primary_business_isSet;
}

bool OAILocationViewModel::is_primary_business_Valid() const{
    return m_primary_business_isValid;
}

QString OAILocationViewModel::getPrimaryCalendarId() const {
    return m_primary_calendar_id;
}
void OAILocationViewModel::setPrimaryCalendarId(const QString &primary_calendar_id) {
    m_primary_calendar_id = primary_calendar_id;
    m_primary_calendar_id_isSet = true;
}

bool OAILocationViewModel::is_primary_calendar_id_Set() const{
    return m_primary_calendar_id_isSet;
}

bool OAILocationViewModel::is_primary_calendar_id_Valid() const{
    return m_primary_calendar_id_isValid;
}

QString OAILocationViewModel::getRegionId() const {
    return m_region_id;
}
void OAILocationViewModel::setRegionId(const QString &region_id) {
    m_region_id = region_id;
    m_region_id_isSet = true;
}

bool OAILocationViewModel::is_region_id_Set() const{
    return m_region_id_isSet;
}

bool OAILocationViewModel::is_region_id_Valid() const{
    return m_region_id_isValid;
}

QList<OAIBusinessServiceViewModel> OAILocationViewModel::getServices() const {
    return m_services;
}
void OAILocationViewModel::setServices(const QList<OAIBusinessServiceViewModel> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAILocationViewModel::is_services_Set() const{
    return m_services_isSet;
}

bool OAILocationViewModel::is_services_Valid() const{
    return m_services_isValid;
}

OAIOnlineSettingsViewModel OAILocationViewModel::getSettings() const {
    return m_settings;
}
void OAILocationViewModel::setSettings(const OAIOnlineSettingsViewModel &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAILocationViewModel::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAILocationViewModel::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAILocationViewModel::getTimezoneIana() const {
    return m_timezone_iana;
}
void OAILocationViewModel::setTimezoneIana(const QString &timezone_iana) {
    m_timezone_iana = timezone_iana;
    m_timezone_iana_isSet = true;
}

bool OAILocationViewModel::is_timezone_iana_Set() const{
    return m_timezone_iana_isSet;
}

bool OAILocationViewModel::is_timezone_iana_Valid() const{
    return m_timezone_iana_isValid;
}

QString OAILocationViewModel::getTimezoneId() const {
    return m_timezone_id;
}
void OAILocationViewModel::setTimezoneId(const QString &timezone_id) {
    m_timezone_id = timezone_id;
    m_timezone_id_isSet = true;
}

bool OAILocationViewModel::is_timezone_id_Set() const{
    return m_timezone_id_isSet;
}

bool OAILocationViewModel::is_timezone_id_Valid() const{
    return m_timezone_id_isValid;
}

qint32 OAILocationViewModel::getTimezoneOffset() const {
    return m_timezone_offset;
}
void OAILocationViewModel::setTimezoneOffset(const qint32 &timezone_offset) {
    m_timezone_offset = timezone_offset;
    m_timezone_offset_isSet = true;
}

bool OAILocationViewModel::is_timezone_offset_Set() const{
    return m_timezone_offset_isSet;
}

bool OAILocationViewModel::is_timezone_offset_Valid() const{
    return m_timezone_offset_isValid;
}

OAITravelViewModel OAILocationViewModel::getTravel() const {
    return m_travel;
}
void OAILocationViewModel::setTravel(const OAITravelViewModel &travel) {
    m_travel = travel;
    m_travel_isSet = true;
}

bool OAILocationViewModel::is_travel_Set() const{
    return m_travel_isSet;
}

bool OAILocationViewModel::is_travel_Valid() const{
    return m_travel_isValid;
}

QString OAILocationViewModel::getWebsite() const {
    return m_website;
}
void OAILocationViewModel::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAILocationViewModel::is_website_Set() const{
    return m_website_isSet;
}

bool OAILocationViewModel::is_website_Valid() const{
    return m_website_isValid;
}

bool OAILocationViewModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_appointment_reminders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_holidays.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_business_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_iana_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationViewModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
