/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceInputModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceInputModel::OAIServiceInputModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceInputModel::OAIServiceInputModel() {
    this->initializeModel();
}

OAIServiceInputModel::~OAIServiceInputModel() {}

void OAIServiceInputModel::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_booking_interval_isSet = false;
    m_booking_interval_isValid = false;

    m_booking_limit_isSet = false;
    m_booking_limit_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_fees_isSet = false;
    m_fees_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_max_capacity_isSet = false;
    m_max_capacity_isValid = false;

    m_max_group_size_isSet = false;
    m_max_group_size_isValid = false;

    m_media_page_url_isSet = false;
    m_media_page_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_service_group_id_isSet = false;
    m_service_group_id_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIServiceInputModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceInputModel::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_booking_interval_isValid = ::OpenAPI::fromJsonValue(m_booking_interval, json[QString("bookingInterval")]);
    m_booking_interval_isSet = !json[QString("bookingInterval")].isNull() && m_booking_interval_isValid;

    m_booking_limit_isValid = ::OpenAPI::fromJsonValue(m_booking_limit, json[QString("bookingLimit")]);
    m_booking_limit_isSet = !json[QString("bookingLimit")].isNull() && m_booking_limit_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_fees_isValid = ::OpenAPI::fromJsonValue(m_fees, json[QString("fees")]);
    m_fees_isSet = !json[QString("fees")].isNull() && m_fees_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_max_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_capacity, json[QString("maxCapacity")]);
    m_max_capacity_isSet = !json[QString("maxCapacity")].isNull() && m_max_capacity_isValid;

    m_max_group_size_isValid = ::OpenAPI::fromJsonValue(m_max_group_size, json[QString("maxGroupSize")]);
    m_max_group_size_isSet = !json[QString("maxGroupSize")].isNull() && m_max_group_size_isValid;

    m_media_page_url_isValid = ::OpenAPI::fromJsonValue(m_media_page_url, json[QString("mediaPageUrl")]);
    m_media_page_url_isSet = !json[QString("mediaPageUrl")].isNull() && m_media_page_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_service_group_id_isValid = ::OpenAPI::fromJsonValue(m_service_group_id, json[QString("serviceGroupId")]);
    m_service_group_id_isSet = !json[QString("serviceGroupId")].isNull() && m_service_group_id_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIServiceInputModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceInputModel::asJsonObject() const {
    QJsonObject obj;
    if (m_availability.isSet()) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_booking_interval_isSet) {
        obj.insert(QString("bookingInterval"), ::OpenAPI::toJsonValue(m_booking_interval));
    }
    if (m_booking_limit_isSet) {
        obj.insert(QString("bookingLimit"), ::OpenAPI::toJsonValue(m_booking_limit));
    }
    if (m_custom_fields.isSet()) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_fees.isSet()) {
        obj.insert(QString("fees"), ::OpenAPI::toJsonValue(m_fees));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_max_capacity_isSet) {
        obj.insert(QString("maxCapacity"), ::OpenAPI::toJsonValue(m_max_capacity));
    }
    if (m_max_group_size_isSet) {
        obj.insert(QString("maxGroupSize"), ::OpenAPI::toJsonValue(m_max_group_size));
    }
    if (m_media_page_url_isSet) {
        obj.insert(QString("mediaPageUrl"), ::OpenAPI::toJsonValue(m_media_page_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_service_group_id_isSet) {
        obj.insert(QString("serviceGroupId"), ::OpenAPI::toJsonValue(m_service_group_id));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAvailabilityInputModel OAIServiceInputModel::getAvailability() const {
    return m_availability;
}
void OAIServiceInputModel::setAvailability(const OAIAvailabilityInputModel &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIServiceInputModel::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIServiceInputModel::is_availability_Valid() const{
    return m_availability_isValid;
}

qint32 OAIServiceInputModel::getBookingInterval() const {
    return m_booking_interval;
}
void OAIServiceInputModel::setBookingInterval(const qint32 &booking_interval) {
    m_booking_interval = booking_interval;
    m_booking_interval_isSet = true;
}

bool OAIServiceInputModel::is_booking_interval_Set() const{
    return m_booking_interval_isSet;
}

bool OAIServiceInputModel::is_booking_interval_Valid() const{
    return m_booking_interval_isValid;
}

qint32 OAIServiceInputModel::getBookingLimit() const {
    return m_booking_limit;
}
void OAIServiceInputModel::setBookingLimit(const qint32 &booking_limit) {
    m_booking_limit = booking_limit;
    m_booking_limit_isSet = true;
}

bool OAIServiceInputModel::is_booking_limit_Set() const{
    return m_booking_limit_isSet;
}

bool OAIServiceInputModel::is_booking_limit_Valid() const{
    return m_booking_limit_isValid;
}

OAICustomFieldInputModel OAIServiceInputModel::getCustomFields() const {
    return m_custom_fields;
}
void OAIServiceInputModel::setCustomFields(const OAICustomFieldInputModel &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIServiceInputModel::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIServiceInputModel::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIServiceInputModel::getDescription() const {
    return m_description;
}
void OAIServiceInputModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceInputModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceInputModel::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIServiceInputModel::getDuration() const {
    return m_duration;
}
void OAIServiceInputModel::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIServiceInputModel::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIServiceInputModel::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIServiceFeesInputModel OAIServiceInputModel::getFees() const {
    return m_fees;
}
void OAIServiceInputModel::setFees(const OAIServiceFeesInputModel &fees) {
    m_fees = fees;
    m_fees_isSet = true;
}

bool OAIServiceInputModel::is_fees_Set() const{
    return m_fees_isSet;
}

bool OAIServiceInputModel::is_fees_Valid() const{
    return m_fees_isValid;
}

QString OAIServiceInputModel::getLocationId() const {
    return m_location_id;
}
void OAIServiceInputModel::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIServiceInputModel::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIServiceInputModel::is_location_id_Valid() const{
    return m_location_id_isValid;
}

qint32 OAIServiceInputModel::getMaxCapacity() const {
    return m_max_capacity;
}
void OAIServiceInputModel::setMaxCapacity(const qint32 &max_capacity) {
    m_max_capacity = max_capacity;
    m_max_capacity_isSet = true;
}

bool OAIServiceInputModel::is_max_capacity_Set() const{
    return m_max_capacity_isSet;
}

bool OAIServiceInputModel::is_max_capacity_Valid() const{
    return m_max_capacity_isValid;
}

qint32 OAIServiceInputModel::getMaxGroupSize() const {
    return m_max_group_size;
}
void OAIServiceInputModel::setMaxGroupSize(const qint32 &max_group_size) {
    m_max_group_size = max_group_size;
    m_max_group_size_isSet = true;
}

bool OAIServiceInputModel::is_max_group_size_Set() const{
    return m_max_group_size_isSet;
}

bool OAIServiceInputModel::is_max_group_size_Valid() const{
    return m_max_group_size_isValid;
}

QString OAIServiceInputModel::getMediaPageUrl() const {
    return m_media_page_url;
}
void OAIServiceInputModel::setMediaPageUrl(const QString &media_page_url) {
    m_media_page_url = media_page_url;
    m_media_page_url_isSet = true;
}

bool OAIServiceInputModel::is_media_page_url_Set() const{
    return m_media_page_url_isSet;
}

bool OAIServiceInputModel::is_media_page_url_Valid() const{
    return m_media_page_url_isValid;
}

QString OAIServiceInputModel::getName() const {
    return m_name;
}
void OAIServiceInputModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceInputModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceInputModel::is_name_Valid() const{
    return m_name_isValid;
}

OAIServiceOptionsInputModel OAIServiceInputModel::getOptions() const {
    return m_options;
}
void OAIServiceInputModel::setOptions(const OAIServiceOptionsInputModel &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIServiceInputModel::is_options_Set() const{
    return m_options_isSet;
}

bool OAIServiceInputModel::is_options_Valid() const{
    return m_options_isValid;
}

bool OAIServiceInputModel::isRPublic() const {
    return m_r_public;
}
void OAIServiceInputModel::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIServiceInputModel::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIServiceInputModel::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QString OAIServiceInputModel::getServiceGroupId() const {
    return m_service_group_id;
}
void OAIServiceInputModel::setServiceGroupId(const QString &service_group_id) {
    m_service_group_id = service_group_id;
    m_service_group_id_isSet = true;
}

bool OAIServiceInputModel::is_service_group_id_Set() const{
    return m_service_group_id_isSet;
}

bool OAIServiceInputModel::is_service_group_id_Valid() const{
    return m_service_group_id_isValid;
}

OAIServiceSettingsInputModel OAIServiceInputModel::getSettings() const {
    return m_settings;
}
void OAIServiceInputModel::setSettings(const OAIServiceSettingsInputModel &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIServiceInputModel::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIServiceInputModel::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIServiceInputModel::getType() const {
    return m_type;
}
void OAIServiceInputModel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIServiceInputModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIServiceInputModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIServiceInputModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fees.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_group_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceInputModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
