/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISystemTimezoneViewModel.h
 *
 * 
 */

#ifndef OAISystemTimezoneViewModel_H
#define OAISystemTimezoneViewModel_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISystemTimezoneViewModel : public OAIObject {
public:
    OAISystemTimezoneViewModel();
    OAISystemTimezoneViewModel(QString json);
    ~OAISystemTimezoneViewModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBaseUtcOffset() const;
    void setBaseUtcOffset(const qint32 &base_utc_offset);
    bool is_base_utc_offset_Set() const;
    bool is_base_utc_offset_Valid() const;

    QString getDaylightName() const;
    void setDaylightName(const QString &daylight_name);
    bool is_daylight_name_Set() const;
    bool is_daylight_name_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getStandardName() const;
    void setStandardName(const QString &standard_name);
    bool is_standard_name_Set() const;
    bool is_standard_name_Valid() const;

    bool isSupportsDaylightSavingTime() const;
    void setSupportsDaylightSavingTime(const bool &supports_daylight_saving_time);
    bool is_supports_daylight_saving_time_Set() const;
    bool is_supports_daylight_saving_time_Valid() const;

    QString getTimezoneIana() const;
    void setTimezoneIana(const QString &timezone_iana);
    bool is_timezone_iana_Set() const;
    bool is_timezone_iana_Valid() const;

    QString getTimezoneId() const;
    void setTimezoneId(const QString &timezone_id);
    bool is_timezone_id_Set() const;
    bool is_timezone_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_base_utc_offset;
    bool m_base_utc_offset_isSet;
    bool m_base_utc_offset_isValid;

    QString m_daylight_name;
    bool m_daylight_name_isSet;
    bool m_daylight_name_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_standard_name;
    bool m_standard_name_isSet;
    bool m_standard_name_isValid;

    bool m_supports_daylight_saving_time;
    bool m_supports_daylight_saving_time_isSet;
    bool m_supports_daylight_saving_time_isValid;

    QString m_timezone_iana;
    bool m_timezone_iana_isSet;
    bool m_timezone_iana_isValid;

    QString m_timezone_id;
    bool m_timezone_id_isSet;
    bool m_timezone_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISystemTimezoneViewModel)

#endif // OAISystemTimezoneViewModel_H
