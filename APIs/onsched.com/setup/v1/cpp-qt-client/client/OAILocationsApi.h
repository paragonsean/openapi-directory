/**
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILocationsApi_H
#define OAI_OAILocationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppointmentReminderViewModel.h"
#include "OAIAppointmentRemindersInputModel.h"
#include "OAIBusinessServiceListViewModel.h"
#include "OAIBusinessServiceViewModel.h"
#include "OAIContentResult.h"
#include "OAIEmailTemplateInputModel.h"
#include "OAIEmailTemplateListViewModel.h"
#include "OAIGoogleServiceAccountCreds.h"
#include "OAILocationInputModel.h"
#include "OAILocationListViewModel.h"
#include "OAILocationUpdateModel.h"
#include "OAILocationViewModel.h"
#include "OAILocationsInputModel.h"
#include "OAIMasterEmailTemplateSettingsViewModel.h"
#include "OAIMasterTemplateSettingsInputModel.h"
#include "OAIResourceImageInputModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILocationsApi : public QObject {
    Q_OBJECT

public:
    OAILocationsApi(const int timeOut = 0);
    ~OAILocationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_locations_input_model OAILocationsInputModel [optional]
    */
    virtual void setupV1LocationsBulkPost(const ::OpenAPI::OptionalParam<OAILocationsInputModel> &oai_locations_input_model = ::OpenAPI::OptionalParam<OAILocationsInputModel>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  service_id QString [optional]
    * @param[in]  friendly_id QString [optional]
    * @param[in]  deleted bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void setupV1LocationsGet(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1LocationsIdAppointmentremindersGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_appointment_reminders_input_model OAIAppointmentRemindersInputModel [optional]
    */
    virtual void setupV1LocationsIdAppointmentremindersPut(const QString &id, const ::OpenAPI::OptionalParam<OAIAppointmentRemindersInputModel> &oai_appointment_reminders_input_model = ::OpenAPI::OptionalParam<OAIAppointmentRemindersInputModel>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1LocationsIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  uppercase bool [optional]
    */
    virtual void setupV1LocationsIdDeleteallimagesDelete(const QString &id, const ::OpenAPI::OptionalParam<bool> &uppercase = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1LocationsIdDeleteimageDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1LocationsIdEmailTemplatesGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1LocationsIdEmailTemplatesMasterDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1LocationsIdEmailTemplatesMasterGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_master_template_settings_input_model OAIMasterTemplateSettingsInputModel [optional]
    */
    virtual void setupV1LocationsIdEmailTemplatesMasterPost(const QString &id, const ::OpenAPI::OptionalParam<OAIMasterTemplateSettingsInputModel> &oai_master_template_settings_input_model = ::OpenAPI::OptionalParam<OAIMasterTemplateSettingsInputModel>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_email_template_input_model OAIEmailTemplateInputModel [optional]
    */
    virtual void setupV1LocationsIdEmailTemplatesPost(const QString &id, const ::OpenAPI::OptionalParam<OAIEmailTemplateInputModel> &oai_email_template_input_model = ::OpenAPI::OptionalParam<OAIEmailTemplateInputModel>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  template_name QString [required]
    */
    virtual void setupV1LocationsIdEmailTemplatesTemplateNameDelete(const QString &id, const QString &template_name);

    /**
    * @param[in]  id QString [required]
    * @param[in]  template_name QString [required]
    */
    virtual void setupV1LocationsIdEmailTemplatesTemplateNameGet(const QString &id, const QString &template_name);

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1LocationsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1LocationsIdGoogleServiceAccountDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_google_service_account_creds OAIGoogleServiceAccountCreds [optional]
    */
    virtual void setupV1LocationsIdGoogleServiceAccountPost(const QString &id, const ::OpenAPI::OptionalParam<OAIGoogleServiceAccountCreds> &oai_google_service_account_creds = ::OpenAPI::OptionalParam<OAIGoogleServiceAccountCreds>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  holiday_id QString [required]
    * @param[in]  closed bool [required]
    */
    virtual void setupV1LocationsIdHolidaysHolidayIdClosedPut(const QString &id, const QString &holiday_id, const bool &closed);

    /**
    * @param[in]  id QString [required]
    * @param[in]  remove_region bool [optional]
    * @param[in]  oai_location_update_model OAILocationUpdateModel [optional]
    */
    virtual void setupV1LocationsIdPut(const QString &id, const ::OpenAPI::OptionalParam<bool> &remove_region = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAILocationUpdateModel> &oai_location_update_model = ::OpenAPI::OptionalParam<OAILocationUpdateModel>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1LocationsIdRecoverPut(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1LocationsIdServicesDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void setupV1LocationsIdServicesGet(const QString &id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  request_body QList<QString> [optional]
    */
    virtual void setupV1LocationsIdServicesPost(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &request_body = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  settings_scope QString [required]
    */
    virtual void setupV1LocationsIdSettingsScopeSettingsScopePut(const QString &id, const QString &settings_scope);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_resource_image_input_model OAIResourceImageInputModel [optional]
    */
    virtual void setupV1LocationsIdUploadimagePost(const QString &id, const ::OpenAPI::OptionalParam<OAIResourceImageInputModel> &oai_resource_image_input_model = ::OpenAPI::OptionalParam<OAIResourceImageInputModel>());

    /**
    * @param[in]  oai_location_input_model OAILocationInputModel [optional]
    */
    virtual void setupV1LocationsPost(const ::OpenAPI::OptionalParam<OAILocationInputModel> &oai_location_input_model = ::OpenAPI::OptionalParam<OAILocationInputModel>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1LocationsServicesIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void setupV1LocationsServicesIdGet(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void setupV1LocationsBulkPostCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsGetCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdAppointmentremindersGetCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdAppointmentremindersPutCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdDeleteallimagesDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdDeleteimageDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdEmailTemplatesGetCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdEmailTemplatesMasterDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdEmailTemplatesMasterGetCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdEmailTemplatesMasterPostCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdEmailTemplatesPostCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdEmailTemplatesTemplateNameDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdEmailTemplatesTemplateNameGetCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdGetCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdGoogleServiceAccountDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdGoogleServiceAccountPostCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdHolidaysHolidayIdClosedPutCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdPutCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdRecoverPutCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdServicesDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdServicesGetCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdServicesPostCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdSettingsScopeSettingsScopePutCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdUploadimagePostCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsPostCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsServicesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void setupV1LocationsServicesIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void setupV1LocationsBulkPostSignal(QList<OAILocationViewModel> summary);
    void setupV1LocationsGetSignal(OAILocationListViewModel summary);
    void setupV1LocationsIdAppointmentremindersGetSignal(OAIAppointmentReminderViewModel summary);
    void setupV1LocationsIdAppointmentremindersPutSignal(OAILocationViewModel summary);
    void setupV1LocationsIdDeleteSignal(OAILocationViewModel summary);
    void setupV1LocationsIdDeleteallimagesDeleteSignal(bool summary);
    void setupV1LocationsIdDeleteimageDeleteSignal(OAILocationViewModel summary);
    void setupV1LocationsIdEmailTemplatesGetSignal(OAIEmailTemplateListViewModel summary);
    void setupV1LocationsIdEmailTemplatesMasterDeleteSignal(OAIMasterEmailTemplateSettingsViewModel summary);
    void setupV1LocationsIdEmailTemplatesMasterGetSignal(OAIMasterEmailTemplateSettingsViewModel summary);
    void setupV1LocationsIdEmailTemplatesMasterPostSignal(OAIMasterEmailTemplateSettingsViewModel summary);
    void setupV1LocationsIdEmailTemplatesPostSignal(OAIContentResult summary);
    void setupV1LocationsIdEmailTemplatesTemplateNameDeleteSignal(OAIContentResult summary);
    void setupV1LocationsIdEmailTemplatesTemplateNameGetSignal(OAIContentResult summary);
    void setupV1LocationsIdGetSignal(OAILocationViewModel summary);
    void setupV1LocationsIdGoogleServiceAccountDeleteSignal();
    void setupV1LocationsIdGoogleServiceAccountPostSignal(OAIGoogleServiceAccountCreds summary);
    void setupV1LocationsIdHolidaysHolidayIdClosedPutSignal(OAILocationViewModel summary);
    void setupV1LocationsIdPutSignal(OAILocationViewModel summary);
    void setupV1LocationsIdRecoverPutSignal(OAILocationViewModel summary);
    void setupV1LocationsIdServicesDeleteSignal(OAILocationViewModel summary);
    void setupV1LocationsIdServicesGetSignal(OAIBusinessServiceListViewModel summary);
    void setupV1LocationsIdServicesPostSignal(OAILocationViewModel summary);
    void setupV1LocationsIdSettingsScopeSettingsScopePutSignal(OAILocationViewModel summary);
    void setupV1LocationsIdUploadimagePostSignal(OAILocationViewModel summary);
    void setupV1LocationsPostSignal(OAILocationViewModel summary);
    void setupV1LocationsServicesIdDeleteSignal(OAILocationViewModel summary);
    void setupV1LocationsServicesIdGetSignal(OAIBusinessServiceViewModel summary);


    void setupV1LocationsBulkPostSignalFull(OAIHttpRequestWorker *worker, QList<OAILocationViewModel> summary);
    void setupV1LocationsGetSignalFull(OAIHttpRequestWorker *worker, OAILocationListViewModel summary);
    void setupV1LocationsIdAppointmentremindersGetSignalFull(OAIHttpRequestWorker *worker, OAIAppointmentReminderViewModel summary);
    void setupV1LocationsIdAppointmentremindersPutSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsIdDeleteallimagesDeleteSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void setupV1LocationsIdDeleteimageDeleteSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsIdEmailTemplatesGetSignalFull(OAIHttpRequestWorker *worker, OAIEmailTemplateListViewModel summary);
    void setupV1LocationsIdEmailTemplatesMasterDeleteSignalFull(OAIHttpRequestWorker *worker, OAIMasterEmailTemplateSettingsViewModel summary);
    void setupV1LocationsIdEmailTemplatesMasterGetSignalFull(OAIHttpRequestWorker *worker, OAIMasterEmailTemplateSettingsViewModel summary);
    void setupV1LocationsIdEmailTemplatesMasterPostSignalFull(OAIHttpRequestWorker *worker, OAIMasterEmailTemplateSettingsViewModel summary);
    void setupV1LocationsIdEmailTemplatesPostSignalFull(OAIHttpRequestWorker *worker, OAIContentResult summary);
    void setupV1LocationsIdEmailTemplatesTemplateNameDeleteSignalFull(OAIHttpRequestWorker *worker, OAIContentResult summary);
    void setupV1LocationsIdEmailTemplatesTemplateNameGetSignalFull(OAIHttpRequestWorker *worker, OAIContentResult summary);
    void setupV1LocationsIdGetSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsIdGoogleServiceAccountDeleteSignalFull(OAIHttpRequestWorker *worker);
    void setupV1LocationsIdGoogleServiceAccountPostSignalFull(OAIHttpRequestWorker *worker, OAIGoogleServiceAccountCreds summary);
    void setupV1LocationsIdHolidaysHolidayIdClosedPutSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsIdPutSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsIdRecoverPutSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsIdServicesDeleteSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsIdServicesGetSignalFull(OAIHttpRequestWorker *worker, OAIBusinessServiceListViewModel summary);
    void setupV1LocationsIdServicesPostSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsIdSettingsScopeSettingsScopePutSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsIdUploadimagePostSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsPostSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsServicesIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAILocationViewModel summary);
    void setupV1LocationsServicesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIBusinessServiceViewModel summary);

    Q_DECL_DEPRECATED_X("Use setupV1LocationsBulkPostSignalError() instead")
    void setupV1LocationsBulkPostSignalE(QList<OAILocationViewModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsBulkPostSignalError(QList<OAILocationViewModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsGetSignalError() instead")
    void setupV1LocationsGetSignalE(OAILocationListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsGetSignalError(OAILocationListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdAppointmentremindersGetSignalError() instead")
    void setupV1LocationsIdAppointmentremindersGetSignalE(OAIAppointmentReminderViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdAppointmentremindersGetSignalError(OAIAppointmentReminderViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdAppointmentremindersPutSignalError() instead")
    void setupV1LocationsIdAppointmentremindersPutSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdAppointmentremindersPutSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdDeleteSignalError() instead")
    void setupV1LocationsIdDeleteSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdDeleteSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdDeleteallimagesDeleteSignalError() instead")
    void setupV1LocationsIdDeleteallimagesDeleteSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdDeleteallimagesDeleteSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdDeleteimageDeleteSignalError() instead")
    void setupV1LocationsIdDeleteimageDeleteSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdDeleteimageDeleteSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesGetSignalError() instead")
    void setupV1LocationsIdEmailTemplatesGetSignalE(OAIEmailTemplateListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesGetSignalError(OAIEmailTemplateListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesMasterDeleteSignalError() instead")
    void setupV1LocationsIdEmailTemplatesMasterDeleteSignalE(OAIMasterEmailTemplateSettingsViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesMasterDeleteSignalError(OAIMasterEmailTemplateSettingsViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesMasterGetSignalError() instead")
    void setupV1LocationsIdEmailTemplatesMasterGetSignalE(OAIMasterEmailTemplateSettingsViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesMasterGetSignalError(OAIMasterEmailTemplateSettingsViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesMasterPostSignalError() instead")
    void setupV1LocationsIdEmailTemplatesMasterPostSignalE(OAIMasterEmailTemplateSettingsViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesMasterPostSignalError(OAIMasterEmailTemplateSettingsViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesPostSignalError() instead")
    void setupV1LocationsIdEmailTemplatesPostSignalE(OAIContentResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesPostSignalError(OAIContentResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesTemplateNameDeleteSignalError() instead")
    void setupV1LocationsIdEmailTemplatesTemplateNameDeleteSignalE(OAIContentResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesTemplateNameDeleteSignalError(OAIContentResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesTemplateNameGetSignalError() instead")
    void setupV1LocationsIdEmailTemplatesTemplateNameGetSignalE(OAIContentResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesTemplateNameGetSignalError(OAIContentResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdGetSignalError() instead")
    void setupV1LocationsIdGetSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdGetSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdGoogleServiceAccountDeleteSignalError() instead")
    void setupV1LocationsIdGoogleServiceAccountDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdGoogleServiceAccountDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdGoogleServiceAccountPostSignalError() instead")
    void setupV1LocationsIdGoogleServiceAccountPostSignalE(OAIGoogleServiceAccountCreds summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdGoogleServiceAccountPostSignalError(OAIGoogleServiceAccountCreds summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdHolidaysHolidayIdClosedPutSignalError() instead")
    void setupV1LocationsIdHolidaysHolidayIdClosedPutSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdHolidaysHolidayIdClosedPutSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdPutSignalError() instead")
    void setupV1LocationsIdPutSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdPutSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdRecoverPutSignalError() instead")
    void setupV1LocationsIdRecoverPutSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdRecoverPutSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdServicesDeleteSignalError() instead")
    void setupV1LocationsIdServicesDeleteSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdServicesDeleteSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdServicesGetSignalError() instead")
    void setupV1LocationsIdServicesGetSignalE(OAIBusinessServiceListViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdServicesGetSignalError(OAIBusinessServiceListViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdServicesPostSignalError() instead")
    void setupV1LocationsIdServicesPostSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdServicesPostSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdSettingsScopeSettingsScopePutSignalError() instead")
    void setupV1LocationsIdSettingsScopeSettingsScopePutSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdSettingsScopeSettingsScopePutSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdUploadimagePostSignalError() instead")
    void setupV1LocationsIdUploadimagePostSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdUploadimagePostSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsPostSignalError() instead")
    void setupV1LocationsPostSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsPostSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsServicesIdDeleteSignalError() instead")
    void setupV1LocationsServicesIdDeleteSignalE(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsServicesIdDeleteSignalError(OAILocationViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsServicesIdGetSignalError() instead")
    void setupV1LocationsServicesIdGetSignalE(OAIBusinessServiceViewModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsServicesIdGetSignalError(OAIBusinessServiceViewModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use setupV1LocationsBulkPostSignalErrorFull() instead")
    void setupV1LocationsBulkPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsBulkPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsGetSignalErrorFull() instead")
    void setupV1LocationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdAppointmentremindersGetSignalErrorFull() instead")
    void setupV1LocationsIdAppointmentremindersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdAppointmentremindersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdAppointmentremindersPutSignalErrorFull() instead")
    void setupV1LocationsIdAppointmentremindersPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdAppointmentremindersPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdDeleteSignalErrorFull() instead")
    void setupV1LocationsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdDeleteallimagesDeleteSignalErrorFull() instead")
    void setupV1LocationsIdDeleteallimagesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdDeleteallimagesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdDeleteimageDeleteSignalErrorFull() instead")
    void setupV1LocationsIdDeleteimageDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdDeleteimageDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesGetSignalErrorFull() instead")
    void setupV1LocationsIdEmailTemplatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesMasterDeleteSignalErrorFull() instead")
    void setupV1LocationsIdEmailTemplatesMasterDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesMasterDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesMasterGetSignalErrorFull() instead")
    void setupV1LocationsIdEmailTemplatesMasterGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesMasterGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesMasterPostSignalErrorFull() instead")
    void setupV1LocationsIdEmailTemplatesMasterPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesMasterPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesPostSignalErrorFull() instead")
    void setupV1LocationsIdEmailTemplatesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesTemplateNameDeleteSignalErrorFull() instead")
    void setupV1LocationsIdEmailTemplatesTemplateNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesTemplateNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdEmailTemplatesTemplateNameGetSignalErrorFull() instead")
    void setupV1LocationsIdEmailTemplatesTemplateNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdEmailTemplatesTemplateNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdGetSignalErrorFull() instead")
    void setupV1LocationsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdGoogleServiceAccountDeleteSignalErrorFull() instead")
    void setupV1LocationsIdGoogleServiceAccountDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdGoogleServiceAccountDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdGoogleServiceAccountPostSignalErrorFull() instead")
    void setupV1LocationsIdGoogleServiceAccountPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdGoogleServiceAccountPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdHolidaysHolidayIdClosedPutSignalErrorFull() instead")
    void setupV1LocationsIdHolidaysHolidayIdClosedPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdHolidaysHolidayIdClosedPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdPutSignalErrorFull() instead")
    void setupV1LocationsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdRecoverPutSignalErrorFull() instead")
    void setupV1LocationsIdRecoverPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdRecoverPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdServicesDeleteSignalErrorFull() instead")
    void setupV1LocationsIdServicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdServicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdServicesGetSignalErrorFull() instead")
    void setupV1LocationsIdServicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdServicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdServicesPostSignalErrorFull() instead")
    void setupV1LocationsIdServicesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdServicesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdSettingsScopeSettingsScopePutSignalErrorFull() instead")
    void setupV1LocationsIdSettingsScopeSettingsScopePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdSettingsScopeSettingsScopePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsIdUploadimagePostSignalErrorFull() instead")
    void setupV1LocationsIdUploadimagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsIdUploadimagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsPostSignalErrorFull() instead")
    void setupV1LocationsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsServicesIdDeleteSignalErrorFull() instead")
    void setupV1LocationsServicesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsServicesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupV1LocationsServicesIdGetSignalErrorFull() instead")
    void setupV1LocationsServicesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupV1LocationsServicesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
