/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppointmentViewModel;
import org.openapitools.client.model.AvailabilityInputModel;
import org.openapitools.client.model.CalendarAuthViewModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ResourceAllocationInputModel;
import org.openapitools.client.model.ResourceAllocationListViewModel;
import org.openapitools.client.model.ResourceAllocationUpdateModel;
import org.openapitools.client.model.ResourceAllocationViewModel;
import org.openapitools.client.model.ResourceAvailabilityViewModel;
import org.openapitools.client.model.ResourceBlockInputModel;
import org.openapitools.client.model.ResourceBlockListViewModel;
import org.openapitools.client.model.ResourceBlockUpdateModel;
import org.openapitools.client.model.ResourceBlockViewModel;
import org.openapitools.client.model.ResourceImageInputModel;
import org.openapitools.client.model.ResourceInputModel;
import org.openapitools.client.model.ResourceListViewModel;
import org.openapitools.client.model.ResourceUpdateModel;
import org.openapitools.client.model.ResourceViewModel;
import org.openapitools.client.model.ResourcesInputModel;
import org.openapitools.client.model.ResourcesUpdateModel;
import org.openapitools.client.model.SystemTimezoneViewModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourcesApi
 */
@Disabled
public class ResourcesApiTest {

    private final ResourcesApi api = new ResourcesApi();

    /**
     * Delete Allocation
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a Resource Allocation. A valid &lt;b&gt;resourceAllocation id&lt;/b&gt; is required.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesAllocationsIdDeleteTest() throws ApiException {
        String id = null;
        ResourceBlockViewModel response = api.setupV1ResourcesAllocationsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Get Allocation
     *
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource Allocation&lt;/b&gt;. A valid &lt;b&gt;resourceAllocation id&lt;/b&gt; is required. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesAllocationsIdGetTest() throws ApiException {
        String id = null;
        ResourceAllocationViewModel response = api.setupV1ResourcesAllocationsIdGet(id);
        // TODO: test validations
    }

    /**
     * Update Allocation
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a resource allocation. A valid &lt;b&gt;resourceAllocation id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST /setup/v1/resources/{id}/allocations&lt;/i&gt; endpoint for details.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesAllocationsIdPutTest() throws ApiException {
        String id = null;
        ResourceAllocationUpdateModel resourceAllocationUpdateModel = null;
        ResourceBlockViewModel response = api.setupV1ResourcesAllocationsIdPut(id, resourceAllocationUpdateModel);
        // TODO: test validations
    }

    /**
     * Delete Block
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resourceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesBlockIdDeleteTest() throws ApiException {
        String id = null;
        ResourceBlockViewModel response = api.setupV1ResourcesBlockIdDelete(id);
        // TODO: test validations
    }

    /**
     * Update Block
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resourceBlock id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/block&lt;/i&gt; endpoint for fieldnames and details.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesBlockIdPutTest() throws ApiException {
        String id = null;
        ResourceBlockUpdateModel resourceBlockUpdateModel = null;
        ResourceBlockViewModel response = api.setupV1ResourcesBlockIdPut(id, resourceBlockUpdateModel);
        // TODO: test validations
    }

    /**
     * Get Block
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resourceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesBlocksIdGetTest() throws ApiException {
        String id = null;
        ResourceBlockViewModel response = api.setupV1ResourcesBlocksIdGet(id);
        // TODO: test validations
    }

    /**
     * Create Resources Bulk
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Bulk Create&lt;/b&gt; resources. Valid &lt;b&gt;resource ids&lt;/b&gt; are required. The posted list of resources cannot exceed 100 resource objects per transaction for performance purposes.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesBulkPostTest() throws ApiException {
        String googleAuthReturnUrl = null;
        String outlookAuthReturnUrl = null;
        ResourcesInputModel resourcesInputModel = null;
        List<ResourceViewModel> response = api.setupV1ResourcesBulkPost(googleAuthReturnUrl, outlookAuthReturnUrl, resourcesInputModel);
        // TODO: test validations
    }

    /**
     * Update Resources Bulk
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Bulk Update&lt;/b&gt; resources. Valid &lt;b&gt;resource id&#39;s&lt;/b&gt; are required. The list of resources cannot exceed 100 resource objects per transaction for performance purposes.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesBulkPutTest() throws ApiException {
        String googleAuthReturnUrl = null;
        String outlookAuthReturnUrl = null;
        ResourcesUpdateModel resourcesUpdateModel = null;
        List<ResourceViewModel> response = api.setupV1ResourcesBulkPut(googleAuthReturnUrl, outlookAuthReturnUrl, resourcesUpdateModel);
        // TODO: test validations
    }

    /**
     * List Resources
     *
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Resources&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesGetTest() throws ApiException {
        String locationId = null;
        String resourceGroupId = null;
        String email = null;
        String name = null;
        Boolean deleted = null;
        String googleAuthReturnUrl = null;
        String outlookAuthReturnUrl = null;
        Integer offset = null;
        Integer limit = null;
        ResourceListViewModel response = api.setupV1ResourcesGet(locationId, resourceGroupId, email, name, deleted, googleAuthReturnUrl, outlookAuthReturnUrl, offset, limit);
        // TODO: test validations
    }

    /**
     * List Resource Allocations
     *
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resource Allocations&lt;/b&gt; for a specified resource. We recommend using allocations if a resource&#39;s schedule changes frequently from day to day or week to week. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdAllocationsGetTest() throws ApiException {
        String id = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        Integer offset = null;
        Integer limit = null;
        ResourceAllocationListViewModel response = api.setupV1ResourcesIdAllocationsGet(id, startDate, endDate, offset, limit);
        // TODO: test validations
    }

    /**
     * Create Allocation
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a resource allocation for a resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;. Resource allocations can be set to specific time ranges or for the whole day by setting startTime&#x3D;0 and endTime&#x3D;2400. They can repeat for a specific date range instance or set to repeat at a specified frequency.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M &lt;/b&gt;for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY ALLOCATIONS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY ALLOCATIONS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;. You must specify the &lt;b&gt;“weekdays”&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY ALLOCATIONS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly. &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want allocated.  If monthDay&#x3D;’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdAllocationsPostTest() throws ApiException {
        String id = null;
        ResourceAllocationInputModel resourceAllocationInputModel = null;
        ResourceBlockViewModel response = api.setupV1ResourcesIdAllocationsPost(id, resourceAllocationInputModel);
        // TODO: test validations
    }

    /**
     * List Weekly Availability
     *
     * &lt;p&gt;Use this endpoint to view the &lt;b&gt;Weekly Availability&lt;/b&gt; for a resource. The displayed available times are represented in the resource&#39;s timezone. The resource timezone can be set to any world timezone. If not provided, by default it is set to the Business timezone.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdAvailabilityGetTest() throws ApiException {
        String id = null;
        ResourceAvailabilityViewModel response = api.setupV1ResourcesIdAvailabilityGet(id);
        // TODO: test validations
    }

    /**
     * Update Weekly Availability
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; resource weekly availability. A valid &lt;b&gt;resource id&lt;/b&gt; is required. The availability day entries are created when a resource object is created.&lt;/p&gt;  &lt;p&gt;To update weekly availability hours, all days of the week must be provided. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri&lt;/b&gt; and &lt;b&gt;sat&lt;/b&gt;. The &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; fields are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. We support 24-hour availability, set startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0.&lt;/p&gt;  &lt;p&gt;If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the resource. Resources can be set to any world timezone. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdAvailabilityPutTest() throws ApiException {
        String id = null;
        AvailabilityInputModel availabilityInputModel = null;
        ResourceAvailabilityViewModel response = api.setupV1ResourcesIdAvailabilityPut(id, availabilityInputModel);
        // TODO: test validations
    }

    /**
     * Create Block
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;Resource blocks can be set to specific time ranges or for the whole day. Use the &lt;b&gt;AllDay&lt;/b&gt; setting to create an all-day block. &lt;b&gt;AllDay&lt;/b&gt; will automatically set startTime to 0 and endTime to 2400.&lt;/p&gt;  &lt;p&gt;Resource blocks can be for a specific date range instance or set to repeat at a specified frequency. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY BLOCKS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY BLOCKS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;.  You must specify the &lt;b&gt;weekdays&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;. For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY BLOCKS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly, &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want blocked.  If monthDay&#x3D;’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdBlockPostTest() throws ApiException {
        String id = null;
        ResourceBlockInputModel resourceBlockInputModel = null;
        ResourceBlockViewModel response = api.setupV1ResourcesIdBlockPost(id, resourceBlockInputModel);
        // TODO: test validations
    }

    /**
     * List Resource Blocks
     *
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resource Blocks&lt;/b&gt;. A valid &lt;b&gt;resource id&lt;/b&gt; is required. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdBlocksGetTest() throws ApiException {
        String id = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        Integer offset = null;
        Integer limit = null;
        ResourceBlockListViewModel response = api.setupV1ResourcesIdBlocksGet(id, startDate, endDate, offset, limit);
        // TODO: test validations
    }

    /**
     * Get Resource Google URL
     *
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Resources Google Calendar Authorization URL&lt;/b&gt;. A valid &lt;b&gt;resource id&lt;/b&gt; and &lt;b&gt;Google Email Address&lt;/b&gt; are required.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGetTest() throws ApiException {
        String id = null;
        String googleEmailAddress = null;
        String googleAuthReturnUrl = null;
        CalendarAuthViewModel response = api.setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGet(id, googleEmailAddress, googleAuthReturnUrl);
        // TODO: test validations
    }

    /**
     * Get Resource Outlook URL
     *
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Resources Outlook Calendar Authorization URL&lt;/b&gt;. A valid &lt;b&gt;resource id&lt;/b&gt; and &lt;b&gt;Outlook Email Address&lt;/b&gt; are required.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGetTest() throws ApiException {
        String id = null;
        String outlookEmailAddress = null;
        String outlookAuthReturnUrl = null;
        CalendarAuthViewModel response = api.setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGet(id, outlookEmailAddress, outlookAuthReturnUrl);
        // TODO: test validations
    }

    /**
     * Delete Resource
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a resource. The resource is not permanently deleted and can be recovered. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdDeleteTest() throws ApiException {
        String id = null;
        ResourceViewModel response = api.setupV1ResourcesIdDelete(id);
        // TODO: test validations
    }

    /**
     * Delete Resource Image
     *
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a previously uploaded resource image. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdDeleteimageDeleteTest() throws ApiException {
        String id = null;
        ResourceViewModel response = api.setupV1ResourcesIdDeleteimageDelete(id);
        // TODO: test validations
    }

    /**
     * Get Resource
     *
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource&lt;/b&gt; object. A valid &lt;b&gt;resource id&lt;/b&gt; is required. Find resource id&#39;s by using the: &lt;i&gt;GET /setup/v1/resources&lt;/i&gt; endpoint.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdGetTest() throws ApiException {
        String id = null;
        String googleAuthReturnUrl = null;
        String outlookAuthReturnUrl = null;
        ResourceViewModel response = api.setupV1ResourcesIdGet(id, googleAuthReturnUrl, outlookAuthReturnUrl);
        // TODO: test validations
    }

    /**
     * Update Resource
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdPutTest() throws ApiException {
        String id = null;
        String googleAuthReturnUrl = null;
        String outlookAuthReturnUrl = null;
        ResourceUpdateModel resourceUpdateModel = null;
        ResourceViewModel response = api.setupV1ResourcesIdPut(id, googleAuthReturnUrl, outlookAuthReturnUrl, resourceUpdateModel);
        // TODO: test validations
    }

    /**
     * Reassign Resource
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reassign&lt;/b&gt; appointments from one resource to another. If the startDate is not supplied, the default is today&#39;s date + 1 day; If the endDate is not supplied, all future appointments from the start date will be reassigned. If the calendar id is not supplied the default is the primary calendar of the location.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdReassignAppointmentsResourceIdPutTest() throws ApiException {
        String id = null;
        String resourceId = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String calendarId = null;
        List<AppointmentViewModel> response = api.setupV1ResourcesIdReassignAppointmentsResourceIdPut(id, resourceId, startDate, endDate, calendarId);
        // TODO: test validations
    }

    /**
     * Recover Resource
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdRecoverPutTest() throws ApiException {
        String id = null;
        String googleAuthReturnUrl = null;
        String outlookAuthReturnUrl = null;
        ResourceViewModel response = api.setupV1ResourcesIdRecoverPut(id, googleAuthReturnUrl, outlookAuthReturnUrl);
        // TODO: test validations
    }

    /**
     * Delete Linked Services
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; linked services from a Resource, i.e. unlink the services. A valid &lt;b&gt;resource id&lt;/b&gt; is required. Once deleted, all services become available to the resource.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdServicesDeleteTest() throws ApiException {
        String id = null;
        ResourceViewModel response = api.setupV1ResourcesIdServicesDelete(id);
        // TODO: test validations
    }

    /**
     * Create Linked Services
     *
     * &lt;p&gt;Use this endpoint to explicitly &lt;b&gt;Link Services&lt;/b&gt; to a Resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Note:&lt;/b&gt; By default, the services array is empty which signifies that all services are provided by the resource. Linking services here will add to the linked service(s) array available to this resource. This will limit the services available to the resource.&lt;/p&gt;  &lt;p&gt;You cannot post services that already exist in the array, you can only add new ones. Use the &lt;i&gt;PUT ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint to update the entire list.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdServicesPostTest() throws ApiException {
        String id = null;
        List<String> requestBody = null;
        ResourceViewModel response = api.setupV1ResourcesIdServicesPost(id, requestBody);
        // TODO: test validations
    }

    /**
     * Update Linked Services
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; the linked services of a Resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Updating services with this endpoint will update the linked services available to the resource. Only those services will be available to the resource.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Note:&lt;/b&gt; This is a destructive process, any existing linked services will be removed and replaced with the list of services supplied here. Provide the resources complete list of services when using this endpoint.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdServicesPutTest() throws ApiException {
        String id = null;
        List<String> requestBody = null;
        ResourceViewModel response = api.setupV1ResourcesIdServicesPut(id, requestBody);
        // TODO: test validations
    }

    /**
     * Upload Resource Image
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Upload&lt;/b&gt; a resource image to the resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required. You must convert the image to a &lt;b&gt;base64 encoded string&lt;/b&gt; and pass that string as input along with your &lt;b&gt;filename&lt;/b&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesIdUploadimagePostTest() throws ApiException {
        String id = null;
        ResourceImageInputModel resourceImageInputModel = null;
        ResourceViewModel response = api.setupV1ResourcesIdUploadimagePost(id, resourceImageInputModel);
        // TODO: test validations
    }

    /**
     * Create Resource
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new resource.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesPostTest() throws ApiException {
        String googleAuthReturnUrl = null;
        String outlookAuthReturnUrl = null;
        ResourceInputModel resourceInputModel = null;
        ResourceViewModel response = api.setupV1ResourcesPost(googleAuthReturnUrl, outlookAuthReturnUrl, resourceInputModel);
        // TODO: test validations
    }

    /**
     * Get Time Zones
     *
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Time Zones&lt;/b&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ResourcesTimezonesGetTest() throws ApiException {
        SystemTimezoneViewModel response = api.setupV1ResourcesTimezonesGet();
        // TODO: test validations
    }

}
