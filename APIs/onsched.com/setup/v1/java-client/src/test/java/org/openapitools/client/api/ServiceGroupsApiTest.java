/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ServiceGroupInputModel;
import org.openapitools.client.model.ServiceGroupListViewModel;
import org.openapitools.client.model.ServiceGroupViewModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServiceGroupsApi
 */
@Disabled
public class ServiceGroupsApiTest {

    private final ServiceGroupsApi api = new ServiceGroupsApi();

    /**
     * List Service Groups
     *
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Service Groups&lt;/b&gt; for the requested location. If no business location is specified it will default to the Primary Business Location of the company. Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the other query parameters to filter the results further.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ServicegroupsGetTest() throws ApiException {
        String locationId = null;
        Integer offset = null;
        Integer limit = null;
        ServiceGroupListViewModel response = api.setupV1ServicegroupsGet(locationId, offset, limit);
        // TODO: test validations
    }

    /**
     * Delete Service Group
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a Service Group object. A valid &lt;b&gt;serviceGroup id&lt;/b&gt; is required. The service group is not permanently deleted and can be recovered by using the &lt;i&gt;PUT ​/setup​/v1​/servicegroups​/{id}​/recover&lt;/i&gt; endpoint.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ServicegroupsIdDeleteTest() throws ApiException {
        Integer id = null;
        ServiceGroupViewModel response = api.setupV1ServicegroupsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Get Service Group
     *
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Service Group&lt;/b&gt; object. A valid &lt;b&gt;serviceGroup id&lt;/b&gt; is required. Find service group id&#39;s by using the &lt;i&gt;GET /setup/v1/serviceGroups&lt;/i&gt; endpoint.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ServicegroupsIdGetTest() throws ApiException {
        Integer id = null;
        ServiceGroupViewModel response = api.setupV1ServicegroupsIdGet(id);
        // TODO: test validations
    }

    /**
     * Update Service Group
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a Service Group object. A valid &lt;b&gt;serviceGroup id&lt;/b&gt; is required. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ServicegroupsIdPutTest() throws ApiException {
        Integer id = null;
        ServiceGroupInputModel serviceGroupInputModel = null;
        ServiceGroupViewModel response = api.setupV1ServicegroupsIdPut(id, serviceGroupInputModel);
        // TODO: test validations
    }

    /**
     * Recover Service Group
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted Service Group. A valid &lt;b&gt;serviceGroup id&lt;/b&gt; is required. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ServicegroupsIdRecoverPutTest() throws ApiException {
        Integer id = null;
        ServiceGroupViewModel response = api.setupV1ServicegroupsIdRecoverPut(id);
        // TODO: test validations
    }

    /**
     * Create Service Group
     *
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Service Group. If no locationId is specified in the body, the business location will default to the primary business location. Service groups are used to categorize services. Service groups are optional and only make sense if you have multiple services that will be easier read if categorized. Only the service group Type of 0 is supported by the API. It defaults to 0 if not supplied.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setupV1ServicegroupsPostTest() throws ApiException {
        ServiceGroupInputModel serviceGroupInputModel = null;
        ServiceGroupViewModel response = api.setupV1ServicegroupsPost(serviceGroupInputModel);
        // TODO: test validations
    }

}
