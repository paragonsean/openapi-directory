/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CalendarHoursViewModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScheduleViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:58.890429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScheduleViewModel {
  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private CalendarHoursViewModel availability;

  public static final String SERIALIZED_NAME_BOOKINGS_PER_SLOT = "bookingsPerSlot";
  @SerializedName(SERIALIZED_NAME_BOOKINGS_PER_SLOT)
  private Integer bookingsPerSlot;

  public static final String SERIALIZED_NAME_DELETED_STATUS = "deletedStatus";
  @SerializedName(SERIALIZED_NAME_DELETED_STATUS)
  private Boolean deletedStatus;

  public static final String SERIALIZED_NAME_DELETED_TIME = "deletedTime";
  @SerializedName(SERIALIZED_NAME_DELETED_TIME)
  private OffsetDateTime deletedTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Integer interval;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Boolean primary;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP_ID = "resourceGroupId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP_ID)
  private String resourceGroupId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ScheduleViewModel() {
  }

  public ScheduleViewModel availability(CalendarHoursViewModel availability) {
    this.availability = availability;
    return this;
  }

  /**
   * Get availability
   * @return availability
   */
  @javax.annotation.Nullable
  public CalendarHoursViewModel getAvailability() {
    return availability;
  }

  public void setAvailability(CalendarHoursViewModel availability) {
    this.availability = availability;
  }


  public ScheduleViewModel bookingsPerSlot(Integer bookingsPerSlot) {
    this.bookingsPerSlot = bookingsPerSlot;
    return this;
  }

  /**
   * Get bookingsPerSlot
   * @return bookingsPerSlot
   */
  @javax.annotation.Nullable
  public Integer getBookingsPerSlot() {
    return bookingsPerSlot;
  }

  public void setBookingsPerSlot(Integer bookingsPerSlot) {
    this.bookingsPerSlot = bookingsPerSlot;
  }


  public ScheduleViewModel deletedStatus(Boolean deletedStatus) {
    this.deletedStatus = deletedStatus;
    return this;
  }

  /**
   * Get deletedStatus
   * @return deletedStatus
   */
  @javax.annotation.Nullable
  public Boolean getDeletedStatus() {
    return deletedStatus;
  }

  public void setDeletedStatus(Boolean deletedStatus) {
    this.deletedStatus = deletedStatus;
  }


  public ScheduleViewModel deletedTime(OffsetDateTime deletedTime) {
    this.deletedTime = deletedTime;
    return this;
  }

  /**
   * Get deletedTime
   * @return deletedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedTime() {
    return deletedTime;
  }

  public void setDeletedTime(OffsetDateTime deletedTime) {
    this.deletedTime = deletedTime;
  }


  public ScheduleViewModel id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ScheduleViewModel interval(Integer interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Get interval
   * @return interval
   */
  @javax.annotation.Nullable
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }


  public ScheduleViewModel locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * Get locationId
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public ScheduleViewModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ScheduleViewModel _object(String _object) {
    this._object = _object;
    return this;
  }

  /**
   * Get _object
   * @return _object
   */
  @javax.annotation.Nullable
  public String getObject() {
    return _object;
  }

  public void setObject(String _object) {
    this._object = _object;
  }


  public ScheduleViewModel primary(Boolean primary) {
    this.primary = primary;
    return this;
  }

  /**
   * Get primary
   * @return primary
   */
  @javax.annotation.Nullable
  public Boolean getPrimary() {
    return primary;
  }

  public void setPrimary(Boolean primary) {
    this.primary = primary;
  }


  public ScheduleViewModel resourceGroupId(String resourceGroupId) {
    this.resourceGroupId = resourceGroupId;
    return this;
  }

  /**
   * Get resourceGroupId
   * @return resourceGroupId
   */
  @javax.annotation.Nullable
  public String getResourceGroupId() {
    return resourceGroupId;
  }

  public void setResourceGroupId(String resourceGroupId) {
    this.resourceGroupId = resourceGroupId;
  }


  public ScheduleViewModel type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduleViewModel scheduleViewModel = (ScheduleViewModel) o;
    return Objects.equals(this.availability, scheduleViewModel.availability) &&
        Objects.equals(this.bookingsPerSlot, scheduleViewModel.bookingsPerSlot) &&
        Objects.equals(this.deletedStatus, scheduleViewModel.deletedStatus) &&
        Objects.equals(this.deletedTime, scheduleViewModel.deletedTime) &&
        Objects.equals(this.id, scheduleViewModel.id) &&
        Objects.equals(this.interval, scheduleViewModel.interval) &&
        Objects.equals(this.locationId, scheduleViewModel.locationId) &&
        Objects.equals(this.name, scheduleViewModel.name) &&
        Objects.equals(this._object, scheduleViewModel._object) &&
        Objects.equals(this.primary, scheduleViewModel.primary) &&
        Objects.equals(this.resourceGroupId, scheduleViewModel.resourceGroupId) &&
        Objects.equals(this.type, scheduleViewModel.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(availability, bookingsPerSlot, deletedStatus, deletedTime, id, interval, locationId, name, _object, primary, resourceGroupId, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduleViewModel {\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    bookingsPerSlot: ").append(toIndentedString(bookingsPerSlot)).append("\n");
    sb.append("    deletedStatus: ").append(toIndentedString(deletedStatus)).append("\n");
    sb.append("    deletedTime: ").append(toIndentedString(deletedTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    resourceGroupId: ").append(toIndentedString(resourceGroupId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availability");
    openapiFields.add("bookingsPerSlot");
    openapiFields.add("deletedStatus");
    openapiFields.add("deletedTime");
    openapiFields.add("id");
    openapiFields.add("interval");
    openapiFields.add("locationId");
    openapiFields.add("name");
    openapiFields.add("object");
    openapiFields.add("primary");
    openapiFields.add("resourceGroupId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduleViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduleViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduleViewModel is not found in the empty JSON string", ScheduleViewModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduleViewModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduleViewModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `availability`
      if (jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) {
        CalendarHoursViewModel.validateJsonElement(jsonObj.get("availability"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("resourceGroupId") != null && !jsonObj.get("resourceGroupId").isJsonNull()) && !jsonObj.get("resourceGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroupId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduleViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduleViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduleViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduleViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduleViewModel>() {
           @Override
           public void write(JsonWriter out, ScheduleViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduleViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduleViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduleViewModel
   * @throws IOException if the JSON string is invalid with respect to ScheduleViewModel
   */
  public static ScheduleViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduleViewModel.class);
  }

  /**
   * Convert an instance of ScheduleViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

