/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ResourceGroupInputModel;
import org.openapitools.client.model.ResourceGroupListViewModel;
import org.openapitools.client.model.ResourceGroupUpdateModel;
import org.openapitools.client.model.ResourceGroupViewModel;
import org.openapitools.client.model.ResourceViewModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourceGroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourceGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourceGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for setupV1ResourcegroupsGet
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param deleted Filter results by deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcegroupsGetCall(String locationId, Boolean deleted, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resourcegroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcegroupsGetValidateBeforeCall(String locationId, Boolean deleted, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return setupV1ResourcegroupsGetCall(locationId, deleted, offset, limit, _callback);

    }

    /**
     * List Resource Groups
     * &lt;p&gt;Use this endpoint to &lt;b&gt;List Resource Groups&lt;/b&gt; for the specified location. If not specified, the business location defaults to the primary business location. &lt;b&gt;Name&lt;/b&gt; is a required field.&lt;/p&gt;  &lt;p&gt;Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param deleted Filter results by deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ResourceGroupListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceGroupListViewModel setupV1ResourcegroupsGet(String locationId, Boolean deleted, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ResourceGroupListViewModel> localVarResp = setupV1ResourcegroupsGetWithHttpInfo(locationId, deleted, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Resource Groups
     * &lt;p&gt;Use this endpoint to &lt;b&gt;List Resource Groups&lt;/b&gt; for the specified location. If not specified, the business location defaults to the primary business location. &lt;b&gt;Name&lt;/b&gt; is a required field.&lt;/p&gt;  &lt;p&gt;Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param deleted Filter results by deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;ResourceGroupListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceGroupListViewModel> setupV1ResourcegroupsGetWithHttpInfo(String locationId, Boolean deleted, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcegroupsGetValidateBeforeCall(locationId, deleted, offset, limit, null);
        Type localVarReturnType = new TypeToken<ResourceGroupListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Resource Groups (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;List Resource Groups&lt;/b&gt; for the specified location. If not specified, the business location defaults to the primary business location. &lt;b&gt;Name&lt;/b&gt; is a required field.&lt;/p&gt;  &lt;p&gt;Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param deleted Filter results by deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcegroupsGetAsync(String locationId, Boolean deleted, Integer offset, Integer limit, final ApiCallback<ResourceGroupListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcegroupsGetValidateBeforeCall(locationId, deleted, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ResourceGroupListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcegroupsIdDelete
     * @param id id of resourceGroup object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcegroupsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resourcegroups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcegroupsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcegroupsIdDelete(Async)");
        }

        return setupV1ResourcegroupsIdDeleteCall(id, _callback);

    }

    /**
     * Delete Resource Group
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a resourceGroup object. A valid &lt;b&gt;resourceGroup id&lt;/b&gt; is required. The resource group is not permanently deleted and can be recovered by using the &lt;i&gt;PUT ​/setup​/v1​/resourcegroups​/{id}​/recover&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of resourceGroup object (required)
     * @return ResourceGroupViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceGroupViewModel setupV1ResourcegroupsIdDelete(String id) throws ApiException {
        ApiResponse<ResourceGroupViewModel> localVarResp = setupV1ResourcegroupsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Resource Group
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a resourceGroup object. A valid &lt;b&gt;resourceGroup id&lt;/b&gt; is required. The resource group is not permanently deleted and can be recovered by using the &lt;i&gt;PUT ​/setup​/v1​/resourcegroups​/{id}​/recover&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of resourceGroup object (required)
     * @return ApiResponse&lt;ResourceGroupViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceGroupViewModel> setupV1ResourcegroupsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcegroupsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceGroupViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Resource Group (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a resourceGroup object. A valid &lt;b&gt;resourceGroup id&lt;/b&gt; is required. The resource group is not permanently deleted and can be recovered by using the &lt;i&gt;PUT ​/setup​/v1​/resourcegroups​/{id}​/recover&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of resourceGroup object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcegroupsIdDeleteAsync(String id, final ApiCallback<ResourceGroupViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcegroupsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceGroupViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcegroupsIdGet
     * @param id id of resourceGroup object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcegroupsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resourcegroups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcegroupsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcegroupsIdGet(Async)");
        }

        return setupV1ResourcegroupsIdGetCall(id, _callback);

    }

    /**
     * Get Resource Group
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource Group&lt;/b&gt; object. A valid &lt;b&gt;resourceGroup id&lt;/b&gt; is required. Find resourceGroup id&#39;s by using the &lt;i&gt;GET setup/v1/resourceGroups&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of resourceGroup object (required)
     * @return ResourceGroupViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceGroupViewModel setupV1ResourcegroupsIdGet(String id) throws ApiException {
        ApiResponse<ResourceGroupViewModel> localVarResp = setupV1ResourcegroupsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Resource Group
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource Group&lt;/b&gt; object. A valid &lt;b&gt;resourceGroup id&lt;/b&gt; is required. Find resourceGroup id&#39;s by using the &lt;i&gt;GET setup/v1/resourceGroups&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of resourceGroup object (required)
     * @return ApiResponse&lt;ResourceGroupViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceGroupViewModel> setupV1ResourcegroupsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcegroupsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceGroupViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Resource Group (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource Group&lt;/b&gt; object. A valid &lt;b&gt;resourceGroup id&lt;/b&gt; is required. Find resourceGroup id&#39;s by using the &lt;i&gt;GET setup/v1/resourceGroups&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of resourceGroup object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcegroupsIdGetAsync(String id, final ApiCallback<ResourceGroupViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcegroupsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceGroupViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcegroupsIdPut
     * @param id id of resourcGroup object (required)
     * @param resourceGroupUpdateModel Resource Group Update Model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcegroupsIdPutCall(String id, ResourceGroupUpdateModel resourceGroupUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceGroupUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/resourcegroups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcegroupsIdPutValidateBeforeCall(String id, ResourceGroupUpdateModel resourceGroupUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcegroupsIdPut(Async)");
        }

        return setupV1ResourcegroupsIdPutCall(id, resourceGroupUpdateModel, _callback);

    }

    /**
     * Update Resource Group
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a resourceGroup object. A valid &lt;b&gt;resourceGroup id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of resourcGroup object (required)
     * @param resourceGroupUpdateModel Resource Group Update Model (optional)
     * @return ResourceGroupViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceGroupViewModel setupV1ResourcegroupsIdPut(String id, ResourceGroupUpdateModel resourceGroupUpdateModel) throws ApiException {
        ApiResponse<ResourceGroupViewModel> localVarResp = setupV1ResourcegroupsIdPutWithHttpInfo(id, resourceGroupUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Resource Group
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a resourceGroup object. A valid &lt;b&gt;resourceGroup id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of resourcGroup object (required)
     * @param resourceGroupUpdateModel Resource Group Update Model (optional)
     * @return ApiResponse&lt;ResourceGroupViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceGroupViewModel> setupV1ResourcegroupsIdPutWithHttpInfo(String id, ResourceGroupUpdateModel resourceGroupUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcegroupsIdPutValidateBeforeCall(id, resourceGroupUpdateModel, null);
        Type localVarReturnType = new TypeToken<ResourceGroupViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Resource Group (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a resourceGroup object. A valid &lt;b&gt;resourceGroup id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of resourcGroup object (required)
     * @param resourceGroupUpdateModel Resource Group Update Model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcegroupsIdPutAsync(String id, ResourceGroupUpdateModel resourceGroupUpdateModel, final ApiCallback<ResourceGroupViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcegroupsIdPutValidateBeforeCall(id, resourceGroupUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<ResourceGroupViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcegroupsIdRecoverPut
     * @param id id of resourceGroup object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcegroupsIdRecoverPutCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resourcegroups/{id}/recover"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcegroupsIdRecoverPutValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcegroupsIdRecoverPut(Async)");
        }

        return setupV1ResourcegroupsIdRecoverPutCall(id, _callback);

    }

    /**
     * Recover Resource Group
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted resourceGroup object. A valid &lt;b&gt;resourceGroup id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resourceGroup object (required)
     * @return ResourceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceViewModel setupV1ResourcegroupsIdRecoverPut(String id) throws ApiException {
        ApiResponse<ResourceViewModel> localVarResp = setupV1ResourcegroupsIdRecoverPutWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Recover Resource Group
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted resourceGroup object. A valid &lt;b&gt;resourceGroup id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resourceGroup object (required)
     * @return ApiResponse&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceViewModel> setupV1ResourcegroupsIdRecoverPutWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcegroupsIdRecoverPutValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recover Resource Group (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted resourceGroup object. A valid &lt;b&gt;resourceGroup id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resourceGroup object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcegroupsIdRecoverPutAsync(String id, final ApiCallback<ResourceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcegroupsIdRecoverPutValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcegroupsPost
     * @param resourceGroupInputModel Resource input model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcegroupsPostCall(ResourceGroupInputModel resourceGroupInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceGroupInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/resourcegroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcegroupsPostValidateBeforeCall(ResourceGroupInputModel resourceGroupInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1ResourcegroupsPostCall(resourceGroupInputModel, _callback);

    }

    /**
     * Create Resource Group
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a resourceGroup object. Resource groups are used to categorize your resources.&lt;/p&gt;
     * @param resourceGroupInputModel Resource input model (optional)
     * @return ResourceGroupViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceGroupViewModel setupV1ResourcegroupsPost(ResourceGroupInputModel resourceGroupInputModel) throws ApiException {
        ApiResponse<ResourceGroupViewModel> localVarResp = setupV1ResourcegroupsPostWithHttpInfo(resourceGroupInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Resource Group
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a resourceGroup object. Resource groups are used to categorize your resources.&lt;/p&gt;
     * @param resourceGroupInputModel Resource input model (optional)
     * @return ApiResponse&lt;ResourceGroupViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceGroupViewModel> setupV1ResourcegroupsPostWithHttpInfo(ResourceGroupInputModel resourceGroupInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcegroupsPostValidateBeforeCall(resourceGroupInputModel, null);
        Type localVarReturnType = new TypeToken<ResourceGroupViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Resource Group (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a resourceGroup object. Resource groups are used to categorize your resources.&lt;/p&gt;
     * @param resourceGroupInputModel Resource input model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcegroupsPostAsync(ResourceGroupInputModel resourceGroupInputModel, final ApiCallback<ResourceGroupViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcegroupsPostValidateBeforeCall(resourceGroupInputModel, _callback);
        Type localVarReturnType = new TypeToken<ResourceGroupViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
