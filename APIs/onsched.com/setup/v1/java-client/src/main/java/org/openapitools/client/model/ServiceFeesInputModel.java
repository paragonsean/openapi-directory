/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceFeesInputModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:58.890429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceFeesInputModel {
  public static final String SERIALIZED_NAME_CANCELLATION_FEE_AMOUNT = "cancellationFeeAmount";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_FEE_AMOUNT)
  private Double cancellationFeeAmount;

  public static final String SERIALIZED_NAME_CANCELLATION_FEE_TAXABLE = "cancellationFeeTaxable";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_FEE_TAXABLE)
  private Boolean cancellationFeeTaxable;

  public static final String SERIALIZED_NAME_FEE_AMOUNT = "feeAmount";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT)
  private Double feeAmount;

  public static final String SERIALIZED_NAME_FEE_TAXABLE = "feeTaxable";
  @SerializedName(SERIALIZED_NAME_FEE_TAXABLE)
  private Boolean feeTaxable;

  public static final String SERIALIZED_NAME_NON_REFUNDABLE = "nonRefundable";
  @SerializedName(SERIALIZED_NAME_NON_REFUNDABLE)
  private Boolean nonRefundable;

  public ServiceFeesInputModel() {
  }

  public ServiceFeesInputModel cancellationFeeAmount(Double cancellationFeeAmount) {
    this.cancellationFeeAmount = cancellationFeeAmount;
    return this;
  }

  /**
   * Get cancellationFeeAmount
   * @return cancellationFeeAmount
   */
  @javax.annotation.Nullable
  public Double getCancellationFeeAmount() {
    return cancellationFeeAmount;
  }

  public void setCancellationFeeAmount(Double cancellationFeeAmount) {
    this.cancellationFeeAmount = cancellationFeeAmount;
  }


  public ServiceFeesInputModel cancellationFeeTaxable(Boolean cancellationFeeTaxable) {
    this.cancellationFeeTaxable = cancellationFeeTaxable;
    return this;
  }

  /**
   * Get cancellationFeeTaxable
   * @return cancellationFeeTaxable
   */
  @javax.annotation.Nullable
  public Boolean getCancellationFeeTaxable() {
    return cancellationFeeTaxable;
  }

  public void setCancellationFeeTaxable(Boolean cancellationFeeTaxable) {
    this.cancellationFeeTaxable = cancellationFeeTaxable;
  }


  public ServiceFeesInputModel feeAmount(Double feeAmount) {
    this.feeAmount = feeAmount;
    return this;
  }

  /**
   * Get feeAmount
   * @return feeAmount
   */
  @javax.annotation.Nullable
  public Double getFeeAmount() {
    return feeAmount;
  }

  public void setFeeAmount(Double feeAmount) {
    this.feeAmount = feeAmount;
  }


  public ServiceFeesInputModel feeTaxable(Boolean feeTaxable) {
    this.feeTaxable = feeTaxable;
    return this;
  }

  /**
   * Get feeTaxable
   * @return feeTaxable
   */
  @javax.annotation.Nullable
  public Boolean getFeeTaxable() {
    return feeTaxable;
  }

  public void setFeeTaxable(Boolean feeTaxable) {
    this.feeTaxable = feeTaxable;
  }


  public ServiceFeesInputModel nonRefundable(Boolean nonRefundable) {
    this.nonRefundable = nonRefundable;
    return this;
  }

  /**
   * Get nonRefundable
   * @return nonRefundable
   */
  @javax.annotation.Nullable
  public Boolean getNonRefundable() {
    return nonRefundable;
  }

  public void setNonRefundable(Boolean nonRefundable) {
    this.nonRefundable = nonRefundable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceFeesInputModel serviceFeesInputModel = (ServiceFeesInputModel) o;
    return Objects.equals(this.cancellationFeeAmount, serviceFeesInputModel.cancellationFeeAmount) &&
        Objects.equals(this.cancellationFeeTaxable, serviceFeesInputModel.cancellationFeeTaxable) &&
        Objects.equals(this.feeAmount, serviceFeesInputModel.feeAmount) &&
        Objects.equals(this.feeTaxable, serviceFeesInputModel.feeTaxable) &&
        Objects.equals(this.nonRefundable, serviceFeesInputModel.nonRefundable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancellationFeeAmount, cancellationFeeTaxable, feeAmount, feeTaxable, nonRefundable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceFeesInputModel {\n");
    sb.append("    cancellationFeeAmount: ").append(toIndentedString(cancellationFeeAmount)).append("\n");
    sb.append("    cancellationFeeTaxable: ").append(toIndentedString(cancellationFeeTaxable)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    feeTaxable: ").append(toIndentedString(feeTaxable)).append("\n");
    sb.append("    nonRefundable: ").append(toIndentedString(nonRefundable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancellationFeeAmount");
    openapiFields.add("cancellationFeeTaxable");
    openapiFields.add("feeAmount");
    openapiFields.add("feeTaxable");
    openapiFields.add("nonRefundable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceFeesInputModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceFeesInputModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceFeesInputModel is not found in the empty JSON string", ServiceFeesInputModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceFeesInputModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceFeesInputModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceFeesInputModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceFeesInputModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceFeesInputModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceFeesInputModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceFeesInputModel>() {
           @Override
           public void write(JsonWriter out, ServiceFeesInputModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceFeesInputModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceFeesInputModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceFeesInputModel
   * @throws IOException if the JSON string is invalid with respect to ServiceFeesInputModel
   */
  public static ServiceFeesInputModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceFeesInputModel.class);
  }

  /**
   * Convert an instance of ServiceFeesInputModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

