/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CalendarBlockInputModel;
import org.openapitools.client.model.CalendarBlockListViewModel;
import org.openapitools.client.model.CalendarBlockUpdateModel;
import org.openapitools.client.model.CalendarBlockViewModel;
import org.openapitools.client.model.ResourceBlockViewModel;
import org.openapitools.client.model.ScheduleInputModel;
import org.openapitools.client.model.ScheduleListViewModel;
import org.openapitools.client.model.ScheduleUpdateModel;
import org.openapitools.client.model.ScheduleViewModel;
import org.openapitools.client.model.ServiceListViewModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CalendarsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CalendarsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CalendarsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for setupV1CalendarsBlockIdDelete
     * @param id id of a calendarBlock object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsBlockIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/calendars/block/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CalendarsBlockIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CalendarsBlockIdDelete(Async)");
        }

        return setupV1CalendarsBlockIdDeleteCall(id, _callback);

    }

    /**
     * Delete Calendar Block
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a calendar block. A valid &lt;b&gt;calendarBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of a calendarBlock object (required)
     * @return CalendarBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CalendarBlockViewModel setupV1CalendarsBlockIdDelete(String id) throws ApiException {
        ApiResponse<CalendarBlockViewModel> localVarResp = setupV1CalendarsBlockIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Calendar Block
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a calendar block. A valid &lt;b&gt;calendarBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of a calendarBlock object (required)
     * @return ApiResponse&lt;CalendarBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarBlockViewModel> setupV1CalendarsBlockIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1CalendarsBlockIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CalendarBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Calendar Block (asynchronously)
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a calendar block. A valid &lt;b&gt;calendarBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of a calendarBlock object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsBlockIdDeleteAsync(String id, final ApiCallback<CalendarBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CalendarsBlockIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CalendarBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CalendarsBlockIdPut
     * @param id id of calendarBlock object (required)
     * @param calendarBlockUpdateModel Resource Block input model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsBlockIdPutCall(String id, CalendarBlockUpdateModel calendarBlockUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = calendarBlockUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/calendars/block/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CalendarsBlockIdPutValidateBeforeCall(String id, CalendarBlockUpdateModel calendarBlockUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CalendarsBlockIdPut(Async)");
        }

        return setupV1CalendarsBlockIdPutCall(id, calendarBlockUpdateModel, _callback);

    }

    /**
     * Update Calendar Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Calendar Block. A valid &lt;b&gt;calendarBlock id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST ​/setup​/v1​/calendars​/{id}​/block&lt;/i&gt; endpoint for fieldnames and details.&lt;/p&gt;
     * @param id id of calendarBlock object (required)
     * @param calendarBlockUpdateModel Resource Block input model (optional)
     * @return CalendarBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CalendarBlockViewModel setupV1CalendarsBlockIdPut(String id, CalendarBlockUpdateModel calendarBlockUpdateModel) throws ApiException {
        ApiResponse<CalendarBlockViewModel> localVarResp = setupV1CalendarsBlockIdPutWithHttpInfo(id, calendarBlockUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Calendar Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Calendar Block. A valid &lt;b&gt;calendarBlock id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST ​/setup​/v1​/calendars​/{id}​/block&lt;/i&gt; endpoint for fieldnames and details.&lt;/p&gt;
     * @param id id of calendarBlock object (required)
     * @param calendarBlockUpdateModel Resource Block input model (optional)
     * @return ApiResponse&lt;CalendarBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarBlockViewModel> setupV1CalendarsBlockIdPutWithHttpInfo(String id, CalendarBlockUpdateModel calendarBlockUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1CalendarsBlockIdPutValidateBeforeCall(id, calendarBlockUpdateModel, null);
        Type localVarReturnType = new TypeToken<CalendarBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Calendar Block (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Calendar Block. A valid &lt;b&gt;calendarBlock id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST ​/setup​/v1​/calendars​/{id}​/block&lt;/i&gt; endpoint for fieldnames and details.&lt;/p&gt;
     * @param id id of calendarBlock object (required)
     * @param calendarBlockUpdateModel Resource Block input model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsBlockIdPutAsync(String id, CalendarBlockUpdateModel calendarBlockUpdateModel, final ApiCallback<CalendarBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CalendarsBlockIdPutValidateBeforeCall(id, calendarBlockUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<CalendarBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CalendarsBlocksIdGet
     * @param id id of calendarBlock object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsBlocksIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/calendars/blocks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CalendarsBlocksIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CalendarsBlocksIdGet(Async)");
        }

        return setupV1CalendarsBlocksIdGetCall(id, _callback);

    }

    /**
     * Get Calendar Block
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Calendar Block&lt;/b&gt;. A valid &lt;b&gt;calendarBlock id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of calendarBlock object (required)
     * @return CalendarBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CalendarBlockViewModel setupV1CalendarsBlocksIdGet(String id) throws ApiException {
        ApiResponse<CalendarBlockViewModel> localVarResp = setupV1CalendarsBlocksIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Calendar Block
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Calendar Block&lt;/b&gt;. A valid &lt;b&gt;calendarBlock id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of calendarBlock object (required)
     * @return ApiResponse&lt;CalendarBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarBlockViewModel> setupV1CalendarsBlocksIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1CalendarsBlocksIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CalendarBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Calendar Block (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Calendar Block&lt;/b&gt;. A valid &lt;b&gt;calendarBlock id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of calendarBlock object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsBlocksIdGetAsync(String id, final ApiCallback<CalendarBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CalendarsBlocksIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CalendarBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CalendarsGet
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param deleted Filter by deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsGetCall(String locationId, Boolean deleted, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/calendars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CalendarsGetValidateBeforeCall(String locationId, Boolean deleted, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return setupV1CalendarsGetCall(locationId, deleted, offset, limit, _callback);

    }

    /**
     * List Calendars
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Calendars&lt;/b&gt; from the requested location. If not specified, the business location defaults to the primary business location. &lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param deleted Filter by deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ScheduleListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleListViewModel setupV1CalendarsGet(String locationId, Boolean deleted, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ScheduleListViewModel> localVarResp = setupV1CalendarsGetWithHttpInfo(locationId, deleted, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Calendars
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Calendars&lt;/b&gt; from the requested location. If not specified, the business location defaults to the primary business location. &lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param deleted Filter by deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;ScheduleListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleListViewModel> setupV1CalendarsGetWithHttpInfo(String locationId, Boolean deleted, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1CalendarsGetValidateBeforeCall(locationId, deleted, offset, limit, null);
        Type localVarReturnType = new TypeToken<ScheduleListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Calendars (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Calendars&lt;/b&gt; from the requested location. If not specified, the business location defaults to the primary business location. &lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param deleted Filter by deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsGetAsync(String locationId, Boolean deleted, Integer offset, Integer limit, final ApiCallback<ScheduleListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CalendarsGetValidateBeforeCall(locationId, deleted, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ScheduleListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CalendarsIdBlockPost
     * @param id id of calendar object (required)
     * @param calendarBlockInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdBlockPostCall(String id, CalendarBlockInputModel calendarBlockInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = calendarBlockInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/calendars/{id}/block"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CalendarsIdBlockPostValidateBeforeCall(String id, CalendarBlockInputModel calendarBlockInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CalendarsIdBlockPost(Async)");
        }

        return setupV1CalendarsIdBlockPostCall(id, calendarBlockInputModel, _callback);

    }

    /**
     * Create Calendar Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Calendar Block. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;Calendar blocks can be set to specific time ranges or for the whole day. Th block a whole day set the startTime to 0 and endTime to 2400.&lt;/p&gt;  &lt;p&gt;Calendar blocks can be for a specific date range instance or set to repeat at a specified frequency.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY BLOCKS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY BLOCKS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt;  is required and should be set to &lt;b&gt;“W”&lt;/b&gt;.  You must specify the &lt;b&gt;weekdays&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;. For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY BLOCKS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly, &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want blocked.  If monthDay&#x3D;’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of calendar object (required)
     * @param calendarBlockInputModel  (optional)
     * @return ResourceBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceBlockViewModel setupV1CalendarsIdBlockPost(String id, CalendarBlockInputModel calendarBlockInputModel) throws ApiException {
        ApiResponse<ResourceBlockViewModel> localVarResp = setupV1CalendarsIdBlockPostWithHttpInfo(id, calendarBlockInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Calendar Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Calendar Block. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;Calendar blocks can be set to specific time ranges or for the whole day. Th block a whole day set the startTime to 0 and endTime to 2400.&lt;/p&gt;  &lt;p&gt;Calendar blocks can be for a specific date range instance or set to repeat at a specified frequency.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY BLOCKS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY BLOCKS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt;  is required and should be set to &lt;b&gt;“W”&lt;/b&gt;.  You must specify the &lt;b&gt;weekdays&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;. For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY BLOCKS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly, &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want blocked.  If monthDay&#x3D;’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of calendar object (required)
     * @param calendarBlockInputModel  (optional)
     * @return ApiResponse&lt;ResourceBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceBlockViewModel> setupV1CalendarsIdBlockPostWithHttpInfo(String id, CalendarBlockInputModel calendarBlockInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1CalendarsIdBlockPostValidateBeforeCall(id, calendarBlockInputModel, null);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Calendar Block (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Calendar Block. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;Calendar blocks can be set to specific time ranges or for the whole day. Th block a whole day set the startTime to 0 and endTime to 2400.&lt;/p&gt;  &lt;p&gt;Calendar blocks can be for a specific date range instance or set to repeat at a specified frequency.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY BLOCKS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY BLOCKS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt;  is required and should be set to &lt;b&gt;“W”&lt;/b&gt;.  You must specify the &lt;b&gt;weekdays&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;. For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY BLOCKS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly, &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want blocked.  If monthDay&#x3D;’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of calendar object (required)
     * @param calendarBlockInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdBlockPostAsync(String id, CalendarBlockInputModel calendarBlockInputModel, final ApiCallback<ResourceBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CalendarsIdBlockPostValidateBeforeCall(id, calendarBlockInputModel, _callback);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CalendarsIdBlocksGet
     * @param id id of calendar to list blocks (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdBlocksGetCall(String id, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/calendars/{id}/blocks"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CalendarsIdBlocksGetValidateBeforeCall(String id, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CalendarsIdBlocksGet(Async)");
        }

        return setupV1CalendarsIdBlocksGetCall(id, offset, limit, _callback);

    }

    /**
     * List Calendar Blocks
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Calendar Blocks&lt;/b&gt; for the requested calendar. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of calendar to list blocks (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return CalendarBlockListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public CalendarBlockListViewModel setupV1CalendarsIdBlocksGet(String id, Integer offset, Integer limit) throws ApiException {
        ApiResponse<CalendarBlockListViewModel> localVarResp = setupV1CalendarsIdBlocksGetWithHttpInfo(id, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Calendar Blocks
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Calendar Blocks&lt;/b&gt; for the requested calendar. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of calendar to list blocks (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;CalendarBlockListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarBlockListViewModel> setupV1CalendarsIdBlocksGetWithHttpInfo(String id, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1CalendarsIdBlocksGetValidateBeforeCall(id, offset, limit, null);
        Type localVarReturnType = new TypeToken<CalendarBlockListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Calendar Blocks (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Calendar Blocks&lt;/b&gt; for the requested calendar. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of calendar to list blocks (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdBlocksGetAsync(String id, Integer offset, Integer limit, final ApiCallback<CalendarBlockListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CalendarsIdBlocksGetValidateBeforeCall(id, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<CalendarBlockListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CalendarsIdDelete
     * @param id id of calendar object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/calendars/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CalendarsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CalendarsIdDelete(Async)");
        }

        return setupV1CalendarsIdDeleteCall(id, _callback);

    }

    /**
     * Delete Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. The calendar is not permanently deleted and can be recovered by using the &lt;i&gt;PUT ​/setup​/v1​/calendars​/{id}​/recover &lt;/i&gt;endpoint.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @return ScheduleViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleViewModel setupV1CalendarsIdDelete(String id) throws ApiException {
        ApiResponse<ScheduleViewModel> localVarResp = setupV1CalendarsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. The calendar is not permanently deleted and can be recovered by using the &lt;i&gt;PUT ​/setup​/v1​/calendars​/{id}​/recover &lt;/i&gt;endpoint.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @return ApiResponse&lt;ScheduleViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleViewModel> setupV1CalendarsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1CalendarsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ScheduleViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Calendar (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. The calendar is not permanently deleted and can be recovered by using the &lt;i&gt;PUT ​/setup​/v1​/calendars​/{id}​/recover &lt;/i&gt;endpoint.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdDeleteAsync(String id, final ApiCallback<ScheduleViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CalendarsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ScheduleViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CalendarsIdGet
     * @param id id of calendar object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/calendars/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CalendarsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CalendarsIdGet(Async)");
        }

        return setupV1CalendarsIdGetCall(id, _callback);

    }

    /**
     * Get Calendar
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Calendar&lt;/b&gt; object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @return ScheduleViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleViewModel setupV1CalendarsIdGet(String id) throws ApiException {
        ApiResponse<ScheduleViewModel> localVarResp = setupV1CalendarsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Calendar
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Calendar&lt;/b&gt; object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @return ApiResponse&lt;ScheduleViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleViewModel> setupV1CalendarsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1CalendarsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ScheduleViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Calendar (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Calendar&lt;/b&gt; object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdGetAsync(String id, final ApiCallback<ScheduleViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CalendarsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ScheduleViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CalendarsIdPut
     * @param id id of calendar object (required)
     * @param scheduleUpdateModel Input model for the calendar object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdPutCall(String id, ScheduleUpdateModel scheduleUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scheduleUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/calendars/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CalendarsIdPutValidateBeforeCall(String id, ScheduleUpdateModel scheduleUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CalendarsIdPut(Async)");
        }

        return setupV1CalendarsIdPutCall(id, scheduleUpdateModel, _callback);

    }

    /**
     * Update Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. When your company was created a calendar object was automatically created with 24-hour weekly availability. Its &lt;b&gt;name &#x3D; Main&lt;/b&gt;, the &lt;b&gt;type &#x3D; resource&lt;/b&gt; and by default the &lt;b&gt;interval &#x3D; 30 mins&lt;/b&gt;. We are currently supporting resource calendar type. Other types were part of our Legacy Application and has no relevance in the API product.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @param scheduleUpdateModel Input model for the calendar object (optional)
     * @return ScheduleViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleViewModel setupV1CalendarsIdPut(String id, ScheduleUpdateModel scheduleUpdateModel) throws ApiException {
        ApiResponse<ScheduleViewModel> localVarResp = setupV1CalendarsIdPutWithHttpInfo(id, scheduleUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. When your company was created a calendar object was automatically created with 24-hour weekly availability. Its &lt;b&gt;name &#x3D; Main&lt;/b&gt;, the &lt;b&gt;type &#x3D; resource&lt;/b&gt; and by default the &lt;b&gt;interval &#x3D; 30 mins&lt;/b&gt;. We are currently supporting resource calendar type. Other types were part of our Legacy Application and has no relevance in the API product.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @param scheduleUpdateModel Input model for the calendar object (optional)
     * @return ApiResponse&lt;ScheduleViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleViewModel> setupV1CalendarsIdPutWithHttpInfo(String id, ScheduleUpdateModel scheduleUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1CalendarsIdPutValidateBeforeCall(id, scheduleUpdateModel, null);
        Type localVarReturnType = new TypeToken<ScheduleViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Calendar (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. When your company was created a calendar object was automatically created with 24-hour weekly availability. Its &lt;b&gt;name &#x3D; Main&lt;/b&gt;, the &lt;b&gt;type &#x3D; resource&lt;/b&gt; and by default the &lt;b&gt;interval &#x3D; 30 mins&lt;/b&gt;. We are currently supporting resource calendar type. Other types were part of our Legacy Application and has no relevance in the API product.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @param scheduleUpdateModel Input model for the calendar object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdPutAsync(String id, ScheduleUpdateModel scheduleUpdateModel, final ApiCallback<ScheduleViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CalendarsIdPutValidateBeforeCall(id, scheduleUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<ScheduleViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CalendarsIdRecoverPut
     * @param id id of calendar object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdRecoverPutCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/calendars/{id}/recover"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CalendarsIdRecoverPutValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CalendarsIdRecoverPut(Async)");
        }

        return setupV1CalendarsIdRecoverPutCall(id, _callback);

    }

    /**
     * Recover Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a previously deleted calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @return ScheduleViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleViewModel setupV1CalendarsIdRecoverPut(String id) throws ApiException {
        ApiResponse<ScheduleViewModel> localVarResp = setupV1CalendarsIdRecoverPutWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Recover Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a previously deleted calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @return ApiResponse&lt;ScheduleViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleViewModel> setupV1CalendarsIdRecoverPutWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1CalendarsIdRecoverPutValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ScheduleViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recover Calendar (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a previously deleted calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdRecoverPutAsync(String id, final ApiCallback<ScheduleViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CalendarsIdRecoverPutValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ScheduleViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CalendarsIdServicesGet
     * @param id id of calendar object (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdServicesGetCall(String id, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/calendars/{id}/services"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CalendarsIdServicesGetValidateBeforeCall(String id, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CalendarsIdServicesGet(Async)");
        }

        return setupV1CalendarsIdServicesGetCall(id, offset, limit, _callback);

    }

    /**
     * List Calendar Services
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Linked Services&lt;/b&gt; of a calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. Find calendar id&#39;s by using the &lt;i&gt;GET /setup/v1/calendars&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ServiceListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceListViewModel setupV1CalendarsIdServicesGet(String id, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ServiceListViewModel> localVarResp = setupV1CalendarsIdServicesGetWithHttpInfo(id, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Calendar Services
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Linked Services&lt;/b&gt; of a calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. Find calendar id&#39;s by using the &lt;i&gt;GET /setup/v1/calendars&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;ServiceListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceListViewModel> setupV1CalendarsIdServicesGetWithHttpInfo(String id, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1CalendarsIdServicesGetValidateBeforeCall(id, offset, limit, null);
        Type localVarReturnType = new TypeToken<ServiceListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Calendar Services (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Linked Services&lt;/b&gt; of a calendar object. A valid &lt;b&gt;calendar id&lt;/b&gt; is required. Find calendar id&#39;s by using the &lt;i&gt;GET /setup/v1/calendars&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of calendar object (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsIdServicesGetAsync(String id, Integer offset, Integer limit, final ApiCallback<ServiceListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CalendarsIdServicesGetValidateBeforeCall(id, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ServiceListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CalendarsPost
     * @param scheduleInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsPostCall(ScheduleInputModel scheduleInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scheduleInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/calendars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CalendarsPostValidateBeforeCall(ScheduleInputModel scheduleInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1CalendarsPostCall(scheduleInputModel, _callback);

    }

    /**
     * DEPRECATING: Create
     * &lt;p&gt;    &lt;b&gt;DEPRECATING:&lt;/b&gt; Create Calendar&lt;/p&gt;  &lt;p&gt;We are no longer supporting Multiple Calendar Functionality as it is part of our Legacy Application and has no relevance in the API.&lt;/p&gt;
     * @param scheduleInputModel  (optional)
     * @return ScheduleViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleViewModel setupV1CalendarsPost(ScheduleInputModel scheduleInputModel) throws ApiException {
        ApiResponse<ScheduleViewModel> localVarResp = setupV1CalendarsPostWithHttpInfo(scheduleInputModel);
        return localVarResp.getData();
    }

    /**
     * DEPRECATING: Create
     * &lt;p&gt;    &lt;b&gt;DEPRECATING:&lt;/b&gt; Create Calendar&lt;/p&gt;  &lt;p&gt;We are no longer supporting Multiple Calendar Functionality as it is part of our Legacy Application and has no relevance in the API.&lt;/p&gt;
     * @param scheduleInputModel  (optional)
     * @return ApiResponse&lt;ScheduleViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleViewModel> setupV1CalendarsPostWithHttpInfo(ScheduleInputModel scheduleInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1CalendarsPostValidateBeforeCall(scheduleInputModel, null);
        Type localVarReturnType = new TypeToken<ScheduleViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DEPRECATING: Create (asynchronously)
     * &lt;p&gt;    &lt;b&gt;DEPRECATING:&lt;/b&gt; Create Calendar&lt;/p&gt;  &lt;p&gt;We are no longer supporting Multiple Calendar Functionality as it is part of our Legacy Application and has no relevance in the API.&lt;/p&gt;
     * @param scheduleInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CalendarsPostAsync(ScheduleInputModel scheduleInputModel, final ApiCallback<ScheduleViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CalendarsPostValidateBeforeCall(scheduleInputModel, _callback);
        Type localVarReturnType = new TypeToken<ScheduleViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
