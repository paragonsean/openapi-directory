/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppointmentViewModel;
import org.openapitools.client.model.AvailabilityInputModel;
import org.openapitools.client.model.CalendarAuthViewModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ResourceAllocationInputModel;
import org.openapitools.client.model.ResourceAllocationListViewModel;
import org.openapitools.client.model.ResourceAllocationUpdateModel;
import org.openapitools.client.model.ResourceAllocationViewModel;
import org.openapitools.client.model.ResourceAvailabilityViewModel;
import org.openapitools.client.model.ResourceBlockInputModel;
import org.openapitools.client.model.ResourceBlockListViewModel;
import org.openapitools.client.model.ResourceBlockUpdateModel;
import org.openapitools.client.model.ResourceBlockViewModel;
import org.openapitools.client.model.ResourceImageInputModel;
import org.openapitools.client.model.ResourceInputModel;
import org.openapitools.client.model.ResourceListViewModel;
import org.openapitools.client.model.ResourceUpdateModel;
import org.openapitools.client.model.ResourceViewModel;
import org.openapitools.client.model.ResourcesInputModel;
import org.openapitools.client.model.ResourcesUpdateModel;
import org.openapitools.client.model.SystemTimezoneViewModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for setupV1ResourcesAllocationsIdDelete
     * @param id id of resourceAllocation object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesAllocationsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/allocations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesAllocationsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesAllocationsIdDelete(Async)");
        }

        return setupV1ResourcesAllocationsIdDeleteCall(id, _callback);

    }

    /**
     * Delete Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a Resource Allocation. A valid &lt;b&gt;resourceAllocation id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resourceAllocation object (required)
     * @return ResourceBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceBlockViewModel setupV1ResourcesAllocationsIdDelete(String id) throws ApiException {
        ApiResponse<ResourceBlockViewModel> localVarResp = setupV1ResourcesAllocationsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a Resource Allocation. A valid &lt;b&gt;resourceAllocation id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resourceAllocation object (required)
     * @return ApiResponse&lt;ResourceBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceBlockViewModel> setupV1ResourcesAllocationsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesAllocationsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Allocation (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a Resource Allocation. A valid &lt;b&gt;resourceAllocation id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resourceAllocation object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesAllocationsIdDeleteAsync(String id, final ApiCallback<ResourceBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesAllocationsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesAllocationsIdGet
     * @param id id of resourceAllocation object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesAllocationsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/allocations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesAllocationsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesAllocationsIdGet(Async)");
        }

        return setupV1ResourcesAllocationsIdGetCall(id, _callback);

    }

    /**
     * Get Allocation
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource Allocation&lt;/b&gt;. A valid &lt;b&gt;resourceAllocation id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of resourceAllocation object (required)
     * @return ResourceAllocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAllocationViewModel setupV1ResourcesAllocationsIdGet(String id) throws ApiException {
        ApiResponse<ResourceAllocationViewModel> localVarResp = setupV1ResourcesAllocationsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Allocation
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource Allocation&lt;/b&gt;. A valid &lt;b&gt;resourceAllocation id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of resourceAllocation object (required)
     * @return ApiResponse&lt;ResourceAllocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAllocationViewModel> setupV1ResourcesAllocationsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesAllocationsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceAllocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Allocation (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource Allocation&lt;/b&gt;. A valid &lt;b&gt;resourceAllocation id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of resourceAllocation object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesAllocationsIdGetAsync(String id, final ApiCallback<ResourceAllocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesAllocationsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceAllocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesAllocationsIdPut
     * @param id id of resourceAllocation object (required)
     * @param resourceAllocationUpdateModel Resource allocation update model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesAllocationsIdPutCall(String id, ResourceAllocationUpdateModel resourceAllocationUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceAllocationUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/allocations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesAllocationsIdPutValidateBeforeCall(String id, ResourceAllocationUpdateModel resourceAllocationUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesAllocationsIdPut(Async)");
        }

        return setupV1ResourcesAllocationsIdPutCall(id, resourceAllocationUpdateModel, _callback);

    }

    /**
     * Update Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a resource allocation. A valid &lt;b&gt;resourceAllocation id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST /setup/v1/resources/{id}/allocations&lt;/i&gt; endpoint for details.&lt;/p&gt;
     * @param id id of resourceAllocation object (required)
     * @param resourceAllocationUpdateModel Resource allocation update model (optional)
     * @return ResourceBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceBlockViewModel setupV1ResourcesAllocationsIdPut(String id, ResourceAllocationUpdateModel resourceAllocationUpdateModel) throws ApiException {
        ApiResponse<ResourceBlockViewModel> localVarResp = setupV1ResourcesAllocationsIdPutWithHttpInfo(id, resourceAllocationUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a resource allocation. A valid &lt;b&gt;resourceAllocation id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST /setup/v1/resources/{id}/allocations&lt;/i&gt; endpoint for details.&lt;/p&gt;
     * @param id id of resourceAllocation object (required)
     * @param resourceAllocationUpdateModel Resource allocation update model (optional)
     * @return ApiResponse&lt;ResourceBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceBlockViewModel> setupV1ResourcesAllocationsIdPutWithHttpInfo(String id, ResourceAllocationUpdateModel resourceAllocationUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesAllocationsIdPutValidateBeforeCall(id, resourceAllocationUpdateModel, null);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Allocation (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a resource allocation. A valid &lt;b&gt;resourceAllocation id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST /setup/v1/resources/{id}/allocations&lt;/i&gt; endpoint for details.&lt;/p&gt;
     * @param id id of resourceAllocation object (required)
     * @param resourceAllocationUpdateModel Resource allocation update model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesAllocationsIdPutAsync(String id, ResourceAllocationUpdateModel resourceAllocationUpdateModel, final ApiCallback<ResourceBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesAllocationsIdPutValidateBeforeCall(id, resourceAllocationUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesBlockIdDelete
     * @param id id of resourceBlock object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesBlockIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/block/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesBlockIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesBlockIdDelete(Async)");
        }

        return setupV1ResourcesBlockIdDeleteCall(id, _callback);

    }

    /**
     * Delete Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resourceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resourceBlock object (required)
     * @return ResourceBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceBlockViewModel setupV1ResourcesBlockIdDelete(String id) throws ApiException {
        ApiResponse<ResourceBlockViewModel> localVarResp = setupV1ResourcesBlockIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resourceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resourceBlock object (required)
     * @return ApiResponse&lt;ResourceBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceBlockViewModel> setupV1ResourcesBlockIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesBlockIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Block (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resourceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resourceBlock object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesBlockIdDeleteAsync(String id, final ApiCallback<ResourceBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesBlockIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesBlockIdPut
     * @param id id of resourceBlock object (required)
     * @param resourceBlockUpdateModel Resource Block update model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesBlockIdPutCall(String id, ResourceBlockUpdateModel resourceBlockUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceBlockUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/block/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesBlockIdPutValidateBeforeCall(String id, ResourceBlockUpdateModel resourceBlockUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesBlockIdPut(Async)");
        }

        return setupV1ResourcesBlockIdPutCall(id, resourceBlockUpdateModel, _callback);

    }

    /**
     * Update Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resourceBlock id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/block&lt;/i&gt; endpoint for fieldnames and details.&lt;/p&gt;
     * @param id id of resourceBlock object (required)
     * @param resourceBlockUpdateModel Resource Block update model (optional)
     * @return ResourceBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceBlockViewModel setupV1ResourcesBlockIdPut(String id, ResourceBlockUpdateModel resourceBlockUpdateModel) throws ApiException {
        ApiResponse<ResourceBlockViewModel> localVarResp = setupV1ResourcesBlockIdPutWithHttpInfo(id, resourceBlockUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resourceBlock id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/block&lt;/i&gt; endpoint for fieldnames and details.&lt;/p&gt;
     * @param id id of resourceBlock object (required)
     * @param resourceBlockUpdateModel Resource Block update model (optional)
     * @return ApiResponse&lt;ResourceBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceBlockViewModel> setupV1ResourcesBlockIdPutWithHttpInfo(String id, ResourceBlockUpdateModel resourceBlockUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesBlockIdPutValidateBeforeCall(id, resourceBlockUpdateModel, null);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Block (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resourceBlock id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/block&lt;/i&gt; endpoint for fieldnames and details.&lt;/p&gt;
     * @param id id of resourceBlock object (required)
     * @param resourceBlockUpdateModel Resource Block update model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesBlockIdPutAsync(String id, ResourceBlockUpdateModel resourceBlockUpdateModel, final ApiCallback<ResourceBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesBlockIdPutValidateBeforeCall(id, resourceBlockUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesBlocksIdGet
     * @param id id of resourceBlock object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesBlocksIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/blocks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesBlocksIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesBlocksIdGet(Async)");
        }

        return setupV1ResourcesBlocksIdGetCall(id, _callback);

    }

    /**
     * Get Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resourceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resourceBlock object (required)
     * @return ResourceBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceBlockViewModel setupV1ResourcesBlocksIdGet(String id) throws ApiException {
        ApiResponse<ResourceBlockViewModel> localVarResp = setupV1ResourcesBlocksIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resourceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resourceBlock object (required)
     * @return ApiResponse&lt;ResourceBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceBlockViewModel> setupV1ResourcesBlocksIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesBlocksIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Block (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resourceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resourceBlock object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesBlocksIdGetAsync(String id, final ApiCallback<ResourceBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesBlocksIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesBulkPost
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourcesInputModel Resources input model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesBulkPostCall(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourcesInputModel resourcesInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcesInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (googleAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("googleAuthReturnUrl", googleAuthReturnUrl));
        }

        if (outlookAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outlookAuthReturnUrl", outlookAuthReturnUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesBulkPostValidateBeforeCall(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourcesInputModel resourcesInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1ResourcesBulkPostCall(googleAuthReturnUrl, outlookAuthReturnUrl, resourcesInputModel, _callback);

    }

    /**
     * Create Resources Bulk
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Bulk Create&lt;/b&gt; resources. Valid &lt;b&gt;resource ids&lt;/b&gt; are required. The posted list of resources cannot exceed 100 resource objects per transaction for performance purposes.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourcesInputModel Resources input model (optional)
     * @return List&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ResourceViewModel> setupV1ResourcesBulkPost(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourcesInputModel resourcesInputModel) throws ApiException {
        ApiResponse<List<ResourceViewModel>> localVarResp = setupV1ResourcesBulkPostWithHttpInfo(googleAuthReturnUrl, outlookAuthReturnUrl, resourcesInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Resources Bulk
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Bulk Create&lt;/b&gt; resources. Valid &lt;b&gt;resource ids&lt;/b&gt; are required. The posted list of resources cannot exceed 100 resource objects per transaction for performance purposes.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourcesInputModel Resources input model (optional)
     * @return ApiResponse&lt;List&lt;ResourceViewModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ResourceViewModel>> setupV1ResourcesBulkPostWithHttpInfo(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourcesInputModel resourcesInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesBulkPostValidateBeforeCall(googleAuthReturnUrl, outlookAuthReturnUrl, resourcesInputModel, null);
        Type localVarReturnType = new TypeToken<List<ResourceViewModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Resources Bulk (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Bulk Create&lt;/b&gt; resources. Valid &lt;b&gt;resource ids&lt;/b&gt; are required. The posted list of resources cannot exceed 100 resource objects per transaction for performance purposes.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourcesInputModel Resources input model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesBulkPostAsync(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourcesInputModel resourcesInputModel, final ApiCallback<List<ResourceViewModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesBulkPostValidateBeforeCall(googleAuthReturnUrl, outlookAuthReturnUrl, resourcesInputModel, _callback);
        Type localVarReturnType = new TypeToken<List<ResourceViewModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesBulkPut
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourcesUpdateModel Resources update model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesBulkPutCall(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourcesUpdateModel resourcesUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcesUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (googleAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("googleAuthReturnUrl", googleAuthReturnUrl));
        }

        if (outlookAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outlookAuthReturnUrl", outlookAuthReturnUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesBulkPutValidateBeforeCall(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourcesUpdateModel resourcesUpdateModel, final ApiCallback _callback) throws ApiException {
        return setupV1ResourcesBulkPutCall(googleAuthReturnUrl, outlookAuthReturnUrl, resourcesUpdateModel, _callback);

    }

    /**
     * Update Resources Bulk
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Bulk Update&lt;/b&gt; resources. Valid &lt;b&gt;resource id&#39;s&lt;/b&gt; are required. The list of resources cannot exceed 100 resource objects per transaction for performance purposes.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourcesUpdateModel Resources update model (optional)
     * @return List&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ResourceViewModel> setupV1ResourcesBulkPut(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourcesUpdateModel resourcesUpdateModel) throws ApiException {
        ApiResponse<List<ResourceViewModel>> localVarResp = setupV1ResourcesBulkPutWithHttpInfo(googleAuthReturnUrl, outlookAuthReturnUrl, resourcesUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Resources Bulk
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Bulk Update&lt;/b&gt; resources. Valid &lt;b&gt;resource id&#39;s&lt;/b&gt; are required. The list of resources cannot exceed 100 resource objects per transaction for performance purposes.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourcesUpdateModel Resources update model (optional)
     * @return ApiResponse&lt;List&lt;ResourceViewModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ResourceViewModel>> setupV1ResourcesBulkPutWithHttpInfo(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourcesUpdateModel resourcesUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesBulkPutValidateBeforeCall(googleAuthReturnUrl, outlookAuthReturnUrl, resourcesUpdateModel, null);
        Type localVarReturnType = new TypeToken<List<ResourceViewModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Resources Bulk (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Bulk Update&lt;/b&gt; resources. Valid &lt;b&gt;resource id&#39;s&lt;/b&gt; are required. The list of resources cannot exceed 100 resource objects per transaction for performance purposes.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourcesUpdateModel Resources update model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesBulkPutAsync(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourcesUpdateModel resourcesUpdateModel, final ApiCallback<List<ResourceViewModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesBulkPutValidateBeforeCall(googleAuthReturnUrl, outlookAuthReturnUrl, resourcesUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<List<ResourceViewModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesGet
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param resourceGroupId Filter by group Id (optional)
     * @param email Filter by email address (optional)
     * @param name Search by name (optional)
     * @param deleted Show by deleted status, default is false (optional)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max is 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesGetCall(String locationId, String resourceGroupId, String email, String name, Boolean deleted, String googleAuthReturnUrl, String outlookAuthReturnUrl, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (resourceGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceGroupId", resourceGroupId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (googleAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("googleAuthReturnUrl", googleAuthReturnUrl));
        }

        if (outlookAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outlookAuthReturnUrl", outlookAuthReturnUrl));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesGetValidateBeforeCall(String locationId, String resourceGroupId, String email, String name, Boolean deleted, String googleAuthReturnUrl, String outlookAuthReturnUrl, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return setupV1ResourcesGetCall(locationId, resourceGroupId, email, name, deleted, googleAuthReturnUrl, outlookAuthReturnUrl, offset, limit, _callback);

    }

    /**
     * List Resources
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Resources&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param resourceGroupId Filter by group Id (optional)
     * @param email Filter by email address (optional)
     * @param name Search by name (optional)
     * @param deleted Show by deleted status, default is false (optional)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max is 100 (optional)
     * @return ResourceListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListViewModel setupV1ResourcesGet(String locationId, String resourceGroupId, String email, String name, Boolean deleted, String googleAuthReturnUrl, String outlookAuthReturnUrl, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ResourceListViewModel> localVarResp = setupV1ResourcesGetWithHttpInfo(locationId, resourceGroupId, email, name, deleted, googleAuthReturnUrl, outlookAuthReturnUrl, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Resources
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Resources&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param resourceGroupId Filter by group Id (optional)
     * @param email Filter by email address (optional)
     * @param name Search by name (optional)
     * @param deleted Show by deleted status, default is false (optional)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max is 100 (optional)
     * @return ApiResponse&lt;ResourceListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListViewModel> setupV1ResourcesGetWithHttpInfo(String locationId, String resourceGroupId, String email, String name, Boolean deleted, String googleAuthReturnUrl, String outlookAuthReturnUrl, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesGetValidateBeforeCall(locationId, resourceGroupId, email, name, deleted, googleAuthReturnUrl, outlookAuthReturnUrl, offset, limit, null);
        Type localVarReturnType = new TypeToken<ResourceListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Resources (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Resources&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param resourceGroupId Filter by group Id (optional)
     * @param email Filter by email address (optional)
     * @param name Search by name (optional)
     * @param deleted Show by deleted status, default is false (optional)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max is 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesGetAsync(String locationId, String resourceGroupId, String email, String name, Boolean deleted, String googleAuthReturnUrl, String outlookAuthReturnUrl, Integer offset, Integer limit, final ApiCallback<ResourceListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesGetValidateBeforeCall(locationId, resourceGroupId, email, name, deleted, googleAuthReturnUrl, outlookAuthReturnUrl, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ResourceListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdAllocationsGet
     * @param id id of resource to list allocations for (required)
     * @param startDate yyyy-mm-dd, filter allocations on/after startDate (optional)
     * @param endDate yyyy-mm-dd, filter on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource allocation objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdAllocationsGetCall(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/allocations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdAllocationsGetValidateBeforeCall(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdAllocationsGet(Async)");
        }

        return setupV1ResourcesIdAllocationsGetCall(id, startDate, endDate, offset, limit, _callback);

    }

    /**
     * List Resource Allocations
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resource Allocations&lt;/b&gt; for a specified resource. We recommend using allocations if a resource&#39;s schedule changes frequently from day to day or week to week. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of resource to list allocations for (required)
     * @param startDate yyyy-mm-dd, filter allocations on/after startDate (optional)
     * @param endDate yyyy-mm-dd, filter on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ResourceAllocationListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource allocation objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAllocationListViewModel setupV1ResourcesIdAllocationsGet(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ResourceAllocationListViewModel> localVarResp = setupV1ResourcesIdAllocationsGetWithHttpInfo(id, startDate, endDate, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Resource Allocations
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resource Allocations&lt;/b&gt; for a specified resource. We recommend using allocations if a resource&#39;s schedule changes frequently from day to day or week to week. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of resource to list allocations for (required)
     * @param startDate yyyy-mm-dd, filter allocations on/after startDate (optional)
     * @param endDate yyyy-mm-dd, filter on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;ResourceAllocationListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource allocation objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAllocationListViewModel> setupV1ResourcesIdAllocationsGetWithHttpInfo(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdAllocationsGetValidateBeforeCall(id, startDate, endDate, offset, limit, null);
        Type localVarReturnType = new TypeToken<ResourceAllocationListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Resource Allocations (asynchronously)
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resource Allocations&lt;/b&gt; for a specified resource. We recommend using allocations if a resource&#39;s schedule changes frequently from day to day or week to week. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of resource to list allocations for (required)
     * @param startDate yyyy-mm-dd, filter allocations on/after startDate (optional)
     * @param endDate yyyy-mm-dd, filter on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource allocation objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdAllocationsGetAsync(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback<ResourceAllocationListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdAllocationsGetValidateBeforeCall(id, startDate, endDate, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ResourceAllocationListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdAllocationsPost
     * @param id id of resource object (required)
     * @param resourceAllocationInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdAllocationsPostCall(String id, ResourceAllocationInputModel resourceAllocationInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceAllocationInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/allocations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdAllocationsPostValidateBeforeCall(String id, ResourceAllocationInputModel resourceAllocationInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdAllocationsPost(Async)");
        }

        return setupV1ResourcesIdAllocationsPostCall(id, resourceAllocationInputModel, _callback);

    }

    /**
     * Create Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a resource allocation for a resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;. Resource allocations can be set to specific time ranges or for the whole day by setting startTime&#x3D;0 and endTime&#x3D;2400. They can repeat for a specific date range instance or set to repeat at a specified frequency.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M &lt;/b&gt;for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY ALLOCATIONS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY ALLOCATIONS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;. You must specify the &lt;b&gt;“weekdays”&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY ALLOCATIONS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly. &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want allocated.  If monthDay&#x3D;’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of resource object (required)
     * @param resourceAllocationInputModel  (optional)
     * @return ResourceBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceBlockViewModel setupV1ResourcesIdAllocationsPost(String id, ResourceAllocationInputModel resourceAllocationInputModel) throws ApiException {
        ApiResponse<ResourceBlockViewModel> localVarResp = setupV1ResourcesIdAllocationsPostWithHttpInfo(id, resourceAllocationInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a resource allocation for a resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;. Resource allocations can be set to specific time ranges or for the whole day by setting startTime&#x3D;0 and endTime&#x3D;2400. They can repeat for a specific date range instance or set to repeat at a specified frequency.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M &lt;/b&gt;for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY ALLOCATIONS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY ALLOCATIONS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;. You must specify the &lt;b&gt;“weekdays”&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY ALLOCATIONS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly. &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want allocated.  If monthDay&#x3D;’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of resource object (required)
     * @param resourceAllocationInputModel  (optional)
     * @return ApiResponse&lt;ResourceBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceBlockViewModel> setupV1ResourcesIdAllocationsPostWithHttpInfo(String id, ResourceAllocationInputModel resourceAllocationInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdAllocationsPostValidateBeforeCall(id, resourceAllocationInputModel, null);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Allocation (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a resource allocation for a resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;. Resource allocations can be set to specific time ranges or for the whole day by setting startTime&#x3D;0 and endTime&#x3D;2400. They can repeat for a specific date range instance or set to repeat at a specified frequency.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M &lt;/b&gt;for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY ALLOCATIONS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY ALLOCATIONS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;. You must specify the &lt;b&gt;“weekdays”&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY ALLOCATIONS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly. &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want allocated.  If monthDay&#x3D;’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of resource object (required)
     * @param resourceAllocationInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdAllocationsPostAsync(String id, ResourceAllocationInputModel resourceAllocationInputModel, final ApiCallback<ResourceBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdAllocationsPostValidateBeforeCall(id, resourceAllocationInputModel, _callback);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdAvailabilityGet
     * @param id id of resource object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdAvailabilityGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/availability"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdAvailabilityGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdAvailabilityGet(Async)");
        }

        return setupV1ResourcesIdAvailabilityGetCall(id, _callback);

    }

    /**
     * List Weekly Availability
     * &lt;p&gt;Use this endpoint to view the &lt;b&gt;Weekly Availability&lt;/b&gt; for a resource. The displayed available times are represented in the resource&#39;s timezone. The resource timezone can be set to any world timezone. If not provided, by default it is set to the Business timezone.&lt;/p&gt;
     * @param id id of resource object (required)
     * @return ResourceAvailabilityViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAvailabilityViewModel setupV1ResourcesIdAvailabilityGet(String id) throws ApiException {
        ApiResponse<ResourceAvailabilityViewModel> localVarResp = setupV1ResourcesIdAvailabilityGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * List Weekly Availability
     * &lt;p&gt;Use this endpoint to view the &lt;b&gt;Weekly Availability&lt;/b&gt; for a resource. The displayed available times are represented in the resource&#39;s timezone. The resource timezone can be set to any world timezone. If not provided, by default it is set to the Business timezone.&lt;/p&gt;
     * @param id id of resource object (required)
     * @return ApiResponse&lt;ResourceAvailabilityViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAvailabilityViewModel> setupV1ResourcesIdAvailabilityGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdAvailabilityGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceAvailabilityViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Weekly Availability (asynchronously)
     * &lt;p&gt;Use this endpoint to view the &lt;b&gt;Weekly Availability&lt;/b&gt; for a resource. The displayed available times are represented in the resource&#39;s timezone. The resource timezone can be set to any world timezone. If not provided, by default it is set to the Business timezone.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdAvailabilityGetAsync(String id, final ApiCallback<ResourceAvailabilityViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdAvailabilityGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceAvailabilityViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdAvailabilityPut
     * @param id id of resource object (required)
     * @param availabilityInputModel Resource Availability Input Model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdAvailabilityPutCall(String id, AvailabilityInputModel availabilityInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = availabilityInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/availability"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdAvailabilityPutValidateBeforeCall(String id, AvailabilityInputModel availabilityInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdAvailabilityPut(Async)");
        }

        return setupV1ResourcesIdAvailabilityPutCall(id, availabilityInputModel, _callback);

    }

    /**
     * Update Weekly Availability
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; resource weekly availability. A valid &lt;b&gt;resource id&lt;/b&gt; is required. The availability day entries are created when a resource object is created.&lt;/p&gt;  &lt;p&gt;To update weekly availability hours, all days of the week must be provided. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri&lt;/b&gt; and &lt;b&gt;sat&lt;/b&gt;. The &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; fields are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. We support 24-hour availability, set startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0.&lt;/p&gt;  &lt;p&gt;If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the resource. Resources can be set to any world timezone. &lt;/p&gt;
     * @param id id of resource object (required)
     * @param availabilityInputModel Resource Availability Input Model (optional)
     * @return ResourceAvailabilityViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceAvailabilityViewModel setupV1ResourcesIdAvailabilityPut(String id, AvailabilityInputModel availabilityInputModel) throws ApiException {
        ApiResponse<ResourceAvailabilityViewModel> localVarResp = setupV1ResourcesIdAvailabilityPutWithHttpInfo(id, availabilityInputModel);
        return localVarResp.getData();
    }

    /**
     * Update Weekly Availability
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; resource weekly availability. A valid &lt;b&gt;resource id&lt;/b&gt; is required. The availability day entries are created when a resource object is created.&lt;/p&gt;  &lt;p&gt;To update weekly availability hours, all days of the week must be provided. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri&lt;/b&gt; and &lt;b&gt;sat&lt;/b&gt;. The &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; fields are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. We support 24-hour availability, set startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0.&lt;/p&gt;  &lt;p&gt;If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the resource. Resources can be set to any world timezone. &lt;/p&gt;
     * @param id id of resource object (required)
     * @param availabilityInputModel Resource Availability Input Model (optional)
     * @return ApiResponse&lt;ResourceAvailabilityViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceAvailabilityViewModel> setupV1ResourcesIdAvailabilityPutWithHttpInfo(String id, AvailabilityInputModel availabilityInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdAvailabilityPutValidateBeforeCall(id, availabilityInputModel, null);
        Type localVarReturnType = new TypeToken<ResourceAvailabilityViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Weekly Availability (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; resource weekly availability. A valid &lt;b&gt;resource id&lt;/b&gt; is required. The availability day entries are created when a resource object is created.&lt;/p&gt;  &lt;p&gt;To update weekly availability hours, all days of the week must be provided. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri&lt;/b&gt; and &lt;b&gt;sat&lt;/b&gt;. The &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; fields are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. We support 24-hour availability, set startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0.&lt;/p&gt;  &lt;p&gt;If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the resource. Resources can be set to any world timezone. &lt;/p&gt;
     * @param id id of resource object (required)
     * @param availabilityInputModel Resource Availability Input Model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdAvailabilityPutAsync(String id, AvailabilityInputModel availabilityInputModel, final ApiCallback<ResourceAvailabilityViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdAvailabilityPutValidateBeforeCall(id, availabilityInputModel, _callback);
        Type localVarReturnType = new TypeToken<ResourceAvailabilityViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdBlockPost
     * @param id id of resource object (required)
     * @param resourceBlockInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdBlockPostCall(String id, ResourceBlockInputModel resourceBlockInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceBlockInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/block"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdBlockPostValidateBeforeCall(String id, ResourceBlockInputModel resourceBlockInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdBlockPost(Async)");
        }

        return setupV1ResourcesIdBlockPostCall(id, resourceBlockInputModel, _callback);

    }

    /**
     * Create Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;Resource blocks can be set to specific time ranges or for the whole day. Use the &lt;b&gt;AllDay&lt;/b&gt; setting to create an all-day block. &lt;b&gt;AllDay&lt;/b&gt; will automatically set startTime to 0 and endTime to 2400.&lt;/p&gt;  &lt;p&gt;Resource blocks can be for a specific date range instance or set to repeat at a specified frequency. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY BLOCKS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY BLOCKS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;.  You must specify the &lt;b&gt;weekdays&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;. For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY BLOCKS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly, &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want blocked.  If monthDay&#x3D;’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of resource object (required)
     * @param resourceBlockInputModel  (optional)
     * @return ResourceBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceBlockViewModel setupV1ResourcesIdBlockPost(String id, ResourceBlockInputModel resourceBlockInputModel) throws ApiException {
        ApiResponse<ResourceBlockViewModel> localVarResp = setupV1ResourcesIdBlockPostWithHttpInfo(id, resourceBlockInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;Resource blocks can be set to specific time ranges or for the whole day. Use the &lt;b&gt;AllDay&lt;/b&gt; setting to create an all-day block. &lt;b&gt;AllDay&lt;/b&gt; will automatically set startTime to 0 and endTime to 2400.&lt;/p&gt;  &lt;p&gt;Resource blocks can be for a specific date range instance or set to repeat at a specified frequency. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY BLOCKS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY BLOCKS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;.  You must specify the &lt;b&gt;weekdays&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;. For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY BLOCKS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly, &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want blocked.  If monthDay&#x3D;’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of resource object (required)
     * @param resourceBlockInputModel  (optional)
     * @return ApiResponse&lt;ResourceBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceBlockViewModel> setupV1ResourcesIdBlockPostWithHttpInfo(String id, ResourceBlockInputModel resourceBlockInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdBlockPostValidateBeforeCall(id, resourceBlockInputModel, null);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Block (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Resource Block. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;Resource blocks can be set to specific time ranges or for the whole day. Use the &lt;b&gt;AllDay&lt;/b&gt; setting to create an all-day block. &lt;b&gt;AllDay&lt;/b&gt; will automatically set startTime to 0 and endTime to 2400.&lt;/p&gt;  &lt;p&gt;Resource blocks can be for a specific date range instance or set to repeat at a specified frequency. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY BLOCKS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY BLOCKS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;.  You must specify the &lt;b&gt;weekdays&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;. For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY BLOCKS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly, &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want blocked.  If monthDay&#x3D;’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of resource object (required)
     * @param resourceBlockInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdBlockPostAsync(String id, ResourceBlockInputModel resourceBlockInputModel, final ApiCallback<ResourceBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdBlockPostValidateBeforeCall(id, resourceBlockInputModel, _callback);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdBlocksGet
     * @param id id of resource to list blocks for (required)
     * @param startDate YYYY-MM-DD, filter blocks on/after startDate (optional)
     * @param endDate YYYY-MM-DD, filter on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource block object&#39;s </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdBlocksGetCall(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/blocks"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdBlocksGetValidateBeforeCall(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdBlocksGet(Async)");
        }

        return setupV1ResourcesIdBlocksGetCall(id, startDate, endDate, offset, limit, _callback);

    }

    /**
     * List Resource Blocks
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resource Blocks&lt;/b&gt;. A valid &lt;b&gt;resource id&lt;/b&gt; is required. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of resource to list blocks for (required)
     * @param startDate YYYY-MM-DD, filter blocks on/after startDate (optional)
     * @param endDate YYYY-MM-DD, filter on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ResourceBlockListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource block object&#39;s </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ResourceBlockListViewModel setupV1ResourcesIdBlocksGet(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ResourceBlockListViewModel> localVarResp = setupV1ResourcesIdBlocksGetWithHttpInfo(id, startDate, endDate, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Resource Blocks
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resource Blocks&lt;/b&gt;. A valid &lt;b&gt;resource id&lt;/b&gt; is required. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of resource to list blocks for (required)
     * @param startDate YYYY-MM-DD, filter blocks on/after startDate (optional)
     * @param endDate YYYY-MM-DD, filter on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;ResourceBlockListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource block object&#39;s </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceBlockListViewModel> setupV1ResourcesIdBlocksGetWithHttpInfo(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdBlocksGetValidateBeforeCall(id, startDate, endDate, offset, limit, null);
        Type localVarReturnType = new TypeToken<ResourceBlockListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Resource Blocks (asynchronously)
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resource Blocks&lt;/b&gt;. A valid &lt;b&gt;resource id&lt;/b&gt; is required. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of resource to list blocks for (required)
     * @param startDate YYYY-MM-DD, filter blocks on/after startDate (optional)
     * @param endDate YYYY-MM-DD, filter on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resource block object&#39;s </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdBlocksGetAsync(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback<ResourceBlockListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdBlocksGetValidateBeforeCall(id, startDate, endDate, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ResourceBlockListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGet
     * @param id id of resource object (required)
     * @param googleEmailAddress Email address of Google Calendar (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGetCall(String id, String googleEmailAddress, String googleAuthReturnUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/calendar/auth/google/{googleEmailAddress}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "googleEmailAddress" + "}", localVarApiClient.escapeString(googleEmailAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (googleAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("googleAuthReturnUrl", googleAuthReturnUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGetValidateBeforeCall(String id, String googleEmailAddress, String googleAuthReturnUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGet(Async)");
        }

        // verify the required parameter 'googleEmailAddress' is set
        if (googleEmailAddress == null) {
            throw new ApiException("Missing the required parameter 'googleEmailAddress' when calling setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGet(Async)");
        }

        return setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGetCall(id, googleEmailAddress, googleAuthReturnUrl, _callback);

    }

    /**
     * Get Resource Google URL
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Resources Google Calendar Authorization URL&lt;/b&gt;. A valid &lt;b&gt;resource id&lt;/b&gt; and &lt;b&gt;Google Email Address&lt;/b&gt; are required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param googleEmailAddress Email address of Google Calendar (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @return CalendarAuthViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CalendarAuthViewModel setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGet(String id, String googleEmailAddress, String googleAuthReturnUrl) throws ApiException {
        ApiResponse<CalendarAuthViewModel> localVarResp = setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGetWithHttpInfo(id, googleEmailAddress, googleAuthReturnUrl);
        return localVarResp.getData();
    }

    /**
     * Get Resource Google URL
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Resources Google Calendar Authorization URL&lt;/b&gt;. A valid &lt;b&gt;resource id&lt;/b&gt; and &lt;b&gt;Google Email Address&lt;/b&gt; are required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param googleEmailAddress Email address of Google Calendar (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @return ApiResponse&lt;CalendarAuthViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarAuthViewModel> setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGetWithHttpInfo(String id, String googleEmailAddress, String googleAuthReturnUrl) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGetValidateBeforeCall(id, googleEmailAddress, googleAuthReturnUrl, null);
        Type localVarReturnType = new TypeToken<CalendarAuthViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Resource Google URL (asynchronously)
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Resources Google Calendar Authorization URL&lt;/b&gt;. A valid &lt;b&gt;resource id&lt;/b&gt; and &lt;b&gt;Google Email Address&lt;/b&gt; are required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param googleEmailAddress Email address of Google Calendar (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGetAsync(String id, String googleEmailAddress, String googleAuthReturnUrl, final ApiCallback<CalendarAuthViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdCalendarAuthGoogleGoogleEmailAddressGetValidateBeforeCall(id, googleEmailAddress, googleAuthReturnUrl, _callback);
        Type localVarReturnType = new TypeToken<CalendarAuthViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGet
     * @param id id of resource object (required)
     * @param outlookEmailAddress Email address of Outlook Calendar (required)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGetCall(String id, String outlookEmailAddress, String outlookAuthReturnUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/calendar/auth/outlook/{outlookEmailAddress}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "outlookEmailAddress" + "}", localVarApiClient.escapeString(outlookEmailAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (outlookAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outlookAuthReturnUrl", outlookAuthReturnUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGetValidateBeforeCall(String id, String outlookEmailAddress, String outlookAuthReturnUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGet(Async)");
        }

        // verify the required parameter 'outlookEmailAddress' is set
        if (outlookEmailAddress == null) {
            throw new ApiException("Missing the required parameter 'outlookEmailAddress' when calling setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGet(Async)");
        }

        return setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGetCall(id, outlookEmailAddress, outlookAuthReturnUrl, _callback);

    }

    /**
     * Get Resource Outlook URL
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Resources Outlook Calendar Authorization URL&lt;/b&gt;. A valid &lt;b&gt;resource id&lt;/b&gt; and &lt;b&gt;Outlook Email Address&lt;/b&gt; are required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param outlookEmailAddress Email address of Outlook Calendar (required)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @return CalendarAuthViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CalendarAuthViewModel setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGet(String id, String outlookEmailAddress, String outlookAuthReturnUrl) throws ApiException {
        ApiResponse<CalendarAuthViewModel> localVarResp = setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGetWithHttpInfo(id, outlookEmailAddress, outlookAuthReturnUrl);
        return localVarResp.getData();
    }

    /**
     * Get Resource Outlook URL
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Resources Outlook Calendar Authorization URL&lt;/b&gt;. A valid &lt;b&gt;resource id&lt;/b&gt; and &lt;b&gt;Outlook Email Address&lt;/b&gt; are required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param outlookEmailAddress Email address of Outlook Calendar (required)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @return ApiResponse&lt;CalendarAuthViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarAuthViewModel> setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGetWithHttpInfo(String id, String outlookEmailAddress, String outlookAuthReturnUrl) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGetValidateBeforeCall(id, outlookEmailAddress, outlookAuthReturnUrl, null);
        Type localVarReturnType = new TypeToken<CalendarAuthViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Resource Outlook URL (asynchronously)
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Resources Outlook Calendar Authorization URL&lt;/b&gt;. A valid &lt;b&gt;resource id&lt;/b&gt; and &lt;b&gt;Outlook Email Address&lt;/b&gt; are required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param outlookEmailAddress Email address of Outlook Calendar (required)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGetAsync(String id, String outlookEmailAddress, String outlookAuthReturnUrl, final ApiCallback<CalendarAuthViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdCalendarAuthOutlookOutlookEmailAddressGetValidateBeforeCall(id, outlookEmailAddress, outlookAuthReturnUrl, _callback);
        Type localVarReturnType = new TypeToken<CalendarAuthViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdDelete
     * @param id id of resource object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdDelete(Async)");
        }

        return setupV1ResourcesIdDeleteCall(id, _callback);

    }

    /**
     * Delete Resource
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a resource. The resource is not permanently deleted and can be recovered. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @return ResourceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceViewModel setupV1ResourcesIdDelete(String id) throws ApiException {
        ApiResponse<ResourceViewModel> localVarResp = setupV1ResourcesIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Resource
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a resource. The resource is not permanently deleted and can be recovered. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @return ApiResponse&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceViewModel> setupV1ResourcesIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Resource (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a resource. The resource is not permanently deleted and can be recovered. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdDeleteAsync(String id, final ApiCallback<ResourceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdDeleteimageDelete
     * @param id id of resource object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdDeleteimageDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/deleteimage"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdDeleteimageDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdDeleteimageDelete(Async)");
        }

        return setupV1ResourcesIdDeleteimageDeleteCall(id, _callback);

    }

    /**
     * Delete Resource Image
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a previously uploaded resource image. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @return ResourceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceViewModel setupV1ResourcesIdDeleteimageDelete(String id) throws ApiException {
        ApiResponse<ResourceViewModel> localVarResp = setupV1ResourcesIdDeleteimageDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Resource Image
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a previously uploaded resource image. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @return ApiResponse&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceViewModel> setupV1ResourcesIdDeleteimageDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdDeleteimageDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Resource Image (asynchronously)
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a previously uploaded resource image. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdDeleteimageDeleteAsync(String id, final ApiCallback<ResourceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdDeleteimageDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdGet
     * @param id id of resource object (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdGetCall(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (googleAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("googleAuthReturnUrl", googleAuthReturnUrl));
        }

        if (outlookAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outlookAuthReturnUrl", outlookAuthReturnUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdGetValidateBeforeCall(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdGet(Async)");
        }

        return setupV1ResourcesIdGetCall(id, googleAuthReturnUrl, outlookAuthReturnUrl, _callback);

    }

    /**
     * Get Resource
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource&lt;/b&gt; object. A valid &lt;b&gt;resource id&lt;/b&gt; is required. Find resource id&#39;s by using the: &lt;i&gt;GET /setup/v1/resources&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @return ResourceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceViewModel setupV1ResourcesIdGet(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl) throws ApiException {
        ApiResponse<ResourceViewModel> localVarResp = setupV1ResourcesIdGetWithHttpInfo(id, googleAuthReturnUrl, outlookAuthReturnUrl);
        return localVarResp.getData();
    }

    /**
     * Get Resource
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource&lt;/b&gt; object. A valid &lt;b&gt;resource id&lt;/b&gt; is required. Find resource id&#39;s by using the: &lt;i&gt;GET /setup/v1/resources&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @return ApiResponse&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceViewModel> setupV1ResourcesIdGetWithHttpInfo(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdGetValidateBeforeCall(id, googleAuthReturnUrl, outlookAuthReturnUrl, null);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Resource (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Resource&lt;/b&gt; object. A valid &lt;b&gt;resource id&lt;/b&gt; is required. Find resource id&#39;s by using the: &lt;i&gt;GET /setup/v1/resources&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdGetAsync(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl, final ApiCallback<ResourceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdGetValidateBeforeCall(id, googleAuthReturnUrl, outlookAuthReturnUrl, _callback);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdPut
     * @param id id of resource object (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourceUpdateModel Resource Update Model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdPutCall(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourceUpdateModel resourceUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (googleAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("googleAuthReturnUrl", googleAuthReturnUrl));
        }

        if (outlookAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outlookAuthReturnUrl", outlookAuthReturnUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdPutValidateBeforeCall(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourceUpdateModel resourceUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdPut(Async)");
        }

        return setupV1ResourcesIdPutCall(id, googleAuthReturnUrl, outlookAuthReturnUrl, resourceUpdateModel, _callback);

    }

    /**
     * Update Resource
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourceUpdateModel Resource Update Model (optional)
     * @return ResourceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceViewModel setupV1ResourcesIdPut(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourceUpdateModel resourceUpdateModel) throws ApiException {
        ApiResponse<ResourceViewModel> localVarResp = setupV1ResourcesIdPutWithHttpInfo(id, googleAuthReturnUrl, outlookAuthReturnUrl, resourceUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Resource
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourceUpdateModel Resource Update Model (optional)
     * @return ApiResponse&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceViewModel> setupV1ResourcesIdPutWithHttpInfo(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourceUpdateModel resourceUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdPutValidateBeforeCall(id, googleAuthReturnUrl, outlookAuthReturnUrl, resourceUpdateModel, null);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Resource (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourceUpdateModel Resource Update Model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdPutAsync(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourceUpdateModel resourceUpdateModel, final ApiCallback<ResourceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdPutValidateBeforeCall(id, googleAuthReturnUrl, outlookAuthReturnUrl, resourceUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdReassignAppointmentsResourceIdPut
     * @param id id of the original resource (required)
     * @param resourceId id of the target resource (required)
     * @param startDate YYYY-MM-DD, Appt range start date (optional)
     * @param endDate YYYY-MM-DD, Appt range end date (optional)
     * @param calendarId CalendarId of calendar containing appointments (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdReassignAppointmentsResourceIdPutCall(String id, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, String calendarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/reassign/appointments/{resourceId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (calendarId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calendarId", calendarId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdReassignAppointmentsResourceIdPutValidateBeforeCall(String id, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, String calendarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdReassignAppointmentsResourceIdPut(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling setupV1ResourcesIdReassignAppointmentsResourceIdPut(Async)");
        }

        return setupV1ResourcesIdReassignAppointmentsResourceIdPutCall(id, resourceId, startDate, endDate, calendarId, _callback);

    }

    /**
     * Reassign Resource
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reassign&lt;/b&gt; appointments from one resource to another. If the startDate is not supplied, the default is today&#39;s date + 1 day; If the endDate is not supplied, all future appointments from the start date will be reassigned. If the calendar id is not supplied the default is the primary calendar of the location.&lt;/p&gt;
     * @param id id of the original resource (required)
     * @param resourceId id of the target resource (required)
     * @param startDate YYYY-MM-DD, Appt range start date (optional)
     * @param endDate YYYY-MM-DD, Appt range end date (optional)
     * @param calendarId CalendarId of calendar containing appointments (optional)
     * @return List&lt;AppointmentViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AppointmentViewModel> setupV1ResourcesIdReassignAppointmentsResourceIdPut(String id, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, String calendarId) throws ApiException {
        ApiResponse<List<AppointmentViewModel>> localVarResp = setupV1ResourcesIdReassignAppointmentsResourceIdPutWithHttpInfo(id, resourceId, startDate, endDate, calendarId);
        return localVarResp.getData();
    }

    /**
     * Reassign Resource
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reassign&lt;/b&gt; appointments from one resource to another. If the startDate is not supplied, the default is today&#39;s date + 1 day; If the endDate is not supplied, all future appointments from the start date will be reassigned. If the calendar id is not supplied the default is the primary calendar of the location.&lt;/p&gt;
     * @param id id of the original resource (required)
     * @param resourceId id of the target resource (required)
     * @param startDate YYYY-MM-DD, Appt range start date (optional)
     * @param endDate YYYY-MM-DD, Appt range end date (optional)
     * @param calendarId CalendarId of calendar containing appointments (optional)
     * @return ApiResponse&lt;List&lt;AppointmentViewModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppointmentViewModel>> setupV1ResourcesIdReassignAppointmentsResourceIdPutWithHttpInfo(String id, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, String calendarId) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdReassignAppointmentsResourceIdPutValidateBeforeCall(id, resourceId, startDate, endDate, calendarId, null);
        Type localVarReturnType = new TypeToken<List<AppointmentViewModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reassign Resource (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reassign&lt;/b&gt; appointments from one resource to another. If the startDate is not supplied, the default is today&#39;s date + 1 day; If the endDate is not supplied, all future appointments from the start date will be reassigned. If the calendar id is not supplied the default is the primary calendar of the location.&lt;/p&gt;
     * @param id id of the original resource (required)
     * @param resourceId id of the target resource (required)
     * @param startDate YYYY-MM-DD, Appt range start date (optional)
     * @param endDate YYYY-MM-DD, Appt range end date (optional)
     * @param calendarId CalendarId of calendar containing appointments (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdReassignAppointmentsResourceIdPutAsync(String id, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, String calendarId, final ApiCallback<List<AppointmentViewModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdReassignAppointmentsResourceIdPutValidateBeforeCall(id, resourceId, startDate, endDate, calendarId, _callback);
        Type localVarReturnType = new TypeToken<List<AppointmentViewModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdRecoverPut
     * @param id id of resource object (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdRecoverPutCall(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/recover"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (googleAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("googleAuthReturnUrl", googleAuthReturnUrl));
        }

        if (outlookAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outlookAuthReturnUrl", outlookAuthReturnUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdRecoverPutValidateBeforeCall(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdRecoverPut(Async)");
        }

        return setupV1ResourcesIdRecoverPutCall(id, googleAuthReturnUrl, outlookAuthReturnUrl, _callback);

    }

    /**
     * Recover Resource
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @return ResourceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceViewModel setupV1ResourcesIdRecoverPut(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl) throws ApiException {
        ApiResponse<ResourceViewModel> localVarResp = setupV1ResourcesIdRecoverPutWithHttpInfo(id, googleAuthReturnUrl, outlookAuthReturnUrl);
        return localVarResp.getData();
    }

    /**
     * Recover Resource
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @return ApiResponse&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceViewModel> setupV1ResourcesIdRecoverPutWithHttpInfo(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdRecoverPutValidateBeforeCall(id, googleAuthReturnUrl, outlookAuthReturnUrl, null);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recover Resource (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdRecoverPutAsync(String id, String googleAuthReturnUrl, String outlookAuthReturnUrl, final ApiCallback<ResourceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdRecoverPutValidateBeforeCall(id, googleAuthReturnUrl, outlookAuthReturnUrl, _callback);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdServicesDelete
     * @param id id of resource object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdServicesDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/services"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdServicesDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdServicesDelete(Async)");
        }

        return setupV1ResourcesIdServicesDeleteCall(id, _callback);

    }

    /**
     * Delete Linked Services
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; linked services from a Resource, i.e. unlink the services. A valid &lt;b&gt;resource id&lt;/b&gt; is required. Once deleted, all services become available to the resource.&lt;/p&gt;
     * @param id id of resource object (required)
     * @return ResourceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceViewModel setupV1ResourcesIdServicesDelete(String id) throws ApiException {
        ApiResponse<ResourceViewModel> localVarResp = setupV1ResourcesIdServicesDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Linked Services
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; linked services from a Resource, i.e. unlink the services. A valid &lt;b&gt;resource id&lt;/b&gt; is required. Once deleted, all services become available to the resource.&lt;/p&gt;
     * @param id id of resource object (required)
     * @return ApiResponse&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceViewModel> setupV1ResourcesIdServicesDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdServicesDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Linked Services (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; linked services from a Resource, i.e. unlink the services. A valid &lt;b&gt;resource id&lt;/b&gt; is required. Once deleted, all services become available to the resource.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdServicesDeleteAsync(String id, final ApiCallback<ResourceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdServicesDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdServicesPost
     * @param id id of resource object (required)
     * @param requestBody Array of valid service object id&#39;s (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdServicesPostCall(String id, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/services"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdServicesPostValidateBeforeCall(String id, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdServicesPost(Async)");
        }

        return setupV1ResourcesIdServicesPostCall(id, requestBody, _callback);

    }

    /**
     * Create Linked Services
     * &lt;p&gt;Use this endpoint to explicitly &lt;b&gt;Link Services&lt;/b&gt; to a Resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Note:&lt;/b&gt; By default, the services array is empty which signifies that all services are provided by the resource. Linking services here will add to the linked service(s) array available to this resource. This will limit the services available to the resource.&lt;/p&gt;  &lt;p&gt;You cannot post services that already exist in the array, you can only add new ones. Use the &lt;i&gt;PUT ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint to update the entire list.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param requestBody Array of valid service object id&#39;s (optional)
     * @return ResourceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceViewModel setupV1ResourcesIdServicesPost(String id, List<String> requestBody) throws ApiException {
        ApiResponse<ResourceViewModel> localVarResp = setupV1ResourcesIdServicesPostWithHttpInfo(id, requestBody);
        return localVarResp.getData();
    }

    /**
     * Create Linked Services
     * &lt;p&gt;Use this endpoint to explicitly &lt;b&gt;Link Services&lt;/b&gt; to a Resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Note:&lt;/b&gt; By default, the services array is empty which signifies that all services are provided by the resource. Linking services here will add to the linked service(s) array available to this resource. This will limit the services available to the resource.&lt;/p&gt;  &lt;p&gt;You cannot post services that already exist in the array, you can only add new ones. Use the &lt;i&gt;PUT ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint to update the entire list.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param requestBody Array of valid service object id&#39;s (optional)
     * @return ApiResponse&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceViewModel> setupV1ResourcesIdServicesPostWithHttpInfo(String id, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdServicesPostValidateBeforeCall(id, requestBody, null);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Linked Services (asynchronously)
     * &lt;p&gt;Use this endpoint to explicitly &lt;b&gt;Link Services&lt;/b&gt; to a Resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Note:&lt;/b&gt; By default, the services array is empty which signifies that all services are provided by the resource. Linking services here will add to the linked service(s) array available to this resource. This will limit the services available to the resource.&lt;/p&gt;  &lt;p&gt;You cannot post services that already exist in the array, you can only add new ones. Use the &lt;i&gt;PUT ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint to update the entire list.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param requestBody Array of valid service object id&#39;s (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdServicesPostAsync(String id, List<String> requestBody, final ApiCallback<ResourceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdServicesPostValidateBeforeCall(id, requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdServicesPut
     * @param id id of resource object (required)
     * @param requestBody Array of valid service object id&#39;s (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdServicesPutCall(String id, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/services"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdServicesPutValidateBeforeCall(String id, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdServicesPut(Async)");
        }

        return setupV1ResourcesIdServicesPutCall(id, requestBody, _callback);

    }

    /**
     * Update Linked Services
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; the linked services of a Resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Updating services with this endpoint will update the linked services available to the resource. Only those services will be available to the resource.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Note:&lt;/b&gt; This is a destructive process, any existing linked services will be removed and replaced with the list of services supplied here. Provide the resources complete list of services when using this endpoint.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param requestBody Array of valid service object id&#39;s (optional)
     * @return ResourceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceViewModel setupV1ResourcesIdServicesPut(String id, List<String> requestBody) throws ApiException {
        ApiResponse<ResourceViewModel> localVarResp = setupV1ResourcesIdServicesPutWithHttpInfo(id, requestBody);
        return localVarResp.getData();
    }

    /**
     * Update Linked Services
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; the linked services of a Resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Updating services with this endpoint will update the linked services available to the resource. Only those services will be available to the resource.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Note:&lt;/b&gt; This is a destructive process, any existing linked services will be removed and replaced with the list of services supplied here. Provide the resources complete list of services when using this endpoint.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param requestBody Array of valid service object id&#39;s (optional)
     * @return ApiResponse&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceViewModel> setupV1ResourcesIdServicesPutWithHttpInfo(String id, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdServicesPutValidateBeforeCall(id, requestBody, null);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Linked Services (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; the linked services of a Resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Updating services with this endpoint will update the linked services available to the resource. Only those services will be available to the resource.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Note:&lt;/b&gt; This is a destructive process, any existing linked services will be removed and replaced with the list of services supplied here. Provide the resources complete list of services when using this endpoint.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param requestBody Array of valid service object id&#39;s (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdServicesPutAsync(String id, List<String> requestBody, final ApiCallback<ResourceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdServicesPutValidateBeforeCall(id, requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesIdUploadimagePost
     * @param id id of resource object (required)
     * @param resourceImageInputModel Input model for image upload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdUploadimagePostCall(String id, ResourceImageInputModel resourceImageInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceImageInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/{id}/uploadimage"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesIdUploadimagePostValidateBeforeCall(String id, ResourceImageInputModel resourceImageInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ResourcesIdUploadimagePost(Async)");
        }

        return setupV1ResourcesIdUploadimagePostCall(id, resourceImageInputModel, _callback);

    }

    /**
     * Upload Resource Image
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Upload&lt;/b&gt; a resource image to the resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required. You must convert the image to a &lt;b&gt;base64 encoded string&lt;/b&gt; and pass that string as input along with your &lt;b&gt;filename&lt;/b&gt;.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param resourceImageInputModel Input model for image upload (optional)
     * @return ResourceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceViewModel setupV1ResourcesIdUploadimagePost(String id, ResourceImageInputModel resourceImageInputModel) throws ApiException {
        ApiResponse<ResourceViewModel> localVarResp = setupV1ResourcesIdUploadimagePostWithHttpInfo(id, resourceImageInputModel);
        return localVarResp.getData();
    }

    /**
     * Upload Resource Image
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Upload&lt;/b&gt; a resource image to the resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required. You must convert the image to a &lt;b&gt;base64 encoded string&lt;/b&gt; and pass that string as input along with your &lt;b&gt;filename&lt;/b&gt;.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param resourceImageInputModel Input model for image upload (optional)
     * @return ApiResponse&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceViewModel> setupV1ResourcesIdUploadimagePostWithHttpInfo(String id, ResourceImageInputModel resourceImageInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesIdUploadimagePostValidateBeforeCall(id, resourceImageInputModel, null);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload Resource Image (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Upload&lt;/b&gt; a resource image to the resource. A valid &lt;b&gt;resource id&lt;/b&gt; is required. You must convert the image to a &lt;b&gt;base64 encoded string&lt;/b&gt; and pass that string as input along with your &lt;b&gt;filename&lt;/b&gt;.&lt;/p&gt;
     * @param id id of resource object (required)
     * @param resourceImageInputModel Input model for image upload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesIdUploadimagePostAsync(String id, ResourceImageInputModel resourceImageInputModel, final ApiCallback<ResourceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesIdUploadimagePostValidateBeforeCall(id, resourceImageInputModel, _callback);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesPost
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourceInputModel Resource input model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesPostCall(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourceInputModel resourceInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (googleAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("googleAuthReturnUrl", googleAuthReturnUrl));
        }

        if (outlookAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outlookAuthReturnUrl", outlookAuthReturnUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesPostValidateBeforeCall(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourceInputModel resourceInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1ResourcesPostCall(googleAuthReturnUrl, outlookAuthReturnUrl, resourceInputModel, _callback);

    }

    /**
     * Create Resource
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new resource.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourceInputModel Resource input model (optional)
     * @return ResourceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceViewModel setupV1ResourcesPost(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourceInputModel resourceInputModel) throws ApiException {
        ApiResponse<ResourceViewModel> localVarResp = setupV1ResourcesPostWithHttpInfo(googleAuthReturnUrl, outlookAuthReturnUrl, resourceInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Resource
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new resource.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourceInputModel Resource input model (optional)
     * @return ApiResponse&lt;ResourceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceViewModel> setupV1ResourcesPostWithHttpInfo(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourceInputModel resourceInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesPostValidateBeforeCall(googleAuthReturnUrl, outlookAuthReturnUrl, resourceInputModel, null);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Resource (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new resource.&lt;/p&gt;  &lt;p&gt;Required Fields: &lt;b&gt;Email Address&lt;/b&gt; and &lt;b&gt;Name&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Providing a single or many serviceId(s) in the service array will result the resource explicitly being available to provide those services only. While passing in an empty array will result in all services being available to the resources. This includes all company and business scoped services. See the &lt;i&gt;POST ​/setup​/v1​/resources​/{id}​/services&lt;/i&gt; endpoint for details about explicitly linking services.&lt;/p&gt;  &lt;p&gt;Set the resource availability type by using the &lt;b&gt;recurringAvailability&lt;/b&gt; flag. Set recurringAvailability to &lt;b&gt;True&lt;/b&gt; for &lt;b&gt;Weekly Availability&lt;/b&gt; or &lt;b&gt;False&lt;/b&gt; for &lt;b&gt;Resource Allocations&lt;/b&gt;.&lt;/p&gt;
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param resourceInputModel Resource input model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesPostAsync(String googleAuthReturnUrl, String outlookAuthReturnUrl, ResourceInputModel resourceInputModel, final ApiCallback<ResourceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesPostValidateBeforeCall(googleAuthReturnUrl, outlookAuthReturnUrl, resourceInputModel, _callback);
        Type localVarReturnType = new TypeToken<ResourceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ResourcesTimezonesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesTimezonesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/resources/timezones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ResourcesTimezonesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return setupV1ResourcesTimezonesGetCall(_callback);

    }

    /**
     * Get Time Zones
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Time Zones&lt;/b&gt;.&lt;/p&gt;
     * @return SystemTimezoneViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SystemTimezoneViewModel setupV1ResourcesTimezonesGet() throws ApiException {
        ApiResponse<SystemTimezoneViewModel> localVarResp = setupV1ResourcesTimezonesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Time Zones
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Time Zones&lt;/b&gt;.&lt;/p&gt;
     * @return ApiResponse&lt;SystemTimezoneViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SystemTimezoneViewModel> setupV1ResourcesTimezonesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = setupV1ResourcesTimezonesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SystemTimezoneViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Time Zones (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Time Zones&lt;/b&gt;.&lt;/p&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ResourcesTimezonesGetAsync(final ApiCallback<SystemTimezoneViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ResourcesTimezonesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SystemTimezoneViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
