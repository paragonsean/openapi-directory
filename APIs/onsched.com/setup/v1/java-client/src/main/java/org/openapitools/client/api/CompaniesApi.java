/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CompanyDomainInputModel;
import org.openapitools.client.model.CompanyDomainListViewModel;
import org.openapitools.client.model.CompanyDomainUpdateModel;
import org.openapitools.client.model.CompanyDomainViewModel;
import org.openapitools.client.model.CompanyInputModel;
import org.openapitools.client.model.CompanyUpdateModel;
import org.openapitools.client.model.CompanyViewModel;
import org.openapitools.client.model.ContentResult;
import org.openapitools.client.model.EmailTemplateListViewModel;
import org.openapitools.client.model.MasterEmailTemplateSettingsViewModel;
import org.openapitools.client.model.MasterTemplateSettingsInputModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RegionInputModel;
import org.openapitools.client.model.RegionListViewModel;
import org.openapitools.client.model.RegionUpdateModel;
import org.openapitools.client.model.RegionViewModel;
import org.openapitools.client.model.TimezoneViewModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompaniesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompaniesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompaniesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for setupV1CompaniesDomainsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesDomainsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesDomainsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return setupV1CompaniesDomainsGetCall(_callback);

    }

    /**
     * List Company Domains
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Company Domains&lt;/b&gt; for the authorized company. To share the OnSchedJS booking widget on your website or in your application your domain must be listed.&lt;/p&gt;
     * @return CompanyDomainListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CompanyDomainListViewModel setupV1CompaniesDomainsGet() throws ApiException {
        ApiResponse<CompanyDomainListViewModel> localVarResp = setupV1CompaniesDomainsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Company Domains
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Company Domains&lt;/b&gt; for the authorized company. To share the OnSchedJS booking widget on your website or in your application your domain must be listed.&lt;/p&gt;
     * @return ApiResponse&lt;CompanyDomainListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyDomainListViewModel> setupV1CompaniesDomainsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesDomainsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CompanyDomainListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Company Domains (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Company Domains&lt;/b&gt; for the authorized company. To share the OnSchedJS booking widget on your website or in your application your domain must be listed.&lt;/p&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesDomainsGetAsync(final ApiCallback<CompanyDomainListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesDomainsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CompanyDomainListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesDomainsIdDelete
     * @param id id of companyDomain object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesDomainsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/domains/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesDomainsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CompaniesDomainsIdDelete(Async)");
        }

        return setupV1CompaniesDomainsIdDeleteCall(id, _callback);

    }

    /**
     * Delete Company Domain
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; an OnSchedJs domain from your authorized company. A valid &lt;b&gt;companyDomain id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of companyDomain object (required)
     * @return CompanyDomainViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CompanyDomainViewModel setupV1CompaniesDomainsIdDelete(String id) throws ApiException {
        ApiResponse<CompanyDomainViewModel> localVarResp = setupV1CompaniesDomainsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Company Domain
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; an OnSchedJs domain from your authorized company. A valid &lt;b&gt;companyDomain id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of companyDomain object (required)
     * @return ApiResponse&lt;CompanyDomainViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyDomainViewModel> setupV1CompaniesDomainsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesDomainsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CompanyDomainViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Company Domain (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; an OnSchedJs domain from your authorized company. A valid &lt;b&gt;companyDomain id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of companyDomain object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesDomainsIdDeleteAsync(String id, final ApiCallback<CompanyDomainViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesDomainsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CompanyDomainViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesDomainsIdGet
     * @param id id of companyDomain object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesDomainsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/domains/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesDomainsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CompaniesDomainsIdGet(Async)");
        }

        return setupV1CompaniesDomainsIdGetCall(id, _callback);

    }

    /**
     * Get Company Domain
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Company Domain&lt;/b&gt; object. A valid &lt;b&gt;companyDomain id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of companyDomain object (required)
     * @return CompanyDomainViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CompanyDomainViewModel setupV1CompaniesDomainsIdGet(String id) throws ApiException {
        ApiResponse<CompanyDomainViewModel> localVarResp = setupV1CompaniesDomainsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Company Domain
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Company Domain&lt;/b&gt; object. A valid &lt;b&gt;companyDomain id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of companyDomain object (required)
     * @return ApiResponse&lt;CompanyDomainViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyDomainViewModel> setupV1CompaniesDomainsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesDomainsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CompanyDomainViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Company Domain (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Company Domain&lt;/b&gt; object. A valid &lt;b&gt;companyDomain id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of companyDomain object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesDomainsIdGetAsync(String id, final ApiCallback<CompanyDomainViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesDomainsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CompanyDomainViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesDomainsIdPut
     * @param id id of companyDomain object (required)
     * @param companyDomainUpdateModel Company Domain Update Model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesDomainsIdPutCall(String id, CompanyDomainUpdateModel companyDomainUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companyDomainUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/domains/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesDomainsIdPutValidateBeforeCall(String id, CompanyDomainUpdateModel companyDomainUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CompaniesDomainsIdPut(Async)");
        }

        return setupV1CompaniesDomainsIdPutCall(id, companyDomainUpdateModel, _callback);

    }

    /**
     * Update Company Domain
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; an OnSchedJs domain for your authorized company. A valid &lt;b&gt;companyDomain id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of companyDomain object (required)
     * @param companyDomainUpdateModel Company Domain Update Model (optional)
     * @return CompanyDomainViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CompanyDomainViewModel setupV1CompaniesDomainsIdPut(String id, CompanyDomainUpdateModel companyDomainUpdateModel) throws ApiException {
        ApiResponse<CompanyDomainViewModel> localVarResp = setupV1CompaniesDomainsIdPutWithHttpInfo(id, companyDomainUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Company Domain
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; an OnSchedJs domain for your authorized company. A valid &lt;b&gt;companyDomain id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of companyDomain object (required)
     * @param companyDomainUpdateModel Company Domain Update Model (optional)
     * @return ApiResponse&lt;CompanyDomainViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyDomainViewModel> setupV1CompaniesDomainsIdPutWithHttpInfo(String id, CompanyDomainUpdateModel companyDomainUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesDomainsIdPutValidateBeforeCall(id, companyDomainUpdateModel, null);
        Type localVarReturnType = new TypeToken<CompanyDomainViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Company Domain (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; an OnSchedJs domain for your authorized company. A valid &lt;b&gt;companyDomain id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of companyDomain object (required)
     * @param companyDomainUpdateModel Company Domain Update Model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesDomainsIdPutAsync(String id, CompanyDomainUpdateModel companyDomainUpdateModel, final ApiCallback<CompanyDomainViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesDomainsIdPutValidateBeforeCall(id, companyDomainUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<CompanyDomainViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesDomainsPost
     * @param companyDomainInputModel Company Domain Input Model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesDomainsPostCall(CompanyDomainInputModel companyDomainInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companyDomainInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesDomainsPostValidateBeforeCall(CompanyDomainInputModel companyDomainInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1CompaniesDomainsPostCall(companyDomainInputModel, _callback);

    }

    /**
     * Create Company Domain
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; an OnSchedJs domain for your authorized company. To share the OnSchedJS booking widget on your website or in your application you must add the domain.&lt;/p&gt;
     * @param companyDomainInputModel Company Domain Input Model (optional)
     * @return CompanyDomainViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CompanyDomainViewModel setupV1CompaniesDomainsPost(CompanyDomainInputModel companyDomainInputModel) throws ApiException {
        ApiResponse<CompanyDomainViewModel> localVarResp = setupV1CompaniesDomainsPostWithHttpInfo(companyDomainInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Company Domain
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; an OnSchedJs domain for your authorized company. To share the OnSchedJS booking widget on your website or in your application you must add the domain.&lt;/p&gt;
     * @param companyDomainInputModel Company Domain Input Model (optional)
     * @return ApiResponse&lt;CompanyDomainViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyDomainViewModel> setupV1CompaniesDomainsPostWithHttpInfo(CompanyDomainInputModel companyDomainInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesDomainsPostValidateBeforeCall(companyDomainInputModel, null);
        Type localVarReturnType = new TypeToken<CompanyDomainViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Company Domain (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; an OnSchedJs domain for your authorized company. To share the OnSchedJS booking widget on your website or in your application you must add the domain.&lt;/p&gt;
     * @param companyDomainInputModel Company Domain Input Model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesDomainsPostAsync(CompanyDomainInputModel companyDomainInputModel, final ApiCallback<CompanyDomainViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesDomainsPostValidateBeforeCall(companyDomainInputModel, _callback);
        Type localVarReturnType = new TypeToken<CompanyDomainViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesEmailTemplatesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesEmailTemplatesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/email/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesEmailTemplatesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return setupV1CompaniesEmailTemplatesGetCall(_callback);

    }

    /**
     * List Email Templates
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Email Templates&lt;/b&gt; that are provided and may be customized. If the template has been customized, the customized property is true. The scope parameter indicates if the email template has been customized at the Business Location level or Company level. This endpoint returns &lt;b&gt;only company level templates&lt;/b&gt;, so the scope is always company.&lt;/p&gt;
     * @return EmailTemplateListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EmailTemplateListViewModel setupV1CompaniesEmailTemplatesGet() throws ApiException {
        ApiResponse<EmailTemplateListViewModel> localVarResp = setupV1CompaniesEmailTemplatesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Email Templates
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Email Templates&lt;/b&gt; that are provided and may be customized. If the template has been customized, the customized property is true. The scope parameter indicates if the email template has been customized at the Business Location level or Company level. This endpoint returns &lt;b&gt;only company level templates&lt;/b&gt;, so the scope is always company.&lt;/p&gt;
     * @return ApiResponse&lt;EmailTemplateListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailTemplateListViewModel> setupV1CompaniesEmailTemplatesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesEmailTemplatesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EmailTemplateListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Email Templates (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Email Templates&lt;/b&gt; that are provided and may be customized. If the template has been customized, the customized property is true. The scope parameter indicates if the email template has been customized at the Business Location level or Company level. This endpoint returns &lt;b&gt;only company level templates&lt;/b&gt;, so the scope is always company.&lt;/p&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesEmailTemplatesGetAsync(final ApiCallback<EmailTemplateListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesEmailTemplatesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EmailTemplateListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesEmailTemplatesMasterDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesEmailTemplatesMasterDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/email/templates/master";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesEmailTemplatesMasterDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return setupV1CompaniesEmailTemplatesMasterDeleteCall(_callback);

    }

    /**
     * Delete Master Template Settings
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete Custom Master Email Template Settings&lt;/b&gt;. Deleting a custom master email template setting will reactivate the original default OnSched template settings.&lt;/p&gt;
     * @return MasterEmailTemplateSettingsViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public MasterEmailTemplateSettingsViewModel setupV1CompaniesEmailTemplatesMasterDelete() throws ApiException {
        ApiResponse<MasterEmailTemplateSettingsViewModel> localVarResp = setupV1CompaniesEmailTemplatesMasterDeleteWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Delete Master Template Settings
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete Custom Master Email Template Settings&lt;/b&gt;. Deleting a custom master email template setting will reactivate the original default OnSched template settings.&lt;/p&gt;
     * @return ApiResponse&lt;MasterEmailTemplateSettingsViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MasterEmailTemplateSettingsViewModel> setupV1CompaniesEmailTemplatesMasterDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesEmailTemplatesMasterDeleteValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MasterEmailTemplateSettingsViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Master Template Settings (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete Custom Master Email Template Settings&lt;/b&gt;. Deleting a custom master email template setting will reactivate the original default OnSched template settings.&lt;/p&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesEmailTemplatesMasterDeleteAsync(final ApiCallback<MasterEmailTemplateSettingsViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesEmailTemplatesMasterDeleteValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MasterEmailTemplateSettingsViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesEmailTemplatesMasterGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesEmailTemplatesMasterGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/email/templates/master";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesEmailTemplatesMasterGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return setupV1CompaniesEmailTemplatesMasterGetCall(_callback);

    }

    /**
     * Get Master Template Settings
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Master Email Template Settings&lt;/b&gt;. Settings exist for showing or hiding email panels and for changing color schemes. &lt;/p&gt;
     * @return MasterEmailTemplateSettingsViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public MasterEmailTemplateSettingsViewModel setupV1CompaniesEmailTemplatesMasterGet() throws ApiException {
        ApiResponse<MasterEmailTemplateSettingsViewModel> localVarResp = setupV1CompaniesEmailTemplatesMasterGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Master Template Settings
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Master Email Template Settings&lt;/b&gt;. Settings exist for showing or hiding email panels and for changing color schemes. &lt;/p&gt;
     * @return ApiResponse&lt;MasterEmailTemplateSettingsViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MasterEmailTemplateSettingsViewModel> setupV1CompaniesEmailTemplatesMasterGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesEmailTemplatesMasterGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MasterEmailTemplateSettingsViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Master Template Settings (asynchronously)
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Master Email Template Settings&lt;/b&gt;. Settings exist for showing or hiding email panels and for changing color schemes. &lt;/p&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesEmailTemplatesMasterGetAsync(final ApiCallback<MasterEmailTemplateSettingsViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesEmailTemplatesMasterGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MasterEmailTemplateSettingsViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesEmailTemplatesMasterPost
     * @param masterTemplateSettingsInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesEmailTemplatesMasterPostCall(MasterTemplateSettingsInputModel masterTemplateSettingsInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = masterTemplateSettingsInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/email/templates/master";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesEmailTemplatesMasterPostValidateBeforeCall(MasterTemplateSettingsInputModel masterTemplateSettingsInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1CompaniesEmailTemplatesMasterPostCall(masterTemplateSettingsInputModel, _callback);

    }

    /**
     * Create Master Template Settings
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create Custom Master Email Template Settings&lt;/b&gt;. Settings exist for showing or hiding email panels and for changing color schemes. Use the &lt;i&gt;GET ​/setup​/v1​/companies​/email​/templates&lt;/i&gt; endpoint to display the settings offered. Changes to the Master Template Settings will be reflected in all business locations associated with this company. &lt;/p&gt;  &lt;p&gt;The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new custom Master Template Settings file that will be used instead. If you delete it you are deleting the custom template settings you created and the original default Master Template created by OnSched would be reactivated.&lt;/p&gt;
     * @param masterTemplateSettingsInputModel  (optional)
     * @return MasterEmailTemplateSettingsViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public MasterEmailTemplateSettingsViewModel setupV1CompaniesEmailTemplatesMasterPost(MasterTemplateSettingsInputModel masterTemplateSettingsInputModel) throws ApiException {
        ApiResponse<MasterEmailTemplateSettingsViewModel> localVarResp = setupV1CompaniesEmailTemplatesMasterPostWithHttpInfo(masterTemplateSettingsInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Master Template Settings
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create Custom Master Email Template Settings&lt;/b&gt;. Settings exist for showing or hiding email panels and for changing color schemes. Use the &lt;i&gt;GET ​/setup​/v1​/companies​/email​/templates&lt;/i&gt; endpoint to display the settings offered. Changes to the Master Template Settings will be reflected in all business locations associated with this company. &lt;/p&gt;  &lt;p&gt;The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new custom Master Template Settings file that will be used instead. If you delete it you are deleting the custom template settings you created and the original default Master Template created by OnSched would be reactivated.&lt;/p&gt;
     * @param masterTemplateSettingsInputModel  (optional)
     * @return ApiResponse&lt;MasterEmailTemplateSettingsViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MasterEmailTemplateSettingsViewModel> setupV1CompaniesEmailTemplatesMasterPostWithHttpInfo(MasterTemplateSettingsInputModel masterTemplateSettingsInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesEmailTemplatesMasterPostValidateBeforeCall(masterTemplateSettingsInputModel, null);
        Type localVarReturnType = new TypeToken<MasterEmailTemplateSettingsViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Master Template Settings (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create Custom Master Email Template Settings&lt;/b&gt;. Settings exist for showing or hiding email panels and for changing color schemes. Use the &lt;i&gt;GET ​/setup​/v1​/companies​/email​/templates&lt;/i&gt; endpoint to display the settings offered. Changes to the Master Template Settings will be reflected in all business locations associated with this company. &lt;/p&gt;  &lt;p&gt;The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new custom Master Template Settings file that will be used instead. If you delete it you are deleting the custom template settings you created and the original default Master Template created by OnSched would be reactivated.&lt;/p&gt;
     * @param masterTemplateSettingsInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesEmailTemplatesMasterPostAsync(MasterTemplateSettingsInputModel masterTemplateSettingsInputModel, final ApiCallback<MasterEmailTemplateSettingsViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesEmailTemplatesMasterPostValidateBeforeCall(masterTemplateSettingsInputModel, _callback);
        Type localVarReturnType = new TypeToken<MasterEmailTemplateSettingsViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesEmailTemplatesTemplateNameGet
     * @param templateName Email template name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesEmailTemplatesTemplateNameGetCall(String templateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/email/templates/{templateName}"
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesEmailTemplatesTemplateNameGetValidateBeforeCall(String templateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling setupV1CompaniesEmailTemplatesTemplateNameGet(Async)");
        }

        return setupV1CompaniesEmailTemplatesTemplateNameGetCall(templateName, _callback);

    }

    /**
     * Get Email Template
     * &lt;p&gt;Use this endpoint to return the requested &lt;b&gt;Email Template&lt;/b&gt;. If it wasn&#39;t customized the default template is returned. The response content is in html format. A valid emailTemplate &lt;b&gt;name&lt;/b&gt; is required. Find template names by using the: &lt;i&gt;GET ​/setup​/v1​/companies​/email​/templates&lt;/i&gt; endpoint. Note: The master template cannot be accessed here. &lt;/p&gt;  &lt;p&gt;To create custom company email templates, go to the &lt;i&gt;POST ​/setup​/v1​/locations​/{id}​/email​/templates&lt;/i&gt; endpoint and create a template using the Primary Business Location Id.&lt;/p&gt;
     * @param templateName Email template name (required)
     * @return ContentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContentResult setupV1CompaniesEmailTemplatesTemplateNameGet(String templateName) throws ApiException {
        ApiResponse<ContentResult> localVarResp = setupV1CompaniesEmailTemplatesTemplateNameGetWithHttpInfo(templateName);
        return localVarResp.getData();
    }

    /**
     * Get Email Template
     * &lt;p&gt;Use this endpoint to return the requested &lt;b&gt;Email Template&lt;/b&gt;. If it wasn&#39;t customized the default template is returned. The response content is in html format. A valid emailTemplate &lt;b&gt;name&lt;/b&gt; is required. Find template names by using the: &lt;i&gt;GET ​/setup​/v1​/companies​/email​/templates&lt;/i&gt; endpoint. Note: The master template cannot be accessed here. &lt;/p&gt;  &lt;p&gt;To create custom company email templates, go to the &lt;i&gt;POST ​/setup​/v1​/locations​/{id}​/email​/templates&lt;/i&gt; endpoint and create a template using the Primary Business Location Id.&lt;/p&gt;
     * @param templateName Email template name (required)
     * @return ApiResponse&lt;ContentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentResult> setupV1CompaniesEmailTemplatesTemplateNameGetWithHttpInfo(String templateName) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesEmailTemplatesTemplateNameGetValidateBeforeCall(templateName, null);
        Type localVarReturnType = new TypeToken<ContentResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Email Template (asynchronously)
     * &lt;p&gt;Use this endpoint to return the requested &lt;b&gt;Email Template&lt;/b&gt;. If it wasn&#39;t customized the default template is returned. The response content is in html format. A valid emailTemplate &lt;b&gt;name&lt;/b&gt; is required. Find template names by using the: &lt;i&gt;GET ​/setup​/v1​/companies​/email​/templates&lt;/i&gt; endpoint. Note: The master template cannot be accessed here. &lt;/p&gt;  &lt;p&gt;To create custom company email templates, go to the &lt;i&gt;POST ​/setup​/v1​/locations​/{id}​/email​/templates&lt;/i&gt; endpoint and create a template using the Primary Business Location Id.&lt;/p&gt;
     * @param templateName Email template name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesEmailTemplatesTemplateNameGetAsync(String templateName, final ApiCallback<ContentResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesEmailTemplatesTemplateNameGetValidateBeforeCall(templateName, _callback);
        Type localVarReturnType = new TypeToken<ContentResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return setupV1CompaniesGetCall(_callback);

    }

    /**
     * Get Company
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Authorized Company&lt;/b&gt; information. The company is the main entity that oversees all business locations defined below it, hierarchically. &lt;/p&gt;  &lt;p&gt;Access to the company credentials gives you access to all business locations defined in the authorized company. Client credentials resolve to a single company and are purposely hidden from this endpoint.&lt;/p&gt;
     * @return CompanyViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CompanyViewModel setupV1CompaniesGet() throws ApiException {
        ApiResponse<CompanyViewModel> localVarResp = setupV1CompaniesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Company
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Authorized Company&lt;/b&gt; information. The company is the main entity that oversees all business locations defined below it, hierarchically. &lt;/p&gt;  &lt;p&gt;Access to the company credentials gives you access to all business locations defined in the authorized company. Client credentials resolve to a single company and are purposely hidden from this endpoint.&lt;/p&gt;
     * @return ApiResponse&lt;CompanyViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyViewModel> setupV1CompaniesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CompanyViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Company (asynchronously)
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Authorized Company&lt;/b&gt; information. The company is the main entity that oversees all business locations defined below it, hierarchically. &lt;/p&gt;  &lt;p&gt;Access to the company credentials gives you access to all business locations defined in the authorized company. Client credentials resolve to a single company and are purposely hidden from this endpoint.&lt;/p&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesGetAsync(final ApiCallback<CompanyViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CompanyViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesPost
     * @param companyInputModel Company Input Model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesPostCall(CompanyInputModel companyInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companyInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesPostValidateBeforeCall(CompanyInputModel companyInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1CompaniesPostCall(companyInputModel, _callback);

    }

    /**
     * Create Company
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new authorized company.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Note: Special API Partner credentials are required to access this endpoint.&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;name, registrationEmail, phone, country&lt;/b&gt; and &lt;b&gt;timezoneName&lt;/b&gt; are required fields. For &lt;b&gt;country&lt;/b&gt; use the standard ISO 3166 2-character country code.&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;timezoneName&lt;/b&gt; must be expressed as an IANA Timezone e.g., &lt;i&gt;America/New_York&lt;/i&gt;.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Timezone IANA Wiki&lt;/a&gt;&lt;/p&gt;
     * @param companyInputModel Company Input Model (optional)
     * @return CompanyViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CompanyViewModel setupV1CompaniesPost(CompanyInputModel companyInputModel) throws ApiException {
        ApiResponse<CompanyViewModel> localVarResp = setupV1CompaniesPostWithHttpInfo(companyInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Company
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new authorized company.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Note: Special API Partner credentials are required to access this endpoint.&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;name, registrationEmail, phone, country&lt;/b&gt; and &lt;b&gt;timezoneName&lt;/b&gt; are required fields. For &lt;b&gt;country&lt;/b&gt; use the standard ISO 3166 2-character country code.&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;timezoneName&lt;/b&gt; must be expressed as an IANA Timezone e.g., &lt;i&gt;America/New_York&lt;/i&gt;.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Timezone IANA Wiki&lt;/a&gt;&lt;/p&gt;
     * @param companyInputModel Company Input Model (optional)
     * @return ApiResponse&lt;CompanyViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyViewModel> setupV1CompaniesPostWithHttpInfo(CompanyInputModel companyInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesPostValidateBeforeCall(companyInputModel, null);
        Type localVarReturnType = new TypeToken<CompanyViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Company (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new authorized company.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Note: Special API Partner credentials are required to access this endpoint.&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;name, registrationEmail, phone, country&lt;/b&gt; and &lt;b&gt;timezoneName&lt;/b&gt; are required fields. For &lt;b&gt;country&lt;/b&gt; use the standard ISO 3166 2-character country code.&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;timezoneName&lt;/b&gt; must be expressed as an IANA Timezone e.g., &lt;i&gt;America/New_York&lt;/i&gt;.&lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Timezone IANA Wiki&lt;/a&gt;&lt;/p&gt;
     * @param companyInputModel Company Input Model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesPostAsync(CompanyInputModel companyInputModel, final ApiCallback<CompanyViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesPostValidateBeforeCall(companyInputModel, _callback);
        Type localVarReturnType = new TypeToken<CompanyViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesPut
     * @param companyUpdateModel Company Update Model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesPutCall(CompanyUpdateModel companyUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companyUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesPutValidateBeforeCall(CompanyUpdateModel companyUpdateModel, final ApiCallback _callback) throws ApiException {
        return setupV1CompaniesPutCall(companyUpdateModel, _callback);

    }

    /**
     * Update Company
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; the authorized company information. Your client credentials resolve to a single company. The timezoneName must be expressed as an IANA Timezone, e.g., &lt;i&gt;America/New_York&lt;/i&gt;. &lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Timezone IANA Wiki&lt;/a&gt;&lt;/p&gt;
     * @param companyUpdateModel Company Update Model (optional)
     * @return CompanyViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CompanyViewModel setupV1CompaniesPut(CompanyUpdateModel companyUpdateModel) throws ApiException {
        ApiResponse<CompanyViewModel> localVarResp = setupV1CompaniesPutWithHttpInfo(companyUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Company
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; the authorized company information. Your client credentials resolve to a single company. The timezoneName must be expressed as an IANA Timezone, e.g., &lt;i&gt;America/New_York&lt;/i&gt;. &lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Timezone IANA Wiki&lt;/a&gt;&lt;/p&gt;
     * @param companyUpdateModel Company Update Model (optional)
     * @return ApiResponse&lt;CompanyViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyViewModel> setupV1CompaniesPutWithHttpInfo(CompanyUpdateModel companyUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesPutValidateBeforeCall(companyUpdateModel, null);
        Type localVarReturnType = new TypeToken<CompanyViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Company (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; the authorized company information. Your client credentials resolve to a single company. The timezoneName must be expressed as an IANA Timezone, e.g., &lt;i&gt;America/New_York&lt;/i&gt;. &lt;/p&gt;  &lt;p&gt;For more information: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Timezone IANA Wiki&lt;/a&gt;&lt;/p&gt;
     * @param companyUpdateModel Company Update Model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesPutAsync(CompanyUpdateModel companyUpdateModel, final ApiCallback<CompanyViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesPutValidateBeforeCall(companyUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<CompanyViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesRegionsGet
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> region object&#39;s </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesRegionsGetCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/regions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesRegionsGetValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return setupV1CompaniesRegionsGetCall(offset, limit, _callback);

    }

    /**
     * List Regions
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Regions&lt;/b&gt; in the authorized company. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. &lt;/p&gt;
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return RegionListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> region object&#39;s </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public RegionListViewModel setupV1CompaniesRegionsGet(Integer offset, Integer limit) throws ApiException {
        ApiResponse<RegionListViewModel> localVarResp = setupV1CompaniesRegionsGetWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Regions
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Regions&lt;/b&gt; in the authorized company. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. &lt;/p&gt;
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;RegionListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> region object&#39;s </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegionListViewModel> setupV1CompaniesRegionsGetWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesRegionsGetValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<RegionListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Regions (asynchronously)
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Regions&lt;/b&gt; in the authorized company. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. &lt;/p&gt;
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> region object&#39;s </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesRegionsGetAsync(Integer offset, Integer limit, final ApiCallback<RegionListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesRegionsGetValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<RegionListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesRegionsIdDelete
     * @param id id of Region (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesRegionsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/regions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesRegionsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CompaniesRegionsIdDelete(Async)");
        }

        return setupV1CompaniesRegionsIdDeleteCall(id, _callback);

    }

    /**
     * Delete Region
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a region object. A valid &lt;b&gt;region id&lt;/b&gt; is required. If the region is related to any business locations it won&#39;t be deleted. You must first remove any references to region id from the business locations prior to deleting.&lt;/p&gt;
     * @param id id of Region (required)
     * @return RegionViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RegionViewModel setupV1CompaniesRegionsIdDelete(String id) throws ApiException {
        ApiResponse<RegionViewModel> localVarResp = setupV1CompaniesRegionsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Region
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a region object. A valid &lt;b&gt;region id&lt;/b&gt; is required. If the region is related to any business locations it won&#39;t be deleted. You must first remove any references to region id from the business locations prior to deleting.&lt;/p&gt;
     * @param id id of Region (required)
     * @return ApiResponse&lt;RegionViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegionViewModel> setupV1CompaniesRegionsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesRegionsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RegionViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Region (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a region object. A valid &lt;b&gt;region id&lt;/b&gt; is required. If the region is related to any business locations it won&#39;t be deleted. You must first remove any references to region id from the business locations prior to deleting.&lt;/p&gt;
     * @param id id of Region (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesRegionsIdDeleteAsync(String id, final ApiCallback<RegionViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesRegionsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RegionViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesRegionsIdGet
     * @param id id of a region object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesRegionsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/regions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesRegionsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CompaniesRegionsIdGet(Async)");
        }

        return setupV1CompaniesRegionsIdGetCall(id, _callback);

    }

    /**
     * Get Region
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Region&lt;/b&gt; object. A valid &lt;b&gt;region id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of a region object (required)
     * @return RegionViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RegionViewModel setupV1CompaniesRegionsIdGet(String id) throws ApiException {
        ApiResponse<RegionViewModel> localVarResp = setupV1CompaniesRegionsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Region
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Region&lt;/b&gt; object. A valid &lt;b&gt;region id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of a region object (required)
     * @return ApiResponse&lt;RegionViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegionViewModel> setupV1CompaniesRegionsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesRegionsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RegionViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Region (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Region&lt;/b&gt; object. A valid &lt;b&gt;region id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of a region object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesRegionsIdGetAsync(String id, final ApiCallback<RegionViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesRegionsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RegionViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesRegionsIdPut
     * @param id id of Region (required)
     * @param regionUpdateModel Region Update Model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesRegionsIdPutCall(String id, RegionUpdateModel regionUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = regionUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/regions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesRegionsIdPutValidateBeforeCall(String id, RegionUpdateModel regionUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1CompaniesRegionsIdPut(Async)");
        }

        return setupV1CompaniesRegionsIdPutCall(id, regionUpdateModel, _callback);

    }

    /**
     * Update Region
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a region object. A valid &lt;b&gt;region id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of Region (required)
     * @param regionUpdateModel Region Update Model (optional)
     * @return RegionViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RegionViewModel setupV1CompaniesRegionsIdPut(String id, RegionUpdateModel regionUpdateModel) throws ApiException {
        ApiResponse<RegionViewModel> localVarResp = setupV1CompaniesRegionsIdPutWithHttpInfo(id, regionUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Region
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a region object. A valid &lt;b&gt;region id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of Region (required)
     * @param regionUpdateModel Region Update Model (optional)
     * @return ApiResponse&lt;RegionViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegionViewModel> setupV1CompaniesRegionsIdPutWithHttpInfo(String id, RegionUpdateModel regionUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesRegionsIdPutValidateBeforeCall(id, regionUpdateModel, null);
        Type localVarReturnType = new TypeToken<RegionViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Region (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a region object. A valid &lt;b&gt;region id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of Region (required)
     * @param regionUpdateModel Region Update Model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesRegionsIdPutAsync(String id, RegionUpdateModel regionUpdateModel, final ApiCallback<RegionViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesRegionsIdPutValidateBeforeCall(id, regionUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<RegionViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesRegionsPost
     * @param regionInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesRegionsPostCall(RegionInputModel regionInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = regionInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/regions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesRegionsPostValidateBeforeCall(RegionInputModel regionInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1CompaniesRegionsPostCall(regionInputModel, _callback);

    }

    /**
     * Create Region
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a region object. Regions can be mapped to business locations. They can be used by the locations endpoints to filter locations by region id.&lt;/p&gt;
     * @param regionInputModel  (optional)
     * @return RegionViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RegionViewModel setupV1CompaniesRegionsPost(RegionInputModel regionInputModel) throws ApiException {
        ApiResponse<RegionViewModel> localVarResp = setupV1CompaniesRegionsPostWithHttpInfo(regionInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Region
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a region object. Regions can be mapped to business locations. They can be used by the locations endpoints to filter locations by region id.&lt;/p&gt;
     * @param regionInputModel  (optional)
     * @return ApiResponse&lt;RegionViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegionViewModel> setupV1CompaniesRegionsPostWithHttpInfo(RegionInputModel regionInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesRegionsPostValidateBeforeCall(regionInputModel, null);
        Type localVarReturnType = new TypeToken<RegionViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Region (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a region object. Regions can be mapped to business locations. They can be used by the locations endpoints to filter locations by region id.&lt;/p&gt;
     * @param regionInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesRegionsPostAsync(RegionInputModel regionInputModel, final ApiCallback<RegionViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesRegionsPostValidateBeforeCall(regionInputModel, _callback);
        Type localVarReturnType = new TypeToken<RegionViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1CompaniesTimezonesDateGet
     * @param date \&quot;YYYY-MM-DD: Date for timezone info\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesTimezonesDateGetCall(OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/companies/timezones/{date}"
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1CompaniesTimezonesDateGetValidateBeforeCall(OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling setupV1CompaniesTimezonesDateGet(Async)");
        }

        return setupV1CompaniesTimezonesDateGetCall(date, _callback);

    }

    /**
     * List Time Zones
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of timezone names, timezoneIana and tzOffset values&lt;/b&gt; calculated for the date requested. Daylight Savings may or may not apply depending on the date specified.&lt;/p&gt;
     * @param date \&quot;YYYY-MM-DD: Date for timezone info\&quot; (required)
     * @return TimezoneViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TimezoneViewModel setupV1CompaniesTimezonesDateGet(OffsetDateTime date) throws ApiException {
        ApiResponse<TimezoneViewModel> localVarResp = setupV1CompaniesTimezonesDateGetWithHttpInfo(date);
        return localVarResp.getData();
    }

    /**
     * List Time Zones
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of timezone names, timezoneIana and tzOffset values&lt;/b&gt; calculated for the date requested. Daylight Savings may or may not apply depending on the date specified.&lt;/p&gt;
     * @param date \&quot;YYYY-MM-DD: Date for timezone info\&quot; (required)
     * @return ApiResponse&lt;TimezoneViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimezoneViewModel> setupV1CompaniesTimezonesDateGetWithHttpInfo(OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = setupV1CompaniesTimezonesDateGetValidateBeforeCall(date, null);
        Type localVarReturnType = new TypeToken<TimezoneViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Time Zones (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of timezone names, timezoneIana and tzOffset values&lt;/b&gt; calculated for the date requested. Daylight Savings may or may not apply depending on the date specified.&lt;/p&gt;
     * @param date \&quot;YYYY-MM-DD: Date for timezone info\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1CompaniesTimezonesDateGetAsync(OffsetDateTime date, final ApiCallback<TimezoneViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1CompaniesTimezonesDateGetValidateBeforeCall(date, _callback);
        Type localVarReturnType = new TypeToken<TimezoneViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
