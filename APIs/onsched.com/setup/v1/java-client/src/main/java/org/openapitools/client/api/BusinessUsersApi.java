/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthorizedCompanyListViewModel;
import org.openapitools.client.model.BusinessPermissionListViewModel;
import org.openapitools.client.model.BusinessUserInputModel;
import org.openapitools.client.model.BusinessUserListViewModel;
import org.openapitools.client.model.BusinessUserUpdateModel;
import org.openapitools.client.model.BusinessUserViewModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BusinessUsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BusinessUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessUsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for setupV1BusinessusersEmailCompaniesGet
     * @param email Email of business user (required)
     * @param searchText All or partial company name (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersEmailCompaniesGetCall(String email, String searchText, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/businessusers/{email}/companies"
            .replace("{" + "email" + "}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1BusinessusersEmailCompaniesGetValidateBeforeCall(String email, String searchText, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling setupV1BusinessusersEmailCompaniesGet(Async)");
        }

        return setupV1BusinessusersEmailCompaniesGetCall(email, searchText, offset, limit, _callback);

    }

    /**
     * List User Companies
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Companies&lt;/b&gt; associated with the business users email requested. A business user &lt;b&gt;email&lt;/b&gt; address is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param email Email of business user (required)
     * @param searchText All or partial company name (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return AuthorizedCompanyListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizedCompanyListViewModel setupV1BusinessusersEmailCompaniesGet(String email, String searchText, Integer offset, Integer limit) throws ApiException {
        ApiResponse<AuthorizedCompanyListViewModel> localVarResp = setupV1BusinessusersEmailCompaniesGetWithHttpInfo(email, searchText, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List User Companies
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Companies&lt;/b&gt; associated with the business users email requested. A business user &lt;b&gt;email&lt;/b&gt; address is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param email Email of business user (required)
     * @param searchText All or partial company name (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;AuthorizedCompanyListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizedCompanyListViewModel> setupV1BusinessusersEmailCompaniesGetWithHttpInfo(String email, String searchText, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1BusinessusersEmailCompaniesGetValidateBeforeCall(email, searchText, offset, limit, null);
        Type localVarReturnType = new TypeToken<AuthorizedCompanyListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List User Companies (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Companies&lt;/b&gt; associated with the business users email requested. A business user &lt;b&gt;email&lt;/b&gt; address is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param email Email of business user (required)
     * @param searchText All or partial company name (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersEmailCompaniesGetAsync(String email, String searchText, Integer offset, Integer limit, final ApiCallback<AuthorizedCompanyListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1BusinessusersEmailCompaniesGetValidateBeforeCall(email, searchText, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<AuthorizedCompanyListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1BusinessusersGet
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param email Filter by email address (optional)
     * @param role Filter user role (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersGetCall(String locationId, String email, String role, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/businessusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1BusinessusersGetValidateBeforeCall(String locationId, String email, String role, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return setupV1BusinessusersGetCall(locationId, email, role, offset, limit, _callback);

    }

    /**
     * List Users
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Business Users and their Roles&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param email Filter by email address (optional)
     * @param role Filter user role (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return BusinessUserListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BusinessUserListViewModel setupV1BusinessusersGet(String locationId, String email, String role, Integer offset, Integer limit) throws ApiException {
        ApiResponse<BusinessUserListViewModel> localVarResp = setupV1BusinessusersGetWithHttpInfo(locationId, email, role, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Users
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Business Users and their Roles&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param email Filter by email address (optional)
     * @param role Filter user role (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;BusinessUserListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessUserListViewModel> setupV1BusinessusersGetWithHttpInfo(String locationId, String email, String role, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1BusinessusersGetValidateBeforeCall(locationId, email, role, offset, limit, null);
        Type localVarReturnType = new TypeToken<BusinessUserListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Users (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Business Users and their Roles&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param email Filter by email address (optional)
     * @param role Filter user role (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersGetAsync(String locationId, String email, String role, Integer offset, Integer limit, final ApiCallback<BusinessUserListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1BusinessusersGetValidateBeforeCall(locationId, email, role, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<BusinessUserListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1BusinessusersIdDelete
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/businessusers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1BusinessusersIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1BusinessusersIdDelete(Async)");
        }

        return setupV1BusinessusersIdDeleteCall(id, _callback);

    }

    /**
     * Delete User
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a Business User. A valid &lt;b&gt;businessUser id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void setupV1BusinessusersIdDelete(String id) throws ApiException {
        setupV1BusinessusersIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete User
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a Business User. A valid &lt;b&gt;businessUser id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setupV1BusinessusersIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1BusinessusersIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete User (asynchronously)
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a Business User. A valid &lt;b&gt;businessUser id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersIdDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1BusinessusersIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1BusinessusersIdGet
     * @param id id of businessUser object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/businessusers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1BusinessusersIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1BusinessusersIdGet(Async)");
        }

        return setupV1BusinessusersIdGetCall(id, _callback);

    }

    /**
     * Get User
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Business User&lt;/b&gt; object. A valid &lt;b&gt;businessUser id&lt;/b&gt; is required. Find businessUser id&#39;s using the &lt;i&gt;GET /setup/v1/businessusers&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of businessUser object (required)
     * @return BusinessUserViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BusinessUserViewModel setupV1BusinessusersIdGet(String id) throws ApiException {
        ApiResponse<BusinessUserViewModel> localVarResp = setupV1BusinessusersIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get User
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Business User&lt;/b&gt; object. A valid &lt;b&gt;businessUser id&lt;/b&gt; is required. Find businessUser id&#39;s using the &lt;i&gt;GET /setup/v1/businessusers&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of businessUser object (required)
     * @return ApiResponse&lt;BusinessUserViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessUserViewModel> setupV1BusinessusersIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1BusinessusersIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessUserViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Business User&lt;/b&gt; object. A valid &lt;b&gt;businessUser id&lt;/b&gt; is required. Find businessUser id&#39;s using the &lt;i&gt;GET /setup/v1/businessusers&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of businessUser object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersIdGetAsync(String id, final ApiCallback<BusinessUserViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1BusinessusersIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessUserViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1BusinessusersIdPut
     * @param id  (required)
     * @param businessUserUpdateModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersIdPutCall(String id, BusinessUserUpdateModel businessUserUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessUserUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/businessusers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1BusinessusersIdPutValidateBeforeCall(String id, BusinessUserUpdateModel businessUserUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1BusinessusersIdPut(Async)");
        }

        return setupV1BusinessusersIdPutCall(id, businessUserUpdateModel, _callback);

    }

    /**
     * Update User
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a Business User. A valid &lt;b&gt;businessUser id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Business Roles Include: bizowner&lt;/b&gt; (Business Owner), &lt;b&gt;bizadmin&lt;/b&gt; (Business Administrator), &lt;b&gt;bizresource&lt;/b&gt; (Business User - Bookable Resource).&lt;/p&gt;
     * @param id  (required)
     * @param businessUserUpdateModel  (optional)
     * @return BusinessUserViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BusinessUserViewModel setupV1BusinessusersIdPut(String id, BusinessUserUpdateModel businessUserUpdateModel) throws ApiException {
        ApiResponse<BusinessUserViewModel> localVarResp = setupV1BusinessusersIdPutWithHttpInfo(id, businessUserUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update User
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a Business User. A valid &lt;b&gt;businessUser id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Business Roles Include: bizowner&lt;/b&gt; (Business Owner), &lt;b&gt;bizadmin&lt;/b&gt; (Business Administrator), &lt;b&gt;bizresource&lt;/b&gt; (Business User - Bookable Resource).&lt;/p&gt;
     * @param id  (required)
     * @param businessUserUpdateModel  (optional)
     * @return ApiResponse&lt;BusinessUserViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessUserViewModel> setupV1BusinessusersIdPutWithHttpInfo(String id, BusinessUserUpdateModel businessUserUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1BusinessusersIdPutValidateBeforeCall(id, businessUserUpdateModel, null);
        Type localVarReturnType = new TypeToken<BusinessUserViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a Business User. A valid &lt;b&gt;businessUser id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Business Roles Include: bizowner&lt;/b&gt; (Business Owner), &lt;b&gt;bizadmin&lt;/b&gt; (Business Administrator), &lt;b&gt;bizresource&lt;/b&gt; (Business User - Bookable Resource).&lt;/p&gt;
     * @param id  (required)
     * @param businessUserUpdateModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersIdPutAsync(String id, BusinessUserUpdateModel businessUserUpdateModel, final ApiCallback<BusinessUserViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1BusinessusersIdPutValidateBeforeCall(id, businessUserUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<BusinessUserViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1BusinessusersPermissionsGet
     * @param role Filter permissions by role (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersPermissionsGetCall(String role, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/businessusers/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1BusinessusersPermissionsGetValidateBeforeCall(String role, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return setupV1BusinessusersPermissionsGetCall(role, offset, limit, _callback);

    }

    /**
     * List User Permissions
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Business User Permissions by Role&lt;/b&gt;. Results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param role Filter permissions by role (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return BusinessPermissionListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BusinessPermissionListViewModel setupV1BusinessusersPermissionsGet(String role, Integer offset, Integer limit) throws ApiException {
        ApiResponse<BusinessPermissionListViewModel> localVarResp = setupV1BusinessusersPermissionsGetWithHttpInfo(role, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List User Permissions
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Business User Permissions by Role&lt;/b&gt;. Results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param role Filter permissions by role (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;BusinessPermissionListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessPermissionListViewModel> setupV1BusinessusersPermissionsGetWithHttpInfo(String role, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1BusinessusersPermissionsGetValidateBeforeCall(role, offset, limit, null);
        Type localVarReturnType = new TypeToken<BusinessPermissionListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List User Permissions (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Business User Permissions by Role&lt;/b&gt;. Results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param role Filter permissions by role (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersPermissionsGetAsync(String role, Integer offset, Integer limit, final ApiCallback<BusinessPermissionListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1BusinessusersPermissionsGetValidateBeforeCall(role, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<BusinessPermissionListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1BusinessusersPost
     * @param businessUserInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersPostCall(BusinessUserInputModel businessUserInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessUserInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/businessusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1BusinessusersPostValidateBeforeCall(BusinessUserInputModel businessUserInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1BusinessusersPostCall(businessUserInputModel, _callback);

    }

    /**
     * Create User
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Business User. If not specified, the business location defaults to the primary business location. &lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;Name&lt;/b&gt;, &lt;b&gt;Email&lt;/b&gt; and &lt;b&gt;Role&lt;/b&gt;&lt;b&gt;Note:&lt;/b&gt; If the businessUser is a bookable resource (bizresource) then a resourceId is required.&lt;/p&gt;  &lt;p&gt;For role, use one of the values listed. &lt;b&gt;Business Roles Include: bizowner&lt;/b&gt; (Business Owner), &lt;b&gt;bizadmin&lt;/b&gt; (Business Administrator), &lt;b&gt;bizresource&lt;/b&gt; (Business User - Bookable Resource).&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;sendRegistrationInvite&lt;/b&gt; parameter is available to API consumers for their own use. It provides no added functionality in OnSched.&lt;/p&gt;
     * @param businessUserInputModel  (optional)
     * @return BusinessUserViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BusinessUserViewModel setupV1BusinessusersPost(BusinessUserInputModel businessUserInputModel) throws ApiException {
        ApiResponse<BusinessUserViewModel> localVarResp = setupV1BusinessusersPostWithHttpInfo(businessUserInputModel);
        return localVarResp.getData();
    }

    /**
     * Create User
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Business User. If not specified, the business location defaults to the primary business location. &lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;Name&lt;/b&gt;, &lt;b&gt;Email&lt;/b&gt; and &lt;b&gt;Role&lt;/b&gt;&lt;b&gt;Note:&lt;/b&gt; If the businessUser is a bookable resource (bizresource) then a resourceId is required.&lt;/p&gt;  &lt;p&gt;For role, use one of the values listed. &lt;b&gt;Business Roles Include: bizowner&lt;/b&gt; (Business Owner), &lt;b&gt;bizadmin&lt;/b&gt; (Business Administrator), &lt;b&gt;bizresource&lt;/b&gt; (Business User - Bookable Resource).&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;sendRegistrationInvite&lt;/b&gt; parameter is available to API consumers for their own use. It provides no added functionality in OnSched.&lt;/p&gt;
     * @param businessUserInputModel  (optional)
     * @return ApiResponse&lt;BusinessUserViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessUserViewModel> setupV1BusinessusersPostWithHttpInfo(BusinessUserInputModel businessUserInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1BusinessusersPostValidateBeforeCall(businessUserInputModel, null);
        Type localVarReturnType = new TypeToken<BusinessUserViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create User (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Business User. If not specified, the business location defaults to the primary business location. &lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;Name&lt;/b&gt;, &lt;b&gt;Email&lt;/b&gt; and &lt;b&gt;Role&lt;/b&gt;&lt;b&gt;Note:&lt;/b&gt; If the businessUser is a bookable resource (bizresource) then a resourceId is required.&lt;/p&gt;  &lt;p&gt;For role, use one of the values listed. &lt;b&gt;Business Roles Include: bizowner&lt;/b&gt; (Business Owner), &lt;b&gt;bizadmin&lt;/b&gt; (Business Administrator), &lt;b&gt;bizresource&lt;/b&gt; (Business User - Bookable Resource).&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;sendRegistrationInvite&lt;/b&gt; parameter is available to API consumers for their own use. It provides no added functionality in OnSched.&lt;/p&gt;
     * @param businessUserInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1BusinessusersPostAsync(BusinessUserInputModel businessUserInputModel, final ApiCallback<BusinessUserViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1BusinessusersPostValidateBeforeCall(businessUserInputModel, _callback);
        Type localVarReturnType = new TypeToken<BusinessUserViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
