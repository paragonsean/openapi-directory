/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AddressUpdateModel;
import org.openapitools.client.model.AppointmentRemindersInputModel;
import org.openapitools.client.model.BusinessDefaultsUpdateModel;
import org.openapitools.client.model.BusinessHoursUpdateModel;
import org.openapitools.client.model.OnlineSettingsUpdateModel;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LocationUpdateModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:58.890429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LocationUpdateModel {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private AddressUpdateModel address;

  public static final String SERIALIZED_NAME_ADMIN_EMAIL = "adminEmail";
  @SerializedName(SERIALIZED_NAME_ADMIN_EMAIL)
  private String adminEmail;

  public static final String SERIALIZED_NAME_ADMIN_NAME = "adminName";
  @SerializedName(SERIALIZED_NAME_ADMIN_NAME)
  private String adminName;

  public static final String SERIALIZED_NAME_APPOINTMENT_REMINDERS = "appointmentReminders";
  @SerializedName(SERIALIZED_NAME_APPOINTMENT_REMINDERS)
  private AppointmentRemindersInputModel appointmentReminders;

  public static final String SERIALIZED_NAME_BUSINESS_HOURS = "businessHours";
  @SerializedName(SERIALIZED_NAME_BUSINESS_HOURS)
  private BusinessHoursUpdateModel businessHours;

  public static final String SERIALIZED_NAME_DEFAULTS = "defaults";
  @SerializedName(SERIALIZED_NAME_DEFAULTS)
  private BusinessDefaultsUpdateModel defaults;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_FRIENDLY_ID = "friendlyId";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_ID)
  private String friendlyId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_REGION_ID = "regionId";
  @SerializedName(SERIALIZED_NAME_REGION_ID)
  private String regionId;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private OnlineSettingsUpdateModel settings;

  public static final String SERIALIZED_NAME_TIMEZONE_NAME = "timezoneName";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_NAME)
  private String timezoneName;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public LocationUpdateModel() {
  }

  public LocationUpdateModel address(AddressUpdateModel address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public AddressUpdateModel getAddress() {
    return address;
  }

  public void setAddress(AddressUpdateModel address) {
    this.address = address;
  }


  public LocationUpdateModel adminEmail(String adminEmail) {
    this.adminEmail = adminEmail;
    return this;
  }

  /**
   * Get adminEmail
   * @return adminEmail
   */
  @javax.annotation.Nullable
  public String getAdminEmail() {
    return adminEmail;
  }

  public void setAdminEmail(String adminEmail) {
    this.adminEmail = adminEmail;
  }


  public LocationUpdateModel adminName(String adminName) {
    this.adminName = adminName;
    return this;
  }

  /**
   * Get adminName
   * @return adminName
   */
  @javax.annotation.Nullable
  public String getAdminName() {
    return adminName;
  }

  public void setAdminName(String adminName) {
    this.adminName = adminName;
  }


  public LocationUpdateModel appointmentReminders(AppointmentRemindersInputModel appointmentReminders) {
    this.appointmentReminders = appointmentReminders;
    return this;
  }

  /**
   * Get appointmentReminders
   * @return appointmentReminders
   */
  @javax.annotation.Nullable
  public AppointmentRemindersInputModel getAppointmentReminders() {
    return appointmentReminders;
  }

  public void setAppointmentReminders(AppointmentRemindersInputModel appointmentReminders) {
    this.appointmentReminders = appointmentReminders;
  }


  public LocationUpdateModel businessHours(BusinessHoursUpdateModel businessHours) {
    this.businessHours = businessHours;
    return this;
  }

  /**
   * Get businessHours
   * @return businessHours
   */
  @javax.annotation.Nullable
  public BusinessHoursUpdateModel getBusinessHours() {
    return businessHours;
  }

  public void setBusinessHours(BusinessHoursUpdateModel businessHours) {
    this.businessHours = businessHours;
  }


  public LocationUpdateModel defaults(BusinessDefaultsUpdateModel defaults) {
    this.defaults = defaults;
    return this;
  }

  /**
   * Get defaults
   * @return defaults
   */
  @javax.annotation.Nullable
  public BusinessDefaultsUpdateModel getDefaults() {
    return defaults;
  }

  public void setDefaults(BusinessDefaultsUpdateModel defaults) {
    this.defaults = defaults;
  }


  public LocationUpdateModel email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public LocationUpdateModel fax(String fax) {
    this.fax = fax;
    return this;
  }

  /**
   * Get fax
   * @return fax
   */
  @javax.annotation.Nullable
  public String getFax() {
    return fax;
  }

  public void setFax(String fax) {
    this.fax = fax;
  }


  public LocationUpdateModel friendlyId(String friendlyId) {
    this.friendlyId = friendlyId;
    return this;
  }

  /**
   * Get friendlyId
   * @return friendlyId
   */
  @javax.annotation.Nullable
  public String getFriendlyId() {
    return friendlyId;
  }

  public void setFriendlyId(String friendlyId) {
    this.friendlyId = friendlyId;
  }


  public LocationUpdateModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LocationUpdateModel phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public LocationUpdateModel regionId(String regionId) {
    this.regionId = regionId;
    return this;
  }

  /**
   * Get regionId
   * @return regionId
   */
  @javax.annotation.Nullable
  public String getRegionId() {
    return regionId;
  }

  public void setRegionId(String regionId) {
    this.regionId = regionId;
  }


  public LocationUpdateModel settings(OnlineSettingsUpdateModel settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public OnlineSettingsUpdateModel getSettings() {
    return settings;
  }

  public void setSettings(OnlineSettingsUpdateModel settings) {
    this.settings = settings;
  }


  public LocationUpdateModel timezoneName(String timezoneName) {
    this.timezoneName = timezoneName;
    return this;
  }

  /**
   * Get timezoneName
   * @return timezoneName
   */
  @javax.annotation.Nullable
  public String getTimezoneName() {
    return timezoneName;
  }

  public void setTimezoneName(String timezoneName) {
    this.timezoneName = timezoneName;
  }


  public LocationUpdateModel website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationUpdateModel locationUpdateModel = (LocationUpdateModel) o;
    return Objects.equals(this.address, locationUpdateModel.address) &&
        Objects.equals(this.adminEmail, locationUpdateModel.adminEmail) &&
        Objects.equals(this.adminName, locationUpdateModel.adminName) &&
        Objects.equals(this.appointmentReminders, locationUpdateModel.appointmentReminders) &&
        Objects.equals(this.businessHours, locationUpdateModel.businessHours) &&
        Objects.equals(this.defaults, locationUpdateModel.defaults) &&
        Objects.equals(this.email, locationUpdateModel.email) &&
        Objects.equals(this.fax, locationUpdateModel.fax) &&
        Objects.equals(this.friendlyId, locationUpdateModel.friendlyId) &&
        Objects.equals(this.name, locationUpdateModel.name) &&
        Objects.equals(this.phone, locationUpdateModel.phone) &&
        Objects.equals(this.regionId, locationUpdateModel.regionId) &&
        Objects.equals(this.settings, locationUpdateModel.settings) &&
        Objects.equals(this.timezoneName, locationUpdateModel.timezoneName) &&
        Objects.equals(this.website, locationUpdateModel.website);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, adminEmail, adminName, appointmentReminders, businessHours, defaults, email, fax, friendlyId, name, phone, regionId, settings, timezoneName, website);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationUpdateModel {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    adminEmail: ").append(toIndentedString(adminEmail)).append("\n");
    sb.append("    adminName: ").append(toIndentedString(adminName)).append("\n");
    sb.append("    appointmentReminders: ").append(toIndentedString(appointmentReminders)).append("\n");
    sb.append("    businessHours: ").append(toIndentedString(businessHours)).append("\n");
    sb.append("    defaults: ").append(toIndentedString(defaults)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    friendlyId: ").append(toIndentedString(friendlyId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    timezoneName: ").append(toIndentedString(timezoneName)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("adminEmail");
    openapiFields.add("adminName");
    openapiFields.add("appointmentReminders");
    openapiFields.add("businessHours");
    openapiFields.add("defaults");
    openapiFields.add("email");
    openapiFields.add("fax");
    openapiFields.add("friendlyId");
    openapiFields.add("name");
    openapiFields.add("phone");
    openapiFields.add("regionId");
    openapiFields.add("settings");
    openapiFields.add("timezoneName");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LocationUpdateModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LocationUpdateModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocationUpdateModel is not found in the empty JSON string", LocationUpdateModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LocationUpdateModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocationUpdateModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        AddressUpdateModel.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("adminEmail") != null && !jsonObj.get("adminEmail").isJsonNull()) && !jsonObj.get("adminEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminEmail").toString()));
      }
      if ((jsonObj.get("adminName") != null && !jsonObj.get("adminName").isJsonNull()) && !jsonObj.get("adminName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminName").toString()));
      }
      // validate the optional field `appointmentReminders`
      if (jsonObj.get("appointmentReminders") != null && !jsonObj.get("appointmentReminders").isJsonNull()) {
        AppointmentRemindersInputModel.validateJsonElement(jsonObj.get("appointmentReminders"));
      }
      // validate the optional field `businessHours`
      if (jsonObj.get("businessHours") != null && !jsonObj.get("businessHours").isJsonNull()) {
        BusinessHoursUpdateModel.validateJsonElement(jsonObj.get("businessHours"));
      }
      // validate the optional field `defaults`
      if (jsonObj.get("defaults") != null && !jsonObj.get("defaults").isJsonNull()) {
        BusinessDefaultsUpdateModel.validateJsonElement(jsonObj.get("defaults"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if ((jsonObj.get("friendlyId") != null && !jsonObj.get("friendlyId").isJsonNull()) && !jsonObj.get("friendlyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("regionId") != null && !jsonObj.get("regionId").isJsonNull()) && !jsonObj.get("regionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionId").toString()));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        OnlineSettingsUpdateModel.validateJsonElement(jsonObj.get("settings"));
      }
      if ((jsonObj.get("timezoneName") != null && !jsonObj.get("timezoneName").isJsonNull()) && !jsonObj.get("timezoneName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezoneName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezoneName").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocationUpdateModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocationUpdateModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocationUpdateModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocationUpdateModel.class));

       return (TypeAdapter<T>) new TypeAdapter<LocationUpdateModel>() {
           @Override
           public void write(JsonWriter out, LocationUpdateModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocationUpdateModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LocationUpdateModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LocationUpdateModel
   * @throws IOException if the JSON string is invalid with respect to LocationUpdateModel
   */
  public static LocationUpdateModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocationUpdateModel.class);
  }

  /**
   * Convert an instance of LocationUpdateModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

