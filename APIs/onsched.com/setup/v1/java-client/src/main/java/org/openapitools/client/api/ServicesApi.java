/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AvailabilityInputModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ResourceBlockViewModel;
import org.openapitools.client.model.ResourceListViewModel;
import org.openapitools.client.model.ServiceAllocationInputModel;
import org.openapitools.client.model.ServiceAllocationListViewModel;
import org.openapitools.client.model.ServiceAllocationUpdateModel;
import org.openapitools.client.model.ServiceAllocationViewModel;
import org.openapitools.client.model.ServiceAllocationsInputModel;
import org.openapitools.client.model.ServiceAvailabilityViewModel;
import org.openapitools.client.model.ServiceBlockInputModel;
import org.openapitools.client.model.ServiceBlockListViewModel;
import org.openapitools.client.model.ServiceBlockUpdateModel;
import org.openapitools.client.model.ServiceBlockViewModel;
import org.openapitools.client.model.ServiceCalendarInputModel;
import org.openapitools.client.model.ServiceCalendarViewModel;
import org.openapitools.client.model.ServiceImageInputModel;
import org.openapitools.client.model.ServiceInputModel;
import org.openapitools.client.model.ServiceListViewModel;
import org.openapitools.client.model.ServiceUpdateModel;
import org.openapitools.client.model.ServiceViewModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for setupV1ServicesAllocationsIdDelete
     * @param id id of serviceAllocation object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesAllocationsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/allocations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesAllocationsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesAllocationsIdDelete(Async)");
        }

        return setupV1ServicesAllocationsIdDeleteCall(id, _callback);

    }

    /**
     * Delete Allocation
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a service allocation. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceAllocation object (required)
     * @return ServiceAllocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAllocationViewModel setupV1ServicesAllocationsIdDelete(String id) throws ApiException {
        ApiResponse<ServiceAllocationViewModel> localVarResp = setupV1ServicesAllocationsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Allocation
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a service allocation. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceAllocation object (required)
     * @return ApiResponse&lt;ServiceAllocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAllocationViewModel> setupV1ServicesAllocationsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesAllocationsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceAllocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Allocation (asynchronously)
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a service allocation. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceAllocation object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesAllocationsIdDeleteAsync(String id, final ApiCallback<ServiceAllocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesAllocationsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceAllocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesAllocationsIdGet
     * @param id id of serviceAllocation object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesAllocationsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/allocations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesAllocationsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesAllocationsIdGet(Async)");
        }

        return setupV1ServicesAllocationsIdGetCall(id, _callback);

    }

    /**
     * Get Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get a Service Allocation&lt;/b&gt;. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceAllocation object (required)
     * @return ServiceAllocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAllocationViewModel setupV1ServicesAllocationsIdGet(String id) throws ApiException {
        ApiResponse<ServiceAllocationViewModel> localVarResp = setupV1ServicesAllocationsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get a Service Allocation&lt;/b&gt;. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceAllocation object (required)
     * @return ApiResponse&lt;ServiceAllocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAllocationViewModel> setupV1ServicesAllocationsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesAllocationsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceAllocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Allocation (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get a Service Allocation&lt;/b&gt;. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceAllocation object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesAllocationsIdGetAsync(String id, final ApiCallback<ServiceAllocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesAllocationsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceAllocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesAllocationsIdPut
     * @param id id of serviceAllocation object (required)
     * @param serviceAllocationUpdateModel Service allocation update model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesAllocationsIdPutCall(String id, ServiceAllocationUpdateModel serviceAllocationUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceAllocationUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/services/allocations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesAllocationsIdPutValidateBeforeCall(String id, ServiceAllocationUpdateModel serviceAllocationUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesAllocationsIdPut(Async)");
        }

        return setupV1ServicesAllocationsIdPutCall(id, serviceAllocationUpdateModel, _callback);

    }

    /**
     * Update Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a service allocation. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST /setup/v1/services/{id}/allocations&lt;/i&gt; endpoint for fields names and details.&lt;/p&gt;
     * @param id id of serviceAllocation object (required)
     * @param serviceAllocationUpdateModel Service allocation update model (optional)
     * @return ServiceAllocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAllocationViewModel setupV1ServicesAllocationsIdPut(String id, ServiceAllocationUpdateModel serviceAllocationUpdateModel) throws ApiException {
        ApiResponse<ServiceAllocationViewModel> localVarResp = setupV1ServicesAllocationsIdPutWithHttpInfo(id, serviceAllocationUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a service allocation. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST /setup/v1/services/{id}/allocations&lt;/i&gt; endpoint for fields names and details.&lt;/p&gt;
     * @param id id of serviceAllocation object (required)
     * @param serviceAllocationUpdateModel Service allocation update model (optional)
     * @return ApiResponse&lt;ServiceAllocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAllocationViewModel> setupV1ServicesAllocationsIdPutWithHttpInfo(String id, ServiceAllocationUpdateModel serviceAllocationUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesAllocationsIdPutValidateBeforeCall(id, serviceAllocationUpdateModel, null);
        Type localVarReturnType = new TypeToken<ServiceAllocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Allocation (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a service allocation. A valid &lt;b&gt;serviceAllocation id&lt;/b&gt; is required. Refer to the &lt;i&gt;POST /setup/v1/services/{id}/allocations&lt;/i&gt; endpoint for fields names and details.&lt;/p&gt;
     * @param id id of serviceAllocation object (required)
     * @param serviceAllocationUpdateModel Service allocation update model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesAllocationsIdPutAsync(String id, ServiceAllocationUpdateModel serviceAllocationUpdateModel, final ApiCallback<ServiceAllocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesAllocationsIdPutValidateBeforeCall(id, serviceAllocationUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<ServiceAllocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesBlockIdDelete
     * @param id id of serviceBlock object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesBlockIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/block/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesBlockIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesBlockIdDelete(Async)");
        }

        return setupV1ServicesBlockIdDeleteCall(id, _callback);

    }

    /**
     * Delete Block
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a Service Block. A valid &lt;b&gt;serviceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceBlock object (required)
     * @return ResourceBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceBlockViewModel setupV1ServicesBlockIdDelete(String id) throws ApiException {
        ApiResponse<ResourceBlockViewModel> localVarResp = setupV1ServicesBlockIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Block
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a Service Block. A valid &lt;b&gt;serviceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceBlock object (required)
     * @return ApiResponse&lt;ResourceBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceBlockViewModel> setupV1ServicesBlockIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesBlockIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Block (asynchronously)
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a Service Block. A valid &lt;b&gt;serviceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceBlock object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesBlockIdDeleteAsync(String id, final ApiCallback<ResourceBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesBlockIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesBlockIdPut
     * @param id id of serviceBlock object (required)
     * @param serviceBlockUpdateModel Service Block update model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesBlockIdPutCall(String id, ServiceBlockUpdateModel serviceBlockUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceBlockUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/services/block/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesBlockIdPutValidateBeforeCall(String id, ServiceBlockUpdateModel serviceBlockUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesBlockIdPut(Async)");
        }

        return setupV1ServicesBlockIdPutCall(id, serviceBlockUpdateModel, _callback);

    }

    /**
     * Update Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a Service Block. A valid &lt;b&gt;serviceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceBlock object (required)
     * @param serviceBlockUpdateModel Service Block update model (optional)
     * @return ServiceBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceBlockViewModel setupV1ServicesBlockIdPut(String id, ServiceBlockUpdateModel serviceBlockUpdateModel) throws ApiException {
        ApiResponse<ServiceBlockViewModel> localVarResp = setupV1ServicesBlockIdPutWithHttpInfo(id, serviceBlockUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a Service Block. A valid &lt;b&gt;serviceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceBlock object (required)
     * @param serviceBlockUpdateModel Service Block update model (optional)
     * @return ApiResponse&lt;ServiceBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceBlockViewModel> setupV1ServicesBlockIdPutWithHttpInfo(String id, ServiceBlockUpdateModel serviceBlockUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesBlockIdPutValidateBeforeCall(id, serviceBlockUpdateModel, null);
        Type localVarReturnType = new TypeToken<ServiceBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Block (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a Service Block. A valid &lt;b&gt;serviceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceBlock object (required)
     * @param serviceBlockUpdateModel Service Block update model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesBlockIdPutAsync(String id, ServiceBlockUpdateModel serviceBlockUpdateModel, final ApiCallback<ServiceBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesBlockIdPutValidateBeforeCall(id, serviceBlockUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<ServiceBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesBlocksIdGet
     * @param id id of serviceBlock object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesBlocksIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/blocks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesBlocksIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesBlocksIdGet(Async)");
        }

        return setupV1ServicesBlocksIdGetCall(id, _callback);

    }

    /**
     * Get Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get a Service Block&lt;/b&gt;. A valid &lt;b&gt;serviceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceBlock object (required)
     * @return ResourceBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceBlockViewModel setupV1ServicesBlocksIdGet(String id) throws ApiException {
        ApiResponse<ResourceBlockViewModel> localVarResp = setupV1ServicesBlocksIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get a Service Block&lt;/b&gt;. A valid &lt;b&gt;serviceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceBlock object (required)
     * @return ApiResponse&lt;ResourceBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceBlockViewModel> setupV1ServicesBlocksIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesBlocksIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Block (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get a Service Block&lt;/b&gt;. A valid &lt;b&gt;serviceBlock id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of serviceBlock object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesBlocksIdGetAsync(String id, final ApiCallback<ResourceBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesBlocksIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourceBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesCalendarIdDelete
     * @param id id of calender to delete service links from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesCalendarIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/calendar/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesCalendarIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesCalendarIdDelete(Async)");
        }

        return setupV1ServicesCalendarIdDeleteCall(id, _callback);

    }

    /**
     * Delete Service Links
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; service links from the calendar specified. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of calender to delete service links from (required)
     * @return ServiceCalendarViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceCalendarViewModel setupV1ServicesCalendarIdDelete(String id) throws ApiException {
        ApiResponse<ServiceCalendarViewModel> localVarResp = setupV1ServicesCalendarIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Service Links
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; service links from the calendar specified. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of calender to delete service links from (required)
     * @return ApiResponse&lt;ServiceCalendarViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceCalendarViewModel> setupV1ServicesCalendarIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesCalendarIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceCalendarViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Service Links (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; service links from the calendar specified. A valid &lt;b&gt;calendar id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of calender to delete service links from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesCalendarIdDeleteAsync(String id, final ApiCallback<ServiceCalendarViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesCalendarIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceCalendarViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesCalendarPost
     * @param serviceCalendarInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesCalendarPostCall(ServiceCalendarInputModel serviceCalendarInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceCalendarInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/services/calendar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesCalendarPostValidateBeforeCall(ServiceCalendarInputModel serviceCalendarInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1ServicesCalendarPostCall(serviceCalendarInputModel, _callback);

    }

    /**
     * Link Service to Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Link a Service&lt;/b&gt; to a calendar. &lt;/p&gt;
     * @param serviceCalendarInputModel  (optional)
     * @return ServiceCalendarViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceCalendarViewModel setupV1ServicesCalendarPost(ServiceCalendarInputModel serviceCalendarInputModel) throws ApiException {
        ApiResponse<ServiceCalendarViewModel> localVarResp = setupV1ServicesCalendarPostWithHttpInfo(serviceCalendarInputModel);
        return localVarResp.getData();
    }

    /**
     * Link Service to Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Link a Service&lt;/b&gt; to a calendar. &lt;/p&gt;
     * @param serviceCalendarInputModel  (optional)
     * @return ApiResponse&lt;ServiceCalendarViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceCalendarViewModel> setupV1ServicesCalendarPostWithHttpInfo(ServiceCalendarInputModel serviceCalendarInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesCalendarPostValidateBeforeCall(serviceCalendarInputModel, null);
        Type localVarReturnType = new TypeToken<ServiceCalendarViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Link Service to Calendar (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Link a Service&lt;/b&gt; to a calendar. &lt;/p&gt;
     * @param serviceCalendarInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesCalendarPostAsync(ServiceCalendarInputModel serviceCalendarInputModel, final ApiCallback<ServiceCalendarViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesCalendarPostValidateBeforeCall(serviceCalendarInputModel, _callback);
        Type localVarReturnType = new TypeToken<ServiceCalendarViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesGet
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param serviceGroupId Filter services by groupId (optional)
     * @param deleted Filter by deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesGetCall(String locationId, Integer serviceGroupId, Boolean deleted, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (serviceGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceGroupId", serviceGroupId));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesGetValidateBeforeCall(String locationId, Integer serviceGroupId, Boolean deleted, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return setupV1ServicesGetCall(locationId, serviceGroupId, deleted, offset, limit, _callback);

    }

    /**
     * List Services
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Service&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param serviceGroupId Filter services by groupId (optional)
     * @param deleted Filter by deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ServiceListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceListViewModel setupV1ServicesGet(String locationId, Integer serviceGroupId, Boolean deleted, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ServiceListViewModel> localVarResp = setupV1ServicesGetWithHttpInfo(locationId, serviceGroupId, deleted, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Services
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Service&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param serviceGroupId Filter services by groupId (optional)
     * @param deleted Filter by deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;ServiceListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceListViewModel> setupV1ServicesGetWithHttpInfo(String locationId, Integer serviceGroupId, Boolean deleted, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesGetValidateBeforeCall(locationId, serviceGroupId, deleted, offset, limit, null);
        Type localVarReturnType = new TypeToken<ServiceListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Services (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Service&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param serviceGroupId Filter services by groupId (optional)
     * @param deleted Filter by deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesGetAsync(String locationId, Integer serviceGroupId, Boolean deleted, Integer offset, Integer limit, final ApiCallback<ServiceListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesGetValidateBeforeCall(locationId, serviceGroupId, deleted, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ServiceListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdAllocationsBulkPost
     * @param id id of service object (required)
     * @param serviceAllocationsInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdAllocationsBulkPostCall(String id, ServiceAllocationsInputModel serviceAllocationsInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceAllocationsInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}/allocations/bulk"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdAllocationsBulkPostValidateBeforeCall(String id, ServiceAllocationsInputModel serviceAllocationsInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdAllocationsBulkPost(Async)");
        }

        return setupV1ServicesIdAllocationsBulkPostCall(id, serviceAllocationsInputModel, _callback);

    }

    /**
     * Create Allocations Bulk
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; bulk service allocations. A valid &lt;b&gt;service id&lt;/b&gt; is required. Use this endpoint only if you need to POST multiple service allocations in one transaction. For details refer to: &lt;a href&#x3D;\&quot;POST ​/setup​/v1​/services​/{id}​/allocations\&quot;&gt;Post Service Allocation&lt;/a&gt;&lt;/p&gt;
     * @param id id of service object (required)
     * @param serviceAllocationsInputModel  (optional)
     * @return List&lt;ServiceAllocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ServiceAllocationViewModel> setupV1ServicesIdAllocationsBulkPost(String id, ServiceAllocationsInputModel serviceAllocationsInputModel) throws ApiException {
        ApiResponse<List<ServiceAllocationViewModel>> localVarResp = setupV1ServicesIdAllocationsBulkPostWithHttpInfo(id, serviceAllocationsInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Allocations Bulk
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; bulk service allocations. A valid &lt;b&gt;service id&lt;/b&gt; is required. Use this endpoint only if you need to POST multiple service allocations in one transaction. For details refer to: &lt;a href&#x3D;\&quot;POST ​/setup​/v1​/services​/{id}​/allocations\&quot;&gt;Post Service Allocation&lt;/a&gt;&lt;/p&gt;
     * @param id id of service object (required)
     * @param serviceAllocationsInputModel  (optional)
     * @return ApiResponse&lt;List&lt;ServiceAllocationViewModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ServiceAllocationViewModel>> setupV1ServicesIdAllocationsBulkPostWithHttpInfo(String id, ServiceAllocationsInputModel serviceAllocationsInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdAllocationsBulkPostValidateBeforeCall(id, serviceAllocationsInputModel, null);
        Type localVarReturnType = new TypeToken<List<ServiceAllocationViewModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Allocations Bulk (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; bulk service allocations. A valid &lt;b&gt;service id&lt;/b&gt; is required. Use this endpoint only if you need to POST multiple service allocations in one transaction. For details refer to: &lt;a href&#x3D;\&quot;POST ​/setup​/v1​/services​/{id}​/allocations\&quot;&gt;Post Service Allocation&lt;/a&gt;&lt;/p&gt;
     * @param id id of service object (required)
     * @param serviceAllocationsInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdAllocationsBulkPostAsync(String id, ServiceAllocationsInputModel serviceAllocationsInputModel, final ApiCallback<List<ServiceAllocationViewModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdAllocationsBulkPostValidateBeforeCall(id, serviceAllocationsInputModel, _callback);
        Type localVarReturnType = new TypeToken<List<ServiceAllocationViewModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdAllocationsGet
     * @param id id of  service to list allocations for, 0 for all (required)
     * @param locationId The id of the location. Defaults to the primary location (optional)
     * @param resourceId The id of the resource to filter on (optional)
     * @param startDate Format YYYY-MM-DD. Filter appointments by on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter appointments on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> service alloaction object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Service was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdAllocationsGetCall(String id, String locationId, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}/allocations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (resourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceId", resourceId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdAllocationsGetValidateBeforeCall(String id, String locationId, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdAllocationsGet(Async)");
        }

        return setupV1ServicesIdAllocationsGetCall(id, locationId, resourceId, startDate, endDate, offset, limit, _callback);

    }

    /**
     * List Service Allocations
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Service Allocations&lt;/b&gt; for a specified service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Service allocations are used for &lt;b&gt;Event type services only&lt;/b&gt; where the events are offered on specific dates and times. Retrieve all allocations for a location by passing in 0 as the service id.&lt;/p&gt;  &lt;p&gt;The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of  service to list allocations for, 0 for all (required)
     * @param locationId The id of the location. Defaults to the primary location (optional)
     * @param resourceId The id of the resource to filter on (optional)
     * @param startDate Format YYYY-MM-DD. Filter appointments by on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter appointments on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ServiceAllocationListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> service alloaction object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Service was not found </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAllocationListViewModel setupV1ServicesIdAllocationsGet(String id, String locationId, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ServiceAllocationListViewModel> localVarResp = setupV1ServicesIdAllocationsGetWithHttpInfo(id, locationId, resourceId, startDate, endDate, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Service Allocations
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Service Allocations&lt;/b&gt; for a specified service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Service allocations are used for &lt;b&gt;Event type services only&lt;/b&gt; where the events are offered on specific dates and times. Retrieve all allocations for a location by passing in 0 as the service id.&lt;/p&gt;  &lt;p&gt;The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of  service to list allocations for, 0 for all (required)
     * @param locationId The id of the location. Defaults to the primary location (optional)
     * @param resourceId The id of the resource to filter on (optional)
     * @param startDate Format YYYY-MM-DD. Filter appointments by on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter appointments on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;ServiceAllocationListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> service alloaction object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Service was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAllocationListViewModel> setupV1ServicesIdAllocationsGetWithHttpInfo(String id, String locationId, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdAllocationsGetValidateBeforeCall(id, locationId, resourceId, startDate, endDate, offset, limit, null);
        Type localVarReturnType = new TypeToken<ServiceAllocationListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Service Allocations (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Service Allocations&lt;/b&gt; for a specified service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Service allocations are used for &lt;b&gt;Event type services only&lt;/b&gt; where the events are offered on specific dates and times. Retrieve all allocations for a location by passing in 0 as the service id.&lt;/p&gt;  &lt;p&gt;The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of  service to list allocations for, 0 for all (required)
     * @param locationId The id of the location. Defaults to the primary location (optional)
     * @param resourceId The id of the resource to filter on (optional)
     * @param startDate Format YYYY-MM-DD. Filter appointments by on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter appointments on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> service alloaction object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Service was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdAllocationsGetAsync(String id, String locationId, String resourceId, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback<ServiceAllocationListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdAllocationsGetValidateBeforeCall(id, locationId, resourceId, startDate, endDate, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ServiceAllocationListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdAllocationsPost
     * @param id id of service object (required)
     * @param serviceAllocationInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdAllocationsPostCall(String id, ServiceAllocationInputModel serviceAllocationInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceAllocationInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}/allocations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdAllocationsPostValidateBeforeCall(String id, ServiceAllocationInputModel serviceAllocationInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdAllocationsPost(Async)");
        }

        return setupV1ServicesIdAllocationsPostCall(id, serviceAllocationInputModel, _callback);

    }

    /**
     * Create Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a service allocation for a service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Service allocations are used for &lt;b&gt;Event type services only&lt;/b&gt;. Service allocations allow you to specify the time(s) a service is available as opposed to using weekly availability which represents a weekly schedule, ie: Mon-Fri 9am-5pm.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;. Service allocations can be set to specific time ranges or for the whole day by setting startTime&#x3D;0 and endTime&#x3D;2400. Service allocations can repeat for a specific date range instance or set to repeat at a specified frequency.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY ALLOCATIONS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY ALLOCATIONS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;. You must specify the &lt;b&gt;“weekdays”&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY ALLOCATIONS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly. &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want allocated.  If monthDay&#x3D;’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of service object (required)
     * @param serviceAllocationInputModel  (optional)
     * @return ServiceAllocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAllocationViewModel setupV1ServicesIdAllocationsPost(String id, ServiceAllocationInputModel serviceAllocationInputModel) throws ApiException {
        ApiResponse<ServiceAllocationViewModel> localVarResp = setupV1ServicesIdAllocationsPostWithHttpInfo(id, serviceAllocationInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Allocation
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a service allocation for a service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Service allocations are used for &lt;b&gt;Event type services only&lt;/b&gt;. Service allocations allow you to specify the time(s) a service is available as opposed to using weekly availability which represents a weekly schedule, ie: Mon-Fri 9am-5pm.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;. Service allocations can be set to specific time ranges or for the whole day by setting startTime&#x3D;0 and endTime&#x3D;2400. Service allocations can repeat for a specific date range instance or set to repeat at a specified frequency.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY ALLOCATIONS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY ALLOCATIONS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;. You must specify the &lt;b&gt;“weekdays”&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY ALLOCATIONS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly. &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want allocated.  If monthDay&#x3D;’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of service object (required)
     * @param serviceAllocationInputModel  (optional)
     * @return ApiResponse&lt;ServiceAllocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAllocationViewModel> setupV1ServicesIdAllocationsPostWithHttpInfo(String id, ServiceAllocationInputModel serviceAllocationInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdAllocationsPostValidateBeforeCall(id, serviceAllocationInputModel, null);
        Type localVarReturnType = new TypeToken<ServiceAllocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Allocation (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a service allocation for a service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Service allocations are used for &lt;b&gt;Event type services only&lt;/b&gt;. Service allocations allow you to specify the time(s) a service is available as opposed to using weekly availability which represents a weekly schedule, ie: Mon-Fri 9am-5pm.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;. Service allocations can be set to specific time ranges or for the whole day by setting startTime&#x3D;0 and endTime&#x3D;2400. Service allocations can repeat for a specific date range instance or set to repeat at a specified frequency.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the allocation repeats. For example, an interval of 2 for a weekly allocation means that the allocation will repeat every 2nd week beginning at the day specified. A daily allocation with an interval of 10 means the allocation will repeat every 10 days. The interval property applies to all repeat frequencies.  &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY ALLOCATIONS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY ALLOCATIONS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;. You must specify the &lt;b&gt;“weekdays”&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;.  For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the allocation date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY ALLOCATIONS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly. &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want allocated.  If monthDay&#x3D;’15’ this means to allocate the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on.  For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits:  day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of service object (required)
     * @param serviceAllocationInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdAllocationsPostAsync(String id, ServiceAllocationInputModel serviceAllocationInputModel, final ApiCallback<ServiceAllocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdAllocationsPostValidateBeforeCall(id, serviceAllocationInputModel, _callback);
        Type localVarReturnType = new TypeToken<ServiceAllocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdAvailabilityGet
     * @param id id of service object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdAvailabilityGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}/availability"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdAvailabilityGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdAvailabilityGet(Async)");
        }

        return setupV1ServicesIdAvailabilityGetCall(id, _callback);

    }

    /**
     * Get Weekly Availability
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Weekly Service Availability&lt;/b&gt; for an appointment service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Weekly availability is returned for services where the Type &#x3D; 1. For event type services, where service Type &#x3D; 2, refer to the &lt;i&gt;GET ​/setup​/v1​/services​/{id}​/allocations&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of service object (required)
     * @return ServiceAvailabilityViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAvailabilityViewModel setupV1ServicesIdAvailabilityGet(String id) throws ApiException {
        ApiResponse<ServiceAvailabilityViewModel> localVarResp = setupV1ServicesIdAvailabilityGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Weekly Availability
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Weekly Service Availability&lt;/b&gt; for an appointment service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Weekly availability is returned for services where the Type &#x3D; 1. For event type services, where service Type &#x3D; 2, refer to the &lt;i&gt;GET ​/setup​/v1​/services​/{id}​/allocations&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of service object (required)
     * @return ApiResponse&lt;ServiceAvailabilityViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAvailabilityViewModel> setupV1ServicesIdAvailabilityGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdAvailabilityGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceAvailabilityViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Weekly Availability (asynchronously)
     * &lt;p&gt;Use this endpoint to return the &lt;b&gt;Weekly Service Availability&lt;/b&gt; for an appointment service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Weekly availability is returned for services where the Type &#x3D; 1. For event type services, where service Type &#x3D; 2, refer to the &lt;i&gt;GET ​/setup​/v1​/services​/{id}​/allocations&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of service object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdAvailabilityGetAsync(String id, final ApiCallback<ServiceAvailabilityViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdAvailabilityGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceAvailabilityViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdAvailabilityPut
     * @param id id of service object (required)
     * @param availabilityInputModel Service Availability Input Model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdAvailabilityPutCall(String id, AvailabilityInputModel availabilityInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = availabilityInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}/availability"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdAvailabilityPutValidateBeforeCall(String id, AvailabilityInputModel availabilityInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdAvailabilityPut(Async)");
        }

        return setupV1ServicesIdAvailabilityPutCall(id, availabilityInputModel, _callback);

    }

    /**
     * Update Weekly Availability
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; service weekly availability. A valid &lt;b&gt;service id&lt;/b&gt; is required. The availability day entries are created when a service object is created.&lt;/p&gt;  &lt;p&gt;To update weekly availability hours, all days of the week must be provided. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri&lt;/b&gt; and &lt;b&gt;sat&lt;/b&gt;. The &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; fields are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. We support 24-hour availability, set startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0.&lt;/p&gt;  &lt;p&gt;If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the business location.&lt;/p&gt;
     * @param id id of service object (required)
     * @param availabilityInputModel Service Availability Input Model (optional)
     * @return ServiceAvailabilityViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAvailabilityViewModel setupV1ServicesIdAvailabilityPut(String id, AvailabilityInputModel availabilityInputModel) throws ApiException {
        ApiResponse<ServiceAvailabilityViewModel> localVarResp = setupV1ServicesIdAvailabilityPutWithHttpInfo(id, availabilityInputModel);
        return localVarResp.getData();
    }

    /**
     * Update Weekly Availability
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; service weekly availability. A valid &lt;b&gt;service id&lt;/b&gt; is required. The availability day entries are created when a service object is created.&lt;/p&gt;  &lt;p&gt;To update weekly availability hours, all days of the week must be provided. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri&lt;/b&gt; and &lt;b&gt;sat&lt;/b&gt;. The &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; fields are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. We support 24-hour availability, set startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0.&lt;/p&gt;  &lt;p&gt;If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the business location.&lt;/p&gt;
     * @param id id of service object (required)
     * @param availabilityInputModel Service Availability Input Model (optional)
     * @return ApiResponse&lt;ServiceAvailabilityViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAvailabilityViewModel> setupV1ServicesIdAvailabilityPutWithHttpInfo(String id, AvailabilityInputModel availabilityInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdAvailabilityPutValidateBeforeCall(id, availabilityInputModel, null);
        Type localVarReturnType = new TypeToken<ServiceAvailabilityViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Weekly Availability (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; service weekly availability. A valid &lt;b&gt;service id&lt;/b&gt; is required. The availability day entries are created when a service object is created.&lt;/p&gt;  &lt;p&gt;To update weekly availability hours, all days of the week must be provided. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri&lt;/b&gt; and &lt;b&gt;sat&lt;/b&gt;. The &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; fields are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. We support 24-hour availability, set startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0.&lt;/p&gt;  &lt;p&gt;If you require times in between specified hours to be unavailable, use the resource blocks endpoints. Times entered represent the timezone of the business location.&lt;/p&gt;
     * @param id id of service object (required)
     * @param availabilityInputModel Service Availability Input Model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdAvailabilityPutAsync(String id, AvailabilityInputModel availabilityInputModel, final ApiCallback<ServiceAvailabilityViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdAvailabilityPutValidateBeforeCall(id, availabilityInputModel, _callback);
        Type localVarReturnType = new TypeToken<ServiceAvailabilityViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdBlockPost
     * @param id id of service object (required)
     * @param serviceBlockInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdBlockPostCall(String id, ServiceBlockInputModel serviceBlockInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceBlockInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}/block"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdBlockPostValidateBeforeCall(String id, ServiceBlockInputModel serviceBlockInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdBlockPost(Async)");
        }

        return setupV1ServicesIdBlockPostCall(id, serviceBlockInputModel, _callback);

    }

    /**
     * Create Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Service Block. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;Service blocks can be set to specific time ranges or for the whole day. To block a whole day set startTime to 0 and endTime to 2400.&lt;/p&gt;  &lt;p&gt;Service blocks can be for a specific date range instance or set to repeat at a specified frequency. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY BLOCKS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY BLOCKS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;.  You must specify the &lt;b&gt;weekdays&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;. For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY BLOCKS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly, &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want blocked.  If monthDay&#x3D;’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of service object (required)
     * @param serviceBlockInputModel  (optional)
     * @return ServiceBlockViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceBlockViewModel setupV1ServicesIdBlockPost(String id, ServiceBlockInputModel serviceBlockInputModel) throws ApiException {
        ApiResponse<ServiceBlockViewModel> localVarResp = setupV1ServicesIdBlockPostWithHttpInfo(id, serviceBlockInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Block
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Service Block. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;Service blocks can be set to specific time ranges or for the whole day. To block a whole day set startTime to 0 and endTime to 2400.&lt;/p&gt;  &lt;p&gt;Service blocks can be for a specific date range instance or set to repeat at a specified frequency. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY BLOCKS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY BLOCKS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;.  You must specify the &lt;b&gt;weekdays&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;. For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY BLOCKS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly, &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want blocked.  If monthDay&#x3D;’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of service object (required)
     * @param serviceBlockInputModel  (optional)
     * @return ApiResponse&lt;ServiceBlockViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceBlockViewModel> setupV1ServicesIdBlockPostWithHttpInfo(String id, ServiceBlockInputModel serviceBlockInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdBlockPostValidateBeforeCall(id, serviceBlockInputModel, null);
        Type localVarReturnType = new TypeToken<ServiceBlockViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Block (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a Service Block. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;startDate, endDate, startTime, endTime&lt;/b&gt; and &lt;b&gt;reason&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;Service blocks can be set to specific time ranges or for the whole day. To block a whole day set startTime to 0 and endTime to 2400.&lt;/p&gt;  &lt;p&gt;Service blocks can be for a specific date range instance or set to repeat at a specified frequency. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeat object: (repeats &#x3D; true)&lt;/b&gt;  &lt;/p&gt;  &lt;p&gt;The &lt;b&gt;frequency&lt;/b&gt; can be set to a value of &lt;b&gt;D, W or M&lt;/b&gt; for &lt;b&gt;Day, Week&lt;/b&gt; or &lt;b&gt;Month&lt;/b&gt; respectively.&lt;/p&gt;  &lt;p&gt;Use the &lt;b&gt;interval&lt;/b&gt; property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. &lt;b&gt;If using the repeat functionality an interval value is required&lt;/b&gt;.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;DAILY BLOCKS&lt;/b&gt;: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;WEEKLY BLOCKS&lt;/b&gt;: Will repeat only on the specified days of the week for the date range specified. For weekly the &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“W”&lt;/b&gt;.  You must specify the &lt;b&gt;weekdays&lt;/b&gt; parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are &lt;b&gt;0,1,2,3,4,5,6&lt;/b&gt; where &lt;b&gt;0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday&lt;/b&gt;. For example, a weekly frequency with an interval of “1”, and an entry of weekdays &#x3D; “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;MONTHLY BLOCKS&lt;/b&gt;: Will repeat either on the day of the month specified in the &lt;b&gt;monthDay&lt;/b&gt; property or on the day of the week and week of the month specified by the &lt;b&gt;monthType&lt;/b&gt; property.  In both cases &lt;b&gt;frequency&lt;/b&gt; is required and should be set to &lt;b&gt;“M”&lt;/b&gt;, monthly, &lt;b&gt;monthDay&lt;/b&gt; is the day of the month you want blocked.  If monthDay&#x3D;’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: &lt;b&gt;D for Day of Month&lt;/b&gt; or &lt;b&gt;W for Week of Month.&lt;/b&gt; For &lt;b&gt;monthType D&lt;/b&gt;, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For &lt;b&gt;monthType M&lt;/b&gt;, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0&#x3D;Sunday, 1&#x3D;Monday, 2&#x3D;Tuesday, 3&#x3D;Wednesday, 4&#x3D;Thursday, 5&#x3D;Friday, 6&#x3D;Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType&#x3D;”M” and monthDay&#x3D;”43”.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Repeats will end on the date specified by the end date.&lt;/b&gt;  &lt;/p&gt;
     * @param id id of service object (required)
     * @param serviceBlockInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdBlockPostAsync(String id, ServiceBlockInputModel serviceBlockInputModel, final ApiCallback<ServiceBlockViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdBlockPostValidateBeforeCall(id, serviceBlockInputModel, _callback);
        Type localVarReturnType = new TypeToken<ServiceBlockViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdBlocksGet
     * @param id id of service to list blocks for (required)
     * @param startDate Format YYYY-MM-DD. Filter blocks on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> service block object&#39;s </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Service was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdBlocksGetCall(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}/blocks"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdBlocksGetValidateBeforeCall(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdBlocksGet(Async)");
        }

        return setupV1ServicesIdBlocksGetCall(id, startDate, endDate, offset, limit, _callback);

    }

    /**
     * List Service Blocks
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Service Blocks&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of service to list blocks for (required)
     * @param startDate Format YYYY-MM-DD. Filter blocks on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ServiceBlockListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> service block object&#39;s </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Service was not found </td><td>  -  </td></tr>
     </table>
     */
    public ServiceBlockListViewModel setupV1ServicesIdBlocksGet(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ServiceBlockListViewModel> localVarResp = setupV1ServicesIdBlocksGetWithHttpInfo(id, startDate, endDate, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Service Blocks
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Service Blocks&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of service to list blocks for (required)
     * @param startDate Format YYYY-MM-DD. Filter blocks on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;ServiceBlockListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> service block object&#39;s </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Service was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceBlockListViewModel> setupV1ServicesIdBlocksGetWithHttpInfo(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdBlocksGetValidateBeforeCall(id, startDate, endDate, offset, limit, null);
        Type localVarReturnType = new TypeToken<ServiceBlockListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Service Blocks (asynchronously)
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Service Blocks&lt;/b&gt;. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of service to list blocks for (required)
     * @param startDate Format YYYY-MM-DD. Filter blocks on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD. Filter on/before endDate (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> service block object&#39;s </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Service was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdBlocksGetAsync(String id, OffsetDateTime startDate, OffsetDateTime endDate, Integer offset, Integer limit, final ApiCallback<ServiceBlockListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdBlocksGetValidateBeforeCall(id, startDate, endDate, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ServiceBlockListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdCalendarGet
     * @param id id of service object (required)
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdCalendarGetCall(String id, String locationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}/calendar"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdCalendarGetValidateBeforeCall(String id, String locationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdCalendarGet(Async)");
        }

        return setupV1ServicesIdCalendarGetCall(id, locationId, _callback);

    }

    /**
     * Get Linked Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get the Linked Calendar&lt;/b&gt; for the service requested. A valid &lt;b&gt;service id&lt;/b&gt; is required. A service can only be linked to one calendar in a location.&lt;/p&gt;
     * @param id id of service object (required)
     * @param locationId id of business location, defaults to primary business location (optional)
     * @return ServiceCalendarViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceCalendarViewModel setupV1ServicesIdCalendarGet(String id, String locationId) throws ApiException {
        ApiResponse<ServiceCalendarViewModel> localVarResp = setupV1ServicesIdCalendarGetWithHttpInfo(id, locationId);
        return localVarResp.getData();
    }

    /**
     * Get Linked Calendar
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get the Linked Calendar&lt;/b&gt; for the service requested. A valid &lt;b&gt;service id&lt;/b&gt; is required. A service can only be linked to one calendar in a location.&lt;/p&gt;
     * @param id id of service object (required)
     * @param locationId id of business location, defaults to primary business location (optional)
     * @return ApiResponse&lt;ServiceCalendarViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceCalendarViewModel> setupV1ServicesIdCalendarGetWithHttpInfo(String id, String locationId) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdCalendarGetValidateBeforeCall(id, locationId, null);
        Type localVarReturnType = new TypeToken<ServiceCalendarViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Linked Calendar (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get the Linked Calendar&lt;/b&gt; for the service requested. A valid &lt;b&gt;service id&lt;/b&gt; is required. A service can only be linked to one calendar in a location.&lt;/p&gt;
     * @param id id of service object (required)
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdCalendarGetAsync(String id, String locationId, final ApiCallback<ServiceCalendarViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdCalendarGetValidateBeforeCall(id, locationId, _callback);
        Type localVarReturnType = new TypeToken<ServiceCalendarViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdDelete
     * @param id id of service object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdDelete(Async)");
        }

        return setupV1ServicesIdDeleteCall(id, _callback);

    }

    /**
     * Delete Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a service object. A valid &lt;b&gt;service id&lt;/b&gt; is required. The service is not permanently deleted and can be recovered by using the &lt;i&gt;PUT /setup​/v1​/services​/{id}​/recover&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of service object (required)
     * @return ServiceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceViewModel setupV1ServicesIdDelete(String id) throws ApiException {
        ApiResponse<ServiceViewModel> localVarResp = setupV1ServicesIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a service object. A valid &lt;b&gt;service id&lt;/b&gt; is required. The service is not permanently deleted and can be recovered by using the &lt;i&gt;PUT /setup​/v1​/services​/{id}​/recover&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of service object (required)
     * @return ApiResponse&lt;ServiceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceViewModel> setupV1ServicesIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Service (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a service object. A valid &lt;b&gt;service id&lt;/b&gt; is required. The service is not permanently deleted and can be recovered by using the &lt;i&gt;PUT /setup​/v1​/services​/{id}​/recover&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of service object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdDeleteAsync(String id, final ApiCallback<ServiceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdDeleteimageDelete
     * @param id id of service object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdDeleteimageDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}/deleteimage"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdDeleteimageDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdDeleteimageDelete(Async)");
        }

        return setupV1ServicesIdDeleteimageDeleteCall(id, _callback);

    }

    /**
     * Delete Service Image
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a previously uploaded service image. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of service object (required)
     * @return ServiceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceViewModel setupV1ServicesIdDeleteimageDelete(String id) throws ApiException {
        ApiResponse<ServiceViewModel> localVarResp = setupV1ServicesIdDeleteimageDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Service Image
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a previously uploaded service image. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of service object (required)
     * @return ApiResponse&lt;ServiceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceViewModel> setupV1ServicesIdDeleteimageDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdDeleteimageDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Service Image (asynchronously)
     * &lt;p&gt;Use this endpoint to permanently &lt;b&gt;Delete&lt;/b&gt; a previously uploaded service image. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of service object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdDeleteimageDeleteAsync(String id, final ApiCallback<ServiceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdDeleteimageDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdGet
     * @param id id of service object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdGet(Async)");
        }

        return setupV1ServicesIdGetCall(id, _callback);

    }

    /**
     * Get Service
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Service&lt;/b&gt; object. A valid &lt;b&gt;service id&lt;/b&gt; is required. Find service id&#39;s by using the &lt;i&gt;GET /setup/v1/services&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of service object (required)
     * @return ServiceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceViewModel setupV1ServicesIdGet(Integer id) throws ApiException {
        ApiResponse<ServiceViewModel> localVarResp = setupV1ServicesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Service
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Service&lt;/b&gt; object. A valid &lt;b&gt;service id&lt;/b&gt; is required. Find service id&#39;s by using the &lt;i&gt;GET /setup/v1/services&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of service object (required)
     * @return ApiResponse&lt;ServiceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceViewModel> setupV1ServicesIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Service (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Service&lt;/b&gt; object. A valid &lt;b&gt;service id&lt;/b&gt; is required. Find service id&#39;s by using the &lt;i&gt;GET /setup/v1/services&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of service object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdGetAsync(Integer id, final ApiCallback<ServiceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdPut
     * @param id  (required)
     * @param serviceUpdateModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdPutCall(String id, ServiceUpdateModel serviceUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdPutValidateBeforeCall(String id, ServiceUpdateModel serviceUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdPut(Async)");
        }

        return setupV1ServicesIdPutCall(id, serviceUpdateModel, _callback);

    }

    /**
     * Update Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a service object. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id  (required)
     * @param serviceUpdateModel  (optional)
     * @return ServiceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceViewModel setupV1ServicesIdPut(String id, ServiceUpdateModel serviceUpdateModel) throws ApiException {
        ApiResponse<ServiceViewModel> localVarResp = setupV1ServicesIdPutWithHttpInfo(id, serviceUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a service object. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id  (required)
     * @param serviceUpdateModel  (optional)
     * @return ApiResponse&lt;ServiceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceViewModel> setupV1ServicesIdPutWithHttpInfo(String id, ServiceUpdateModel serviceUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdPutValidateBeforeCall(id, serviceUpdateModel, null);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Service (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a service object. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id  (required)
     * @param serviceUpdateModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdPutAsync(String id, ServiceUpdateModel serviceUpdateModel, final ApiCallback<ServiceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdPutValidateBeforeCall(id, serviceUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdRecoverPut
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdRecoverPutCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}/recover"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdRecoverPutValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdRecoverPut(Async)");
        }

        return setupV1ServicesIdRecoverPutCall(id, _callback);

    }

    /**
     * Recover Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted service object. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id  (required)
     * @return ServiceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceViewModel setupV1ServicesIdRecoverPut(String id) throws ApiException {
        ApiResponse<ServiceViewModel> localVarResp = setupV1ServicesIdRecoverPutWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Recover Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted service object. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id  (required)
     * @return ApiResponse&lt;ServiceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceViewModel> setupV1ServicesIdRecoverPutWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdRecoverPutValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recover Service (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted service object. A valid &lt;b&gt;service id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdRecoverPutAsync(String id, final ApiCallback<ServiceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdRecoverPutValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdResourcesGet
     * @param id id of service object (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdResourcesGetCall(String id, Integer offset, Integer limit, String googleAuthReturnUrl, String outlookAuthReturnUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}/resources"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (googleAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("googleAuthReturnUrl", googleAuthReturnUrl));
        }

        if (outlookAuthReturnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outlookAuthReturnUrl", outlookAuthReturnUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdResourcesGetValidateBeforeCall(String id, Integer offset, Integer limit, String googleAuthReturnUrl, String outlookAuthReturnUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdResourcesGet(Async)");
        }

        return setupV1ServicesIdResourcesGetCall(id, offset, limit, googleAuthReturnUrl, outlookAuthReturnUrl, _callback);

    }

    /**
     * List Resources for Service
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resources&lt;/b&gt; that provide the requested service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of service object (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @return ResourceListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListViewModel setupV1ServicesIdResourcesGet(String id, Integer offset, Integer limit, String googleAuthReturnUrl, String outlookAuthReturnUrl) throws ApiException {
        ApiResponse<ResourceListViewModel> localVarResp = setupV1ServicesIdResourcesGetWithHttpInfo(id, offset, limit, googleAuthReturnUrl, outlookAuthReturnUrl);
        return localVarResp.getData();
    }

    /**
     * List Resources for Service
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resources&lt;/b&gt; that provide the requested service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of service object (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @return ApiResponse&lt;ResourceListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListViewModel> setupV1ServicesIdResourcesGetWithHttpInfo(String id, Integer offset, Integer limit, String googleAuthReturnUrl, String outlookAuthReturnUrl) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdResourcesGetValidateBeforeCall(id, offset, limit, googleAuthReturnUrl, outlookAuthReturnUrl, null);
        Type localVarReturnType = new TypeToken<ResourceListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Resources for Service (asynchronously)
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Resources&lt;/b&gt; that provide the requested service. A valid &lt;b&gt;service id&lt;/b&gt; is required. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of service object (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param googleAuthReturnUrl Google calendar authorization return url (optional)
     * @param outlookAuthReturnUrl Outlook calendar authorization return url (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdResourcesGetAsync(String id, Integer offset, Integer limit, String googleAuthReturnUrl, String outlookAuthReturnUrl, final ApiCallback<ResourceListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdResourcesGetValidateBeforeCall(id, offset, limit, googleAuthReturnUrl, outlookAuthReturnUrl, _callback);
        Type localVarReturnType = new TypeToken<ResourceListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesIdUploadimagePost
     * @param id id of service object (required)
     * @param serviceImageInputModel Input model for image upload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdUploadimagePostCall(String id, ServiceImageInputModel serviceImageInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceImageInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/services/{id}/uploadimage"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesIdUploadimagePostValidateBeforeCall(String id, ServiceImageInputModel serviceImageInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1ServicesIdUploadimagePost(Async)");
        }

        return setupV1ServicesIdUploadimagePostCall(id, serviceImageInputModel, _callback);

    }

    /**
     * Upload Service Image
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Upload&lt;/b&gt; an image to the service. A valid &lt;b&gt;service id&lt;/b&gt; is required. You must convert the image to a &lt;b&gt;base64 encoded string&lt;/b&gt; and pass that string as input along with your &lt;b&gt;filename&lt;/b&gt;.&lt;/p&gt;
     * @param id id of service object (required)
     * @param serviceImageInputModel Input model for image upload (optional)
     * @return ServiceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceViewModel setupV1ServicesIdUploadimagePost(String id, ServiceImageInputModel serviceImageInputModel) throws ApiException {
        ApiResponse<ServiceViewModel> localVarResp = setupV1ServicesIdUploadimagePostWithHttpInfo(id, serviceImageInputModel);
        return localVarResp.getData();
    }

    /**
     * Upload Service Image
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Upload&lt;/b&gt; an image to the service. A valid &lt;b&gt;service id&lt;/b&gt; is required. You must convert the image to a &lt;b&gt;base64 encoded string&lt;/b&gt; and pass that string as input along with your &lt;b&gt;filename&lt;/b&gt;.&lt;/p&gt;
     * @param id id of service object (required)
     * @param serviceImageInputModel Input model for image upload (optional)
     * @return ApiResponse&lt;ServiceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceViewModel> setupV1ServicesIdUploadimagePostWithHttpInfo(String id, ServiceImageInputModel serviceImageInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesIdUploadimagePostValidateBeforeCall(id, serviceImageInputModel, null);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload Service Image (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Upload&lt;/b&gt; an image to the service. A valid &lt;b&gt;service id&lt;/b&gt; is required. You must convert the image to a &lt;b&gt;base64 encoded string&lt;/b&gt; and pass that string as input along with your &lt;b&gt;filename&lt;/b&gt;.&lt;/p&gt;
     * @param id id of service object (required)
     * @param serviceImageInputModel Input model for image upload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesIdUploadimagePostAsync(String id, ServiceImageInputModel serviceImageInputModel, final ApiCallback<ServiceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesIdUploadimagePostValidateBeforeCall(id, serviceImageInputModel, _callback);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1ServicesPost
     * @param serviceInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesPostCall(ServiceInputModel serviceInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1ServicesPostValidateBeforeCall(ServiceInputModel serviceInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1ServicesPostCall(serviceInputModel, _callback);

    }

    /**
     * Create Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new service. If not specified, the business location defaults to the primary business location. Note: Posting a service to the Primary Business Location will scope as company scoped and make the service available to all locations. If you want a service to only be available from a specific location, include the business location id.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;Name&lt;/b&gt; and &lt;b&gt;Duration&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;The service &lt;b&gt;Type&lt;/b&gt; is either, &lt;b&gt;1 &#x3D; Appointment&lt;/b&gt; or &lt;b&gt;2 &#x3D; Event&lt;/b&gt;. Default is 1 if not specified.&lt;/p&gt;  &lt;p&gt;For type &#x3D; 1, Appointments - Create an availability entry for each weekday to provide the service for. &lt;b&gt;All days of the week must be provided when adding service availability.&lt;/b&gt; Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri&lt;/b&gt; and &lt;b&gt;sat&lt;/b&gt;. Start and End Times are entered in military format. e.g., 800 is 8:00am, 2230 is 10:30pm. If not provided, it defaults to the primary location business hours.&lt;/p&gt;  &lt;p&gt;We support 24-hour availability, set startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0. If you require times in between specified hours to be unavailable, use the service block endpoint at: &lt;i&gt;POST ​/setup​/v1​/services​/{id}​/block&lt;/i&gt;.&lt;/p&gt;  &lt;p&gt;For type &#x3D; 2, Events - Create service allocations for their availability. Refer to the: &lt;i&gt;POST /setup​/v1​/services​/{id}​/allocations&lt;/i&gt; to set up service allocations for the event.&lt;/p&gt;  &lt;p&gt;Options are available for customer selected durations, for details: &lt;a href&#x3D;\&quot;https://docs.onsched.com/docs/services-overview#variable-duration\&quot;&gt;Variable Duration Overview&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Additional parameters include but are not limited to bookingLimit, maxCapacity and maxGroupSize. For details: &lt;a href&#x3D;\&quot;https://docs.onsched.com/docs/service-max-capacity\&quot;&gt;Service Limits Overview&lt;/a&gt;&lt;/p&gt;
     * @param serviceInputModel  (optional)
     * @return ServiceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceViewModel setupV1ServicesPost(ServiceInputModel serviceInputModel) throws ApiException {
        ApiResponse<ServiceViewModel> localVarResp = setupV1ServicesPostWithHttpInfo(serviceInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new service. If not specified, the business location defaults to the primary business location. Note: Posting a service to the Primary Business Location will scope as company scoped and make the service available to all locations. If you want a service to only be available from a specific location, include the business location id.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;Name&lt;/b&gt; and &lt;b&gt;Duration&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;The service &lt;b&gt;Type&lt;/b&gt; is either, &lt;b&gt;1 &#x3D; Appointment&lt;/b&gt; or &lt;b&gt;2 &#x3D; Event&lt;/b&gt;. Default is 1 if not specified.&lt;/p&gt;  &lt;p&gt;For type &#x3D; 1, Appointments - Create an availability entry for each weekday to provide the service for. &lt;b&gt;All days of the week must be provided when adding service availability.&lt;/b&gt; Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri&lt;/b&gt; and &lt;b&gt;sat&lt;/b&gt;. Start and End Times are entered in military format. e.g., 800 is 8:00am, 2230 is 10:30pm. If not provided, it defaults to the primary location business hours.&lt;/p&gt;  &lt;p&gt;We support 24-hour availability, set startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0. If you require times in between specified hours to be unavailable, use the service block endpoint at: &lt;i&gt;POST ​/setup​/v1​/services​/{id}​/block&lt;/i&gt;.&lt;/p&gt;  &lt;p&gt;For type &#x3D; 2, Events - Create service allocations for their availability. Refer to the: &lt;i&gt;POST /setup​/v1​/services​/{id}​/allocations&lt;/i&gt; to set up service allocations for the event.&lt;/p&gt;  &lt;p&gt;Options are available for customer selected durations, for details: &lt;a href&#x3D;\&quot;https://docs.onsched.com/docs/services-overview#variable-duration\&quot;&gt;Variable Duration Overview&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Additional parameters include but are not limited to bookingLimit, maxCapacity and maxGroupSize. For details: &lt;a href&#x3D;\&quot;https://docs.onsched.com/docs/service-max-capacity\&quot;&gt;Service Limits Overview&lt;/a&gt;&lt;/p&gt;
     * @param serviceInputModel  (optional)
     * @return ApiResponse&lt;ServiceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceViewModel> setupV1ServicesPostWithHttpInfo(ServiceInputModel serviceInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1ServicesPostValidateBeforeCall(serviceInputModel, null);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Service (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new service. If not specified, the business location defaults to the primary business location. Note: Posting a service to the Primary Business Location will scope as company scoped and make the service available to all locations. If you want a service to only be available from a specific location, include the business location id.&lt;/p&gt;  &lt;p&gt;Required fields: &lt;b&gt;Name&lt;/b&gt; and &lt;b&gt;Duration&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;The service &lt;b&gt;Type&lt;/b&gt; is either, &lt;b&gt;1 &#x3D; Appointment&lt;/b&gt; or &lt;b&gt;2 &#x3D; Event&lt;/b&gt;. Default is 1 if not specified.&lt;/p&gt;  &lt;p&gt;For type &#x3D; 1, Appointments - Create an availability entry for each weekday to provide the service for. &lt;b&gt;All days of the week must be provided when adding service availability.&lt;/b&gt; Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri&lt;/b&gt; and &lt;b&gt;sat&lt;/b&gt;. Start and End Times are entered in military format. e.g., 800 is 8:00am, 2230 is 10:30pm. If not provided, it defaults to the primary location business hours.&lt;/p&gt;  &lt;p&gt;We support 24-hour availability, set startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0. If you require times in between specified hours to be unavailable, use the service block endpoint at: &lt;i&gt;POST ​/setup​/v1​/services​/{id}​/block&lt;/i&gt;.&lt;/p&gt;  &lt;p&gt;For type &#x3D; 2, Events - Create service allocations for their availability. Refer to the: &lt;i&gt;POST /setup​/v1​/services​/{id}​/allocations&lt;/i&gt; to set up service allocations for the event.&lt;/p&gt;  &lt;p&gt;Options are available for customer selected durations, for details: &lt;a href&#x3D;\&quot;https://docs.onsched.com/docs/services-overview#variable-duration\&quot;&gt;Variable Duration Overview&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Additional parameters include but are not limited to bookingLimit, maxCapacity and maxGroupSize. For details: &lt;a href&#x3D;\&quot;https://docs.onsched.com/docs/service-max-capacity\&quot;&gt;Service Limits Overview&lt;/a&gt;&lt;/p&gt;
     * @param serviceInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1ServicesPostAsync(ServiceInputModel serviceInputModel, final ApiCallback<ServiceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1ServicesPostValidateBeforeCall(serviceInputModel, _callback);
        Type localVarReturnType = new TypeToken<ServiceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
