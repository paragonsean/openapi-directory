/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppointmentListViewModel;
import org.openapitools.client.model.AppointmentViewModel;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppointmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppointmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppointmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for setupV1AppointmentsGet
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param email Filter appointments by email address (optional)
     * @param lastname Filter appointments by lastname or part of (optional)
     * @param serviceId Filter appointments by service (optional)
     * @param calendarId Filter appointments by calendar (optional)
     * @param resourceId Filter appointments by resource (optional)
     * @param customerId Filter appointments by customer (optional)
     * @param serviceAllocationId Filter appointments by service allocation (optional)
     * @param startDate Format YYYY-MM-DD: Filter appointments by on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD: Filter appointments on/before endDate (optional)
     * @param status Filter appointments by status: IN, BK, CN, RE, RS (optional)
     * @param bookedBy Filter appointments by user email who booked (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1AppointmentsGetCall(String locationId, String email, String lastname, String serviceId, String calendarId, String resourceId, String customerId, String serviceAllocationId, OffsetDateTime startDate, OffsetDateTime endDate, String status, String bookedBy, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/appointments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationId", locationId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (lastname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastname", lastname));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceId", serviceId));
        }

        if (calendarId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calendarId", calendarId));
        }

        if (resourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceId", resourceId));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (serviceAllocationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceAllocationId", serviceAllocationId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (bookedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookedBy", bookedBy));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1AppointmentsGetValidateBeforeCall(String locationId, String email, String lastname, String serviceId, String calendarId, String resourceId, String customerId, String serviceAllocationId, OffsetDateTime startDate, OffsetDateTime endDate, String status, String bookedBy, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return setupV1AppointmentsGetCall(locationId, email, lastname, serviceId, calendarId, resourceId, customerId, serviceAllocationId, startDate, endDate, status, bookedBy, offset, limit, _callback);

    }

    /**
     * List Appointments
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Appointments&lt;/b&gt;. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param email Filter appointments by email address (optional)
     * @param lastname Filter appointments by lastname or part of (optional)
     * @param serviceId Filter appointments by service (optional)
     * @param calendarId Filter appointments by calendar (optional)
     * @param resourceId Filter appointments by resource (optional)
     * @param customerId Filter appointments by customer (optional)
     * @param serviceAllocationId Filter appointments by service allocation (optional)
     * @param startDate Format YYYY-MM-DD: Filter appointments by on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD: Filter appointments on/before endDate (optional)
     * @param status Filter appointments by status: IN, BK, CN, RE, RS (optional)
     * @param bookedBy Filter appointments by user email who booked (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return AppointmentListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppointmentListViewModel setupV1AppointmentsGet(String locationId, String email, String lastname, String serviceId, String calendarId, String resourceId, String customerId, String serviceAllocationId, OffsetDateTime startDate, OffsetDateTime endDate, String status, String bookedBy, Integer offset, Integer limit) throws ApiException {
        ApiResponse<AppointmentListViewModel> localVarResp = setupV1AppointmentsGetWithHttpInfo(locationId, email, lastname, serviceId, calendarId, resourceId, customerId, serviceAllocationId, startDate, endDate, status, bookedBy, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Appointments
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Appointments&lt;/b&gt;. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param email Filter appointments by email address (optional)
     * @param lastname Filter appointments by lastname or part of (optional)
     * @param serviceId Filter appointments by service (optional)
     * @param calendarId Filter appointments by calendar (optional)
     * @param resourceId Filter appointments by resource (optional)
     * @param customerId Filter appointments by customer (optional)
     * @param serviceAllocationId Filter appointments by service allocation (optional)
     * @param startDate Format YYYY-MM-DD: Filter appointments by on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD: Filter appointments on/before endDate (optional)
     * @param status Filter appointments by status: IN, BK, CN, RE, RS (optional)
     * @param bookedBy Filter appointments by user email who booked (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;AppointmentListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppointmentListViewModel> setupV1AppointmentsGetWithHttpInfo(String locationId, String email, String lastname, String serviceId, String calendarId, String resourceId, String customerId, String serviceAllocationId, OffsetDateTime startDate, OffsetDateTime endDate, String status, String bookedBy, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1AppointmentsGetValidateBeforeCall(locationId, email, lastname, serviceId, calendarId, resourceId, customerId, serviceAllocationId, startDate, endDate, status, bookedBy, offset, limit, null);
        Type localVarReturnType = new TypeToken<AppointmentListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Appointments (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Appointments&lt;/b&gt;. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: &lt;a href&#x3D;\&quot;https://onsched.readme.io/docs/appointments-overview\&quot;&gt;Appointments Overview&lt;/a&gt;&lt;/p&gt;
     * @param locationId id of business location, defaults to primary business location (optional)
     * @param email Filter appointments by email address (optional)
     * @param lastname Filter appointments by lastname or part of (optional)
     * @param serviceId Filter appointments by service (optional)
     * @param calendarId Filter appointments by calendar (optional)
     * @param resourceId Filter appointments by resource (optional)
     * @param customerId Filter appointments by customer (optional)
     * @param serviceAllocationId Filter appointments by service allocation (optional)
     * @param startDate Format YYYY-MM-DD: Filter appointments by on/after startDate (optional)
     * @param endDate Format YYYY-MM-DD: Filter appointments on/before endDate (optional)
     * @param status Filter appointments by status: IN, BK, CN, RE, RS (optional)
     * @param bookedBy Filter appointments by user email who booked (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1AppointmentsGetAsync(String locationId, String email, String lastname, String serviceId, String calendarId, String resourceId, String customerId, String serviceAllocationId, OffsetDateTime startDate, OffsetDateTime endDate, String status, String bookedBy, Integer offset, Integer limit, final ApiCallback<AppointmentListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1AppointmentsGetValidateBeforeCall(locationId, email, lastname, serviceId, calendarId, resourceId, customerId, serviceAllocationId, startDate, endDate, status, bookedBy, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<AppointmentListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1AppointmentsIdGet
     * @param id id of appointment object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1AppointmentsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/appointments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1AppointmentsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1AppointmentsIdGet(Async)");
        }

        return setupV1AppointmentsIdGetCall(id, _callback);

    }

    /**
     * Get Appointment
     * &lt;p&gt;Use this endpoint to return an &lt;b&gt;Appointment&lt;/b&gt; object. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. Find appointment id&#39;s by using the &lt;i&gt;GET​/setup​/v1​/appointments&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of appointment object (required)
     * @return AppointmentViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppointmentViewModel setupV1AppointmentsIdGet(String id) throws ApiException {
        ApiResponse<AppointmentViewModel> localVarResp = setupV1AppointmentsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Appointment
     * &lt;p&gt;Use this endpoint to return an &lt;b&gt;Appointment&lt;/b&gt; object. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. Find appointment id&#39;s by using the &lt;i&gt;GET​/setup​/v1​/appointments&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of appointment object (required)
     * @return ApiResponse&lt;AppointmentViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppointmentViewModel> setupV1AppointmentsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1AppointmentsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Appointment (asynchronously)
     * &lt;p&gt;Use this endpoint to return an &lt;b&gt;Appointment&lt;/b&gt; object. A valid &lt;b&gt;appointment id&lt;/b&gt; is required. Find appointment id&#39;s by using the &lt;i&gt;GET​/setup​/v1​/appointments&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of appointment object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1AppointmentsIdGetAsync(String id, final ApiCallback<AppointmentViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1AppointmentsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1AppointmentsIdReassignResourceResourceIdPut
     * @param id id of appointment object (required)
     * @param resourceId id of target resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1AppointmentsIdReassignResourceResourceIdPutCall(String id, String resourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/appointments/{id}/reassign/resource/{resourceId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1AppointmentsIdReassignResourceResourceIdPutValidateBeforeCall(String id, String resourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1AppointmentsIdReassignResourceResourceIdPut(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling setupV1AppointmentsIdReassignResourceResourceIdPut(Async)");
        }

        return setupV1AppointmentsIdReassignResourceResourceIdPutCall(id, resourceId, _callback);

    }

    /**
     * Reassign Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reassign&lt;/b&gt; an appointment from one resource to another. The result returned is a single appointment that was reassigned to the target resource. A valid &lt;b&gt;appointment id&lt;/b&gt; and &lt;b&gt;resource id&lt;/b&gt; is required. Find appointment id&#39;s by using the &lt;i&gt;GET /setup/v1/appointments&lt;/i&gt; endpoint, find resource id&#39;s by using the &lt;i&gt;GET ​/setup​/v1​/resources&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of appointment object (required)
     * @param resourceId id of target resource (required)
     * @return AppointmentViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppointmentViewModel setupV1AppointmentsIdReassignResourceResourceIdPut(String id, String resourceId) throws ApiException {
        ApiResponse<AppointmentViewModel> localVarResp = setupV1AppointmentsIdReassignResourceResourceIdPutWithHttpInfo(id, resourceId);
        return localVarResp.getData();
    }

    /**
     * Reassign Appointment
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reassign&lt;/b&gt; an appointment from one resource to another. The result returned is a single appointment that was reassigned to the target resource. A valid &lt;b&gt;appointment id&lt;/b&gt; and &lt;b&gt;resource id&lt;/b&gt; is required. Find appointment id&#39;s by using the &lt;i&gt;GET /setup/v1/appointments&lt;/i&gt; endpoint, find resource id&#39;s by using the &lt;i&gt;GET ​/setup​/v1​/resources&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of appointment object (required)
     * @param resourceId id of target resource (required)
     * @return ApiResponse&lt;AppointmentViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppointmentViewModel> setupV1AppointmentsIdReassignResourceResourceIdPutWithHttpInfo(String id, String resourceId) throws ApiException {
        okhttp3.Call localVarCall = setupV1AppointmentsIdReassignResourceResourceIdPutValidateBeforeCall(id, resourceId, null);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reassign Appointment (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Reassign&lt;/b&gt; an appointment from one resource to another. The result returned is a single appointment that was reassigned to the target resource. A valid &lt;b&gt;appointment id&lt;/b&gt; and &lt;b&gt;resource id&lt;/b&gt; is required. Find appointment id&#39;s by using the &lt;i&gt;GET /setup/v1/appointments&lt;/i&gt; endpoint, find resource id&#39;s by using the &lt;i&gt;GET ​/setup​/v1​/resources&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of appointment object (required)
     * @param resourceId id of target resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1AppointmentsIdReassignResourceResourceIdPutAsync(String id, String resourceId, final ApiCallback<AppointmentViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1AppointmentsIdReassignResourceResourceIdPutValidateBeforeCall(id, resourceId, _callback);
        Type localVarReturnType = new TypeToken<AppointmentViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
