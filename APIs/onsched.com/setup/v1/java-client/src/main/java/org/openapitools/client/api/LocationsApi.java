/*
 * OnSched Setup API
 * Build secure and scalable custom apps for onboarding and setup. Our flexible API provides many options for configuration.  <br><br>  Take the API for a test drive. Just click on the Authorize button below and authenticate.   You can access our demo company profile if you are not a customer, or your own profile by using your assigned ClientId and Secret.  <br><br>  The API has two interfaces, consumer and setup.   <ul>  <li>  The consumer interface provides all the endpoints required for implementing consumer booking flows.  </li>  <li>  The setup interface provides endpoints for profile configuration and setup.  </li>  </ul>  Toggle freely between the two interfaces using the swagger tool bar option labelled 'Select a definition'.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppointmentReminderViewModel;
import org.openapitools.client.model.AppointmentRemindersInputModel;
import org.openapitools.client.model.BusinessServiceListViewModel;
import org.openapitools.client.model.BusinessServiceViewModel;
import org.openapitools.client.model.ContentResult;
import org.openapitools.client.model.EmailTemplateInputModel;
import org.openapitools.client.model.EmailTemplateListViewModel;
import org.openapitools.client.model.GoogleServiceAccountCreds;
import org.openapitools.client.model.LocationInputModel;
import org.openapitools.client.model.LocationListViewModel;
import org.openapitools.client.model.LocationUpdateModel;
import org.openapitools.client.model.LocationViewModel;
import org.openapitools.client.model.LocationsInputModel;
import org.openapitools.client.model.MasterEmailTemplateSettingsViewModel;
import org.openapitools.client.model.MasterTemplateSettingsInputModel;
import org.openapitools.client.model.ResourceImageInputModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for setupV1LocationsBulkPost
     * @param locationsInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsBulkPostCall(LocationsInputModel locationsInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationsInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsBulkPostValidateBeforeCall(LocationsInputModel locationsInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1LocationsBulkPostCall(locationsInputModel, _callback);

    }

    /**
     * Create Locations Bulk
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create Bulk&lt;/b&gt; business locations. The posted list of locations cannot exceed 100 location objects per transaction for performance purposes. The result is a list of new business location objects with a GUID assigned to each location.&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;name&lt;/b&gt; and &lt;b&gt;timezoneName&lt;/b&gt; fields are required. The &lt;b&gt;timezoneName&lt;/b&gt; must be expressed as an IANA Timezone e.g., &lt;i&gt;America/New_York&lt;/i&gt;. Refer to: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Timezone Wiki&lt;/a&gt; for a listing of IANA time zones.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Business hours&lt;/b&gt; are set by defining the &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; values for each day available/open. All days of the week must be provided when setting availability. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri and sat&lt;/b&gt;. Start and End Times are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. If there is no physical location and the business hours are irrelevant, set the hours to open 24 hours by setting startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Settings&lt;/b&gt; can be set here. Booking timer minutes, book ahead restrictions and customer bookings per day are all available here. Please read about the settings scope parameter before setting these values as it may simplify your process.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Settings Scope&lt;/b&gt; can be set to the company or the business location level. You can have all locations use the same company level settings or individual business locations can define their own, business location scope. If you want to use the company settings throughout all locations, do not pass in &lt;b&gt;settings element&lt;/b&gt;. To create business location scoped settings, pass in the &lt;b&gt;settings element&lt;/b&gt; with the field values defined in the post body. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Appointment Reminders&lt;/b&gt; Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. &lt;b&gt;Interval&lt;/b&gt; values are used to define the reminder interval: &lt;b&gt;1 &#x3D; Hours&lt;/b&gt;, &lt;b&gt;2 &#x3D; Days&lt;/b&gt; and &lt;b&gt;3 &#x3D; Weeks&lt;/b&gt;. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.&lt;/p&gt;  &lt;p&gt;Example 1: &lt;b&gt;emailFirstReminder:  1, emailFirstReminderInterval:  2&lt;/b&gt; - results in 1st reminder being sent &lt;b&gt;1 Day before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;Example 2: &lt;b&gt;emailSecondReminder: 3, emailSecondReminderInterval: 1&lt;/b&gt; - results in 2nd reminder being sent &lt;b&gt;3 Hours before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param locationsInputModel  (optional)
     * @return List&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<LocationViewModel> setupV1LocationsBulkPost(LocationsInputModel locationsInputModel) throws ApiException {
        ApiResponse<List<LocationViewModel>> localVarResp = setupV1LocationsBulkPostWithHttpInfo(locationsInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Locations Bulk
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create Bulk&lt;/b&gt; business locations. The posted list of locations cannot exceed 100 location objects per transaction for performance purposes. The result is a list of new business location objects with a GUID assigned to each location.&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;name&lt;/b&gt; and &lt;b&gt;timezoneName&lt;/b&gt; fields are required. The &lt;b&gt;timezoneName&lt;/b&gt; must be expressed as an IANA Timezone e.g., &lt;i&gt;America/New_York&lt;/i&gt;. Refer to: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Timezone Wiki&lt;/a&gt; for a listing of IANA time zones.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Business hours&lt;/b&gt; are set by defining the &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; values for each day available/open. All days of the week must be provided when setting availability. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri and sat&lt;/b&gt;. Start and End Times are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. If there is no physical location and the business hours are irrelevant, set the hours to open 24 hours by setting startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Settings&lt;/b&gt; can be set here. Booking timer minutes, book ahead restrictions and customer bookings per day are all available here. Please read about the settings scope parameter before setting these values as it may simplify your process.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Settings Scope&lt;/b&gt; can be set to the company or the business location level. You can have all locations use the same company level settings or individual business locations can define their own, business location scope. If you want to use the company settings throughout all locations, do not pass in &lt;b&gt;settings element&lt;/b&gt;. To create business location scoped settings, pass in the &lt;b&gt;settings element&lt;/b&gt; with the field values defined in the post body. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Appointment Reminders&lt;/b&gt; Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. &lt;b&gt;Interval&lt;/b&gt; values are used to define the reminder interval: &lt;b&gt;1 &#x3D; Hours&lt;/b&gt;, &lt;b&gt;2 &#x3D; Days&lt;/b&gt; and &lt;b&gt;3 &#x3D; Weeks&lt;/b&gt;. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.&lt;/p&gt;  &lt;p&gt;Example 1: &lt;b&gt;emailFirstReminder:  1, emailFirstReminderInterval:  2&lt;/b&gt; - results in 1st reminder being sent &lt;b&gt;1 Day before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;Example 2: &lt;b&gt;emailSecondReminder: 3, emailSecondReminderInterval: 1&lt;/b&gt; - results in 2nd reminder being sent &lt;b&gt;3 Hours before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param locationsInputModel  (optional)
     * @return ApiResponse&lt;List&lt;LocationViewModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LocationViewModel>> setupV1LocationsBulkPostWithHttpInfo(LocationsInputModel locationsInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsBulkPostValidateBeforeCall(locationsInputModel, null);
        Type localVarReturnType = new TypeToken<List<LocationViewModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Locations Bulk (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create Bulk&lt;/b&gt; business locations. The posted list of locations cannot exceed 100 location objects per transaction for performance purposes. The result is a list of new business location objects with a GUID assigned to each location.&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;name&lt;/b&gt; and &lt;b&gt;timezoneName&lt;/b&gt; fields are required. The &lt;b&gt;timezoneName&lt;/b&gt; must be expressed as an IANA Timezone e.g., &lt;i&gt;America/New_York&lt;/i&gt;. Refer to: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Timezone Wiki&lt;/a&gt; for a listing of IANA time zones.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Business hours&lt;/b&gt; are set by defining the &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; values for each day available/open. All days of the week must be provided when setting availability. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri and sat&lt;/b&gt;. Start and End Times are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. If there is no physical location and the business hours are irrelevant, set the hours to open 24 hours by setting startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Settings&lt;/b&gt; can be set here. Booking timer minutes, book ahead restrictions and customer bookings per day are all available here. Please read about the settings scope parameter before setting these values as it may simplify your process.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Settings Scope&lt;/b&gt; can be set to the company or the business location level. You can have all locations use the same company level settings or individual business locations can define their own, business location scope. If you want to use the company settings throughout all locations, do not pass in &lt;b&gt;settings element&lt;/b&gt;. To create business location scoped settings, pass in the &lt;b&gt;settings element&lt;/b&gt; with the field values defined in the post body. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Appointment Reminders&lt;/b&gt; Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. &lt;b&gt;Interval&lt;/b&gt; values are used to define the reminder interval: &lt;b&gt;1 &#x3D; Hours&lt;/b&gt;, &lt;b&gt;2 &#x3D; Days&lt;/b&gt; and &lt;b&gt;3 &#x3D; Weeks&lt;/b&gt;. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.&lt;/p&gt;  &lt;p&gt;Example 1: &lt;b&gt;emailFirstReminder:  1, emailFirstReminderInterval:  2&lt;/b&gt; - results in 1st reminder being sent &lt;b&gt;1 Day before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;Example 2: &lt;b&gt;emailSecondReminder: 3, emailSecondReminderInterval: 1&lt;/b&gt; - results in 2nd reminder being sent &lt;b&gt;3 Hours before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param locationsInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsBulkPostAsync(LocationsInputModel locationsInputModel, final ApiCallback<List<LocationViewModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsBulkPostValidateBeforeCall(locationsInputModel, _callback);
        Type localVarReturnType = new TypeToken<List<LocationViewModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsGet
     * @param name Location name(full or partial) to filter on (optional)
     * @param serviceId Find locations that offer this service (optional)
     * @param friendlyId friendlyId of location (optional)
     * @param deleted Filter locations on deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsGetCall(String name, String serviceId, String friendlyId, Boolean deleted, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceId", serviceId));
        }

        if (friendlyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("friendlyId", friendlyId));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsGetValidateBeforeCall(String name, String serviceId, String friendlyId, Boolean deleted, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return setupV1LocationsGetCall(name, serviceId, friendlyId, deleted, offset, limit, _callback);

    }

    /**
     * List Locations
     * &lt;p&gt;Use this endpoint to &lt;b&gt;List Business Locations&lt;/b&gt; associated with your company. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param name Location name(full or partial) to filter on (optional)
     * @param serviceId Find locations that offer this service (optional)
     * @param friendlyId friendlyId of location (optional)
     * @param deleted Filter locations on deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return LocationListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationListViewModel setupV1LocationsGet(String name, String serviceId, String friendlyId, Boolean deleted, Integer offset, Integer limit) throws ApiException {
        ApiResponse<LocationListViewModel> localVarResp = setupV1LocationsGetWithHttpInfo(name, serviceId, friendlyId, deleted, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Locations
     * &lt;p&gt;Use this endpoint to &lt;b&gt;List Business Locations&lt;/b&gt; associated with your company. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param name Location name(full or partial) to filter on (optional)
     * @param serviceId Find locations that offer this service (optional)
     * @param friendlyId friendlyId of location (optional)
     * @param deleted Filter locations on deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;LocationListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationListViewModel> setupV1LocationsGetWithHttpInfo(String name, String serviceId, String friendlyId, Boolean deleted, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsGetValidateBeforeCall(name, serviceId, friendlyId, deleted, offset, limit, null);
        Type localVarReturnType = new TypeToken<LocationListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Locations (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;List Business Locations&lt;/b&gt; associated with your company. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param name Location name(full or partial) to filter on (optional)
     * @param serviceId Find locations that offer this service (optional)
     * @param friendlyId friendlyId of location (optional)
     * @param deleted Filter locations on deleted status (optional)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsGetAsync(String name, String serviceId, String friendlyId, Boolean deleted, Integer offset, Integer limit, final ApiCallback<LocationListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsGetValidateBeforeCall(name, serviceId, friendlyId, deleted, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<LocationListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdAppointmentremindersGet
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdAppointmentremindersGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/appointmentreminders"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdAppointmentremindersGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdAppointmentremindersGet(Async)");
        }

        return setupV1LocationsIdAppointmentremindersGetCall(id, _callback);

    }

    /**
     * Get Reminders
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get Email and SMS appointment reminder settings&lt;/b&gt; for the requested location. A valid business &lt;b&gt;location id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return AppointmentReminderViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppointmentReminderViewModel setupV1LocationsIdAppointmentremindersGet(String id) throws ApiException {
        ApiResponse<AppointmentReminderViewModel> localVarResp = setupV1LocationsIdAppointmentremindersGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Reminders
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get Email and SMS appointment reminder settings&lt;/b&gt; for the requested location. A valid business &lt;b&gt;location id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return ApiResponse&lt;AppointmentReminderViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppointmentReminderViewModel> setupV1LocationsIdAppointmentremindersGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdAppointmentremindersGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AppointmentReminderViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reminders (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get Email and SMS appointment reminder settings&lt;/b&gt; for the requested location. A valid business &lt;b&gt;location id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdAppointmentremindersGetAsync(String id, final ApiCallback<AppointmentReminderViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdAppointmentremindersGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AppointmentReminderViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdAppointmentremindersPut
     * @param id id of business location, defaults to primary business location (required)
     * @param appointmentRemindersInputModel input model for reminders (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdAppointmentremindersPutCall(String id, AppointmentRemindersInputModel appointmentRemindersInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appointmentRemindersInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/appointmentreminders"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdAppointmentremindersPutValidateBeforeCall(String id, AppointmentRemindersInputModel appointmentRemindersInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdAppointmentremindersPut(Async)");
        }

        return setupV1LocationsIdAppointmentremindersPutCall(id, appointmentRemindersInputModel, _callback);

    }

    /**
     * Update Reminders
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; Email and SMS appointment reminder settings for the requested location. A valid business &lt;b&gt;location id&lt;/b&gt; is required. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Appointment Reminders&lt;/b&gt; Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. &lt;b&gt;Interval&lt;/b&gt; values are used to define the reminder interval: &lt;b&gt;1 &#x3D; Hours&lt;/b&gt;, &lt;b&gt;2 &#x3D; Days&lt;/b&gt; and &lt;b&gt;3 &#x3D; Weeks&lt;/b&gt;. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.&lt;/p&gt;  &lt;p&gt;Example 1: &lt;b&gt;emailFirstReminder:  1, emailFirstReminderInterval:  2&lt;/b&gt; - results in 1st reminder being sent &lt;b&gt;1 Day before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;Example 2: &lt;b&gt;emailSecondReminder: 3, emailSecondReminderInterval: 1&lt;/b&gt; - results in 2nd reminder being sent &lt;b&gt;3 Hours before&lt;/b&gt; the appointment time.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param appointmentRemindersInputModel input model for reminders (optional)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsIdAppointmentremindersPut(String id, AppointmentRemindersInputModel appointmentRemindersInputModel) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsIdAppointmentremindersPutWithHttpInfo(id, appointmentRemindersInputModel);
        return localVarResp.getData();
    }

    /**
     * Update Reminders
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; Email and SMS appointment reminder settings for the requested location. A valid business &lt;b&gt;location id&lt;/b&gt; is required. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Appointment Reminders&lt;/b&gt; Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. &lt;b&gt;Interval&lt;/b&gt; values are used to define the reminder interval: &lt;b&gt;1 &#x3D; Hours&lt;/b&gt;, &lt;b&gt;2 &#x3D; Days&lt;/b&gt; and &lt;b&gt;3 &#x3D; Weeks&lt;/b&gt;. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.&lt;/p&gt;  &lt;p&gt;Example 1: &lt;b&gt;emailFirstReminder:  1, emailFirstReminderInterval:  2&lt;/b&gt; - results in 1st reminder being sent &lt;b&gt;1 Day before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;Example 2: &lt;b&gt;emailSecondReminder: 3, emailSecondReminderInterval: 1&lt;/b&gt; - results in 2nd reminder being sent &lt;b&gt;3 Hours before&lt;/b&gt; the appointment time.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param appointmentRemindersInputModel input model for reminders (optional)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsIdAppointmentremindersPutWithHttpInfo(String id, AppointmentRemindersInputModel appointmentRemindersInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdAppointmentremindersPutValidateBeforeCall(id, appointmentRemindersInputModel, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Reminders (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; Email and SMS appointment reminder settings for the requested location. A valid business &lt;b&gt;location id&lt;/b&gt; is required. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Appointment Reminders&lt;/b&gt; Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. &lt;b&gt;Interval&lt;/b&gt; values are used to define the reminder interval: &lt;b&gt;1 &#x3D; Hours&lt;/b&gt;, &lt;b&gt;2 &#x3D; Days&lt;/b&gt; and &lt;b&gt;3 &#x3D; Weeks&lt;/b&gt;. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.&lt;/p&gt;  &lt;p&gt;Example 1: &lt;b&gt;emailFirstReminder:  1, emailFirstReminderInterval:  2&lt;/b&gt; - results in 1st reminder being sent &lt;b&gt;1 Day before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;Example 2: &lt;b&gt;emailSecondReminder: 3, emailSecondReminderInterval: 1&lt;/b&gt; - results in 2nd reminder being sent &lt;b&gt;3 Hours before&lt;/b&gt; the appointment time.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param appointmentRemindersInputModel input model for reminders (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdAppointmentremindersPutAsync(String id, AppointmentRemindersInputModel appointmentRemindersInputModel, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdAppointmentremindersPutValidateBeforeCall(id, appointmentRemindersInputModel, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdDelete
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdDelete(Async)");
        }

        return setupV1LocationsIdDeleteCall(id, _callback);

    }

    /**
     * Delete Location
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a business location. A valid business &lt;b&gt;location id&lt;/b&gt; is required. The location is not permanently deleted and can be recovered by using the &lt;i&gt;PUT /setup​/v1​/locations​/{id}​/recover&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsIdDelete(String id) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Location
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a business location. A valid business &lt;b&gt;location id&lt;/b&gt; is required. The location is not permanently deleted and can be recovered by using the &lt;i&gt;PUT /setup​/v1​/locations​/{id}​/recover&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Location (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a business location. A valid business &lt;b&gt;location id&lt;/b&gt; is required. The location is not permanently deleted and can be recovered by using the &lt;i&gt;PUT /setup​/v1​/locations​/{id}​/recover&lt;/i&gt; endpoint.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdDeleteAsync(String id, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdDeleteallimagesDelete
     * @param id  (required)
     * @param uppercase  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdDeleteallimagesDeleteCall(String id, Boolean uppercase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/deleteallimages"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uppercase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uppercase", uppercase));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdDeleteallimagesDeleteValidateBeforeCall(String id, Boolean uppercase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdDeleteallimagesDelete(Async)");
        }

        return setupV1LocationsIdDeleteallimagesDeleteCall(id, uppercase, _callback);

    }

    /**
     * Delete All Location Images
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete All&lt;/b&gt; location images from the location blob storage container. An option exists to use upper case for matching the subdirectory name. Legacy apps stored pics using upper case while the API uses lower case names.&lt;/p&gt;
     * @param id  (required)
     * @param uppercase  (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Boolean setupV1LocationsIdDeleteallimagesDelete(String id, Boolean uppercase) throws ApiException {
        ApiResponse<Boolean> localVarResp = setupV1LocationsIdDeleteallimagesDeleteWithHttpInfo(id, uppercase);
        return localVarResp.getData();
    }

    /**
     * Delete All Location Images
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete All&lt;/b&gt; location images from the location blob storage container. An option exists to use upper case for matching the subdirectory name. Legacy apps stored pics using upper case while the API uses lower case names.&lt;/p&gt;
     * @param id  (required)
     * @param uppercase  (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> setupV1LocationsIdDeleteallimagesDeleteWithHttpInfo(String id, Boolean uppercase) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdDeleteallimagesDeleteValidateBeforeCall(id, uppercase, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete All Location Images (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete All&lt;/b&gt; location images from the location blob storage container. An option exists to use upper case for matching the subdirectory name. Legacy apps stored pics using upper case while the API uses lower case names.&lt;/p&gt;
     * @param id  (required)
     * @param uppercase  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdDeleteallimagesDeleteAsync(String id, Boolean uppercase, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdDeleteallimagesDeleteValidateBeforeCall(id, uppercase, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdDeleteimageDelete
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdDeleteimageDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/deleteimage"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdDeleteimageDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdDeleteimageDelete(Async)");
        }

        return setupV1LocationsIdDeleteimageDeleteCall(id, _callback);

    }

    /**
     * Delete Location Image
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a previously uploaded location image. A valid business &lt;b&gt;location id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsIdDeleteimageDelete(String id) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsIdDeleteimageDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Location Image
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a previously uploaded location image. A valid business &lt;b&gt;location id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsIdDeleteimageDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdDeleteimageDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Location Image (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a previously uploaded location image. A valid business &lt;b&gt;location id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdDeleteimageDeleteAsync(String id, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdDeleteimageDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdEmailTemplatesGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/email/templates"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdEmailTemplatesGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdEmailTemplatesGet(Async)");
        }

        return setupV1LocationsIdEmailTemplatesGetCall(id, _callback);

    }

    /**
     * List Email Templates
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Email Templates&lt;/b&gt; that are provided and may be customized. If the template has been customized, the customized property is true. The scope parameter indicates if the email template has been customized. This endpoint returns &lt;b&gt;only company level templates&lt;/b&gt;, so the scope is always company.&lt;/p&gt;
     * @param id  (required)
     * @return EmailTemplateListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EmailTemplateListViewModel setupV1LocationsIdEmailTemplatesGet(String id) throws ApiException {
        ApiResponse<EmailTemplateListViewModel> localVarResp = setupV1LocationsIdEmailTemplatesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * List Email Templates
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Email Templates&lt;/b&gt; that are provided and may be customized. If the template has been customized, the customized property is true. The scope parameter indicates if the email template has been customized. This endpoint returns &lt;b&gt;only company level templates&lt;/b&gt;, so the scope is always company.&lt;/p&gt;
     * @param id  (required)
     * @return ApiResponse&lt;EmailTemplateListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailTemplateListViewModel> setupV1LocationsIdEmailTemplatesGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmailTemplateListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Email Templates (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;List of Email Templates&lt;/b&gt; that are provided and may be customized. If the template has been customized, the customized property is true. The scope parameter indicates if the email template has been customized. This endpoint returns &lt;b&gt;only company level templates&lt;/b&gt;, so the scope is always company.&lt;/p&gt;
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesGetAsync(String id, final ApiCallback<EmailTemplateListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmailTemplateListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdEmailTemplatesMasterDelete
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesMasterDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/email/templates/master"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdEmailTemplatesMasterDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdEmailTemplatesMasterDelete(Async)");
        }

        return setupV1LocationsIdEmailTemplatesMasterDeleteCall(id, _callback);

    }

    /**
     * Delete Master Template Settings
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete Custom Master Email Template Settings&lt;/b&gt;. A valid business &lt;b&gt;location id&lt;/b&gt; is required. Deleting a custom master email template will reactivate the original default OnSched template settings.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return MasterEmailTemplateSettingsViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public MasterEmailTemplateSettingsViewModel setupV1LocationsIdEmailTemplatesMasterDelete(String id) throws ApiException {
        ApiResponse<MasterEmailTemplateSettingsViewModel> localVarResp = setupV1LocationsIdEmailTemplatesMasterDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Master Template Settings
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete Custom Master Email Template Settings&lt;/b&gt;. A valid business &lt;b&gt;location id&lt;/b&gt; is required. Deleting a custom master email template will reactivate the original default OnSched template settings.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return ApiResponse&lt;MasterEmailTemplateSettingsViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MasterEmailTemplateSettingsViewModel> setupV1LocationsIdEmailTemplatesMasterDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesMasterDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MasterEmailTemplateSettingsViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Master Template Settings (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete Custom Master Email Template Settings&lt;/b&gt;. A valid business &lt;b&gt;location id&lt;/b&gt; is required. Deleting a custom master email template will reactivate the original default OnSched template settings.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesMasterDeleteAsync(String id, final ApiCallback<MasterEmailTemplateSettingsViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesMasterDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MasterEmailTemplateSettingsViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdEmailTemplatesMasterGet
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesMasterGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/email/templates/master"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdEmailTemplatesMasterGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdEmailTemplatesMasterGet(Async)");
        }

        return setupV1LocationsIdEmailTemplatesMasterGetCall(id, _callback);

    }

    /**
     * Get Master Template Settings
     * &lt;p&gt;Use this endpoint to get &lt;b&gt;Master Email Template Settings&lt;/b&gt;. A valid business &lt;b&gt;location id&lt;/b&gt; is required. Settings exist for showing or hiding panels and for changing color schemes. &lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return MasterEmailTemplateSettingsViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public MasterEmailTemplateSettingsViewModel setupV1LocationsIdEmailTemplatesMasterGet(String id) throws ApiException {
        ApiResponse<MasterEmailTemplateSettingsViewModel> localVarResp = setupV1LocationsIdEmailTemplatesMasterGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Master Template Settings
     * &lt;p&gt;Use this endpoint to get &lt;b&gt;Master Email Template Settings&lt;/b&gt;. A valid business &lt;b&gt;location id&lt;/b&gt; is required. Settings exist for showing or hiding panels and for changing color schemes. &lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return ApiResponse&lt;MasterEmailTemplateSettingsViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MasterEmailTemplateSettingsViewModel> setupV1LocationsIdEmailTemplatesMasterGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesMasterGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MasterEmailTemplateSettingsViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Master Template Settings (asynchronously)
     * &lt;p&gt;Use this endpoint to get &lt;b&gt;Master Email Template Settings&lt;/b&gt;. A valid business &lt;b&gt;location id&lt;/b&gt; is required. Settings exist for showing or hiding panels and for changing color schemes. &lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesMasterGetAsync(String id, final ApiCallback<MasterEmailTemplateSettingsViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesMasterGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MasterEmailTemplateSettingsViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdEmailTemplatesMasterPost
     * @param id id of business location, defaults to primary business location (required)
     * @param masterTemplateSettingsInputModel Input model for master email template settings (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesMasterPostCall(String id, MasterTemplateSettingsInputModel masterTemplateSettingsInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = masterTemplateSettingsInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/email/templates/master"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdEmailTemplatesMasterPostValidateBeforeCall(String id, MasterTemplateSettingsInputModel masterTemplateSettingsInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdEmailTemplatesMasterPost(Async)");
        }

        return setupV1LocationsIdEmailTemplatesMasterPostCall(id, masterTemplateSettingsInputModel, _callback);

    }

    /**
     * Create Master Template Settings
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create Custom Master Email Template Settings&lt;/b&gt;. A valid business &lt;b&gt;location id&lt;/b&gt; is required. Settings exist for showing or hiding email panels and for changing color schemes. Use the &lt;i&gt;GET ​/setup​/v1​/locations​/{id}​/email​/templates​/masterSettings&lt;/i&gt; endpoint to display the settings offered. Changes to the Master Template Settings will be reflected in all business locations associated with this company. &lt;/p&gt;  &lt;p&gt;The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new custom Master Template Settings file that will be used instead. If you delete it, you are deleting the custom template settings you created and the original default Master Template created by OnSched would be reactivated.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param masterTemplateSettingsInputModel Input model for master email template settings (optional)
     * @return MasterEmailTemplateSettingsViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public MasterEmailTemplateSettingsViewModel setupV1LocationsIdEmailTemplatesMasterPost(String id, MasterTemplateSettingsInputModel masterTemplateSettingsInputModel) throws ApiException {
        ApiResponse<MasterEmailTemplateSettingsViewModel> localVarResp = setupV1LocationsIdEmailTemplatesMasterPostWithHttpInfo(id, masterTemplateSettingsInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Master Template Settings
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create Custom Master Email Template Settings&lt;/b&gt;. A valid business &lt;b&gt;location id&lt;/b&gt; is required. Settings exist for showing or hiding email panels and for changing color schemes. Use the &lt;i&gt;GET ​/setup​/v1​/locations​/{id}​/email​/templates​/masterSettings&lt;/i&gt; endpoint to display the settings offered. Changes to the Master Template Settings will be reflected in all business locations associated with this company. &lt;/p&gt;  &lt;p&gt;The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new custom Master Template Settings file that will be used instead. If you delete it, you are deleting the custom template settings you created and the original default Master Template created by OnSched would be reactivated.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param masterTemplateSettingsInputModel Input model for master email template settings (optional)
     * @return ApiResponse&lt;MasterEmailTemplateSettingsViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MasterEmailTemplateSettingsViewModel> setupV1LocationsIdEmailTemplatesMasterPostWithHttpInfo(String id, MasterTemplateSettingsInputModel masterTemplateSettingsInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesMasterPostValidateBeforeCall(id, masterTemplateSettingsInputModel, null);
        Type localVarReturnType = new TypeToken<MasterEmailTemplateSettingsViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Master Template Settings (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create Custom Master Email Template Settings&lt;/b&gt;. A valid business &lt;b&gt;location id&lt;/b&gt; is required. Settings exist for showing or hiding email panels and for changing color schemes. Use the &lt;i&gt;GET ​/setup​/v1​/locations​/{id}​/email​/templates​/masterSettings&lt;/i&gt; endpoint to display the settings offered. Changes to the Master Template Settings will be reflected in all business locations associated with this company. &lt;/p&gt;  &lt;p&gt;The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new custom Master Template Settings file that will be used instead. If you delete it, you are deleting the custom template settings you created and the original default Master Template created by OnSched would be reactivated.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param masterTemplateSettingsInputModel Input model for master email template settings (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesMasterPostAsync(String id, MasterTemplateSettingsInputModel masterTemplateSettingsInputModel, final ApiCallback<MasterEmailTemplateSettingsViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesMasterPostValidateBeforeCall(id, masterTemplateSettingsInputModel, _callback);
        Type localVarReturnType = new TypeToken<MasterEmailTemplateSettingsViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdEmailTemplatesPost
     * @param id id of business location, defaults to primary business location (required)
     * @param emailTemplateInputModel Input model for email template (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesPostCall(String id, EmailTemplateInputModel emailTemplateInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailTemplateInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/email/templates"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdEmailTemplatesPostValidateBeforeCall(String id, EmailTemplateInputModel emailTemplateInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdEmailTemplatesPost(Async)");
        }

        return setupV1LocationsIdEmailTemplatesPostCall(id, emailTemplateInputModel, _callback);

    }

    /**
     * Create Custom Template
     * &lt;p&gt;Use this endpoint to a &lt;b&gt;Create&lt;/b&gt; a Custom Email Template. You must convert the content to a base64 encoded string. Updates to the primary business location create company scoped custom templates. Updates to non-primary business locations create business location scoped custom templates. The master template cannot be updated with this endpoint.&lt;/p&gt;  &lt;p&gt;The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new email template that will be used instead. If you delete it, you are deleting the custom template you created and the original default template created by OnSched will be reactivated.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param emailTemplateInputModel Input model for email template (optional)
     * @return ContentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContentResult setupV1LocationsIdEmailTemplatesPost(String id, EmailTemplateInputModel emailTemplateInputModel) throws ApiException {
        ApiResponse<ContentResult> localVarResp = setupV1LocationsIdEmailTemplatesPostWithHttpInfo(id, emailTemplateInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Custom Template
     * &lt;p&gt;Use this endpoint to a &lt;b&gt;Create&lt;/b&gt; a Custom Email Template. You must convert the content to a base64 encoded string. Updates to the primary business location create company scoped custom templates. Updates to non-primary business locations create business location scoped custom templates. The master template cannot be updated with this endpoint.&lt;/p&gt;  &lt;p&gt;The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new email template that will be used instead. If you delete it, you are deleting the custom template you created and the original default template created by OnSched will be reactivated.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param emailTemplateInputModel Input model for email template (optional)
     * @return ApiResponse&lt;ContentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentResult> setupV1LocationsIdEmailTemplatesPostWithHttpInfo(String id, EmailTemplateInputModel emailTemplateInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesPostValidateBeforeCall(id, emailTemplateInputModel, null);
        Type localVarReturnType = new TypeToken<ContentResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Custom Template (asynchronously)
     * &lt;p&gt;Use this endpoint to a &lt;b&gt;Create&lt;/b&gt; a Custom Email Template. You must convert the content to a base64 encoded string. Updates to the primary business location create company scoped custom templates. Updates to non-primary business locations create business location scoped custom templates. The master template cannot be updated with this endpoint.&lt;/p&gt;  &lt;p&gt;The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new email template that will be used instead. If you delete it, you are deleting the custom template you created and the original default template created by OnSched will be reactivated.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param emailTemplateInputModel Input model for email template (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesPostAsync(String id, EmailTemplateInputModel emailTemplateInputModel, final ApiCallback<ContentResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesPostValidateBeforeCall(id, emailTemplateInputModel, _callback);
        Type localVarReturnType = new TypeToken<ContentResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdEmailTemplatesTemplateNameDelete
     * @param id id of business location, defaults to primary business location (required)
     * @param templateName Name of the email template (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesTemplateNameDeleteCall(String id, String templateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/email/templates/{templateName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdEmailTemplatesTemplateNameDeleteValidateBeforeCall(String id, String templateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdEmailTemplatesTemplateNameDelete(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling setupV1LocationsIdEmailTemplatesTemplateNameDelete(Async)");
        }

        return setupV1LocationsIdEmailTemplatesTemplateNameDeleteCall(id, templateName, _callback);

    }

    /**
     * Delete Custom Template
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a Custom Email Template that was previously created. A valid business &lt;b&gt;location id&lt;/b&gt; and email &lt;b&gt;templateName&lt;/b&gt; are required. Deleting a custom email template will revert the template back to its default originally created by OnSched. Changes will be reflected in all business locations associated with this company.&lt;/p&gt;  &lt;p&gt;The email template endpoints work a little differently than most. When you delete you are deleting the custom template you created, and the original default Email Template created by OnSched will be reactivated.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param templateName Name of the email template (required)
     * @return ContentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContentResult setupV1LocationsIdEmailTemplatesTemplateNameDelete(String id, String templateName) throws ApiException {
        ApiResponse<ContentResult> localVarResp = setupV1LocationsIdEmailTemplatesTemplateNameDeleteWithHttpInfo(id, templateName);
        return localVarResp.getData();
    }

    /**
     * Delete Custom Template
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a Custom Email Template that was previously created. A valid business &lt;b&gt;location id&lt;/b&gt; and email &lt;b&gt;templateName&lt;/b&gt; are required. Deleting a custom email template will revert the template back to its default originally created by OnSched. Changes will be reflected in all business locations associated with this company.&lt;/p&gt;  &lt;p&gt;The email template endpoints work a little differently than most. When you delete you are deleting the custom template you created, and the original default Email Template created by OnSched will be reactivated.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param templateName Name of the email template (required)
     * @return ApiResponse&lt;ContentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentResult> setupV1LocationsIdEmailTemplatesTemplateNameDeleteWithHttpInfo(String id, String templateName) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesTemplateNameDeleteValidateBeforeCall(id, templateName, null);
        Type localVarReturnType = new TypeToken<ContentResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Custom Template (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; a Custom Email Template that was previously created. A valid business &lt;b&gt;location id&lt;/b&gt; and email &lt;b&gt;templateName&lt;/b&gt; are required. Deleting a custom email template will revert the template back to its default originally created by OnSched. Changes will be reflected in all business locations associated with this company.&lt;/p&gt;  &lt;p&gt;The email template endpoints work a little differently than most. When you delete you are deleting the custom template you created, and the original default Email Template created by OnSched will be reactivated.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param templateName Name of the email template (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesTemplateNameDeleteAsync(String id, String templateName, final ApiCallback<ContentResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesTemplateNameDeleteValidateBeforeCall(id, templateName, _callback);
        Type localVarReturnType = new TypeToken<ContentResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdEmailTemplatesTemplateNameGet
     * @param id id of business location (required)
     * @param templateName name of the email template (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesTemplateNameGetCall(String id, String templateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/email/templates/{templateName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdEmailTemplatesTemplateNameGetValidateBeforeCall(String id, String templateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdEmailTemplatesTemplateNameGet(Async)");
        }

        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling setupV1LocationsIdEmailTemplatesTemplateNameGet(Async)");
        }

        return setupV1LocationsIdEmailTemplatesTemplateNameGetCall(id, templateName, _callback);

    }

    /**
     * Get Email Template
     * &lt;p&gt;Use this endpoint to return the requested &lt;b&gt;Email Template&lt;/b&gt;. The template is from the primary business location. If it wasn&#39;t customized the default template is returned. The response content is in html format. A valid &lt;b&gt;emailTemplate name&lt;/b&gt; is required. Find template names by using the &lt;i&gt;GET ​/setup​/v1​/locations​/{id}​/email​/templates&lt;/i&gt; endpoint. Note: The master template cannot be accessed here. &lt;/p&gt;
     * @param id id of business location (required)
     * @param templateName name of the email template (required)
     * @return ContentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContentResult setupV1LocationsIdEmailTemplatesTemplateNameGet(String id, String templateName) throws ApiException {
        ApiResponse<ContentResult> localVarResp = setupV1LocationsIdEmailTemplatesTemplateNameGetWithHttpInfo(id, templateName);
        return localVarResp.getData();
    }

    /**
     * Get Email Template
     * &lt;p&gt;Use this endpoint to return the requested &lt;b&gt;Email Template&lt;/b&gt;. The template is from the primary business location. If it wasn&#39;t customized the default template is returned. The response content is in html format. A valid &lt;b&gt;emailTemplate name&lt;/b&gt; is required. Find template names by using the &lt;i&gt;GET ​/setup​/v1​/locations​/{id}​/email​/templates&lt;/i&gt; endpoint. Note: The master template cannot be accessed here. &lt;/p&gt;
     * @param id id of business location (required)
     * @param templateName name of the email template (required)
     * @return ApiResponse&lt;ContentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentResult> setupV1LocationsIdEmailTemplatesTemplateNameGetWithHttpInfo(String id, String templateName) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesTemplateNameGetValidateBeforeCall(id, templateName, null);
        Type localVarReturnType = new TypeToken<ContentResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Email Template (asynchronously)
     * &lt;p&gt;Use this endpoint to return the requested &lt;b&gt;Email Template&lt;/b&gt;. The template is from the primary business location. If it wasn&#39;t customized the default template is returned. The response content is in html format. A valid &lt;b&gt;emailTemplate name&lt;/b&gt; is required. Find template names by using the &lt;i&gt;GET ​/setup​/v1​/locations​/{id}​/email​/templates&lt;/i&gt; endpoint. Note: The master template cannot be accessed here. &lt;/p&gt;
     * @param id id of business location (required)
     * @param templateName name of the email template (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdEmailTemplatesTemplateNameGetAsync(String id, String templateName, final ApiCallback<ContentResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdEmailTemplatesTemplateNameGetValidateBeforeCall(id, templateName, _callback);
        Type localVarReturnType = new TypeToken<ContentResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdGet
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdGet(Async)");
        }

        return setupV1LocationsIdGetCall(id, _callback);

    }

    /**
     * Get Location
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Location&lt;/b&gt; object. A valid &lt;b&gt;location id&lt;/b&gt; is required. If not specified, the business location defaults to the primary business location. Find all business location id&#39;s, by using the &lt;i&gt;GET /consumer/v1/locations&lt;/i&gt; endpoint.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsIdGet(String id) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Location
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Location&lt;/b&gt; object. A valid &lt;b&gt;location id&lt;/b&gt; is required. If not specified, the business location defaults to the primary business location. Find all business location id&#39;s, by using the &lt;i&gt;GET /consumer/v1/locations&lt;/i&gt; endpoint.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Location (asynchronously)
     * &lt;p&gt;Use this endpoint to return a &lt;b&gt;Location&lt;/b&gt; object. A valid &lt;b&gt;location id&lt;/b&gt; is required. If not specified, the business location defaults to the primary business location. Find all business location id&#39;s, by using the &lt;i&gt;GET /consumer/v1/locations&lt;/i&gt; endpoint.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdGetAsync(String id, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdGoogleServiceAccountDelete
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdGoogleServiceAccountDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/google/service/account"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdGoogleServiceAccountDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdGoogleServiceAccountDelete(Async)");
        }

        return setupV1LocationsIdGoogleServiceAccountDeleteCall(id, _callback);

    }

    /**
     * Delete Google Cal Access
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; authorized access to all google calendar users in your organization. Upon deletion Google Calendars will no longer be synced for resources.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void setupV1LocationsIdGoogleServiceAccountDelete(String id) throws ApiException {
        setupV1LocationsIdGoogleServiceAccountDeleteWithHttpInfo(id);
    }

    /**
     * Delete Google Cal Access
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; authorized access to all google calendar users in your organization. Upon deletion Google Calendars will no longer be synced for resources.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setupV1LocationsIdGoogleServiceAccountDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdGoogleServiceAccountDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Google Cal Access (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete&lt;/b&gt; authorized access to all google calendar users in your organization. Upon deletion Google Calendars will no longer be synced for resources.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdGoogleServiceAccountDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdGoogleServiceAccountDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdGoogleServiceAccountPost
     * @param id id of business location, defaults to primary business location (required)
     * @param googleServiceAccountCreds Generated Json Key file from Google (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdGoogleServiceAccountPostCall(String id, GoogleServiceAccountCreds googleServiceAccountCreds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = googleServiceAccountCreds;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/google/service/account"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdGoogleServiceAccountPostValidateBeforeCall(String id, GoogleServiceAccountCreds googleServiceAccountCreds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdGoogleServiceAccountPost(Async)");
        }

        return setupV1LocationsIdGoogleServiceAccountPostCall(id, googleServiceAccountCreds, _callback);

    }

    /**
     * Create Google Cal Access
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Authorize Access&lt;/b&gt; to google calendar users in your organization. You must create/have a Google Service account as an admin of your GSuite, then save the credentials as a Json Key file. This &lt;b&gt;Json Key&lt;/b&gt; and a valid business &lt;b&gt;location id&lt;/b&gt; are required. &lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param googleServiceAccountCreds Generated Json Key file from Google (optional)
     * @return GoogleServiceAccountCreds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GoogleServiceAccountCreds setupV1LocationsIdGoogleServiceAccountPost(String id, GoogleServiceAccountCreds googleServiceAccountCreds) throws ApiException {
        ApiResponse<GoogleServiceAccountCreds> localVarResp = setupV1LocationsIdGoogleServiceAccountPostWithHttpInfo(id, googleServiceAccountCreds);
        return localVarResp.getData();
    }

    /**
     * Create Google Cal Access
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Authorize Access&lt;/b&gt; to google calendar users in your organization. You must create/have a Google Service account as an admin of your GSuite, then save the credentials as a Json Key file. This &lt;b&gt;Json Key&lt;/b&gt; and a valid business &lt;b&gt;location id&lt;/b&gt; are required. &lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param googleServiceAccountCreds Generated Json Key file from Google (optional)
     * @return ApiResponse&lt;GoogleServiceAccountCreds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleServiceAccountCreds> setupV1LocationsIdGoogleServiceAccountPostWithHttpInfo(String id, GoogleServiceAccountCreds googleServiceAccountCreds) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdGoogleServiceAccountPostValidateBeforeCall(id, googleServiceAccountCreds, null);
        Type localVarReturnType = new TypeToken<GoogleServiceAccountCreds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Google Cal Access (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Authorize Access&lt;/b&gt; to google calendar users in your organization. You must create/have a Google Service account as an admin of your GSuite, then save the credentials as a Json Key file. This &lt;b&gt;Json Key&lt;/b&gt; and a valid business &lt;b&gt;location id&lt;/b&gt; are required. &lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param googleServiceAccountCreds Generated Json Key file from Google (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdGoogleServiceAccountPostAsync(String id, GoogleServiceAccountCreds googleServiceAccountCreds, final ApiCallback<GoogleServiceAccountCreds> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdGoogleServiceAccountPostValidateBeforeCall(id, googleServiceAccountCreds, _callback);
        Type localVarReturnType = new TypeToken<GoogleServiceAccountCreds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdHolidaysHolidayIdClosedPut
     * @param id  (required)
     * @param holidayId  (required)
     * @param closed  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdHolidaysHolidayIdClosedPutCall(String id, String holidayId, Boolean closed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/holidays/{holidayId}/{closed}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "holidayId" + "}", localVarApiClient.escapeString(holidayId.toString()))
            .replace("{" + "closed" + "}", localVarApiClient.escapeString(closed.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdHolidaysHolidayIdClosedPutValidateBeforeCall(String id, String holidayId, Boolean closed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdHolidaysHolidayIdClosedPut(Async)");
        }

        // verify the required parameter 'holidayId' is set
        if (holidayId == null) {
            throw new ApiException("Missing the required parameter 'holidayId' when calling setupV1LocationsIdHolidaysHolidayIdClosedPut(Async)");
        }

        // verify the required parameter 'closed' is set
        if (closed == null) {
            throw new ApiException("Missing the required parameter 'closed' when calling setupV1LocationsIdHolidaysHolidayIdClosedPut(Async)");
        }

        return setupV1LocationsIdHolidaysHolidayIdClosedPutCall(id, holidayId, closed, _callback);

    }

    /**
     * Update Location Holidays
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; Business Holidays as Opened or Closed. A valid business &lt;b&gt;location id&lt;/b&gt; is required. If not specified, the business location defaults to the primary business location.&lt;/p&gt;  &lt;p&gt;Holidays are automatically defined with the initial Post Location endpoint and are based on country code. Find your location holiday codes by using the: &lt;i&gt;GET /setup​/v1​/locations​/{id}&lt;/i&gt; endpoint. Change your holidays to open or closed by passing in the &lt;b&gt;holidayId&lt;/b&gt; along with the &lt;b&gt;closed&lt;/b&gt; boolean value to change the status of a specific holiday. Pass in an &lt;b&gt;asterisk *&lt;/b&gt; for the holidayId then all business holidays will be set as defined.&lt;/p&gt;
     * @param id  (required)
     * @param holidayId  (required)
     * @param closed  (required)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsIdHolidaysHolidayIdClosedPut(String id, String holidayId, Boolean closed) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsIdHolidaysHolidayIdClosedPutWithHttpInfo(id, holidayId, closed);
        return localVarResp.getData();
    }

    /**
     * Update Location Holidays
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; Business Holidays as Opened or Closed. A valid business &lt;b&gt;location id&lt;/b&gt; is required. If not specified, the business location defaults to the primary business location.&lt;/p&gt;  &lt;p&gt;Holidays are automatically defined with the initial Post Location endpoint and are based on country code. Find your location holiday codes by using the: &lt;i&gt;GET /setup​/v1​/locations​/{id}&lt;/i&gt; endpoint. Change your holidays to open or closed by passing in the &lt;b&gt;holidayId&lt;/b&gt; along with the &lt;b&gt;closed&lt;/b&gt; boolean value to change the status of a specific holiday. Pass in an &lt;b&gt;asterisk *&lt;/b&gt; for the holidayId then all business holidays will be set as defined.&lt;/p&gt;
     * @param id  (required)
     * @param holidayId  (required)
     * @param closed  (required)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsIdHolidaysHolidayIdClosedPutWithHttpInfo(String id, String holidayId, Boolean closed) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdHolidaysHolidayIdClosedPutValidateBeforeCall(id, holidayId, closed, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Location Holidays (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; Business Holidays as Opened or Closed. A valid business &lt;b&gt;location id&lt;/b&gt; is required. If not specified, the business location defaults to the primary business location.&lt;/p&gt;  &lt;p&gt;Holidays are automatically defined with the initial Post Location endpoint and are based on country code. Find your location holiday codes by using the: &lt;i&gt;GET /setup​/v1​/locations​/{id}&lt;/i&gt; endpoint. Change your holidays to open or closed by passing in the &lt;b&gt;holidayId&lt;/b&gt; along with the &lt;b&gt;closed&lt;/b&gt; boolean value to change the status of a specific holiday. Pass in an &lt;b&gt;asterisk *&lt;/b&gt; for the holidayId then all business holidays will be set as defined.&lt;/p&gt;
     * @param id  (required)
     * @param holidayId  (required)
     * @param closed  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdHolidaysHolidayIdClosedPutAsync(String id, String holidayId, Boolean closed, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdHolidaysHolidayIdClosedPutValidateBeforeCall(id, holidayId, closed, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdPut
     * @param id  (required)
     * @param removeRegion  (optional)
     * @param locationUpdateModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdPutCall(String id, Boolean removeRegion, LocationUpdateModel locationUpdateModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationUpdateModel;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (removeRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("removeRegion", removeRegion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdPutValidateBeforeCall(String id, Boolean removeRegion, LocationUpdateModel locationUpdateModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdPut(Async)");
        }

        return setupV1LocationsIdPutCall(id, removeRegion, locationUpdateModel, _callback);

    }

    /**
     * Update Location
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a business location object. A valid business &lt;b&gt;location id&lt;/b&gt; is required. The optional removeRegion query parameter can be used to remove the region relationship from the location.&lt;/p&gt;  &lt;p&gt;If the settings element is populated the scope will be set to the business location with the settings supplied. If your settings are uniform across all locations, then do not supply the settings element and the location will use the settings defined on the primary business location (company scoped). Company scoped settings cascade down to the locations. You can override any location that needs different settings by providing settings in the update model. Use the &lt;i&gt;PUT /setup/v1/locations/{id}/settings/scope/{settingsScope}&lt;/i&gt; endpoint to change the settings scope only. This is typically used when switching from business location scope back to company.&lt;/p&gt;  &lt;p&gt;Refer to: &lt;i&gt;&lt;b&gt;POST ​/setup​/v1​/locations&lt;/b&gt;&lt;/i&gt; endpoint for details.&lt;/p&gt;
     * @param id  (required)
     * @param removeRegion  (optional)
     * @param locationUpdateModel  (optional)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsIdPut(String id, Boolean removeRegion, LocationUpdateModel locationUpdateModel) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsIdPutWithHttpInfo(id, removeRegion, locationUpdateModel);
        return localVarResp.getData();
    }

    /**
     * Update Location
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a business location object. A valid business &lt;b&gt;location id&lt;/b&gt; is required. The optional removeRegion query parameter can be used to remove the region relationship from the location.&lt;/p&gt;  &lt;p&gt;If the settings element is populated the scope will be set to the business location with the settings supplied. If your settings are uniform across all locations, then do not supply the settings element and the location will use the settings defined on the primary business location (company scoped). Company scoped settings cascade down to the locations. You can override any location that needs different settings by providing settings in the update model. Use the &lt;i&gt;PUT /setup/v1/locations/{id}/settings/scope/{settingsScope}&lt;/i&gt; endpoint to change the settings scope only. This is typically used when switching from business location scope back to company.&lt;/p&gt;  &lt;p&gt;Refer to: &lt;i&gt;&lt;b&gt;POST ​/setup​/v1​/locations&lt;/b&gt;&lt;/i&gt; endpoint for details.&lt;/p&gt;
     * @param id  (required)
     * @param removeRegion  (optional)
     * @param locationUpdateModel  (optional)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsIdPutWithHttpInfo(String id, Boolean removeRegion, LocationUpdateModel locationUpdateModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdPutValidateBeforeCall(id, removeRegion, locationUpdateModel, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Location (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a business location object. A valid business &lt;b&gt;location id&lt;/b&gt; is required. The optional removeRegion query parameter can be used to remove the region relationship from the location.&lt;/p&gt;  &lt;p&gt;If the settings element is populated the scope will be set to the business location with the settings supplied. If your settings are uniform across all locations, then do not supply the settings element and the location will use the settings defined on the primary business location (company scoped). Company scoped settings cascade down to the locations. You can override any location that needs different settings by providing settings in the update model. Use the &lt;i&gt;PUT /setup/v1/locations/{id}/settings/scope/{settingsScope}&lt;/i&gt; endpoint to change the settings scope only. This is typically used when switching from business location scope back to company.&lt;/p&gt;  &lt;p&gt;Refer to: &lt;i&gt;&lt;b&gt;POST ​/setup​/v1​/locations&lt;/b&gt;&lt;/i&gt; endpoint for details.&lt;/p&gt;
     * @param id  (required)
     * @param removeRegion  (optional)
     * @param locationUpdateModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdPutAsync(String id, Boolean removeRegion, LocationUpdateModel locationUpdateModel, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdPutValidateBeforeCall(id, removeRegion, locationUpdateModel, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdRecoverPut
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdRecoverPutCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/recover"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdRecoverPutValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdRecoverPut(Async)");
        }

        return setupV1LocationsIdRecoverPutCall(id, _callback);

    }

    /**
     * Recover Location
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted business location. A valid business &lt;b&gt;location id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id  (required)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsIdRecoverPut(String id) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsIdRecoverPutWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Recover Location
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted business location. A valid business &lt;b&gt;location id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id  (required)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsIdRecoverPutWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdRecoverPutValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recover Location (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Recover&lt;/b&gt; a deleted business location. A valid business &lt;b&gt;location id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdRecoverPutAsync(String id, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdRecoverPutValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdServicesDelete
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdServicesDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/services"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdServicesDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdServicesDelete(Async)");
        }

        return setupV1LocationsIdServicesDeleteCall(id, _callback);

    }

    /**
     * Delete Linked Services
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete All&lt;/b&gt; location linked services from a business location. A valid business &lt;b&gt;location id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsIdServicesDelete(String id) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsIdServicesDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Linked Services
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete All&lt;/b&gt; location linked services from a business location. A valid business &lt;b&gt;location id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsIdServicesDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdServicesDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Linked Services (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Delete All&lt;/b&gt; location linked services from a business location. A valid business &lt;b&gt;location id&lt;/b&gt; is required. &lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdServicesDeleteAsync(String id, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdServicesDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdServicesGet
     * @param id id of business location, defaults to primary business location (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location service objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Location was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdServicesGetCall(String id, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/services"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdServicesGetValidateBeforeCall(String id, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdServicesGet(Async)");
        }

        return setupV1LocationsIdServicesGetCall(id, offset, limit, _callback);

    }

    /**
     * List Location Linked Services
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Location Linked Services&lt;/b&gt;. A valid business &lt;b&gt;location id&lt;/b&gt; is required. By default, there are no location linked services attached to a location. Refer to the: &lt;i&gt;POST /setup​/v1​/locations​/{id}​/services&lt;/i&gt; for details. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return BusinessServiceListViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location service objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Location was not found </td><td>  -  </td></tr>
     </table>
     */
    public BusinessServiceListViewModel setupV1LocationsIdServicesGet(String id, Integer offset, Integer limit) throws ApiException {
        ApiResponse<BusinessServiceListViewModel> localVarResp = setupV1LocationsIdServicesGetWithHttpInfo(id, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Location Linked Services
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Location Linked Services&lt;/b&gt;. A valid business &lt;b&gt;location id&lt;/b&gt; is required. By default, there are no location linked services attached to a location. Refer to the: &lt;i&gt;POST /setup​/v1​/locations​/{id}​/services&lt;/i&gt; for details. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @return ApiResponse&lt;BusinessServiceListViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location service objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Location was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessServiceListViewModel> setupV1LocationsIdServicesGetWithHttpInfo(String id, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdServicesGetValidateBeforeCall(id, offset, limit, null);
        Type localVarReturnType = new TypeToken<BusinessServiceListViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Location Linked Services (asynchronously)
     * &lt;p&gt;Use this endpoint to return a list of &lt;b&gt;Location Linked Services&lt;/b&gt;. A valid business &lt;b&gt;location id&lt;/b&gt; is required. By default, there are no location linked services attached to a location. Refer to the: &lt;i&gt;POST /setup​/v1​/locations​/{id}​/services&lt;/i&gt; for details. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param offset Starting row of page, default 0 (optional)
     * @param limit Page limit default 20, max 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location service objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Location was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdServicesGetAsync(String id, Integer offset, Integer limit, final ApiCallback<BusinessServiceListViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdServicesGetValidateBeforeCall(id, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<BusinessServiceListViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdServicesPost
     * @param id id of business location, defaults to primary business location (required)
     * @param requestBody array of valid service object id&#39;s (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdServicesPostCall(String id, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/services"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdServicesPostValidateBeforeCall(String id, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdServicesPost(Async)");
        }

        return setupV1LocationsIdServicesPostCall(id, requestBody, _callback);

    }

    /**
     * Create Linked Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Link Services&lt;/b&gt; to a location object. A valid business &lt;b&gt;location id&lt;/b&gt; is required. By default, there are &lt;i&gt;no services linked&lt;/i&gt; to a location. &lt;/p&gt;  &lt;p&gt;Services are definable globally at the Company level and associated with the Primary Business Location, or at a Secondary Business Location. When accessing the Services endpoints, by default, API consumers are provided with a &lt;b&gt;combined&lt;/b&gt; list of Services defined from both the Primary and Secondary Business Location.&lt;/p&gt;  &lt;p&gt;If necessary, the list of Service(s) provided can be cherry-picked/linked to &lt;b&gt;only include specific Service(s)&lt;/b&gt; by using this endpoint. This allows for a subset of defined Services to be provided for a location.&lt;/p&gt;  &lt;p&gt;Supplying the list of services ids to cherry-pick/link to the location in the request body will explicitly define which Primary Location Services are offered by the specified business location.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param requestBody array of valid service object id&#39;s (optional)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsIdServicesPost(String id, List<String> requestBody) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsIdServicesPostWithHttpInfo(id, requestBody);
        return localVarResp.getData();
    }

    /**
     * Create Linked Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Link Services&lt;/b&gt; to a location object. A valid business &lt;b&gt;location id&lt;/b&gt; is required. By default, there are &lt;i&gt;no services linked&lt;/i&gt; to a location. &lt;/p&gt;  &lt;p&gt;Services are definable globally at the Company level and associated with the Primary Business Location, or at a Secondary Business Location. When accessing the Services endpoints, by default, API consumers are provided with a &lt;b&gt;combined&lt;/b&gt; list of Services defined from both the Primary and Secondary Business Location.&lt;/p&gt;  &lt;p&gt;If necessary, the list of Service(s) provided can be cherry-picked/linked to &lt;b&gt;only include specific Service(s)&lt;/b&gt; by using this endpoint. This allows for a subset of defined Services to be provided for a location.&lt;/p&gt;  &lt;p&gt;Supplying the list of services ids to cherry-pick/link to the location in the request body will explicitly define which Primary Location Services are offered by the specified business location.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param requestBody array of valid service object id&#39;s (optional)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsIdServicesPostWithHttpInfo(String id, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdServicesPostValidateBeforeCall(id, requestBody, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Linked Service (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Link Services&lt;/b&gt; to a location object. A valid business &lt;b&gt;location id&lt;/b&gt; is required. By default, there are &lt;i&gt;no services linked&lt;/i&gt; to a location. &lt;/p&gt;  &lt;p&gt;Services are definable globally at the Company level and associated with the Primary Business Location, or at a Secondary Business Location. When accessing the Services endpoints, by default, API consumers are provided with a &lt;b&gt;combined&lt;/b&gt; list of Services defined from both the Primary and Secondary Business Location.&lt;/p&gt;  &lt;p&gt;If necessary, the list of Service(s) provided can be cherry-picked/linked to &lt;b&gt;only include specific Service(s)&lt;/b&gt; by using this endpoint. This allows for a subset of defined Services to be provided for a location.&lt;/p&gt;  &lt;p&gt;Supplying the list of services ids to cherry-pick/link to the location in the request body will explicitly define which Primary Location Services are offered by the specified business location.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param requestBody array of valid service object id&#39;s (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdServicesPostAsync(String id, List<String> requestBody, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdServicesPostValidateBeforeCall(id, requestBody, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdSettingsScopeSettingsScopePut
     * @param id  (required)
     * @param settingsScope  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdSettingsScopeSettingsScopePutCall(String id, String settingsScope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/settings/scope/{settingsScope}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "settingsScope" + "}", localVarApiClient.escapeString(settingsScope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdSettingsScopeSettingsScopePutValidateBeforeCall(String id, String settingsScope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdSettingsScopeSettingsScopePut(Async)");
        }

        // verify the required parameter 'settingsScope' is set
        if (settingsScope == null) {
            throw new ApiException("Missing the required parameter 'settingsScope' when calling setupV1LocationsIdSettingsScopeSettingsScopePut(Async)");
        }

        return setupV1LocationsIdSettingsScopeSettingsScopePutCall(id, settingsScope, _callback);

    }

    /**
     * Update Location Scope
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a business locations online booking settings scope. A valid business &lt;b&gt;location id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;settingsScope&lt;/b&gt; values are &lt;b&gt;0 &#x3D; company scope, 1 &#x3D; business location scope&lt;/b&gt;. To inherit the online settings defined in the primary business location, then use value &#x3D; 0 for company scope. Otherwise, to override the settings for a specific location then use value &#x3D; 1 for business location scope. &lt;b&gt;Note&lt;/b&gt;: You cannot change the settings scope of the Primary Business Location.&lt;/p&gt;
     * @param id  (required)
     * @param settingsScope  (required)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsIdSettingsScopeSettingsScopePut(String id, String settingsScope) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsIdSettingsScopeSettingsScopePutWithHttpInfo(id, settingsScope);
        return localVarResp.getData();
    }

    /**
     * Update Location Scope
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a business locations online booking settings scope. A valid business &lt;b&gt;location id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;settingsScope&lt;/b&gt; values are &lt;b&gt;0 &#x3D; company scope, 1 &#x3D; business location scope&lt;/b&gt;. To inherit the online settings defined in the primary business location, then use value &#x3D; 0 for company scope. Otherwise, to override the settings for a specific location then use value &#x3D; 1 for business location scope. &lt;b&gt;Note&lt;/b&gt;: You cannot change the settings scope of the Primary Business Location.&lt;/p&gt;
     * @param id  (required)
     * @param settingsScope  (required)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsIdSettingsScopeSettingsScopePutWithHttpInfo(String id, String settingsScope) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdSettingsScopeSettingsScopePutValidateBeforeCall(id, settingsScope, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Location Scope (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Update&lt;/b&gt; a business locations online booking settings scope. A valid business &lt;b&gt;location id&lt;/b&gt; is required.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;settingsScope&lt;/b&gt; values are &lt;b&gt;0 &#x3D; company scope, 1 &#x3D; business location scope&lt;/b&gt;. To inherit the online settings defined in the primary business location, then use value &#x3D; 0 for company scope. Otherwise, to override the settings for a specific location then use value &#x3D; 1 for business location scope. &lt;b&gt;Note&lt;/b&gt;: You cannot change the settings scope of the Primary Business Location.&lt;/p&gt;
     * @param id  (required)
     * @param settingsScope  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdSettingsScopeSettingsScopePutAsync(String id, String settingsScope, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdSettingsScopeSettingsScopePutValidateBeforeCall(id, settingsScope, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsIdUploadimagePost
     * @param id id of business location, defaults to primary business location (required)
     * @param resourceImageInputModel Input model for image upload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdUploadimagePostCall(String id, ResourceImageInputModel resourceImageInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceImageInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/{id}/uploadimage"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsIdUploadimagePostValidateBeforeCall(String id, ResourceImageInputModel resourceImageInputModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsIdUploadimagePost(Async)");
        }

        return setupV1LocationsIdUploadimagePostCall(id, resourceImageInputModel, _callback);

    }

    /**
     * Upload Location Image
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Upload&lt;/b&gt; an image to a location object. A valid business &lt;b&gt;location id&lt;/b&gt; is required. You must convert the image to a &lt;b&gt;base64 encoded string&lt;/b&gt; and pass that string as input along with your &lt;b&gt;filename&lt;/b&gt;.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param resourceImageInputModel Input model for image upload (optional)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsIdUploadimagePost(String id, ResourceImageInputModel resourceImageInputModel) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsIdUploadimagePostWithHttpInfo(id, resourceImageInputModel);
        return localVarResp.getData();
    }

    /**
     * Upload Location Image
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Upload&lt;/b&gt; an image to a location object. A valid business &lt;b&gt;location id&lt;/b&gt; is required. You must convert the image to a &lt;b&gt;base64 encoded string&lt;/b&gt; and pass that string as input along with your &lt;b&gt;filename&lt;/b&gt;.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param resourceImageInputModel Input model for image upload (optional)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsIdUploadimagePostWithHttpInfo(String id, ResourceImageInputModel resourceImageInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsIdUploadimagePostValidateBeforeCall(id, resourceImageInputModel, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload Location Image (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Upload&lt;/b&gt; an image to a location object. A valid business &lt;b&gt;location id&lt;/b&gt; is required. You must convert the image to a &lt;b&gt;base64 encoded string&lt;/b&gt; and pass that string as input along with your &lt;b&gt;filename&lt;/b&gt;.&lt;/p&gt;
     * @param id id of business location, defaults to primary business location (required)
     * @param resourceImageInputModel Input model for image upload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsIdUploadimagePostAsync(String id, ResourceImageInputModel resourceImageInputModel, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsIdUploadimagePostValidateBeforeCall(id, resourceImageInputModel, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsPost
     * @param locationInputModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsPostCall(LocationInputModel locationInputModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationInputModel;

        // create path and map variables
        String localVarPath = "/setup/v1/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsPostValidateBeforeCall(LocationInputModel locationInputModel, final ApiCallback _callback) throws ApiException {
        return setupV1LocationsPostCall(locationInputModel, _callback);

    }

    /**
     * Create Location
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new business location. The result is a business location object with a GUID assigned to the location.&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;name&lt;/b&gt; and &lt;b&gt;timezoneName&lt;/b&gt; fields are required. The &lt;b&gt;timezoneName&lt;/b&gt; must be expressed as an IANA Timezone e.g., &lt;i&gt;America/New_York&lt;/i&gt;. Refer to: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Timezone Wiki&lt;/a&gt; for a listing of IANA time zones.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Business hours&lt;/b&gt; are set by defining the &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; values for each day available/open. All days of the week must be provided when setting availability. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri and sat&lt;/b&gt;. Start and End Times are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. If there is no physical location and the business hours are irrelevant, set the hours to open 24 hours by setting startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Settings&lt;/b&gt; can be set here. Booking timer minutes, book ahead restrictions and customer bookings per day are all available here. Please read about the settings scope parameter before setting these values as it may simplify your process.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Settings Scope&lt;/b&gt; can be set to the company or the business location level. You can have all locations use the same company level settings or individual business locations can define their own, business location scope. If you want to use the company settings throughout all locations, do not pass in &lt;b&gt;settings element&lt;/b&gt;. To create business location scoped settings, pass in the &lt;b&gt;settings element&lt;/b&gt; with the field values defined in the post body. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Appointment Reminders&lt;/b&gt; Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. &lt;b&gt;Interval&lt;/b&gt; values are used to define the reminder interval: &lt;b&gt;1 &#x3D; Hours&lt;/b&gt;, &lt;b&gt;2 &#x3D; Days&lt;/b&gt; and &lt;b&gt;3 &#x3D; Weeks&lt;/b&gt;. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.&lt;/p&gt;  &lt;p&gt;Example 1: &lt;b&gt;emailFirstReminder:  1, emailFirstReminderInterval:  2&lt;/b&gt; - results in 1st reminder being sent &lt;b&gt;1 Day before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;Example 2: &lt;b&gt;emailSecondReminder: 3, emailSecondReminderInterval: 1&lt;/b&gt; - results in 2nd reminder being sent &lt;b&gt;3 Hours before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param locationInputModel  (optional)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsPost(LocationInputModel locationInputModel) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsPostWithHttpInfo(locationInputModel);
        return localVarResp.getData();
    }

    /**
     * Create Location
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new business location. The result is a business location object with a GUID assigned to the location.&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;name&lt;/b&gt; and &lt;b&gt;timezoneName&lt;/b&gt; fields are required. The &lt;b&gt;timezoneName&lt;/b&gt; must be expressed as an IANA Timezone e.g., &lt;i&gt;America/New_York&lt;/i&gt;. Refer to: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Timezone Wiki&lt;/a&gt; for a listing of IANA time zones.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Business hours&lt;/b&gt; are set by defining the &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; values for each day available/open. All days of the week must be provided when setting availability. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri and sat&lt;/b&gt;. Start and End Times are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. If there is no physical location and the business hours are irrelevant, set the hours to open 24 hours by setting startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Settings&lt;/b&gt; can be set here. Booking timer minutes, book ahead restrictions and customer bookings per day are all available here. Please read about the settings scope parameter before setting these values as it may simplify your process.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Settings Scope&lt;/b&gt; can be set to the company or the business location level. You can have all locations use the same company level settings or individual business locations can define their own, business location scope. If you want to use the company settings throughout all locations, do not pass in &lt;b&gt;settings element&lt;/b&gt;. To create business location scoped settings, pass in the &lt;b&gt;settings element&lt;/b&gt; with the field values defined in the post body. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Appointment Reminders&lt;/b&gt; Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. &lt;b&gt;Interval&lt;/b&gt; values are used to define the reminder interval: &lt;b&gt;1 &#x3D; Hours&lt;/b&gt;, &lt;b&gt;2 &#x3D; Days&lt;/b&gt; and &lt;b&gt;3 &#x3D; Weeks&lt;/b&gt;. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.&lt;/p&gt;  &lt;p&gt;Example 1: &lt;b&gt;emailFirstReminder:  1, emailFirstReminderInterval:  2&lt;/b&gt; - results in 1st reminder being sent &lt;b&gt;1 Day before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;Example 2: &lt;b&gt;emailSecondReminder: 3, emailSecondReminderInterval: 1&lt;/b&gt; - results in 2nd reminder being sent &lt;b&gt;3 Hours before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param locationInputModel  (optional)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsPostWithHttpInfo(LocationInputModel locationInputModel) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsPostValidateBeforeCall(locationInputModel, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Location (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Create&lt;/b&gt; a new business location. The result is a business location object with a GUID assigned to the location.&lt;/p&gt;  &lt;p&gt;The &lt;b&gt;name&lt;/b&gt; and &lt;b&gt;timezoneName&lt;/b&gt; fields are required. The &lt;b&gt;timezoneName&lt;/b&gt; must be expressed as an IANA Timezone e.g., &lt;i&gt;America/New_York&lt;/i&gt;. Refer to: &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;Timezone Wiki&lt;/a&gt; for a listing of IANA time zones.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Business hours&lt;/b&gt; are set by defining the &lt;b&gt;startTime&lt;/b&gt; and &lt;b&gt;endTime&lt;/b&gt; values for each day available/open. All days of the week must be provided when setting availability. Days are defined as &lt;b&gt;sun, mon, tue, wed, thu, fri and sat&lt;/b&gt;. Start and End Times are entered in &lt;b&gt;military format. e.g., 800 is 8:00am, 2230 is 10:30pm&lt;/b&gt;. If there is no physical location and the business hours are irrelevant, set the hours to open 24 hours by setting startTime&#x3D;0 and endTime&#x3D;2400. To set a whole day as unavailable, set both the startTime and endTime to 0. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Settings&lt;/b&gt; can be set here. Booking timer minutes, book ahead restrictions and customer bookings per day are all available here. Please read about the settings scope parameter before setting these values as it may simplify your process.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Settings Scope&lt;/b&gt; can be set to the company or the business location level. You can have all locations use the same company level settings or individual business locations can define their own, business location scope. If you want to use the company settings throughout all locations, do not pass in &lt;b&gt;settings element&lt;/b&gt;. To create business location scoped settings, pass in the &lt;b&gt;settings element&lt;/b&gt; with the field values defined in the post body. &lt;/p&gt;  &lt;p&gt;    &lt;b&gt;Appointment Reminders&lt;/b&gt; Reminder values are used to define how many hours, days, or weeks (interval value) prior to the appointment to send the reminder. &lt;b&gt;Interval&lt;/b&gt; values are used to define the reminder interval: &lt;b&gt;1 &#x3D; Hours&lt;/b&gt;, &lt;b&gt;2 &#x3D; Days&lt;/b&gt; and &lt;b&gt;3 &#x3D; Weeks&lt;/b&gt;. The reminder fields are numbers. If you are using the hours interval, use a number from 1 to 24.&lt;/p&gt;  &lt;p&gt;Example 1: &lt;b&gt;emailFirstReminder:  1, emailFirstReminderInterval:  2&lt;/b&gt; - results in 1st reminder being sent &lt;b&gt;1 Day before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;Example 2: &lt;b&gt;emailSecondReminder: 3, emailSecondReminderInterval: 1&lt;/b&gt; - results in 2nd reminder being sent &lt;b&gt;3 Hours before&lt;/b&gt; the appointment time.&lt;/p&gt;  &lt;p&gt;    &lt;b&gt;IMPORTANT DEPRECATION NOTICE&lt;/b&gt;: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on &lt;b&gt;OCTOBER 15, 2022&lt;/b&gt;. These fields are currently part of the &lt;b&gt;SETTINGS&lt;/b&gt; object in all location endpoints: &lt;b&gt;businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.&lt;/b&gt; If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: &lt;b&gt;&lt;i&gt;support@onsched.com&lt;/i&gt;&lt;/b&gt; as we do not want to interrupt your existing workflows.&lt;/p&gt;
     * @param locationInputModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsPostAsync(LocationInputModel locationInputModel, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsPostValidateBeforeCall(locationInputModel, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsServicesIdDelete
     * @param id id of locationService object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsServicesIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/services/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsServicesIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsServicesIdDelete(Async)");
        }

        return setupV1LocationsServicesIdDeleteCall(id, _callback);

    }

    /**
     * Unlink Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Unlink&lt;/b&gt; a location service from a business location. A valid &lt;b&gt;locationService id&lt;/b&gt; is required. Find location services by using the &lt;i&gt;GET ​/setup​/v1​/locations​/{id}​/services&lt;/i&gt; endpoint. &lt;/p&gt;
     * @param id id of locationService object (required)
     * @return LocationViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationViewModel setupV1LocationsServicesIdDelete(String id) throws ApiException {
        ApiResponse<LocationViewModel> localVarResp = setupV1LocationsServicesIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Unlink Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Unlink&lt;/b&gt; a location service from a business location. A valid &lt;b&gt;locationService id&lt;/b&gt; is required. Find location services by using the &lt;i&gt;GET ​/setup​/v1​/locations​/{id}​/services&lt;/i&gt; endpoint. &lt;/p&gt;
     * @param id id of locationService object (required)
     * @return ApiResponse&lt;LocationViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationViewModel> setupV1LocationsServicesIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsServicesIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unlink Service (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Unlink&lt;/b&gt; a location service from a business location. A valid &lt;b&gt;locationService id&lt;/b&gt; is required. Find location services by using the &lt;i&gt;GET ​/setup​/v1​/locations​/{id}​/services&lt;/i&gt; endpoint. &lt;/p&gt;
     * @param id id of locationService object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsServicesIdDeleteAsync(String id, final ApiCallback<LocationViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsServicesIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LocationViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setupV1LocationsServicesIdGet
     * @param id id of locationService object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location service objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Location was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsServicesIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/v1/locations/services/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setupV1LocationsServicesIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setupV1LocationsServicesIdGet(Async)");
        }

        return setupV1LocationsServicesIdGetCall(id, _callback);

    }

    /**
     * Get Linked Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get a Linked Service&lt;/b&gt;. A valid &lt;b&gt;locationService id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of locationService object (required)
     * @return BusinessServiceViewModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location service objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Location was not found </td><td>  -  </td></tr>
     </table>
     */
    public BusinessServiceViewModel setupV1LocationsServicesIdGet(String id) throws ApiException {
        ApiResponse<BusinessServiceViewModel> localVarResp = setupV1LocationsServicesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Linked Service
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get a Linked Service&lt;/b&gt;. A valid &lt;b&gt;locationService id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of locationService object (required)
     * @return ApiResponse&lt;BusinessServiceViewModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location service objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Location was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessServiceViewModel> setupV1LocationsServicesIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = setupV1LocationsServicesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessServiceViewModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Linked Service (asynchronously)
     * &lt;p&gt;Use this endpoint to &lt;b&gt;Get a Linked Service&lt;/b&gt;. A valid &lt;b&gt;locationService id&lt;/b&gt; is required.&lt;/p&gt;
     * @param id id of locationService object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> location service objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid values in the request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Location was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setupV1LocationsServicesIdGetAsync(String id, final ApiCallback<BusinessServiceViewModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = setupV1LocationsServicesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessServiceViewModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
