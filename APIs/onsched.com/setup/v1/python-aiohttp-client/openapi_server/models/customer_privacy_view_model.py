# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.appointment_view_model import AppointmentViewModel
from openapi_server.models.customer_view_model import CustomerViewModel
from openapi_server import util


class CustomerPrivacyViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appointments: List[AppointmentViewModel]=None, customer: CustomerViewModel=None):
        """CustomerPrivacyViewModel - a model defined in OpenAPI

        :param appointments: The appointments of this CustomerPrivacyViewModel.
        :param customer: The customer of this CustomerPrivacyViewModel.
        """
        self.openapi_types = {
            'appointments': List[AppointmentViewModel],
            'customer': CustomerViewModel
        }

        self.attribute_map = {
            'appointments': 'appointments',
            'customer': 'customer'
        }

        self._appointments = appointments
        self._customer = customer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerPrivacyViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerPrivacyViewModel of this CustomerPrivacyViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appointments(self):
        """Gets the appointments of this CustomerPrivacyViewModel.


        :return: The appointments of this CustomerPrivacyViewModel.
        :rtype: List[AppointmentViewModel]
        """
        return self._appointments

    @appointments.setter
    def appointments(self, appointments):
        """Sets the appointments of this CustomerPrivacyViewModel.


        :param appointments: The appointments of this CustomerPrivacyViewModel.
        :type appointments: List[AppointmentViewModel]
        """

        self._appointments = appointments

    @property
    def customer(self):
        """Gets the customer of this CustomerPrivacyViewModel.


        :return: The customer of this CustomerPrivacyViewModel.
        :rtype: CustomerViewModel
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this CustomerPrivacyViewModel.


        :param customer: The customer of this CustomerPrivacyViewModel.
        :type customer: CustomerViewModel
        """

        self._customer = customer
