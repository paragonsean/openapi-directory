# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.business_user_permission_view_model import BusinessUserPermissionViewModel
from openapi_server import util


class BusinessUserViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, business_name: str=None, email: str=None, id: str=None, identity_account: bool=None, location_id: str=None, name: str=None, object: str=None, permissions: List[BusinessUserPermissionViewModel]=None, resource_id: str=None, resource_name: str=None, role: str=None):
        """BusinessUserViewModel - a model defined in OpenAPI

        :param account_id: The account_id of this BusinessUserViewModel.
        :param business_name: The business_name of this BusinessUserViewModel.
        :param email: The email of this BusinessUserViewModel.
        :param id: The id of this BusinessUserViewModel.
        :param identity_account: The identity_account of this BusinessUserViewModel.
        :param location_id: The location_id of this BusinessUserViewModel.
        :param name: The name of this BusinessUserViewModel.
        :param object: The object of this BusinessUserViewModel.
        :param permissions: The permissions of this BusinessUserViewModel.
        :param resource_id: The resource_id of this BusinessUserViewModel.
        :param resource_name: The resource_name of this BusinessUserViewModel.
        :param role: The role of this BusinessUserViewModel.
        """
        self.openapi_types = {
            'account_id': str,
            'business_name': str,
            'email': str,
            'id': str,
            'identity_account': bool,
            'location_id': str,
            'name': str,
            'object': str,
            'permissions': List[BusinessUserPermissionViewModel],
            'resource_id': str,
            'resource_name': str,
            'role': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'business_name': 'businessName',
            'email': 'email',
            'id': 'id',
            'identity_account': 'identityAccount',
            'location_id': 'locationId',
            'name': 'name',
            'object': 'object',
            'permissions': 'permissions',
            'resource_id': 'resourceId',
            'resource_name': 'resourceName',
            'role': 'role'
        }

        self._account_id = account_id
        self._business_name = business_name
        self._email = email
        self._id = id
        self._identity_account = identity_account
        self._location_id = location_id
        self._name = name
        self._object = object
        self._permissions = permissions
        self._resource_id = resource_id
        self._resource_name = resource_name
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessUserViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessUserViewModel of this BusinessUserViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this BusinessUserViewModel.


        :return: The account_id of this BusinessUserViewModel.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BusinessUserViewModel.


        :param account_id: The account_id of this BusinessUserViewModel.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def business_name(self):
        """Gets the business_name of this BusinessUserViewModel.


        :return: The business_name of this BusinessUserViewModel.
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this BusinessUserViewModel.


        :param business_name: The business_name of this BusinessUserViewModel.
        :type business_name: str
        """

        self._business_name = business_name

    @property
    def email(self):
        """Gets the email of this BusinessUserViewModel.


        :return: The email of this BusinessUserViewModel.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BusinessUserViewModel.


        :param email: The email of this BusinessUserViewModel.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this BusinessUserViewModel.


        :return: The id of this BusinessUserViewModel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BusinessUserViewModel.


        :param id: The id of this BusinessUserViewModel.
        :type id: str
        """

        self._id = id

    @property
    def identity_account(self):
        """Gets the identity_account of this BusinessUserViewModel.


        :return: The identity_account of this BusinessUserViewModel.
        :rtype: bool
        """
        return self._identity_account

    @identity_account.setter
    def identity_account(self, identity_account):
        """Sets the identity_account of this BusinessUserViewModel.


        :param identity_account: The identity_account of this BusinessUserViewModel.
        :type identity_account: bool
        """

        self._identity_account = identity_account

    @property
    def location_id(self):
        """Gets the location_id of this BusinessUserViewModel.


        :return: The location_id of this BusinessUserViewModel.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this BusinessUserViewModel.


        :param location_id: The location_id of this BusinessUserViewModel.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def name(self):
        """Gets the name of this BusinessUserViewModel.


        :return: The name of this BusinessUserViewModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BusinessUserViewModel.


        :param name: The name of this BusinessUserViewModel.
        :type name: str
        """

        self._name = name

    @property
    def object(self):
        """Gets the object of this BusinessUserViewModel.


        :return: The object of this BusinessUserViewModel.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this BusinessUserViewModel.


        :param object: The object of this BusinessUserViewModel.
        :type object: str
        """

        self._object = object

    @property
    def permissions(self):
        """Gets the permissions of this BusinessUserViewModel.


        :return: The permissions of this BusinessUserViewModel.
        :rtype: List[BusinessUserPermissionViewModel]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this BusinessUserViewModel.


        :param permissions: The permissions of this BusinessUserViewModel.
        :type permissions: List[BusinessUserPermissionViewModel]
        """

        self._permissions = permissions

    @property
    def resource_id(self):
        """Gets the resource_id of this BusinessUserViewModel.


        :return: The resource_id of this BusinessUserViewModel.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this BusinessUserViewModel.


        :param resource_id: The resource_id of this BusinessUserViewModel.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this BusinessUserViewModel.


        :return: The resource_name of this BusinessUserViewModel.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this BusinessUserViewModel.


        :param resource_name: The resource_name of this BusinessUserViewModel.
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def role(self):
        """Gets the role of this BusinessUserViewModel.


        :return: The role of this BusinessUserViewModel.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this BusinessUserViewModel.


        :param role: The role of this BusinessUserViewModel.
        :type role: str
        """

        self._role = role
