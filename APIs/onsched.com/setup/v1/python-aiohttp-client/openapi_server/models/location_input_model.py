# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_input_model import AddressInputModel
from openapi_server.models.appointment_reminders_input_model import AppointmentRemindersInputModel
from openapi_server.models.business_defaults_input_model import BusinessDefaultsInputModel
from openapi_server.models.business_hours_input_model import BusinessHoursInputModel
from openapi_server.models.online_settings_input_model import OnlineSettingsInputModel
from openapi_server import util


class LocationInputModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: AddressInputModel=None, admin_email: str=None, admin_name: str=None, appointment_reminders: AppointmentRemindersInputModel=None, business_hours: BusinessHoursInputModel=None, defaults: BusinessDefaultsInputModel=None, email: str=None, fax: str=None, friendly_id: str=None, name: str=None, phone: str=None, region_id: str=None, settings: OnlineSettingsInputModel=None, timezone_name: str=None, website: str=None):
        """LocationInputModel - a model defined in OpenAPI

        :param address: The address of this LocationInputModel.
        :param admin_email: The admin_email of this LocationInputModel.
        :param admin_name: The admin_name of this LocationInputModel.
        :param appointment_reminders: The appointment_reminders of this LocationInputModel.
        :param business_hours: The business_hours of this LocationInputModel.
        :param defaults: The defaults of this LocationInputModel.
        :param email: The email of this LocationInputModel.
        :param fax: The fax of this LocationInputModel.
        :param friendly_id: The friendly_id of this LocationInputModel.
        :param name: The name of this LocationInputModel.
        :param phone: The phone of this LocationInputModel.
        :param region_id: The region_id of this LocationInputModel.
        :param settings: The settings of this LocationInputModel.
        :param timezone_name: The timezone_name of this LocationInputModel.
        :param website: The website of this LocationInputModel.
        """
        self.openapi_types = {
            'address': AddressInputModel,
            'admin_email': str,
            'admin_name': str,
            'appointment_reminders': AppointmentRemindersInputModel,
            'business_hours': BusinessHoursInputModel,
            'defaults': BusinessDefaultsInputModel,
            'email': str,
            'fax': str,
            'friendly_id': str,
            'name': str,
            'phone': str,
            'region_id': str,
            'settings': OnlineSettingsInputModel,
            'timezone_name': str,
            'website': str
        }

        self.attribute_map = {
            'address': 'address',
            'admin_email': 'adminEmail',
            'admin_name': 'adminName',
            'appointment_reminders': 'appointmentReminders',
            'business_hours': 'businessHours',
            'defaults': 'defaults',
            'email': 'email',
            'fax': 'fax',
            'friendly_id': 'friendlyId',
            'name': 'name',
            'phone': 'phone',
            'region_id': 'regionId',
            'settings': 'settings',
            'timezone_name': 'timezoneName',
            'website': 'website'
        }

        self._address = address
        self._admin_email = admin_email
        self._admin_name = admin_name
        self._appointment_reminders = appointment_reminders
        self._business_hours = business_hours
        self._defaults = defaults
        self._email = email
        self._fax = fax
        self._friendly_id = friendly_id
        self._name = name
        self._phone = phone
        self._region_id = region_id
        self._settings = settings
        self._timezone_name = timezone_name
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationInputModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationInputModel of this LocationInputModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this LocationInputModel.


        :return: The address of this LocationInputModel.
        :rtype: AddressInputModel
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LocationInputModel.


        :param address: The address of this LocationInputModel.
        :type address: AddressInputModel
        """

        self._address = address

    @property
    def admin_email(self):
        """Gets the admin_email of this LocationInputModel.

        Field is required.

        :return: The admin_email of this LocationInputModel.
        :rtype: str
        """
        return self._admin_email

    @admin_email.setter
    def admin_email(self, admin_email):
        """Sets the admin_email of this LocationInputModel.

        Field is required.

        :param admin_email: The admin_email of this LocationInputModel.
        :type admin_email: str
        """

        self._admin_email = admin_email

    @property
    def admin_name(self):
        """Gets the admin_name of this LocationInputModel.

        This field is no longer required and has been deprecated.

        :return: The admin_name of this LocationInputModel.
        :rtype: str
        """
        return self._admin_name

    @admin_name.setter
    def admin_name(self, admin_name):
        """Sets the admin_name of this LocationInputModel.

        This field is no longer required and has been deprecated.

        :param admin_name: The admin_name of this LocationInputModel.
        :type admin_name: str
        """

        self._admin_name = admin_name

    @property
    def appointment_reminders(self):
        """Gets the appointment_reminders of this LocationInputModel.


        :return: The appointment_reminders of this LocationInputModel.
        :rtype: AppointmentRemindersInputModel
        """
        return self._appointment_reminders

    @appointment_reminders.setter
    def appointment_reminders(self, appointment_reminders):
        """Sets the appointment_reminders of this LocationInputModel.


        :param appointment_reminders: The appointment_reminders of this LocationInputModel.
        :type appointment_reminders: AppointmentRemindersInputModel
        """

        self._appointment_reminders = appointment_reminders

    @property
    def business_hours(self):
        """Gets the business_hours of this LocationInputModel.


        :return: The business_hours of this LocationInputModel.
        :rtype: BusinessHoursInputModel
        """
        return self._business_hours

    @business_hours.setter
    def business_hours(self, business_hours):
        """Sets the business_hours of this LocationInputModel.


        :param business_hours: The business_hours of this LocationInputModel.
        :type business_hours: BusinessHoursInputModel
        """

        self._business_hours = business_hours

    @property
    def defaults(self):
        """Gets the defaults of this LocationInputModel.


        :return: The defaults of this LocationInputModel.
        :rtype: BusinessDefaultsInputModel
        """
        return self._defaults

    @defaults.setter
    def defaults(self, defaults):
        """Sets the defaults of this LocationInputModel.


        :param defaults: The defaults of this LocationInputModel.
        :type defaults: BusinessDefaultsInputModel
        """

        self._defaults = defaults

    @property
    def email(self):
        """Gets the email of this LocationInputModel.


        :return: The email of this LocationInputModel.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this LocationInputModel.


        :param email: The email of this LocationInputModel.
        :type email: str
        """

        self._email = email

    @property
    def fax(self):
        """Gets the fax of this LocationInputModel.


        :return: The fax of this LocationInputModel.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this LocationInputModel.


        :param fax: The fax of this LocationInputModel.
        :type fax: str
        """

        self._fax = fax

    @property
    def friendly_id(self):
        """Gets the friendly_id of this LocationInputModel.

        Use the friendlyId as an alternative to the assigned locationId  Choose something easy and meaningful. Must be unique within your company.  FriendlyId's are limited to maximum of 64 characters.

        :return: The friendly_id of this LocationInputModel.
        :rtype: str
        """
        return self._friendly_id

    @friendly_id.setter
    def friendly_id(self, friendly_id):
        """Sets the friendly_id of this LocationInputModel.

        Use the friendlyId as an alternative to the assigned locationId  Choose something easy and meaningful. Must be unique within your company.  FriendlyId's are limited to maximum of 64 characters.

        :param friendly_id: The friendly_id of this LocationInputModel.
        :type friendly_id: str
        """

        self._friendly_id = friendly_id

    @property
    def name(self):
        """Gets the name of this LocationInputModel.


        :return: The name of this LocationInputModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocationInputModel.


        :param name: The name of this LocationInputModel.
        :type name: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this LocationInputModel.

        GroupSize Limits the number of people that can come  along on a single appointment

        :return: The phone of this LocationInputModel.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this LocationInputModel.

        GroupSize Limits the number of people that can come  along on a single appointment

        :param phone: The phone of this LocationInputModel.
        :type phone: str
        """

        self._phone = phone

    @property
    def region_id(self):
        """Gets the region_id of this LocationInputModel.


        :return: The region_id of this LocationInputModel.
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this LocationInputModel.


        :param region_id: The region_id of this LocationInputModel.
        :type region_id: str
        """

        self._region_id = region_id

    @property
    def settings(self):
        """Gets the settings of this LocationInputModel.


        :return: The settings of this LocationInputModel.
        :rtype: OnlineSettingsInputModel
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this LocationInputModel.


        :param settings: The settings of this LocationInputModel.
        :type settings: OnlineSettingsInputModel
        """

        self._settings = settings

    @property
    def timezone_name(self):
        """Gets the timezone_name of this LocationInputModel.

        Field is required. It is in Iana format. e.g. America/New_York. Use moment.js in your client for ease of timezone detection and selection

        :return: The timezone_name of this LocationInputModel.
        :rtype: str
        """
        return self._timezone_name

    @timezone_name.setter
    def timezone_name(self, timezone_name):
        """Sets the timezone_name of this LocationInputModel.

        Field is required. It is in Iana format. e.g. America/New_York. Use moment.js in your client for ease of timezone detection and selection

        :param timezone_name: The timezone_name of this LocationInputModel.
        :type timezone_name: str
        """

        self._timezone_name = timezone_name

    @property
    def website(self):
        """Gets the website of this LocationInputModel.


        :return: The website of this LocationInputModel.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this LocationInputModel.


        :param website: The website of this LocationInputModel.
        :type website: str
        """

        self._website = website
