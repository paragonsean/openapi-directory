# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmailTemplateViewModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customized: bool=None, description: str=None, name: str=None, object: str=None, scope: str=None):
        """EmailTemplateViewModel - a model defined in OpenAPI

        :param customized: The customized of this EmailTemplateViewModel.
        :param description: The description of this EmailTemplateViewModel.
        :param name: The name of this EmailTemplateViewModel.
        :param object: The object of this EmailTemplateViewModel.
        :param scope: The scope of this EmailTemplateViewModel.
        """
        self.openapi_types = {
            'customized': bool,
            'description': str,
            'name': str,
            'object': str,
            'scope': str
        }

        self.attribute_map = {
            'customized': 'customized',
            'description': 'description',
            'name': 'name',
            'object': 'object',
            'scope': 'scope'
        }

        self._customized = customized
        self._description = description
        self._name = name
        self._object = object
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailTemplateViewModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailTemplateViewModel of this EmailTemplateViewModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customized(self):
        """Gets the customized of this EmailTemplateViewModel.


        :return: The customized of this EmailTemplateViewModel.
        :rtype: bool
        """
        return self._customized

    @customized.setter
    def customized(self, customized):
        """Sets the customized of this EmailTemplateViewModel.


        :param customized: The customized of this EmailTemplateViewModel.
        :type customized: bool
        """

        self._customized = customized

    @property
    def description(self):
        """Gets the description of this EmailTemplateViewModel.


        :return: The description of this EmailTemplateViewModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EmailTemplateViewModel.


        :param description: The description of this EmailTemplateViewModel.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this EmailTemplateViewModel.


        :return: The name of this EmailTemplateViewModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmailTemplateViewModel.


        :param name: The name of this EmailTemplateViewModel.
        :type name: str
        """

        self._name = name

    @property
    def object(self):
        """Gets the object of this EmailTemplateViewModel.


        :return: The object of this EmailTemplateViewModel.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this EmailTemplateViewModel.


        :param object: The object of this EmailTemplateViewModel.
        :type object: str
        """

        self._object = object

    @property
    def scope(self):
        """Gets the scope of this EmailTemplateViewModel.


        :return: The scope of this EmailTemplateViewModel.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this EmailTemplateViewModel.


        :param scope: The scope of this EmailTemplateViewModel.
        :type scope: str
        """

        self._scope = scope
