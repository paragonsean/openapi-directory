# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SkillJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, importance: float=None, level: float=None, normalized_skill_name: str=None, skill_name: str=None, skill_uuid: str=None):
        """SkillJob - a model defined in OpenAPI

        :param description: The description of this SkillJob.
        :param importance: The importance of this SkillJob.
        :param level: The level of this SkillJob.
        :param normalized_skill_name: The normalized_skill_name of this SkillJob.
        :param skill_name: The skill_name of this SkillJob.
        :param skill_uuid: The skill_uuid of this SkillJob.
        """
        self.openapi_types = {
            'description': str,
            'importance': float,
            'level': float,
            'normalized_skill_name': str,
            'skill_name': str,
            'skill_uuid': str
        }

        self.attribute_map = {
            'description': 'description',
            'importance': 'importance',
            'level': 'level',
            'normalized_skill_name': 'normalized_skill_name',
            'skill_name': 'skill_name',
            'skill_uuid': 'skill_uuid'
        }

        self._description = description
        self._importance = importance
        self._level = level
        self._normalized_skill_name = normalized_skill_name
        self._skill_name = skill_name
        self._skill_uuid = skill_uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkillJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkillJob of this SkillJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this SkillJob.

        Description of the skill

        :return: The description of this SkillJob.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SkillJob.

        Description of the skill

        :param description: The description of this SkillJob.
        :type description: str
        """

        self._description = description

    @property
    def importance(self):
        """Gets the importance of this SkillJob.

        O*NET importance score

        :return: The importance of this SkillJob.
        :rtype: float
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this SkillJob.

        O*NET importance score

        :param importance: The importance of this SkillJob.
        :type importance: float
        """

        self._importance = importance

    @property
    def level(self):
        """Gets the level of this SkillJob.

        O*NET level score

        :return: The level of this SkillJob.
        :rtype: float
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this SkillJob.

        O*NET level score

        :param level: The level of this SkillJob.
        :type level: float
        """

        self._level = level

    @property
    def normalized_skill_name(self):
        """Gets the normalized_skill_name of this SkillJob.

        Normalized skill name

        :return: The normalized_skill_name of this SkillJob.
        :rtype: str
        """
        return self._normalized_skill_name

    @normalized_skill_name.setter
    def normalized_skill_name(self, normalized_skill_name):
        """Sets the normalized_skill_name of this SkillJob.

        Normalized skill name

        :param normalized_skill_name: The normalized_skill_name of this SkillJob.
        :type normalized_skill_name: str
        """

        self._normalized_skill_name = normalized_skill_name

    @property
    def skill_name(self):
        """Gets the skill_name of this SkillJob.

        Name of the skill

        :return: The skill_name of this SkillJob.
        :rtype: str
        """
        return self._skill_name

    @skill_name.setter
    def skill_name(self, skill_name):
        """Sets the skill_name of this SkillJob.

        Name of the skill

        :param skill_name: The skill_name of this SkillJob.
        :type skill_name: str
        """

        self._skill_name = skill_name

    @property
    def skill_uuid(self):
        """Gets the skill_uuid of this SkillJob.

        Universally Unique Identifier for the skill

        :return: The skill_uuid of this SkillJob.
        :rtype: str
        """
        return self._skill_uuid

    @skill_uuid.setter
    def skill_uuid(self, skill_uuid):
        """Sets the skill_uuid of this SkillJob.

        Universally Unique Identifier for the skill

        :param skill_uuid: The skill_uuid of this SkillJob.
        :type skill_uuid: str
        """

        self._skill_uuid = skill_uuid
