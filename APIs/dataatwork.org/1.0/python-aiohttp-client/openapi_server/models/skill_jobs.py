# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_skill import JobSkill
from openapi_server import util


class SkillJobs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, jobs: List[JobSkill]=None, normalized_job_title: str=None, skill_name: str=None, skill_uuid: str=None):
        """SkillJobs - a model defined in OpenAPI

        :param jobs: The jobs of this SkillJobs.
        :param normalized_job_title: The normalized_job_title of this SkillJobs.
        :param skill_name: The skill_name of this SkillJobs.
        :param skill_uuid: The skill_uuid of this SkillJobs.
        """
        self.openapi_types = {
            'jobs': List[JobSkill],
            'normalized_job_title': str,
            'skill_name': str,
            'skill_uuid': str
        }

        self.attribute_map = {
            'jobs': 'jobs',
            'normalized_job_title': 'normalized_job_title',
            'skill_name': 'skill_name',
            'skill_uuid': 'skill_uuid'
        }

        self._jobs = jobs
        self._normalized_job_title = normalized_job_title
        self._skill_name = skill_name
        self._skill_uuid = skill_uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkillJobs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkillJobs of this SkillJobs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def jobs(self):
        """Gets the jobs of this SkillJobs.


        :return: The jobs of this SkillJobs.
        :rtype: List[JobSkill]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this SkillJobs.


        :param jobs: The jobs of this SkillJobs.
        :type jobs: List[JobSkill]
        """

        self._jobs = jobs

    @property
    def normalized_job_title(self):
        """Gets the normalized_job_title of this SkillJobs.

        Normalized title of the job associated with the UUID

        :return: The normalized_job_title of this SkillJobs.
        :rtype: str
        """
        return self._normalized_job_title

    @normalized_job_title.setter
    def normalized_job_title(self, normalized_job_title):
        """Sets the normalized_job_title of this SkillJobs.

        Normalized title of the job associated with the UUID

        :param normalized_job_title: The normalized_job_title of this SkillJobs.
        :type normalized_job_title: str
        """

        self._normalized_job_title = normalized_job_title

    @property
    def skill_name(self):
        """Gets the skill_name of this SkillJobs.

        Title of the job associated with the UUID

        :return: The skill_name of this SkillJobs.
        :rtype: str
        """
        return self._skill_name

    @skill_name.setter
    def skill_name(self, skill_name):
        """Sets the skill_name of this SkillJobs.

        Title of the job associated with the UUID

        :param skill_name: The skill_name of this SkillJobs.
        :type skill_name: str
        """

        self._skill_name = skill_name

    @property
    def skill_uuid(self):
        """Gets the skill_uuid of this SkillJobs.

        Universally Unique Identifier for the job

        :return: The skill_uuid of this SkillJobs.
        :rtype: str
        """
        return self._skill_uuid

    @skill_uuid.setter
    def skill_uuid(self, skill_uuid):
        """Sets the skill_uuid of this SkillJobs.

        Universally Unique Identifier for the job

        :param skill_uuid: The skill_uuid of this SkillJobs.
        :type skill_uuid: str
        """

        self._skill_uuid = skill_uuid
