# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Skill(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, normalized_skill_name: str=None, onet_element_id: str=None, uuid: str=None):
        """Skill - a model defined in OpenAPI

        :param name: The name of this Skill.
        :param normalized_skill_name: The normalized_skill_name of this Skill.
        :param onet_element_id: The onet_element_id of this Skill.
        :param uuid: The uuid of this Skill.
        """
        self.openapi_types = {
            'name': str,
            'normalized_skill_name': str,
            'onet_element_id': str,
            'uuid': str
        }

        self.attribute_map = {
            'name': 'name',
            'normalized_skill_name': 'normalized_skill_name',
            'onet_element_id': 'onet_element_id',
            'uuid': 'uuid'
        }

        self._name = name
        self._normalized_skill_name = normalized_skill_name
        self._onet_element_id = onet_element_id
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Skill':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Skill of this Skill.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Skill.

        Skill name

        :return: The name of this Skill.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Skill.

        Skill name

        :param name: The name of this Skill.
        :type name: str
        """

        self._name = name

    @property
    def normalized_skill_name(self):
        """Gets the normalized_skill_name of this Skill.

        Normalized skill name

        :return: The normalized_skill_name of this Skill.
        :rtype: str
        """
        return self._normalized_skill_name

    @normalized_skill_name.setter
    def normalized_skill_name(self, normalized_skill_name):
        """Sets the normalized_skill_name of this Skill.

        Normalized skill name

        :param normalized_skill_name: The normalized_skill_name of this Skill.
        :type normalized_skill_name: str
        """

        self._normalized_skill_name = normalized_skill_name

    @property
    def onet_element_id(self):
        """Gets the onet_element_id of this Skill.

        O*NET Element Identifier

        :return: The onet_element_id of this Skill.
        :rtype: str
        """
        return self._onet_element_id

    @onet_element_id.setter
    def onet_element_id(self, onet_element_id):
        """Sets the onet_element_id of this Skill.

        O*NET Element Identifier

        :param onet_element_id: The onet_element_id of this Skill.
        :type onet_element_id: str
        """

        self._onet_element_id = onet_element_id

    @property
    def uuid(self):
        """Gets the uuid of this Skill.

        Universally Unique Identifier for the skill

        :return: The uuid of this Skill.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Skill.

        Universally Unique Identifier for the skill

        :param uuid: The uuid of this Skill.
        :type uuid: str
        """

        self._uuid = uuid
