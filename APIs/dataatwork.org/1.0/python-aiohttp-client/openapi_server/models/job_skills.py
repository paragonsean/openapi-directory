# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.skill_job import SkillJob
from openapi_server import util


class JobSkills(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_title: str=None, job_uuid: str=None, normalized_job_title: str=None, skills: List[SkillJob]=None):
        """JobSkills - a model defined in OpenAPI

        :param job_title: The job_title of this JobSkills.
        :param job_uuid: The job_uuid of this JobSkills.
        :param normalized_job_title: The normalized_job_title of this JobSkills.
        :param skills: The skills of this JobSkills.
        """
        self.openapi_types = {
            'job_title': str,
            'job_uuid': str,
            'normalized_job_title': str,
            'skills': List[SkillJob]
        }

        self.attribute_map = {
            'job_title': 'job_title',
            'job_uuid': 'job_uuid',
            'normalized_job_title': 'normalized_job_title',
            'skills': 'skills'
        }

        self._job_title = job_title
        self._job_uuid = job_uuid
        self._normalized_job_title = normalized_job_title
        self._skills = skills

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobSkills':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobSkills of this JobSkills.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_title(self):
        """Gets the job_title of this JobSkills.

        Title of the job associated with the UUID

        :return: The job_title of this JobSkills.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this JobSkills.

        Title of the job associated with the UUID

        :param job_title: The job_title of this JobSkills.
        :type job_title: str
        """

        self._job_title = job_title

    @property
    def job_uuid(self):
        """Gets the job_uuid of this JobSkills.

        Universally Unique Identifier for the job

        :return: The job_uuid of this JobSkills.
        :rtype: str
        """
        return self._job_uuid

    @job_uuid.setter
    def job_uuid(self, job_uuid):
        """Sets the job_uuid of this JobSkills.

        Universally Unique Identifier for the job

        :param job_uuid: The job_uuid of this JobSkills.
        :type job_uuid: str
        """

        self._job_uuid = job_uuid

    @property
    def normalized_job_title(self):
        """Gets the normalized_job_title of this JobSkills.

        Normalized title of the job associated with the UUID

        :return: The normalized_job_title of this JobSkills.
        :rtype: str
        """
        return self._normalized_job_title

    @normalized_job_title.setter
    def normalized_job_title(self, normalized_job_title):
        """Sets the normalized_job_title of this JobSkills.

        Normalized title of the job associated with the UUID

        :param normalized_job_title: The normalized_job_title of this JobSkills.
        :type normalized_job_title: str
        """

        self._normalized_job_title = normalized_job_title

    @property
    def skills(self):
        """Gets the skills of this JobSkills.


        :return: The skills of this JobSkills.
        :rtype: List[SkillJob]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this JobSkills.


        :param skills: The skills of this JobSkills.
        :type skills: List[SkillJob]
        """

        self._skills = skills
