/**
 * Open Skills API
 * A complete and standard data store for canonical and emerging skills, knowledge, abilities, tools, technolgies, and how they relate to jobs.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkillJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkillJob::OAISkillJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkillJob::OAISkillJob() {
    this->initializeModel();
}

OAISkillJob::~OAISkillJob() {}

void OAISkillJob::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_importance_isSet = false;
    m_importance_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_normalized_skill_name_isSet = false;
    m_normalized_skill_name_isValid = false;

    m_skill_name_isSet = false;
    m_skill_name_isValid = false;

    m_skill_uuid_isSet = false;
    m_skill_uuid_isValid = false;
}

void OAISkillJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkillJob::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_importance_isValid = ::OpenAPI::fromJsonValue(m_importance, json[QString("importance")]);
    m_importance_isSet = !json[QString("importance")].isNull() && m_importance_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_normalized_skill_name_isValid = ::OpenAPI::fromJsonValue(m_normalized_skill_name, json[QString("normalized_skill_name")]);
    m_normalized_skill_name_isSet = !json[QString("normalized_skill_name")].isNull() && m_normalized_skill_name_isValid;

    m_skill_name_isValid = ::OpenAPI::fromJsonValue(m_skill_name, json[QString("skill_name")]);
    m_skill_name_isSet = !json[QString("skill_name")].isNull() && m_skill_name_isValid;

    m_skill_uuid_isValid = ::OpenAPI::fromJsonValue(m_skill_uuid, json[QString("skill_uuid")]);
    m_skill_uuid_isSet = !json[QString("skill_uuid")].isNull() && m_skill_uuid_isValid;
}

QString OAISkillJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkillJob::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_importance_isSet) {
        obj.insert(QString("importance"), ::OpenAPI::toJsonValue(m_importance));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_normalized_skill_name_isSet) {
        obj.insert(QString("normalized_skill_name"), ::OpenAPI::toJsonValue(m_normalized_skill_name));
    }
    if (m_skill_name_isSet) {
        obj.insert(QString("skill_name"), ::OpenAPI::toJsonValue(m_skill_name));
    }
    if (m_skill_uuid_isSet) {
        obj.insert(QString("skill_uuid"), ::OpenAPI::toJsonValue(m_skill_uuid));
    }
    return obj;
}

QString OAISkillJob::getDescription() const {
    return m_description;
}
void OAISkillJob::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISkillJob::is_description_Set() const{
    return m_description_isSet;
}

bool OAISkillJob::is_description_Valid() const{
    return m_description_isValid;
}

double OAISkillJob::getImportance() const {
    return m_importance;
}
void OAISkillJob::setImportance(const double &importance) {
    m_importance = importance;
    m_importance_isSet = true;
}

bool OAISkillJob::is_importance_Set() const{
    return m_importance_isSet;
}

bool OAISkillJob::is_importance_Valid() const{
    return m_importance_isValid;
}

double OAISkillJob::getLevel() const {
    return m_level;
}
void OAISkillJob::setLevel(const double &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAISkillJob::is_level_Set() const{
    return m_level_isSet;
}

bool OAISkillJob::is_level_Valid() const{
    return m_level_isValid;
}

QString OAISkillJob::getNormalizedSkillName() const {
    return m_normalized_skill_name;
}
void OAISkillJob::setNormalizedSkillName(const QString &normalized_skill_name) {
    m_normalized_skill_name = normalized_skill_name;
    m_normalized_skill_name_isSet = true;
}

bool OAISkillJob::is_normalized_skill_name_Set() const{
    return m_normalized_skill_name_isSet;
}

bool OAISkillJob::is_normalized_skill_name_Valid() const{
    return m_normalized_skill_name_isValid;
}

QString OAISkillJob::getSkillName() const {
    return m_skill_name;
}
void OAISkillJob::setSkillName(const QString &skill_name) {
    m_skill_name = skill_name;
    m_skill_name_isSet = true;
}

bool OAISkillJob::is_skill_name_Set() const{
    return m_skill_name_isSet;
}

bool OAISkillJob::is_skill_name_Valid() const{
    return m_skill_name_isValid;
}

QString OAISkillJob::getSkillUuid() const {
    return m_skill_uuid;
}
void OAISkillJob::setSkillUuid(const QString &skill_uuid) {
    m_skill_uuid = skill_uuid;
    m_skill_uuid_isSet = true;
}

bool OAISkillJob::is_skill_uuid_Set() const{
    return m_skill_uuid_isSet;
}

bool OAISkillJob::is_skill_uuid_Valid() const{
    return m_skill_uuid_isValid;
}

bool OAISkillJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_importance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_skill_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skill_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skill_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkillJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
