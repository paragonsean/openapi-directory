/**
 * Open Skills API
 * A complete and standard data store for canonical and emerging skills, knowledge, abilities, tools, technolgies, and how they relate to jobs.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobRelatedJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobRelatedJob::OAIJobRelatedJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobRelatedJob::OAIJobRelatedJob() {
    this->initializeModel();
}

OAIJobRelatedJob::~OAIJobRelatedJob() {}

void OAIJobRelatedJob::initializeModel() {

    m_parent_uuid_isSet = false;
    m_parent_uuid_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIJobRelatedJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobRelatedJob::fromJsonObject(QJsonObject json) {

    m_parent_uuid_isValid = ::OpenAPI::fromJsonValue(m_parent_uuid, json[QString("parent_uuid")]);
    m_parent_uuid_isSet = !json[QString("parent_uuid")].isNull() && m_parent_uuid_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIJobRelatedJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobRelatedJob::asJsonObject() const {
    QJsonObject obj;
    if (m_parent_uuid_isSet) {
        obj.insert(QString("parent_uuid"), ::OpenAPI::toJsonValue(m_parent_uuid));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIJobRelatedJob::getParentUuid() const {
    return m_parent_uuid;
}
void OAIJobRelatedJob::setParentUuid(const QString &parent_uuid) {
    m_parent_uuid = parent_uuid;
    m_parent_uuid_isSet = true;
}

bool OAIJobRelatedJob::is_parent_uuid_Set() const{
    return m_parent_uuid_isSet;
}

bool OAIJobRelatedJob::is_parent_uuid_Valid() const{
    return m_parent_uuid_isValid;
}

QString OAIJobRelatedJob::getTitle() const {
    return m_title;
}
void OAIJobRelatedJob::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIJobRelatedJob::is_title_Set() const{
    return m_title_isSet;
}

bool OAIJobRelatedJob::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIJobRelatedJob::getUuid() const {
    return m_uuid;
}
void OAIJobRelatedJob::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIJobRelatedJob::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIJobRelatedJob::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIJobRelatedJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parent_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobRelatedJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
