/**
 * Open Skills API
 * A complete and standard data store for canonical and emerging skills, knowledge, abilities, tools, technolgies, and how they relate to jobs.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkillJobs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkillJobs::OAISkillJobs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkillJobs::OAISkillJobs() {
    this->initializeModel();
}

OAISkillJobs::~OAISkillJobs() {}

void OAISkillJobs::initializeModel() {

    m_jobs_isSet = false;
    m_jobs_isValid = false;

    m_normalized_job_title_isSet = false;
    m_normalized_job_title_isValid = false;

    m_skill_name_isSet = false;
    m_skill_name_isValid = false;

    m_skill_uuid_isSet = false;
    m_skill_uuid_isValid = false;
}

void OAISkillJobs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkillJobs::fromJsonObject(QJsonObject json) {

    m_jobs_isValid = ::OpenAPI::fromJsonValue(m_jobs, json[QString("jobs")]);
    m_jobs_isSet = !json[QString("jobs")].isNull() && m_jobs_isValid;

    m_normalized_job_title_isValid = ::OpenAPI::fromJsonValue(m_normalized_job_title, json[QString("normalized_job_title")]);
    m_normalized_job_title_isSet = !json[QString("normalized_job_title")].isNull() && m_normalized_job_title_isValid;

    m_skill_name_isValid = ::OpenAPI::fromJsonValue(m_skill_name, json[QString("skill_name")]);
    m_skill_name_isSet = !json[QString("skill_name")].isNull() && m_skill_name_isValid;

    m_skill_uuid_isValid = ::OpenAPI::fromJsonValue(m_skill_uuid, json[QString("skill_uuid")]);
    m_skill_uuid_isSet = !json[QString("skill_uuid")].isNull() && m_skill_uuid_isValid;
}

QString OAISkillJobs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkillJobs::asJsonObject() const {
    QJsonObject obj;
    if (m_jobs.size() > 0) {
        obj.insert(QString("jobs"), ::OpenAPI::toJsonValue(m_jobs));
    }
    if (m_normalized_job_title_isSet) {
        obj.insert(QString("normalized_job_title"), ::OpenAPI::toJsonValue(m_normalized_job_title));
    }
    if (m_skill_name_isSet) {
        obj.insert(QString("skill_name"), ::OpenAPI::toJsonValue(m_skill_name));
    }
    if (m_skill_uuid_isSet) {
        obj.insert(QString("skill_uuid"), ::OpenAPI::toJsonValue(m_skill_uuid));
    }
    return obj;
}

QList<OAIJobSkill> OAISkillJobs::getJobs() const {
    return m_jobs;
}
void OAISkillJobs::setJobs(const QList<OAIJobSkill> &jobs) {
    m_jobs = jobs;
    m_jobs_isSet = true;
}

bool OAISkillJobs::is_jobs_Set() const{
    return m_jobs_isSet;
}

bool OAISkillJobs::is_jobs_Valid() const{
    return m_jobs_isValid;
}

QString OAISkillJobs::getNormalizedJobTitle() const {
    return m_normalized_job_title;
}
void OAISkillJobs::setNormalizedJobTitle(const QString &normalized_job_title) {
    m_normalized_job_title = normalized_job_title;
    m_normalized_job_title_isSet = true;
}

bool OAISkillJobs::is_normalized_job_title_Set() const{
    return m_normalized_job_title_isSet;
}

bool OAISkillJobs::is_normalized_job_title_Valid() const{
    return m_normalized_job_title_isValid;
}

QString OAISkillJobs::getSkillName() const {
    return m_skill_name;
}
void OAISkillJobs::setSkillName(const QString &skill_name) {
    m_skill_name = skill_name;
    m_skill_name_isSet = true;
}

bool OAISkillJobs::is_skill_name_Set() const{
    return m_skill_name_isSet;
}

bool OAISkillJobs::is_skill_name_Valid() const{
    return m_skill_name_isValid;
}

QString OAISkillJobs::getSkillUuid() const {
    return m_skill_uuid;
}
void OAISkillJobs::setSkillUuid(const QString &skill_uuid) {
    m_skill_uuid = skill_uuid;
    m_skill_uuid_isSet = true;
}

bool OAISkillJobs::is_skill_uuid_Set() const{
    return m_skill_uuid_isSet;
}

bool OAISkillJobs::is_skill_uuid_Valid() const{
    return m_skill_uuid_isValid;
}

bool OAISkillJobs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_job_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skill_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skill_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkillJobs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
