/**
 * Open Skills API
 * A complete and standard data store for canonical and emerging skills, knowledge, abilities, tools, technolgies, and how they relate to jobs.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIJob.h"
#include "OAIJobRelatedJobs.h"
#include "OAIJobSkills.h"
#include "OAINormalizedJob.h"
#include "OAINormalizedSkill.h"
#include "OAISkill.h"
#include "OAISkillJobs.h"
#include "OAISkillRelatedSkills.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  begins_with QString [optional]
    * @param[in]  contains QString [optional]
    * @param[in]  ends_with QString [optional]
    */
    virtual void jobsAutocompleteGet(const ::OpenAPI::OptionalParam<QString> &begins_with = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ends_with = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void jobsGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  fips QString [optional]
    */
    virtual void jobsIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &fips = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void jobsIdRelatedJobsGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void jobsIdRelatedSkillsGet(const QString &id);

    /**
    * @param[in]  job_title QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void jobsNormalizeGet(const QString &job_title, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


    virtual void jobsUnusualTitlesGet();

    /**
    * @param[in]  begins_with QString [optional]
    * @param[in]  contains QString [optional]
    * @param[in]  ends_with QString [optional]
    */
    virtual void skillsAutocompleteGet(const ::OpenAPI::OptionalParam<QString> &begins_with = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ends_with = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void skillsGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void skillsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void skillsIdRelatedJobsGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void skillsIdRelatedSkillsGet(const QString &id);

    /**
    * @param[in]  skill_name QString [required]
    */
    virtual void skillsNormalizeGet(const QString &skill_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobsAutocompleteGetCallback(OAIHttpRequestWorker *worker);
    void jobsGetCallback(OAIHttpRequestWorker *worker);
    void jobsIdGetCallback(OAIHttpRequestWorker *worker);
    void jobsIdRelatedJobsGetCallback(OAIHttpRequestWorker *worker);
    void jobsIdRelatedSkillsGetCallback(OAIHttpRequestWorker *worker);
    void jobsNormalizeGetCallback(OAIHttpRequestWorker *worker);
    void jobsUnusualTitlesGetCallback(OAIHttpRequestWorker *worker);
    void skillsAutocompleteGetCallback(OAIHttpRequestWorker *worker);
    void skillsGetCallback(OAIHttpRequestWorker *worker);
    void skillsIdGetCallback(OAIHttpRequestWorker *worker);
    void skillsIdRelatedJobsGetCallback(OAIHttpRequestWorker *worker);
    void skillsIdRelatedSkillsGetCallback(OAIHttpRequestWorker *worker);
    void skillsNormalizeGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobsAutocompleteGetSignal(QList<OAIJob> summary);
    void jobsGetSignal(QList<OAIJob> summary);
    void jobsIdGetSignal(OAIJob summary);
    void jobsIdRelatedJobsGetSignal(OAIJobRelatedJobs summary);
    void jobsIdRelatedSkillsGetSignal(OAIJobSkills summary);
    void jobsNormalizeGetSignal(QList<OAINormalizedJob> summary);
    void jobsUnusualTitlesGetSignal(QList<OAINormalizedJob> summary);
    void skillsAutocompleteGetSignal(OAISkillJobs summary);
    void skillsGetSignal(QList<OAISkill> summary);
    void skillsIdGetSignal(OAISkill summary);
    void skillsIdRelatedJobsGetSignal(OAISkillJobs summary);
    void skillsIdRelatedSkillsGetSignal(OAISkillRelatedSkills summary);
    void skillsNormalizeGetSignal(QList<OAINormalizedSkill> summary);


    void jobsAutocompleteGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIJob> summary);
    void jobsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIJob> summary);
    void jobsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void jobsIdRelatedJobsGetSignalFull(OAIHttpRequestWorker *worker, OAIJobRelatedJobs summary);
    void jobsIdRelatedSkillsGetSignalFull(OAIHttpRequestWorker *worker, OAIJobSkills summary);
    void jobsNormalizeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINormalizedJob> summary);
    void jobsUnusualTitlesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINormalizedJob> summary);
    void skillsAutocompleteGetSignalFull(OAIHttpRequestWorker *worker, OAISkillJobs summary);
    void skillsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISkill> summary);
    void skillsIdGetSignalFull(OAIHttpRequestWorker *worker, OAISkill summary);
    void skillsIdRelatedJobsGetSignalFull(OAIHttpRequestWorker *worker, OAISkillJobs summary);
    void skillsIdRelatedSkillsGetSignalFull(OAIHttpRequestWorker *worker, OAISkillRelatedSkills summary);
    void skillsNormalizeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINormalizedSkill> summary);

    Q_DECL_DEPRECATED_X("Use jobsAutocompleteGetSignalError() instead")
    void jobsAutocompleteGetSignalE(QList<OAIJob> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsAutocompleteGetSignalError(QList<OAIJob> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetSignalError() instead")
    void jobsGetSignalE(QList<OAIJob> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetSignalError(QList<OAIJob> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsIdGetSignalError() instead")
    void jobsIdGetSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsIdGetSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsIdRelatedJobsGetSignalError() instead")
    void jobsIdRelatedJobsGetSignalE(OAIJobRelatedJobs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsIdRelatedJobsGetSignalError(OAIJobRelatedJobs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsIdRelatedSkillsGetSignalError() instead")
    void jobsIdRelatedSkillsGetSignalE(OAIJobSkills summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsIdRelatedSkillsGetSignalError(OAIJobSkills summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsNormalizeGetSignalError() instead")
    void jobsNormalizeGetSignalE(QList<OAINormalizedJob> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsNormalizeGetSignalError(QList<OAINormalizedJob> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsUnusualTitlesGetSignalError() instead")
    void jobsUnusualTitlesGetSignalE(QList<OAINormalizedJob> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsUnusualTitlesGetSignalError(QList<OAINormalizedJob> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skillsAutocompleteGetSignalError() instead")
    void skillsAutocompleteGetSignalE(OAISkillJobs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void skillsAutocompleteGetSignalError(OAISkillJobs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skillsGetSignalError() instead")
    void skillsGetSignalE(QList<OAISkill> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void skillsGetSignalError(QList<OAISkill> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skillsIdGetSignalError() instead")
    void skillsIdGetSignalE(OAISkill summary, QNetworkReply::NetworkError error_type, QString error_str);
    void skillsIdGetSignalError(OAISkill summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skillsIdRelatedJobsGetSignalError() instead")
    void skillsIdRelatedJobsGetSignalE(OAISkillJobs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void skillsIdRelatedJobsGetSignalError(OAISkillJobs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skillsIdRelatedSkillsGetSignalError() instead")
    void skillsIdRelatedSkillsGetSignalE(OAISkillRelatedSkills summary, QNetworkReply::NetworkError error_type, QString error_str);
    void skillsIdRelatedSkillsGetSignalError(OAISkillRelatedSkills summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skillsNormalizeGetSignalError() instead")
    void skillsNormalizeGetSignalE(QList<OAINormalizedSkill> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void skillsNormalizeGetSignalError(QList<OAINormalizedSkill> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobsAutocompleteGetSignalErrorFull() instead")
    void jobsAutocompleteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsAutocompleteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetSignalErrorFull() instead")
    void jobsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsIdGetSignalErrorFull() instead")
    void jobsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsIdRelatedJobsGetSignalErrorFull() instead")
    void jobsIdRelatedJobsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsIdRelatedJobsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsIdRelatedSkillsGetSignalErrorFull() instead")
    void jobsIdRelatedSkillsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsIdRelatedSkillsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsNormalizeGetSignalErrorFull() instead")
    void jobsNormalizeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsNormalizeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsUnusualTitlesGetSignalErrorFull() instead")
    void jobsUnusualTitlesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsUnusualTitlesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skillsAutocompleteGetSignalErrorFull() instead")
    void skillsAutocompleteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skillsAutocompleteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skillsGetSignalErrorFull() instead")
    void skillsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skillsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skillsIdGetSignalErrorFull() instead")
    void skillsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skillsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skillsIdRelatedJobsGetSignalErrorFull() instead")
    void skillsIdRelatedJobsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skillsIdRelatedJobsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skillsIdRelatedSkillsGetSignalErrorFull() instead")
    void skillsIdRelatedSkillsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skillsIdRelatedSkillsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skillsNormalizeGetSignalErrorFull() instead")
    void skillsNormalizeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skillsNormalizeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
