/**
 * Open Skills API
 * A complete and standard data store for canonical and emerging skills, knowledge, abilities, tools, technolgies, and how they relate to jobs.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Job from '../model/Job';
import JobRelatedJobs from '../model/JobRelatedJobs';
import JobSkills from '../model/JobSkills';
import NormalizedJob from '../model/NormalizedJob';
import NormalizedSkill from '../model/NormalizedSkill';
import Skill from '../model/Skill';
import SkillJobs from '../model/SkillJobs';
import SkillRelatedSkills from '../model/SkillRelatedSkills';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jobsAutocompleteGet operation.
     * @callback module:api/DefaultApi~jobsAutocompleteGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Job>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Job Title Autocomplete
     * Retrieves the names, descriptions, and UUIDs of all job titles matching a given search criteria.
     * @param {Object} opts Optional parameters
     * @param {String} [beginsWith] Find job titles beginning with the given text fragment
     * @param {String} [contains] Find job titles containing the given text fragment
     * @param {String} [endsWith] Find job titles ending with the given text fragment
     * @param {module:api/DefaultApi~jobsAutocompleteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Job>}
     */
    jobsAutocompleteGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'begins_with': opts['beginsWith'],
        'contains': opts['contains'],
        'ends_with': opts['endsWith']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Job];
      return this.apiClient.callApi(
        '/jobs/autocomplete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsGet operation.
     * @callback module:api/DefaultApi~jobsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Job>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Job Titles and Descriptions
     * Retrieves the names, descriptions, and UUIDs of all job titles.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Pagination offset. Default is 0.
     * @param {Number} [limit] Maximum number of items per page. Default is 20 and cannot exceed 500.
     * @param {module:api/DefaultApi~jobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Job>}
     */
    jobsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Job];
      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsIdGet operation.
     * @callback module:api/DefaultApi~jobsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Job Title and Description
     * Retrieves the name, description, and UUID of a job by specifying its O*NET SOC Code or UUID.
     * @param {String} id The O*NET SOC Code or UUID of the job title to retrieve
     * @param {Object} opts Optional parameters
     * @param {String} [fips] The FIPS Code of a Core-Based Statistical Area. Only return the job if present in this area
     * @param {module:api/DefaultApi~jobsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Job}
     */
    jobsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling jobsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fips': opts['fips']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Job;
      return this.apiClient.callApi(
        '/jobs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsIdRelatedJobsGet operation.
     * @callback module:api/DefaultApi~jobsIdRelatedJobsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobRelatedJobs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Jobs Associated with a Job
     * Retrieves a collection of jobs associated with a specified job.
     * @param {String} id The UUID of the job to retrieve related jobs for
     * @param {module:api/DefaultApi~jobsIdRelatedJobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobRelatedJobs}
     */
    jobsIdRelatedJobsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling jobsIdRelatedJobsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobRelatedJobs;
      return this.apiClient.callApi(
        '/jobs/{id}/related_jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsIdRelatedSkillsGet operation.
     * @callback module:api/DefaultApi~jobsIdRelatedSkillsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobSkills} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Skills Associated with a Job
     * Retrieves a collection of skills associated with a specified job.
     * @param {String} id The UUID of the job to retrieve skills for
     * @param {module:api/DefaultApi~jobsIdRelatedSkillsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobSkills}
     */
    jobsIdRelatedSkillsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling jobsIdRelatedSkillsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobSkills;
      return this.apiClient.callApi(
        '/jobs/{id}/related_skills', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsNormalizeGet operation.
     * @callback module:api/DefaultApi~jobsNormalizeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NormalizedJob>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Job Title Normalization
     * Retrieves the canonical job title for a synonymous job title
     * @param {String} jobTitle Find the canonical job title(s) for jobs matching the given text fragment
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Maximumn number of job title synonyms to return. Default is 1 and cannot exceed 10.
     * @param {module:api/DefaultApi~jobsNormalizeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NormalizedJob>}
     */
    jobsNormalizeGet(jobTitle, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobTitle' is set
      if (jobTitle === undefined || jobTitle === null) {
        throw new Error("Missing the required parameter 'jobTitle' when calling jobsNormalizeGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'job_title': jobTitle,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NormalizedJob];
      return this.apiClient.callApi(
        '/jobs/normalize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsUnusualTitlesGet operation.
     * @callback module:api/DefaultApi~jobsUnusualTitlesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NormalizedJob>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unusual Job Titles
     * Retrieves a list of unusual job titles and the UUIDs of their canonical jobs.
     * @param {module:api/DefaultApi~jobsUnusualTitlesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NormalizedJob>}
     */
    jobsUnusualTitlesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NormalizedJob];
      return this.apiClient.callApi(
        '/jobs/unusual_titles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the skillsAutocompleteGet operation.
     * @callback module:api/DefaultApi~skillsAutocompleteGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkillJobs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Skill Name Autocomplete
     * Retrieves the names, descriptions, and UUIDs of all skills matching a given search criteria.
     * @param {Object} opts Optional parameters
     * @param {String} [beginsWith] Find skill names beginning with the given text fragment
     * @param {String} [contains] Find skill names containing the given text fragment
     * @param {String} [endsWith] Find skill names ending with the given text fragment
     * @param {module:api/DefaultApi~skillsAutocompleteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkillJobs}
     */
    skillsAutocompleteGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'begins_with': opts['beginsWith'],
        'contains': opts['contains'],
        'ends_with': opts['endsWith']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkillJobs;
      return this.apiClient.callApi(
        '/skills/autocomplete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the skillsGet operation.
     * @callback module:api/DefaultApi~skillsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Skill>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Skill Names and Descriptions
     * Retrieve the names, descriptions, and UUIDs of all skills.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Pagination offset. Default is 0.
     * @param {Number} [limit] Maximum number of items per page. Default is 20 and cannot exceed 500.
     * @param {module:api/DefaultApi~skillsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Skill>}
     */
    skillsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Skill];
      return this.apiClient.callApi(
        '/skills', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the skillsIdGet operation.
     * @callback module:api/DefaultApi~skillsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Skill} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Skill Name and Description
     * Retrieves the name, description, and UUID of a job by specifying its UUID.
     * @param {String} id The UUID of the skill name to retrieve
     * @param {module:api/DefaultApi~skillsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Skill}
     */
    skillsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling skillsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Skill;
      return this.apiClient.callApi(
        '/skills/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the skillsIdRelatedJobsGet operation.
     * @callback module:api/DefaultApi~skillsIdRelatedJobsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkillJobs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Jobs Associated with a Skill
     * Retrieves a collection of jobs associated with a specified skill.
     * @param {String} id The UUID of the skill to retrieve jobs for
     * @param {module:api/DefaultApi~skillsIdRelatedJobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkillJobs}
     */
    skillsIdRelatedJobsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling skillsIdRelatedJobsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkillJobs;
      return this.apiClient.callApi(
        '/skills/{id}/related_jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the skillsIdRelatedSkillsGet operation.
     * @callback module:api/DefaultApi~skillsIdRelatedSkillsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkillRelatedSkills} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Skills Associated with a Skill
     * Retrieves a collection of skills associated with a specified skill.
     * @param {String} id The UUID of the skill to retrieve related skills for
     * @param {module:api/DefaultApi~skillsIdRelatedSkillsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkillRelatedSkills}
     */
    skillsIdRelatedSkillsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling skillsIdRelatedSkillsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkillRelatedSkills;
      return this.apiClient.callApi(
        '/skills/{id}/related_skills', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the skillsNormalizeGet operation.
     * @callback module:api/DefaultApi~skillsNormalizeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NormalizedSkill>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Skill Name Normalization
     * Retrieves the canonical skill name for a synonymous skill name
     * @param {String} skillName Find the canonical skill name(s) for skills matching the given text fragment
     * @param {module:api/DefaultApi~skillsNormalizeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NormalizedSkill>}
     */
    skillsNormalizeGet(skillName, callback) {
      let postBody = null;
      // verify the required parameter 'skillName' is set
      if (skillName === undefined || skillName === null) {
        throw new Error("Missing the required parameter 'skillName' when calling skillsNormalizeGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'skill_name': skillName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NormalizedSkill];
      return this.apiClient.callApi(
        '/skills/normalize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
