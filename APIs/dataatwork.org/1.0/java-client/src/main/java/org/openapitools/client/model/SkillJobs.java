/*
 * Open Skills API
 * A complete and standard data store for canonical and emerging skills, knowledge, abilities, tools, technolgies, and how they relate to jobs.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JobSkill;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SkillJobs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:54.642576-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SkillJobs {
  public static final String SERIALIZED_NAME_JOBS = "jobs";
  @SerializedName(SERIALIZED_NAME_JOBS)
  private List<JobSkill> jobs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NORMALIZED_JOB_TITLE = "normalized_job_title";
  @SerializedName(SERIALIZED_NAME_NORMALIZED_JOB_TITLE)
  private String normalizedJobTitle;

  public static final String SERIALIZED_NAME_SKILL_NAME = "skill_name";
  @SerializedName(SERIALIZED_NAME_SKILL_NAME)
  private String skillName;

  public static final String SERIALIZED_NAME_SKILL_UUID = "skill_uuid";
  @SerializedName(SERIALIZED_NAME_SKILL_UUID)
  private String skillUuid;

  public SkillJobs() {
  }

  public SkillJobs jobs(List<JobSkill> jobs) {
    this.jobs = jobs;
    return this;
  }

  public SkillJobs addJobsItem(JobSkill jobsItem) {
    if (this.jobs == null) {
      this.jobs = new ArrayList<>();
    }
    this.jobs.add(jobsItem);
    return this;
  }

  /**
   * Get jobs
   * @return jobs
   */
  @javax.annotation.Nullable
  public List<JobSkill> getJobs() {
    return jobs;
  }

  public void setJobs(List<JobSkill> jobs) {
    this.jobs = jobs;
  }


  public SkillJobs normalizedJobTitle(String normalizedJobTitle) {
    this.normalizedJobTitle = normalizedJobTitle;
    return this;
  }

  /**
   * Normalized title of the job associated with the UUID
   * @return normalizedJobTitle
   */
  @javax.annotation.Nullable
  public String getNormalizedJobTitle() {
    return normalizedJobTitle;
  }

  public void setNormalizedJobTitle(String normalizedJobTitle) {
    this.normalizedJobTitle = normalizedJobTitle;
  }


  public SkillJobs skillName(String skillName) {
    this.skillName = skillName;
    return this;
  }

  /**
   * Title of the job associated with the UUID
   * @return skillName
   */
  @javax.annotation.Nullable
  public String getSkillName() {
    return skillName;
  }

  public void setSkillName(String skillName) {
    this.skillName = skillName;
  }


  public SkillJobs skillUuid(String skillUuid) {
    this.skillUuid = skillUuid;
    return this;
  }

  /**
   * Universally Unique Identifier for the job
   * @return skillUuid
   */
  @javax.annotation.Nullable
  public String getSkillUuid() {
    return skillUuid;
  }

  public void setSkillUuid(String skillUuid) {
    this.skillUuid = skillUuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkillJobs skillJobs = (SkillJobs) o;
    return Objects.equals(this.jobs, skillJobs.jobs) &&
        Objects.equals(this.normalizedJobTitle, skillJobs.normalizedJobTitle) &&
        Objects.equals(this.skillName, skillJobs.skillName) &&
        Objects.equals(this.skillUuid, skillJobs.skillUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobs, normalizedJobTitle, skillName, skillUuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkillJobs {\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    normalizedJobTitle: ").append(toIndentedString(normalizedJobTitle)).append("\n");
    sb.append("    skillName: ").append(toIndentedString(skillName)).append("\n");
    sb.append("    skillUuid: ").append(toIndentedString(skillUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobs");
    openapiFields.add("normalized_job_title");
    openapiFields.add("skill_name");
    openapiFields.add("skill_uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SkillJobs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SkillJobs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkillJobs is not found in the empty JSON string", SkillJobs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SkillJobs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkillJobs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("jobs") != null && !jsonObj.get("jobs").isJsonNull()) {
        JsonArray jsonArrayjobs = jsonObj.getAsJsonArray("jobs");
        if (jsonArrayjobs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobs` to be an array in the JSON string but got `%s`", jsonObj.get("jobs").toString()));
          }

          // validate the optional field `jobs` (array)
          for (int i = 0; i < jsonArrayjobs.size(); i++) {
            JobSkill.validateJsonElement(jsonArrayjobs.get(i));
          };
        }
      }
      if ((jsonObj.get("normalized_job_title") != null && !jsonObj.get("normalized_job_title").isJsonNull()) && !jsonObj.get("normalized_job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normalized_job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normalized_job_title").toString()));
      }
      if ((jsonObj.get("skill_name") != null && !jsonObj.get("skill_name").isJsonNull()) && !jsonObj.get("skill_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skill_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skill_name").toString()));
      }
      if ((jsonObj.get("skill_uuid") != null && !jsonObj.get("skill_uuid").isJsonNull()) && !jsonObj.get("skill_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skill_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skill_uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkillJobs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkillJobs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkillJobs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkillJobs.class));

       return (TypeAdapter<T>) new TypeAdapter<SkillJobs>() {
           @Override
           public void write(JsonWriter out, SkillJobs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkillJobs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SkillJobs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SkillJobs
   * @throws IOException if the JSON string is invalid with respect to SkillJobs
   */
  public static SkillJobs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkillJobs.class);
  }

  /**
   * Convert an instance of SkillJobs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

