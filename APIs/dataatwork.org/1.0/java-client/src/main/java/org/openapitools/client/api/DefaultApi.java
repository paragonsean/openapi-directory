/*
 * Open Skills API
 * A complete and standard data store for canonical and emerging skills, knowledge, abilities, tools, technolgies, and how they relate to jobs.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.Job;
import org.openapitools.client.model.JobRelatedJobs;
import org.openapitools.client.model.JobSkills;
import org.openapitools.client.model.NormalizedJob;
import org.openapitools.client.model.NormalizedSkill;
import org.openapitools.client.model.Skill;
import org.openapitools.client.model.SkillJobs;
import org.openapitools.client.model.SkillRelatedSkills;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jobsAutocompleteGet
     * @param beginsWith Find job titles beginning with the given text fragment (optional)
     * @param contains Find job titles containing the given text fragment (optional)
     * @param endsWith Find job titles ending with the given text fragment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsAutocompleteGetCall(String beginsWith, String contains, String endsWith, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (beginsWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("begins_with", beginsWith));
        }

        if (contains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contains", contains));
        }

        if (endsWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ends_with", endsWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsAutocompleteGetValidateBeforeCall(String beginsWith, String contains, String endsWith, final ApiCallback _callback) throws ApiException {
        return jobsAutocompleteGetCall(beginsWith, contains, endsWith, _callback);

    }

    /**
     * Job Title Autocomplete
     * Retrieves the names, descriptions, and UUIDs of all job titles matching a given search criteria.
     * @param beginsWith Find job titles beginning with the given text fragment (optional)
     * @param contains Find job titles containing the given text fragment (optional)
     * @param endsWith Find job titles ending with the given text fragment (optional)
     * @return List&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<Job> jobsAutocompleteGet(String beginsWith, String contains, String endsWith) throws ApiException {
        ApiResponse<List<Job>> localVarResp = jobsAutocompleteGetWithHttpInfo(beginsWith, contains, endsWith);
        return localVarResp.getData();
    }

    /**
     * Job Title Autocomplete
     * Retrieves the names, descriptions, and UUIDs of all job titles matching a given search criteria.
     * @param beginsWith Find job titles beginning with the given text fragment (optional)
     * @param contains Find job titles containing the given text fragment (optional)
     * @param endsWith Find job titles ending with the given text fragment (optional)
     * @return ApiResponse&lt;List&lt;Job&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Job>> jobsAutocompleteGetWithHttpInfo(String beginsWith, String contains, String endsWith) throws ApiException {
        okhttp3.Call localVarCall = jobsAutocompleteGetValidateBeforeCall(beginsWith, contains, endsWith, null);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Job Title Autocomplete (asynchronously)
     * Retrieves the names, descriptions, and UUIDs of all job titles matching a given search criteria.
     * @param beginsWith Find job titles beginning with the given text fragment (optional)
     * @param contains Find job titles containing the given text fragment (optional)
     * @param endsWith Find job titles ending with the given text fragment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsAutocompleteGetAsync(String beginsWith, String contains, String endsWith, final ApiCallback<List<Job>> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsAutocompleteGetValidateBeforeCall(beginsWith, contains, endsWith, _callback);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsGet
     * @param offset Pagination offset. Default is 0. (optional)
     * @param limit Maximum number of items per page. Default is 20 and cannot exceed 500. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsGetValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return jobsGetCall(offset, limit, _callback);

    }

    /**
     * Job Titles and Descriptions
     * Retrieves the names, descriptions, and UUIDs of all job titles.
     * @param offset Pagination offset. Default is 0. (optional)
     * @param limit Maximum number of items per page. Default is 20 and cannot exceed 500. (optional)
     * @return List&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<Job> jobsGet(Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<Job>> localVarResp = jobsGetWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * Job Titles and Descriptions
     * Retrieves the names, descriptions, and UUIDs of all job titles.
     * @param offset Pagination offset. Default is 0. (optional)
     * @param limit Maximum number of items per page. Default is 20 and cannot exceed 500. (optional)
     * @return ApiResponse&lt;List&lt;Job&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Job>> jobsGetWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Job Titles and Descriptions (asynchronously)
     * Retrieves the names, descriptions, and UUIDs of all job titles.
     * @param offset Pagination offset. Default is 0. (optional)
     * @param limit Maximum number of items per page. Default is 20 and cannot exceed 500. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetAsync(Integer offset, Integer limit, final ApiCallback<List<Job>> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsIdGet
     * @param id The O*NET SOC Code or UUID of the job title to retrieve (required)
     * @param fips The FIPS Code of a Core-Based Statistical Area. Only return the job if present in this area (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A job </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsIdGetCall(String id, String fips, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fips", fips));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsIdGetValidateBeforeCall(String id, String fips, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling jobsIdGet(Async)");
        }

        return jobsIdGetCall(id, fips, _callback);

    }

    /**
     * Job Title and Description
     * Retrieves the name, description, and UUID of a job by specifying its O*NET SOC Code or UUID.
     * @param id The O*NET SOC Code or UUID of the job title to retrieve (required)
     * @param fips The FIPS Code of a Core-Based Statistical Area. Only return the job if present in this area (optional)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A job </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Job jobsIdGet(String id, String fips) throws ApiException {
        ApiResponse<Job> localVarResp = jobsIdGetWithHttpInfo(id, fips);
        return localVarResp.getData();
    }

    /**
     * Job Title and Description
     * Retrieves the name, description, and UUID of a job by specifying its O*NET SOC Code or UUID.
     * @param id The O*NET SOC Code or UUID of the job title to retrieve (required)
     * @param fips The FIPS Code of a Core-Based Statistical Area. Only return the job if present in this area (optional)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A job </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> jobsIdGetWithHttpInfo(String id, String fips) throws ApiException {
        okhttp3.Call localVarCall = jobsIdGetValidateBeforeCall(id, fips, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Job Title and Description (asynchronously)
     * Retrieves the name, description, and UUID of a job by specifying its O*NET SOC Code or UUID.
     * @param id The O*NET SOC Code or UUID of the job title to retrieve (required)
     * @param fips The FIPS Code of a Core-Based Statistical Area. Only return the job if present in this area (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A job </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsIdGetAsync(String id, String fips, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsIdGetValidateBeforeCall(id, fips, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsIdRelatedJobsGet
     * @param id The UUID of the job to retrieve related jobs for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A job and its related jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsIdRelatedJobsGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{id}/related_jobs"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsIdRelatedJobsGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling jobsIdRelatedJobsGet(Async)");
        }

        return jobsIdRelatedJobsGetCall(id, _callback);

    }

    /**
     * Jobs Associated with a Job
     * Retrieves a collection of jobs associated with a specified job.
     * @param id The UUID of the job to retrieve related jobs for (required)
     * @return JobRelatedJobs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A job and its related jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public JobRelatedJobs jobsIdRelatedJobsGet(String id) throws ApiException {
        ApiResponse<JobRelatedJobs> localVarResp = jobsIdRelatedJobsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Jobs Associated with a Job
     * Retrieves a collection of jobs associated with a specified job.
     * @param id The UUID of the job to retrieve related jobs for (required)
     * @return ApiResponse&lt;JobRelatedJobs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A job and its related jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobRelatedJobs> jobsIdRelatedJobsGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = jobsIdRelatedJobsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<JobRelatedJobs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Jobs Associated with a Job (asynchronously)
     * Retrieves a collection of jobs associated with a specified job.
     * @param id The UUID of the job to retrieve related jobs for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A job and its related jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsIdRelatedJobsGetAsync(String id, final ApiCallback<JobRelatedJobs> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsIdRelatedJobsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<JobRelatedJobs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsIdRelatedSkillsGet
     * @param id The UUID of the job to retrieve skills for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A job and its related skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsIdRelatedSkillsGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{id}/related_skills"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsIdRelatedSkillsGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling jobsIdRelatedSkillsGet(Async)");
        }

        return jobsIdRelatedSkillsGetCall(id, _callback);

    }

    /**
     * Skills Associated with a Job
     * Retrieves a collection of skills associated with a specified job.
     * @param id The UUID of the job to retrieve skills for (required)
     * @return JobSkills
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A job and its related skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public JobSkills jobsIdRelatedSkillsGet(String id) throws ApiException {
        ApiResponse<JobSkills> localVarResp = jobsIdRelatedSkillsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Skills Associated with a Job
     * Retrieves a collection of skills associated with a specified job.
     * @param id The UUID of the job to retrieve skills for (required)
     * @return ApiResponse&lt;JobSkills&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A job and its related skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobSkills> jobsIdRelatedSkillsGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = jobsIdRelatedSkillsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<JobSkills>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Skills Associated with a Job (asynchronously)
     * Retrieves a collection of skills associated with a specified job.
     * @param id The UUID of the job to retrieve skills for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A job and its related skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsIdRelatedSkillsGetAsync(String id, final ApiCallback<JobSkills> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsIdRelatedSkillsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<JobSkills>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsNormalizeGet
     * @param jobTitle Find the canonical job title(s) for jobs matching the given text fragment (required)
     * @param limit Maximumn number of job title synonyms to return. Default is 1 and cannot exceed 10. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of normalized jobs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsNormalizeGetCall(String jobTitle, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/normalize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job_title", jobTitle));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsNormalizeGetValidateBeforeCall(String jobTitle, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobTitle' is set
        if (jobTitle == null) {
            throw new ApiException("Missing the required parameter 'jobTitle' when calling jobsNormalizeGet(Async)");
        }

        return jobsNormalizeGetCall(jobTitle, limit, _callback);

    }

    /**
     * Job Title Normalization
     * Retrieves the canonical job title for a synonymous job title
     * @param jobTitle Find the canonical job title(s) for jobs matching the given text fragment (required)
     * @param limit Maximumn number of job title synonyms to return. Default is 1 and cannot exceed 10. (optional)
     * @return List&lt;NormalizedJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of normalized jobs </td><td>  -  </td></tr>
     </table>
     */
    public List<NormalizedJob> jobsNormalizeGet(String jobTitle, Integer limit) throws ApiException {
        ApiResponse<List<NormalizedJob>> localVarResp = jobsNormalizeGetWithHttpInfo(jobTitle, limit);
        return localVarResp.getData();
    }

    /**
     * Job Title Normalization
     * Retrieves the canonical job title for a synonymous job title
     * @param jobTitle Find the canonical job title(s) for jobs matching the given text fragment (required)
     * @param limit Maximumn number of job title synonyms to return. Default is 1 and cannot exceed 10. (optional)
     * @return ApiResponse&lt;List&lt;NormalizedJob&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of normalized jobs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NormalizedJob>> jobsNormalizeGetWithHttpInfo(String jobTitle, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = jobsNormalizeGetValidateBeforeCall(jobTitle, limit, null);
        Type localVarReturnType = new TypeToken<List<NormalizedJob>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Job Title Normalization (asynchronously)
     * Retrieves the canonical job title for a synonymous job title
     * @param jobTitle Find the canonical job title(s) for jobs matching the given text fragment (required)
     * @param limit Maximumn number of job title synonyms to return. Default is 1 and cannot exceed 10. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of normalized jobs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsNormalizeGetAsync(String jobTitle, Integer limit, final ApiCallback<List<NormalizedJob>> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsNormalizeGetValidateBeforeCall(jobTitle, limit, _callback);
        Type localVarReturnType = new TypeToken<List<NormalizedJob>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsUnusualTitlesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of normalized jobs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsUnusualTitlesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/unusual_titles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsUnusualTitlesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return jobsUnusualTitlesGetCall(_callback);

    }

    /**
     * Unusual Job Titles
     * Retrieves a list of unusual job titles and the UUIDs of their canonical jobs.
     * @return List&lt;NormalizedJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of normalized jobs </td><td>  -  </td></tr>
     </table>
     */
    public List<NormalizedJob> jobsUnusualTitlesGet() throws ApiException {
        ApiResponse<List<NormalizedJob>> localVarResp = jobsUnusualTitlesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Unusual Job Titles
     * Retrieves a list of unusual job titles and the UUIDs of their canonical jobs.
     * @return ApiResponse&lt;List&lt;NormalizedJob&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of normalized jobs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NormalizedJob>> jobsUnusualTitlesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = jobsUnusualTitlesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<NormalizedJob>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unusual Job Titles (asynchronously)
     * Retrieves a list of unusual job titles and the UUIDs of their canonical jobs.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of normalized jobs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsUnusualTitlesGetAsync(final ApiCallback<List<NormalizedJob>> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsUnusualTitlesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<NormalizedJob>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for skillsAutocompleteGet
     * @param beginsWith Find skill names beginning with the given text fragment (optional)
     * @param contains Find skill names containing the given text fragment (optional)
     * @param endsWith Find skill names ending with the given text fragment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsAutocompleteGetCall(String beginsWith, String contains, String endsWith, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (beginsWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("begins_with", beginsWith));
        }

        if (contains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contains", contains));
        }

        if (endsWith != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ends_with", endsWith));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skillsAutocompleteGetValidateBeforeCall(String beginsWith, String contains, String endsWith, final ApiCallback _callback) throws ApiException {
        return skillsAutocompleteGetCall(beginsWith, contains, endsWith, _callback);

    }

    /**
     * Skill Name Autocomplete
     * Retrieves the names, descriptions, and UUIDs of all skills matching a given search criteria.
     * @param beginsWith Find skill names beginning with the given text fragment (optional)
     * @param contains Find skill names containing the given text fragment (optional)
     * @param endsWith Find skill names ending with the given text fragment (optional)
     * @return SkillJobs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SkillJobs skillsAutocompleteGet(String beginsWith, String contains, String endsWith) throws ApiException {
        ApiResponse<SkillJobs> localVarResp = skillsAutocompleteGetWithHttpInfo(beginsWith, contains, endsWith);
        return localVarResp.getData();
    }

    /**
     * Skill Name Autocomplete
     * Retrieves the names, descriptions, and UUIDs of all skills matching a given search criteria.
     * @param beginsWith Find skill names beginning with the given text fragment (optional)
     * @param contains Find skill names containing the given text fragment (optional)
     * @param endsWith Find skill names ending with the given text fragment (optional)
     * @return ApiResponse&lt;SkillJobs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkillJobs> skillsAutocompleteGetWithHttpInfo(String beginsWith, String contains, String endsWith) throws ApiException {
        okhttp3.Call localVarCall = skillsAutocompleteGetValidateBeforeCall(beginsWith, contains, endsWith, null);
        Type localVarReturnType = new TypeToken<SkillJobs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Skill Name Autocomplete (asynchronously)
     * Retrieves the names, descriptions, and UUIDs of all skills matching a given search criteria.
     * @param beginsWith Find skill names beginning with the given text fragment (optional)
     * @param contains Find skill names containing the given text fragment (optional)
     * @param endsWith Find skill names ending with the given text fragment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsAutocompleteGetAsync(String beginsWith, String contains, String endsWith, final ApiCallback<SkillJobs> _callback) throws ApiException {

        okhttp3.Call localVarCall = skillsAutocompleteGetValidateBeforeCall(beginsWith, contains, endsWith, _callback);
        Type localVarReturnType = new TypeToken<SkillJobs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for skillsGet
     * @param offset Pagination offset. Default is 0. (optional)
     * @param limit Maximum number of items per page. Default is 20 and cannot exceed 500. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsGetCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skillsGetValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return skillsGetCall(offset, limit, _callback);

    }

    /**
     * Skill Names and Descriptions
     * Retrieve the names, descriptions, and UUIDs of all skills.
     * @param offset Pagination offset. Default is 0. (optional)
     * @param limit Maximum number of items per page. Default is 20 and cannot exceed 500. (optional)
     * @return List&lt;Skill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<Skill> skillsGet(Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<Skill>> localVarResp = skillsGetWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * Skill Names and Descriptions
     * Retrieve the names, descriptions, and UUIDs of all skills.
     * @param offset Pagination offset. Default is 0. (optional)
     * @param limit Maximum number of items per page. Default is 20 and cannot exceed 500. (optional)
     * @return ApiResponse&lt;List&lt;Skill&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Skill>> skillsGetWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = skillsGetValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<List<Skill>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Skill Names and Descriptions (asynchronously)
     * Retrieve the names, descriptions, and UUIDs of all skills.
     * @param offset Pagination offset. Default is 0. (optional)
     * @param limit Maximum number of items per page. Default is 20 and cannot exceed 500. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsGetAsync(Integer offset, Integer limit, final ApiCallback<List<Skill>> _callback) throws ApiException {

        okhttp3.Call localVarCall = skillsGetValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Skill>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for skillsIdGet
     * @param id The UUID of the skill name to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A skill </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skillsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling skillsIdGet(Async)");
        }

        return skillsIdGetCall(id, _callback);

    }

    /**
     * Skill Name and Description
     * Retrieves the name, description, and UUID of a job by specifying its UUID.
     * @param id The UUID of the skill name to retrieve (required)
     * @return Skill
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A skill </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Skill skillsIdGet(String id) throws ApiException {
        ApiResponse<Skill> localVarResp = skillsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Skill Name and Description
     * Retrieves the name, description, and UUID of a job by specifying its UUID.
     * @param id The UUID of the skill name to retrieve (required)
     * @return ApiResponse&lt;Skill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A skill </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Skill> skillsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = skillsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Skill>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Skill Name and Description (asynchronously)
     * Retrieves the name, description, and UUID of a job by specifying its UUID.
     * @param id The UUID of the skill name to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A skill </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsIdGetAsync(String id, final ApiCallback<Skill> _callback) throws ApiException {

        okhttp3.Call localVarCall = skillsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Skill>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for skillsIdRelatedJobsGet
     * @param id The UUID of the skill to retrieve jobs for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A skill and its related jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsIdRelatedJobsGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills/{id}/related_jobs"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skillsIdRelatedJobsGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling skillsIdRelatedJobsGet(Async)");
        }

        return skillsIdRelatedJobsGetCall(id, _callback);

    }

    /**
     * Jobs Associated with a Skill
     * Retrieves a collection of jobs associated with a specified skill.
     * @param id The UUID of the skill to retrieve jobs for (required)
     * @return SkillJobs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A skill and its related jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SkillJobs skillsIdRelatedJobsGet(String id) throws ApiException {
        ApiResponse<SkillJobs> localVarResp = skillsIdRelatedJobsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Jobs Associated with a Skill
     * Retrieves a collection of jobs associated with a specified skill.
     * @param id The UUID of the skill to retrieve jobs for (required)
     * @return ApiResponse&lt;SkillJobs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A skill and its related jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkillJobs> skillsIdRelatedJobsGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = skillsIdRelatedJobsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SkillJobs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Jobs Associated with a Skill (asynchronously)
     * Retrieves a collection of jobs associated with a specified skill.
     * @param id The UUID of the skill to retrieve jobs for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A skill and its related jobs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsIdRelatedJobsGetAsync(String id, final ApiCallback<SkillJobs> _callback) throws ApiException {

        okhttp3.Call localVarCall = skillsIdRelatedJobsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SkillJobs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for skillsIdRelatedSkillsGet
     * @param id The UUID of the skill to retrieve related skills for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A skill and its related skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsIdRelatedSkillsGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills/{id}/related_skills"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skillsIdRelatedSkillsGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling skillsIdRelatedSkillsGet(Async)");
        }

        return skillsIdRelatedSkillsGetCall(id, _callback);

    }

    /**
     * Skills Associated with a Skill
     * Retrieves a collection of skills associated with a specified skill.
     * @param id The UUID of the skill to retrieve related skills for (required)
     * @return SkillRelatedSkills
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A skill and its related skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SkillRelatedSkills skillsIdRelatedSkillsGet(String id) throws ApiException {
        ApiResponse<SkillRelatedSkills> localVarResp = skillsIdRelatedSkillsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Skills Associated with a Skill
     * Retrieves a collection of skills associated with a specified skill.
     * @param id The UUID of the skill to retrieve related skills for (required)
     * @return ApiResponse&lt;SkillRelatedSkills&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A skill and its related skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkillRelatedSkills> skillsIdRelatedSkillsGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = skillsIdRelatedSkillsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SkillRelatedSkills>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Skills Associated with a Skill (asynchronously)
     * Retrieves a collection of skills associated with a specified skill.
     * @param id The UUID of the skill to retrieve related skills for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A skill and its related skills </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsIdRelatedSkillsGetAsync(String id, final ApiCallback<SkillRelatedSkills> _callback) throws ApiException {

        okhttp3.Call localVarCall = skillsIdRelatedSkillsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SkillRelatedSkills>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for skillsNormalizeGet
     * @param skillName Find the canonical skill name(s) for skills matching the given text fragment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of normalized skills </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsNormalizeGetCall(String skillName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills/normalize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skillName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skill_name", skillName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skillsNormalizeGetValidateBeforeCall(String skillName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'skillName' is set
        if (skillName == null) {
            throw new ApiException("Missing the required parameter 'skillName' when calling skillsNormalizeGet(Async)");
        }

        return skillsNormalizeGetCall(skillName, _callback);

    }

    /**
     * Skill Name Normalization
     * Retrieves the canonical skill name for a synonymous skill name
     * @param skillName Find the canonical skill name(s) for skills matching the given text fragment (required)
     * @return List&lt;NormalizedSkill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of normalized skills </td><td>  -  </td></tr>
     </table>
     */
    public List<NormalizedSkill> skillsNormalizeGet(String skillName) throws ApiException {
        ApiResponse<List<NormalizedSkill>> localVarResp = skillsNormalizeGetWithHttpInfo(skillName);
        return localVarResp.getData();
    }

    /**
     * Skill Name Normalization
     * Retrieves the canonical skill name for a synonymous skill name
     * @param skillName Find the canonical skill name(s) for skills matching the given text fragment (required)
     * @return ApiResponse&lt;List&lt;NormalizedSkill&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of normalized skills </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NormalizedSkill>> skillsNormalizeGetWithHttpInfo(String skillName) throws ApiException {
        okhttp3.Call localVarCall = skillsNormalizeGetValidateBeforeCall(skillName, null);
        Type localVarReturnType = new TypeToken<List<NormalizedSkill>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Skill Name Normalization (asynchronously)
     * Retrieves the canonical skill name for a synonymous skill name
     * @param skillName Find the canonical skill name(s) for skills matching the given text fragment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of normalized skills </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skillsNormalizeGetAsync(String skillName, final ApiCallback<List<NormalizedSkill>> _callback) throws ApiException {

        okhttp3.Call localVarCall = skillsNormalizeGetValidateBeforeCall(skillName, _callback);
        Type localVarReturnType = new TypeToken<List<NormalizedSkill>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
