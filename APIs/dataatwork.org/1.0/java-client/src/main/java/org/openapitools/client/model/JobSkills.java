/*
 * Open Skills API
 * A complete and standard data store for canonical and emerging skills, knowledge, abilities, tools, technolgies, and how they relate to jobs.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SkillJob;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobSkills
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:54.642576-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobSkills {
  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_JOB_UUID = "job_uuid";
  @SerializedName(SERIALIZED_NAME_JOB_UUID)
  private String jobUuid;

  public static final String SERIALIZED_NAME_NORMALIZED_JOB_TITLE = "normalized_job_title";
  @SerializedName(SERIALIZED_NAME_NORMALIZED_JOB_TITLE)
  private String normalizedJobTitle;

  public static final String SERIALIZED_NAME_SKILLS = "skills";
  @SerializedName(SERIALIZED_NAME_SKILLS)
  private List<SkillJob> skills = new ArrayList<>();

  public JobSkills() {
  }

  public JobSkills jobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * Title of the job associated with the UUID
   * @return jobTitle
   */
  @javax.annotation.Nullable
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public JobSkills jobUuid(String jobUuid) {
    this.jobUuid = jobUuid;
    return this;
  }

  /**
   * Universally Unique Identifier for the job
   * @return jobUuid
   */
  @javax.annotation.Nullable
  public String getJobUuid() {
    return jobUuid;
  }

  public void setJobUuid(String jobUuid) {
    this.jobUuid = jobUuid;
  }


  public JobSkills normalizedJobTitle(String normalizedJobTitle) {
    this.normalizedJobTitle = normalizedJobTitle;
    return this;
  }

  /**
   * Normalized title of the job associated with the UUID
   * @return normalizedJobTitle
   */
  @javax.annotation.Nullable
  public String getNormalizedJobTitle() {
    return normalizedJobTitle;
  }

  public void setNormalizedJobTitle(String normalizedJobTitle) {
    this.normalizedJobTitle = normalizedJobTitle;
  }


  public JobSkills skills(List<SkillJob> skills) {
    this.skills = skills;
    return this;
  }

  public JobSkills addSkillsItem(SkillJob skillsItem) {
    if (this.skills == null) {
      this.skills = new ArrayList<>();
    }
    this.skills.add(skillsItem);
    return this;
  }

  /**
   * Get skills
   * @return skills
   */
  @javax.annotation.Nullable
  public List<SkillJob> getSkills() {
    return skills;
  }

  public void setSkills(List<SkillJob> skills) {
    this.skills = skills;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobSkills jobSkills = (JobSkills) o;
    return Objects.equals(this.jobTitle, jobSkills.jobTitle) &&
        Objects.equals(this.jobUuid, jobSkills.jobUuid) &&
        Objects.equals(this.normalizedJobTitle, jobSkills.normalizedJobTitle) &&
        Objects.equals(this.skills, jobSkills.skills);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobTitle, jobUuid, normalizedJobTitle, skills);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobSkills {\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    jobUuid: ").append(toIndentedString(jobUuid)).append("\n");
    sb.append("    normalizedJobTitle: ").append(toIndentedString(normalizedJobTitle)).append("\n");
    sb.append("    skills: ").append(toIndentedString(skills)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("job_title");
    openapiFields.add("job_uuid");
    openapiFields.add("normalized_job_title");
    openapiFields.add("skills");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobSkills
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobSkills.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobSkills is not found in the empty JSON string", JobSkills.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobSkills.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobSkills` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("job_title") != null && !jsonObj.get("job_title").isJsonNull()) && !jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      if ((jsonObj.get("job_uuid") != null && !jsonObj.get("job_uuid").isJsonNull()) && !jsonObj.get("job_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_uuid").toString()));
      }
      if ((jsonObj.get("normalized_job_title") != null && !jsonObj.get("normalized_job_title").isJsonNull()) && !jsonObj.get("normalized_job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normalized_job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normalized_job_title").toString()));
      }
      if (jsonObj.get("skills") != null && !jsonObj.get("skills").isJsonNull()) {
        JsonArray jsonArrayskills = jsonObj.getAsJsonArray("skills");
        if (jsonArrayskills != null) {
          // ensure the json data is an array
          if (!jsonObj.get("skills").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `skills` to be an array in the JSON string but got `%s`", jsonObj.get("skills").toString()));
          }

          // validate the optional field `skills` (array)
          for (int i = 0; i < jsonArrayskills.size(); i++) {
            SkillJob.validateJsonElement(jsonArrayskills.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobSkills.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobSkills' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobSkills> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobSkills.class));

       return (TypeAdapter<T>) new TypeAdapter<JobSkills>() {
           @Override
           public void write(JsonWriter out, JobSkills value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobSkills read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobSkills given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobSkills
   * @throws IOException if the JSON string is invalid with respect to JobSkills
   */
  public static JobSkills fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobSkills.class);
  }

  /**
   * Convert an instance of JobSkills to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

