/**
 * Deep Art Effects
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-02-10T16:24:46Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadRequest model module.
 * @module model/UploadRequest
 * @version 2017-02-10T16:24:46Z
 */
class UploadRequest {
    /**
     * Constructs a new <code>UploadRequest</code>.
     * @alias module:model/UploadRequest
     */
    constructor() { 
        
        UploadRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadRequest} obj Optional instance to populate.
     * @return {module:model/UploadRequest} The populated <code>UploadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadRequest();

            if (data.hasOwnProperty('imageBase64Encoded')) {
                obj['imageBase64Encoded'] = ApiClient.convertToType(data['imageBase64Encoded'], 'String');
            }
            if (data.hasOwnProperty('imageSize')) {
                obj['imageSize'] = ApiClient.convertToType(data['imageSize'], 'Number');
            }
            if (data.hasOwnProperty('optimizeForPrint')) {
                obj['optimizeForPrint'] = ApiClient.convertToType(data['optimizeForPrint'], 'Boolean');
            }
            if (data.hasOwnProperty('partnerId')) {
                obj['partnerId'] = ApiClient.convertToType(data['partnerId'], 'String');
            }
            if (data.hasOwnProperty('styleId')) {
                obj['styleId'] = ApiClient.convertToType(data['styleId'], 'String');
            }
            if (data.hasOwnProperty('useOriginalColors')) {
                obj['useOriginalColors'] = ApiClient.convertToType(data['useOriginalColors'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['imageBase64Encoded'] && !(typeof data['imageBase64Encoded'] === 'string' || data['imageBase64Encoded'] instanceof String)) {
            throw new Error("Expected the field `imageBase64Encoded` to be a primitive type in the JSON string but got " + data['imageBase64Encoded']);
        }
        // ensure the json data is a string
        if (data['partnerId'] && !(typeof data['partnerId'] === 'string' || data['partnerId'] instanceof String)) {
            throw new Error("Expected the field `partnerId` to be a primitive type in the JSON string but got " + data['partnerId']);
        }
        // ensure the json data is a string
        if (data['styleId'] && !(typeof data['styleId'] === 'string' || data['styleId'] instanceof String)) {
            throw new Error("Expected the field `styleId` to be a primitive type in the JSON string but got " + data['styleId']);
        }

        return true;
    }


}



/**
 * Base64 decoded image
 * @member {String} imageBase64Encoded
 */
UploadRequest.prototype['imageBase64Encoded'] = undefined;

/**
 * Image size in px. Picture will be resized for processing.
 * @member {Number} imageSize
 */
UploadRequest.prototype['imageSize'] = undefined;

/**
 * Use this flag to get an artwork optimized for print.
 * @member {Boolean} optimizeForPrint
 */
UploadRequest.prototype['optimizeForPrint'] = undefined;

/**
 * The unique identifier for a partner with dedicated api access.
 * @member {String} partnerId
 */
UploadRequest.prototype['partnerId'] = undefined;

/**
 * The unique identifier for a style
 * @member {String} styleId
 */
UploadRequest.prototype['styleId'] = undefined;

/**
 * Use this flag to use the original color from your photo for the artwork.
 * @member {Boolean} useOriginalColors
 */
UploadRequest.prototype['useOriginalColors'] = undefined;






export default UploadRequest;

