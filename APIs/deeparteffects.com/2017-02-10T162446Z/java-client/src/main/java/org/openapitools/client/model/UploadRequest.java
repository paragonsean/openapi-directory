/*
 * Deep Art Effects
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-02-10T16:24:46Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UploadRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:30.338432-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UploadRequest {
  public static final String SERIALIZED_NAME_IMAGE_BASE64_ENCODED = "imageBase64Encoded";
  @SerializedName(SERIALIZED_NAME_IMAGE_BASE64_ENCODED)
  private String imageBase64Encoded;

  public static final String SERIALIZED_NAME_IMAGE_SIZE = "imageSize";
  @SerializedName(SERIALIZED_NAME_IMAGE_SIZE)
  private Integer imageSize;

  public static final String SERIALIZED_NAME_OPTIMIZE_FOR_PRINT = "optimizeForPrint";
  @SerializedName(SERIALIZED_NAME_OPTIMIZE_FOR_PRINT)
  private Boolean optimizeForPrint;

  public static final String SERIALIZED_NAME_PARTNER_ID = "partnerId";
  @SerializedName(SERIALIZED_NAME_PARTNER_ID)
  private String partnerId;

  public static final String SERIALIZED_NAME_STYLE_ID = "styleId";
  @SerializedName(SERIALIZED_NAME_STYLE_ID)
  private String styleId;

  public static final String SERIALIZED_NAME_USE_ORIGINAL_COLORS = "useOriginalColors";
  @SerializedName(SERIALIZED_NAME_USE_ORIGINAL_COLORS)
  private Boolean useOriginalColors;

  public UploadRequest() {
  }

  public UploadRequest imageBase64Encoded(String imageBase64Encoded) {
    this.imageBase64Encoded = imageBase64Encoded;
    return this;
  }

  /**
   * Base64 decoded image
   * @return imageBase64Encoded
   */
  @javax.annotation.Nullable
  public String getImageBase64Encoded() {
    return imageBase64Encoded;
  }

  public void setImageBase64Encoded(String imageBase64Encoded) {
    this.imageBase64Encoded = imageBase64Encoded;
  }


  public UploadRequest imageSize(Integer imageSize) {
    this.imageSize = imageSize;
    return this;
  }

  /**
   * Image size in px. Picture will be resized for processing.
   * @return imageSize
   */
  @javax.annotation.Nullable
  public Integer getImageSize() {
    return imageSize;
  }

  public void setImageSize(Integer imageSize) {
    this.imageSize = imageSize;
  }


  public UploadRequest optimizeForPrint(Boolean optimizeForPrint) {
    this.optimizeForPrint = optimizeForPrint;
    return this;
  }

  /**
   * Use this flag to get an artwork optimized for print.
   * @return optimizeForPrint
   */
  @javax.annotation.Nullable
  public Boolean getOptimizeForPrint() {
    return optimizeForPrint;
  }

  public void setOptimizeForPrint(Boolean optimizeForPrint) {
    this.optimizeForPrint = optimizeForPrint;
  }


  public UploadRequest partnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  /**
   * The unique identifier for a partner with dedicated api access.
   * @return partnerId
   */
  @javax.annotation.Nullable
  public String getPartnerId() {
    return partnerId;
  }

  public void setPartnerId(String partnerId) {
    this.partnerId = partnerId;
  }


  public UploadRequest styleId(String styleId) {
    this.styleId = styleId;
    return this;
  }

  /**
   * The unique identifier for a style
   * @return styleId
   */
  @javax.annotation.Nullable
  public String getStyleId() {
    return styleId;
  }

  public void setStyleId(String styleId) {
    this.styleId = styleId;
  }


  public UploadRequest useOriginalColors(Boolean useOriginalColors) {
    this.useOriginalColors = useOriginalColors;
    return this;
  }

  /**
   * Use this flag to use the original color from your photo for the artwork.
   * @return useOriginalColors
   */
  @javax.annotation.Nullable
  public Boolean getUseOriginalColors() {
    return useOriginalColors;
  }

  public void setUseOriginalColors(Boolean useOriginalColors) {
    this.useOriginalColors = useOriginalColors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadRequest uploadRequest = (UploadRequest) o;
    return Objects.equals(this.imageBase64Encoded, uploadRequest.imageBase64Encoded) &&
        Objects.equals(this.imageSize, uploadRequest.imageSize) &&
        Objects.equals(this.optimizeForPrint, uploadRequest.optimizeForPrint) &&
        Objects.equals(this.partnerId, uploadRequest.partnerId) &&
        Objects.equals(this.styleId, uploadRequest.styleId) &&
        Objects.equals(this.useOriginalColors, uploadRequest.useOriginalColors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageBase64Encoded, imageSize, optimizeForPrint, partnerId, styleId, useOriginalColors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadRequest {\n");
    sb.append("    imageBase64Encoded: ").append(toIndentedString(imageBase64Encoded)).append("\n");
    sb.append("    imageSize: ").append(toIndentedString(imageSize)).append("\n");
    sb.append("    optimizeForPrint: ").append(toIndentedString(optimizeForPrint)).append("\n");
    sb.append("    partnerId: ").append(toIndentedString(partnerId)).append("\n");
    sb.append("    styleId: ").append(toIndentedString(styleId)).append("\n");
    sb.append("    useOriginalColors: ").append(toIndentedString(useOriginalColors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("imageBase64Encoded");
    openapiFields.add("imageSize");
    openapiFields.add("optimizeForPrint");
    openapiFields.add("partnerId");
    openapiFields.add("styleId");
    openapiFields.add("useOriginalColors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UploadRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UploadRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadRequest is not found in the empty JSON string", UploadRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UploadRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("imageBase64Encoded") != null && !jsonObj.get("imageBase64Encoded").isJsonNull()) && !jsonObj.get("imageBase64Encoded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageBase64Encoded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageBase64Encoded").toString()));
      }
      if ((jsonObj.get("partnerId") != null && !jsonObj.get("partnerId").isJsonNull()) && !jsonObj.get("partnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerId").toString()));
      }
      if ((jsonObj.get("styleId") != null && !jsonObj.get("styleId").isJsonNull()) && !jsonObj.get("styleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `styleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("styleId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadRequest>() {
           @Override
           public void write(JsonWriter out, UploadRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UploadRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UploadRequest
   * @throws IOException if the JSON string is invalid with respect to UploadRequest
   */
  public static UploadRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadRequest.class);
  }

  /**
   * Convert an instance of UploadRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

