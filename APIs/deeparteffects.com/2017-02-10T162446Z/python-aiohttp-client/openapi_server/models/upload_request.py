# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_base64_encoded: str=None, image_size: int=None, optimize_for_print: bool=None, partner_id: str=None, style_id: str=None, use_original_colors: bool=None):
        """UploadRequest - a model defined in OpenAPI

        :param image_base64_encoded: The image_base64_encoded of this UploadRequest.
        :param image_size: The image_size of this UploadRequest.
        :param optimize_for_print: The optimize_for_print of this UploadRequest.
        :param partner_id: The partner_id of this UploadRequest.
        :param style_id: The style_id of this UploadRequest.
        :param use_original_colors: The use_original_colors of this UploadRequest.
        """
        self.openapi_types = {
            'image_base64_encoded': str,
            'image_size': int,
            'optimize_for_print': bool,
            'partner_id': str,
            'style_id': str,
            'use_original_colors': bool
        }

        self.attribute_map = {
            'image_base64_encoded': 'imageBase64Encoded',
            'image_size': 'imageSize',
            'optimize_for_print': 'optimizeForPrint',
            'partner_id': 'partnerId',
            'style_id': 'styleId',
            'use_original_colors': 'useOriginalColors'
        }

        self._image_base64_encoded = image_base64_encoded
        self._image_size = image_size
        self._optimize_for_print = optimize_for_print
        self._partner_id = partner_id
        self._style_id = style_id
        self._use_original_colors = use_original_colors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploadRequest of this UploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_base64_encoded(self):
        """Gets the image_base64_encoded of this UploadRequest.

        Base64 decoded image

        :return: The image_base64_encoded of this UploadRequest.
        :rtype: str
        """
        return self._image_base64_encoded

    @image_base64_encoded.setter
    def image_base64_encoded(self, image_base64_encoded):
        """Sets the image_base64_encoded of this UploadRequest.

        Base64 decoded image

        :param image_base64_encoded: The image_base64_encoded of this UploadRequest.
        :type image_base64_encoded: str
        """

        self._image_base64_encoded = image_base64_encoded

    @property
    def image_size(self):
        """Gets the image_size of this UploadRequest.

        Image size in px. Picture will be resized for processing.

        :return: The image_size of this UploadRequest.
        :rtype: int
        """
        return self._image_size

    @image_size.setter
    def image_size(self, image_size):
        """Sets the image_size of this UploadRequest.

        Image size in px. Picture will be resized for processing.

        :param image_size: The image_size of this UploadRequest.
        :type image_size: int
        """

        self._image_size = image_size

    @property
    def optimize_for_print(self):
        """Gets the optimize_for_print of this UploadRequest.

        Use this flag to get an artwork optimized for print.

        :return: The optimize_for_print of this UploadRequest.
        :rtype: bool
        """
        return self._optimize_for_print

    @optimize_for_print.setter
    def optimize_for_print(self, optimize_for_print):
        """Sets the optimize_for_print of this UploadRequest.

        Use this flag to get an artwork optimized for print.

        :param optimize_for_print: The optimize_for_print of this UploadRequest.
        :type optimize_for_print: bool
        """

        self._optimize_for_print = optimize_for_print

    @property
    def partner_id(self):
        """Gets the partner_id of this UploadRequest.

        The unique identifier for a partner with dedicated api access.

        :return: The partner_id of this UploadRequest.
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this UploadRequest.

        The unique identifier for a partner with dedicated api access.

        :param partner_id: The partner_id of this UploadRequest.
        :type partner_id: str
        """

        self._partner_id = partner_id

    @property
    def style_id(self):
        """Gets the style_id of this UploadRequest.

        The unique identifier for a style

        :return: The style_id of this UploadRequest.
        :rtype: str
        """
        return self._style_id

    @style_id.setter
    def style_id(self, style_id):
        """Sets the style_id of this UploadRequest.

        The unique identifier for a style

        :param style_id: The style_id of this UploadRequest.
        :type style_id: str
        """

        self._style_id = style_id

    @property
    def use_original_colors(self):
        """Gets the use_original_colors of this UploadRequest.

        Use this flag to use the original color from your photo for the artwork.

        :return: The use_original_colors of this UploadRequest.
        :rtype: bool
        """
        return self._use_original_colors

    @use_original_colors.setter
    def use_original_colors(self, use_original_colors):
        """Sets the use_original_colors of this UploadRequest.

        Use this flag to use the original color from your photo for the artwork.

        :param use_original_colors: The use_original_colors of this UploadRequest.
        :type use_original_colors: bool
        """

        self._use_original_colors = use_original_colors
