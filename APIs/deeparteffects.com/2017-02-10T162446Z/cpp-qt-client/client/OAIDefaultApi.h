/**
 * Deep Art Effects
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-02-10T16:24:46Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIResult.h"
#include "OAIStyles.h"
#include "OAIUploadRequest.h"
#include "OAIUploadResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  submission_id QString [optional]
    */
    virtual void noauthResultGet(const ::OpenAPI::OptionalParam<QString> &submission_id = ::OpenAPI::OptionalParam<QString>());


    virtual void noauthStylesGet();

    /**
    * @param[in]  upload_request OAIUploadRequest [required]
    */
    virtual void noauthUploadPost(const OAIUploadRequest &upload_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void noauthResultGetCallback(OAIHttpRequestWorker *worker);
    void noauthStylesGetCallback(OAIHttpRequestWorker *worker);
    void noauthUploadPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void noauthResultGetSignal(OAIResult summary);
    void noauthStylesGetSignal(OAIStyles summary);
    void noauthUploadPostSignal(OAIUploadResponse summary);


    void noauthResultGetSignalFull(OAIHttpRequestWorker *worker, OAIResult summary);
    void noauthStylesGetSignalFull(OAIHttpRequestWorker *worker, OAIStyles summary);
    void noauthUploadPostSignalFull(OAIHttpRequestWorker *worker, OAIUploadResponse summary);

    Q_DECL_DEPRECATED_X("Use noauthResultGetSignalError() instead")
    void noauthResultGetSignalE(OAIResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void noauthResultGetSignalError(OAIResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use noauthStylesGetSignalError() instead")
    void noauthStylesGetSignalE(OAIStyles summary, QNetworkReply::NetworkError error_type, QString error_str);
    void noauthStylesGetSignalError(OAIStyles summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use noauthUploadPostSignalError() instead")
    void noauthUploadPostSignalE(OAIUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void noauthUploadPostSignalError(OAIUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use noauthResultGetSignalErrorFull() instead")
    void noauthResultGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void noauthResultGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use noauthStylesGetSignalErrorFull() instead")
    void noauthStylesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void noauthStylesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use noauthUploadPostSignalErrorFull() instead")
    void noauthUploadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void noauthUploadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
