/**
 * Deep Art Effects
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-02-10T16:24:46Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadRequest::OAIUploadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadRequest::OAIUploadRequest() {
    this->initializeModel();
}

OAIUploadRequest::~OAIUploadRequest() {}

void OAIUploadRequest::initializeModel() {

    m_image_base64_encoded_isSet = false;
    m_image_base64_encoded_isValid = false;

    m_image_size_isSet = false;
    m_image_size_isValid = false;

    m_optimize_for_print_isSet = false;
    m_optimize_for_print_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_style_id_isSet = false;
    m_style_id_isValid = false;

    m_use_original_colors_isSet = false;
    m_use_original_colors_isValid = false;
}

void OAIUploadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadRequest::fromJsonObject(QJsonObject json) {

    m_image_base64_encoded_isValid = ::OpenAPI::fromJsonValue(m_image_base64_encoded, json[QString("imageBase64Encoded")]);
    m_image_base64_encoded_isSet = !json[QString("imageBase64Encoded")].isNull() && m_image_base64_encoded_isValid;

    m_image_size_isValid = ::OpenAPI::fromJsonValue(m_image_size, json[QString("imageSize")]);
    m_image_size_isSet = !json[QString("imageSize")].isNull() && m_image_size_isValid;

    m_optimize_for_print_isValid = ::OpenAPI::fromJsonValue(m_optimize_for_print, json[QString("optimizeForPrint")]);
    m_optimize_for_print_isSet = !json[QString("optimizeForPrint")].isNull() && m_optimize_for_print_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partnerId")]);
    m_partner_id_isSet = !json[QString("partnerId")].isNull() && m_partner_id_isValid;

    m_style_id_isValid = ::OpenAPI::fromJsonValue(m_style_id, json[QString("styleId")]);
    m_style_id_isSet = !json[QString("styleId")].isNull() && m_style_id_isValid;

    m_use_original_colors_isValid = ::OpenAPI::fromJsonValue(m_use_original_colors, json[QString("useOriginalColors")]);
    m_use_original_colors_isSet = !json[QString("useOriginalColors")].isNull() && m_use_original_colors_isValid;
}

QString OAIUploadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_image_base64_encoded_isSet) {
        obj.insert(QString("imageBase64Encoded"), ::OpenAPI::toJsonValue(m_image_base64_encoded));
    }
    if (m_image_size_isSet) {
        obj.insert(QString("imageSize"), ::OpenAPI::toJsonValue(m_image_size));
    }
    if (m_optimize_for_print_isSet) {
        obj.insert(QString("optimizeForPrint"), ::OpenAPI::toJsonValue(m_optimize_for_print));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partnerId"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_style_id_isSet) {
        obj.insert(QString("styleId"), ::OpenAPI::toJsonValue(m_style_id));
    }
    if (m_use_original_colors_isSet) {
        obj.insert(QString("useOriginalColors"), ::OpenAPI::toJsonValue(m_use_original_colors));
    }
    return obj;
}

QString OAIUploadRequest::getImageBase64Encoded() const {
    return m_image_base64_encoded;
}
void OAIUploadRequest::setImageBase64Encoded(const QString &image_base64_encoded) {
    m_image_base64_encoded = image_base64_encoded;
    m_image_base64_encoded_isSet = true;
}

bool OAIUploadRequest::is_image_base64_encoded_Set() const{
    return m_image_base64_encoded_isSet;
}

bool OAIUploadRequest::is_image_base64_encoded_Valid() const{
    return m_image_base64_encoded_isValid;
}

qint32 OAIUploadRequest::getImageSize() const {
    return m_image_size;
}
void OAIUploadRequest::setImageSize(const qint32 &image_size) {
    m_image_size = image_size;
    m_image_size_isSet = true;
}

bool OAIUploadRequest::is_image_size_Set() const{
    return m_image_size_isSet;
}

bool OAIUploadRequest::is_image_size_Valid() const{
    return m_image_size_isValid;
}

bool OAIUploadRequest::isOptimizeForPrint() const {
    return m_optimize_for_print;
}
void OAIUploadRequest::setOptimizeForPrint(const bool &optimize_for_print) {
    m_optimize_for_print = optimize_for_print;
    m_optimize_for_print_isSet = true;
}

bool OAIUploadRequest::is_optimize_for_print_Set() const{
    return m_optimize_for_print_isSet;
}

bool OAIUploadRequest::is_optimize_for_print_Valid() const{
    return m_optimize_for_print_isValid;
}

QString OAIUploadRequest::getPartnerId() const {
    return m_partner_id;
}
void OAIUploadRequest::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIUploadRequest::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIUploadRequest::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

QString OAIUploadRequest::getStyleId() const {
    return m_style_id;
}
void OAIUploadRequest::setStyleId(const QString &style_id) {
    m_style_id = style_id;
    m_style_id_isSet = true;
}

bool OAIUploadRequest::is_style_id_Set() const{
    return m_style_id_isSet;
}

bool OAIUploadRequest::is_style_id_Valid() const{
    return m_style_id_isValid;
}

bool OAIUploadRequest::isUseOriginalColors() const {
    return m_use_original_colors;
}
void OAIUploadRequest::setUseOriginalColors(const bool &use_original_colors) {
    m_use_original_colors = use_original_colors;
    m_use_original_colors_isSet = true;
}

bool OAIUploadRequest::is_use_original_colors_Set() const{
    return m_use_original_colors_isSet;
}

bool OAIUploadRequest::is_use_original_colors_Valid() const{
    return m_use_original_colors_isValid;
}

bool OAIUploadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_base64_encoded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimize_for_print_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_original_colors_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
