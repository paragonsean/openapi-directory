/**
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVaultUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVaultUsage::OAIVaultUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVaultUsage::OAIVaultUsage() {
    this->initializeModel();
}

OAIVaultUsage::~OAIVaultUsage() {}

void OAIVaultUsage::initializeModel() {

    m_current_value_isSet = false;
    m_current_value_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_reset_time_isSet = false;
    m_next_reset_time_isValid = false;

    m_quota_period_isSet = false;
    m_quota_period_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIVaultUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVaultUsage::fromJsonObject(QJsonObject json) {

    m_current_value_isValid = ::OpenAPI::fromJsonValue(m_current_value, json[QString("currentValue")]);
    m_current_value_isSet = !json[QString("currentValue")].isNull() && m_current_value_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_reset_time_isValid = ::OpenAPI::fromJsonValue(m_next_reset_time, json[QString("nextResetTime")]);
    m_next_reset_time_isSet = !json[QString("nextResetTime")].isNull() && m_next_reset_time_isValid;

    m_quota_period_isValid = ::OpenAPI::fromJsonValue(m_quota_period, json[QString("quotaPeriod")]);
    m_quota_period_isSet = !json[QString("quotaPeriod")].isNull() && m_quota_period_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIVaultUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVaultUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_current_value_isSet) {
        obj.insert(QString("currentValue"), ::OpenAPI::toJsonValue(m_current_value));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_reset_time_isSet) {
        obj.insert(QString("nextResetTime"), ::OpenAPI::toJsonValue(m_next_reset_time));
    }
    if (m_quota_period_isSet) {
        obj.insert(QString("quotaPeriod"), ::OpenAPI::toJsonValue(m_quota_period));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

qint64 OAIVaultUsage::getCurrentValue() const {
    return m_current_value;
}
void OAIVaultUsage::setCurrentValue(const qint64 &current_value) {
    m_current_value = current_value;
    m_current_value_isSet = true;
}

bool OAIVaultUsage::is_current_value_Set() const{
    return m_current_value_isSet;
}

bool OAIVaultUsage::is_current_value_Valid() const{
    return m_current_value_isValid;
}

qint64 OAIVaultUsage::getLimit() const {
    return m_limit;
}
void OAIVaultUsage::setLimit(const qint64 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIVaultUsage::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIVaultUsage::is_limit_Valid() const{
    return m_limit_isValid;
}

OAINameInfo OAIVaultUsage::getName() const {
    return m_name;
}
void OAIVaultUsage::setName(const OAINameInfo &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVaultUsage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVaultUsage::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIVaultUsage::getNextResetTime() const {
    return m_next_reset_time;
}
void OAIVaultUsage::setNextResetTime(const QDateTime &next_reset_time) {
    m_next_reset_time = next_reset_time;
    m_next_reset_time_isSet = true;
}

bool OAIVaultUsage::is_next_reset_time_Set() const{
    return m_next_reset_time_isSet;
}

bool OAIVaultUsage::is_next_reset_time_Valid() const{
    return m_next_reset_time_isValid;
}

QString OAIVaultUsage::getQuotaPeriod() const {
    return m_quota_period;
}
void OAIVaultUsage::setQuotaPeriod(const QString &quota_period) {
    m_quota_period = quota_period;
    m_quota_period_isSet = true;
}

bool OAIVaultUsage::is_quota_period_Set() const{
    return m_quota_period_isSet;
}

bool OAIVaultUsage::is_quota_period_Valid() const{
    return m_quota_period_isValid;
}

QString OAIVaultUsage::getUnit() const {
    return m_unit;
}
void OAIVaultUsage::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIVaultUsage::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIVaultUsage::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIVaultUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_reset_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVaultUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
