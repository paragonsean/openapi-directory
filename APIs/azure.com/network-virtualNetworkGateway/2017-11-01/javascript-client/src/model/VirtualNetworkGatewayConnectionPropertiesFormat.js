/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IpsecPolicy from './IpsecPolicy';
import LocalNetworkGateway from './LocalNetworkGateway';
import TunnelConnectionHealth from './TunnelConnectionHealth';
import VirtualNetworkGateway from './VirtualNetworkGateway';
import VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer from './VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer';

/**
 * The VirtualNetworkGatewayConnectionPropertiesFormat model module.
 * @module model/VirtualNetworkGatewayConnectionPropertiesFormat
 * @version 2017-11-01
 */
class VirtualNetworkGatewayConnectionPropertiesFormat {
    /**
     * Constructs a new <code>VirtualNetworkGatewayConnectionPropertiesFormat</code>.
     * VirtualNetworkGatewayConnection properties
     * @alias module:model/VirtualNetworkGatewayConnectionPropertiesFormat
     * @param connectionType {module:model/VirtualNetworkGatewayConnectionPropertiesFormat.ConnectionTypeEnum} Gateway connection type. Possible values are: 'IPsec','Vnet2Vnet','ExpressRoute', and 'VPNClient.
     * @param virtualNetworkGateway1 {module:model/VirtualNetworkGateway} 
     */
    constructor(connectionType, virtualNetworkGateway1) { 
        
        VirtualNetworkGatewayConnectionPropertiesFormat.initialize(this, connectionType, virtualNetworkGateway1);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, connectionType, virtualNetworkGateway1) { 
        obj['connectionType'] = connectionType;
        obj['virtualNetworkGateway1'] = virtualNetworkGateway1;
    }

    /**
     * Constructs a <code>VirtualNetworkGatewayConnectionPropertiesFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualNetworkGatewayConnectionPropertiesFormat} obj Optional instance to populate.
     * @return {module:model/VirtualNetworkGatewayConnectionPropertiesFormat} The populated <code>VirtualNetworkGatewayConnectionPropertiesFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualNetworkGatewayConnectionPropertiesFormat();

            if (data.hasOwnProperty('authorizationKey')) {
                obj['authorizationKey'] = ApiClient.convertToType(data['authorizationKey'], 'String');
            }
            if (data.hasOwnProperty('connectionStatus')) {
                obj['connectionStatus'] = ApiClient.convertToType(data['connectionStatus'], 'String');
            }
            if (data.hasOwnProperty('connectionType')) {
                obj['connectionType'] = ApiClient.convertToType(data['connectionType'], 'String');
            }
            if (data.hasOwnProperty('egressBytesTransferred')) {
                obj['egressBytesTransferred'] = ApiClient.convertToType(data['egressBytesTransferred'], 'Number');
            }
            if (data.hasOwnProperty('enableBgp')) {
                obj['enableBgp'] = ApiClient.convertToType(data['enableBgp'], 'Boolean');
            }
            if (data.hasOwnProperty('ingressBytesTransferred')) {
                obj['ingressBytesTransferred'] = ApiClient.convertToType(data['ingressBytesTransferred'], 'Number');
            }
            if (data.hasOwnProperty('ipsecPolicies')) {
                obj['ipsecPolicies'] = ApiClient.convertToType(data['ipsecPolicies'], [IpsecPolicy]);
            }
            if (data.hasOwnProperty('localNetworkGateway2')) {
                obj['localNetworkGateway2'] = LocalNetworkGateway.constructFromObject(data['localNetworkGateway2']);
            }
            if (data.hasOwnProperty('peer')) {
                obj['peer'] = VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer.constructFromObject(data['peer']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('resourceGuid')) {
                obj['resourceGuid'] = ApiClient.convertToType(data['resourceGuid'], 'String');
            }
            if (data.hasOwnProperty('routingWeight')) {
                obj['routingWeight'] = ApiClient.convertToType(data['routingWeight'], 'Number');
            }
            if (data.hasOwnProperty('sharedKey')) {
                obj['sharedKey'] = ApiClient.convertToType(data['sharedKey'], 'String');
            }
            if (data.hasOwnProperty('tunnelConnectionStatus')) {
                obj['tunnelConnectionStatus'] = ApiClient.convertToType(data['tunnelConnectionStatus'], [TunnelConnectionHealth]);
            }
            if (data.hasOwnProperty('usePolicyBasedTrafficSelectors')) {
                obj['usePolicyBasedTrafficSelectors'] = ApiClient.convertToType(data['usePolicyBasedTrafficSelectors'], 'Boolean');
            }
            if (data.hasOwnProperty('virtualNetworkGateway1')) {
                obj['virtualNetworkGateway1'] = VirtualNetworkGateway.constructFromObject(data['virtualNetworkGateway1']);
            }
            if (data.hasOwnProperty('virtualNetworkGateway2')) {
                obj['virtualNetworkGateway2'] = VirtualNetworkGateway.constructFromObject(data['virtualNetworkGateway2']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualNetworkGatewayConnectionPropertiesFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualNetworkGatewayConnectionPropertiesFormat</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VirtualNetworkGatewayConnectionPropertiesFormat.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authorizationKey'] && !(typeof data['authorizationKey'] === 'string' || data['authorizationKey'] instanceof String)) {
            throw new Error("Expected the field `authorizationKey` to be a primitive type in the JSON string but got " + data['authorizationKey']);
        }
        // ensure the json data is a string
        if (data['connectionStatus'] && !(typeof data['connectionStatus'] === 'string' || data['connectionStatus'] instanceof String)) {
            throw new Error("Expected the field `connectionStatus` to be a primitive type in the JSON string but got " + data['connectionStatus']);
        }
        // ensure the json data is a string
        if (data['connectionType'] && !(typeof data['connectionType'] === 'string' || data['connectionType'] instanceof String)) {
            throw new Error("Expected the field `connectionType` to be a primitive type in the JSON string but got " + data['connectionType']);
        }
        if (data['ipsecPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ipsecPolicies'])) {
                throw new Error("Expected the field `ipsecPolicies` to be an array in the JSON data but got " + data['ipsecPolicies']);
            }
            // validate the optional field `ipsecPolicies` (array)
            for (const item of data['ipsecPolicies']) {
                IpsecPolicy.validateJSON(item);
            };
        }
        // validate the optional field `localNetworkGateway2`
        if (data['localNetworkGateway2']) { // data not null
          LocalNetworkGateway.validateJSON(data['localNetworkGateway2']);
        }
        // validate the optional field `peer`
        if (data['peer']) { // data not null
          VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer.validateJSON(data['peer']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['resourceGuid'] && !(typeof data['resourceGuid'] === 'string' || data['resourceGuid'] instanceof String)) {
            throw new Error("Expected the field `resourceGuid` to be a primitive type in the JSON string but got " + data['resourceGuid']);
        }
        // ensure the json data is a string
        if (data['sharedKey'] && !(typeof data['sharedKey'] === 'string' || data['sharedKey'] instanceof String)) {
            throw new Error("Expected the field `sharedKey` to be a primitive type in the JSON string but got " + data['sharedKey']);
        }
        if (data['tunnelConnectionStatus']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tunnelConnectionStatus'])) {
                throw new Error("Expected the field `tunnelConnectionStatus` to be an array in the JSON data but got " + data['tunnelConnectionStatus']);
            }
            // validate the optional field `tunnelConnectionStatus` (array)
            for (const item of data['tunnelConnectionStatus']) {
                TunnelConnectionHealth.validateJSON(item);
            };
        }
        // validate the optional field `virtualNetworkGateway1`
        if (data['virtualNetworkGateway1']) { // data not null
          VirtualNetworkGateway.validateJSON(data['virtualNetworkGateway1']);
        }
        // validate the optional field `virtualNetworkGateway2`
        if (data['virtualNetworkGateway2']) { // data not null
          VirtualNetworkGateway.validateJSON(data['virtualNetworkGateway2']);
        }

        return true;
    }


}

VirtualNetworkGatewayConnectionPropertiesFormat.RequiredProperties = ["connectionType", "virtualNetworkGateway1"];

/**
 * The authorizationKey.
 * @member {String} authorizationKey
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['authorizationKey'] = undefined;

/**
 * Virtual network Gateway connection status. Possible values are 'Unknown', 'Connecting', 'Connected' and 'NotConnected'.
 * @member {module:model/VirtualNetworkGatewayConnectionPropertiesFormat.ConnectionStatusEnum} connectionStatus
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['connectionStatus'] = undefined;

/**
 * Gateway connection type. Possible values are: 'IPsec','Vnet2Vnet','ExpressRoute', and 'VPNClient.
 * @member {module:model/VirtualNetworkGatewayConnectionPropertiesFormat.ConnectionTypeEnum} connectionType
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['connectionType'] = undefined;

/**
 * The egress bytes transferred in this connection.
 * @member {Number} egressBytesTransferred
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['egressBytesTransferred'] = undefined;

/**
 * EnableBgp flag
 * @member {Boolean} enableBgp
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['enableBgp'] = undefined;

/**
 * The ingress bytes transferred in this connection.
 * @member {Number} ingressBytesTransferred
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['ingressBytesTransferred'] = undefined;

/**
 * The IPSec Policies to be considered by this connection.
 * @member {Array.<module:model/IpsecPolicy>} ipsecPolicies
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['ipsecPolicies'] = undefined;

/**
 * @member {module:model/LocalNetworkGateway} localNetworkGateway2
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['localNetworkGateway2'] = undefined;

/**
 * @member {module:model/VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer} peer
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['peer'] = undefined;

/**
 * The provisioning state of the VirtualNetworkGatewayConnection resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
 * @member {String} provisioningState
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['provisioningState'] = undefined;

/**
 * The resource GUID property of the VirtualNetworkGatewayConnection resource.
 * @member {String} resourceGuid
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['resourceGuid'] = undefined;

/**
 * The routing weight.
 * @member {Number} routingWeight
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['routingWeight'] = undefined;

/**
 * The IPSec shared key.
 * @member {String} sharedKey
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['sharedKey'] = undefined;

/**
 * Collection of all tunnels' connection health status.
 * @member {Array.<module:model/TunnelConnectionHealth>} tunnelConnectionStatus
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['tunnelConnectionStatus'] = undefined;

/**
 * Enable policy-based traffic selectors.
 * @member {Boolean} usePolicyBasedTrafficSelectors
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['usePolicyBasedTrafficSelectors'] = undefined;

/**
 * @member {module:model/VirtualNetworkGateway} virtualNetworkGateway1
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['virtualNetworkGateway1'] = undefined;

/**
 * @member {module:model/VirtualNetworkGateway} virtualNetworkGateway2
 */
VirtualNetworkGatewayConnectionPropertiesFormat.prototype['virtualNetworkGateway2'] = undefined;





/**
 * Allowed values for the <code>connectionStatus</code> property.
 * @enum {String}
 * @readonly
 */
VirtualNetworkGatewayConnectionPropertiesFormat['ConnectionStatusEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Connecting"
     * @const
     */
    "Connecting": "Connecting",

    /**
     * value: "Connected"
     * @const
     */
    "Connected": "Connected",

    /**
     * value: "NotConnected"
     * @const
     */
    "NotConnected": "NotConnected"
};


/**
 * Allowed values for the <code>connectionType</code> property.
 * @enum {String}
 * @readonly
 */
VirtualNetworkGatewayConnectionPropertiesFormat['ConnectionTypeEnum'] = {

    /**
     * value: "IPsec"
     * @const
     */
    "IPsec": "IPsec",

    /**
     * value: "Vnet2Vnet"
     * @const
     */
    "Vnet2Vnet": "Vnet2Vnet",

    /**
     * value: "ExpressRoute"
     * @const
     */
    "ExpressRoute": "ExpressRoute",

    /**
     * value: "VPNClient"
     * @const
     */
    "VPNClient": "VPNClient"
};



export default VirtualNetworkGatewayConnectionPropertiesFormat;

