/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnClientParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnClientParameters::OAIVpnClientParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnClientParameters::OAIVpnClientParameters() {
    this->initializeModel();
}

OAIVpnClientParameters::~OAIVpnClientParameters() {}

void OAIVpnClientParameters::initializeModel() {

    m_authentication_method_isSet = false;
    m_authentication_method_isValid = false;

    m_client_root_certificates_isSet = false;
    m_client_root_certificates_isValid = false;

    m_processor_architecture_isSet = false;
    m_processor_architecture_isValid = false;

    m_radius_server_auth_certificate_isSet = false;
    m_radius_server_auth_certificate_isValid = false;
}

void OAIVpnClientParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnClientParameters::fromJsonObject(QJsonObject json) {

    m_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_authentication_method, json[QString("authenticationMethod")]);
    m_authentication_method_isSet = !json[QString("authenticationMethod")].isNull() && m_authentication_method_isValid;

    m_client_root_certificates_isValid = ::OpenAPI::fromJsonValue(m_client_root_certificates, json[QString("clientRootCertificates")]);
    m_client_root_certificates_isSet = !json[QString("clientRootCertificates")].isNull() && m_client_root_certificates_isValid;

    m_processor_architecture_isValid = ::OpenAPI::fromJsonValue(m_processor_architecture, json[QString("processorArchitecture")]);
    m_processor_architecture_isSet = !json[QString("processorArchitecture")].isNull() && m_processor_architecture_isValid;

    m_radius_server_auth_certificate_isValid = ::OpenAPI::fromJsonValue(m_radius_server_auth_certificate, json[QString("radiusServerAuthCertificate")]);
    m_radius_server_auth_certificate_isSet = !json[QString("radiusServerAuthCertificate")].isNull() && m_radius_server_auth_certificate_isValid;
}

QString OAIVpnClientParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnClientParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_method_isSet) {
        obj.insert(QString("authenticationMethod"), ::OpenAPI::toJsonValue(m_authentication_method));
    }
    if (m_client_root_certificates.size() > 0) {
        obj.insert(QString("clientRootCertificates"), ::OpenAPI::toJsonValue(m_client_root_certificates));
    }
    if (m_processor_architecture_isSet) {
        obj.insert(QString("processorArchitecture"), ::OpenAPI::toJsonValue(m_processor_architecture));
    }
    if (m_radius_server_auth_certificate_isSet) {
        obj.insert(QString("radiusServerAuthCertificate"), ::OpenAPI::toJsonValue(m_radius_server_auth_certificate));
    }
    return obj;
}

QString OAIVpnClientParameters::getAuthenticationMethod() const {
    return m_authentication_method;
}
void OAIVpnClientParameters::setAuthenticationMethod(const QString &authentication_method) {
    m_authentication_method = authentication_method;
    m_authentication_method_isSet = true;
}

bool OAIVpnClientParameters::is_authentication_method_Set() const{
    return m_authentication_method_isSet;
}

bool OAIVpnClientParameters::is_authentication_method_Valid() const{
    return m_authentication_method_isValid;
}

QList<QString> OAIVpnClientParameters::getClientRootCertificates() const {
    return m_client_root_certificates;
}
void OAIVpnClientParameters::setClientRootCertificates(const QList<QString> &client_root_certificates) {
    m_client_root_certificates = client_root_certificates;
    m_client_root_certificates_isSet = true;
}

bool OAIVpnClientParameters::is_client_root_certificates_Set() const{
    return m_client_root_certificates_isSet;
}

bool OAIVpnClientParameters::is_client_root_certificates_Valid() const{
    return m_client_root_certificates_isValid;
}

QString OAIVpnClientParameters::getProcessorArchitecture() const {
    return m_processor_architecture;
}
void OAIVpnClientParameters::setProcessorArchitecture(const QString &processor_architecture) {
    m_processor_architecture = processor_architecture;
    m_processor_architecture_isSet = true;
}

bool OAIVpnClientParameters::is_processor_architecture_Set() const{
    return m_processor_architecture_isSet;
}

bool OAIVpnClientParameters::is_processor_architecture_Valid() const{
    return m_processor_architecture_isValid;
}

QString OAIVpnClientParameters::getRadiusServerAuthCertificate() const {
    return m_radius_server_auth_certificate;
}
void OAIVpnClientParameters::setRadiusServerAuthCertificate(const QString &radius_server_auth_certificate) {
    m_radius_server_auth_certificate = radius_server_auth_certificate;
    m_radius_server_auth_certificate_isSet = true;
}

bool OAIVpnClientParameters::is_radius_server_auth_certificate_Set() const{
    return m_radius_server_auth_certificate_isSet;
}

bool OAIVpnClientParameters::is_radius_server_auth_certificate_Valid() const{
    return m_radius_server_auth_certificate_isValid;
}

bool OAIVpnClientParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_root_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_processor_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_server_auth_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnClientParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
