/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualNetworkGatewayConnection properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:43:59.995075-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TunnelConnectionHealth {
  /**
   * Virtual network Gateway connection status
   */
  @JsonAdapter(ConnectionStatusEnum.Adapter.class)
  public enum ConnectionStatusEnum {
    UNKNOWN("Unknown"),
    
    CONNECTING("Connecting"),
    
    CONNECTED("Connected"),
    
    NOT_CONNECTED("NotConnected");

    private String value;

    ConnectionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionStatusEnum fromValue(String value) {
      for (ConnectionStatusEnum b : ConnectionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connectionStatus";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private ConnectionStatusEnum connectionStatus;

  public static final String SERIALIZED_NAME_EGRESS_BYTES_TRANSFERRED = "egressBytesTransferred";
  @SerializedName(SERIALIZED_NAME_EGRESS_BYTES_TRANSFERRED)
  private Long egressBytesTransferred;

  public static final String SERIALIZED_NAME_INGRESS_BYTES_TRANSFERRED = "ingressBytesTransferred";
  @SerializedName(SERIALIZED_NAME_INGRESS_BYTES_TRANSFERRED)
  private Long ingressBytesTransferred;

  public static final String SERIALIZED_NAME_LAST_CONNECTION_ESTABLISHED_UTC_TIME = "lastConnectionEstablishedUtcTime";
  @SerializedName(SERIALIZED_NAME_LAST_CONNECTION_ESTABLISHED_UTC_TIME)
  private String lastConnectionEstablishedUtcTime;

  public static final String SERIALIZED_NAME_TUNNEL = "tunnel";
  @SerializedName(SERIALIZED_NAME_TUNNEL)
  private String tunnel;

  public TunnelConnectionHealth() {
  }

  public TunnelConnectionHealth(
     ConnectionStatusEnum connectionStatus, 
     Long egressBytesTransferred, 
     Long ingressBytesTransferred, 
     String lastConnectionEstablishedUtcTime, 
     String tunnel
  ) {
    this();
    this.connectionStatus = connectionStatus;
    this.egressBytesTransferred = egressBytesTransferred;
    this.ingressBytesTransferred = ingressBytesTransferred;
    this.lastConnectionEstablishedUtcTime = lastConnectionEstablishedUtcTime;
    this.tunnel = tunnel;
  }

  /**
   * Virtual network Gateway connection status
   * @return connectionStatus
   */
  @javax.annotation.Nullable
  public ConnectionStatusEnum getConnectionStatus() {
    return connectionStatus;
  }



  /**
   * The Egress Bytes Transferred in this connection
   * @return egressBytesTransferred
   */
  @javax.annotation.Nullable
  public Long getEgressBytesTransferred() {
    return egressBytesTransferred;
  }



  /**
   * The Ingress Bytes Transferred in this connection
   * @return ingressBytesTransferred
   */
  @javax.annotation.Nullable
  public Long getIngressBytesTransferred() {
    return ingressBytesTransferred;
  }



  /**
   * The time at which connection was established in Utc format.
   * @return lastConnectionEstablishedUtcTime
   */
  @javax.annotation.Nullable
  public String getLastConnectionEstablishedUtcTime() {
    return lastConnectionEstablishedUtcTime;
  }



  /**
   * Tunnel name.
   * @return tunnel
   */
  @javax.annotation.Nullable
  public String getTunnel() {
    return tunnel;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TunnelConnectionHealth tunnelConnectionHealth = (TunnelConnectionHealth) o;
    return Objects.equals(this.connectionStatus, tunnelConnectionHealth.connectionStatus) &&
        Objects.equals(this.egressBytesTransferred, tunnelConnectionHealth.egressBytesTransferred) &&
        Objects.equals(this.ingressBytesTransferred, tunnelConnectionHealth.ingressBytesTransferred) &&
        Objects.equals(this.lastConnectionEstablishedUtcTime, tunnelConnectionHealth.lastConnectionEstablishedUtcTime) &&
        Objects.equals(this.tunnel, tunnelConnectionHealth.tunnel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionStatus, egressBytesTransferred, ingressBytesTransferred, lastConnectionEstablishedUtcTime, tunnel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TunnelConnectionHealth {\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    egressBytesTransferred: ").append(toIndentedString(egressBytesTransferred)).append("\n");
    sb.append("    ingressBytesTransferred: ").append(toIndentedString(ingressBytesTransferred)).append("\n");
    sb.append("    lastConnectionEstablishedUtcTime: ").append(toIndentedString(lastConnectionEstablishedUtcTime)).append("\n");
    sb.append("    tunnel: ").append(toIndentedString(tunnel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionStatus");
    openapiFields.add("egressBytesTransferred");
    openapiFields.add("ingressBytesTransferred");
    openapiFields.add("lastConnectionEstablishedUtcTime");
    openapiFields.add("tunnel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TunnelConnectionHealth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TunnelConnectionHealth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TunnelConnectionHealth is not found in the empty JSON string", TunnelConnectionHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TunnelConnectionHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TunnelConnectionHealth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectionStatus") != null && !jsonObj.get("connectionStatus").isJsonNull()) && !jsonObj.get("connectionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionStatus").toString()));
      }
      // validate the optional field `connectionStatus`
      if (jsonObj.get("connectionStatus") != null && !jsonObj.get("connectionStatus").isJsonNull()) {
        ConnectionStatusEnum.validateJsonElement(jsonObj.get("connectionStatus"));
      }
      if ((jsonObj.get("lastConnectionEstablishedUtcTime") != null && !jsonObj.get("lastConnectionEstablishedUtcTime").isJsonNull()) && !jsonObj.get("lastConnectionEstablishedUtcTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastConnectionEstablishedUtcTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastConnectionEstablishedUtcTime").toString()));
      }
      if ((jsonObj.get("tunnel") != null && !jsonObj.get("tunnel").isJsonNull()) && !jsonObj.get("tunnel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tunnel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tunnel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TunnelConnectionHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TunnelConnectionHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TunnelConnectionHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TunnelConnectionHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<TunnelConnectionHealth>() {
           @Override
           public void write(JsonWriter out, TunnelConnectionHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TunnelConnectionHealth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TunnelConnectionHealth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TunnelConnectionHealth
   * @throws IOException if the JSON string is invalid with respect to TunnelConnectionHealth
   */
  public static TunnelConnectionHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TunnelConnectionHealth.class);
  }

  /**
   * Convert an instance of TunnelConnectionHealth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

