/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of VirtualNetworkGatewayIPConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:43:59.995075-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualNetworkGatewayIPConfigurationPropertiesFormat {
  /**
   * The private IP allocation method. Possible values are: &#39;Static&#39; and &#39;Dynamic&#39;.
   */
  @JsonAdapter(PrivateIPAllocationMethodEnum.Adapter.class)
  public enum PrivateIPAllocationMethodEnum {
    STATIC("Static"),
    
    DYNAMIC("Dynamic");

    private String value;

    PrivateIPAllocationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivateIPAllocationMethodEnum fromValue(String value) {
      for (PrivateIPAllocationMethodEnum b : PrivateIPAllocationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivateIPAllocationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivateIPAllocationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivateIPAllocationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivateIPAllocationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrivateIPAllocationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIVATE_I_P_ALLOCATION_METHOD = "privateIPAllocationMethod";
  @SerializedName(SERIALIZED_NAME_PRIVATE_I_P_ALLOCATION_METHOD)
  private PrivateIPAllocationMethodEnum privateIPAllocationMethod;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_PUBLIC_I_P_ADDRESS = "publicIPAddress";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P_ADDRESS)
  private VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer publicIPAddress;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer subnet;

  public VirtualNetworkGatewayIPConfigurationPropertiesFormat() {
  }

  public VirtualNetworkGatewayIPConfigurationPropertiesFormat(
     String provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public VirtualNetworkGatewayIPConfigurationPropertiesFormat privateIPAllocationMethod(PrivateIPAllocationMethodEnum privateIPAllocationMethod) {
    this.privateIPAllocationMethod = privateIPAllocationMethod;
    return this;
  }

  /**
   * The private IP allocation method. Possible values are: &#39;Static&#39; and &#39;Dynamic&#39;.
   * @return privateIPAllocationMethod
   */
  @javax.annotation.Nullable
  public PrivateIPAllocationMethodEnum getPrivateIPAllocationMethod() {
    return privateIPAllocationMethod;
  }

  public void setPrivateIPAllocationMethod(PrivateIPAllocationMethodEnum privateIPAllocationMethod) {
    this.privateIPAllocationMethod = privateIPAllocationMethod;
  }


  /**
   * The provisioning state of the public IP resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public VirtualNetworkGatewayIPConfigurationPropertiesFormat publicIPAddress(VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer publicIPAddress) {
    this.publicIPAddress = publicIPAddress;
    return this;
  }

  /**
   * Get publicIPAddress
   * @return publicIPAddress
   */
  @javax.annotation.Nullable
  public VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer getPublicIPAddress() {
    return publicIPAddress;
  }

  public void setPublicIPAddress(VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer publicIPAddress) {
    this.publicIPAddress = publicIPAddress;
  }


  public VirtualNetworkGatewayIPConfigurationPropertiesFormat subnet(VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * Get subnet
   * @return subnet
   */
  @javax.annotation.Nullable
  public VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer getSubnet() {
    return subnet;
  }

  public void setSubnet(VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer subnet) {
    this.subnet = subnet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualNetworkGatewayIPConfigurationPropertiesFormat virtualNetworkGatewayIPConfigurationPropertiesFormat = (VirtualNetworkGatewayIPConfigurationPropertiesFormat) o;
    return Objects.equals(this.privateIPAllocationMethod, virtualNetworkGatewayIPConfigurationPropertiesFormat.privateIPAllocationMethod) &&
        Objects.equals(this.provisioningState, virtualNetworkGatewayIPConfigurationPropertiesFormat.provisioningState) &&
        Objects.equals(this.publicIPAddress, virtualNetworkGatewayIPConfigurationPropertiesFormat.publicIPAddress) &&
        Objects.equals(this.subnet, virtualNetworkGatewayIPConfigurationPropertiesFormat.subnet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(privateIPAllocationMethod, provisioningState, publicIPAddress, subnet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualNetworkGatewayIPConfigurationPropertiesFormat {\n");
    sb.append("    privateIPAllocationMethod: ").append(toIndentedString(privateIPAllocationMethod)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicIPAddress: ").append(toIndentedString(publicIPAddress)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("privateIPAllocationMethod");
    openapiFields.add("provisioningState");
    openapiFields.add("publicIPAddress");
    openapiFields.add("subnet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualNetworkGatewayIPConfigurationPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualNetworkGatewayIPConfigurationPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualNetworkGatewayIPConfigurationPropertiesFormat is not found in the empty JSON string", VirtualNetworkGatewayIPConfigurationPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualNetworkGatewayIPConfigurationPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualNetworkGatewayIPConfigurationPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("privateIPAllocationMethod") != null && !jsonObj.get("privateIPAllocationMethod").isJsonNull()) && !jsonObj.get("privateIPAllocationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIPAllocationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateIPAllocationMethod").toString()));
      }
      // validate the optional field `privateIPAllocationMethod`
      if (jsonObj.get("privateIPAllocationMethod") != null && !jsonObj.get("privateIPAllocationMethod").isJsonNull()) {
        PrivateIPAllocationMethodEnum.validateJsonElement(jsonObj.get("privateIPAllocationMethod"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `publicIPAddress`
      if (jsonObj.get("publicIPAddress") != null && !jsonObj.get("publicIPAddress").isJsonNull()) {
        VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer.validateJsonElement(jsonObj.get("publicIPAddress"));
      }
      // validate the optional field `subnet`
      if (jsonObj.get("subnet") != null && !jsonObj.get("subnet").isJsonNull()) {
        VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer.validateJsonElement(jsonObj.get("subnet"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualNetworkGatewayIPConfigurationPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualNetworkGatewayIPConfigurationPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualNetworkGatewayIPConfigurationPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualNetworkGatewayIPConfigurationPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualNetworkGatewayIPConfigurationPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, VirtualNetworkGatewayIPConfigurationPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualNetworkGatewayIPConfigurationPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualNetworkGatewayIPConfigurationPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualNetworkGatewayIPConfigurationPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to VirtualNetworkGatewayIPConfigurationPropertiesFormat
   */
  public static VirtualNetworkGatewayIPConfigurationPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualNetworkGatewayIPConfigurationPropertiesFormat.class);
  }

  /**
   * Convert an instance of VirtualNetworkGatewayIPConfigurationPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

