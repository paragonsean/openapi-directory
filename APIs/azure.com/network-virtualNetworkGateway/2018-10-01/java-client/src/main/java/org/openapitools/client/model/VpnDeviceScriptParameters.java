/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Vpn device configuration script generation parameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:43:59.995075-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VpnDeviceScriptParameters {
  public static final String SERIALIZED_NAME_DEVICE_FAMILY = "deviceFamily";
  @SerializedName(SERIALIZED_NAME_DEVICE_FAMILY)
  private String deviceFamily;

  public static final String SERIALIZED_NAME_FIRMWARE_VERSION = "firmwareVersion";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_VERSION)
  private String firmwareVersion;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public VpnDeviceScriptParameters() {
  }

  public VpnDeviceScriptParameters deviceFamily(String deviceFamily) {
    this.deviceFamily = deviceFamily;
    return this;
  }

  /**
   * The device family for the vpn device.
   * @return deviceFamily
   */
  @javax.annotation.Nullable
  public String getDeviceFamily() {
    return deviceFamily;
  }

  public void setDeviceFamily(String deviceFamily) {
    this.deviceFamily = deviceFamily;
  }


  public VpnDeviceScriptParameters firmwareVersion(String firmwareVersion) {
    this.firmwareVersion = firmwareVersion;
    return this;
  }

  /**
   * The firmware version for the vpn device.
   * @return firmwareVersion
   */
  @javax.annotation.Nullable
  public String getFirmwareVersion() {
    return firmwareVersion;
  }

  public void setFirmwareVersion(String firmwareVersion) {
    this.firmwareVersion = firmwareVersion;
  }


  public VpnDeviceScriptParameters vendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * The vendor for the vpn device.
   * @return vendor
   */
  @javax.annotation.Nullable
  public String getVendor() {
    return vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpnDeviceScriptParameters vpnDeviceScriptParameters = (VpnDeviceScriptParameters) o;
    return Objects.equals(this.deviceFamily, vpnDeviceScriptParameters.deviceFamily) &&
        Objects.equals(this.firmwareVersion, vpnDeviceScriptParameters.firmwareVersion) &&
        Objects.equals(this.vendor, vpnDeviceScriptParameters.vendor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceFamily, firmwareVersion, vendor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpnDeviceScriptParameters {\n");
    sb.append("    deviceFamily: ").append(toIndentedString(deviceFamily)).append("\n");
    sb.append("    firmwareVersion: ").append(toIndentedString(firmwareVersion)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceFamily");
    openapiFields.add("firmwareVersion");
    openapiFields.add("vendor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VpnDeviceScriptParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VpnDeviceScriptParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VpnDeviceScriptParameters is not found in the empty JSON string", VpnDeviceScriptParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VpnDeviceScriptParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VpnDeviceScriptParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deviceFamily") != null && !jsonObj.get("deviceFamily").isJsonNull()) && !jsonObj.get("deviceFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceFamily").toString()));
      }
      if ((jsonObj.get("firmwareVersion") != null && !jsonObj.get("firmwareVersion").isJsonNull()) && !jsonObj.get("firmwareVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firmwareVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firmwareVersion").toString()));
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VpnDeviceScriptParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VpnDeviceScriptParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VpnDeviceScriptParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VpnDeviceScriptParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<VpnDeviceScriptParameters>() {
           @Override
           public void write(JsonWriter out, VpnDeviceScriptParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VpnDeviceScriptParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VpnDeviceScriptParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VpnDeviceScriptParameters
   * @throws IOException if the JSON string is invalid with respect to VpnDeviceScriptParameters
   */
  public static VpnDeviceScriptParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VpnDeviceScriptParameters.class);
  }

  /**
   * Convert an instance of VpnDeviceScriptParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

