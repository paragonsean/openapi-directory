/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BgpPeerStatusListResult;
import org.openapitools.client.model.GatewayRouteListResult;
import org.openapitools.client.model.VirtualNetworkGateway;
import org.openapitools.client.model.VirtualNetworkGatewayConnectionsUpdateTagsRequest;
import org.openapitools.client.model.VirtualNetworkGatewayListConnectionsResult;
import org.openapitools.client.model.VirtualNetworkGatewayListResult;
import org.openapitools.client.model.VpnClientIPsecParameters;
import org.openapitools.client.model.VpnClientParameters;
import org.openapitools.client.model.VpnDeviceScriptParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VirtualNetworkGatewaysApi
 */
@Disabled
public class VirtualNetworkGatewaysApiTest {

    private final VirtualNetworkGatewaysApi api = new VirtualNetworkGatewaysApi();

    /**
     * Creates or updates a virtual network gateway in the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualNetworkGateway parameters = null;
        VirtualNetworkGateway response = api.virtualNetworkGatewaysCreateOrUpdate(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified virtual network gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualNetworkGatewaysDelete(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Generates VPN profile for P2S client of the virtual network gateway in the specified resource group. Used for IKEV2 and radius based authentication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysGenerateVpnProfileTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VpnClientParameters parameters = null;
        String response = api.virtualNetworkGatewaysGenerateVpnProfile(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Generates VPN client package for P2S client of the virtual network gateway in the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysGeneratevpnclientpackageTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VpnClientParameters parameters = null;
        String response = api.virtualNetworkGatewaysGeneratevpnclientpackage(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Gets the specified virtual network gateway by resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysGetTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualNetworkGateway response = api.virtualNetworkGatewaysGet(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * This operation retrieves a list of routes the virtual network gateway is advertising to the specified peer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysGetAdvertisedRoutesTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String peer = null;
        String apiVersion = null;
        String subscriptionId = null;
        GatewayRouteListResult response = api.virtualNetworkGatewaysGetAdvertisedRoutes(resourceGroupName, virtualNetworkGatewayName, peer, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysGetBgpPeerStatusTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String peer = null;
        BgpPeerStatusListResult response = api.virtualNetworkGatewaysGetBgpPeerStatus(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, peer);
        // TODO: test validations
    }

    /**
     * This operation retrieves a list of routes the virtual network gateway has learned, including routes learned from BGP peers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysGetLearnedRoutesTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        GatewayRouteListResult response = api.virtualNetworkGatewaysGetLearnedRoutes(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets pre-generated VPN profile for P2S client of the virtual network gateway in the specified resource group. The profile needs to be generated first using generateVpnProfile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysGetVpnProfilePackageUrlTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String response = api.virtualNetworkGatewaysGetVpnProfilePackageUrl(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The Get VpnclientIpsecParameters operation retrieves information about the vpnclient ipsec policy for P2S client of virtual network gateway in the specified resource group through Network resource provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysGetVpnclientIpsecParametersTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VpnClientIPsecParameters response = api.virtualNetworkGatewaysGetVpnclientIpsecParameters(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all virtual network gateways by resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysListTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualNetworkGatewayListResult response = api.virtualNetworkGatewaysList(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all the connections in a virtual network gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysListConnectionsTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualNetworkGatewayListConnectionsResult response = api.virtualNetworkGatewaysListConnections(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Resets the primary of the virtual network gateway in the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysResetTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String gatewayVip = null;
        VirtualNetworkGateway response = api.virtualNetworkGatewaysReset(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, gatewayVip);
        // TODO: test validations
    }

    /**
     * Resets the VPN client shared key of the virtual network gateway in the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysResetVpnClientSharedKeyTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualNetworkGatewaysResetVpnClientSharedKey(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * The Set VpnclientIpsecParameters operation sets the vpnclient ipsec policy for P2S client of virtual network gateway in the specified resource group through Network resource provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysSetVpnclientIpsecParametersTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VpnClientIPsecParameters vpnclientIpsecParams = null;
        VpnClientIPsecParameters response = api.virtualNetworkGatewaysSetVpnclientIpsecParameters(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, vpnclientIpsecParams);
        // TODO: test validations
    }

    /**
     * Gets a xml format representation for supported vpn devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysSupportedVpnDevicesTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String response = api.virtualNetworkGatewaysSupportedVpnDevices(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Updates a virtual network gateway tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysUpdateTagsTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualNetworkGatewayConnectionsUpdateTagsRequest parameters = null;
        VirtualNetworkGateway response = api.virtualNetworkGatewaysUpdateTags(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Gets a xml format representation for vpn device configuration script.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualNetworkGatewaysVpnDeviceConfigurationScriptTest() throws ApiException {
        String resourceGroupName = null;
        String virtualNetworkGatewayConnectionName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VpnDeviceScriptParameters parameters = null;
        String response = api.virtualNetworkGatewaysVpnDeviceConfigurationScript(resourceGroupName, virtualNetworkGatewayConnectionName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
