# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VpnClientParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, processor_architecture: str=None):
        """VpnClientParameters - a model defined in OpenAPI

        :param processor_architecture: The processor_architecture of this VpnClientParameters.
        """
        self.openapi_types = {
            'processor_architecture': str
        }

        self.attribute_map = {
            'processor_architecture': 'processorArchitecture'
        }

        self._processor_architecture = processor_architecture

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VpnClientParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VpnClientParameters of this VpnClientParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def processor_architecture(self):
        """Gets the processor_architecture of this VpnClientParameters.

        VPN client Processor Architecture. Possible values are: 'AMD64' and 'X86'.

        :return: The processor_architecture of this VpnClientParameters.
        :rtype: str
        """
        return self._processor_architecture

    @processor_architecture.setter
    def processor_architecture(self, processor_architecture):
        """Sets the processor_architecture of this VpnClientParameters.

        VPN client Processor Architecture. Possible values are: 'AMD64' and 'X86'.

        :param processor_architecture: The processor_architecture of this VpnClientParameters.
        :type processor_architecture: str
        """
        allowed_values = ["Amd64", "X86"]  # noqa: E501
        if processor_architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `processor_architecture` ({0}), must be one of {1}"
                .format(processor_architecture, allowed_values)
            )

        self._processor_architecture = processor_architecture
