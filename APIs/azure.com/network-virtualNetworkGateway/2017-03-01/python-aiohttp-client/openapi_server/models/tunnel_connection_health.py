# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TunnelConnectionHealth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_status: str=None, egress_bytes_transferred: int=None, ingress_bytes_transferred: int=None, last_connection_established_utc_time: str=None, tunnel: str=None):
        """TunnelConnectionHealth - a model defined in OpenAPI

        :param connection_status: The connection_status of this TunnelConnectionHealth.
        :param egress_bytes_transferred: The egress_bytes_transferred of this TunnelConnectionHealth.
        :param ingress_bytes_transferred: The ingress_bytes_transferred of this TunnelConnectionHealth.
        :param last_connection_established_utc_time: The last_connection_established_utc_time of this TunnelConnectionHealth.
        :param tunnel: The tunnel of this TunnelConnectionHealth.
        """
        self.openapi_types = {
            'connection_status': str,
            'egress_bytes_transferred': int,
            'ingress_bytes_transferred': int,
            'last_connection_established_utc_time': str,
            'tunnel': str
        }

        self.attribute_map = {
            'connection_status': 'connectionStatus',
            'egress_bytes_transferred': 'egressBytesTransferred',
            'ingress_bytes_transferred': 'ingressBytesTransferred',
            'last_connection_established_utc_time': 'lastConnectionEstablishedUtcTime',
            'tunnel': 'tunnel'
        }

        self._connection_status = connection_status
        self._egress_bytes_transferred = egress_bytes_transferred
        self._ingress_bytes_transferred = ingress_bytes_transferred
        self._last_connection_established_utc_time = last_connection_established_utc_time
        self._tunnel = tunnel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TunnelConnectionHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TunnelConnectionHealth of this TunnelConnectionHealth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_status(self):
        """Gets the connection_status of this TunnelConnectionHealth.

        Virtual network Gateway connection status

        :return: The connection_status of this TunnelConnectionHealth.
        :rtype: str
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this TunnelConnectionHealth.

        Virtual network Gateway connection status

        :param connection_status: The connection_status of this TunnelConnectionHealth.
        :type connection_status: str
        """
        allowed_values = ["Unknown", "Connecting", "Connected", "NotConnected"]  # noqa: E501
        if connection_status not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_status` ({0}), must be one of {1}"
                .format(connection_status, allowed_values)
            )

        self._connection_status = connection_status

    @property
    def egress_bytes_transferred(self):
        """Gets the egress_bytes_transferred of this TunnelConnectionHealth.

        The Egress Bytes Transferred in this connection

        :return: The egress_bytes_transferred of this TunnelConnectionHealth.
        :rtype: int
        """
        return self._egress_bytes_transferred

    @egress_bytes_transferred.setter
    def egress_bytes_transferred(self, egress_bytes_transferred):
        """Sets the egress_bytes_transferred of this TunnelConnectionHealth.

        The Egress Bytes Transferred in this connection

        :param egress_bytes_transferred: The egress_bytes_transferred of this TunnelConnectionHealth.
        :type egress_bytes_transferred: int
        """

        self._egress_bytes_transferred = egress_bytes_transferred

    @property
    def ingress_bytes_transferred(self):
        """Gets the ingress_bytes_transferred of this TunnelConnectionHealth.

        The Ingress Bytes Transferred in this connection

        :return: The ingress_bytes_transferred of this TunnelConnectionHealth.
        :rtype: int
        """
        return self._ingress_bytes_transferred

    @ingress_bytes_transferred.setter
    def ingress_bytes_transferred(self, ingress_bytes_transferred):
        """Sets the ingress_bytes_transferred of this TunnelConnectionHealth.

        The Ingress Bytes Transferred in this connection

        :param ingress_bytes_transferred: The ingress_bytes_transferred of this TunnelConnectionHealth.
        :type ingress_bytes_transferred: int
        """

        self._ingress_bytes_transferred = ingress_bytes_transferred

    @property
    def last_connection_established_utc_time(self):
        """Gets the last_connection_established_utc_time of this TunnelConnectionHealth.

        The time at which connection was established in Utc format.

        :return: The last_connection_established_utc_time of this TunnelConnectionHealth.
        :rtype: str
        """
        return self._last_connection_established_utc_time

    @last_connection_established_utc_time.setter
    def last_connection_established_utc_time(self, last_connection_established_utc_time):
        """Sets the last_connection_established_utc_time of this TunnelConnectionHealth.

        The time at which connection was established in Utc format.

        :param last_connection_established_utc_time: The last_connection_established_utc_time of this TunnelConnectionHealth.
        :type last_connection_established_utc_time: str
        """

        self._last_connection_established_utc_time = last_connection_established_utc_time

    @property
    def tunnel(self):
        """Gets the tunnel of this TunnelConnectionHealth.

        Tunnel name.

        :return: The tunnel of this TunnelConnectionHealth.
        :rtype: str
        """
        return self._tunnel

    @tunnel.setter
    def tunnel(self, tunnel):
        """Sets the tunnel of this TunnelConnectionHealth.

        Tunnel name.

        :param tunnel: The tunnel of this TunnelConnectionHealth.
        :type tunnel: str
        """

        self._tunnel = tunnel
