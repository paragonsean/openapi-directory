/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGatewayRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGatewayRoute::OAIGatewayRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGatewayRoute::OAIGatewayRoute() {
    this->initializeModel();
}

OAIGatewayRoute::~OAIGatewayRoute() {}

void OAIGatewayRoute::initializeModel() {

    m_as_path_isSet = false;
    m_as_path_isValid = false;

    m_local_address_isSet = false;
    m_local_address_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_next_hop_isSet = false;
    m_next_hop_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_source_peer_isSet = false;
    m_source_peer_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIGatewayRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGatewayRoute::fromJsonObject(QJsonObject json) {

    m_as_path_isValid = ::OpenAPI::fromJsonValue(m_as_path, json[QString("asPath")]);
    m_as_path_isSet = !json[QString("asPath")].isNull() && m_as_path_isValid;

    m_local_address_isValid = ::OpenAPI::fromJsonValue(m_local_address, json[QString("localAddress")]);
    m_local_address_isSet = !json[QString("localAddress")].isNull() && m_local_address_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_next_hop_isValid = ::OpenAPI::fromJsonValue(m_next_hop, json[QString("nextHop")]);
    m_next_hop_isSet = !json[QString("nextHop")].isNull() && m_next_hop_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_source_peer_isValid = ::OpenAPI::fromJsonValue(m_source_peer, json[QString("sourcePeer")]);
    m_source_peer_isSet = !json[QString("sourcePeer")].isNull() && m_source_peer_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIGatewayRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGatewayRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_as_path_isSet) {
        obj.insert(QString("asPath"), ::OpenAPI::toJsonValue(m_as_path));
    }
    if (m_local_address_isSet) {
        obj.insert(QString("localAddress"), ::OpenAPI::toJsonValue(m_local_address));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_next_hop_isSet) {
        obj.insert(QString("nextHop"), ::OpenAPI::toJsonValue(m_next_hop));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_source_peer_isSet) {
        obj.insert(QString("sourcePeer"), ::OpenAPI::toJsonValue(m_source_peer));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIGatewayRoute::getAsPath() const {
    return m_as_path;
}
void OAIGatewayRoute::setAsPath(const QString &as_path) {
    m_as_path = as_path;
    m_as_path_isSet = true;
}

bool OAIGatewayRoute::is_as_path_Set() const{
    return m_as_path_isSet;
}

bool OAIGatewayRoute::is_as_path_Valid() const{
    return m_as_path_isValid;
}

QString OAIGatewayRoute::getLocalAddress() const {
    return m_local_address;
}
void OAIGatewayRoute::setLocalAddress(const QString &local_address) {
    m_local_address = local_address;
    m_local_address_isSet = true;
}

bool OAIGatewayRoute::is_local_address_Set() const{
    return m_local_address_isSet;
}

bool OAIGatewayRoute::is_local_address_Valid() const{
    return m_local_address_isValid;
}

QString OAIGatewayRoute::getNetwork() const {
    return m_network;
}
void OAIGatewayRoute::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGatewayRoute::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGatewayRoute::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIGatewayRoute::getNextHop() const {
    return m_next_hop;
}
void OAIGatewayRoute::setNextHop(const QString &next_hop) {
    m_next_hop = next_hop;
    m_next_hop_isSet = true;
}

bool OAIGatewayRoute::is_next_hop_Set() const{
    return m_next_hop_isSet;
}

bool OAIGatewayRoute::is_next_hop_Valid() const{
    return m_next_hop_isValid;
}

QString OAIGatewayRoute::getOrigin() const {
    return m_origin;
}
void OAIGatewayRoute::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIGatewayRoute::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIGatewayRoute::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIGatewayRoute::getSourcePeer() const {
    return m_source_peer;
}
void OAIGatewayRoute::setSourcePeer(const QString &source_peer) {
    m_source_peer = source_peer;
    m_source_peer_isSet = true;
}

bool OAIGatewayRoute::is_source_peer_Set() const{
    return m_source_peer_isSet;
}

bool OAIGatewayRoute::is_source_peer_Valid() const{
    return m_source_peer_isValid;
}

qint32 OAIGatewayRoute::getWeight() const {
    return m_weight;
}
void OAIGatewayRoute::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIGatewayRoute::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIGatewayRoute::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIGatewayRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_as_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_peer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGatewayRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
