/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetworkManagementClient);
  }
}(this, function(expect, NetworkManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VirtualNetworkGatewayConnectionPropertiesFormat', function() {
    it('should create an instance of VirtualNetworkGatewayConnectionPropertiesFormat', function() {
      // uncomment below and update the code to test VirtualNetworkGatewayConnectionPropertiesFormat
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be.a(NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat);
    });

    it('should have the property authorizationKey (base name: "authorizationKey")', function() {
      // uncomment below and update the code to test the property authorizationKey
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property connectionProtocol (base name: "connectionProtocol")', function() {
      // uncomment below and update the code to test the property connectionProtocol
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property connectionStatus (base name: "connectionStatus")', function() {
      // uncomment below and update the code to test the property connectionStatus
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property connectionType (base name: "connectionType")', function() {
      // uncomment below and update the code to test the property connectionType
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property egressBytesTransferred (base name: "egressBytesTransferred")', function() {
      // uncomment below and update the code to test the property egressBytesTransferred
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property enableBgp (base name: "enableBgp")', function() {
      // uncomment below and update the code to test the property enableBgp
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property expressRouteGatewayBypass (base name: "expressRouteGatewayBypass")', function() {
      // uncomment below and update the code to test the property expressRouteGatewayBypass
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property ingressBytesTransferred (base name: "ingressBytesTransferred")', function() {
      // uncomment below and update the code to test the property ingressBytesTransferred
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property ipsecPolicies (base name: "ipsecPolicies")', function() {
      // uncomment below and update the code to test the property ipsecPolicies
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property localNetworkGateway2 (base name: "localNetworkGateway2")', function() {
      // uncomment below and update the code to test the property localNetworkGateway2
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property peer (base name: "peer")', function() {
      // uncomment below and update the code to test the property peer
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property resourceGuid (base name: "resourceGuid")', function() {
      // uncomment below and update the code to test the property resourceGuid
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property routingWeight (base name: "routingWeight")', function() {
      // uncomment below and update the code to test the property routingWeight
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property sharedKey (base name: "sharedKey")', function() {
      // uncomment below and update the code to test the property sharedKey
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property tunnelConnectionStatus (base name: "tunnelConnectionStatus")', function() {
      // uncomment below and update the code to test the property tunnelConnectionStatus
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property usePolicyBasedTrafficSelectors (base name: "usePolicyBasedTrafficSelectors")', function() {
      // uncomment below and update the code to test the property usePolicyBasedTrafficSelectors
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property virtualNetworkGateway1 (base name: "virtualNetworkGateway1")', function() {
      // uncomment below and update the code to test the property virtualNetworkGateway1
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property virtualNetworkGateway2 (base name: "virtualNetworkGateway2")', function() {
      // uncomment below and update the code to test the property virtualNetworkGateway2
      //var instance = new NetworkManagementClient.VirtualNetworkGatewayConnectionPropertiesFormat();
      //expect(instance).to.be();
    });

  });

}));
