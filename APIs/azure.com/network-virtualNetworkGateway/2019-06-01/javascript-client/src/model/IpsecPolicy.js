/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DhGroup from './DhGroup';
import IkeEncryption from './IkeEncryption';
import IkeIntegrity from './IkeIntegrity';
import IpsecEncryption from './IpsecEncryption';
import IpsecIntegrity from './IpsecIntegrity';
import PfsGroup from './PfsGroup';

/**
 * The IpsecPolicy model module.
 * @module model/IpsecPolicy
 * @version 2019-06-01
 */
class IpsecPolicy {
    /**
     * Constructs a new <code>IpsecPolicy</code>.
     * An IPSec Policy configuration for a virtual network gateway connection.
     * @alias module:model/IpsecPolicy
     * @param dhGroup {module:model/DhGroup} 
     * @param ikeEncryption {module:model/IkeEncryption} 
     * @param ikeIntegrity {module:model/IkeIntegrity} 
     * @param ipsecEncryption {module:model/IpsecEncryption} 
     * @param ipsecIntegrity {module:model/IpsecIntegrity} 
     * @param pfsGroup {module:model/PfsGroup} 
     * @param saDataSizeKilobytes {Number} The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
     * @param saLifeTimeSeconds {Number} The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
     */
    constructor(dhGroup, ikeEncryption, ikeIntegrity, ipsecEncryption, ipsecIntegrity, pfsGroup, saDataSizeKilobytes, saLifeTimeSeconds) { 
        
        IpsecPolicy.initialize(this, dhGroup, ikeEncryption, ikeIntegrity, ipsecEncryption, ipsecIntegrity, pfsGroup, saDataSizeKilobytes, saLifeTimeSeconds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dhGroup, ikeEncryption, ikeIntegrity, ipsecEncryption, ipsecIntegrity, pfsGroup, saDataSizeKilobytes, saLifeTimeSeconds) { 
        obj['dhGroup'] = dhGroup;
        obj['ikeEncryption'] = ikeEncryption;
        obj['ikeIntegrity'] = ikeIntegrity;
        obj['ipsecEncryption'] = ipsecEncryption;
        obj['ipsecIntegrity'] = ipsecIntegrity;
        obj['pfsGroup'] = pfsGroup;
        obj['saDataSizeKilobytes'] = saDataSizeKilobytes;
        obj['saLifeTimeSeconds'] = saLifeTimeSeconds;
    }

    /**
     * Constructs a <code>IpsecPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IpsecPolicy} obj Optional instance to populate.
     * @return {module:model/IpsecPolicy} The populated <code>IpsecPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IpsecPolicy();

            if (data.hasOwnProperty('dhGroup')) {
                obj['dhGroup'] = DhGroup.constructFromObject(data['dhGroup']);
            }
            if (data.hasOwnProperty('ikeEncryption')) {
                obj['ikeEncryption'] = IkeEncryption.constructFromObject(data['ikeEncryption']);
            }
            if (data.hasOwnProperty('ikeIntegrity')) {
                obj['ikeIntegrity'] = IkeIntegrity.constructFromObject(data['ikeIntegrity']);
            }
            if (data.hasOwnProperty('ipsecEncryption')) {
                obj['ipsecEncryption'] = IpsecEncryption.constructFromObject(data['ipsecEncryption']);
            }
            if (data.hasOwnProperty('ipsecIntegrity')) {
                obj['ipsecIntegrity'] = IpsecIntegrity.constructFromObject(data['ipsecIntegrity']);
            }
            if (data.hasOwnProperty('pfsGroup')) {
                obj['pfsGroup'] = PfsGroup.constructFromObject(data['pfsGroup']);
            }
            if (data.hasOwnProperty('saDataSizeKilobytes')) {
                obj['saDataSizeKilobytes'] = ApiClient.convertToType(data['saDataSizeKilobytes'], 'Number');
            }
            if (data.hasOwnProperty('saLifeTimeSeconds')) {
                obj['saLifeTimeSeconds'] = ApiClient.convertToType(data['saLifeTimeSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IpsecPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IpsecPolicy</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IpsecPolicy.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

IpsecPolicy.RequiredProperties = ["dhGroup", "ikeEncryption", "ikeIntegrity", "ipsecEncryption", "ipsecIntegrity", "pfsGroup", "saDataSizeKilobytes", "saLifeTimeSeconds"];

/**
 * @member {module:model/DhGroup} dhGroup
 */
IpsecPolicy.prototype['dhGroup'] = undefined;

/**
 * @member {module:model/IkeEncryption} ikeEncryption
 */
IpsecPolicy.prototype['ikeEncryption'] = undefined;

/**
 * @member {module:model/IkeIntegrity} ikeIntegrity
 */
IpsecPolicy.prototype['ikeIntegrity'] = undefined;

/**
 * @member {module:model/IpsecEncryption} ipsecEncryption
 */
IpsecPolicy.prototype['ipsecEncryption'] = undefined;

/**
 * @member {module:model/IpsecIntegrity} ipsecIntegrity
 */
IpsecPolicy.prototype['ipsecIntegrity'] = undefined;

/**
 * @member {module:model/PfsGroup} pfsGroup
 */
IpsecPolicy.prototype['pfsGroup'] = undefined;

/**
 * The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
 * @member {Number} saDataSizeKilobytes
 */
IpsecPolicy.prototype['saDataSizeKilobytes'] = undefined;

/**
 * The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
 * @member {Number} saLifeTimeSeconds
 */
IpsecPolicy.prototype['saLifeTimeSeconds'] = undefined;






export default IpsecPolicy;

