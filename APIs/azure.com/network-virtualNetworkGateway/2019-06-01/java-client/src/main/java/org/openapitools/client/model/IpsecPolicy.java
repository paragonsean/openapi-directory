/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DhGroup;
import org.openapitools.client.model.IkeEncryption;
import org.openapitools.client.model.IkeIntegrity;
import org.openapitools.client.model.IpsecEncryption;
import org.openapitools.client.model.IpsecIntegrity;
import org.openapitools.client.model.PfsGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An IPSec Policy configuration for a virtual network gateway connection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:43:35.027434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IpsecPolicy {
  public static final String SERIALIZED_NAME_DH_GROUP = "dhGroup";
  @SerializedName(SERIALIZED_NAME_DH_GROUP)
  private DhGroup dhGroup;

  public static final String SERIALIZED_NAME_IKE_ENCRYPTION = "ikeEncryption";
  @SerializedName(SERIALIZED_NAME_IKE_ENCRYPTION)
  private IkeEncryption ikeEncryption;

  public static final String SERIALIZED_NAME_IKE_INTEGRITY = "ikeIntegrity";
  @SerializedName(SERIALIZED_NAME_IKE_INTEGRITY)
  private IkeIntegrity ikeIntegrity;

  public static final String SERIALIZED_NAME_IPSEC_ENCRYPTION = "ipsecEncryption";
  @SerializedName(SERIALIZED_NAME_IPSEC_ENCRYPTION)
  private IpsecEncryption ipsecEncryption;

  public static final String SERIALIZED_NAME_IPSEC_INTEGRITY = "ipsecIntegrity";
  @SerializedName(SERIALIZED_NAME_IPSEC_INTEGRITY)
  private IpsecIntegrity ipsecIntegrity;

  public static final String SERIALIZED_NAME_PFS_GROUP = "pfsGroup";
  @SerializedName(SERIALIZED_NAME_PFS_GROUP)
  private PfsGroup pfsGroup;

  public static final String SERIALIZED_NAME_SA_DATA_SIZE_KILOBYTES = "saDataSizeKilobytes";
  @SerializedName(SERIALIZED_NAME_SA_DATA_SIZE_KILOBYTES)
  private Integer saDataSizeKilobytes;

  public static final String SERIALIZED_NAME_SA_LIFE_TIME_SECONDS = "saLifeTimeSeconds";
  @SerializedName(SERIALIZED_NAME_SA_LIFE_TIME_SECONDS)
  private Integer saLifeTimeSeconds;

  public IpsecPolicy() {
  }

  public IpsecPolicy dhGroup(DhGroup dhGroup) {
    this.dhGroup = dhGroup;
    return this;
  }

  /**
   * Get dhGroup
   * @return dhGroup
   */
  @javax.annotation.Nonnull
  public DhGroup getDhGroup() {
    return dhGroup;
  }

  public void setDhGroup(DhGroup dhGroup) {
    this.dhGroup = dhGroup;
  }


  public IpsecPolicy ikeEncryption(IkeEncryption ikeEncryption) {
    this.ikeEncryption = ikeEncryption;
    return this;
  }

  /**
   * Get ikeEncryption
   * @return ikeEncryption
   */
  @javax.annotation.Nonnull
  public IkeEncryption getIkeEncryption() {
    return ikeEncryption;
  }

  public void setIkeEncryption(IkeEncryption ikeEncryption) {
    this.ikeEncryption = ikeEncryption;
  }


  public IpsecPolicy ikeIntegrity(IkeIntegrity ikeIntegrity) {
    this.ikeIntegrity = ikeIntegrity;
    return this;
  }

  /**
   * Get ikeIntegrity
   * @return ikeIntegrity
   */
  @javax.annotation.Nonnull
  public IkeIntegrity getIkeIntegrity() {
    return ikeIntegrity;
  }

  public void setIkeIntegrity(IkeIntegrity ikeIntegrity) {
    this.ikeIntegrity = ikeIntegrity;
  }


  public IpsecPolicy ipsecEncryption(IpsecEncryption ipsecEncryption) {
    this.ipsecEncryption = ipsecEncryption;
    return this;
  }

  /**
   * Get ipsecEncryption
   * @return ipsecEncryption
   */
  @javax.annotation.Nonnull
  public IpsecEncryption getIpsecEncryption() {
    return ipsecEncryption;
  }

  public void setIpsecEncryption(IpsecEncryption ipsecEncryption) {
    this.ipsecEncryption = ipsecEncryption;
  }


  public IpsecPolicy ipsecIntegrity(IpsecIntegrity ipsecIntegrity) {
    this.ipsecIntegrity = ipsecIntegrity;
    return this;
  }

  /**
   * Get ipsecIntegrity
   * @return ipsecIntegrity
   */
  @javax.annotation.Nonnull
  public IpsecIntegrity getIpsecIntegrity() {
    return ipsecIntegrity;
  }

  public void setIpsecIntegrity(IpsecIntegrity ipsecIntegrity) {
    this.ipsecIntegrity = ipsecIntegrity;
  }


  public IpsecPolicy pfsGroup(PfsGroup pfsGroup) {
    this.pfsGroup = pfsGroup;
    return this;
  }

  /**
   * Get pfsGroup
   * @return pfsGroup
   */
  @javax.annotation.Nonnull
  public PfsGroup getPfsGroup() {
    return pfsGroup;
  }

  public void setPfsGroup(PfsGroup pfsGroup) {
    this.pfsGroup = pfsGroup;
  }


  public IpsecPolicy saDataSizeKilobytes(Integer saDataSizeKilobytes) {
    this.saDataSizeKilobytes = saDataSizeKilobytes;
    return this;
  }

  /**
   * The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
   * @return saDataSizeKilobytes
   */
  @javax.annotation.Nonnull
  public Integer getSaDataSizeKilobytes() {
    return saDataSizeKilobytes;
  }

  public void setSaDataSizeKilobytes(Integer saDataSizeKilobytes) {
    this.saDataSizeKilobytes = saDataSizeKilobytes;
  }


  public IpsecPolicy saLifeTimeSeconds(Integer saLifeTimeSeconds) {
    this.saLifeTimeSeconds = saLifeTimeSeconds;
    return this;
  }

  /**
   * The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
   * @return saLifeTimeSeconds
   */
  @javax.annotation.Nonnull
  public Integer getSaLifeTimeSeconds() {
    return saLifeTimeSeconds;
  }

  public void setSaLifeTimeSeconds(Integer saLifeTimeSeconds) {
    this.saLifeTimeSeconds = saLifeTimeSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpsecPolicy ipsecPolicy = (IpsecPolicy) o;
    return Objects.equals(this.dhGroup, ipsecPolicy.dhGroup) &&
        Objects.equals(this.ikeEncryption, ipsecPolicy.ikeEncryption) &&
        Objects.equals(this.ikeIntegrity, ipsecPolicy.ikeIntegrity) &&
        Objects.equals(this.ipsecEncryption, ipsecPolicy.ipsecEncryption) &&
        Objects.equals(this.ipsecIntegrity, ipsecPolicy.ipsecIntegrity) &&
        Objects.equals(this.pfsGroup, ipsecPolicy.pfsGroup) &&
        Objects.equals(this.saDataSizeKilobytes, ipsecPolicy.saDataSizeKilobytes) &&
        Objects.equals(this.saLifeTimeSeconds, ipsecPolicy.saLifeTimeSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dhGroup, ikeEncryption, ikeIntegrity, ipsecEncryption, ipsecIntegrity, pfsGroup, saDataSizeKilobytes, saLifeTimeSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpsecPolicy {\n");
    sb.append("    dhGroup: ").append(toIndentedString(dhGroup)).append("\n");
    sb.append("    ikeEncryption: ").append(toIndentedString(ikeEncryption)).append("\n");
    sb.append("    ikeIntegrity: ").append(toIndentedString(ikeIntegrity)).append("\n");
    sb.append("    ipsecEncryption: ").append(toIndentedString(ipsecEncryption)).append("\n");
    sb.append("    ipsecIntegrity: ").append(toIndentedString(ipsecIntegrity)).append("\n");
    sb.append("    pfsGroup: ").append(toIndentedString(pfsGroup)).append("\n");
    sb.append("    saDataSizeKilobytes: ").append(toIndentedString(saDataSizeKilobytes)).append("\n");
    sb.append("    saLifeTimeSeconds: ").append(toIndentedString(saLifeTimeSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dhGroup");
    openapiFields.add("ikeEncryption");
    openapiFields.add("ikeIntegrity");
    openapiFields.add("ipsecEncryption");
    openapiFields.add("ipsecIntegrity");
    openapiFields.add("pfsGroup");
    openapiFields.add("saDataSizeKilobytes");
    openapiFields.add("saLifeTimeSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dhGroup");
    openapiRequiredFields.add("ikeEncryption");
    openapiRequiredFields.add("ikeIntegrity");
    openapiRequiredFields.add("ipsecEncryption");
    openapiRequiredFields.add("ipsecIntegrity");
    openapiRequiredFields.add("pfsGroup");
    openapiRequiredFields.add("saDataSizeKilobytes");
    openapiRequiredFields.add("saLifeTimeSeconds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpsecPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpsecPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpsecPolicy is not found in the empty JSON string", IpsecPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpsecPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpsecPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IpsecPolicy.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `dhGroup`
      DhGroup.validateJsonElement(jsonObj.get("dhGroup"));
      // validate the required field `ikeEncryption`
      IkeEncryption.validateJsonElement(jsonObj.get("ikeEncryption"));
      // validate the required field `ikeIntegrity`
      IkeIntegrity.validateJsonElement(jsonObj.get("ikeIntegrity"));
      // validate the required field `ipsecEncryption`
      IpsecEncryption.validateJsonElement(jsonObj.get("ipsecEncryption"));
      // validate the required field `ipsecIntegrity`
      IpsecIntegrity.validateJsonElement(jsonObj.get("ipsecIntegrity"));
      // validate the required field `pfsGroup`
      PfsGroup.validateJsonElement(jsonObj.get("pfsGroup"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpsecPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpsecPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpsecPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpsecPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<IpsecPolicy>() {
           @Override
           public void write(JsonWriter out, IpsecPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpsecPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpsecPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpsecPolicy
   * @throws IOException if the JSON string is invalid with respect to IpsecPolicy
   */
  public static IpsecPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpsecPolicy.class);
  }

  /**
   * Convert an instance of IpsecPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

