/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VPN client connection health detail.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:43:35.027434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VpnClientConnectionHealthDetail {
  public static final String SERIALIZED_NAME_EGRESS_BYTES_TRANSFERRED = "egressBytesTransferred";
  @SerializedName(SERIALIZED_NAME_EGRESS_BYTES_TRANSFERRED)
  private Long egressBytesTransferred;

  public static final String SERIALIZED_NAME_EGRESS_PACKETS_TRANSFERRED = "egressPacketsTransferred";
  @SerializedName(SERIALIZED_NAME_EGRESS_PACKETS_TRANSFERRED)
  private Long egressPacketsTransferred;

  public static final String SERIALIZED_NAME_INGRESS_BYTES_TRANSFERRED = "ingressBytesTransferred";
  @SerializedName(SERIALIZED_NAME_INGRESS_BYTES_TRANSFERRED)
  private Long ingressBytesTransferred;

  public static final String SERIALIZED_NAME_INGRESS_PACKETS_TRANSFERRED = "ingressPacketsTransferred";
  @SerializedName(SERIALIZED_NAME_INGRESS_PACKETS_TRANSFERRED)
  private Long ingressPacketsTransferred;

  public static final String SERIALIZED_NAME_MAX_BANDWIDTH = "maxBandwidth";
  @SerializedName(SERIALIZED_NAME_MAX_BANDWIDTH)
  private Long maxBandwidth;

  public static final String SERIALIZED_NAME_MAX_PACKETS_PER_SECOND = "maxPacketsPerSecond";
  @SerializedName(SERIALIZED_NAME_MAX_PACKETS_PER_SECOND)
  private Long maxPacketsPerSecond;

  public static final String SERIALIZED_NAME_PRIVATE_IP_ADDRESS = "privateIpAddress";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IP_ADDRESS)
  private String privateIpAddress;

  public static final String SERIALIZED_NAME_PUBLIC_IP_ADDRESS = "publicIpAddress";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP_ADDRESS)
  private String publicIpAddress;

  public static final String SERIALIZED_NAME_VPN_CONNECTION_DURATION = "vpnConnectionDuration";
  @SerializedName(SERIALIZED_NAME_VPN_CONNECTION_DURATION)
  private Long vpnConnectionDuration;

  public static final String SERIALIZED_NAME_VPN_CONNECTION_ID = "vpnConnectionId";
  @SerializedName(SERIALIZED_NAME_VPN_CONNECTION_ID)
  private String vpnConnectionId;

  public static final String SERIALIZED_NAME_VPN_CONNECTION_TIME = "vpnConnectionTime";
  @SerializedName(SERIALIZED_NAME_VPN_CONNECTION_TIME)
  private String vpnConnectionTime;

  public static final String SERIALIZED_NAME_VPN_USER_NAME = "vpnUserName";
  @SerializedName(SERIALIZED_NAME_VPN_USER_NAME)
  private String vpnUserName;

  public VpnClientConnectionHealthDetail() {
  }

  public VpnClientConnectionHealthDetail(
     Long egressBytesTransferred, 
     Long egressPacketsTransferred, 
     Long ingressBytesTransferred, 
     Long ingressPacketsTransferred, 
     Long maxBandwidth, 
     Long maxPacketsPerSecond, 
     String privateIpAddress, 
     String publicIpAddress, 
     Long vpnConnectionDuration, 
     String vpnConnectionId, 
     String vpnConnectionTime, 
     String vpnUserName
  ) {
    this();
    this.egressBytesTransferred = egressBytesTransferred;
    this.egressPacketsTransferred = egressPacketsTransferred;
    this.ingressBytesTransferred = ingressBytesTransferred;
    this.ingressPacketsTransferred = ingressPacketsTransferred;
    this.maxBandwidth = maxBandwidth;
    this.maxPacketsPerSecond = maxPacketsPerSecond;
    this.privateIpAddress = privateIpAddress;
    this.publicIpAddress = publicIpAddress;
    this.vpnConnectionDuration = vpnConnectionDuration;
    this.vpnConnectionId = vpnConnectionId;
    this.vpnConnectionTime = vpnConnectionTime;
    this.vpnUserName = vpnUserName;
  }

  /**
   * The egress bytes per second.
   * @return egressBytesTransferred
   */
  @javax.annotation.Nullable
  public Long getEgressBytesTransferred() {
    return egressBytesTransferred;
  }



  /**
   * The egress packets per second.
   * @return egressPacketsTransferred
   */
  @javax.annotation.Nullable
  public Long getEgressPacketsTransferred() {
    return egressPacketsTransferred;
  }



  /**
   * The ingress bytes per second.
   * @return ingressBytesTransferred
   */
  @javax.annotation.Nullable
  public Long getIngressBytesTransferred() {
    return ingressBytesTransferred;
  }



  /**
   * The ingress packets per second.
   * @return ingressPacketsTransferred
   */
  @javax.annotation.Nullable
  public Long getIngressPacketsTransferred() {
    return ingressPacketsTransferred;
  }



  /**
   * The max band width.
   * @return maxBandwidth
   */
  @javax.annotation.Nullable
  public Long getMaxBandwidth() {
    return maxBandwidth;
  }



  /**
   * The max packets transferred per second.
   * @return maxPacketsPerSecond
   */
  @javax.annotation.Nullable
  public Long getMaxPacketsPerSecond() {
    return maxPacketsPerSecond;
  }



  /**
   * The assigned private Ip of a connected vpn client.
   * @return privateIpAddress
   */
  @javax.annotation.Nullable
  public String getPrivateIpAddress() {
    return privateIpAddress;
  }



  /**
   * The public Ip of a connected vpn client.
   * @return publicIpAddress
   */
  @javax.annotation.Nullable
  public String getPublicIpAddress() {
    return publicIpAddress;
  }



  /**
   * The duration time of a connected vpn client.
   * @return vpnConnectionDuration
   */
  @javax.annotation.Nullable
  public Long getVpnConnectionDuration() {
    return vpnConnectionDuration;
  }



  /**
   * The vpn client Id.
   * @return vpnConnectionId
   */
  @javax.annotation.Nullable
  public String getVpnConnectionId() {
    return vpnConnectionId;
  }



  /**
   * The start time of a connected vpn client.
   * @return vpnConnectionTime
   */
  @javax.annotation.Nullable
  public String getVpnConnectionTime() {
    return vpnConnectionTime;
  }



  /**
   * The user name of a connected vpn client.
   * @return vpnUserName
   */
  @javax.annotation.Nullable
  public String getVpnUserName() {
    return vpnUserName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpnClientConnectionHealthDetail vpnClientConnectionHealthDetail = (VpnClientConnectionHealthDetail) o;
    return Objects.equals(this.egressBytesTransferred, vpnClientConnectionHealthDetail.egressBytesTransferred) &&
        Objects.equals(this.egressPacketsTransferred, vpnClientConnectionHealthDetail.egressPacketsTransferred) &&
        Objects.equals(this.ingressBytesTransferred, vpnClientConnectionHealthDetail.ingressBytesTransferred) &&
        Objects.equals(this.ingressPacketsTransferred, vpnClientConnectionHealthDetail.ingressPacketsTransferred) &&
        Objects.equals(this.maxBandwidth, vpnClientConnectionHealthDetail.maxBandwidth) &&
        Objects.equals(this.maxPacketsPerSecond, vpnClientConnectionHealthDetail.maxPacketsPerSecond) &&
        Objects.equals(this.privateIpAddress, vpnClientConnectionHealthDetail.privateIpAddress) &&
        Objects.equals(this.publicIpAddress, vpnClientConnectionHealthDetail.publicIpAddress) &&
        Objects.equals(this.vpnConnectionDuration, vpnClientConnectionHealthDetail.vpnConnectionDuration) &&
        Objects.equals(this.vpnConnectionId, vpnClientConnectionHealthDetail.vpnConnectionId) &&
        Objects.equals(this.vpnConnectionTime, vpnClientConnectionHealthDetail.vpnConnectionTime) &&
        Objects.equals(this.vpnUserName, vpnClientConnectionHealthDetail.vpnUserName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(egressBytesTransferred, egressPacketsTransferred, ingressBytesTransferred, ingressPacketsTransferred, maxBandwidth, maxPacketsPerSecond, privateIpAddress, publicIpAddress, vpnConnectionDuration, vpnConnectionId, vpnConnectionTime, vpnUserName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpnClientConnectionHealthDetail {\n");
    sb.append("    egressBytesTransferred: ").append(toIndentedString(egressBytesTransferred)).append("\n");
    sb.append("    egressPacketsTransferred: ").append(toIndentedString(egressPacketsTransferred)).append("\n");
    sb.append("    ingressBytesTransferred: ").append(toIndentedString(ingressBytesTransferred)).append("\n");
    sb.append("    ingressPacketsTransferred: ").append(toIndentedString(ingressPacketsTransferred)).append("\n");
    sb.append("    maxBandwidth: ").append(toIndentedString(maxBandwidth)).append("\n");
    sb.append("    maxPacketsPerSecond: ").append(toIndentedString(maxPacketsPerSecond)).append("\n");
    sb.append("    privateIpAddress: ").append(toIndentedString(privateIpAddress)).append("\n");
    sb.append("    publicIpAddress: ").append(toIndentedString(publicIpAddress)).append("\n");
    sb.append("    vpnConnectionDuration: ").append(toIndentedString(vpnConnectionDuration)).append("\n");
    sb.append("    vpnConnectionId: ").append(toIndentedString(vpnConnectionId)).append("\n");
    sb.append("    vpnConnectionTime: ").append(toIndentedString(vpnConnectionTime)).append("\n");
    sb.append("    vpnUserName: ").append(toIndentedString(vpnUserName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("egressBytesTransferred");
    openapiFields.add("egressPacketsTransferred");
    openapiFields.add("ingressBytesTransferred");
    openapiFields.add("ingressPacketsTransferred");
    openapiFields.add("maxBandwidth");
    openapiFields.add("maxPacketsPerSecond");
    openapiFields.add("privateIpAddress");
    openapiFields.add("publicIpAddress");
    openapiFields.add("vpnConnectionDuration");
    openapiFields.add("vpnConnectionId");
    openapiFields.add("vpnConnectionTime");
    openapiFields.add("vpnUserName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VpnClientConnectionHealthDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VpnClientConnectionHealthDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VpnClientConnectionHealthDetail is not found in the empty JSON string", VpnClientConnectionHealthDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VpnClientConnectionHealthDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VpnClientConnectionHealthDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("privateIpAddress") != null && !jsonObj.get("privateIpAddress").isJsonNull()) && !jsonObj.get("privateIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateIpAddress").toString()));
      }
      if ((jsonObj.get("publicIpAddress") != null && !jsonObj.get("publicIpAddress").isJsonNull()) && !jsonObj.get("publicIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIpAddress").toString()));
      }
      if ((jsonObj.get("vpnConnectionId") != null && !jsonObj.get("vpnConnectionId").isJsonNull()) && !jsonObj.get("vpnConnectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpnConnectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpnConnectionId").toString()));
      }
      if ((jsonObj.get("vpnConnectionTime") != null && !jsonObj.get("vpnConnectionTime").isJsonNull()) && !jsonObj.get("vpnConnectionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpnConnectionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpnConnectionTime").toString()));
      }
      if ((jsonObj.get("vpnUserName") != null && !jsonObj.get("vpnUserName").isJsonNull()) && !jsonObj.get("vpnUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpnUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpnUserName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VpnClientConnectionHealthDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VpnClientConnectionHealthDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VpnClientConnectionHealthDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VpnClientConnectionHealthDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<VpnClientConnectionHealthDetail>() {
           @Override
           public void write(JsonWriter out, VpnClientConnectionHealthDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VpnClientConnectionHealthDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VpnClientConnectionHealthDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VpnClientConnectionHealthDetail
   * @throws IOException if the JSON string is invalid with respect to VpnClientConnectionHealthDetail
   */
  public static VpnClientConnectionHealthDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VpnClientConnectionHealthDetail.class);
  }

  /**
   * Convert an instance of VpnClientConnectionHealthDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

