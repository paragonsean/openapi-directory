/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnClientConnectionHealthDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnClientConnectionHealthDetail::OAIVpnClientConnectionHealthDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnClientConnectionHealthDetail::OAIVpnClientConnectionHealthDetail() {
    this->initializeModel();
}

OAIVpnClientConnectionHealthDetail::~OAIVpnClientConnectionHealthDetail() {}

void OAIVpnClientConnectionHealthDetail::initializeModel() {

    m_egress_bytes_transferred_isSet = false;
    m_egress_bytes_transferred_isValid = false;

    m_egress_packets_transferred_isSet = false;
    m_egress_packets_transferred_isValid = false;

    m_ingress_bytes_transferred_isSet = false;
    m_ingress_bytes_transferred_isValid = false;

    m_ingress_packets_transferred_isSet = false;
    m_ingress_packets_transferred_isValid = false;

    m_max_bandwidth_isSet = false;
    m_max_bandwidth_isValid = false;

    m_max_packets_per_second_isSet = false;
    m_max_packets_per_second_isValid = false;

    m_private_ip_address_isSet = false;
    m_private_ip_address_isValid = false;

    m_public_ip_address_isSet = false;
    m_public_ip_address_isValid = false;

    m_vpn_connection_duration_isSet = false;
    m_vpn_connection_duration_isValid = false;

    m_vpn_connection_id_isSet = false;
    m_vpn_connection_id_isValid = false;

    m_vpn_connection_time_isSet = false;
    m_vpn_connection_time_isValid = false;

    m_vpn_user_name_isSet = false;
    m_vpn_user_name_isValid = false;
}

void OAIVpnClientConnectionHealthDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnClientConnectionHealthDetail::fromJsonObject(QJsonObject json) {

    m_egress_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_egress_bytes_transferred, json[QString("egressBytesTransferred")]);
    m_egress_bytes_transferred_isSet = !json[QString("egressBytesTransferred")].isNull() && m_egress_bytes_transferred_isValid;

    m_egress_packets_transferred_isValid = ::OpenAPI::fromJsonValue(m_egress_packets_transferred, json[QString("egressPacketsTransferred")]);
    m_egress_packets_transferred_isSet = !json[QString("egressPacketsTransferred")].isNull() && m_egress_packets_transferred_isValid;

    m_ingress_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_ingress_bytes_transferred, json[QString("ingressBytesTransferred")]);
    m_ingress_bytes_transferred_isSet = !json[QString("ingressBytesTransferred")].isNull() && m_ingress_bytes_transferred_isValid;

    m_ingress_packets_transferred_isValid = ::OpenAPI::fromJsonValue(m_ingress_packets_transferred, json[QString("ingressPacketsTransferred")]);
    m_ingress_packets_transferred_isSet = !json[QString("ingressPacketsTransferred")].isNull() && m_ingress_packets_transferred_isValid;

    m_max_bandwidth_isValid = ::OpenAPI::fromJsonValue(m_max_bandwidth, json[QString("maxBandwidth")]);
    m_max_bandwidth_isSet = !json[QString("maxBandwidth")].isNull() && m_max_bandwidth_isValid;

    m_max_packets_per_second_isValid = ::OpenAPI::fromJsonValue(m_max_packets_per_second, json[QString("maxPacketsPerSecond")]);
    m_max_packets_per_second_isSet = !json[QString("maxPacketsPerSecond")].isNull() && m_max_packets_per_second_isValid;

    m_private_ip_address_isValid = ::OpenAPI::fromJsonValue(m_private_ip_address, json[QString("privateIpAddress")]);
    m_private_ip_address_isSet = !json[QString("privateIpAddress")].isNull() && m_private_ip_address_isValid;

    m_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address, json[QString("publicIpAddress")]);
    m_public_ip_address_isSet = !json[QString("publicIpAddress")].isNull() && m_public_ip_address_isValid;

    m_vpn_connection_duration_isValid = ::OpenAPI::fromJsonValue(m_vpn_connection_duration, json[QString("vpnConnectionDuration")]);
    m_vpn_connection_duration_isSet = !json[QString("vpnConnectionDuration")].isNull() && m_vpn_connection_duration_isValid;

    m_vpn_connection_id_isValid = ::OpenAPI::fromJsonValue(m_vpn_connection_id, json[QString("vpnConnectionId")]);
    m_vpn_connection_id_isSet = !json[QString("vpnConnectionId")].isNull() && m_vpn_connection_id_isValid;

    m_vpn_connection_time_isValid = ::OpenAPI::fromJsonValue(m_vpn_connection_time, json[QString("vpnConnectionTime")]);
    m_vpn_connection_time_isSet = !json[QString("vpnConnectionTime")].isNull() && m_vpn_connection_time_isValid;

    m_vpn_user_name_isValid = ::OpenAPI::fromJsonValue(m_vpn_user_name, json[QString("vpnUserName")]);
    m_vpn_user_name_isSet = !json[QString("vpnUserName")].isNull() && m_vpn_user_name_isValid;
}

QString OAIVpnClientConnectionHealthDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnClientConnectionHealthDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_egress_bytes_transferred_isSet) {
        obj.insert(QString("egressBytesTransferred"), ::OpenAPI::toJsonValue(m_egress_bytes_transferred));
    }
    if (m_egress_packets_transferred_isSet) {
        obj.insert(QString("egressPacketsTransferred"), ::OpenAPI::toJsonValue(m_egress_packets_transferred));
    }
    if (m_ingress_bytes_transferred_isSet) {
        obj.insert(QString("ingressBytesTransferred"), ::OpenAPI::toJsonValue(m_ingress_bytes_transferred));
    }
    if (m_ingress_packets_transferred_isSet) {
        obj.insert(QString("ingressPacketsTransferred"), ::OpenAPI::toJsonValue(m_ingress_packets_transferred));
    }
    if (m_max_bandwidth_isSet) {
        obj.insert(QString("maxBandwidth"), ::OpenAPI::toJsonValue(m_max_bandwidth));
    }
    if (m_max_packets_per_second_isSet) {
        obj.insert(QString("maxPacketsPerSecond"), ::OpenAPI::toJsonValue(m_max_packets_per_second));
    }
    if (m_private_ip_address_isSet) {
        obj.insert(QString("privateIpAddress"), ::OpenAPI::toJsonValue(m_private_ip_address));
    }
    if (m_public_ip_address_isSet) {
        obj.insert(QString("publicIpAddress"), ::OpenAPI::toJsonValue(m_public_ip_address));
    }
    if (m_vpn_connection_duration_isSet) {
        obj.insert(QString("vpnConnectionDuration"), ::OpenAPI::toJsonValue(m_vpn_connection_duration));
    }
    if (m_vpn_connection_id_isSet) {
        obj.insert(QString("vpnConnectionId"), ::OpenAPI::toJsonValue(m_vpn_connection_id));
    }
    if (m_vpn_connection_time_isSet) {
        obj.insert(QString("vpnConnectionTime"), ::OpenAPI::toJsonValue(m_vpn_connection_time));
    }
    if (m_vpn_user_name_isSet) {
        obj.insert(QString("vpnUserName"), ::OpenAPI::toJsonValue(m_vpn_user_name));
    }
    return obj;
}

qint64 OAIVpnClientConnectionHealthDetail::getEgressBytesTransferred() const {
    return m_egress_bytes_transferred;
}
void OAIVpnClientConnectionHealthDetail::setEgressBytesTransferred(const qint64 &egress_bytes_transferred) {
    m_egress_bytes_transferred = egress_bytes_transferred;
    m_egress_bytes_transferred_isSet = true;
}

bool OAIVpnClientConnectionHealthDetail::is_egress_bytes_transferred_Set() const{
    return m_egress_bytes_transferred_isSet;
}

bool OAIVpnClientConnectionHealthDetail::is_egress_bytes_transferred_Valid() const{
    return m_egress_bytes_transferred_isValid;
}

qint64 OAIVpnClientConnectionHealthDetail::getEgressPacketsTransferred() const {
    return m_egress_packets_transferred;
}
void OAIVpnClientConnectionHealthDetail::setEgressPacketsTransferred(const qint64 &egress_packets_transferred) {
    m_egress_packets_transferred = egress_packets_transferred;
    m_egress_packets_transferred_isSet = true;
}

bool OAIVpnClientConnectionHealthDetail::is_egress_packets_transferred_Set() const{
    return m_egress_packets_transferred_isSet;
}

bool OAIVpnClientConnectionHealthDetail::is_egress_packets_transferred_Valid() const{
    return m_egress_packets_transferred_isValid;
}

qint64 OAIVpnClientConnectionHealthDetail::getIngressBytesTransferred() const {
    return m_ingress_bytes_transferred;
}
void OAIVpnClientConnectionHealthDetail::setIngressBytesTransferred(const qint64 &ingress_bytes_transferred) {
    m_ingress_bytes_transferred = ingress_bytes_transferred;
    m_ingress_bytes_transferred_isSet = true;
}

bool OAIVpnClientConnectionHealthDetail::is_ingress_bytes_transferred_Set() const{
    return m_ingress_bytes_transferred_isSet;
}

bool OAIVpnClientConnectionHealthDetail::is_ingress_bytes_transferred_Valid() const{
    return m_ingress_bytes_transferred_isValid;
}

qint64 OAIVpnClientConnectionHealthDetail::getIngressPacketsTransferred() const {
    return m_ingress_packets_transferred;
}
void OAIVpnClientConnectionHealthDetail::setIngressPacketsTransferred(const qint64 &ingress_packets_transferred) {
    m_ingress_packets_transferred = ingress_packets_transferred;
    m_ingress_packets_transferred_isSet = true;
}

bool OAIVpnClientConnectionHealthDetail::is_ingress_packets_transferred_Set() const{
    return m_ingress_packets_transferred_isSet;
}

bool OAIVpnClientConnectionHealthDetail::is_ingress_packets_transferred_Valid() const{
    return m_ingress_packets_transferred_isValid;
}

qint64 OAIVpnClientConnectionHealthDetail::getMaxBandwidth() const {
    return m_max_bandwidth;
}
void OAIVpnClientConnectionHealthDetail::setMaxBandwidth(const qint64 &max_bandwidth) {
    m_max_bandwidth = max_bandwidth;
    m_max_bandwidth_isSet = true;
}

bool OAIVpnClientConnectionHealthDetail::is_max_bandwidth_Set() const{
    return m_max_bandwidth_isSet;
}

bool OAIVpnClientConnectionHealthDetail::is_max_bandwidth_Valid() const{
    return m_max_bandwidth_isValid;
}

qint64 OAIVpnClientConnectionHealthDetail::getMaxPacketsPerSecond() const {
    return m_max_packets_per_second;
}
void OAIVpnClientConnectionHealthDetail::setMaxPacketsPerSecond(const qint64 &max_packets_per_second) {
    m_max_packets_per_second = max_packets_per_second;
    m_max_packets_per_second_isSet = true;
}

bool OAIVpnClientConnectionHealthDetail::is_max_packets_per_second_Set() const{
    return m_max_packets_per_second_isSet;
}

bool OAIVpnClientConnectionHealthDetail::is_max_packets_per_second_Valid() const{
    return m_max_packets_per_second_isValid;
}

QString OAIVpnClientConnectionHealthDetail::getPrivateIpAddress() const {
    return m_private_ip_address;
}
void OAIVpnClientConnectionHealthDetail::setPrivateIpAddress(const QString &private_ip_address) {
    m_private_ip_address = private_ip_address;
    m_private_ip_address_isSet = true;
}

bool OAIVpnClientConnectionHealthDetail::is_private_ip_address_Set() const{
    return m_private_ip_address_isSet;
}

bool OAIVpnClientConnectionHealthDetail::is_private_ip_address_Valid() const{
    return m_private_ip_address_isValid;
}

QString OAIVpnClientConnectionHealthDetail::getPublicIpAddress() const {
    return m_public_ip_address;
}
void OAIVpnClientConnectionHealthDetail::setPublicIpAddress(const QString &public_ip_address) {
    m_public_ip_address = public_ip_address;
    m_public_ip_address_isSet = true;
}

bool OAIVpnClientConnectionHealthDetail::is_public_ip_address_Set() const{
    return m_public_ip_address_isSet;
}

bool OAIVpnClientConnectionHealthDetail::is_public_ip_address_Valid() const{
    return m_public_ip_address_isValid;
}

qint64 OAIVpnClientConnectionHealthDetail::getVpnConnectionDuration() const {
    return m_vpn_connection_duration;
}
void OAIVpnClientConnectionHealthDetail::setVpnConnectionDuration(const qint64 &vpn_connection_duration) {
    m_vpn_connection_duration = vpn_connection_duration;
    m_vpn_connection_duration_isSet = true;
}

bool OAIVpnClientConnectionHealthDetail::is_vpn_connection_duration_Set() const{
    return m_vpn_connection_duration_isSet;
}

bool OAIVpnClientConnectionHealthDetail::is_vpn_connection_duration_Valid() const{
    return m_vpn_connection_duration_isValid;
}

QString OAIVpnClientConnectionHealthDetail::getVpnConnectionId() const {
    return m_vpn_connection_id;
}
void OAIVpnClientConnectionHealthDetail::setVpnConnectionId(const QString &vpn_connection_id) {
    m_vpn_connection_id = vpn_connection_id;
    m_vpn_connection_id_isSet = true;
}

bool OAIVpnClientConnectionHealthDetail::is_vpn_connection_id_Set() const{
    return m_vpn_connection_id_isSet;
}

bool OAIVpnClientConnectionHealthDetail::is_vpn_connection_id_Valid() const{
    return m_vpn_connection_id_isValid;
}

QString OAIVpnClientConnectionHealthDetail::getVpnConnectionTime() const {
    return m_vpn_connection_time;
}
void OAIVpnClientConnectionHealthDetail::setVpnConnectionTime(const QString &vpn_connection_time) {
    m_vpn_connection_time = vpn_connection_time;
    m_vpn_connection_time_isSet = true;
}

bool OAIVpnClientConnectionHealthDetail::is_vpn_connection_time_Set() const{
    return m_vpn_connection_time_isSet;
}

bool OAIVpnClientConnectionHealthDetail::is_vpn_connection_time_Valid() const{
    return m_vpn_connection_time_isValid;
}

QString OAIVpnClientConnectionHealthDetail::getVpnUserName() const {
    return m_vpn_user_name;
}
void OAIVpnClientConnectionHealthDetail::setVpnUserName(const QString &vpn_user_name) {
    m_vpn_user_name = vpn_user_name;
    m_vpn_user_name_isSet = true;
}

bool OAIVpnClientConnectionHealthDetail::is_vpn_user_name_Set() const{
    return m_vpn_user_name_isSet;
}

bool OAIVpnClientConnectionHealthDetail::is_vpn_user_name_Valid() const{
    return m_vpn_user_name_isValid;
}

bool OAIVpnClientConnectionHealthDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_egress_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_egress_packets_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_packets_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bandwidth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_packets_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_connection_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_connection_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnClientConnectionHealthDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
