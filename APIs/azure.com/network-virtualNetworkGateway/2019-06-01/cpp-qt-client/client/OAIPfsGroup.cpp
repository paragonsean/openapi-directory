/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPfsGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPfsGroup::OAIPfsGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPfsGroup::OAIPfsGroup() {
    this->initializeModel();
}

OAIPfsGroup::~OAIPfsGroup() {}

void OAIPfsGroup::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPfsGroup::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPfsGroup::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPfsGroup::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PFS1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPfsGroup::PFS1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PFS2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPfsGroup::PFS2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PFS2048", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPfsGroup::PFS2048;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ECP256", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPfsGroup::ECP256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ECP384", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPfsGroup::ECP384;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PFS24", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPfsGroup::PFS24;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PFS14", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPfsGroup::PFS14;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PFSMM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPfsGroup::PFSMM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPfsGroup::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPfsGroup::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPfsGroup::NONE:
            val = "None";
            break;
        case eOAIPfsGroup::PFS1:
            val = "PFS1";
            break;
        case eOAIPfsGroup::PFS2:
            val = "PFS2";
            break;
        case eOAIPfsGroup::PFS2048:
            val = "PFS2048";
            break;
        case eOAIPfsGroup::ECP256:
            val = "ECP256";
            break;
        case eOAIPfsGroup::ECP384:
            val = "ECP384";
            break;
        case eOAIPfsGroup::PFS24:
            val = "PFS24";
            break;
        case eOAIPfsGroup::PFS14:
            val = "PFS14";
            break;
        case eOAIPfsGroup::PFSMM:
            val = "PFSMM";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPfsGroup::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPfsGroup::eOAIPfsGroup OAIPfsGroup::getValue() const {
    return m_value;
}

void OAIPfsGroup::setValue(const OAIPfsGroup::eOAIPfsGroup& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPfsGroup::isSet() const {
    
    return m_value_isSet;
}

bool OAIPfsGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
