/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnDeviceScriptParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnDeviceScriptParameters::OAIVpnDeviceScriptParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnDeviceScriptParameters::OAIVpnDeviceScriptParameters() {
    this->initializeModel();
}

OAIVpnDeviceScriptParameters::~OAIVpnDeviceScriptParameters() {}

void OAIVpnDeviceScriptParameters::initializeModel() {

    m_device_family_isSet = false;
    m_device_family_isValid = false;

    m_firmware_version_isSet = false;
    m_firmware_version_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;
}

void OAIVpnDeviceScriptParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnDeviceScriptParameters::fromJsonObject(QJsonObject json) {

    m_device_family_isValid = ::OpenAPI::fromJsonValue(m_device_family, json[QString("deviceFamily")]);
    m_device_family_isSet = !json[QString("deviceFamily")].isNull() && m_device_family_isValid;

    m_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_firmware_version, json[QString("firmwareVersion")]);
    m_firmware_version_isSet = !json[QString("firmwareVersion")].isNull() && m_firmware_version_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;
}

QString OAIVpnDeviceScriptParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnDeviceScriptParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_device_family_isSet) {
        obj.insert(QString("deviceFamily"), ::OpenAPI::toJsonValue(m_device_family));
    }
    if (m_firmware_version_isSet) {
        obj.insert(QString("firmwareVersion"), ::OpenAPI::toJsonValue(m_firmware_version));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    return obj;
}

QString OAIVpnDeviceScriptParameters::getDeviceFamily() const {
    return m_device_family;
}
void OAIVpnDeviceScriptParameters::setDeviceFamily(const QString &device_family) {
    m_device_family = device_family;
    m_device_family_isSet = true;
}

bool OAIVpnDeviceScriptParameters::is_device_family_Set() const{
    return m_device_family_isSet;
}

bool OAIVpnDeviceScriptParameters::is_device_family_Valid() const{
    return m_device_family_isValid;
}

QString OAIVpnDeviceScriptParameters::getFirmwareVersion() const {
    return m_firmware_version;
}
void OAIVpnDeviceScriptParameters::setFirmwareVersion(const QString &firmware_version) {
    m_firmware_version = firmware_version;
    m_firmware_version_isSet = true;
}

bool OAIVpnDeviceScriptParameters::is_firmware_version_Set() const{
    return m_firmware_version_isSet;
}

bool OAIVpnDeviceScriptParameters::is_firmware_version_Valid() const{
    return m_firmware_version_isValid;
}

QString OAIVpnDeviceScriptParameters::getVendor() const {
    return m_vendor;
}
void OAIVpnDeviceScriptParameters::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIVpnDeviceScriptParameters::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIVpnDeviceScriptParameters::is_vendor_Valid() const{
    return m_vendor_isValid;
}

bool OAIVpnDeviceScriptParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnDeviceScriptParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
