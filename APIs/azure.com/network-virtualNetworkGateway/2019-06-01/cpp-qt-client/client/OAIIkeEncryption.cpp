/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIkeEncryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIkeEncryption::OAIIkeEncryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIkeEncryption::OAIIkeEncryption() {
    this->initializeModel();
}

OAIIkeEncryption::~OAIIkeEncryption() {}

void OAIIkeEncryption::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIIkeEncryption::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIIkeEncryption::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIkeEncryption::DES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DES3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIkeEncryption::DES3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AES128", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIkeEncryption::AES128;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AES192", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIkeEncryption::AES192;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AES256", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIkeEncryption::AES256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GCMAES256", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIkeEncryption::GCMAES256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GCMAES128", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIkeEncryption::GCMAES128;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIIkeEncryption::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIIkeEncryption::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIIkeEncryption::DES:
            val = "DES";
            break;
        case eOAIIkeEncryption::DES3:
            val = "DES3";
            break;
        case eOAIIkeEncryption::AES128:
            val = "AES128";
            break;
        case eOAIIkeEncryption::AES192:
            val = "AES192";
            break;
        case eOAIIkeEncryption::AES256:
            val = "AES256";
            break;
        case eOAIIkeEncryption::GCMAES256:
            val = "GCMAES256";
            break;
        case eOAIIkeEncryption::GCMAES128:
            val = "GCMAES128";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIIkeEncryption::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIIkeEncryption::eOAIIkeEncryption OAIIkeEncryption::getValue() const {
    return m_value;
}

void OAIIkeEncryption::setValue(const OAIIkeEncryption::eOAIIkeEncryption& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIIkeEncryption::isSet() const {
    
    return m_value_isSet;
}

bool OAIIkeEncryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
