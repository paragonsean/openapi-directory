/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkGatewayConnectionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkGatewayConnectionType::OAIVirtualNetworkGatewayConnectionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkGatewayConnectionType::OAIVirtualNetworkGatewayConnectionType() {
    this->initializeModel();
}

OAIVirtualNetworkGatewayConnectionType::~OAIVirtualNetworkGatewayConnectionType() {}

void OAIVirtualNetworkGatewayConnectionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIVirtualNetworkGatewayConnectionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIVirtualNetworkGatewayConnectionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("IPsec", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVirtualNetworkGatewayConnectionType::IPSEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Vnet2Vnet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVirtualNetworkGatewayConnectionType::VNET2VNET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExpressRoute", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVirtualNetworkGatewayConnectionType::EXPRESSROUTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VPNClient", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVirtualNetworkGatewayConnectionType::VPNCLIENT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIVirtualNetworkGatewayConnectionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIVirtualNetworkGatewayConnectionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIVirtualNetworkGatewayConnectionType::IPSEC:
            val = "IPsec";
            break;
        case eOAIVirtualNetworkGatewayConnectionType::VNET2VNET:
            val = "Vnet2Vnet";
            break;
        case eOAIVirtualNetworkGatewayConnectionType::EXPRESSROUTE:
            val = "ExpressRoute";
            break;
        case eOAIVirtualNetworkGatewayConnectionType::VPNCLIENT:
            val = "VPNClient";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIVirtualNetworkGatewayConnectionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIVirtualNetworkGatewayConnectionType::eOAIVirtualNetworkGatewayConnectionType OAIVirtualNetworkGatewayConnectionType::getValue() const {
    return m_value;
}

void OAIVirtualNetworkGatewayConnectionType::setValue(const OAIVirtualNetworkGatewayConnectionType::eOAIVirtualNetworkGatewayConnectionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIVirtualNetworkGatewayConnectionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIVirtualNetworkGatewayConnectionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
