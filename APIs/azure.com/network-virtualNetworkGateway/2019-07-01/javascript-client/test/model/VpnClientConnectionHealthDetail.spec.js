/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetworkManagementClient);
  }
}(this, function(expect, NetworkManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VpnClientConnectionHealthDetail', function() {
    it('should create an instance of VpnClientConnectionHealthDetail', function() {
      // uncomment below and update the code to test VpnClientConnectionHealthDetail
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be.a(NetworkManagementClient.VpnClientConnectionHealthDetail);
    });

    it('should have the property egressBytesTransferred (base name: "egressBytesTransferred")', function() {
      // uncomment below and update the code to test the property egressBytesTransferred
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be();
    });

    it('should have the property egressPacketsTransferred (base name: "egressPacketsTransferred")', function() {
      // uncomment below and update the code to test the property egressPacketsTransferred
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be();
    });

    it('should have the property ingressBytesTransferred (base name: "ingressBytesTransferred")', function() {
      // uncomment below and update the code to test the property ingressBytesTransferred
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be();
    });

    it('should have the property ingressPacketsTransferred (base name: "ingressPacketsTransferred")', function() {
      // uncomment below and update the code to test the property ingressPacketsTransferred
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be();
    });

    it('should have the property maxBandwidth (base name: "maxBandwidth")', function() {
      // uncomment below and update the code to test the property maxBandwidth
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be();
    });

    it('should have the property maxPacketsPerSecond (base name: "maxPacketsPerSecond")', function() {
      // uncomment below and update the code to test the property maxPacketsPerSecond
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be();
    });

    it('should have the property privateIpAddress (base name: "privateIpAddress")', function() {
      // uncomment below and update the code to test the property privateIpAddress
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be();
    });

    it('should have the property publicIpAddress (base name: "publicIpAddress")', function() {
      // uncomment below and update the code to test the property publicIpAddress
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be();
    });

    it('should have the property vpnConnectionDuration (base name: "vpnConnectionDuration")', function() {
      // uncomment below and update the code to test the property vpnConnectionDuration
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be();
    });

    it('should have the property vpnConnectionId (base name: "vpnConnectionId")', function() {
      // uncomment below and update the code to test the property vpnConnectionId
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be();
    });

    it('should have the property vpnConnectionTime (base name: "vpnConnectionTime")', function() {
      // uncomment below and update the code to test the property vpnConnectionTime
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be();
    });

    it('should have the property vpnUserName (base name: "vpnUserName")', function() {
      // uncomment below and update the code to test the property vpnUserName
      //var instance = new NetworkManagementClient.VpnClientConnectionHealthDetail();
      //expect(instance).to.be();
    });

  });

}));
