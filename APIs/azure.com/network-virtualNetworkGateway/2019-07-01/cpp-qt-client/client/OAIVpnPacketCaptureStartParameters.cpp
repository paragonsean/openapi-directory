/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnPacketCaptureStartParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnPacketCaptureStartParameters::OAIVpnPacketCaptureStartParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnPacketCaptureStartParameters::OAIVpnPacketCaptureStartParameters() {
    this->initializeModel();
}

OAIVpnPacketCaptureStartParameters::~OAIVpnPacketCaptureStartParameters() {}

void OAIVpnPacketCaptureStartParameters::initializeModel() {

    m_filter_data_isSet = false;
    m_filter_data_isValid = false;
}

void OAIVpnPacketCaptureStartParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnPacketCaptureStartParameters::fromJsonObject(QJsonObject json) {

    m_filter_data_isValid = ::OpenAPI::fromJsonValue(m_filter_data, json[QString("filterData")]);
    m_filter_data_isSet = !json[QString("filterData")].isNull() && m_filter_data_isValid;
}

QString OAIVpnPacketCaptureStartParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnPacketCaptureStartParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_data_isSet) {
        obj.insert(QString("filterData"), ::OpenAPI::toJsonValue(m_filter_data));
    }
    return obj;
}

QString OAIVpnPacketCaptureStartParameters::getFilterData() const {
    return m_filter_data;
}
void OAIVpnPacketCaptureStartParameters::setFilterData(const QString &filter_data) {
    m_filter_data = filter_data;
    m_filter_data_isSet = true;
}

bool OAIVpnPacketCaptureStartParameters::is_filter_data_Set() const{
    return m_filter_data_isSet;
}

bool OAIVpnPacketCaptureStartParameters::is_filter_data_Valid() const{
    return m_filter_data_isValid;
}

bool OAIVpnPacketCaptureStartParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnPacketCaptureStartParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
