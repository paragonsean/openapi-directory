/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualNetworkGatewaysApi_H
#define OAI_OAIVirtualNetworkGatewaysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBgpPeerStatusListResult.h"
#include "OAIGatewayRouteListResult.h"
#include "OAIVirtualNetworkGateway.h"
#include "OAIVirtualNetworkGatewayConnections_StartPacketCapture_default_response.h"
#include "OAIVirtualNetworkGatewayConnections_UpdateTags_request.h"
#include "OAIVirtualNetworkGatewayListConnectionsResult.h"
#include "OAIVirtualNetworkGatewayListResult.h"
#include "OAIVpnClientConnectionHealthDetailListResult.h"
#include "OAIVpnClientIPsecParameters.h"
#include "OAIVpnClientParameters.h"
#include "OAIVpnDeviceScriptParameters.h"
#include "OAIVpnPacketCaptureStartParameters.h"
#include "OAIVpnPacketCaptureStopParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualNetworkGatewaysApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualNetworkGatewaysApi(const int timeOut = 0);
    ~OAIVirtualNetworkGatewaysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualNetworkGateway [required]
    */
    virtual void virtualNetworkGatewaysCreateOrUpdate(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id, const OAIVirtualNetworkGateway &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewaysDelete(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVpnClientParameters [required]
    */
    virtual void virtualNetworkGatewaysGenerateVpnProfile(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id, const OAIVpnClientParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVpnClientParameters [required]
    */
    virtual void virtualNetworkGatewaysGeneratevpnclientpackage(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id, const OAIVpnClientParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewaysGet(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  peer QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewaysGetAdvertisedRoutes(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &peer, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  peer QString [optional]
    */
    virtual void virtualNetworkGatewaysGetBgpPeerStatus(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &peer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewaysGetLearnedRoutes(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewaysGetVpnProfilePackageUrl(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewaysGetVpnclientConnectionHealth(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewaysGetVpnclientIpsecParameters(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewaysList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewaysListConnections(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  gateway_vip QString [optional]
    */
    virtual void virtualNetworkGatewaysReset(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &gateway_vip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewaysResetVpnClientSharedKey(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  vpnclient_ipsec_params OAIVpnClientIPsecParameters [required]
    */
    virtual void virtualNetworkGatewaysSetVpnclientIpsecParameters(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id, const OAIVpnClientIPsecParameters &vpnclient_ipsec_params);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVpnPacketCaptureStartParameters [optional]
    */
    virtual void virtualNetworkGatewaysStartPacketCapture(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIVpnPacketCaptureStartParameters> &parameters = ::OpenAPI::OptionalParam<OAIVpnPacketCaptureStartParameters>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVpnPacketCaptureStopParameters [required]
    */
    virtual void virtualNetworkGatewaysStopPacketCapture(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id, const OAIVpnPacketCaptureStopParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewaysSupportedVpnDevices(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualNetworkGatewayConnections_UpdateTags_request [required]
    */
    virtual void virtualNetworkGatewaysUpdateTags(const QString &resource_group_name, const QString &virtual_network_gateway_name, const QString &api_version, const QString &subscription_id, const OAIVirtualNetworkGatewayConnections_UpdateTags_request &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVpnDeviceScriptParameters [required]
    */
    virtual void virtualNetworkGatewaysVpnDeviceConfigurationScript(const QString &resource_group_name, const QString &virtual_network_gateway_connection_name, const QString &api_version, const QString &subscription_id, const OAIVpnDeviceScriptParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualNetworkGatewaysCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysGenerateVpnProfileCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysGeneratevpnclientpackageCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysGetCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysGetAdvertisedRoutesCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysGetBgpPeerStatusCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysGetLearnedRoutesCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysGetVpnProfilePackageUrlCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysGetVpnclientConnectionHealthCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysGetVpnclientIpsecParametersCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysListCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysListConnectionsCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysResetCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysResetVpnClientSharedKeyCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysSetVpnclientIpsecParametersCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysStartPacketCaptureCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysStopPacketCaptureCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysSupportedVpnDevicesCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysUpdateTagsCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysVpnDeviceConfigurationScriptCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualNetworkGatewaysCreateOrUpdateSignal(OAIVirtualNetworkGateway summary);
    void virtualNetworkGatewaysDeleteSignal();
    void virtualNetworkGatewaysGenerateVpnProfileSignal(QString summary);
    void virtualNetworkGatewaysGeneratevpnclientpackageSignal(QString summary);
    void virtualNetworkGatewaysGetSignal(OAIVirtualNetworkGateway summary);
    void virtualNetworkGatewaysGetAdvertisedRoutesSignal(OAIGatewayRouteListResult summary);
    void virtualNetworkGatewaysGetBgpPeerStatusSignal(OAIBgpPeerStatusListResult summary);
    void virtualNetworkGatewaysGetLearnedRoutesSignal(OAIGatewayRouteListResult summary);
    void virtualNetworkGatewaysGetVpnProfilePackageUrlSignal(QString summary);
    void virtualNetworkGatewaysGetVpnclientConnectionHealthSignal(OAIVpnClientConnectionHealthDetailListResult summary);
    void virtualNetworkGatewaysGetVpnclientIpsecParametersSignal(OAIVpnClientIPsecParameters summary);
    void virtualNetworkGatewaysListSignal(OAIVirtualNetworkGatewayListResult summary);
    void virtualNetworkGatewaysListConnectionsSignal(OAIVirtualNetworkGatewayListConnectionsResult summary);
    void virtualNetworkGatewaysResetSignal(OAIVirtualNetworkGateway summary);
    void virtualNetworkGatewaysResetVpnClientSharedKeySignal();
    void virtualNetworkGatewaysSetVpnclientIpsecParametersSignal(OAIVpnClientIPsecParameters summary);
    void virtualNetworkGatewaysStartPacketCaptureSignal(QString summary);
    void virtualNetworkGatewaysStopPacketCaptureSignal(QString summary);
    void virtualNetworkGatewaysSupportedVpnDevicesSignal(QString summary);
    void virtualNetworkGatewaysUpdateTagsSignal(OAIVirtualNetworkGateway summary);
    void virtualNetworkGatewaysVpnDeviceConfigurationScriptSignal(QString summary);


    void virtualNetworkGatewaysCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkGateway summary);
    void virtualNetworkGatewaysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysGenerateVpnProfileSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void virtualNetworkGatewaysGeneratevpnclientpackageSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void virtualNetworkGatewaysGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkGateway summary);
    void virtualNetworkGatewaysGetAdvertisedRoutesSignalFull(OAIHttpRequestWorker *worker, OAIGatewayRouteListResult summary);
    void virtualNetworkGatewaysGetBgpPeerStatusSignalFull(OAIHttpRequestWorker *worker, OAIBgpPeerStatusListResult summary);
    void virtualNetworkGatewaysGetLearnedRoutesSignalFull(OAIHttpRequestWorker *worker, OAIGatewayRouteListResult summary);
    void virtualNetworkGatewaysGetVpnProfilePackageUrlSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void virtualNetworkGatewaysGetVpnclientConnectionHealthSignalFull(OAIHttpRequestWorker *worker, OAIVpnClientConnectionHealthDetailListResult summary);
    void virtualNetworkGatewaysGetVpnclientIpsecParametersSignalFull(OAIHttpRequestWorker *worker, OAIVpnClientIPsecParameters summary);
    void virtualNetworkGatewaysListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkGatewayListResult summary);
    void virtualNetworkGatewaysListConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkGatewayListConnectionsResult summary);
    void virtualNetworkGatewaysResetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkGateway summary);
    void virtualNetworkGatewaysResetVpnClientSharedKeySignalFull(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewaysSetVpnclientIpsecParametersSignalFull(OAIHttpRequestWorker *worker, OAIVpnClientIPsecParameters summary);
    void virtualNetworkGatewaysStartPacketCaptureSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void virtualNetworkGatewaysStopPacketCaptureSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void virtualNetworkGatewaysSupportedVpnDevicesSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void virtualNetworkGatewaysUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkGateway summary);
    void virtualNetworkGatewaysVpnDeviceConfigurationScriptSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysCreateOrUpdateSignalError() instead")
    void virtualNetworkGatewaysCreateOrUpdateSignalE(OAIVirtualNetworkGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysCreateOrUpdateSignalError(OAIVirtualNetworkGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysDeleteSignalError() instead")
    void virtualNetworkGatewaysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGenerateVpnProfileSignalError() instead")
    void virtualNetworkGatewaysGenerateVpnProfileSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGenerateVpnProfileSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGeneratevpnclientpackageSignalError() instead")
    void virtualNetworkGatewaysGeneratevpnclientpackageSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGeneratevpnclientpackageSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetSignalError() instead")
    void virtualNetworkGatewaysGetSignalE(OAIVirtualNetworkGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetSignalError(OAIVirtualNetworkGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetAdvertisedRoutesSignalError() instead")
    void virtualNetworkGatewaysGetAdvertisedRoutesSignalE(OAIGatewayRouteListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetAdvertisedRoutesSignalError(OAIGatewayRouteListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetBgpPeerStatusSignalError() instead")
    void virtualNetworkGatewaysGetBgpPeerStatusSignalE(OAIBgpPeerStatusListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetBgpPeerStatusSignalError(OAIBgpPeerStatusListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetLearnedRoutesSignalError() instead")
    void virtualNetworkGatewaysGetLearnedRoutesSignalE(OAIGatewayRouteListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetLearnedRoutesSignalError(OAIGatewayRouteListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetVpnProfilePackageUrlSignalError() instead")
    void virtualNetworkGatewaysGetVpnProfilePackageUrlSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetVpnProfilePackageUrlSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetVpnclientConnectionHealthSignalError() instead")
    void virtualNetworkGatewaysGetVpnclientConnectionHealthSignalE(OAIVpnClientConnectionHealthDetailListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetVpnclientConnectionHealthSignalError(OAIVpnClientConnectionHealthDetailListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetVpnclientIpsecParametersSignalError() instead")
    void virtualNetworkGatewaysGetVpnclientIpsecParametersSignalE(OAIVpnClientIPsecParameters summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetVpnclientIpsecParametersSignalError(OAIVpnClientIPsecParameters summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysListSignalError() instead")
    void virtualNetworkGatewaysListSignalE(OAIVirtualNetworkGatewayListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysListSignalError(OAIVirtualNetworkGatewayListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysListConnectionsSignalError() instead")
    void virtualNetworkGatewaysListConnectionsSignalE(OAIVirtualNetworkGatewayListConnectionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysListConnectionsSignalError(OAIVirtualNetworkGatewayListConnectionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysResetSignalError() instead")
    void virtualNetworkGatewaysResetSignalE(OAIVirtualNetworkGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysResetSignalError(OAIVirtualNetworkGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysResetVpnClientSharedKeySignalError() instead")
    void virtualNetworkGatewaysResetVpnClientSharedKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysResetVpnClientSharedKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysSetVpnclientIpsecParametersSignalError() instead")
    void virtualNetworkGatewaysSetVpnclientIpsecParametersSignalE(OAIVpnClientIPsecParameters summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysSetVpnclientIpsecParametersSignalError(OAIVpnClientIPsecParameters summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysStartPacketCaptureSignalError() instead")
    void virtualNetworkGatewaysStartPacketCaptureSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysStartPacketCaptureSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysStopPacketCaptureSignalError() instead")
    void virtualNetworkGatewaysStopPacketCaptureSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysStopPacketCaptureSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysSupportedVpnDevicesSignalError() instead")
    void virtualNetworkGatewaysSupportedVpnDevicesSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysSupportedVpnDevicesSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysUpdateTagsSignalError() instead")
    void virtualNetworkGatewaysUpdateTagsSignalE(OAIVirtualNetworkGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysUpdateTagsSignalError(OAIVirtualNetworkGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysVpnDeviceConfigurationScriptSignalError() instead")
    void virtualNetworkGatewaysVpnDeviceConfigurationScriptSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysVpnDeviceConfigurationScriptSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysCreateOrUpdateSignalErrorFull() instead")
    void virtualNetworkGatewaysCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysDeleteSignalErrorFull() instead")
    void virtualNetworkGatewaysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGenerateVpnProfileSignalErrorFull() instead")
    void virtualNetworkGatewaysGenerateVpnProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGenerateVpnProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGeneratevpnclientpackageSignalErrorFull() instead")
    void virtualNetworkGatewaysGeneratevpnclientpackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGeneratevpnclientpackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetSignalErrorFull() instead")
    void virtualNetworkGatewaysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetAdvertisedRoutesSignalErrorFull() instead")
    void virtualNetworkGatewaysGetAdvertisedRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetAdvertisedRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetBgpPeerStatusSignalErrorFull() instead")
    void virtualNetworkGatewaysGetBgpPeerStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetBgpPeerStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetLearnedRoutesSignalErrorFull() instead")
    void virtualNetworkGatewaysGetLearnedRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetLearnedRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetVpnProfilePackageUrlSignalErrorFull() instead")
    void virtualNetworkGatewaysGetVpnProfilePackageUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetVpnProfilePackageUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetVpnclientConnectionHealthSignalErrorFull() instead")
    void virtualNetworkGatewaysGetVpnclientConnectionHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetVpnclientConnectionHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysGetVpnclientIpsecParametersSignalErrorFull() instead")
    void virtualNetworkGatewaysGetVpnclientIpsecParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysGetVpnclientIpsecParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysListSignalErrorFull() instead")
    void virtualNetworkGatewaysListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysListConnectionsSignalErrorFull() instead")
    void virtualNetworkGatewaysListConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysListConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysResetSignalErrorFull() instead")
    void virtualNetworkGatewaysResetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysResetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysResetVpnClientSharedKeySignalErrorFull() instead")
    void virtualNetworkGatewaysResetVpnClientSharedKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysResetVpnClientSharedKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysSetVpnclientIpsecParametersSignalErrorFull() instead")
    void virtualNetworkGatewaysSetVpnclientIpsecParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysSetVpnclientIpsecParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysStartPacketCaptureSignalErrorFull() instead")
    void virtualNetworkGatewaysStartPacketCaptureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysStartPacketCaptureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysStopPacketCaptureSignalErrorFull() instead")
    void virtualNetworkGatewaysStopPacketCaptureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysStopPacketCaptureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysSupportedVpnDevicesSignalErrorFull() instead")
    void virtualNetworkGatewaysSupportedVpnDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysSupportedVpnDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysUpdateTagsSignalErrorFull() instead")
    void virtualNetworkGatewaysUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewaysVpnDeviceConfigurationScriptSignalErrorFull() instead")
    void virtualNetworkGatewaysVpnDeviceConfigurationScriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewaysVpnDeviceConfigurationScriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
