/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An traffic selector policy for a virtual network gateway connection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:43:36.413229-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrafficSelectorPolicy {
  public static final String SERIALIZED_NAME_LOCAL_ADDRESS_RANGES = "localAddressRanges";
  @SerializedName(SERIALIZED_NAME_LOCAL_ADDRESS_RANGES)
  private List<String> localAddressRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_REMOTE_ADDRESS_RANGES = "remoteAddressRanges";
  @SerializedName(SERIALIZED_NAME_REMOTE_ADDRESS_RANGES)
  private List<String> remoteAddressRanges = new ArrayList<>();

  public TrafficSelectorPolicy() {
  }

  public TrafficSelectorPolicy localAddressRanges(List<String> localAddressRanges) {
    this.localAddressRanges = localAddressRanges;
    return this;
  }

  public TrafficSelectorPolicy addLocalAddressRangesItem(String localAddressRangesItem) {
    if (this.localAddressRanges == null) {
      this.localAddressRanges = new ArrayList<>();
    }
    this.localAddressRanges.add(localAddressRangesItem);
    return this;
  }

  /**
   * A collection of local address spaces in CIDR format
   * @return localAddressRanges
   */
  @javax.annotation.Nonnull
  public List<String> getLocalAddressRanges() {
    return localAddressRanges;
  }

  public void setLocalAddressRanges(List<String> localAddressRanges) {
    this.localAddressRanges = localAddressRanges;
  }


  public TrafficSelectorPolicy remoteAddressRanges(List<String> remoteAddressRanges) {
    this.remoteAddressRanges = remoteAddressRanges;
    return this;
  }

  public TrafficSelectorPolicy addRemoteAddressRangesItem(String remoteAddressRangesItem) {
    if (this.remoteAddressRanges == null) {
      this.remoteAddressRanges = new ArrayList<>();
    }
    this.remoteAddressRanges.add(remoteAddressRangesItem);
    return this;
  }

  /**
   * A collection of remote address spaces in CIDR format
   * @return remoteAddressRanges
   */
  @javax.annotation.Nonnull
  public List<String> getRemoteAddressRanges() {
    return remoteAddressRanges;
  }

  public void setRemoteAddressRanges(List<String> remoteAddressRanges) {
    this.remoteAddressRanges = remoteAddressRanges;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrafficSelectorPolicy trafficSelectorPolicy = (TrafficSelectorPolicy) o;
    return Objects.equals(this.localAddressRanges, trafficSelectorPolicy.localAddressRanges) &&
        Objects.equals(this.remoteAddressRanges, trafficSelectorPolicy.remoteAddressRanges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localAddressRanges, remoteAddressRanges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrafficSelectorPolicy {\n");
    sb.append("    localAddressRanges: ").append(toIndentedString(localAddressRanges)).append("\n");
    sb.append("    remoteAddressRanges: ").append(toIndentedString(remoteAddressRanges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localAddressRanges");
    openapiFields.add("remoteAddressRanges");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("localAddressRanges");
    openapiRequiredFields.add("remoteAddressRanges");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrafficSelectorPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrafficSelectorPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrafficSelectorPolicy is not found in the empty JSON string", TrafficSelectorPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrafficSelectorPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrafficSelectorPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrafficSelectorPolicy.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("localAddressRanges") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("localAddressRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `localAddressRanges` to be an array in the JSON string but got `%s`", jsonObj.get("localAddressRanges").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("remoteAddressRanges") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("remoteAddressRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteAddressRanges` to be an array in the JSON string but got `%s`", jsonObj.get("remoteAddressRanges").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrafficSelectorPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrafficSelectorPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrafficSelectorPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrafficSelectorPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<TrafficSelectorPolicy>() {
           @Override
           public void write(JsonWriter out, TrafficSelectorPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrafficSelectorPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrafficSelectorPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrafficSelectorPolicy
   * @throws IOException if the JSON string is invalid with respect to TrafficSelectorPolicy
   */
  public static TrafficSelectorPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrafficSelectorPolicy.class);
  }

  /**
   * Convert an instance of TrafficSelectorPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

