# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dh_group import DhGroup
from openapi_server.models.ike_encryption import IkeEncryption
from openapi_server.models.ike_integrity import IkeIntegrity
from openapi_server.models.ipsec_encryption import IpsecEncryption
from openapi_server.models.ipsec_integrity import IpsecIntegrity
from openapi_server.models.pfs_group import PfsGroup
from openapi_server import util


class IpsecPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dh_group: DhGroup=None, ike_encryption: IkeEncryption=None, ike_integrity: IkeIntegrity=None, ipsec_encryption: IpsecEncryption=None, ipsec_integrity: IpsecIntegrity=None, pfs_group: PfsGroup=None, sa_data_size_kilobytes: int=None, sa_life_time_seconds: int=None):
        """IpsecPolicy - a model defined in OpenAPI

        :param dh_group: The dh_group of this IpsecPolicy.
        :param ike_encryption: The ike_encryption of this IpsecPolicy.
        :param ike_integrity: The ike_integrity of this IpsecPolicy.
        :param ipsec_encryption: The ipsec_encryption of this IpsecPolicy.
        :param ipsec_integrity: The ipsec_integrity of this IpsecPolicy.
        :param pfs_group: The pfs_group of this IpsecPolicy.
        :param sa_data_size_kilobytes: The sa_data_size_kilobytes of this IpsecPolicy.
        :param sa_life_time_seconds: The sa_life_time_seconds of this IpsecPolicy.
        """
        self.openapi_types = {
            'dh_group': DhGroup,
            'ike_encryption': IkeEncryption,
            'ike_integrity': IkeIntegrity,
            'ipsec_encryption': IpsecEncryption,
            'ipsec_integrity': IpsecIntegrity,
            'pfs_group': PfsGroup,
            'sa_data_size_kilobytes': int,
            'sa_life_time_seconds': int
        }

        self.attribute_map = {
            'dh_group': 'dhGroup',
            'ike_encryption': 'ikeEncryption',
            'ike_integrity': 'ikeIntegrity',
            'ipsec_encryption': 'ipsecEncryption',
            'ipsec_integrity': 'ipsecIntegrity',
            'pfs_group': 'pfsGroup',
            'sa_data_size_kilobytes': 'saDataSizeKilobytes',
            'sa_life_time_seconds': 'saLifeTimeSeconds'
        }

        self._dh_group = dh_group
        self._ike_encryption = ike_encryption
        self._ike_integrity = ike_integrity
        self._ipsec_encryption = ipsec_encryption
        self._ipsec_integrity = ipsec_integrity
        self._pfs_group = pfs_group
        self._sa_data_size_kilobytes = sa_data_size_kilobytes
        self._sa_life_time_seconds = sa_life_time_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpsecPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpsecPolicy of this IpsecPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dh_group(self):
        """Gets the dh_group of this IpsecPolicy.


        :return: The dh_group of this IpsecPolicy.
        :rtype: DhGroup
        """
        return self._dh_group

    @dh_group.setter
    def dh_group(self, dh_group):
        """Sets the dh_group of this IpsecPolicy.


        :param dh_group: The dh_group of this IpsecPolicy.
        :type dh_group: DhGroup
        """
        if dh_group is None:
            raise ValueError("Invalid value for `dh_group`, must not be `None`")

        self._dh_group = dh_group

    @property
    def ike_encryption(self):
        """Gets the ike_encryption of this IpsecPolicy.


        :return: The ike_encryption of this IpsecPolicy.
        :rtype: IkeEncryption
        """
        return self._ike_encryption

    @ike_encryption.setter
    def ike_encryption(self, ike_encryption):
        """Sets the ike_encryption of this IpsecPolicy.


        :param ike_encryption: The ike_encryption of this IpsecPolicy.
        :type ike_encryption: IkeEncryption
        """
        if ike_encryption is None:
            raise ValueError("Invalid value for `ike_encryption`, must not be `None`")

        self._ike_encryption = ike_encryption

    @property
    def ike_integrity(self):
        """Gets the ike_integrity of this IpsecPolicy.


        :return: The ike_integrity of this IpsecPolicy.
        :rtype: IkeIntegrity
        """
        return self._ike_integrity

    @ike_integrity.setter
    def ike_integrity(self, ike_integrity):
        """Sets the ike_integrity of this IpsecPolicy.


        :param ike_integrity: The ike_integrity of this IpsecPolicy.
        :type ike_integrity: IkeIntegrity
        """
        if ike_integrity is None:
            raise ValueError("Invalid value for `ike_integrity`, must not be `None`")

        self._ike_integrity = ike_integrity

    @property
    def ipsec_encryption(self):
        """Gets the ipsec_encryption of this IpsecPolicy.


        :return: The ipsec_encryption of this IpsecPolicy.
        :rtype: IpsecEncryption
        """
        return self._ipsec_encryption

    @ipsec_encryption.setter
    def ipsec_encryption(self, ipsec_encryption):
        """Sets the ipsec_encryption of this IpsecPolicy.


        :param ipsec_encryption: The ipsec_encryption of this IpsecPolicy.
        :type ipsec_encryption: IpsecEncryption
        """
        if ipsec_encryption is None:
            raise ValueError("Invalid value for `ipsec_encryption`, must not be `None`")

        self._ipsec_encryption = ipsec_encryption

    @property
    def ipsec_integrity(self):
        """Gets the ipsec_integrity of this IpsecPolicy.


        :return: The ipsec_integrity of this IpsecPolicy.
        :rtype: IpsecIntegrity
        """
        return self._ipsec_integrity

    @ipsec_integrity.setter
    def ipsec_integrity(self, ipsec_integrity):
        """Sets the ipsec_integrity of this IpsecPolicy.


        :param ipsec_integrity: The ipsec_integrity of this IpsecPolicy.
        :type ipsec_integrity: IpsecIntegrity
        """
        if ipsec_integrity is None:
            raise ValueError("Invalid value for `ipsec_integrity`, must not be `None`")

        self._ipsec_integrity = ipsec_integrity

    @property
    def pfs_group(self):
        """Gets the pfs_group of this IpsecPolicy.


        :return: The pfs_group of this IpsecPolicy.
        :rtype: PfsGroup
        """
        return self._pfs_group

    @pfs_group.setter
    def pfs_group(self, pfs_group):
        """Sets the pfs_group of this IpsecPolicy.


        :param pfs_group: The pfs_group of this IpsecPolicy.
        :type pfs_group: PfsGroup
        """
        if pfs_group is None:
            raise ValueError("Invalid value for `pfs_group`, must not be `None`")

        self._pfs_group = pfs_group

    @property
    def sa_data_size_kilobytes(self):
        """Gets the sa_data_size_kilobytes of this IpsecPolicy.

        The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.

        :return: The sa_data_size_kilobytes of this IpsecPolicy.
        :rtype: int
        """
        return self._sa_data_size_kilobytes

    @sa_data_size_kilobytes.setter
    def sa_data_size_kilobytes(self, sa_data_size_kilobytes):
        """Sets the sa_data_size_kilobytes of this IpsecPolicy.

        The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.

        :param sa_data_size_kilobytes: The sa_data_size_kilobytes of this IpsecPolicy.
        :type sa_data_size_kilobytes: int
        """
        if sa_data_size_kilobytes is None:
            raise ValueError("Invalid value for `sa_data_size_kilobytes`, must not be `None`")

        self._sa_data_size_kilobytes = sa_data_size_kilobytes

    @property
    def sa_life_time_seconds(self):
        """Gets the sa_life_time_seconds of this IpsecPolicy.

        The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.

        :return: The sa_life_time_seconds of this IpsecPolicy.
        :rtype: int
        """
        return self._sa_life_time_seconds

    @sa_life_time_seconds.setter
    def sa_life_time_seconds(self, sa_life_time_seconds):
        """Sets the sa_life_time_seconds of this IpsecPolicy.

        The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.

        :param sa_life_time_seconds: The sa_life_time_seconds of this IpsecPolicy.
        :type sa_life_time_seconds: int
        """
        if sa_life_time_seconds is None:
            raise ValueError("Invalid value for `sa_life_time_seconds`, must not be `None`")

        self._sa_life_time_seconds = sa_life_time_seconds
