# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BgpPeerStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asn: int=None, connected_duration: str=None, local_address: str=None, messages_received: int=None, messages_sent: int=None, neighbor: str=None, routes_received: int=None, state: str=None):
        """BgpPeerStatus - a model defined in OpenAPI

        :param asn: The asn of this BgpPeerStatus.
        :param connected_duration: The connected_duration of this BgpPeerStatus.
        :param local_address: The local_address of this BgpPeerStatus.
        :param messages_received: The messages_received of this BgpPeerStatus.
        :param messages_sent: The messages_sent of this BgpPeerStatus.
        :param neighbor: The neighbor of this BgpPeerStatus.
        :param routes_received: The routes_received of this BgpPeerStatus.
        :param state: The state of this BgpPeerStatus.
        """
        self.openapi_types = {
            'asn': int,
            'connected_duration': str,
            'local_address': str,
            'messages_received': int,
            'messages_sent': int,
            'neighbor': str,
            'routes_received': int,
            'state': str
        }

        self.attribute_map = {
            'asn': 'asn',
            'connected_duration': 'connectedDuration',
            'local_address': 'localAddress',
            'messages_received': 'messagesReceived',
            'messages_sent': 'messagesSent',
            'neighbor': 'neighbor',
            'routes_received': 'routesReceived',
            'state': 'state'
        }

        self._asn = asn
        self._connected_duration = connected_duration
        self._local_address = local_address
        self._messages_received = messages_received
        self._messages_sent = messages_sent
        self._neighbor = neighbor
        self._routes_received = routes_received
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BgpPeerStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BgpPeerStatus of this BgpPeerStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asn(self):
        """Gets the asn of this BgpPeerStatus.

        The autonomous system number of the remote BGP peer.

        :return: The asn of this BgpPeerStatus.
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this BgpPeerStatus.

        The autonomous system number of the remote BGP peer.

        :param asn: The asn of this BgpPeerStatus.
        :type asn: int
        """

        self._asn = asn

    @property
    def connected_duration(self):
        """Gets the connected_duration of this BgpPeerStatus.

        For how long the peering has been up.

        :return: The connected_duration of this BgpPeerStatus.
        :rtype: str
        """
        return self._connected_duration

    @connected_duration.setter
    def connected_duration(self, connected_duration):
        """Sets the connected_duration of this BgpPeerStatus.

        For how long the peering has been up.

        :param connected_duration: The connected_duration of this BgpPeerStatus.
        :type connected_duration: str
        """

        self._connected_duration = connected_duration

    @property
    def local_address(self):
        """Gets the local_address of this BgpPeerStatus.

        The virtual network gateway's local address.

        :return: The local_address of this BgpPeerStatus.
        :rtype: str
        """
        return self._local_address

    @local_address.setter
    def local_address(self, local_address):
        """Sets the local_address of this BgpPeerStatus.

        The virtual network gateway's local address.

        :param local_address: The local_address of this BgpPeerStatus.
        :type local_address: str
        """

        self._local_address = local_address

    @property
    def messages_received(self):
        """Gets the messages_received of this BgpPeerStatus.

        The number of BGP messages received.

        :return: The messages_received of this BgpPeerStatus.
        :rtype: int
        """
        return self._messages_received

    @messages_received.setter
    def messages_received(self, messages_received):
        """Sets the messages_received of this BgpPeerStatus.

        The number of BGP messages received.

        :param messages_received: The messages_received of this BgpPeerStatus.
        :type messages_received: int
        """

        self._messages_received = messages_received

    @property
    def messages_sent(self):
        """Gets the messages_sent of this BgpPeerStatus.

        The number of BGP messages sent.

        :return: The messages_sent of this BgpPeerStatus.
        :rtype: int
        """
        return self._messages_sent

    @messages_sent.setter
    def messages_sent(self, messages_sent):
        """Sets the messages_sent of this BgpPeerStatus.

        The number of BGP messages sent.

        :param messages_sent: The messages_sent of this BgpPeerStatus.
        :type messages_sent: int
        """

        self._messages_sent = messages_sent

    @property
    def neighbor(self):
        """Gets the neighbor of this BgpPeerStatus.

        The remote BGP peer.

        :return: The neighbor of this BgpPeerStatus.
        :rtype: str
        """
        return self._neighbor

    @neighbor.setter
    def neighbor(self, neighbor):
        """Sets the neighbor of this BgpPeerStatus.

        The remote BGP peer.

        :param neighbor: The neighbor of this BgpPeerStatus.
        :type neighbor: str
        """

        self._neighbor = neighbor

    @property
    def routes_received(self):
        """Gets the routes_received of this BgpPeerStatus.

        The number of routes learned from this peer.

        :return: The routes_received of this BgpPeerStatus.
        :rtype: int
        """
        return self._routes_received

    @routes_received.setter
    def routes_received(self, routes_received):
        """Sets the routes_received of this BgpPeerStatus.

        The number of routes learned from this peer.

        :param routes_received: The routes_received of this BgpPeerStatus.
        :type routes_received: int
        """

        self._routes_received = routes_received

    @property
    def state(self):
        """Gets the state of this BgpPeerStatus.

        The BGP peer state.

        :return: The state of this BgpPeerStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BgpPeerStatus.

        The BGP peer state.

        :param state: The state of this BgpPeerStatus.
        :type state: str
        """
        allowed_values = ["Unknown", "Stopped", "Idle", "Connecting", "Connected"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
