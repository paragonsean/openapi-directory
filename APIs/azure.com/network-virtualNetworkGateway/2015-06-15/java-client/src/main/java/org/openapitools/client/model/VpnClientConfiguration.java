/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LocalNetworkGatewayPropertiesFormatLocalNetworkAddressSpace;
import org.openapitools.client.model.VpnClientRevokedCertificate;
import org.openapitools.client.model.VpnClientRootCertificate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VpnClientConfiguration for P2S client
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:43:49.340169-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VpnClientConfiguration {
  public static final String SERIALIZED_NAME_VPN_CLIENT_ADDRESS_POOL = "vpnClientAddressPool";
  @SerializedName(SERIALIZED_NAME_VPN_CLIENT_ADDRESS_POOL)
  private LocalNetworkGatewayPropertiesFormatLocalNetworkAddressSpace vpnClientAddressPool;

  public static final String SERIALIZED_NAME_VPN_CLIENT_REVOKED_CERTIFICATES = "vpnClientRevokedCertificates";
  @SerializedName(SERIALIZED_NAME_VPN_CLIENT_REVOKED_CERTIFICATES)
  private List<VpnClientRevokedCertificate> vpnClientRevokedCertificates = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPN_CLIENT_ROOT_CERTIFICATES = "vpnClientRootCertificates";
  @SerializedName(SERIALIZED_NAME_VPN_CLIENT_ROOT_CERTIFICATES)
  private List<VpnClientRootCertificate> vpnClientRootCertificates = new ArrayList<>();

  public VpnClientConfiguration() {
  }

  public VpnClientConfiguration vpnClientAddressPool(LocalNetworkGatewayPropertiesFormatLocalNetworkAddressSpace vpnClientAddressPool) {
    this.vpnClientAddressPool = vpnClientAddressPool;
    return this;
  }

  /**
   * Get vpnClientAddressPool
   * @return vpnClientAddressPool
   */
  @javax.annotation.Nullable
  public LocalNetworkGatewayPropertiesFormatLocalNetworkAddressSpace getVpnClientAddressPool() {
    return vpnClientAddressPool;
  }

  public void setVpnClientAddressPool(LocalNetworkGatewayPropertiesFormatLocalNetworkAddressSpace vpnClientAddressPool) {
    this.vpnClientAddressPool = vpnClientAddressPool;
  }


  public VpnClientConfiguration vpnClientRevokedCertificates(List<VpnClientRevokedCertificate> vpnClientRevokedCertificates) {
    this.vpnClientRevokedCertificates = vpnClientRevokedCertificates;
    return this;
  }

  public VpnClientConfiguration addVpnClientRevokedCertificatesItem(VpnClientRevokedCertificate vpnClientRevokedCertificatesItem) {
    if (this.vpnClientRevokedCertificates == null) {
      this.vpnClientRevokedCertificates = new ArrayList<>();
    }
    this.vpnClientRevokedCertificates.add(vpnClientRevokedCertificatesItem);
    return this;
  }

  /**
   * VpnClientRevokedCertificate for Virtual network gateway.
   * @return vpnClientRevokedCertificates
   */
  @javax.annotation.Nullable
  public List<VpnClientRevokedCertificate> getVpnClientRevokedCertificates() {
    return vpnClientRevokedCertificates;
  }

  public void setVpnClientRevokedCertificates(List<VpnClientRevokedCertificate> vpnClientRevokedCertificates) {
    this.vpnClientRevokedCertificates = vpnClientRevokedCertificates;
  }


  public VpnClientConfiguration vpnClientRootCertificates(List<VpnClientRootCertificate> vpnClientRootCertificates) {
    this.vpnClientRootCertificates = vpnClientRootCertificates;
    return this;
  }

  public VpnClientConfiguration addVpnClientRootCertificatesItem(VpnClientRootCertificate vpnClientRootCertificatesItem) {
    if (this.vpnClientRootCertificates == null) {
      this.vpnClientRootCertificates = new ArrayList<>();
    }
    this.vpnClientRootCertificates.add(vpnClientRootCertificatesItem);
    return this;
  }

  /**
   * VpnClientRootCertificate for Virtual network gateway.
   * @return vpnClientRootCertificates
   */
  @javax.annotation.Nullable
  public List<VpnClientRootCertificate> getVpnClientRootCertificates() {
    return vpnClientRootCertificates;
  }

  public void setVpnClientRootCertificates(List<VpnClientRootCertificate> vpnClientRootCertificates) {
    this.vpnClientRootCertificates = vpnClientRootCertificates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpnClientConfiguration vpnClientConfiguration = (VpnClientConfiguration) o;
    return Objects.equals(this.vpnClientAddressPool, vpnClientConfiguration.vpnClientAddressPool) &&
        Objects.equals(this.vpnClientRevokedCertificates, vpnClientConfiguration.vpnClientRevokedCertificates) &&
        Objects.equals(this.vpnClientRootCertificates, vpnClientConfiguration.vpnClientRootCertificates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vpnClientAddressPool, vpnClientRevokedCertificates, vpnClientRootCertificates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpnClientConfiguration {\n");
    sb.append("    vpnClientAddressPool: ").append(toIndentedString(vpnClientAddressPool)).append("\n");
    sb.append("    vpnClientRevokedCertificates: ").append(toIndentedString(vpnClientRevokedCertificates)).append("\n");
    sb.append("    vpnClientRootCertificates: ").append(toIndentedString(vpnClientRootCertificates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vpnClientAddressPool");
    openapiFields.add("vpnClientRevokedCertificates");
    openapiFields.add("vpnClientRootCertificates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VpnClientConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VpnClientConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VpnClientConfiguration is not found in the empty JSON string", VpnClientConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VpnClientConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VpnClientConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `vpnClientAddressPool`
      if (jsonObj.get("vpnClientAddressPool") != null && !jsonObj.get("vpnClientAddressPool").isJsonNull()) {
        LocalNetworkGatewayPropertiesFormatLocalNetworkAddressSpace.validateJsonElement(jsonObj.get("vpnClientAddressPool"));
      }
      if (jsonObj.get("vpnClientRevokedCertificates") != null && !jsonObj.get("vpnClientRevokedCertificates").isJsonNull()) {
        JsonArray jsonArrayvpnClientRevokedCertificates = jsonObj.getAsJsonArray("vpnClientRevokedCertificates");
        if (jsonArrayvpnClientRevokedCertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vpnClientRevokedCertificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vpnClientRevokedCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("vpnClientRevokedCertificates").toString()));
          }

          // validate the optional field `vpnClientRevokedCertificates` (array)
          for (int i = 0; i < jsonArrayvpnClientRevokedCertificates.size(); i++) {
            VpnClientRevokedCertificate.validateJsonElement(jsonArrayvpnClientRevokedCertificates.get(i));
          };
        }
      }
      if (jsonObj.get("vpnClientRootCertificates") != null && !jsonObj.get("vpnClientRootCertificates").isJsonNull()) {
        JsonArray jsonArrayvpnClientRootCertificates = jsonObj.getAsJsonArray("vpnClientRootCertificates");
        if (jsonArrayvpnClientRootCertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vpnClientRootCertificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vpnClientRootCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("vpnClientRootCertificates").toString()));
          }

          // validate the optional field `vpnClientRootCertificates` (array)
          for (int i = 0; i < jsonArrayvpnClientRootCertificates.size(); i++) {
            VpnClientRootCertificate.validateJsonElement(jsonArrayvpnClientRootCertificates.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VpnClientConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VpnClientConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VpnClientConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VpnClientConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<VpnClientConfiguration>() {
           @Override
           public void write(JsonWriter out, VpnClientConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VpnClientConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VpnClientConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VpnClientConfiguration
   * @throws IOException if the JSON string is invalid with respect to VpnClientConfiguration
   */
  public static VpnClientConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VpnClientConfiguration.class);
  }

  /**
   * Convert an instance of VpnClientConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

