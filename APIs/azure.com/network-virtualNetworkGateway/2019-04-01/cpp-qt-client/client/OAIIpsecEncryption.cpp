/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpsecEncryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIpsecEncryption::OAIIpsecEncryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIpsecEncryption::OAIIpsecEncryption() {
    this->initializeModel();
}

OAIIpsecEncryption::~OAIIpsecEncryption() {}

void OAIIpsecEncryption::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIIpsecEncryption::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIIpsecEncryption::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIpsecEncryption::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIpsecEncryption::DES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DES3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIpsecEncryption::DES3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AES128", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIpsecEncryption::AES128;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AES192", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIpsecEncryption::AES192;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AES256", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIpsecEncryption::AES256;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GCMAES128", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIpsecEncryption::GCMAES128;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GCMAES192", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIpsecEncryption::GCMAES192;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GCMAES256", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIpsecEncryption::GCMAES256;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIIpsecEncryption::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIIpsecEncryption::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIIpsecEncryption::NONE:
            val = "None";
            break;
        case eOAIIpsecEncryption::DES:
            val = "DES";
            break;
        case eOAIIpsecEncryption::DES3:
            val = "DES3";
            break;
        case eOAIIpsecEncryption::AES128:
            val = "AES128";
            break;
        case eOAIIpsecEncryption::AES192:
            val = "AES192";
            break;
        case eOAIIpsecEncryption::AES256:
            val = "AES256";
            break;
        case eOAIIpsecEncryption::GCMAES128:
            val = "GCMAES128";
            break;
        case eOAIIpsecEncryption::GCMAES192:
            val = "GCMAES192";
            break;
        case eOAIIpsecEncryption::GCMAES256:
            val = "GCMAES256";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIIpsecEncryption::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIIpsecEncryption::eOAIIpsecEncryption OAIIpsecEncryption::getValue() const {
    return m_value;
}

void OAIIpsecEncryption::setValue(const OAIIpsecEncryption::eOAIIpsecEncryption& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIIpsecEncryption::isSet() const {
    
    return m_value_isSet;
}

bool OAIIpsecEncryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
