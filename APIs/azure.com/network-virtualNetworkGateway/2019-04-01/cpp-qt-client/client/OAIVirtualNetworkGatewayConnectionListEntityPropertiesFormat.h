/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat.h
 *
 * VirtualNetworkGatewayConnection properties.
 */

#ifndef OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat_H
#define OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat_H

#include <QJsonObject>

#include "OAIConnectionProtocol.h"
#include "OAIIpsecPolicy.h"
#include "OAITunnelConnectionHealth.h"
#include "OAIVirtualNetworkConnectionGatewayReference.h"
#include "OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat_peer.h"
#include "OAIVirtualNetworkGatewayConnectionStatus.h"
#include "OAIVirtualNetworkGatewayConnectionType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIpsecPolicy;
class OAIVirtualNetworkConnectionGatewayReference;
class OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat_peer;
class OAITunnelConnectionHealth;

class OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat : public OAIObject {
public:
    OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat();
    OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat(QString json);
    ~OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthorizationKey() const;
    void setAuthorizationKey(const QString &authorization_key);
    bool is_authorization_key_Set() const;
    bool is_authorization_key_Valid() const;

    OAIConnectionProtocol getConnectionProtocol() const;
    void setConnectionProtocol(const OAIConnectionProtocol &connection_protocol);
    bool is_connection_protocol_Set() const;
    bool is_connection_protocol_Valid() const;

    OAIVirtualNetworkGatewayConnectionStatus getConnectionStatus() const;
    void setConnectionStatus(const OAIVirtualNetworkGatewayConnectionStatus &connection_status);
    bool is_connection_status_Set() const;
    bool is_connection_status_Valid() const;

    OAIVirtualNetworkGatewayConnectionType getConnectionType() const;
    void setConnectionType(const OAIVirtualNetworkGatewayConnectionType &connection_type);
    bool is_connection_type_Set() const;
    bool is_connection_type_Valid() const;

    qint64 getEgressBytesTransferred() const;
    void setEgressBytesTransferred(const qint64 &egress_bytes_transferred);
    bool is_egress_bytes_transferred_Set() const;
    bool is_egress_bytes_transferred_Valid() const;

    bool isEnableBgp() const;
    void setEnableBgp(const bool &enable_bgp);
    bool is_enable_bgp_Set() const;
    bool is_enable_bgp_Valid() const;

    bool isExpressRouteGatewayBypass() const;
    void setExpressRouteGatewayBypass(const bool &express_route_gateway_bypass);
    bool is_express_route_gateway_bypass_Set() const;
    bool is_express_route_gateway_bypass_Valid() const;

    qint64 getIngressBytesTransferred() const;
    void setIngressBytesTransferred(const qint64 &ingress_bytes_transferred);
    bool is_ingress_bytes_transferred_Set() const;
    bool is_ingress_bytes_transferred_Valid() const;

    QList<OAIIpsecPolicy> getIpsecPolicies() const;
    void setIpsecPolicies(const QList<OAIIpsecPolicy> &ipsec_policies);
    bool is_ipsec_policies_Set() const;
    bool is_ipsec_policies_Valid() const;

    OAIVirtualNetworkConnectionGatewayReference getLocalNetworkGateway2() const;
    void setLocalNetworkGateway2(const OAIVirtualNetworkConnectionGatewayReference &local_network_gateway2);
    bool is_local_network_gateway2_Set() const;
    bool is_local_network_gateway2_Valid() const;

    OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat_peer getPeer() const;
    void setPeer(const OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat_peer &peer);
    bool is_peer_Set() const;
    bool is_peer_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getResourceGuid() const;
    void setResourceGuid(const QString &resource_guid);
    bool is_resource_guid_Set() const;
    bool is_resource_guid_Valid() const;

    qint32 getRoutingWeight() const;
    void setRoutingWeight(const qint32 &routing_weight);
    bool is_routing_weight_Set() const;
    bool is_routing_weight_Valid() const;

    QString getSharedKey() const;
    void setSharedKey(const QString &shared_key);
    bool is_shared_key_Set() const;
    bool is_shared_key_Valid() const;

    QList<OAITunnelConnectionHealth> getTunnelConnectionStatus() const;
    void setTunnelConnectionStatus(const QList<OAITunnelConnectionHealth> &tunnel_connection_status);
    bool is_tunnel_connection_status_Set() const;
    bool is_tunnel_connection_status_Valid() const;

    bool isUsePolicyBasedTrafficSelectors() const;
    void setUsePolicyBasedTrafficSelectors(const bool &use_policy_based_traffic_selectors);
    bool is_use_policy_based_traffic_selectors_Set() const;
    bool is_use_policy_based_traffic_selectors_Valid() const;

    OAIVirtualNetworkConnectionGatewayReference getVirtualNetworkGateway1() const;
    void setVirtualNetworkGateway1(const OAIVirtualNetworkConnectionGatewayReference &virtual_network_gateway1);
    bool is_virtual_network_gateway1_Set() const;
    bool is_virtual_network_gateway1_Valid() const;

    OAIVirtualNetworkConnectionGatewayReference getVirtualNetworkGateway2() const;
    void setVirtualNetworkGateway2(const OAIVirtualNetworkConnectionGatewayReference &virtual_network_gateway2);
    bool is_virtual_network_gateway2_Set() const;
    bool is_virtual_network_gateway2_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_authorization_key;
    bool m_authorization_key_isSet;
    bool m_authorization_key_isValid;

    OAIConnectionProtocol m_connection_protocol;
    bool m_connection_protocol_isSet;
    bool m_connection_protocol_isValid;

    OAIVirtualNetworkGatewayConnectionStatus m_connection_status;
    bool m_connection_status_isSet;
    bool m_connection_status_isValid;

    OAIVirtualNetworkGatewayConnectionType m_connection_type;
    bool m_connection_type_isSet;
    bool m_connection_type_isValid;

    qint64 m_egress_bytes_transferred;
    bool m_egress_bytes_transferred_isSet;
    bool m_egress_bytes_transferred_isValid;

    bool m_enable_bgp;
    bool m_enable_bgp_isSet;
    bool m_enable_bgp_isValid;

    bool m_express_route_gateway_bypass;
    bool m_express_route_gateway_bypass_isSet;
    bool m_express_route_gateway_bypass_isValid;

    qint64 m_ingress_bytes_transferred;
    bool m_ingress_bytes_transferred_isSet;
    bool m_ingress_bytes_transferred_isValid;

    QList<OAIIpsecPolicy> m_ipsec_policies;
    bool m_ipsec_policies_isSet;
    bool m_ipsec_policies_isValid;

    OAIVirtualNetworkConnectionGatewayReference m_local_network_gateway2;
    bool m_local_network_gateway2_isSet;
    bool m_local_network_gateway2_isValid;

    OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat_peer m_peer;
    bool m_peer_isSet;
    bool m_peer_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_resource_guid;
    bool m_resource_guid_isSet;
    bool m_resource_guid_isValid;

    qint32 m_routing_weight;
    bool m_routing_weight_isSet;
    bool m_routing_weight_isValid;

    QString m_shared_key;
    bool m_shared_key_isSet;
    bool m_shared_key_isValid;

    QList<OAITunnelConnectionHealth> m_tunnel_connection_status;
    bool m_tunnel_connection_status_isSet;
    bool m_tunnel_connection_status_isValid;

    bool m_use_policy_based_traffic_selectors;
    bool m_use_policy_based_traffic_selectors_isSet;
    bool m_use_policy_based_traffic_selectors_isValid;

    OAIVirtualNetworkConnectionGatewayReference m_virtual_network_gateway1;
    bool m_virtual_network_gateway1_isSet;
    bool m_virtual_network_gateway1_isValid;

    OAIVirtualNetworkConnectionGatewayReference m_virtual_network_gateway2;
    bool m_virtual_network_gateway2_isSet;
    bool m_virtual_network_gateway2_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat)

#endif // OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat_H
