/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVpnClientConnectionHealthDetail.h
 *
 * VPN client connection health detail.
 */

#ifndef OAIVpnClientConnectionHealthDetail_H
#define OAIVpnClientConnectionHealthDetail_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVpnClientConnectionHealthDetail : public OAIObject {
public:
    OAIVpnClientConnectionHealthDetail();
    OAIVpnClientConnectionHealthDetail(QString json);
    ~OAIVpnClientConnectionHealthDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getEgressBytesTransferred() const;
    void setEgressBytesTransferred(const qint64 &egress_bytes_transferred);
    bool is_egress_bytes_transferred_Set() const;
    bool is_egress_bytes_transferred_Valid() const;

    qint64 getEgressPacketsTransferred() const;
    void setEgressPacketsTransferred(const qint64 &egress_packets_transferred);
    bool is_egress_packets_transferred_Set() const;
    bool is_egress_packets_transferred_Valid() const;

    qint64 getIngressBytesTransferred() const;
    void setIngressBytesTransferred(const qint64 &ingress_bytes_transferred);
    bool is_ingress_bytes_transferred_Set() const;
    bool is_ingress_bytes_transferred_Valid() const;

    qint64 getIngressPacketsTransferred() const;
    void setIngressPacketsTransferred(const qint64 &ingress_packets_transferred);
    bool is_ingress_packets_transferred_Set() const;
    bool is_ingress_packets_transferred_Valid() const;

    qint64 getMaxBandwidth() const;
    void setMaxBandwidth(const qint64 &max_bandwidth);
    bool is_max_bandwidth_Set() const;
    bool is_max_bandwidth_Valid() const;

    qint64 getMaxPacketsPerSecond() const;
    void setMaxPacketsPerSecond(const qint64 &max_packets_per_second);
    bool is_max_packets_per_second_Set() const;
    bool is_max_packets_per_second_Valid() const;

    QString getPrivateIpAddress() const;
    void setPrivateIpAddress(const QString &private_ip_address);
    bool is_private_ip_address_Set() const;
    bool is_private_ip_address_Valid() const;

    QString getPublicIpAddress() const;
    void setPublicIpAddress(const QString &public_ip_address);
    bool is_public_ip_address_Set() const;
    bool is_public_ip_address_Valid() const;

    qint64 getVpnConnectionDuration() const;
    void setVpnConnectionDuration(const qint64 &vpn_connection_duration);
    bool is_vpn_connection_duration_Set() const;
    bool is_vpn_connection_duration_Valid() const;

    QString getVpnConnectionId() const;
    void setVpnConnectionId(const QString &vpn_connection_id);
    bool is_vpn_connection_id_Set() const;
    bool is_vpn_connection_id_Valid() const;

    QString getVpnConnectionTime() const;
    void setVpnConnectionTime(const QString &vpn_connection_time);
    bool is_vpn_connection_time_Set() const;
    bool is_vpn_connection_time_Valid() const;

    QString getVpnUserName() const;
    void setVpnUserName(const QString &vpn_user_name);
    bool is_vpn_user_name_Set() const;
    bool is_vpn_user_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_egress_bytes_transferred;
    bool m_egress_bytes_transferred_isSet;
    bool m_egress_bytes_transferred_isValid;

    qint64 m_egress_packets_transferred;
    bool m_egress_packets_transferred_isSet;
    bool m_egress_packets_transferred_isValid;

    qint64 m_ingress_bytes_transferred;
    bool m_ingress_bytes_transferred_isSet;
    bool m_ingress_bytes_transferred_isValid;

    qint64 m_ingress_packets_transferred;
    bool m_ingress_packets_transferred_isSet;
    bool m_ingress_packets_transferred_isValid;

    qint64 m_max_bandwidth;
    bool m_max_bandwidth_isSet;
    bool m_max_bandwidth_isValid;

    qint64 m_max_packets_per_second;
    bool m_max_packets_per_second_isSet;
    bool m_max_packets_per_second_isValid;

    QString m_private_ip_address;
    bool m_private_ip_address_isSet;
    bool m_private_ip_address_isValid;

    QString m_public_ip_address;
    bool m_public_ip_address_isSet;
    bool m_public_ip_address_isValid;

    qint64 m_vpn_connection_duration;
    bool m_vpn_connection_duration_isSet;
    bool m_vpn_connection_duration_isValid;

    QString m_vpn_connection_id;
    bool m_vpn_connection_id_isSet;
    bool m_vpn_connection_id_isValid;

    QString m_vpn_connection_time;
    bool m_vpn_connection_time_isSet;
    bool m_vpn_connection_time_isValid;

    QString m_vpn_user_name;
    bool m_vpn_user_name_isSet;
    bool m_vpn_user_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVpnClientConnectionHealthDetail)

#endif // OAIVpnClientConnectionHealthDetail_H
