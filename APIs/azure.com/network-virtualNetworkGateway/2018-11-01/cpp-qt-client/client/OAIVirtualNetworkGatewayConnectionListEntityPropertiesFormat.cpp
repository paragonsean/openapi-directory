/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat() {
    this->initializeModel();
}

OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::~OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat() {}

void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::initializeModel() {

    m_authorization_key_isSet = false;
    m_authorization_key_isValid = false;

    m_connection_protocol_isSet = false;
    m_connection_protocol_isValid = false;

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_egress_bytes_transferred_isSet = false;
    m_egress_bytes_transferred_isValid = false;

    m_enable_bgp_isSet = false;
    m_enable_bgp_isValid = false;

    m_express_route_gateway_bypass_isSet = false;
    m_express_route_gateway_bypass_isValid = false;

    m_ingress_bytes_transferred_isSet = false;
    m_ingress_bytes_transferred_isValid = false;

    m_ipsec_policies_isSet = false;
    m_ipsec_policies_isValid = false;

    m_local_network_gateway2_isSet = false;
    m_local_network_gateway2_isValid = false;

    m_peer_isSet = false;
    m_peer_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_guid_isSet = false;
    m_resource_guid_isValid = false;

    m_routing_weight_isSet = false;
    m_routing_weight_isValid = false;

    m_shared_key_isSet = false;
    m_shared_key_isValid = false;

    m_tunnel_connection_status_isSet = false;
    m_tunnel_connection_status_isValid = false;

    m_use_policy_based_traffic_selectors_isSet = false;
    m_use_policy_based_traffic_selectors_isValid = false;

    m_virtual_network_gateway1_isSet = false;
    m_virtual_network_gateway1_isValid = false;

    m_virtual_network_gateway2_isSet = false;
    m_virtual_network_gateway2_isValid = false;
}

void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_authorization_key_isValid = ::OpenAPI::fromJsonValue(m_authorization_key, json[QString("authorizationKey")]);
    m_authorization_key_isSet = !json[QString("authorizationKey")].isNull() && m_authorization_key_isValid;

    m_connection_protocol_isValid = ::OpenAPI::fromJsonValue(m_connection_protocol, json[QString("connectionProtocol")]);
    m_connection_protocol_isSet = !json[QString("connectionProtocol")].isNull() && m_connection_protocol_isValid;

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("connectionStatus")]);
    m_connection_status_isSet = !json[QString("connectionStatus")].isNull() && m_connection_status_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;

    m_egress_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_egress_bytes_transferred, json[QString("egressBytesTransferred")]);
    m_egress_bytes_transferred_isSet = !json[QString("egressBytesTransferred")].isNull() && m_egress_bytes_transferred_isValid;

    m_enable_bgp_isValid = ::OpenAPI::fromJsonValue(m_enable_bgp, json[QString("enableBgp")]);
    m_enable_bgp_isSet = !json[QString("enableBgp")].isNull() && m_enable_bgp_isValid;

    m_express_route_gateway_bypass_isValid = ::OpenAPI::fromJsonValue(m_express_route_gateway_bypass, json[QString("expressRouteGatewayBypass")]);
    m_express_route_gateway_bypass_isSet = !json[QString("expressRouteGatewayBypass")].isNull() && m_express_route_gateway_bypass_isValid;

    m_ingress_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_ingress_bytes_transferred, json[QString("ingressBytesTransferred")]);
    m_ingress_bytes_transferred_isSet = !json[QString("ingressBytesTransferred")].isNull() && m_ingress_bytes_transferred_isValid;

    m_ipsec_policies_isValid = ::OpenAPI::fromJsonValue(m_ipsec_policies, json[QString("ipsecPolicies")]);
    m_ipsec_policies_isSet = !json[QString("ipsecPolicies")].isNull() && m_ipsec_policies_isValid;

    m_local_network_gateway2_isValid = ::OpenAPI::fromJsonValue(m_local_network_gateway2, json[QString("localNetworkGateway2")]);
    m_local_network_gateway2_isSet = !json[QString("localNetworkGateway2")].isNull() && m_local_network_gateway2_isValid;

    m_peer_isValid = ::OpenAPI::fromJsonValue(m_peer, json[QString("peer")]);
    m_peer_isSet = !json[QString("peer")].isNull() && m_peer_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_resource_guid, json[QString("resourceGuid")]);
    m_resource_guid_isSet = !json[QString("resourceGuid")].isNull() && m_resource_guid_isValid;

    m_routing_weight_isValid = ::OpenAPI::fromJsonValue(m_routing_weight, json[QString("routingWeight")]);
    m_routing_weight_isSet = !json[QString("routingWeight")].isNull() && m_routing_weight_isValid;

    m_shared_key_isValid = ::OpenAPI::fromJsonValue(m_shared_key, json[QString("sharedKey")]);
    m_shared_key_isSet = !json[QString("sharedKey")].isNull() && m_shared_key_isValid;

    m_tunnel_connection_status_isValid = ::OpenAPI::fromJsonValue(m_tunnel_connection_status, json[QString("tunnelConnectionStatus")]);
    m_tunnel_connection_status_isSet = !json[QString("tunnelConnectionStatus")].isNull() && m_tunnel_connection_status_isValid;

    m_use_policy_based_traffic_selectors_isValid = ::OpenAPI::fromJsonValue(m_use_policy_based_traffic_selectors, json[QString("usePolicyBasedTrafficSelectors")]);
    m_use_policy_based_traffic_selectors_isSet = !json[QString("usePolicyBasedTrafficSelectors")].isNull() && m_use_policy_based_traffic_selectors_isValid;

    m_virtual_network_gateway1_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_gateway1, json[QString("virtualNetworkGateway1")]);
    m_virtual_network_gateway1_isSet = !json[QString("virtualNetworkGateway1")].isNull() && m_virtual_network_gateway1_isValid;

    m_virtual_network_gateway2_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_gateway2, json[QString("virtualNetworkGateway2")]);
    m_virtual_network_gateway2_isSet = !json[QString("virtualNetworkGateway2")].isNull() && m_virtual_network_gateway2_isValid;
}

QString OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_key_isSet) {
        obj.insert(QString("authorizationKey"), ::OpenAPI::toJsonValue(m_authorization_key));
    }
    if (m_connection_protocol.isSet()) {
        obj.insert(QString("connectionProtocol"), ::OpenAPI::toJsonValue(m_connection_protocol));
    }
    if (m_connection_status_isSet) {
        obj.insert(QString("connectionStatus"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_connection_type_isSet) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_egress_bytes_transferred_isSet) {
        obj.insert(QString("egressBytesTransferred"), ::OpenAPI::toJsonValue(m_egress_bytes_transferred));
    }
    if (m_enable_bgp_isSet) {
        obj.insert(QString("enableBgp"), ::OpenAPI::toJsonValue(m_enable_bgp));
    }
    if (m_express_route_gateway_bypass_isSet) {
        obj.insert(QString("expressRouteGatewayBypass"), ::OpenAPI::toJsonValue(m_express_route_gateway_bypass));
    }
    if (m_ingress_bytes_transferred_isSet) {
        obj.insert(QString("ingressBytesTransferred"), ::OpenAPI::toJsonValue(m_ingress_bytes_transferred));
    }
    if (m_ipsec_policies.size() > 0) {
        obj.insert(QString("ipsecPolicies"), ::OpenAPI::toJsonValue(m_ipsec_policies));
    }
    if (m_local_network_gateway2.isSet()) {
        obj.insert(QString("localNetworkGateway2"), ::OpenAPI::toJsonValue(m_local_network_gateway2));
    }
    if (m_peer.isSet()) {
        obj.insert(QString("peer"), ::OpenAPI::toJsonValue(m_peer));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_guid_isSet) {
        obj.insert(QString("resourceGuid"), ::OpenAPI::toJsonValue(m_resource_guid));
    }
    if (m_routing_weight_isSet) {
        obj.insert(QString("routingWeight"), ::OpenAPI::toJsonValue(m_routing_weight));
    }
    if (m_shared_key_isSet) {
        obj.insert(QString("sharedKey"), ::OpenAPI::toJsonValue(m_shared_key));
    }
    if (m_tunnel_connection_status.size() > 0) {
        obj.insert(QString("tunnelConnectionStatus"), ::OpenAPI::toJsonValue(m_tunnel_connection_status));
    }
    if (m_use_policy_based_traffic_selectors_isSet) {
        obj.insert(QString("usePolicyBasedTrafficSelectors"), ::OpenAPI::toJsonValue(m_use_policy_based_traffic_selectors));
    }
    if (m_virtual_network_gateway1.isSet()) {
        obj.insert(QString("virtualNetworkGateway1"), ::OpenAPI::toJsonValue(m_virtual_network_gateway1));
    }
    if (m_virtual_network_gateway2.isSet()) {
        obj.insert(QString("virtualNetworkGateway2"), ::OpenAPI::toJsonValue(m_virtual_network_gateway2));
    }
    return obj;
}

QString OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getAuthorizationKey() const {
    return m_authorization_key;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setAuthorizationKey(const QString &authorization_key) {
    m_authorization_key = authorization_key;
    m_authorization_key_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_authorization_key_Set() const{
    return m_authorization_key_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_authorization_key_Valid() const{
    return m_authorization_key_isValid;
}

OAIConnectionProtocol OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getConnectionProtocol() const {
    return m_connection_protocol;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setConnectionProtocol(const OAIConnectionProtocol &connection_protocol) {
    m_connection_protocol = connection_protocol;
    m_connection_protocol_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_connection_protocol_Set() const{
    return m_connection_protocol_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_connection_protocol_Valid() const{
    return m_connection_protocol_isValid;
}

QString OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getConnectionStatus() const {
    return m_connection_status;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setConnectionStatus(const QString &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

QString OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getConnectionType() const {
    return m_connection_type;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setConnectionType(const QString &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

qint64 OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getEgressBytesTransferred() const {
    return m_egress_bytes_transferred;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setEgressBytesTransferred(const qint64 &egress_bytes_transferred) {
    m_egress_bytes_transferred = egress_bytes_transferred;
    m_egress_bytes_transferred_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_egress_bytes_transferred_Set() const{
    return m_egress_bytes_transferred_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_egress_bytes_transferred_Valid() const{
    return m_egress_bytes_transferred_isValid;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::isEnableBgp() const {
    return m_enable_bgp;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setEnableBgp(const bool &enable_bgp) {
    m_enable_bgp = enable_bgp;
    m_enable_bgp_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_enable_bgp_Set() const{
    return m_enable_bgp_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_enable_bgp_Valid() const{
    return m_enable_bgp_isValid;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::isExpressRouteGatewayBypass() const {
    return m_express_route_gateway_bypass;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setExpressRouteGatewayBypass(const bool &express_route_gateway_bypass) {
    m_express_route_gateway_bypass = express_route_gateway_bypass;
    m_express_route_gateway_bypass_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_express_route_gateway_bypass_Set() const{
    return m_express_route_gateway_bypass_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_express_route_gateway_bypass_Valid() const{
    return m_express_route_gateway_bypass_isValid;
}

qint64 OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getIngressBytesTransferred() const {
    return m_ingress_bytes_transferred;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setIngressBytesTransferred(const qint64 &ingress_bytes_transferred) {
    m_ingress_bytes_transferred = ingress_bytes_transferred;
    m_ingress_bytes_transferred_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_ingress_bytes_transferred_Set() const{
    return m_ingress_bytes_transferred_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_ingress_bytes_transferred_Valid() const{
    return m_ingress_bytes_transferred_isValid;
}

QList<OAIIpsecPolicy> OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getIpsecPolicies() const {
    return m_ipsec_policies;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setIpsecPolicies(const QList<OAIIpsecPolicy> &ipsec_policies) {
    m_ipsec_policies = ipsec_policies;
    m_ipsec_policies_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_ipsec_policies_Set() const{
    return m_ipsec_policies_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_ipsec_policies_Valid() const{
    return m_ipsec_policies_isValid;
}

OAIVirtualNetworkConnectionGatewayReference OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getLocalNetworkGateway2() const {
    return m_local_network_gateway2;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setLocalNetworkGateway2(const OAIVirtualNetworkConnectionGatewayReference &local_network_gateway2) {
    m_local_network_gateway2 = local_network_gateway2;
    m_local_network_gateway2_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_local_network_gateway2_Set() const{
    return m_local_network_gateway2_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_local_network_gateway2_Valid() const{
    return m_local_network_gateway2_isValid;
}

OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat_peer OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getPeer() const {
    return m_peer;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setPeer(const OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat_peer &peer) {
    m_peer = peer;
    m_peer_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_peer_Set() const{
    return m_peer_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_peer_Valid() const{
    return m_peer_isValid;
}

QString OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getResourceGuid() const {
    return m_resource_guid;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setResourceGuid(const QString &resource_guid) {
    m_resource_guid = resource_guid;
    m_resource_guid_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_resource_guid_Set() const{
    return m_resource_guid_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_resource_guid_Valid() const{
    return m_resource_guid_isValid;
}

qint32 OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getRoutingWeight() const {
    return m_routing_weight;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setRoutingWeight(const qint32 &routing_weight) {
    m_routing_weight = routing_weight;
    m_routing_weight_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_routing_weight_Set() const{
    return m_routing_weight_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_routing_weight_Valid() const{
    return m_routing_weight_isValid;
}

QString OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getSharedKey() const {
    return m_shared_key;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setSharedKey(const QString &shared_key) {
    m_shared_key = shared_key;
    m_shared_key_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_shared_key_Set() const{
    return m_shared_key_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_shared_key_Valid() const{
    return m_shared_key_isValid;
}

QList<OAITunnelConnectionHealth> OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getTunnelConnectionStatus() const {
    return m_tunnel_connection_status;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setTunnelConnectionStatus(const QList<OAITunnelConnectionHealth> &tunnel_connection_status) {
    m_tunnel_connection_status = tunnel_connection_status;
    m_tunnel_connection_status_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_tunnel_connection_status_Set() const{
    return m_tunnel_connection_status_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_tunnel_connection_status_Valid() const{
    return m_tunnel_connection_status_isValid;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::isUsePolicyBasedTrafficSelectors() const {
    return m_use_policy_based_traffic_selectors;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setUsePolicyBasedTrafficSelectors(const bool &use_policy_based_traffic_selectors) {
    m_use_policy_based_traffic_selectors = use_policy_based_traffic_selectors;
    m_use_policy_based_traffic_selectors_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_use_policy_based_traffic_selectors_Set() const{
    return m_use_policy_based_traffic_selectors_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_use_policy_based_traffic_selectors_Valid() const{
    return m_use_policy_based_traffic_selectors_isValid;
}

OAIVirtualNetworkConnectionGatewayReference OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getVirtualNetworkGateway1() const {
    return m_virtual_network_gateway1;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setVirtualNetworkGateway1(const OAIVirtualNetworkConnectionGatewayReference &virtual_network_gateway1) {
    m_virtual_network_gateway1 = virtual_network_gateway1;
    m_virtual_network_gateway1_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_virtual_network_gateway1_Set() const{
    return m_virtual_network_gateway1_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_virtual_network_gateway1_Valid() const{
    return m_virtual_network_gateway1_isValid;
}

OAIVirtualNetworkConnectionGatewayReference OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::getVirtualNetworkGateway2() const {
    return m_virtual_network_gateway2;
}
void OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::setVirtualNetworkGateway2(const OAIVirtualNetworkConnectionGatewayReference &virtual_network_gateway2) {
    m_virtual_network_gateway2 = virtual_network_gateway2;
    m_virtual_network_gateway2_isSet = true;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_virtual_network_gateway2_Set() const{
    return m_virtual_network_gateway2_isSet;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::is_virtual_network_gateway2_Valid() const{
    return m_virtual_network_gateway2_isValid;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_egress_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_bgp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_express_route_gateway_bypass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipsec_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_network_gateway2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tunnel_connection_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_policy_based_traffic_selectors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_gateway1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_gateway2.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkGatewayConnectionListEntityPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_type_isValid && m_virtual_network_gateway1_isValid && true;
}

} // namespace OpenAPI
