# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GatewayRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, as_path: str=None, local_address: str=None, network: str=None, next_hop: str=None, origin: str=None, source_peer: str=None, weight: int=None):
        """GatewayRoute - a model defined in OpenAPI

        :param as_path: The as_path of this GatewayRoute.
        :param local_address: The local_address of this GatewayRoute.
        :param network: The network of this GatewayRoute.
        :param next_hop: The next_hop of this GatewayRoute.
        :param origin: The origin of this GatewayRoute.
        :param source_peer: The source_peer of this GatewayRoute.
        :param weight: The weight of this GatewayRoute.
        """
        self.openapi_types = {
            'as_path': str,
            'local_address': str,
            'network': str,
            'next_hop': str,
            'origin': str,
            'source_peer': str,
            'weight': int
        }

        self.attribute_map = {
            'as_path': 'asPath',
            'local_address': 'localAddress',
            'network': 'network',
            'next_hop': 'nextHop',
            'origin': 'origin',
            'source_peer': 'sourcePeer',
            'weight': 'weight'
        }

        self._as_path = as_path
        self._local_address = local_address
        self._network = network
        self._next_hop = next_hop
        self._origin = origin
        self._source_peer = source_peer
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GatewayRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GatewayRoute of this GatewayRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def as_path(self):
        """Gets the as_path of this GatewayRoute.

        The route's AS path sequence

        :return: The as_path of this GatewayRoute.
        :rtype: str
        """
        return self._as_path

    @as_path.setter
    def as_path(self, as_path):
        """Sets the as_path of this GatewayRoute.

        The route's AS path sequence

        :param as_path: The as_path of this GatewayRoute.
        :type as_path: str
        """

        self._as_path = as_path

    @property
    def local_address(self):
        """Gets the local_address of this GatewayRoute.

        The gateway's local address

        :return: The local_address of this GatewayRoute.
        :rtype: str
        """
        return self._local_address

    @local_address.setter
    def local_address(self, local_address):
        """Sets the local_address of this GatewayRoute.

        The gateway's local address

        :param local_address: The local_address of this GatewayRoute.
        :type local_address: str
        """

        self._local_address = local_address

    @property
    def network(self):
        """Gets the network of this GatewayRoute.

        The route's network prefix

        :return: The network of this GatewayRoute.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this GatewayRoute.

        The route's network prefix

        :param network: The network of this GatewayRoute.
        :type network: str
        """

        self._network = network

    @property
    def next_hop(self):
        """Gets the next_hop of this GatewayRoute.

        The route's next hop

        :return: The next_hop of this GatewayRoute.
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this GatewayRoute.

        The route's next hop

        :param next_hop: The next_hop of this GatewayRoute.
        :type next_hop: str
        """

        self._next_hop = next_hop

    @property
    def origin(self):
        """Gets the origin of this GatewayRoute.

        The source this route was learned from

        :return: The origin of this GatewayRoute.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this GatewayRoute.

        The source this route was learned from

        :param origin: The origin of this GatewayRoute.
        :type origin: str
        """

        self._origin = origin

    @property
    def source_peer(self):
        """Gets the source_peer of this GatewayRoute.

        The peer this route was learned from

        :return: The source_peer of this GatewayRoute.
        :rtype: str
        """
        return self._source_peer

    @source_peer.setter
    def source_peer(self, source_peer):
        """Sets the source_peer of this GatewayRoute.

        The peer this route was learned from

        :param source_peer: The source_peer of this GatewayRoute.
        :type source_peer: str
        """

        self._source_peer = source_peer

    @property
    def weight(self):
        """Gets the weight of this GatewayRoute.

        The route's weight

        :return: The weight of this GatewayRoute.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this GatewayRoute.

        The route's weight

        :param weight: The weight of this GatewayRoute.
        :type weight: int
        """

        self._weight = weight
