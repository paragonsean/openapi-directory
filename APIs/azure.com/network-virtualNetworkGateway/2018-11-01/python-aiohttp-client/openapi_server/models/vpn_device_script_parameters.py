# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VpnDeviceScriptParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_family: str=None, firmware_version: str=None, vendor: str=None):
        """VpnDeviceScriptParameters - a model defined in OpenAPI

        :param device_family: The device_family of this VpnDeviceScriptParameters.
        :param firmware_version: The firmware_version of this VpnDeviceScriptParameters.
        :param vendor: The vendor of this VpnDeviceScriptParameters.
        """
        self.openapi_types = {
            'device_family': str,
            'firmware_version': str,
            'vendor': str
        }

        self.attribute_map = {
            'device_family': 'deviceFamily',
            'firmware_version': 'firmwareVersion',
            'vendor': 'vendor'
        }

        self._device_family = device_family
        self._firmware_version = firmware_version
        self._vendor = vendor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VpnDeviceScriptParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VpnDeviceScriptParameters of this VpnDeviceScriptParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_family(self):
        """Gets the device_family of this VpnDeviceScriptParameters.

        The device family for the vpn device.

        :return: The device_family of this VpnDeviceScriptParameters.
        :rtype: str
        """
        return self._device_family

    @device_family.setter
    def device_family(self, device_family):
        """Sets the device_family of this VpnDeviceScriptParameters.

        The device family for the vpn device.

        :param device_family: The device_family of this VpnDeviceScriptParameters.
        :type device_family: str
        """

        self._device_family = device_family

    @property
    def firmware_version(self):
        """Gets the firmware_version of this VpnDeviceScriptParameters.

        The firmware version for the vpn device.

        :return: The firmware_version of this VpnDeviceScriptParameters.
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this VpnDeviceScriptParameters.

        The firmware version for the vpn device.

        :param firmware_version: The firmware_version of this VpnDeviceScriptParameters.
        :type firmware_version: str
        """

        self._firmware_version = firmware_version

    @property
    def vendor(self):
        """Gets the vendor of this VpnDeviceScriptParameters.

        The vendor for the vpn device.

        :return: The vendor of this VpnDeviceScriptParameters.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this VpnDeviceScriptParameters.

        The vendor for the vpn device.

        :param vendor: The vendor of this VpnDeviceScriptParameters.
        :type vendor: str
        """

        self._vendor = vendor
