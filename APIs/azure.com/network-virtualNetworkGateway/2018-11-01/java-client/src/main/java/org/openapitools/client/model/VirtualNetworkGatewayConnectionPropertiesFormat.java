/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConnectionProtocol;
import org.openapitools.client.model.IpsecPolicy;
import org.openapitools.client.model.LocalNetworkGateway;
import org.openapitools.client.model.TunnelConnectionHealth;
import org.openapitools.client.model.VirtualNetworkGateway;
import org.openapitools.client.model.VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualNetworkGatewayConnection properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:43:41.852057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualNetworkGatewayConnectionPropertiesFormat {
  public static final String SERIALIZED_NAME_AUTHORIZATION_KEY = "authorizationKey";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_KEY)
  private String authorizationKey;

  public static final String SERIALIZED_NAME_CONNECTION_PROTOCOL = "connectionProtocol";
  @SerializedName(SERIALIZED_NAME_CONNECTION_PROTOCOL)
  private ConnectionProtocol connectionProtocol;

  /**
   * Virtual network Gateway connection status. Possible values are &#39;Unknown&#39;, &#39;Connecting&#39;, &#39;Connected&#39; and &#39;NotConnected&#39;.
   */
  @JsonAdapter(ConnectionStatusEnum.Adapter.class)
  public enum ConnectionStatusEnum {
    UNKNOWN("Unknown"),
    
    CONNECTING("Connecting"),
    
    CONNECTED("Connected"),
    
    NOT_CONNECTED("NotConnected");

    private String value;

    ConnectionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionStatusEnum fromValue(String value) {
      for (ConnectionStatusEnum b : ConnectionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connectionStatus";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private ConnectionStatusEnum connectionStatus;

  /**
   * Gateway connection type. Possible values are: &#39;Ipsec&#39;,&#39;Vnet2Vnet&#39;,&#39;ExpressRoute&#39;, and &#39;VPNClient.
   */
  @JsonAdapter(ConnectionTypeEnum.Adapter.class)
  public enum ConnectionTypeEnum {
    I_PSEC("IPsec"),
    
    VNET2_VNET("Vnet2Vnet"),
    
    EXPRESS_ROUTE("ExpressRoute"),
    
    VPN_CLIENT("VPNClient");

    private String value;

    ConnectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionTypeEnum fromValue(String value) {
      for (ConnectionTypeEnum b : ConnectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private ConnectionTypeEnum connectionType;

  public static final String SERIALIZED_NAME_EGRESS_BYTES_TRANSFERRED = "egressBytesTransferred";
  @SerializedName(SERIALIZED_NAME_EGRESS_BYTES_TRANSFERRED)
  private Long egressBytesTransferred;

  public static final String SERIALIZED_NAME_ENABLE_BGP = "enableBgp";
  @SerializedName(SERIALIZED_NAME_ENABLE_BGP)
  private Boolean enableBgp;

  public static final String SERIALIZED_NAME_EXPRESS_ROUTE_GATEWAY_BYPASS = "expressRouteGatewayBypass";
  @SerializedName(SERIALIZED_NAME_EXPRESS_ROUTE_GATEWAY_BYPASS)
  private Boolean expressRouteGatewayBypass;

  public static final String SERIALIZED_NAME_INGRESS_BYTES_TRANSFERRED = "ingressBytesTransferred";
  @SerializedName(SERIALIZED_NAME_INGRESS_BYTES_TRANSFERRED)
  private Long ingressBytesTransferred;

  public static final String SERIALIZED_NAME_IPSEC_POLICIES = "ipsecPolicies";
  @SerializedName(SERIALIZED_NAME_IPSEC_POLICIES)
  private List<IpsecPolicy> ipsecPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCAL_NETWORK_GATEWAY2 = "localNetworkGateway2";
  @SerializedName(SERIALIZED_NAME_LOCAL_NETWORK_GATEWAY2)
  private LocalNetworkGateway localNetworkGateway2;

  public static final String SERIALIZED_NAME_PEER = "peer";
  @SerializedName(SERIALIZED_NAME_PEER)
  private VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer peer;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_GUID = "resourceGuid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GUID)
  private String resourceGuid;

  public static final String SERIALIZED_NAME_ROUTING_WEIGHT = "routingWeight";
  @SerializedName(SERIALIZED_NAME_ROUTING_WEIGHT)
  private Integer routingWeight;

  public static final String SERIALIZED_NAME_SHARED_KEY = "sharedKey";
  @SerializedName(SERIALIZED_NAME_SHARED_KEY)
  private String sharedKey;

  public static final String SERIALIZED_NAME_TUNNEL_CONNECTION_STATUS = "tunnelConnectionStatus";
  @SerializedName(SERIALIZED_NAME_TUNNEL_CONNECTION_STATUS)
  private List<TunnelConnectionHealth> tunnelConnectionStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_USE_POLICY_BASED_TRAFFIC_SELECTORS = "usePolicyBasedTrafficSelectors";
  @SerializedName(SERIALIZED_NAME_USE_POLICY_BASED_TRAFFIC_SELECTORS)
  private Boolean usePolicyBasedTrafficSelectors;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_GATEWAY1 = "virtualNetworkGateway1";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_GATEWAY1)
  private VirtualNetworkGateway virtualNetworkGateway1;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_GATEWAY2 = "virtualNetworkGateway2";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_GATEWAY2)
  private VirtualNetworkGateway virtualNetworkGateway2;

  public VirtualNetworkGatewayConnectionPropertiesFormat() {
  }

  public VirtualNetworkGatewayConnectionPropertiesFormat(
     ConnectionStatusEnum connectionStatus, 
     Long egressBytesTransferred, 
     Long ingressBytesTransferred, 
     String provisioningState, 
     List<TunnelConnectionHealth> tunnelConnectionStatus
  ) {
    this();
    this.connectionStatus = connectionStatus;
    this.egressBytesTransferred = egressBytesTransferred;
    this.ingressBytesTransferred = ingressBytesTransferred;
    this.provisioningState = provisioningState;
    this.tunnelConnectionStatus = tunnelConnectionStatus;
  }

  public VirtualNetworkGatewayConnectionPropertiesFormat authorizationKey(String authorizationKey) {
    this.authorizationKey = authorizationKey;
    return this;
  }

  /**
   * The authorizationKey.
   * @return authorizationKey
   */
  @javax.annotation.Nullable
  public String getAuthorizationKey() {
    return authorizationKey;
  }

  public void setAuthorizationKey(String authorizationKey) {
    this.authorizationKey = authorizationKey;
  }


  public VirtualNetworkGatewayConnectionPropertiesFormat connectionProtocol(ConnectionProtocol connectionProtocol) {
    this.connectionProtocol = connectionProtocol;
    return this;
  }

  /**
   * Get connectionProtocol
   * @return connectionProtocol
   */
  @javax.annotation.Nullable
  public ConnectionProtocol getConnectionProtocol() {
    return connectionProtocol;
  }

  public void setConnectionProtocol(ConnectionProtocol connectionProtocol) {
    this.connectionProtocol = connectionProtocol;
  }


  /**
   * Virtual network Gateway connection status. Possible values are &#39;Unknown&#39;, &#39;Connecting&#39;, &#39;Connected&#39; and &#39;NotConnected&#39;.
   * @return connectionStatus
   */
  @javax.annotation.Nullable
  public ConnectionStatusEnum getConnectionStatus() {
    return connectionStatus;
  }



  public VirtualNetworkGatewayConnectionPropertiesFormat connectionType(ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Gateway connection type. Possible values are: &#39;Ipsec&#39;,&#39;Vnet2Vnet&#39;,&#39;ExpressRoute&#39;, and &#39;VPNClient.
   * @return connectionType
   */
  @javax.annotation.Nonnull
  public ConnectionTypeEnum getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
  }


  /**
   * The egress bytes transferred in this connection.
   * @return egressBytesTransferred
   */
  @javax.annotation.Nullable
  public Long getEgressBytesTransferred() {
    return egressBytesTransferred;
  }



  public VirtualNetworkGatewayConnectionPropertiesFormat enableBgp(Boolean enableBgp) {
    this.enableBgp = enableBgp;
    return this;
  }

  /**
   * EnableBgp flag
   * @return enableBgp
   */
  @javax.annotation.Nullable
  public Boolean getEnableBgp() {
    return enableBgp;
  }

  public void setEnableBgp(Boolean enableBgp) {
    this.enableBgp = enableBgp;
  }


  public VirtualNetworkGatewayConnectionPropertiesFormat expressRouteGatewayBypass(Boolean expressRouteGatewayBypass) {
    this.expressRouteGatewayBypass = expressRouteGatewayBypass;
    return this;
  }

  /**
   * Bypass ExpressRoute Gateway for data forwarding
   * @return expressRouteGatewayBypass
   */
  @javax.annotation.Nullable
  public Boolean getExpressRouteGatewayBypass() {
    return expressRouteGatewayBypass;
  }

  public void setExpressRouteGatewayBypass(Boolean expressRouteGatewayBypass) {
    this.expressRouteGatewayBypass = expressRouteGatewayBypass;
  }


  /**
   * The ingress bytes transferred in this connection.
   * @return ingressBytesTransferred
   */
  @javax.annotation.Nullable
  public Long getIngressBytesTransferred() {
    return ingressBytesTransferred;
  }



  public VirtualNetworkGatewayConnectionPropertiesFormat ipsecPolicies(List<IpsecPolicy> ipsecPolicies) {
    this.ipsecPolicies = ipsecPolicies;
    return this;
  }

  public VirtualNetworkGatewayConnectionPropertiesFormat addIpsecPoliciesItem(IpsecPolicy ipsecPoliciesItem) {
    if (this.ipsecPolicies == null) {
      this.ipsecPolicies = new ArrayList<>();
    }
    this.ipsecPolicies.add(ipsecPoliciesItem);
    return this;
  }

  /**
   * The IPSec Policies to be considered by this connection.
   * @return ipsecPolicies
   */
  @javax.annotation.Nullable
  public List<IpsecPolicy> getIpsecPolicies() {
    return ipsecPolicies;
  }

  public void setIpsecPolicies(List<IpsecPolicy> ipsecPolicies) {
    this.ipsecPolicies = ipsecPolicies;
  }


  public VirtualNetworkGatewayConnectionPropertiesFormat localNetworkGateway2(LocalNetworkGateway localNetworkGateway2) {
    this.localNetworkGateway2 = localNetworkGateway2;
    return this;
  }

  /**
   * Get localNetworkGateway2
   * @return localNetworkGateway2
   */
  @javax.annotation.Nullable
  public LocalNetworkGateway getLocalNetworkGateway2() {
    return localNetworkGateway2;
  }

  public void setLocalNetworkGateway2(LocalNetworkGateway localNetworkGateway2) {
    this.localNetworkGateway2 = localNetworkGateway2;
  }


  public VirtualNetworkGatewayConnectionPropertiesFormat peer(VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer peer) {
    this.peer = peer;
    return this;
  }

  /**
   * Get peer
   * @return peer
   */
  @javax.annotation.Nullable
  public VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer getPeer() {
    return peer;
  }

  public void setPeer(VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer peer) {
    this.peer = peer;
  }


  /**
   * The provisioning state of the VirtualNetworkGatewayConnection resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public VirtualNetworkGatewayConnectionPropertiesFormat resourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
    return this;
  }

  /**
   * The resource GUID property of the VirtualNetworkGatewayConnection resource.
   * @return resourceGuid
   */
  @javax.annotation.Nullable
  public String getResourceGuid() {
    return resourceGuid;
  }

  public void setResourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
  }


  public VirtualNetworkGatewayConnectionPropertiesFormat routingWeight(Integer routingWeight) {
    this.routingWeight = routingWeight;
    return this;
  }

  /**
   * The routing weight.
   * @return routingWeight
   */
  @javax.annotation.Nullable
  public Integer getRoutingWeight() {
    return routingWeight;
  }

  public void setRoutingWeight(Integer routingWeight) {
    this.routingWeight = routingWeight;
  }


  public VirtualNetworkGatewayConnectionPropertiesFormat sharedKey(String sharedKey) {
    this.sharedKey = sharedKey;
    return this;
  }

  /**
   * The IPSec shared key.
   * @return sharedKey
   */
  @javax.annotation.Nullable
  public String getSharedKey() {
    return sharedKey;
  }

  public void setSharedKey(String sharedKey) {
    this.sharedKey = sharedKey;
  }


  /**
   * Collection of all tunnels&#39; connection health status.
   * @return tunnelConnectionStatus
   */
  @javax.annotation.Nullable
  public List<TunnelConnectionHealth> getTunnelConnectionStatus() {
    return tunnelConnectionStatus;
  }



  public VirtualNetworkGatewayConnectionPropertiesFormat usePolicyBasedTrafficSelectors(Boolean usePolicyBasedTrafficSelectors) {
    this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
    return this;
  }

  /**
   * Enable policy-based traffic selectors.
   * @return usePolicyBasedTrafficSelectors
   */
  @javax.annotation.Nullable
  public Boolean getUsePolicyBasedTrafficSelectors() {
    return usePolicyBasedTrafficSelectors;
  }

  public void setUsePolicyBasedTrafficSelectors(Boolean usePolicyBasedTrafficSelectors) {
    this.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
  }


  public VirtualNetworkGatewayConnectionPropertiesFormat virtualNetworkGateway1(VirtualNetworkGateway virtualNetworkGateway1) {
    this.virtualNetworkGateway1 = virtualNetworkGateway1;
    return this;
  }

  /**
   * Get virtualNetworkGateway1
   * @return virtualNetworkGateway1
   */
  @javax.annotation.Nonnull
  public VirtualNetworkGateway getVirtualNetworkGateway1() {
    return virtualNetworkGateway1;
  }

  public void setVirtualNetworkGateway1(VirtualNetworkGateway virtualNetworkGateway1) {
    this.virtualNetworkGateway1 = virtualNetworkGateway1;
  }


  public VirtualNetworkGatewayConnectionPropertiesFormat virtualNetworkGateway2(VirtualNetworkGateway virtualNetworkGateway2) {
    this.virtualNetworkGateway2 = virtualNetworkGateway2;
    return this;
  }

  /**
   * Get virtualNetworkGateway2
   * @return virtualNetworkGateway2
   */
  @javax.annotation.Nullable
  public VirtualNetworkGateway getVirtualNetworkGateway2() {
    return virtualNetworkGateway2;
  }

  public void setVirtualNetworkGateway2(VirtualNetworkGateway virtualNetworkGateway2) {
    this.virtualNetworkGateway2 = virtualNetworkGateway2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualNetworkGatewayConnectionPropertiesFormat virtualNetworkGatewayConnectionPropertiesFormat = (VirtualNetworkGatewayConnectionPropertiesFormat) o;
    return Objects.equals(this.authorizationKey, virtualNetworkGatewayConnectionPropertiesFormat.authorizationKey) &&
        Objects.equals(this.connectionProtocol, virtualNetworkGatewayConnectionPropertiesFormat.connectionProtocol) &&
        Objects.equals(this.connectionStatus, virtualNetworkGatewayConnectionPropertiesFormat.connectionStatus) &&
        Objects.equals(this.connectionType, virtualNetworkGatewayConnectionPropertiesFormat.connectionType) &&
        Objects.equals(this.egressBytesTransferred, virtualNetworkGatewayConnectionPropertiesFormat.egressBytesTransferred) &&
        Objects.equals(this.enableBgp, virtualNetworkGatewayConnectionPropertiesFormat.enableBgp) &&
        Objects.equals(this.expressRouteGatewayBypass, virtualNetworkGatewayConnectionPropertiesFormat.expressRouteGatewayBypass) &&
        Objects.equals(this.ingressBytesTransferred, virtualNetworkGatewayConnectionPropertiesFormat.ingressBytesTransferred) &&
        Objects.equals(this.ipsecPolicies, virtualNetworkGatewayConnectionPropertiesFormat.ipsecPolicies) &&
        Objects.equals(this.localNetworkGateway2, virtualNetworkGatewayConnectionPropertiesFormat.localNetworkGateway2) &&
        Objects.equals(this.peer, virtualNetworkGatewayConnectionPropertiesFormat.peer) &&
        Objects.equals(this.provisioningState, virtualNetworkGatewayConnectionPropertiesFormat.provisioningState) &&
        Objects.equals(this.resourceGuid, virtualNetworkGatewayConnectionPropertiesFormat.resourceGuid) &&
        Objects.equals(this.routingWeight, virtualNetworkGatewayConnectionPropertiesFormat.routingWeight) &&
        Objects.equals(this.sharedKey, virtualNetworkGatewayConnectionPropertiesFormat.sharedKey) &&
        Objects.equals(this.tunnelConnectionStatus, virtualNetworkGatewayConnectionPropertiesFormat.tunnelConnectionStatus) &&
        Objects.equals(this.usePolicyBasedTrafficSelectors, virtualNetworkGatewayConnectionPropertiesFormat.usePolicyBasedTrafficSelectors) &&
        Objects.equals(this.virtualNetworkGateway1, virtualNetworkGatewayConnectionPropertiesFormat.virtualNetworkGateway1) &&
        Objects.equals(this.virtualNetworkGateway2, virtualNetworkGatewayConnectionPropertiesFormat.virtualNetworkGateway2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationKey, connectionProtocol, connectionStatus, connectionType, egressBytesTransferred, enableBgp, expressRouteGatewayBypass, ingressBytesTransferred, ipsecPolicies, localNetworkGateway2, peer, provisioningState, resourceGuid, routingWeight, sharedKey, tunnelConnectionStatus, usePolicyBasedTrafficSelectors, virtualNetworkGateway1, virtualNetworkGateway2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualNetworkGatewayConnectionPropertiesFormat {\n");
    sb.append("    authorizationKey: ").append(toIndentedString(authorizationKey)).append("\n");
    sb.append("    connectionProtocol: ").append(toIndentedString(connectionProtocol)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    egressBytesTransferred: ").append(toIndentedString(egressBytesTransferred)).append("\n");
    sb.append("    enableBgp: ").append(toIndentedString(enableBgp)).append("\n");
    sb.append("    expressRouteGatewayBypass: ").append(toIndentedString(expressRouteGatewayBypass)).append("\n");
    sb.append("    ingressBytesTransferred: ").append(toIndentedString(ingressBytesTransferred)).append("\n");
    sb.append("    ipsecPolicies: ").append(toIndentedString(ipsecPolicies)).append("\n");
    sb.append("    localNetworkGateway2: ").append(toIndentedString(localNetworkGateway2)).append("\n");
    sb.append("    peer: ").append(toIndentedString(peer)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceGuid: ").append(toIndentedString(resourceGuid)).append("\n");
    sb.append("    routingWeight: ").append(toIndentedString(routingWeight)).append("\n");
    sb.append("    sharedKey: ").append(toIndentedString(sharedKey)).append("\n");
    sb.append("    tunnelConnectionStatus: ").append(toIndentedString(tunnelConnectionStatus)).append("\n");
    sb.append("    usePolicyBasedTrafficSelectors: ").append(toIndentedString(usePolicyBasedTrafficSelectors)).append("\n");
    sb.append("    virtualNetworkGateway1: ").append(toIndentedString(virtualNetworkGateway1)).append("\n");
    sb.append("    virtualNetworkGateway2: ").append(toIndentedString(virtualNetworkGateway2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationKey");
    openapiFields.add("connectionProtocol");
    openapiFields.add("connectionStatus");
    openapiFields.add("connectionType");
    openapiFields.add("egressBytesTransferred");
    openapiFields.add("enableBgp");
    openapiFields.add("expressRouteGatewayBypass");
    openapiFields.add("ingressBytesTransferred");
    openapiFields.add("ipsecPolicies");
    openapiFields.add("localNetworkGateway2");
    openapiFields.add("peer");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceGuid");
    openapiFields.add("routingWeight");
    openapiFields.add("sharedKey");
    openapiFields.add("tunnelConnectionStatus");
    openapiFields.add("usePolicyBasedTrafficSelectors");
    openapiFields.add("virtualNetworkGateway1");
    openapiFields.add("virtualNetworkGateway2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectionType");
    openapiRequiredFields.add("virtualNetworkGateway1");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualNetworkGatewayConnectionPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualNetworkGatewayConnectionPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualNetworkGatewayConnectionPropertiesFormat is not found in the empty JSON string", VirtualNetworkGatewayConnectionPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualNetworkGatewayConnectionPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualNetworkGatewayConnectionPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VirtualNetworkGatewayConnectionPropertiesFormat.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorizationKey") != null && !jsonObj.get("authorizationKey").isJsonNull()) && !jsonObj.get("authorizationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationKey").toString()));
      }
      // validate the optional field `connectionProtocol`
      if (jsonObj.get("connectionProtocol") != null && !jsonObj.get("connectionProtocol").isJsonNull()) {
        ConnectionProtocol.validateJsonElement(jsonObj.get("connectionProtocol"));
      }
      if ((jsonObj.get("connectionStatus") != null && !jsonObj.get("connectionStatus").isJsonNull()) && !jsonObj.get("connectionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionStatus").toString()));
      }
      // validate the optional field `connectionStatus`
      if (jsonObj.get("connectionStatus") != null && !jsonObj.get("connectionStatus").isJsonNull()) {
        ConnectionStatusEnum.validateJsonElement(jsonObj.get("connectionStatus"));
      }
      if (!jsonObj.get("connectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionType").toString()));
      }
      // validate the required field `connectionType`
      ConnectionTypeEnum.validateJsonElement(jsonObj.get("connectionType"));
      if (jsonObj.get("ipsecPolicies") != null && !jsonObj.get("ipsecPolicies").isJsonNull()) {
        JsonArray jsonArrayipsecPolicies = jsonObj.getAsJsonArray("ipsecPolicies");
        if (jsonArrayipsecPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipsecPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipsecPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("ipsecPolicies").toString()));
          }

          // validate the optional field `ipsecPolicies` (array)
          for (int i = 0; i < jsonArrayipsecPolicies.size(); i++) {
            IpsecPolicy.validateJsonElement(jsonArrayipsecPolicies.get(i));
          };
        }
      }
      // validate the optional field `localNetworkGateway2`
      if (jsonObj.get("localNetworkGateway2") != null && !jsonObj.get("localNetworkGateway2").isJsonNull()) {
        LocalNetworkGateway.validateJsonElement(jsonObj.get("localNetworkGateway2"));
      }
      // validate the optional field `peer`
      if (jsonObj.get("peer") != null && !jsonObj.get("peer").isJsonNull()) {
        VirtualNetworkGatewayConnectionListEntityPropertiesFormatPeer.validateJsonElement(jsonObj.get("peer"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("resourceGuid") != null && !jsonObj.get("resourceGuid").isJsonNull()) && !jsonObj.get("resourceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGuid").toString()));
      }
      if ((jsonObj.get("sharedKey") != null && !jsonObj.get("sharedKey").isJsonNull()) && !jsonObj.get("sharedKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedKey").toString()));
      }
      if (jsonObj.get("tunnelConnectionStatus") != null && !jsonObj.get("tunnelConnectionStatus").isJsonNull()) {
        JsonArray jsonArraytunnelConnectionStatus = jsonObj.getAsJsonArray("tunnelConnectionStatus");
        if (jsonArraytunnelConnectionStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tunnelConnectionStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tunnelConnectionStatus` to be an array in the JSON string but got `%s`", jsonObj.get("tunnelConnectionStatus").toString()));
          }

          // validate the optional field `tunnelConnectionStatus` (array)
          for (int i = 0; i < jsonArraytunnelConnectionStatus.size(); i++) {
            TunnelConnectionHealth.validateJsonElement(jsonArraytunnelConnectionStatus.get(i));
          };
        }
      }
      // validate the required field `virtualNetworkGateway1`
      VirtualNetworkGateway.validateJsonElement(jsonObj.get("virtualNetworkGateway1"));
      // validate the optional field `virtualNetworkGateway2`
      if (jsonObj.get("virtualNetworkGateway2") != null && !jsonObj.get("virtualNetworkGateway2").isJsonNull()) {
        VirtualNetworkGateway.validateJsonElement(jsonObj.get("virtualNetworkGateway2"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualNetworkGatewayConnectionPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualNetworkGatewayConnectionPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualNetworkGatewayConnectionPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualNetworkGatewayConnectionPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualNetworkGatewayConnectionPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, VirtualNetworkGatewayConnectionPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualNetworkGatewayConnectionPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualNetworkGatewayConnectionPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualNetworkGatewayConnectionPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to VirtualNetworkGatewayConnectionPropertiesFormat
   */
  public static VirtualNetworkGatewayConnectionPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualNetworkGatewayConnectionPropertiesFormat.class);
  }

  /**
   * Convert an instance of VirtualNetworkGatewayConnectionPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

