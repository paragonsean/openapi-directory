# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionResetSharedKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_length: int=None):
        """ConnectionResetSharedKey - a model defined in OpenAPI

        :param key_length: The key_length of this ConnectionResetSharedKey.
        """
        self.openapi_types = {
            'key_length': int
        }

        self.attribute_map = {
            'key_length': 'keyLength'
        }

        self._key_length = key_length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionResetSharedKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionResetSharedKey of this ConnectionResetSharedKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_length(self):
        """Gets the key_length of this ConnectionResetSharedKey.

        The virtual network connection reset shared key length, should between 1 and 128.

        :return: The key_length of this ConnectionResetSharedKey.
        :rtype: int
        """
        return self._key_length

    @key_length.setter
    def key_length(self, key_length):
        """Sets the key_length of this ConnectionResetSharedKey.

        The virtual network connection reset shared key length, should between 1 and 128.

        :param key_length: The key_length of this ConnectionResetSharedKey.
        :type key_length: int
        """
        if key_length is None:
            raise ValueError("Invalid value for `key_length`, must not be `None`")
        if key_length is not None and key_length > 128:
            raise ValueError("Invalid value for `key_length`, must be a value less than or equal to `128`")
        if key_length is not None and key_length < 1:
            raise ValueError("Invalid value for `key_length`, must be a value greater than or equal to `1`")

        self._key_length = key_length
