# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VpnClientParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_method: str=None, client_root_certificates: List[str]=None, processor_architecture: str=None, radius_server_auth_certificate: str=None):
        """VpnClientParameters - a model defined in OpenAPI

        :param authentication_method: The authentication_method of this VpnClientParameters.
        :param client_root_certificates: The client_root_certificates of this VpnClientParameters.
        :param processor_architecture: The processor_architecture of this VpnClientParameters.
        :param radius_server_auth_certificate: The radius_server_auth_certificate of this VpnClientParameters.
        """
        self.openapi_types = {
            'authentication_method': str,
            'client_root_certificates': List[str],
            'processor_architecture': str,
            'radius_server_auth_certificate': str
        }

        self.attribute_map = {
            'authentication_method': 'authenticationMethod',
            'client_root_certificates': 'clientRootCertificates',
            'processor_architecture': 'processorArchitecture',
            'radius_server_auth_certificate': 'radiusServerAuthCertificate'
        }

        self._authentication_method = authentication_method
        self._client_root_certificates = client_root_certificates
        self._processor_architecture = processor_architecture
        self._radius_server_auth_certificate = radius_server_auth_certificate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VpnClientParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VpnClientParameters of this VpnClientParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_method(self):
        """Gets the authentication_method of this VpnClientParameters.

        VPN client Authentication Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'.

        :return: The authentication_method of this VpnClientParameters.
        :rtype: str
        """
        return self._authentication_method

    @authentication_method.setter
    def authentication_method(self, authentication_method):
        """Sets the authentication_method of this VpnClientParameters.

        VPN client Authentication Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'.

        :param authentication_method: The authentication_method of this VpnClientParameters.
        :type authentication_method: str
        """
        allowed_values = ["EAPTLS", "EAPMSCHAPv2"]  # noqa: E501
        if authentication_method not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_method` ({0}), must be one of {1}"
                .format(authentication_method, allowed_values)
            )

        self._authentication_method = authentication_method

    @property
    def client_root_certificates(self):
        """Gets the client_root_certificates of this VpnClientParameters.

        A list of client root certificates public certificate data encoded as Base-64 strings. Optional parameter for external radius based authentication with EAPTLS.

        :return: The client_root_certificates of this VpnClientParameters.
        :rtype: List[str]
        """
        return self._client_root_certificates

    @client_root_certificates.setter
    def client_root_certificates(self, client_root_certificates):
        """Sets the client_root_certificates of this VpnClientParameters.

        A list of client root certificates public certificate data encoded as Base-64 strings. Optional parameter for external radius based authentication with EAPTLS.

        :param client_root_certificates: The client_root_certificates of this VpnClientParameters.
        :type client_root_certificates: List[str]
        """

        self._client_root_certificates = client_root_certificates

    @property
    def processor_architecture(self):
        """Gets the processor_architecture of this VpnClientParameters.

        VPN client Processor Architecture. Possible values are: 'AMD64' and 'X86'.

        :return: The processor_architecture of this VpnClientParameters.
        :rtype: str
        """
        return self._processor_architecture

    @processor_architecture.setter
    def processor_architecture(self, processor_architecture):
        """Sets the processor_architecture of this VpnClientParameters.

        VPN client Processor Architecture. Possible values are: 'AMD64' and 'X86'.

        :param processor_architecture: The processor_architecture of this VpnClientParameters.
        :type processor_architecture: str
        """
        allowed_values = ["Amd64", "X86"]  # noqa: E501
        if processor_architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `processor_architecture` ({0}), must be one of {1}"
                .format(processor_architecture, allowed_values)
            )

        self._processor_architecture = processor_architecture

    @property
    def radius_server_auth_certificate(self):
        """Gets the radius_server_auth_certificate of this VpnClientParameters.

        The public certificate data for the radius server authentication certificate as a Base-64 encoded string. Required only if external radius authentication has been configured with EAPTLS authentication.

        :return: The radius_server_auth_certificate of this VpnClientParameters.
        :rtype: str
        """
        return self._radius_server_auth_certificate

    @radius_server_auth_certificate.setter
    def radius_server_auth_certificate(self, radius_server_auth_certificate):
        """Sets the radius_server_auth_certificate of this VpnClientParameters.

        The public certificate data for the radius server authentication certificate as a Base-64 encoded string. Required only if external radius authentication has been configured with EAPTLS authentication.

        :param radius_server_auth_certificate: The radius_server_auth_certificate of this VpnClientParameters.
        :type radius_server_auth_certificate: str
        """

        self._radius_server_auth_certificate = radius_server_auth_certificate
