/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BgpPeerStatusListResult;
import org.openapitools.client.model.GatewayRouteListResult;
import org.openapitools.client.model.VirtualNetworkGateway;
import org.openapitools.client.model.VirtualNetworkGatewayConnectionsUpdateTagsRequest;
import org.openapitools.client.model.VirtualNetworkGatewayListConnectionsResult;
import org.openapitools.client.model.VirtualNetworkGatewayListResult;
import org.openapitools.client.model.VpnClientIPsecParameters;
import org.openapitools.client.model.VpnClientParameters;
import org.openapitools.client.model.VpnDeviceScriptParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VirtualNetworkGatewaysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VirtualNetworkGatewaysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VirtualNetworkGatewaysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for virtualNetworkGatewaysCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create or update virtual network gateway operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting VirtualNetworkGateway resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysCreateOrUpdateCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VirtualNetworkGateway parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysCreateOrUpdateValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VirtualNetworkGateway parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling virtualNetworkGatewaysCreateOrUpdate(Async)");
        }

        return virtualNetworkGatewaysCreateOrUpdateCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a virtual network gateway in the specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create or update virtual network gateway operation. (required)
     * @return VirtualNetworkGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting VirtualNetworkGateway resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkGateway virtualNetworkGatewaysCreateOrUpdate(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VirtualNetworkGateway parameters) throws ApiException {
        ApiResponse<VirtualNetworkGateway> localVarResp = virtualNetworkGatewaysCreateOrUpdateWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a virtual network gateway in the specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create or update virtual network gateway operation. (required)
     * @return ApiResponse&lt;VirtualNetworkGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting VirtualNetworkGateway resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkGateway> virtualNetworkGatewaysCreateOrUpdateWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VirtualNetworkGateway parameters) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysCreateOrUpdateValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a virtual network gateway in the specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create or update virtual network gateway operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting VirtualNetworkGateway resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysCreateOrUpdateAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VirtualNetworkGateway parameters, final ApiCallback<VirtualNetworkGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysCreateOrUpdateValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysDeleteCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysDeleteValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysDelete(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysDelete(Async)");
        }

        return virtualNetworkGatewaysDeleteCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified virtual network gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public void virtualNetworkGatewaysDelete(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        virtualNetworkGatewaysDeleteWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified virtual network gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> virtualNetworkGatewaysDeleteWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysDeleteValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified virtual network gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysDeleteAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysDeleteValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysGenerateVpnProfile
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the generate virtual network gateway VPN client package operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VPN profile package URL. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGenerateVpnProfileCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnprofile"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysGenerateVpnProfileValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysGenerateVpnProfile(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysGenerateVpnProfile(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysGenerateVpnProfile(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysGenerateVpnProfile(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling virtualNetworkGatewaysGenerateVpnProfile(Async)");
        }

        return virtualNetworkGatewaysGenerateVpnProfileCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Generates VPN profile for P2S client of the virtual network gateway in the specified resource group. Used for IKEV2 and radius based authentication.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the generate virtual network gateway VPN client package operation. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VPN profile package URL. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public String virtualNetworkGatewaysGenerateVpnProfile(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientParameters parameters) throws ApiException {
        ApiResponse<String> localVarResp = virtualNetworkGatewaysGenerateVpnProfileWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Generates VPN profile for P2S client of the virtual network gateway in the specified resource group. Used for IKEV2 and radius based authentication.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the generate virtual network gateway VPN client package operation. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VPN profile package URL. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> virtualNetworkGatewaysGenerateVpnProfileWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysGenerateVpnProfileValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generates VPN profile for P2S client of the virtual network gateway in the specified resource group. Used for IKEV2 and radius based authentication.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the generate virtual network gateway VPN client package operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VPN profile package URL. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGenerateVpnProfileAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientParameters parameters, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysGenerateVpnProfileValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysGeneratevpnclientpackage
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the generate virtual network gateway VPN client package operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VPN client package URL. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGeneratevpnclientpackageCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnclientpackage"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysGeneratevpnclientpackageValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysGeneratevpnclientpackage(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysGeneratevpnclientpackage(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysGeneratevpnclientpackage(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysGeneratevpnclientpackage(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling virtualNetworkGatewaysGeneratevpnclientpackage(Async)");
        }

        return virtualNetworkGatewaysGeneratevpnclientpackageCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Generates VPN client package for P2S client of the virtual network gateway in the specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the generate virtual network gateway VPN client package operation. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VPN client package URL. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public String virtualNetworkGatewaysGeneratevpnclientpackage(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientParameters parameters) throws ApiException {
        ApiResponse<String> localVarResp = virtualNetworkGatewaysGeneratevpnclientpackageWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Generates VPN client package for P2S client of the virtual network gateway in the specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the generate virtual network gateway VPN client package operation. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VPN client package URL. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> virtualNetworkGatewaysGeneratevpnclientpackageWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysGeneratevpnclientpackageValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generates VPN client package for P2S client of the virtual network gateway in the specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the generate virtual network gateway VPN client package operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VPN client package URL. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGeneratevpnclientpackageAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientParameters parameters, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysGeneratevpnclientpackageValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGetCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysGetValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysGet(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysGet(Async)");
        }

        return virtualNetworkGatewaysGetCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the specified virtual network gateway by resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return VirtualNetworkGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkGateway virtualNetworkGatewaysGet(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<VirtualNetworkGateway> localVarResp = virtualNetworkGatewaysGetWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified virtual network gateway by resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;VirtualNetworkGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkGateway> virtualNetworkGatewaysGetWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysGetValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified virtual network gateway by resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGetAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback<VirtualNetworkGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysGetValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysGetAdvertisedRoutes
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param peer The IP address of the peer (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of learned BGP routes </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGetAdvertisedRoutesCall(String resourceGroupName, String virtualNetworkGatewayName, String peer, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getAdvertisedRoutes"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (peer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("peer", peer));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysGetAdvertisedRoutesValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String peer, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysGetAdvertisedRoutes(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysGetAdvertisedRoutes(Async)");
        }

        // verify the required parameter 'peer' is set
        if (peer == null) {
            throw new ApiException("Missing the required parameter 'peer' when calling virtualNetworkGatewaysGetAdvertisedRoutes(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysGetAdvertisedRoutes(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysGetAdvertisedRoutes(Async)");
        }

        return virtualNetworkGatewaysGetAdvertisedRoutesCall(resourceGroupName, virtualNetworkGatewayName, peer, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * This operation retrieves a list of routes the virtual network gateway is advertising to the specified peer.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param peer The IP address of the peer (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return GatewayRouteListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of learned BGP routes </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayRouteListResult virtualNetworkGatewaysGetAdvertisedRoutes(String resourceGroupName, String virtualNetworkGatewayName, String peer, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<GatewayRouteListResult> localVarResp = virtualNetworkGatewaysGetAdvertisedRoutesWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, peer, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation retrieves a list of routes the virtual network gateway is advertising to the specified peer.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param peer The IP address of the peer (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;GatewayRouteListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of learned BGP routes </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayRouteListResult> virtualNetworkGatewaysGetAdvertisedRoutesWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String peer, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysGetAdvertisedRoutesValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, peer, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<GatewayRouteListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation retrieves a list of routes the virtual network gateway is advertising to the specified peer.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param peer The IP address of the peer (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of learned BGP routes </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGetAdvertisedRoutesAsync(String resourceGroupName, String virtualNetworkGatewayName, String peer, String apiVersion, String subscriptionId, final ApiCallback<GatewayRouteListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysGetAdvertisedRoutesValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, peer, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<GatewayRouteListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysGetBgpPeerStatus
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param peer The IP address of the peer to retrieve the status of. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of BGP peer statuses </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGetBgpPeerStatusCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, String peer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getBgpPeerStatus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (peer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("peer", peer));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysGetBgpPeerStatusValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, String peer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysGetBgpPeerStatus(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysGetBgpPeerStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysGetBgpPeerStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysGetBgpPeerStatus(Async)");
        }

        return virtualNetworkGatewaysGetBgpPeerStatusCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, peer, _callback);

    }

    /**
     * 
     * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param peer The IP address of the peer to retrieve the status of. (optional)
     * @return BgpPeerStatusListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of BGP peer statuses </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public BgpPeerStatusListResult virtualNetworkGatewaysGetBgpPeerStatus(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, String peer) throws ApiException {
        ApiResponse<BgpPeerStatusListResult> localVarResp = virtualNetworkGatewaysGetBgpPeerStatusWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, peer);
        return localVarResp.getData();
    }

    /**
     * 
     * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param peer The IP address of the peer to retrieve the status of. (optional)
     * @return ApiResponse&lt;BgpPeerStatusListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of BGP peer statuses </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BgpPeerStatusListResult> virtualNetworkGatewaysGetBgpPeerStatusWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, String peer) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysGetBgpPeerStatusValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, peer, null);
        Type localVarReturnType = new TypeToken<BgpPeerStatusListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param peer The IP address of the peer to retrieve the status of. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of BGP peer statuses </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGetBgpPeerStatusAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, String peer, final ApiCallback<BgpPeerStatusListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysGetBgpPeerStatusValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, peer, _callback);
        Type localVarReturnType = new TypeToken<BgpPeerStatusListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysGetLearnedRoutes
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of advertised BGP routes </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGetLearnedRoutesCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getLearnedRoutes"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysGetLearnedRoutesValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysGetLearnedRoutes(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysGetLearnedRoutes(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysGetLearnedRoutes(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysGetLearnedRoutes(Async)");
        }

        return virtualNetworkGatewaysGetLearnedRoutesCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * This operation retrieves a list of routes the virtual network gateway has learned, including routes learned from BGP peers.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return GatewayRouteListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of advertised BGP routes </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayRouteListResult virtualNetworkGatewaysGetLearnedRoutes(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<GatewayRouteListResult> localVarResp = virtualNetworkGatewaysGetLearnedRoutesWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation retrieves a list of routes the virtual network gateway has learned, including routes learned from BGP peers.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;GatewayRouteListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of advertised BGP routes </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayRouteListResult> virtualNetworkGatewaysGetLearnedRoutesWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysGetLearnedRoutesValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<GatewayRouteListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation retrieves a list of routes the virtual network gateway has learned, including routes learned from BGP peers.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of advertised BGP routes </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGetLearnedRoutesAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback<GatewayRouteListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysGetLearnedRoutesValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<GatewayRouteListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysGetVpnProfilePackageUrl
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VPN profile package URL. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGetVpnProfilePackageUrlCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getvpnprofilepackageurl"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysGetVpnProfilePackageUrlValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysGetVpnProfilePackageUrl(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysGetVpnProfilePackageUrl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysGetVpnProfilePackageUrl(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysGetVpnProfilePackageUrl(Async)");
        }

        return virtualNetworkGatewaysGetVpnProfilePackageUrlCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets pre-generated VPN profile for P2S client of the virtual network gateway in the specified resource group. The profile needs to be generated first using generateVpnProfile.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VPN profile package URL. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public String virtualNetworkGatewaysGetVpnProfilePackageUrl(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<String> localVarResp = virtualNetworkGatewaysGetVpnProfilePackageUrlWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets pre-generated VPN profile for P2S client of the virtual network gateway in the specified resource group. The profile needs to be generated first using generateVpnProfile.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VPN profile package URL. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> virtualNetworkGatewaysGetVpnProfilePackageUrlWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysGetVpnProfilePackageUrlValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets pre-generated VPN profile for P2S client of the virtual network gateway in the specified resource group. The profile needs to be generated first using generateVpnProfile.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VPN profile package URL. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGetVpnProfilePackageUrlAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysGetVpnProfilePackageUrlValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysGetVpnclientIpsecParameters
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The virtual network gateway name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the set vpnclient ipsec parameters for P2S client of VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGetVpnclientIpsecParametersCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getvpnclientipsecparameters"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysGetVpnclientIpsecParametersValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysGetVpnclientIpsecParameters(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysGetVpnclientIpsecParameters(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysGetVpnclientIpsecParameters(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysGetVpnclientIpsecParameters(Async)");
        }

        return virtualNetworkGatewaysGetVpnclientIpsecParametersCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * The Get VpnclientIpsecParameters operation retrieves information about the vpnclient ipsec policy for P2S client of virtual network gateway in the specified resource group through Network resource provider.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The virtual network gateway name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return VpnClientIPsecParameters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the set vpnclient ipsec parameters for P2S client of VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public VpnClientIPsecParameters virtualNetworkGatewaysGetVpnclientIpsecParameters(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<VpnClientIPsecParameters> localVarResp = virtualNetworkGatewaysGetVpnclientIpsecParametersWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * The Get VpnclientIpsecParameters operation retrieves information about the vpnclient ipsec policy for P2S client of virtual network gateway in the specified resource group through Network resource provider.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The virtual network gateway name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;VpnClientIPsecParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the set vpnclient ipsec parameters for P2S client of VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VpnClientIPsecParameters> virtualNetworkGatewaysGetVpnclientIpsecParametersWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysGetVpnclientIpsecParametersValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<VpnClientIPsecParameters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The Get VpnclientIpsecParameters operation retrieves information about the vpnclient ipsec policy for P2S client of virtual network gateway in the specified resource group through Network resource provider.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The virtual network gateway name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the set vpnclient ipsec parameters for P2S client of VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysGetVpnclientIpsecParametersAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback<VpnClientIPsecParameters> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysGetVpnclientIpsecParametersValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<VpnClientIPsecParameters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysList
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of VirtualNetworkGateway resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysListCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysListValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysList(Async)");
        }

        return virtualNetworkGatewaysListCall(resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all virtual network gateways by resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return VirtualNetworkGatewayListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of VirtualNetworkGateway resources. </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkGatewayListResult virtualNetworkGatewaysList(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<VirtualNetworkGatewayListResult> localVarResp = virtualNetworkGatewaysListWithHttpInfo(resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all virtual network gateways by resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;VirtualNetworkGatewayListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of VirtualNetworkGateway resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkGatewayListResult> virtualNetworkGatewaysListWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysListValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkGatewayListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all virtual network gateways by resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of VirtualNetworkGateway resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysListAsync(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<VirtualNetworkGatewayListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysListValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkGatewayListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysListConnections
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of VirtualNetworkGatewayConnection resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysListConnectionsCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/connections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysListConnectionsValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysListConnections(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysListConnections(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysListConnections(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysListConnections(Async)");
        }

        return virtualNetworkGatewaysListConnectionsCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all the connections in a virtual network gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return VirtualNetworkGatewayListConnectionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of VirtualNetworkGatewayConnection resource. </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkGatewayListConnectionsResult virtualNetworkGatewaysListConnections(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<VirtualNetworkGatewayListConnectionsResult> localVarResp = virtualNetworkGatewaysListConnectionsWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the connections in a virtual network gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;VirtualNetworkGatewayListConnectionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of VirtualNetworkGatewayConnection resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkGatewayListConnectionsResult> virtualNetworkGatewaysListConnectionsWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysListConnectionsValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkGatewayListConnectionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the connections in a virtual network gateway.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of VirtualNetworkGatewayConnection resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysListConnectionsAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback<VirtualNetworkGatewayListConnectionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysListConnectionsValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkGatewayListConnectionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysReset
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param gatewayVip Virtual network gateway vip address supplied to the begin reset of the active-active feature enabled gateway. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation reset the primary of the virtual network gateway. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysResetCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, String gatewayVip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/reset"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gatewayVip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gatewayVip", gatewayVip));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysResetValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, String gatewayVip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysReset(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysReset(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysReset(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysReset(Async)");
        }

        return virtualNetworkGatewaysResetCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, gatewayVip, _callback);

    }

    /**
     * 
     * Resets the primary of the virtual network gateway in the specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param gatewayVip Virtual network gateway vip address supplied to the begin reset of the active-active feature enabled gateway. (optional)
     * @return VirtualNetworkGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation reset the primary of the virtual network gateway. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkGateway virtualNetworkGatewaysReset(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, String gatewayVip) throws ApiException {
        ApiResponse<VirtualNetworkGateway> localVarResp = virtualNetworkGatewaysResetWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, gatewayVip);
        return localVarResp.getData();
    }

    /**
     * 
     * Resets the primary of the virtual network gateway in the specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param gatewayVip Virtual network gateway vip address supplied to the begin reset of the active-active feature enabled gateway. (optional)
     * @return ApiResponse&lt;VirtualNetworkGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation reset the primary of the virtual network gateway. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkGateway> virtualNetworkGatewaysResetWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, String gatewayVip) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysResetValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, gatewayVip, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Resets the primary of the virtual network gateway in the specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param gatewayVip Virtual network gateway vip address supplied to the begin reset of the active-active feature enabled gateway. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation reset the primary of the virtual network gateway. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysResetAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, String gatewayVip, final ApiCallback<VirtualNetworkGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysResetValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, gatewayVip, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysSetVpnclientIpsecParameters
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param vpnclientIpsecParams Parameters supplied to the Begin Set vpnclient ipsec parameters of Virtual Network Gateway P2S client operation through Network resource provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation sets the specified vpnclient ipsec parameters for P2S client of the virtual network gateway. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysSetVpnclientIpsecParametersCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientIPsecParameters vpnclientIpsecParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vpnclientIpsecParams;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/setvpnclientipsecparameters"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysSetVpnclientIpsecParametersValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientIPsecParameters vpnclientIpsecParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysSetVpnclientIpsecParameters(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysSetVpnclientIpsecParameters(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysSetVpnclientIpsecParameters(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysSetVpnclientIpsecParameters(Async)");
        }

        // verify the required parameter 'vpnclientIpsecParams' is set
        if (vpnclientIpsecParams == null) {
            throw new ApiException("Missing the required parameter 'vpnclientIpsecParams' when calling virtualNetworkGatewaysSetVpnclientIpsecParameters(Async)");
        }

        return virtualNetworkGatewaysSetVpnclientIpsecParametersCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, vpnclientIpsecParams, _callback);

    }

    /**
     * 
     * The Set VpnclientIpsecParameters operation sets the vpnclient ipsec policy for P2S client of virtual network gateway in the specified resource group through Network resource provider.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param vpnclientIpsecParams Parameters supplied to the Begin Set vpnclient ipsec parameters of Virtual Network Gateway P2S client operation through Network resource provider. (required)
     * @return VpnClientIPsecParameters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation sets the specified vpnclient ipsec parameters for P2S client of the virtual network gateway. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public VpnClientIPsecParameters virtualNetworkGatewaysSetVpnclientIpsecParameters(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientIPsecParameters vpnclientIpsecParams) throws ApiException {
        ApiResponse<VpnClientIPsecParameters> localVarResp = virtualNetworkGatewaysSetVpnclientIpsecParametersWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, vpnclientIpsecParams);
        return localVarResp.getData();
    }

    /**
     * 
     * The Set VpnclientIpsecParameters operation sets the vpnclient ipsec policy for P2S client of virtual network gateway in the specified resource group through Network resource provider.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param vpnclientIpsecParams Parameters supplied to the Begin Set vpnclient ipsec parameters of Virtual Network Gateway P2S client operation through Network resource provider. (required)
     * @return ApiResponse&lt;VpnClientIPsecParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation sets the specified vpnclient ipsec parameters for P2S client of the virtual network gateway. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VpnClientIPsecParameters> virtualNetworkGatewaysSetVpnclientIpsecParametersWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientIPsecParameters vpnclientIpsecParams) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysSetVpnclientIpsecParametersValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, vpnclientIpsecParams, null);
        Type localVarReturnType = new TypeToken<VpnClientIPsecParameters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The Set VpnclientIpsecParameters operation sets the vpnclient ipsec policy for P2S client of virtual network gateway in the specified resource group through Network resource provider.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param vpnclientIpsecParams Parameters supplied to the Begin Set vpnclient ipsec parameters of Virtual Network Gateway P2S client operation through Network resource provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation sets the specified vpnclient ipsec parameters for P2S client of the virtual network gateway. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysSetVpnclientIpsecParametersAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VpnClientIPsecParameters vpnclientIpsecParams, final ApiCallback<VpnClientIPsecParameters> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysSetVpnclientIpsecParametersValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, vpnclientIpsecParams, _callback);
        Type localVarReturnType = new TypeToken<VpnClientIPsecParameters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysSupportedVpnDevices
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Xml format representation for supported vpn devices. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysSupportedVpnDevicesCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/supportedvpndevices"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysSupportedVpnDevicesValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysSupportedVpnDevices(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysSupportedVpnDevices(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysSupportedVpnDevices(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysSupportedVpnDevices(Async)");
        }

        return virtualNetworkGatewaysSupportedVpnDevicesCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a xml format representation for supported vpn devices.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Xml format representation for supported vpn devices. </td><td>  -  </td></tr>
     </table>
     */
    public String virtualNetworkGatewaysSupportedVpnDevices(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<String> localVarResp = virtualNetworkGatewaysSupportedVpnDevicesWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a xml format representation for supported vpn devices.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Xml format representation for supported vpn devices. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> virtualNetworkGatewaysSupportedVpnDevicesWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysSupportedVpnDevicesValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a xml format representation for supported vpn devices.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Xml format representation for supported vpn devices. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysSupportedVpnDevicesAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysSupportedVpnDevicesValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysUpdateTags
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to update virtual network gateway tags. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysUpdateTagsCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VirtualNetworkGatewayConnectionsUpdateTagsRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysUpdateTagsValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VirtualNetworkGatewayConnectionsUpdateTagsRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysUpdateTags(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayName' is set
        if (virtualNetworkGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayName' when calling virtualNetworkGatewaysUpdateTags(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysUpdateTags(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysUpdateTags(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling virtualNetworkGatewaysUpdateTags(Async)");
        }

        return virtualNetworkGatewaysUpdateTagsCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Updates a virtual network gateway tags.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to update virtual network gateway tags. (required)
     * @return VirtualNetworkGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public VirtualNetworkGateway virtualNetworkGatewaysUpdateTags(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VirtualNetworkGatewayConnectionsUpdateTagsRequest parameters) throws ApiException {
        ApiResponse<VirtualNetworkGateway> localVarResp = virtualNetworkGatewaysUpdateTagsWithHttpInfo(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a virtual network gateway tags.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to update virtual network gateway tags. (required)
     * @return ApiResponse&lt;VirtualNetworkGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualNetworkGateway> virtualNetworkGatewaysUpdateTagsWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VirtualNetworkGatewayConnectionsUpdateTagsRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysUpdateTagsValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<VirtualNetworkGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a virtual network gateway tags.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayName The name of the virtual network gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to update virtual network gateway tags. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting VirtualNetworkGateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysUpdateTagsAsync(String resourceGroupName, String virtualNetworkGatewayName, String apiVersion, String subscriptionId, VirtualNetworkGatewayConnectionsUpdateTagsRequest parameters, final ApiCallback<VirtualNetworkGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysUpdateTagsValidateBeforeCall(resourceGroupName, virtualNetworkGatewayName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<VirtualNetworkGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualNetworkGatewaysVpnDeviceConfigurationScript
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection for which the configuration script is generated. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the generate vpn device script operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Xml format representation for vpn device configuration script. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysVpnDeviceConfigurationScriptCall(String resourceGroupName, String virtualNetworkGatewayConnectionName, String apiVersion, String subscriptionId, VpnDeviceScriptParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/vpndeviceconfigurationscript"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualNetworkGatewayConnectionName" + "}", localVarApiClient.escapeString(virtualNetworkGatewayConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualNetworkGatewaysVpnDeviceConfigurationScriptValidateBeforeCall(String resourceGroupName, String virtualNetworkGatewayConnectionName, String apiVersion, String subscriptionId, VpnDeviceScriptParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualNetworkGatewaysVpnDeviceConfigurationScript(Async)");
        }

        // verify the required parameter 'virtualNetworkGatewayConnectionName' is set
        if (virtualNetworkGatewayConnectionName == null) {
            throw new ApiException("Missing the required parameter 'virtualNetworkGatewayConnectionName' when calling virtualNetworkGatewaysVpnDeviceConfigurationScript(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualNetworkGatewaysVpnDeviceConfigurationScript(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualNetworkGatewaysVpnDeviceConfigurationScript(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling virtualNetworkGatewaysVpnDeviceConfigurationScript(Async)");
        }

        return virtualNetworkGatewaysVpnDeviceConfigurationScriptCall(resourceGroupName, virtualNetworkGatewayConnectionName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Gets a xml format representation for vpn device configuration script.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection for which the configuration script is generated. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the generate vpn device script operation. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Xml format representation for vpn device configuration script. </td><td>  -  </td></tr>
     </table>
     */
    public String virtualNetworkGatewaysVpnDeviceConfigurationScript(String resourceGroupName, String virtualNetworkGatewayConnectionName, String apiVersion, String subscriptionId, VpnDeviceScriptParameters parameters) throws ApiException {
        ApiResponse<String> localVarResp = virtualNetworkGatewaysVpnDeviceConfigurationScriptWithHttpInfo(resourceGroupName, virtualNetworkGatewayConnectionName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a xml format representation for vpn device configuration script.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection for which the configuration script is generated. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the generate vpn device script operation. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Xml format representation for vpn device configuration script. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> virtualNetworkGatewaysVpnDeviceConfigurationScriptWithHttpInfo(String resourceGroupName, String virtualNetworkGatewayConnectionName, String apiVersion, String subscriptionId, VpnDeviceScriptParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = virtualNetworkGatewaysVpnDeviceConfigurationScriptValidateBeforeCall(resourceGroupName, virtualNetworkGatewayConnectionName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a xml format representation for vpn device configuration script.
     * @param resourceGroupName The name of the resource group. (required)
     * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection for which the configuration script is generated. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the generate vpn device script operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Xml format representation for vpn device configuration script. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualNetworkGatewaysVpnDeviceConfigurationScriptAsync(String resourceGroupName, String virtualNetworkGatewayConnectionName, String apiVersion, String subscriptionId, VpnDeviceScriptParameters parameters, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualNetworkGatewaysVpnDeviceConfigurationScriptValidateBeforeCall(resourceGroupName, virtualNetworkGatewayConnectionName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
