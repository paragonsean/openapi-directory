/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Vpn Client Parameters for package generation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:43:53.727329-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VpnClientParameters {
  /**
   * VPN client Authentication Method. Possible values are: &#39;EAPTLS&#39; and &#39;EAPMSCHAPv2&#39;.
   */
  @JsonAdapter(AuthenticationMethodEnum.Adapter.class)
  public enum AuthenticationMethodEnum {
    EAPTLS("EAPTLS"),
    
    EAPMSCHAPV2("EAPMSCHAPv2");

    private String value;

    AuthenticationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationMethodEnum fromValue(String value) {
      for (AuthenticationMethodEnum b : AuthenticationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_METHOD = "authenticationMethod";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_METHOD)
  private AuthenticationMethodEnum authenticationMethod;

  public static final String SERIALIZED_NAME_CLIENT_ROOT_CERTIFICATES = "clientRootCertificates";
  @SerializedName(SERIALIZED_NAME_CLIENT_ROOT_CERTIFICATES)
  private List<String> clientRootCertificates = new ArrayList<>();

  /**
   * VPN client Processor Architecture. Possible values are: &#39;AMD64&#39; and &#39;X86&#39;.
   */
  @JsonAdapter(ProcessorArchitectureEnum.Adapter.class)
  public enum ProcessorArchitectureEnum {
    AMD64("Amd64"),
    
    X86("X86");

    private String value;

    ProcessorArchitectureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessorArchitectureEnum fromValue(String value) {
      for (ProcessorArchitectureEnum b : ProcessorArchitectureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessorArchitectureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessorArchitectureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessorArchitectureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessorArchitectureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessorArchitectureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESSOR_ARCHITECTURE = "processorArchitecture";
  @SerializedName(SERIALIZED_NAME_PROCESSOR_ARCHITECTURE)
  private ProcessorArchitectureEnum processorArchitecture;

  public static final String SERIALIZED_NAME_RADIUS_SERVER_AUTH_CERTIFICATE = "radiusServerAuthCertificate";
  @SerializedName(SERIALIZED_NAME_RADIUS_SERVER_AUTH_CERTIFICATE)
  private String radiusServerAuthCertificate;

  public VpnClientParameters() {
  }

  public VpnClientParameters authenticationMethod(AuthenticationMethodEnum authenticationMethod) {
    this.authenticationMethod = authenticationMethod;
    return this;
  }

  /**
   * VPN client Authentication Method. Possible values are: &#39;EAPTLS&#39; and &#39;EAPMSCHAPv2&#39;.
   * @return authenticationMethod
   */
  @javax.annotation.Nullable
  public AuthenticationMethodEnum getAuthenticationMethod() {
    return authenticationMethod;
  }

  public void setAuthenticationMethod(AuthenticationMethodEnum authenticationMethod) {
    this.authenticationMethod = authenticationMethod;
  }


  public VpnClientParameters clientRootCertificates(List<String> clientRootCertificates) {
    this.clientRootCertificates = clientRootCertificates;
    return this;
  }

  public VpnClientParameters addClientRootCertificatesItem(String clientRootCertificatesItem) {
    if (this.clientRootCertificates == null) {
      this.clientRootCertificates = new ArrayList<>();
    }
    this.clientRootCertificates.add(clientRootCertificatesItem);
    return this;
  }

  /**
   * A list of client root certificates public certificate data encoded as Base-64 strings. Optional parameter for external radius based authentication with EAPTLS.
   * @return clientRootCertificates
   */
  @javax.annotation.Nullable
  public List<String> getClientRootCertificates() {
    return clientRootCertificates;
  }

  public void setClientRootCertificates(List<String> clientRootCertificates) {
    this.clientRootCertificates = clientRootCertificates;
  }


  public VpnClientParameters processorArchitecture(ProcessorArchitectureEnum processorArchitecture) {
    this.processorArchitecture = processorArchitecture;
    return this;
  }

  /**
   * VPN client Processor Architecture. Possible values are: &#39;AMD64&#39; and &#39;X86&#39;.
   * @return processorArchitecture
   */
  @javax.annotation.Nullable
  public ProcessorArchitectureEnum getProcessorArchitecture() {
    return processorArchitecture;
  }

  public void setProcessorArchitecture(ProcessorArchitectureEnum processorArchitecture) {
    this.processorArchitecture = processorArchitecture;
  }


  public VpnClientParameters radiusServerAuthCertificate(String radiusServerAuthCertificate) {
    this.radiusServerAuthCertificate = radiusServerAuthCertificate;
    return this;
  }

  /**
   * The public certificate data for the radius server authentication certificate as a Base-64 encoded string. Required only if external radius authentication has been configured with EAPTLS authentication.
   * @return radiusServerAuthCertificate
   */
  @javax.annotation.Nullable
  public String getRadiusServerAuthCertificate() {
    return radiusServerAuthCertificate;
  }

  public void setRadiusServerAuthCertificate(String radiusServerAuthCertificate) {
    this.radiusServerAuthCertificate = radiusServerAuthCertificate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpnClientParameters vpnClientParameters = (VpnClientParameters) o;
    return Objects.equals(this.authenticationMethod, vpnClientParameters.authenticationMethod) &&
        Objects.equals(this.clientRootCertificates, vpnClientParameters.clientRootCertificates) &&
        Objects.equals(this.processorArchitecture, vpnClientParameters.processorArchitecture) &&
        Objects.equals(this.radiusServerAuthCertificate, vpnClientParameters.radiusServerAuthCertificate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationMethod, clientRootCertificates, processorArchitecture, radiusServerAuthCertificate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpnClientParameters {\n");
    sb.append("    authenticationMethod: ").append(toIndentedString(authenticationMethod)).append("\n");
    sb.append("    clientRootCertificates: ").append(toIndentedString(clientRootCertificates)).append("\n");
    sb.append("    processorArchitecture: ").append(toIndentedString(processorArchitecture)).append("\n");
    sb.append("    radiusServerAuthCertificate: ").append(toIndentedString(radiusServerAuthCertificate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationMethod");
    openapiFields.add("clientRootCertificates");
    openapiFields.add("processorArchitecture");
    openapiFields.add("radiusServerAuthCertificate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VpnClientParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VpnClientParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VpnClientParameters is not found in the empty JSON string", VpnClientParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VpnClientParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VpnClientParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authenticationMethod") != null && !jsonObj.get("authenticationMethod").isJsonNull()) && !jsonObj.get("authenticationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationMethod").toString()));
      }
      // validate the optional field `authenticationMethod`
      if (jsonObj.get("authenticationMethod") != null && !jsonObj.get("authenticationMethod").isJsonNull()) {
        AuthenticationMethodEnum.validateJsonElement(jsonObj.get("authenticationMethod"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clientRootCertificates") != null && !jsonObj.get("clientRootCertificates").isJsonNull() && !jsonObj.get("clientRootCertificates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRootCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("clientRootCertificates").toString()));
      }
      if ((jsonObj.get("processorArchitecture") != null && !jsonObj.get("processorArchitecture").isJsonNull()) && !jsonObj.get("processorArchitecture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processorArchitecture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processorArchitecture").toString()));
      }
      // validate the optional field `processorArchitecture`
      if (jsonObj.get("processorArchitecture") != null && !jsonObj.get("processorArchitecture").isJsonNull()) {
        ProcessorArchitectureEnum.validateJsonElement(jsonObj.get("processorArchitecture"));
      }
      if ((jsonObj.get("radiusServerAuthCertificate") != null && !jsonObj.get("radiusServerAuthCertificate").isJsonNull()) && !jsonObj.get("radiusServerAuthCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radiusServerAuthCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radiusServerAuthCertificate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VpnClientParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VpnClientParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VpnClientParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VpnClientParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<VpnClientParameters>() {
           @Override
           public void write(JsonWriter out, VpnClientParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VpnClientParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VpnClientParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VpnClientParameters
   * @throws IOException if the JSON string is invalid with respect to VpnClientParameters
   */
  public static VpnClientParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VpnClientParameters.class);
  }

  /**
   * Convert an instance of VpnClientParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

