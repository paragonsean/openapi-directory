/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BGP peer status details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:43:46.652050-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BgpPeerStatus {
  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private Integer asn;

  public static final String SERIALIZED_NAME_CONNECTED_DURATION = "connectedDuration";
  @SerializedName(SERIALIZED_NAME_CONNECTED_DURATION)
  private String connectedDuration;

  public static final String SERIALIZED_NAME_LOCAL_ADDRESS = "localAddress";
  @SerializedName(SERIALIZED_NAME_LOCAL_ADDRESS)
  private String localAddress;

  public static final String SERIALIZED_NAME_MESSAGES_RECEIVED = "messagesReceived";
  @SerializedName(SERIALIZED_NAME_MESSAGES_RECEIVED)
  private Long messagesReceived;

  public static final String SERIALIZED_NAME_MESSAGES_SENT = "messagesSent";
  @SerializedName(SERIALIZED_NAME_MESSAGES_SENT)
  private Long messagesSent;

  public static final String SERIALIZED_NAME_NEIGHBOR = "neighbor";
  @SerializedName(SERIALIZED_NAME_NEIGHBOR)
  private String neighbor;

  public static final String SERIALIZED_NAME_ROUTES_RECEIVED = "routesReceived";
  @SerializedName(SERIALIZED_NAME_ROUTES_RECEIVED)
  private Long routesReceived;

  /**
   * The BGP peer state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNKNOWN("Unknown"),
    
    STOPPED("Stopped"),
    
    IDLE("Idle"),
    
    CONNECTING("Connecting"),
    
    CONNECTED("Connected");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public BgpPeerStatus() {
  }

  public BgpPeerStatus(
     Integer asn, 
     String connectedDuration, 
     String localAddress, 
     Long messagesReceived, 
     Long messagesSent, 
     String neighbor, 
     Long routesReceived, 
     StateEnum state
  ) {
    this();
    this.asn = asn;
    this.connectedDuration = connectedDuration;
    this.localAddress = localAddress;
    this.messagesReceived = messagesReceived;
    this.messagesSent = messagesSent;
    this.neighbor = neighbor;
    this.routesReceived = routesReceived;
    this.state = state;
  }

  /**
   * The autonomous system number of the remote BGP peer
   * @return asn
   */
  @javax.annotation.Nullable
  public Integer getAsn() {
    return asn;
  }



  /**
   * For how long the peering has been up
   * @return connectedDuration
   */
  @javax.annotation.Nullable
  public String getConnectedDuration() {
    return connectedDuration;
  }



  /**
   * The virtual network gateway&#39;s local address
   * @return localAddress
   */
  @javax.annotation.Nullable
  public String getLocalAddress() {
    return localAddress;
  }



  /**
   * The number of BGP messages received
   * @return messagesReceived
   */
  @javax.annotation.Nullable
  public Long getMessagesReceived() {
    return messagesReceived;
  }



  /**
   * The number of BGP messages sent
   * @return messagesSent
   */
  @javax.annotation.Nullable
  public Long getMessagesSent() {
    return messagesSent;
  }



  /**
   * The remote BGP peer
   * @return neighbor
   */
  @javax.annotation.Nullable
  public String getNeighbor() {
    return neighbor;
  }



  /**
   * The number of routes learned from this peer
   * @return routesReceived
   */
  @javax.annotation.Nullable
  public Long getRoutesReceived() {
    return routesReceived;
  }



  /**
   * The BGP peer state
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BgpPeerStatus bgpPeerStatus = (BgpPeerStatus) o;
    return Objects.equals(this.asn, bgpPeerStatus.asn) &&
        Objects.equals(this.connectedDuration, bgpPeerStatus.connectedDuration) &&
        Objects.equals(this.localAddress, bgpPeerStatus.localAddress) &&
        Objects.equals(this.messagesReceived, bgpPeerStatus.messagesReceived) &&
        Objects.equals(this.messagesSent, bgpPeerStatus.messagesSent) &&
        Objects.equals(this.neighbor, bgpPeerStatus.neighbor) &&
        Objects.equals(this.routesReceived, bgpPeerStatus.routesReceived) &&
        Objects.equals(this.state, bgpPeerStatus.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asn, connectedDuration, localAddress, messagesReceived, messagesSent, neighbor, routesReceived, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BgpPeerStatus {\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    connectedDuration: ").append(toIndentedString(connectedDuration)).append("\n");
    sb.append("    localAddress: ").append(toIndentedString(localAddress)).append("\n");
    sb.append("    messagesReceived: ").append(toIndentedString(messagesReceived)).append("\n");
    sb.append("    messagesSent: ").append(toIndentedString(messagesSent)).append("\n");
    sb.append("    neighbor: ").append(toIndentedString(neighbor)).append("\n");
    sb.append("    routesReceived: ").append(toIndentedString(routesReceived)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asn");
    openapiFields.add("connectedDuration");
    openapiFields.add("localAddress");
    openapiFields.add("messagesReceived");
    openapiFields.add("messagesSent");
    openapiFields.add("neighbor");
    openapiFields.add("routesReceived");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BgpPeerStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BgpPeerStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BgpPeerStatus is not found in the empty JSON string", BgpPeerStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BgpPeerStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BgpPeerStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectedDuration") != null && !jsonObj.get("connectedDuration").isJsonNull()) && !jsonObj.get("connectedDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectedDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectedDuration").toString()));
      }
      if ((jsonObj.get("localAddress") != null && !jsonObj.get("localAddress").isJsonNull()) && !jsonObj.get("localAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localAddress").toString()));
      }
      if ((jsonObj.get("neighbor") != null && !jsonObj.get("neighbor").isJsonNull()) && !jsonObj.get("neighbor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neighbor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neighbor").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BgpPeerStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BgpPeerStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BgpPeerStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BgpPeerStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<BgpPeerStatus>() {
           @Override
           public void write(JsonWriter out, BgpPeerStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BgpPeerStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BgpPeerStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BgpPeerStatus
   * @throws IOException if the JSON string is invalid with respect to BgpPeerStatus
   */
  public static BgpPeerStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BgpPeerStatus.class);
  }

  /**
   * Convert an instance of BgpPeerStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

