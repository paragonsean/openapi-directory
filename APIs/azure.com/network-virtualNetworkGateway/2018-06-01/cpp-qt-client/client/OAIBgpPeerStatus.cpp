/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBgpPeerStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBgpPeerStatus::OAIBgpPeerStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBgpPeerStatus::OAIBgpPeerStatus() {
    this->initializeModel();
}

OAIBgpPeerStatus::~OAIBgpPeerStatus() {}

void OAIBgpPeerStatus::initializeModel() {

    m_asn_isSet = false;
    m_asn_isValid = false;

    m_connected_duration_isSet = false;
    m_connected_duration_isValid = false;

    m_local_address_isSet = false;
    m_local_address_isValid = false;

    m_messages_received_isSet = false;
    m_messages_received_isValid = false;

    m_messages_sent_isSet = false;
    m_messages_sent_isValid = false;

    m_neighbor_isSet = false;
    m_neighbor_isValid = false;

    m_routes_received_isSet = false;
    m_routes_received_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIBgpPeerStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBgpPeerStatus::fromJsonObject(QJsonObject json) {

    m_asn_isValid = ::OpenAPI::fromJsonValue(m_asn, json[QString("asn")]);
    m_asn_isSet = !json[QString("asn")].isNull() && m_asn_isValid;

    m_connected_duration_isValid = ::OpenAPI::fromJsonValue(m_connected_duration, json[QString("connectedDuration")]);
    m_connected_duration_isSet = !json[QString("connectedDuration")].isNull() && m_connected_duration_isValid;

    m_local_address_isValid = ::OpenAPI::fromJsonValue(m_local_address, json[QString("localAddress")]);
    m_local_address_isSet = !json[QString("localAddress")].isNull() && m_local_address_isValid;

    m_messages_received_isValid = ::OpenAPI::fromJsonValue(m_messages_received, json[QString("messagesReceived")]);
    m_messages_received_isSet = !json[QString("messagesReceived")].isNull() && m_messages_received_isValid;

    m_messages_sent_isValid = ::OpenAPI::fromJsonValue(m_messages_sent, json[QString("messagesSent")]);
    m_messages_sent_isSet = !json[QString("messagesSent")].isNull() && m_messages_sent_isValid;

    m_neighbor_isValid = ::OpenAPI::fromJsonValue(m_neighbor, json[QString("neighbor")]);
    m_neighbor_isSet = !json[QString("neighbor")].isNull() && m_neighbor_isValid;

    m_routes_received_isValid = ::OpenAPI::fromJsonValue(m_routes_received, json[QString("routesReceived")]);
    m_routes_received_isSet = !json[QString("routesReceived")].isNull() && m_routes_received_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIBgpPeerStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBgpPeerStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_asn_isSet) {
        obj.insert(QString("asn"), ::OpenAPI::toJsonValue(m_asn));
    }
    if (m_connected_duration_isSet) {
        obj.insert(QString("connectedDuration"), ::OpenAPI::toJsonValue(m_connected_duration));
    }
    if (m_local_address_isSet) {
        obj.insert(QString("localAddress"), ::OpenAPI::toJsonValue(m_local_address));
    }
    if (m_messages_received_isSet) {
        obj.insert(QString("messagesReceived"), ::OpenAPI::toJsonValue(m_messages_received));
    }
    if (m_messages_sent_isSet) {
        obj.insert(QString("messagesSent"), ::OpenAPI::toJsonValue(m_messages_sent));
    }
    if (m_neighbor_isSet) {
        obj.insert(QString("neighbor"), ::OpenAPI::toJsonValue(m_neighbor));
    }
    if (m_routes_received_isSet) {
        obj.insert(QString("routesReceived"), ::OpenAPI::toJsonValue(m_routes_received));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

qint32 OAIBgpPeerStatus::getAsn() const {
    return m_asn;
}
void OAIBgpPeerStatus::setAsn(const qint32 &asn) {
    m_asn = asn;
    m_asn_isSet = true;
}

bool OAIBgpPeerStatus::is_asn_Set() const{
    return m_asn_isSet;
}

bool OAIBgpPeerStatus::is_asn_Valid() const{
    return m_asn_isValid;
}

QString OAIBgpPeerStatus::getConnectedDuration() const {
    return m_connected_duration;
}
void OAIBgpPeerStatus::setConnectedDuration(const QString &connected_duration) {
    m_connected_duration = connected_duration;
    m_connected_duration_isSet = true;
}

bool OAIBgpPeerStatus::is_connected_duration_Set() const{
    return m_connected_duration_isSet;
}

bool OAIBgpPeerStatus::is_connected_duration_Valid() const{
    return m_connected_duration_isValid;
}

QString OAIBgpPeerStatus::getLocalAddress() const {
    return m_local_address;
}
void OAIBgpPeerStatus::setLocalAddress(const QString &local_address) {
    m_local_address = local_address;
    m_local_address_isSet = true;
}

bool OAIBgpPeerStatus::is_local_address_Set() const{
    return m_local_address_isSet;
}

bool OAIBgpPeerStatus::is_local_address_Valid() const{
    return m_local_address_isValid;
}

qint64 OAIBgpPeerStatus::getMessagesReceived() const {
    return m_messages_received;
}
void OAIBgpPeerStatus::setMessagesReceived(const qint64 &messages_received) {
    m_messages_received = messages_received;
    m_messages_received_isSet = true;
}

bool OAIBgpPeerStatus::is_messages_received_Set() const{
    return m_messages_received_isSet;
}

bool OAIBgpPeerStatus::is_messages_received_Valid() const{
    return m_messages_received_isValid;
}

qint64 OAIBgpPeerStatus::getMessagesSent() const {
    return m_messages_sent;
}
void OAIBgpPeerStatus::setMessagesSent(const qint64 &messages_sent) {
    m_messages_sent = messages_sent;
    m_messages_sent_isSet = true;
}

bool OAIBgpPeerStatus::is_messages_sent_Set() const{
    return m_messages_sent_isSet;
}

bool OAIBgpPeerStatus::is_messages_sent_Valid() const{
    return m_messages_sent_isValid;
}

QString OAIBgpPeerStatus::getNeighbor() const {
    return m_neighbor;
}
void OAIBgpPeerStatus::setNeighbor(const QString &neighbor) {
    m_neighbor = neighbor;
    m_neighbor_isSet = true;
}

bool OAIBgpPeerStatus::is_neighbor_Set() const{
    return m_neighbor_isSet;
}

bool OAIBgpPeerStatus::is_neighbor_Valid() const{
    return m_neighbor_isValid;
}

qint64 OAIBgpPeerStatus::getRoutesReceived() const {
    return m_routes_received;
}
void OAIBgpPeerStatus::setRoutesReceived(const qint64 &routes_received) {
    m_routes_received = routes_received;
    m_routes_received_isSet = true;
}

bool OAIBgpPeerStatus::is_routes_received_Set() const{
    return m_routes_received_isSet;
}

bool OAIBgpPeerStatus::is_routes_received_Valid() const{
    return m_routes_received_isValid;
}

QString OAIBgpPeerStatus::getState() const {
    return m_state;
}
void OAIBgpPeerStatus::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBgpPeerStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBgpPeerStatus::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIBgpPeerStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighbor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routes_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBgpPeerStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
