/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnClientRootCertificatePropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnClientRootCertificatePropertiesFormat::OAIVpnClientRootCertificatePropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnClientRootCertificatePropertiesFormat::OAIVpnClientRootCertificatePropertiesFormat() {
    this->initializeModel();
}

OAIVpnClientRootCertificatePropertiesFormat::~OAIVpnClientRootCertificatePropertiesFormat() {}

void OAIVpnClientRootCertificatePropertiesFormat::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_cert_data_isSet = false;
    m_public_cert_data_isValid = false;
}

void OAIVpnClientRootCertificatePropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnClientRootCertificatePropertiesFormat::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_cert_data_isValid = ::OpenAPI::fromJsonValue(m_public_cert_data, json[QString("publicCertData")]);
    m_public_cert_data_isSet = !json[QString("publicCertData")].isNull() && m_public_cert_data_isValid;
}

QString OAIVpnClientRootCertificatePropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnClientRootCertificatePropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_cert_data_isSet) {
        obj.insert(QString("publicCertData"), ::OpenAPI::toJsonValue(m_public_cert_data));
    }
    return obj;
}

QString OAIVpnClientRootCertificatePropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVpnClientRootCertificatePropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVpnClientRootCertificatePropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVpnClientRootCertificatePropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIVpnClientRootCertificatePropertiesFormat::getPublicCertData() const {
    return m_public_cert_data;
}
void OAIVpnClientRootCertificatePropertiesFormat::setPublicCertData(const QString &public_cert_data) {
    m_public_cert_data = public_cert_data;
    m_public_cert_data_isSet = true;
}

bool OAIVpnClientRootCertificatePropertiesFormat::is_public_cert_data_Set() const{
    return m_public_cert_data_isSet;
}

bool OAIVpnClientRootCertificatePropertiesFormat::is_public_cert_data_Valid() const{
    return m_public_cert_data_isValid;
}

bool OAIVpnClientRootCertificatePropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_cert_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnClientRootCertificatePropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_public_cert_data_isValid && true;
}

} // namespace OpenAPI
