/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetworkManagementClient);
  }
}(this, function(expect, NetworkManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetworkManagementClient.VirtualNetworkGatewaysApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VirtualNetworkGatewaysApi', function() {
    describe('virtualNetworkGatewaysCreateOrUpdate', function() {
      it('should call virtualNetworkGatewaysCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysCreateOrUpdate
        //instance.virtualNetworkGatewaysCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysDelete', function() {
      it('should call virtualNetworkGatewaysDelete successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysDelete
        //instance.virtualNetworkGatewaysDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysGenerateVpnProfile', function() {
      it('should call virtualNetworkGatewaysGenerateVpnProfile successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysGenerateVpnProfile
        //instance.virtualNetworkGatewaysGenerateVpnProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysGeneratevpnclientpackage', function() {
      it('should call virtualNetworkGatewaysGeneratevpnclientpackage successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysGeneratevpnclientpackage
        //instance.virtualNetworkGatewaysGeneratevpnclientpackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysGet', function() {
      it('should call virtualNetworkGatewaysGet successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysGet
        //instance.virtualNetworkGatewaysGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysGetAdvertisedRoutes', function() {
      it('should call virtualNetworkGatewaysGetAdvertisedRoutes successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysGetAdvertisedRoutes
        //instance.virtualNetworkGatewaysGetAdvertisedRoutes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysGetBgpPeerStatus', function() {
      it('should call virtualNetworkGatewaysGetBgpPeerStatus successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysGetBgpPeerStatus
        //instance.virtualNetworkGatewaysGetBgpPeerStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysGetLearnedRoutes', function() {
      it('should call virtualNetworkGatewaysGetLearnedRoutes successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysGetLearnedRoutes
        //instance.virtualNetworkGatewaysGetLearnedRoutes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysGetVpnProfilePackageUrl', function() {
      it('should call virtualNetworkGatewaysGetVpnProfilePackageUrl successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysGetVpnProfilePackageUrl
        //instance.virtualNetworkGatewaysGetVpnProfilePackageUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysGetVpnclientIpsecParameters', function() {
      it('should call virtualNetworkGatewaysGetVpnclientIpsecParameters successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysGetVpnclientIpsecParameters
        //instance.virtualNetworkGatewaysGetVpnclientIpsecParameters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysList', function() {
      it('should call virtualNetworkGatewaysList successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysList
        //instance.virtualNetworkGatewaysList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysListConnections', function() {
      it('should call virtualNetworkGatewaysListConnections successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysListConnections
        //instance.virtualNetworkGatewaysListConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysReset', function() {
      it('should call virtualNetworkGatewaysReset successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysReset
        //instance.virtualNetworkGatewaysReset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysResetVpnClientSharedKey', function() {
      it('should call virtualNetworkGatewaysResetVpnClientSharedKey successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysResetVpnClientSharedKey
        //instance.virtualNetworkGatewaysResetVpnClientSharedKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysSetVpnclientIpsecParameters', function() {
      it('should call virtualNetworkGatewaysSetVpnclientIpsecParameters successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysSetVpnclientIpsecParameters
        //instance.virtualNetworkGatewaysSetVpnclientIpsecParameters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysSupportedVpnDevices', function() {
      it('should call virtualNetworkGatewaysSupportedVpnDevices successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysSupportedVpnDevices
        //instance.virtualNetworkGatewaysSupportedVpnDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysUpdateTags', function() {
      it('should call virtualNetworkGatewaysUpdateTags successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysUpdateTags
        //instance.virtualNetworkGatewaysUpdateTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('virtualNetworkGatewaysVpnDeviceConfigurationScript', function() {
      it('should call virtualNetworkGatewaysVpnDeviceConfigurationScript successfully', function(done) {
        //uncomment below and update the code to test virtualNetworkGatewaysVpnDeviceConfigurationScript
        //instance.virtualNetworkGatewaysVpnDeviceConfigurationScript(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
