/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnClientConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnClientConfiguration::OAIVpnClientConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnClientConfiguration::OAIVpnClientConfiguration() {
    this->initializeModel();
}

OAIVpnClientConfiguration::~OAIVpnClientConfiguration() {}

void OAIVpnClientConfiguration::initializeModel() {

    m_radius_server_address_isSet = false;
    m_radius_server_address_isValid = false;

    m_radius_server_secret_isSet = false;
    m_radius_server_secret_isValid = false;

    m_vpn_client_address_pool_isSet = false;
    m_vpn_client_address_pool_isValid = false;

    m_vpn_client_ipsec_policies_isSet = false;
    m_vpn_client_ipsec_policies_isValid = false;

    m_vpn_client_protocols_isSet = false;
    m_vpn_client_protocols_isValid = false;

    m_vpn_client_revoked_certificates_isSet = false;
    m_vpn_client_revoked_certificates_isValid = false;

    m_vpn_client_root_certificates_isSet = false;
    m_vpn_client_root_certificates_isValid = false;
}

void OAIVpnClientConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnClientConfiguration::fromJsonObject(QJsonObject json) {

    m_radius_server_address_isValid = ::OpenAPI::fromJsonValue(m_radius_server_address, json[QString("radiusServerAddress")]);
    m_radius_server_address_isSet = !json[QString("radiusServerAddress")].isNull() && m_radius_server_address_isValid;

    m_radius_server_secret_isValid = ::OpenAPI::fromJsonValue(m_radius_server_secret, json[QString("radiusServerSecret")]);
    m_radius_server_secret_isSet = !json[QString("radiusServerSecret")].isNull() && m_radius_server_secret_isValid;

    m_vpn_client_address_pool_isValid = ::OpenAPI::fromJsonValue(m_vpn_client_address_pool, json[QString("vpnClientAddressPool")]);
    m_vpn_client_address_pool_isSet = !json[QString("vpnClientAddressPool")].isNull() && m_vpn_client_address_pool_isValid;

    m_vpn_client_ipsec_policies_isValid = ::OpenAPI::fromJsonValue(m_vpn_client_ipsec_policies, json[QString("vpnClientIpsecPolicies")]);
    m_vpn_client_ipsec_policies_isSet = !json[QString("vpnClientIpsecPolicies")].isNull() && m_vpn_client_ipsec_policies_isValid;

    m_vpn_client_protocols_isValid = ::OpenAPI::fromJsonValue(m_vpn_client_protocols, json[QString("vpnClientProtocols")]);
    m_vpn_client_protocols_isSet = !json[QString("vpnClientProtocols")].isNull() && m_vpn_client_protocols_isValid;

    m_vpn_client_revoked_certificates_isValid = ::OpenAPI::fromJsonValue(m_vpn_client_revoked_certificates, json[QString("vpnClientRevokedCertificates")]);
    m_vpn_client_revoked_certificates_isSet = !json[QString("vpnClientRevokedCertificates")].isNull() && m_vpn_client_revoked_certificates_isValid;

    m_vpn_client_root_certificates_isValid = ::OpenAPI::fromJsonValue(m_vpn_client_root_certificates, json[QString("vpnClientRootCertificates")]);
    m_vpn_client_root_certificates_isSet = !json[QString("vpnClientRootCertificates")].isNull() && m_vpn_client_root_certificates_isValid;
}

QString OAIVpnClientConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnClientConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_radius_server_address_isSet) {
        obj.insert(QString("radiusServerAddress"), ::OpenAPI::toJsonValue(m_radius_server_address));
    }
    if (m_radius_server_secret_isSet) {
        obj.insert(QString("radiusServerSecret"), ::OpenAPI::toJsonValue(m_radius_server_secret));
    }
    if (m_vpn_client_address_pool.isSet()) {
        obj.insert(QString("vpnClientAddressPool"), ::OpenAPI::toJsonValue(m_vpn_client_address_pool));
    }
    if (m_vpn_client_ipsec_policies.size() > 0) {
        obj.insert(QString("vpnClientIpsecPolicies"), ::OpenAPI::toJsonValue(m_vpn_client_ipsec_policies));
    }
    if (m_vpn_client_protocols.size() > 0) {
        obj.insert(QString("vpnClientProtocols"), ::OpenAPI::toJsonValue(m_vpn_client_protocols));
    }
    if (m_vpn_client_revoked_certificates.size() > 0) {
        obj.insert(QString("vpnClientRevokedCertificates"), ::OpenAPI::toJsonValue(m_vpn_client_revoked_certificates));
    }
    if (m_vpn_client_root_certificates.size() > 0) {
        obj.insert(QString("vpnClientRootCertificates"), ::OpenAPI::toJsonValue(m_vpn_client_root_certificates));
    }
    return obj;
}

QString OAIVpnClientConfiguration::getRadiusServerAddress() const {
    return m_radius_server_address;
}
void OAIVpnClientConfiguration::setRadiusServerAddress(const QString &radius_server_address) {
    m_radius_server_address = radius_server_address;
    m_radius_server_address_isSet = true;
}

bool OAIVpnClientConfiguration::is_radius_server_address_Set() const{
    return m_radius_server_address_isSet;
}

bool OAIVpnClientConfiguration::is_radius_server_address_Valid() const{
    return m_radius_server_address_isValid;
}

QString OAIVpnClientConfiguration::getRadiusServerSecret() const {
    return m_radius_server_secret;
}
void OAIVpnClientConfiguration::setRadiusServerSecret(const QString &radius_server_secret) {
    m_radius_server_secret = radius_server_secret;
    m_radius_server_secret_isSet = true;
}

bool OAIVpnClientConfiguration::is_radius_server_secret_Set() const{
    return m_radius_server_secret_isSet;
}

bool OAIVpnClientConfiguration::is_radius_server_secret_Valid() const{
    return m_radius_server_secret_isValid;
}

OAILocalNetworkGatewayPropertiesFormat_localNetworkAddressSpace OAIVpnClientConfiguration::getVpnClientAddressPool() const {
    return m_vpn_client_address_pool;
}
void OAIVpnClientConfiguration::setVpnClientAddressPool(const OAILocalNetworkGatewayPropertiesFormat_localNetworkAddressSpace &vpn_client_address_pool) {
    m_vpn_client_address_pool = vpn_client_address_pool;
    m_vpn_client_address_pool_isSet = true;
}

bool OAIVpnClientConfiguration::is_vpn_client_address_pool_Set() const{
    return m_vpn_client_address_pool_isSet;
}

bool OAIVpnClientConfiguration::is_vpn_client_address_pool_Valid() const{
    return m_vpn_client_address_pool_isValid;
}

QList<OAIIpsecPolicy> OAIVpnClientConfiguration::getVpnClientIpsecPolicies() const {
    return m_vpn_client_ipsec_policies;
}
void OAIVpnClientConfiguration::setVpnClientIpsecPolicies(const QList<OAIIpsecPolicy> &vpn_client_ipsec_policies) {
    m_vpn_client_ipsec_policies = vpn_client_ipsec_policies;
    m_vpn_client_ipsec_policies_isSet = true;
}

bool OAIVpnClientConfiguration::is_vpn_client_ipsec_policies_Set() const{
    return m_vpn_client_ipsec_policies_isSet;
}

bool OAIVpnClientConfiguration::is_vpn_client_ipsec_policies_Valid() const{
    return m_vpn_client_ipsec_policies_isValid;
}

QList<QString> OAIVpnClientConfiguration::getVpnClientProtocols() const {
    return m_vpn_client_protocols;
}
void OAIVpnClientConfiguration::setVpnClientProtocols(const QList<QString> &vpn_client_protocols) {
    m_vpn_client_protocols = vpn_client_protocols;
    m_vpn_client_protocols_isSet = true;
}

bool OAIVpnClientConfiguration::is_vpn_client_protocols_Set() const{
    return m_vpn_client_protocols_isSet;
}

bool OAIVpnClientConfiguration::is_vpn_client_protocols_Valid() const{
    return m_vpn_client_protocols_isValid;
}

QList<OAIVpnClientRevokedCertificate> OAIVpnClientConfiguration::getVpnClientRevokedCertificates() const {
    return m_vpn_client_revoked_certificates;
}
void OAIVpnClientConfiguration::setVpnClientRevokedCertificates(const QList<OAIVpnClientRevokedCertificate> &vpn_client_revoked_certificates) {
    m_vpn_client_revoked_certificates = vpn_client_revoked_certificates;
    m_vpn_client_revoked_certificates_isSet = true;
}

bool OAIVpnClientConfiguration::is_vpn_client_revoked_certificates_Set() const{
    return m_vpn_client_revoked_certificates_isSet;
}

bool OAIVpnClientConfiguration::is_vpn_client_revoked_certificates_Valid() const{
    return m_vpn_client_revoked_certificates_isValid;
}

QList<OAIVpnClientRootCertificate> OAIVpnClientConfiguration::getVpnClientRootCertificates() const {
    return m_vpn_client_root_certificates;
}
void OAIVpnClientConfiguration::setVpnClientRootCertificates(const QList<OAIVpnClientRootCertificate> &vpn_client_root_certificates) {
    m_vpn_client_root_certificates = vpn_client_root_certificates;
    m_vpn_client_root_certificates_isSet = true;
}

bool OAIVpnClientConfiguration::is_vpn_client_root_certificates_Set() const{
    return m_vpn_client_root_certificates_isSet;
}

bool OAIVpnClientConfiguration::is_vpn_client_root_certificates_Valid() const{
    return m_vpn_client_root_certificates_isValid;
}

bool OAIVpnClientConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_radius_server_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_server_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_client_address_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_client_ipsec_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_client_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_client_revoked_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_client_root_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnClientConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
