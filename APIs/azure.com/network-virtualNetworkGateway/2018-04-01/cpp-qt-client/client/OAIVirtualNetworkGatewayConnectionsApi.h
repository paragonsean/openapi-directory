/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualNetworkGatewayConnectionsApi_H
#define OAI_OAIVirtualNetworkGatewayConnectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectionResetSharedKey.h"
#include "OAIConnectionSharedKey.h"
#include "OAIVirtualNetworkGatewayConnection.h"
#include "OAIVirtualNetworkGatewayConnectionListResult.h"
#include "OAIVirtualNetworkGatewayConnections_UpdateTags_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualNetworkGatewayConnectionsApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualNetworkGatewayConnectionsApi(const int timeOut = 0);
    ~OAIVirtualNetworkGatewayConnectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualNetworkGatewayConnection [required]
    */
    virtual void virtualNetworkGatewayConnectionsCreateOrUpdate(const QString &resource_group_name, const QString &virtual_network_gateway_connection_name, const QString &api_version, const QString &subscription_id, const OAIVirtualNetworkGatewayConnection &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewayConnectionsDelete(const QString &resource_group_name, const QString &virtual_network_gateway_connection_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewayConnectionsGet(const QString &resource_group_name, const QString &virtual_network_gateway_connection_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewayConnectionsGetSharedKey(const QString &resource_group_name, const QString &virtual_network_gateway_connection_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualNetworkGatewayConnectionsList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIConnectionResetSharedKey [required]
    */
    virtual void virtualNetworkGatewayConnectionsResetSharedKey(const QString &resource_group_name, const QString &virtual_network_gateway_connection_name, const QString &api_version, const QString &subscription_id, const OAIConnectionResetSharedKey &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIConnectionSharedKey [required]
    */
    virtual void virtualNetworkGatewayConnectionsSetSharedKey(const QString &resource_group_name, const QString &virtual_network_gateway_connection_name, const QString &api_version, const QString &subscription_id, const OAIConnectionSharedKey &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_gateway_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualNetworkGatewayConnections_UpdateTags_request [required]
    */
    virtual void virtualNetworkGatewayConnectionsUpdateTags(const QString &resource_group_name, const QString &virtual_network_gateway_connection_name, const QString &api_version, const QString &subscription_id, const OAIVirtualNetworkGatewayConnections_UpdateTags_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualNetworkGatewayConnectionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewayConnectionsDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewayConnectionsGetCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewayConnectionsGetSharedKeyCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewayConnectionsListCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewayConnectionsResetSharedKeyCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewayConnectionsSetSharedKeyCallback(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewayConnectionsUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualNetworkGatewayConnectionsCreateOrUpdateSignal(OAIVirtualNetworkGatewayConnection summary);
    void virtualNetworkGatewayConnectionsDeleteSignal();
    void virtualNetworkGatewayConnectionsGetSignal(OAIVirtualNetworkGatewayConnection summary);
    void virtualNetworkGatewayConnectionsGetSharedKeySignal(OAIConnectionSharedKey summary);
    void virtualNetworkGatewayConnectionsListSignal(OAIVirtualNetworkGatewayConnectionListResult summary);
    void virtualNetworkGatewayConnectionsResetSharedKeySignal(OAIConnectionResetSharedKey summary);
    void virtualNetworkGatewayConnectionsSetSharedKeySignal(OAIConnectionSharedKey summary);
    void virtualNetworkGatewayConnectionsUpdateTagsSignal(OAIVirtualNetworkGatewayConnection summary);


    void virtualNetworkGatewayConnectionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkGatewayConnection summary);
    void virtualNetworkGatewayConnectionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualNetworkGatewayConnectionsGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkGatewayConnection summary);
    void virtualNetworkGatewayConnectionsGetSharedKeySignalFull(OAIHttpRequestWorker *worker, OAIConnectionSharedKey summary);
    void virtualNetworkGatewayConnectionsListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkGatewayConnectionListResult summary);
    void virtualNetworkGatewayConnectionsResetSharedKeySignalFull(OAIHttpRequestWorker *worker, OAIConnectionResetSharedKey summary);
    void virtualNetworkGatewayConnectionsSetSharedKeySignalFull(OAIHttpRequestWorker *worker, OAIConnectionSharedKey summary);
    void virtualNetworkGatewayConnectionsUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIVirtualNetworkGatewayConnection summary);

    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsCreateOrUpdateSignalError() instead")
    void virtualNetworkGatewayConnectionsCreateOrUpdateSignalE(OAIVirtualNetworkGatewayConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsCreateOrUpdateSignalError(OAIVirtualNetworkGatewayConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsDeleteSignalError() instead")
    void virtualNetworkGatewayConnectionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsGetSignalError() instead")
    void virtualNetworkGatewayConnectionsGetSignalE(OAIVirtualNetworkGatewayConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsGetSignalError(OAIVirtualNetworkGatewayConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsGetSharedKeySignalError() instead")
    void virtualNetworkGatewayConnectionsGetSharedKeySignalE(OAIConnectionSharedKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsGetSharedKeySignalError(OAIConnectionSharedKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsListSignalError() instead")
    void virtualNetworkGatewayConnectionsListSignalE(OAIVirtualNetworkGatewayConnectionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsListSignalError(OAIVirtualNetworkGatewayConnectionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsResetSharedKeySignalError() instead")
    void virtualNetworkGatewayConnectionsResetSharedKeySignalE(OAIConnectionResetSharedKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsResetSharedKeySignalError(OAIConnectionResetSharedKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsSetSharedKeySignalError() instead")
    void virtualNetworkGatewayConnectionsSetSharedKeySignalE(OAIConnectionSharedKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsSetSharedKeySignalError(OAIConnectionSharedKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsUpdateTagsSignalError() instead")
    void virtualNetworkGatewayConnectionsUpdateTagsSignalE(OAIVirtualNetworkGatewayConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsUpdateTagsSignalError(OAIVirtualNetworkGatewayConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsCreateOrUpdateSignalErrorFull() instead")
    void virtualNetworkGatewayConnectionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsDeleteSignalErrorFull() instead")
    void virtualNetworkGatewayConnectionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsGetSignalErrorFull() instead")
    void virtualNetworkGatewayConnectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsGetSharedKeySignalErrorFull() instead")
    void virtualNetworkGatewayConnectionsGetSharedKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsGetSharedKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsListSignalErrorFull() instead")
    void virtualNetworkGatewayConnectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsResetSharedKeySignalErrorFull() instead")
    void virtualNetworkGatewayConnectionsResetSharedKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsResetSharedKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsSetSharedKeySignalErrorFull() instead")
    void virtualNetworkGatewayConnectionsSetSharedKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsSetSharedKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualNetworkGatewayConnectionsUpdateTagsSignalErrorFull() instead")
    void virtualNetworkGatewayConnectionsUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualNetworkGatewayConnectionsUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
