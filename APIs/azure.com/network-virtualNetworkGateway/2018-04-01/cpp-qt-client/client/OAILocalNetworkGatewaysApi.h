/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILocalNetworkGatewaysApi_H
#define OAI_OAILocalNetworkGatewaysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILocalNetworkGateway.h"
#include "OAILocalNetworkGatewayListResult.h"
#include "OAIVirtualNetworkGatewayConnections_UpdateTags_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILocalNetworkGatewaysApi : public QObject {
    Q_OBJECT

public:
    OAILocalNetworkGatewaysApi(const int timeOut = 0);
    ~OAILocalNetworkGatewaysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  local_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAILocalNetworkGateway [required]
    */
    virtual void localNetworkGatewaysCreateOrUpdate(const QString &resource_group_name, const QString &local_network_gateway_name, const QString &api_version, const QString &subscription_id, const OAILocalNetworkGateway &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  local_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void localNetworkGatewaysDelete(const QString &resource_group_name, const QString &local_network_gateway_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  local_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void localNetworkGatewaysGet(const QString &resource_group_name, const QString &local_network_gateway_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void localNetworkGatewaysList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  local_network_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualNetworkGatewayConnections_UpdateTags_request [required]
    */
    virtual void localNetworkGatewaysUpdateTags(const QString &resource_group_name, const QString &local_network_gateway_name, const QString &api_version, const QString &subscription_id, const OAIVirtualNetworkGatewayConnections_UpdateTags_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void localNetworkGatewaysCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void localNetworkGatewaysDeleteCallback(OAIHttpRequestWorker *worker);
    void localNetworkGatewaysGetCallback(OAIHttpRequestWorker *worker);
    void localNetworkGatewaysListCallback(OAIHttpRequestWorker *worker);
    void localNetworkGatewaysUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void localNetworkGatewaysCreateOrUpdateSignal(OAILocalNetworkGateway summary);
    void localNetworkGatewaysDeleteSignal();
    void localNetworkGatewaysGetSignal(OAILocalNetworkGateway summary);
    void localNetworkGatewaysListSignal(OAILocalNetworkGatewayListResult summary);
    void localNetworkGatewaysUpdateTagsSignal(OAILocalNetworkGateway summary);


    void localNetworkGatewaysCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAILocalNetworkGateway summary);
    void localNetworkGatewaysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void localNetworkGatewaysGetSignalFull(OAIHttpRequestWorker *worker, OAILocalNetworkGateway summary);
    void localNetworkGatewaysListSignalFull(OAIHttpRequestWorker *worker, OAILocalNetworkGatewayListResult summary);
    void localNetworkGatewaysUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAILocalNetworkGateway summary);

    Q_DECL_DEPRECATED_X("Use localNetworkGatewaysCreateOrUpdateSignalError() instead")
    void localNetworkGatewaysCreateOrUpdateSignalE(OAILocalNetworkGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void localNetworkGatewaysCreateOrUpdateSignalError(OAILocalNetworkGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localNetworkGatewaysDeleteSignalError() instead")
    void localNetworkGatewaysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void localNetworkGatewaysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localNetworkGatewaysGetSignalError() instead")
    void localNetworkGatewaysGetSignalE(OAILocalNetworkGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void localNetworkGatewaysGetSignalError(OAILocalNetworkGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localNetworkGatewaysListSignalError() instead")
    void localNetworkGatewaysListSignalE(OAILocalNetworkGatewayListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void localNetworkGatewaysListSignalError(OAILocalNetworkGatewayListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localNetworkGatewaysUpdateTagsSignalError() instead")
    void localNetworkGatewaysUpdateTagsSignalE(OAILocalNetworkGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void localNetworkGatewaysUpdateTagsSignalError(OAILocalNetworkGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use localNetworkGatewaysCreateOrUpdateSignalErrorFull() instead")
    void localNetworkGatewaysCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void localNetworkGatewaysCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localNetworkGatewaysDeleteSignalErrorFull() instead")
    void localNetworkGatewaysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void localNetworkGatewaysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localNetworkGatewaysGetSignalErrorFull() instead")
    void localNetworkGatewaysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void localNetworkGatewaysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localNetworkGatewaysListSignalErrorFull() instead")
    void localNetworkGatewaysListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void localNetworkGatewaysListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localNetworkGatewaysUpdateTagsSignalErrorFull() instead")
    void localNetworkGatewaysUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void localNetworkGatewaysUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
