/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An IPSec parameters for a virtual network gateway P2S connection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:43:40.043758-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VpnClientIPsecParameters {
  /**
   * The DH Groups used in IKE Phase 1 for initial SA.
   */
  @JsonAdapter(DhGroupEnum.Adapter.class)
  public enum DhGroupEnum {
    NONE("None"),
    
    DH_GROUP1("DHGroup1"),
    
    DH_GROUP2("DHGroup2"),
    
    DH_GROUP14("DHGroup14"),
    
    DH_GROUP2048("DHGroup2048"),
    
    ECP256("ECP256"),
    
    ECP384("ECP384"),
    
    DH_GROUP24("DHGroup24");

    private String value;

    DhGroupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DhGroupEnum fromValue(String value) {
      for (DhGroupEnum b : DhGroupEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DhGroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DhGroupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DhGroupEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DhGroupEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DhGroupEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DH_GROUP = "dhGroup";
  @SerializedName(SERIALIZED_NAME_DH_GROUP)
  private DhGroupEnum dhGroup;

  /**
   * The IKE encryption algorithm (IKE phase 2).
   */
  @JsonAdapter(IkeEncryptionEnum.Adapter.class)
  public enum IkeEncryptionEnum {
    DES("DES"),
    
    DES3("DES3"),
    
    AES128("AES128"),
    
    AES192("AES192"),
    
    AES256("AES256"),
    
    GCMAES256("GCMAES256"),
    
    GCMAES128("GCMAES128");

    private String value;

    IkeEncryptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IkeEncryptionEnum fromValue(String value) {
      for (IkeEncryptionEnum b : IkeEncryptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IkeEncryptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IkeEncryptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IkeEncryptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IkeEncryptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IkeEncryptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IKE_ENCRYPTION = "ikeEncryption";
  @SerializedName(SERIALIZED_NAME_IKE_ENCRYPTION)
  private IkeEncryptionEnum ikeEncryption;

  /**
   * The IKE integrity algorithm (IKE phase 2).
   */
  @JsonAdapter(IkeIntegrityEnum.Adapter.class)
  public enum IkeIntegrityEnum {
    MD5("MD5"),
    
    SHA1("SHA1"),
    
    SHA256("SHA256"),
    
    SHA384("SHA384"),
    
    GCMAES256("GCMAES256"),
    
    GCMAES128("GCMAES128");

    private String value;

    IkeIntegrityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IkeIntegrityEnum fromValue(String value) {
      for (IkeIntegrityEnum b : IkeIntegrityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IkeIntegrityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IkeIntegrityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IkeIntegrityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IkeIntegrityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IkeIntegrityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IKE_INTEGRITY = "ikeIntegrity";
  @SerializedName(SERIALIZED_NAME_IKE_INTEGRITY)
  private IkeIntegrityEnum ikeIntegrity;

  /**
   * The IPSec encryption algorithm (IKE phase 1).
   */
  @JsonAdapter(IpsecEncryptionEnum.Adapter.class)
  public enum IpsecEncryptionEnum {
    NONE("None"),
    
    DES("DES"),
    
    DES3("DES3"),
    
    AES128("AES128"),
    
    AES192("AES192"),
    
    AES256("AES256"),
    
    GCMAES128("GCMAES128"),
    
    GCMAES192("GCMAES192"),
    
    GCMAES256("GCMAES256");

    private String value;

    IpsecEncryptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IpsecEncryptionEnum fromValue(String value) {
      for (IpsecEncryptionEnum b : IpsecEncryptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IpsecEncryptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpsecEncryptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpsecEncryptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IpsecEncryptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IpsecEncryptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IPSEC_ENCRYPTION = "ipsecEncryption";
  @SerializedName(SERIALIZED_NAME_IPSEC_ENCRYPTION)
  private IpsecEncryptionEnum ipsecEncryption;

  /**
   * The IPSec integrity algorithm (IKE phase 1).
   */
  @JsonAdapter(IpsecIntegrityEnum.Adapter.class)
  public enum IpsecIntegrityEnum {
    MD5("MD5"),
    
    SHA1("SHA1"),
    
    SHA256("SHA256"),
    
    GCMAES128("GCMAES128"),
    
    GCMAES192("GCMAES192"),
    
    GCMAES256("GCMAES256");

    private String value;

    IpsecIntegrityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IpsecIntegrityEnum fromValue(String value) {
      for (IpsecIntegrityEnum b : IpsecIntegrityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IpsecIntegrityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpsecIntegrityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpsecIntegrityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IpsecIntegrityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IpsecIntegrityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IPSEC_INTEGRITY = "ipsecIntegrity";
  @SerializedName(SERIALIZED_NAME_IPSEC_INTEGRITY)
  private IpsecIntegrityEnum ipsecIntegrity;

  /**
   * The Pfs Groups used in IKE Phase 2 for new child SA.
   */
  @JsonAdapter(PfsGroupEnum.Adapter.class)
  public enum PfsGroupEnum {
    NONE("None"),
    
    PFS1("PFS1"),
    
    PFS2("PFS2"),
    
    PFS2048("PFS2048"),
    
    ECP256("ECP256"),
    
    ECP384("ECP384"),
    
    PFS24("PFS24"),
    
    PFS14("PFS14"),
    
    PFSMM("PFSMM");

    private String value;

    PfsGroupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PfsGroupEnum fromValue(String value) {
      for (PfsGroupEnum b : PfsGroupEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PfsGroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PfsGroupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PfsGroupEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PfsGroupEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PfsGroupEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PFS_GROUP = "pfsGroup";
  @SerializedName(SERIALIZED_NAME_PFS_GROUP)
  private PfsGroupEnum pfsGroup;

  public static final String SERIALIZED_NAME_SA_DATA_SIZE_KILOBYTES = "saDataSizeKilobytes";
  @SerializedName(SERIALIZED_NAME_SA_DATA_SIZE_KILOBYTES)
  private Integer saDataSizeKilobytes;

  public static final String SERIALIZED_NAME_SA_LIFE_TIME_SECONDS = "saLifeTimeSeconds";
  @SerializedName(SERIALIZED_NAME_SA_LIFE_TIME_SECONDS)
  private Integer saLifeTimeSeconds;

  public VpnClientIPsecParameters() {
  }

  public VpnClientIPsecParameters dhGroup(DhGroupEnum dhGroup) {
    this.dhGroup = dhGroup;
    return this;
  }

  /**
   * The DH Groups used in IKE Phase 1 for initial SA.
   * @return dhGroup
   */
  @javax.annotation.Nonnull
  public DhGroupEnum getDhGroup() {
    return dhGroup;
  }

  public void setDhGroup(DhGroupEnum dhGroup) {
    this.dhGroup = dhGroup;
  }


  public VpnClientIPsecParameters ikeEncryption(IkeEncryptionEnum ikeEncryption) {
    this.ikeEncryption = ikeEncryption;
    return this;
  }

  /**
   * The IKE encryption algorithm (IKE phase 2).
   * @return ikeEncryption
   */
  @javax.annotation.Nonnull
  public IkeEncryptionEnum getIkeEncryption() {
    return ikeEncryption;
  }

  public void setIkeEncryption(IkeEncryptionEnum ikeEncryption) {
    this.ikeEncryption = ikeEncryption;
  }


  public VpnClientIPsecParameters ikeIntegrity(IkeIntegrityEnum ikeIntegrity) {
    this.ikeIntegrity = ikeIntegrity;
    return this;
  }

  /**
   * The IKE integrity algorithm (IKE phase 2).
   * @return ikeIntegrity
   */
  @javax.annotation.Nonnull
  public IkeIntegrityEnum getIkeIntegrity() {
    return ikeIntegrity;
  }

  public void setIkeIntegrity(IkeIntegrityEnum ikeIntegrity) {
    this.ikeIntegrity = ikeIntegrity;
  }


  public VpnClientIPsecParameters ipsecEncryption(IpsecEncryptionEnum ipsecEncryption) {
    this.ipsecEncryption = ipsecEncryption;
    return this;
  }

  /**
   * The IPSec encryption algorithm (IKE phase 1).
   * @return ipsecEncryption
   */
  @javax.annotation.Nonnull
  public IpsecEncryptionEnum getIpsecEncryption() {
    return ipsecEncryption;
  }

  public void setIpsecEncryption(IpsecEncryptionEnum ipsecEncryption) {
    this.ipsecEncryption = ipsecEncryption;
  }


  public VpnClientIPsecParameters ipsecIntegrity(IpsecIntegrityEnum ipsecIntegrity) {
    this.ipsecIntegrity = ipsecIntegrity;
    return this;
  }

  /**
   * The IPSec integrity algorithm (IKE phase 1).
   * @return ipsecIntegrity
   */
  @javax.annotation.Nonnull
  public IpsecIntegrityEnum getIpsecIntegrity() {
    return ipsecIntegrity;
  }

  public void setIpsecIntegrity(IpsecIntegrityEnum ipsecIntegrity) {
    this.ipsecIntegrity = ipsecIntegrity;
  }


  public VpnClientIPsecParameters pfsGroup(PfsGroupEnum pfsGroup) {
    this.pfsGroup = pfsGroup;
    return this;
  }

  /**
   * The Pfs Groups used in IKE Phase 2 for new child SA.
   * @return pfsGroup
   */
  @javax.annotation.Nonnull
  public PfsGroupEnum getPfsGroup() {
    return pfsGroup;
  }

  public void setPfsGroup(PfsGroupEnum pfsGroup) {
    this.pfsGroup = pfsGroup;
  }


  public VpnClientIPsecParameters saDataSizeKilobytes(Integer saDataSizeKilobytes) {
    this.saDataSizeKilobytes = saDataSizeKilobytes;
    return this;
  }

  /**
   * The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for P2S client..
   * @return saDataSizeKilobytes
   */
  @javax.annotation.Nonnull
  public Integer getSaDataSizeKilobytes() {
    return saDataSizeKilobytes;
  }

  public void setSaDataSizeKilobytes(Integer saDataSizeKilobytes) {
    this.saDataSizeKilobytes = saDataSizeKilobytes;
  }


  public VpnClientIPsecParameters saLifeTimeSeconds(Integer saLifeTimeSeconds) {
    this.saLifeTimeSeconds = saLifeTimeSeconds;
    return this;
  }

  /**
   * The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for P2S client.
   * @return saLifeTimeSeconds
   */
  @javax.annotation.Nonnull
  public Integer getSaLifeTimeSeconds() {
    return saLifeTimeSeconds;
  }

  public void setSaLifeTimeSeconds(Integer saLifeTimeSeconds) {
    this.saLifeTimeSeconds = saLifeTimeSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpnClientIPsecParameters vpnClientIPsecParameters = (VpnClientIPsecParameters) o;
    return Objects.equals(this.dhGroup, vpnClientIPsecParameters.dhGroup) &&
        Objects.equals(this.ikeEncryption, vpnClientIPsecParameters.ikeEncryption) &&
        Objects.equals(this.ikeIntegrity, vpnClientIPsecParameters.ikeIntegrity) &&
        Objects.equals(this.ipsecEncryption, vpnClientIPsecParameters.ipsecEncryption) &&
        Objects.equals(this.ipsecIntegrity, vpnClientIPsecParameters.ipsecIntegrity) &&
        Objects.equals(this.pfsGroup, vpnClientIPsecParameters.pfsGroup) &&
        Objects.equals(this.saDataSizeKilobytes, vpnClientIPsecParameters.saDataSizeKilobytes) &&
        Objects.equals(this.saLifeTimeSeconds, vpnClientIPsecParameters.saLifeTimeSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dhGroup, ikeEncryption, ikeIntegrity, ipsecEncryption, ipsecIntegrity, pfsGroup, saDataSizeKilobytes, saLifeTimeSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpnClientIPsecParameters {\n");
    sb.append("    dhGroup: ").append(toIndentedString(dhGroup)).append("\n");
    sb.append("    ikeEncryption: ").append(toIndentedString(ikeEncryption)).append("\n");
    sb.append("    ikeIntegrity: ").append(toIndentedString(ikeIntegrity)).append("\n");
    sb.append("    ipsecEncryption: ").append(toIndentedString(ipsecEncryption)).append("\n");
    sb.append("    ipsecIntegrity: ").append(toIndentedString(ipsecIntegrity)).append("\n");
    sb.append("    pfsGroup: ").append(toIndentedString(pfsGroup)).append("\n");
    sb.append("    saDataSizeKilobytes: ").append(toIndentedString(saDataSizeKilobytes)).append("\n");
    sb.append("    saLifeTimeSeconds: ").append(toIndentedString(saLifeTimeSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dhGroup");
    openapiFields.add("ikeEncryption");
    openapiFields.add("ikeIntegrity");
    openapiFields.add("ipsecEncryption");
    openapiFields.add("ipsecIntegrity");
    openapiFields.add("pfsGroup");
    openapiFields.add("saDataSizeKilobytes");
    openapiFields.add("saLifeTimeSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dhGroup");
    openapiRequiredFields.add("ikeEncryption");
    openapiRequiredFields.add("ikeIntegrity");
    openapiRequiredFields.add("ipsecEncryption");
    openapiRequiredFields.add("ipsecIntegrity");
    openapiRequiredFields.add("pfsGroup");
    openapiRequiredFields.add("saDataSizeKilobytes");
    openapiRequiredFields.add("saLifeTimeSeconds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VpnClientIPsecParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VpnClientIPsecParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VpnClientIPsecParameters is not found in the empty JSON string", VpnClientIPsecParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VpnClientIPsecParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VpnClientIPsecParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VpnClientIPsecParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dhGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhGroup").toString()));
      }
      // validate the required field `dhGroup`
      DhGroupEnum.validateJsonElement(jsonObj.get("dhGroup"));
      if (!jsonObj.get("ikeEncryption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ikeEncryption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ikeEncryption").toString()));
      }
      // validate the required field `ikeEncryption`
      IkeEncryptionEnum.validateJsonElement(jsonObj.get("ikeEncryption"));
      if (!jsonObj.get("ikeIntegrity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ikeIntegrity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ikeIntegrity").toString()));
      }
      // validate the required field `ikeIntegrity`
      IkeIntegrityEnum.validateJsonElement(jsonObj.get("ikeIntegrity"));
      if (!jsonObj.get("ipsecEncryption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipsecEncryption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipsecEncryption").toString()));
      }
      // validate the required field `ipsecEncryption`
      IpsecEncryptionEnum.validateJsonElement(jsonObj.get("ipsecEncryption"));
      if (!jsonObj.get("ipsecIntegrity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipsecIntegrity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipsecIntegrity").toString()));
      }
      // validate the required field `ipsecIntegrity`
      IpsecIntegrityEnum.validateJsonElement(jsonObj.get("ipsecIntegrity"));
      if (!jsonObj.get("pfsGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pfsGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pfsGroup").toString()));
      }
      // validate the required field `pfsGroup`
      PfsGroupEnum.validateJsonElement(jsonObj.get("pfsGroup"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VpnClientIPsecParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VpnClientIPsecParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VpnClientIPsecParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VpnClientIPsecParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<VpnClientIPsecParameters>() {
           @Override
           public void write(JsonWriter out, VpnClientIPsecParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VpnClientIPsecParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VpnClientIPsecParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VpnClientIPsecParameters
   * @throws IOException if the JSON string is invalid with respect to VpnClientIPsecParameters
   */
  public static VpnClientIPsecParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VpnClientIPsecParameters.class);
  }

  /**
   * Convert an instance of VpnClientIPsecParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

