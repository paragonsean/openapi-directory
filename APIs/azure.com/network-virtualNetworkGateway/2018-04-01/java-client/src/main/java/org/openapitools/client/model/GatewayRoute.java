/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gateway routing details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:43:40.043758-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GatewayRoute {
  public static final String SERIALIZED_NAME_AS_PATH = "asPath";
  @SerializedName(SERIALIZED_NAME_AS_PATH)
  private String asPath;

  public static final String SERIALIZED_NAME_LOCAL_ADDRESS = "localAddress";
  @SerializedName(SERIALIZED_NAME_LOCAL_ADDRESS)
  private String localAddress;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_NEXT_HOP = "nextHop";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP)
  private String nextHop;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_SOURCE_PEER = "sourcePeer";
  @SerializedName(SERIALIZED_NAME_SOURCE_PEER)
  private String sourcePeer;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public GatewayRoute() {
  }

  public GatewayRoute(
     String asPath, 
     String localAddress, 
     String network, 
     String nextHop, 
     String origin, 
     String sourcePeer, 
     Integer weight
  ) {
    this();
    this.asPath = asPath;
    this.localAddress = localAddress;
    this.network = network;
    this.nextHop = nextHop;
    this.origin = origin;
    this.sourcePeer = sourcePeer;
    this.weight = weight;
  }

  /**
   * The route&#39;s AS path sequence
   * @return asPath
   */
  @javax.annotation.Nullable
  public String getAsPath() {
    return asPath;
  }



  /**
   * The gateway&#39;s local address
   * @return localAddress
   */
  @javax.annotation.Nullable
  public String getLocalAddress() {
    return localAddress;
  }



  /**
   * The route&#39;s network prefix
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }



  /**
   * The route&#39;s next hop
   * @return nextHop
   */
  @javax.annotation.Nullable
  public String getNextHop() {
    return nextHop;
  }



  /**
   * The source this route was learned from
   * @return origin
   */
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }



  /**
   * The peer this route was learned from
   * @return sourcePeer
   */
  @javax.annotation.Nullable
  public String getSourcePeer() {
    return sourcePeer;
  }



  /**
   * The route&#39;s weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayRoute gatewayRoute = (GatewayRoute) o;
    return Objects.equals(this.asPath, gatewayRoute.asPath) &&
        Objects.equals(this.localAddress, gatewayRoute.localAddress) &&
        Objects.equals(this.network, gatewayRoute.network) &&
        Objects.equals(this.nextHop, gatewayRoute.nextHop) &&
        Objects.equals(this.origin, gatewayRoute.origin) &&
        Objects.equals(this.sourcePeer, gatewayRoute.sourcePeer) &&
        Objects.equals(this.weight, gatewayRoute.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asPath, localAddress, network, nextHop, origin, sourcePeer, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayRoute {\n");
    sb.append("    asPath: ").append(toIndentedString(asPath)).append("\n");
    sb.append("    localAddress: ").append(toIndentedString(localAddress)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    nextHop: ").append(toIndentedString(nextHop)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    sourcePeer: ").append(toIndentedString(sourcePeer)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asPath");
    openapiFields.add("localAddress");
    openapiFields.add("network");
    openapiFields.add("nextHop");
    openapiFields.add("origin");
    openapiFields.add("sourcePeer");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayRoute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayRoute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayRoute is not found in the empty JSON string", GatewayRoute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayRoute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayRoute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("asPath") != null && !jsonObj.get("asPath").isJsonNull()) && !jsonObj.get("asPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asPath").toString()));
      }
      if ((jsonObj.get("localAddress") != null && !jsonObj.get("localAddress").isJsonNull()) && !jsonObj.get("localAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localAddress").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("nextHop") != null && !jsonObj.get("nextHop").isJsonNull()) && !jsonObj.get("nextHop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHop").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if ((jsonObj.get("sourcePeer") != null && !jsonObj.get("sourcePeer").isJsonNull()) && !jsonObj.get("sourcePeer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePeer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourcePeer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayRoute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayRoute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayRoute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayRoute.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayRoute>() {
           @Override
           public void write(JsonWriter out, GatewayRoute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayRoute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayRoute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayRoute
   * @throws IOException if the JSON string is invalid with respect to GatewayRoute
   */
  public static GatewayRoute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayRoute.class);
  }

  /**
   * Convert an instance of GatewayRoute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

