# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceObjectiveProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, enabled: bool=None, is_default: bool=None, is_system: bool=None, service_objective_name: str=None):
        """ServiceObjectiveProperties - a model defined in OpenAPI

        :param description: The description of this ServiceObjectiveProperties.
        :param enabled: The enabled of this ServiceObjectiveProperties.
        :param is_default: The is_default of this ServiceObjectiveProperties.
        :param is_system: The is_system of this ServiceObjectiveProperties.
        :param service_objective_name: The service_objective_name of this ServiceObjectiveProperties.
        """
        self.openapi_types = {
            'description': str,
            'enabled': bool,
            'is_default': bool,
            'is_system': bool,
            'service_objective_name': str
        }

        self.attribute_map = {
            'description': 'description',
            'enabled': 'enabled',
            'is_default': 'isDefault',
            'is_system': 'isSystem',
            'service_objective_name': 'serviceObjectiveName'
        }

        self._description = description
        self._enabled = enabled
        self._is_default = is_default
        self._is_system = is_system
        self._service_objective_name = service_objective_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceObjectiveProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceObjectiveProperties of this ServiceObjectiveProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ServiceObjectiveProperties.

        The description for the service level objective.

        :return: The description of this ServiceObjectiveProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceObjectiveProperties.

        The description for the service level objective.

        :param description: The description of this ServiceObjectiveProperties.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this ServiceObjectiveProperties.

        Gets whether the service level objective is enabled.

        :return: The enabled of this ServiceObjectiveProperties.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ServiceObjectiveProperties.

        Gets whether the service level objective is enabled.

        :param enabled: The enabled of this ServiceObjectiveProperties.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def is_default(self):
        """Gets the is_default of this ServiceObjectiveProperties.

        Gets whether the service level objective is the default service objective.

        :return: The is_default of this ServiceObjectiveProperties.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this ServiceObjectiveProperties.

        Gets whether the service level objective is the default service objective.

        :param is_default: The is_default of this ServiceObjectiveProperties.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def is_system(self):
        """Gets the is_system of this ServiceObjectiveProperties.

        Gets whether the service level objective is a system service objective.

        :return: The is_system of this ServiceObjectiveProperties.
        :rtype: bool
        """
        return self._is_system

    @is_system.setter
    def is_system(self, is_system):
        """Sets the is_system of this ServiceObjectiveProperties.

        Gets whether the service level objective is a system service objective.

        :param is_system: The is_system of this ServiceObjectiveProperties.
        :type is_system: bool
        """

        self._is_system = is_system

    @property
    def service_objective_name(self):
        """Gets the service_objective_name of this ServiceObjectiveProperties.

        The name for the service objective.

        :return: The service_objective_name of this ServiceObjectiveProperties.
        :rtype: str
        """
        return self._service_objective_name

    @service_objective_name.setter
    def service_objective_name(self, service_objective_name):
        """Sets the service_objective_name of this ServiceObjectiveProperties.

        The name for the service objective.

        :param service_objective_name: The service_objective_name of this ServiceObjectiveProperties.
        :type service_objective_name: str
        """

        self._service_objective_name = service_objective_name
