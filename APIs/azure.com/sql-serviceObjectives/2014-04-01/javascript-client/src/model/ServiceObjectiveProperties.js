/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServiceObjectiveProperties model module.
 * @module model/ServiceObjectiveProperties
 * @version 2014-04-01
 */
class ServiceObjectiveProperties {
    /**
     * Constructs a new <code>ServiceObjectiveProperties</code>.
     * Represents the properties of a database service objective.
     * @alias module:model/ServiceObjectiveProperties
     */
    constructor() { 
        
        ServiceObjectiveProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceObjectiveProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceObjectiveProperties} obj Optional instance to populate.
     * @return {module:model/ServiceObjectiveProperties} The populated <code>ServiceObjectiveProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceObjectiveProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isDefault')) {
                obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('isSystem')) {
                obj['isSystem'] = ApiClient.convertToType(data['isSystem'], 'Boolean');
            }
            if (data.hasOwnProperty('serviceObjectiveName')) {
                obj['serviceObjectiveName'] = ApiClient.convertToType(data['serviceObjectiveName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceObjectiveProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceObjectiveProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['serviceObjectiveName'] && !(typeof data['serviceObjectiveName'] === 'string' || data['serviceObjectiveName'] instanceof String)) {
            throw new Error("Expected the field `serviceObjectiveName` to be a primitive type in the JSON string but got " + data['serviceObjectiveName']);
        }

        return true;
    }


}



/**
 * The description for the service level objective.
 * @member {String} description
 */
ServiceObjectiveProperties.prototype['description'] = undefined;

/**
 * Gets whether the service level objective is enabled.
 * @member {Boolean} enabled
 */
ServiceObjectiveProperties.prototype['enabled'] = undefined;

/**
 * Gets whether the service level objective is the default service objective.
 * @member {Boolean} isDefault
 */
ServiceObjectiveProperties.prototype['isDefault'] = undefined;

/**
 * Gets whether the service level objective is a system service objective.
 * @member {Boolean} isSystem
 */
ServiceObjectiveProperties.prototype['isSystem'] = undefined;

/**
 * The name for the service objective.
 * @member {String} serviceObjectiveName
 */
ServiceObjectiveProperties.prototype['serviceObjectiveName'] = undefined;






export default ServiceObjectiveProperties;

