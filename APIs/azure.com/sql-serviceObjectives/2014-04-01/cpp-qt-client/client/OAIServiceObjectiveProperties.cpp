/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceObjectiveProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceObjectiveProperties::OAIServiceObjectiveProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceObjectiveProperties::OAIServiceObjectiveProperties() {
    this->initializeModel();
}

OAIServiceObjectiveProperties::~OAIServiceObjectiveProperties() {}

void OAIServiceObjectiveProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_system_isSet = false;
    m_is_system_isValid = false;

    m_service_objective_name_isSet = false;
    m_service_objective_name_isValid = false;
}

void OAIServiceObjectiveProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceObjectiveProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_is_system_isValid = ::OpenAPI::fromJsonValue(m_is_system, json[QString("isSystem")]);
    m_is_system_isSet = !json[QString("isSystem")].isNull() && m_is_system_isValid;

    m_service_objective_name_isValid = ::OpenAPI::fromJsonValue(m_service_objective_name, json[QString("serviceObjectiveName")]);
    m_service_objective_name_isSet = !json[QString("serviceObjectiveName")].isNull() && m_service_objective_name_isValid;
}

QString OAIServiceObjectiveProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceObjectiveProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_system_isSet) {
        obj.insert(QString("isSystem"), ::OpenAPI::toJsonValue(m_is_system));
    }
    if (m_service_objective_name_isSet) {
        obj.insert(QString("serviceObjectiveName"), ::OpenAPI::toJsonValue(m_service_objective_name));
    }
    return obj;
}

QString OAIServiceObjectiveProperties::getDescription() const {
    return m_description;
}
void OAIServiceObjectiveProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceObjectiveProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceObjectiveProperties::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIServiceObjectiveProperties::isEnabled() const {
    return m_enabled;
}
void OAIServiceObjectiveProperties::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIServiceObjectiveProperties::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIServiceObjectiveProperties::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIServiceObjectiveProperties::isIsDefault() const {
    return m_is_default;
}
void OAIServiceObjectiveProperties::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIServiceObjectiveProperties::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIServiceObjectiveProperties::is_is_default_Valid() const{
    return m_is_default_isValid;
}

bool OAIServiceObjectiveProperties::isIsSystem() const {
    return m_is_system;
}
void OAIServiceObjectiveProperties::setIsSystem(const bool &is_system) {
    m_is_system = is_system;
    m_is_system_isSet = true;
}

bool OAIServiceObjectiveProperties::is_is_system_Set() const{
    return m_is_system_isSet;
}

bool OAIServiceObjectiveProperties::is_is_system_Valid() const{
    return m_is_system_isValid;
}

QString OAIServiceObjectiveProperties::getServiceObjectiveName() const {
    return m_service_objective_name;
}
void OAIServiceObjectiveProperties::setServiceObjectiveName(const QString &service_objective_name) {
    m_service_objective_name = service_objective_name;
    m_service_objective_name_isSet = true;
}

bool OAIServiceObjectiveProperties::is_service_objective_name_Set() const{
    return m_service_objective_name_isSet;
}

bool OAIServiceObjectiveProperties::is_service_objective_name_Valid() const{
    return m_service_objective_name_isValid;
}

bool OAIServiceObjectiveProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_objective_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceObjectiveProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
