/**
 * EngagementFabric
 * Microsoft Customer Engagement Fabric
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelTypeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelTypeDescription::OAIChannelTypeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelTypeDescription::OAIChannelTypeDescription() {
    this->initializeModel();
}

OAIChannelTypeDescription::~OAIChannelTypeDescription() {}

void OAIChannelTypeDescription::initializeModel() {

    m_channel_description_isSet = false;
    m_channel_description_isValid = false;

    m_channel_functions_isSet = false;
    m_channel_functions_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;
}

void OAIChannelTypeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelTypeDescription::fromJsonObject(QJsonObject json) {

    m_channel_description_isValid = ::OpenAPI::fromJsonValue(m_channel_description, json[QString("channelDescription")]);
    m_channel_description_isSet = !json[QString("channelDescription")].isNull() && m_channel_description_isValid;

    m_channel_functions_isValid = ::OpenAPI::fromJsonValue(m_channel_functions, json[QString("channelFunctions")]);
    m_channel_functions_isSet = !json[QString("channelFunctions")].isNull() && m_channel_functions_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("channelType")]);
    m_channel_type_isSet = !json[QString("channelType")].isNull() && m_channel_type_isValid;
}

QString OAIChannelTypeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelTypeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_description_isSet) {
        obj.insert(QString("channelDescription"), ::OpenAPI::toJsonValue(m_channel_description));
    }
    if (m_channel_functions.size() > 0) {
        obj.insert(QString("channelFunctions"), ::OpenAPI::toJsonValue(m_channel_functions));
    }
    if (m_channel_type_isSet) {
        obj.insert(QString("channelType"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    return obj;
}

QString OAIChannelTypeDescription::getChannelDescription() const {
    return m_channel_description;
}
void OAIChannelTypeDescription::setChannelDescription(const QString &channel_description) {
    m_channel_description = channel_description;
    m_channel_description_isSet = true;
}

bool OAIChannelTypeDescription::is_channel_description_Set() const{
    return m_channel_description_isSet;
}

bool OAIChannelTypeDescription::is_channel_description_Valid() const{
    return m_channel_description_isValid;
}

QList<QString> OAIChannelTypeDescription::getChannelFunctions() const {
    return m_channel_functions;
}
void OAIChannelTypeDescription::setChannelFunctions(const QList<QString> &channel_functions) {
    m_channel_functions = channel_functions;
    m_channel_functions_isSet = true;
}

bool OAIChannelTypeDescription::is_channel_functions_Set() const{
    return m_channel_functions_isSet;
}

bool OAIChannelTypeDescription::is_channel_functions_Valid() const{
    return m_channel_functions_isValid;
}

QString OAIChannelTypeDescription::getChannelType() const {
    return m_channel_type;
}
void OAIChannelTypeDescription::setChannelType(const QString &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAIChannelTypeDescription::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAIChannelTypeDescription::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

bool OAIChannelTypeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_functions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelTypeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
