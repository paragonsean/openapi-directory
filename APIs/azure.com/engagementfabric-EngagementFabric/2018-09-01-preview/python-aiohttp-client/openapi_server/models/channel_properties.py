# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_functions: List[str]=None, channel_type: str=None, credentials: Dict[str, str]=None):
        """ChannelProperties - a model defined in OpenAPI

        :param channel_functions: The channel_functions of this ChannelProperties.
        :param channel_type: The channel_type of this ChannelProperties.
        :param credentials: The credentials of this ChannelProperties.
        """
        self.openapi_types = {
            'channel_functions': List[str],
            'channel_type': str,
            'credentials': Dict[str, str]
        }

        self.attribute_map = {
            'channel_functions': 'channelFunctions',
            'channel_type': 'channelType',
            'credentials': 'credentials'
        }

        self._channel_functions = channel_functions
        self._channel_type = channel_type
        self._credentials = credentials

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelProperties of this ChannelProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_functions(self):
        """Gets the channel_functions of this ChannelProperties.

        The functions to be enabled for the channel

        :return: The channel_functions of this ChannelProperties.
        :rtype: List[str]
        """
        return self._channel_functions

    @channel_functions.setter
    def channel_functions(self, channel_functions):
        """Sets the channel_functions of this ChannelProperties.

        The functions to be enabled for the channel

        :param channel_functions: The channel_functions of this ChannelProperties.
        :type channel_functions: List[str]
        """

        self._channel_functions = channel_functions

    @property
    def channel_type(self):
        """Gets the channel_type of this ChannelProperties.

        The channel type

        :return: The channel_type of this ChannelProperties.
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this ChannelProperties.

        The channel type

        :param channel_type: The channel_type of this ChannelProperties.
        :type channel_type: str
        """
        if channel_type is None:
            raise ValueError("Invalid value for `channel_type`, must not be `None`")

        self._channel_type = channel_type

    @property
    def credentials(self):
        """Gets the credentials of this ChannelProperties.

        The channel credentials

        :return: The credentials of this ChannelProperties.
        :rtype: Dict[str, str]
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this ChannelProperties.

        The channel credentials

        :param credentials: The credentials of this ChannelProperties.
        :type credentials: Dict[str, str]
        """

        self._credentials = credentials
