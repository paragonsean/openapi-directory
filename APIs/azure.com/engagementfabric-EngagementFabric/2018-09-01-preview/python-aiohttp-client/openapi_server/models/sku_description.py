# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sku_location_info_item import SkuLocationInfoItem
from openapi_server import util


class SkuDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_info: List[SkuLocationInfoItem]=None, locations: List[str]=None, name: str=None, resource_type: str=None, restrictions: List[object]=None, tier: str=None):
        """SkuDescription - a model defined in OpenAPI

        :param location_info: The location_info of this SkuDescription.
        :param locations: The locations of this SkuDescription.
        :param name: The name of this SkuDescription.
        :param resource_type: The resource_type of this SkuDescription.
        :param restrictions: The restrictions of this SkuDescription.
        :param tier: The tier of this SkuDescription.
        """
        self.openapi_types = {
            'location_info': List[SkuLocationInfoItem],
            'locations': List[str],
            'name': str,
            'resource_type': str,
            'restrictions': List[object],
            'tier': str
        }

        self.attribute_map = {
            'location_info': 'locationInfo',
            'locations': 'locations',
            'name': 'name',
            'resource_type': 'resourceType',
            'restrictions': 'restrictions',
            'tier': 'tier'
        }

        self._location_info = location_info
        self._locations = locations
        self._name = name
        self._resource_type = resource_type
        self._restrictions = restrictions
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkuDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkuDescription of this SkuDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_info(self):
        """Gets the location_info of this SkuDescription.

        Locations and zones

        :return: The location_info of this SkuDescription.
        :rtype: List[SkuLocationInfoItem]
        """
        return self._location_info

    @location_info.setter
    def location_info(self, location_info):
        """Sets the location_info of this SkuDescription.

        Locations and zones

        :param location_info: The location_info of this SkuDescription.
        :type location_info: List[SkuLocationInfoItem]
        """

        self._location_info = location_info

    @property
    def locations(self):
        """Gets the locations of this SkuDescription.

        The set of locations that the SKU is available

        :return: The locations of this SkuDescription.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this SkuDescription.

        The set of locations that the SKU is available

        :param locations: The locations of this SkuDescription.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this SkuDescription.

        The name of the SKU

        :return: The name of this SkuDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SkuDescription.

        The name of the SKU

        :param name: The name of this SkuDescription.
        :type name: str
        """

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this SkuDescription.

        The fully qualified resource type

        :return: The resource_type of this SkuDescription.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this SkuDescription.

        The fully qualified resource type

        :param resource_type: The resource_type of this SkuDescription.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def restrictions(self):
        """Gets the restrictions of this SkuDescription.

        The restrictions because of which SKU cannot be used

        :return: The restrictions of this SkuDescription.
        :rtype: List[object]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this SkuDescription.

        The restrictions because of which SKU cannot be used

        :param restrictions: The restrictions of this SkuDescription.
        :type restrictions: List[object]
        """

        self._restrictions = restrictions

    @property
    def tier(self):
        """Gets the tier of this SkuDescription.

        The price tier of the SKU

        :return: The tier of this SkuDescription.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this SkuDescription.

        The price tier of the SKU

        :param tier: The tier of this SkuDescription.
        :type tier: str
        """

        self._tier = tier
