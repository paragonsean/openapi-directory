# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataReferenceConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_store_name: str=None, mode: str=None, overwrite: bool=None, path_on_compute: str=None, path_on_data_store: str=None):
        """DataReferenceConfiguration - a model defined in OpenAPI

        :param data_store_name: The data_store_name of this DataReferenceConfiguration.
        :param mode: The mode of this DataReferenceConfiguration.
        :param overwrite: The overwrite of this DataReferenceConfiguration.
        :param path_on_compute: The path_on_compute of this DataReferenceConfiguration.
        :param path_on_data_store: The path_on_data_store of this DataReferenceConfiguration.
        """
        self.openapi_types = {
            'data_store_name': str,
            'mode': str,
            'overwrite': bool,
            'path_on_compute': str,
            'path_on_data_store': str
        }

        self.attribute_map = {
            'data_store_name': 'dataStoreName',
            'mode': 'mode',
            'overwrite': 'overwrite',
            'path_on_compute': 'pathOnCompute',
            'path_on_data_store': 'pathOnDataStore'
        }

        self._data_store_name = data_store_name
        self._mode = mode
        self._overwrite = overwrite
        self._path_on_compute = path_on_compute
        self._path_on_data_store = path_on_data_store

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataReferenceConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataReferenceConfiguration of this DataReferenceConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_store_name(self):
        """Gets the data_store_name of this DataReferenceConfiguration.

        The name of the data store.

        :return: The data_store_name of this DataReferenceConfiguration.
        :rtype: str
        """
        return self._data_store_name

    @data_store_name.setter
    def data_store_name(self, data_store_name):
        """Sets the data_store_name of this DataReferenceConfiguration.

        The name of the data store.

        :param data_store_name: The data_store_name of this DataReferenceConfiguration.
        :type data_store_name: str
        """

        self._data_store_name = data_store_name

    @property
    def mode(self):
        """Gets the mode of this DataReferenceConfiguration.

        Operation on the datastore, mount, download, upload.

        :return: The mode of this DataReferenceConfiguration.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DataReferenceConfiguration.

        Operation on the datastore, mount, download, upload.

        :param mode: The mode of this DataReferenceConfiguration.
        :type mode: str
        """
        allowed_values = ["Mount", "Download", "Upload"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def overwrite(self):
        """Gets the overwrite of this DataReferenceConfiguration.

        Whether to overwrite the data if existing.

        :return: The overwrite of this DataReferenceConfiguration.
        :rtype: bool
        """
        return self._overwrite

    @overwrite.setter
    def overwrite(self, overwrite):
        """Sets the overwrite of this DataReferenceConfiguration.

        Whether to overwrite the data if existing.

        :param overwrite: The overwrite of this DataReferenceConfiguration.
        :type overwrite: bool
        """

        self._overwrite = overwrite

    @property
    def path_on_compute(self):
        """Gets the path_on_compute of this DataReferenceConfiguration.

        The path on the compute target.

        :return: The path_on_compute of this DataReferenceConfiguration.
        :rtype: str
        """
        return self._path_on_compute

    @path_on_compute.setter
    def path_on_compute(self, path_on_compute):
        """Sets the path_on_compute of this DataReferenceConfiguration.

        The path on the compute target.

        :param path_on_compute: The path_on_compute of this DataReferenceConfiguration.
        :type path_on_compute: str
        """

        self._path_on_compute = path_on_compute

    @property
    def path_on_data_store(self):
        """Gets the path_on_data_store of this DataReferenceConfiguration.

        Relative path on the datastore.

        :return: The path_on_data_store of this DataReferenceConfiguration.
        :rtype: str
        """
        return self._path_on_data_store

    @path_on_data_store.setter
    def path_on_data_store(self, path_on_data_store):
        """Sets the path_on_data_store of this DataReferenceConfiguration.

        Relative path on the datastore.

        :param path_on_data_store: The path_on_data_store of this DataReferenceConfiguration.
        :type path_on_data_store: str
        """

        self._path_on_data_store = path_on_data_store
