# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_registry import ContainerRegistry
from openapi_server import util


class DockerSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: List[str]=None, base_dockerfile: str=None, base_image: str=None, base_image_registry: ContainerRegistry=None, enabled: bool=None, shared_volumes: bool=None):
        """DockerSection - a model defined in OpenAPI

        :param arguments: The arguments of this DockerSection.
        :param base_dockerfile: The base_dockerfile of this DockerSection.
        :param base_image: The base_image of this DockerSection.
        :param base_image_registry: The base_image_registry of this DockerSection.
        :param enabled: The enabled of this DockerSection.
        :param shared_volumes: The shared_volumes of this DockerSection.
        """
        self.openapi_types = {
            'arguments': List[str],
            'base_dockerfile': str,
            'base_image': str,
            'base_image_registry': ContainerRegistry,
            'enabled': bool,
            'shared_volumes': bool
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'base_dockerfile': 'baseDockerfile',
            'base_image': 'baseImage',
            'base_image_registry': 'baseImageRegistry',
            'enabled': 'enabled',
            'shared_volumes': 'sharedVolumes'
        }

        self._arguments = arguments
        self._base_dockerfile = base_dockerfile
        self._base_image = base_image
        self._base_image_registry = base_image_registry
        self._enabled = enabled
        self._shared_volumes = shared_volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DockerSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DockerSection of this DockerSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this DockerSection.

        Extra arguments to the Docker run command.

        :return: The arguments of this DockerSection.
        :rtype: List[str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this DockerSection.

        Extra arguments to the Docker run command.

        :param arguments: The arguments of this DockerSection.
        :type arguments: List[str]
        """

        self._arguments = arguments

    @property
    def base_dockerfile(self):
        """Gets the base_dockerfile of this DockerSection.

        Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.

        :return: The base_dockerfile of this DockerSection.
        :rtype: str
        """
        return self._base_dockerfile

    @base_dockerfile.setter
    def base_dockerfile(self, base_dockerfile):
        """Sets the base_dockerfile of this DockerSection.

        Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.

        :param base_dockerfile: The base_dockerfile of this DockerSection.
        :type base_dockerfile: str
        """

        self._base_dockerfile = base_dockerfile

    @property
    def base_image(self):
        """Gets the base_image of this DockerSection.

        Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.

        :return: The base_image of this DockerSection.
        :rtype: str
        """
        return self._base_image

    @base_image.setter
    def base_image(self, base_image):
        """Sets the base_image of this DockerSection.

        Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.

        :param base_image: The base_image of this DockerSection.
        :type base_image: str
        """

        self._base_image = base_image

    @property
    def base_image_registry(self):
        """Gets the base_image_registry of this DockerSection.


        :return: The base_image_registry of this DockerSection.
        :rtype: ContainerRegistry
        """
        return self._base_image_registry

    @base_image_registry.setter
    def base_image_registry(self, base_image_registry):
        """Sets the base_image_registry of this DockerSection.


        :param base_image_registry: The base_image_registry of this DockerSection.
        :type base_image_registry: ContainerRegistry
        """

        self._base_image_registry = base_image_registry

    @property
    def enabled(self):
        """Gets the enabled of this DockerSection.

        Set true to perform this run inside a Docker container.

        :return: The enabled of this DockerSection.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DockerSection.

        Set true to perform this run inside a Docker container.

        :param enabled: The enabled of this DockerSection.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def shared_volumes(self):
        """Gets the shared_volumes of this DockerSection.

        Set false to disable AzureML's usage of the Docker shared volumes feature to work around bugs in certain versions of Docker for Windows.

        :return: The shared_volumes of this DockerSection.
        :rtype: bool
        """
        return self._shared_volumes

    @shared_volumes.setter
    def shared_volumes(self, shared_volumes):
        """Sets the shared_volumes of this DockerSection.

        Set false to disable AzureML's usage of the Docker shared volumes feature to work around bugs in certain versions of Docker for Windows.

        :param shared_volumes: The shared_volumes of this DockerSection.
        :type shared_volumes: bool
        """

        self._shared_volumes = shared_volumes
