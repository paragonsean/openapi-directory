/*
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.RunConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RunDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:55:51.767311-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunDefinition {
  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private RunConfiguration _configuration;

  public static final String SERIALIZED_NAME_PARENT_RUN_ID = "parentRunId";
  @SerializedName(SERIALIZED_NAME_PARENT_RUN_ID)
  private String parentRunId;

  public static final String SERIALIZED_NAME_RUN_TYPE = "runType";
  @SerializedName(SERIALIZED_NAME_RUN_TYPE)
  private String runType;

  public static final String SERIALIZED_NAME_SNAPSHOT_ID = "snapshotId";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_ID)
  private UUID snapshotId;

  public RunDefinition() {
  }

  public RunDefinition _configuration(RunConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public RunConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(RunConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public RunDefinition parentRunId(String parentRunId) {
    this.parentRunId = parentRunId;
    return this;
  }

  /**
   * Specifies that the run history entry for this execution should be scoped within  an existing run as a child. Defaults to null, meaning the run has no parent.  This is intended for first-party service integration, not third-party API users.
   * @return parentRunId
   */
  @javax.annotation.Nullable
  public String getParentRunId() {
    return parentRunId;
  }

  public void setParentRunId(String parentRunId) {
    this.parentRunId = parentRunId;
  }


  public RunDefinition runType(String runType) {
    this.runType = runType;
    return this;
  }

  /**
   * Specifies the runsource property for this run. The default value is \&quot;experiment\&quot; if not specified.
   * @return runType
   */
  @javax.annotation.Nullable
  public String getRunType() {
    return runType;
  }

  public void setRunType(String runType) {
    this.runType = runType;
  }


  public RunDefinition snapshotId(UUID snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

  /**
   * Snapshots are user project folders that have been uploaded to the cloud for subsequent  execution. This field is required when executing against cloud-based compute targets  unless the run submission was against the API endpoint that takes a zipped project folder  inline with the request.
   * @return snapshotId
   */
  @javax.annotation.Nullable
  public UUID getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(UUID snapshotId) {
    this.snapshotId = snapshotId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunDefinition runDefinition = (RunDefinition) o;
    return Objects.equals(this._configuration, runDefinition._configuration) &&
        Objects.equals(this.parentRunId, runDefinition.parentRunId) &&
        Objects.equals(this.runType, runDefinition.runType) &&
        Objects.equals(this.snapshotId, runDefinition.snapshotId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_configuration, parentRunId, runType, snapshotId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunDefinition {\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    parentRunId: ").append(toIndentedString(parentRunId)).append("\n");
    sb.append("    runType: ").append(toIndentedString(runType)).append("\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configuration");
    openapiFields.add("parentRunId");
    openapiFields.add("runType");
    openapiFields.add("snapshotId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunDefinition is not found in the empty JSON string", RunDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `configuration`
      if (jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) {
        RunConfiguration.validateJsonElement(jsonObj.get("configuration"));
      }
      if ((jsonObj.get("parentRunId") != null && !jsonObj.get("parentRunId").isJsonNull()) && !jsonObj.get("parentRunId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentRunId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentRunId").toString()));
      }
      if ((jsonObj.get("runType") != null && !jsonObj.get("runType").isJsonNull()) && !jsonObj.get("runType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runType").toString()));
      }
      if ((jsonObj.get("snapshotId") != null && !jsonObj.get("snapshotId").isJsonNull()) && !jsonObj.get("snapshotId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshotId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshotId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<RunDefinition>() {
           @Override
           public void write(JsonWriter out, RunDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunDefinition
   * @throws IOException if the JSON string is invalid with respect to RunDefinition
   */
  public static RunDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunDefinition.class);
  }

  /**
   * Convert an instance of RunDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

