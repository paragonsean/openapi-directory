/*
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import org.openapitools.client.model.RunDefinition;
import org.openapitools.client.model.StartRunResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExecutionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExecutionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExecutionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for executionCancelRunWithUri
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param runId The id of the run to cancel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The run was successfully cancelled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executionCancelRunWithUriCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/execution/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runId/{runId}/cancel"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "experimentName" + "}", localVarApiClient.escapeString(experimentName.toString()))
            .replace("{" + "runId" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executionCancelRunWithUriValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling executionCancelRunWithUri(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling executionCancelRunWithUri(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling executionCancelRunWithUri(Async)");
        }

        // verify the required parameter 'experimentName' is set
        if (experimentName == null) {
            throw new ApiException("Missing the required parameter 'experimentName' when calling executionCancelRunWithUri(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling executionCancelRunWithUri(Async)");
        }

        return executionCancelRunWithUriCall(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, _callback);

    }

    /**
     * Cancel a run.
     * Cancels a run within an experiment.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param runId The id of the run to cancel. (required)
     * @return StartRunResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The run was successfully cancelled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StartRunResult executionCancelRunWithUri(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, String runId) throws ApiException {
        ApiResponse<StartRunResult> localVarResp = executionCancelRunWithUriWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, experimentName, runId);
        return localVarResp.getData();
    }

    /**
     * Cancel a run.
     * Cancels a run within an experiment.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param runId The id of the run to cancel. (required)
     * @return ApiResponse&lt;StartRunResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The run was successfully cancelled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartRunResult> executionCancelRunWithUriWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, String runId) throws ApiException {
        okhttp3.Call localVarCall = executionCancelRunWithUriValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, null);
        Type localVarReturnType = new TypeToken<StartRunResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a run. (asynchronously)
     * Cancels a run within an experiment.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param runId The id of the run to cancel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The run was successfully cancelled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executionCancelRunWithUriAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, String runId, final ApiCallback<StartRunResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = executionCancelRunWithUriValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, _callback);
        Type localVarReturnType = new TypeToken<StartRunResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for executionStartLocalRun
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param definition A JSON run definition structure. (required)
     * @param runId A run id. If not supplied a run id will be created automatically. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executionStartLocalRunCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, RunDefinition definition, String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = definition;

        // create path and map variables
        String localVarPath = "/execution/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/startlocalrun"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "experimentName" + "}", localVarApiClient.escapeString(experimentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (runId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("runId", runId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executionStartLocalRunValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, RunDefinition definition, String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling executionStartLocalRun(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling executionStartLocalRun(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling executionStartLocalRun(Async)");
        }

        // verify the required parameter 'experimentName' is set
        if (experimentName == null) {
            throw new ApiException("Missing the required parameter 'experimentName' when calling executionStartLocalRun(Async)");
        }

        // verify the required parameter 'definition' is set
        if (definition == null) {
            throw new ApiException("Missing the required parameter 'definition' when calling executionStartLocalRun(Async)");
        }

        return executionStartLocalRunCall(subscriptionId, resourceGroupName, workspaceName, experimentName, definition, runId, _callback);

    }

    /**
     * Start a run on a local machine.
     * Starts an experiment run using the provided definition.json file to define the run.              The source code and configuration is defined in a zip archive in project.zip.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param definition A JSON run definition structure. (required)
     * @param runId A run id. If not supplied a run id will be created automatically. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public File executionStartLocalRun(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, RunDefinition definition, String runId) throws ApiException {
        ApiResponse<File> localVarResp = executionStartLocalRunWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, experimentName, definition, runId);
        return localVarResp.getData();
    }

    /**
     * Start a run on a local machine.
     * Starts an experiment run using the provided definition.json file to define the run.              The source code and configuration is defined in a zip archive in project.zip.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param definition A JSON run definition structure. (required)
     * @param runId A run id. If not supplied a run id will be created automatically. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> executionStartLocalRunWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, RunDefinition definition, String runId) throws ApiException {
        okhttp3.Call localVarCall = executionStartLocalRunValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, experimentName, definition, runId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a run on a local machine. (asynchronously)
     * Starts an experiment run using the provided definition.json file to define the run.              The source code and configuration is defined in a zip archive in project.zip.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param definition A JSON run definition structure. (required)
     * @param runId A run id. If not supplied a run id will be created automatically. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executionStartLocalRunAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, RunDefinition definition, String runId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = executionStartLocalRunValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, experimentName, definition, runId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for executionStartRun
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param runDefinitionFile The JSON file containing the RunDefinition (required)
     * @param projectZipFile The zip archive of the project folder containing the source code to use for the run. (required)
     * @param runId A run id. If not supplied a run id will be created automatically. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A run was successfully started. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executionStartRunCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, File runDefinitionFile, File projectZipFile, String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/execution/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/startrun"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "experimentName" + "}", localVarApiClient.escapeString(experimentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (runDefinitionFile != null) {
            localVarFormParams.put("runDefinitionFile", runDefinitionFile);
        }

        if (projectZipFile != null) {
            localVarFormParams.put("projectZipFile", projectZipFile);
        }

        if (runId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("runId", runId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executionStartRunValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, File runDefinitionFile, File projectZipFile, String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling executionStartRun(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling executionStartRun(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling executionStartRun(Async)");
        }

        // verify the required parameter 'experimentName' is set
        if (experimentName == null) {
            throw new ApiException("Missing the required parameter 'experimentName' when calling executionStartRun(Async)");
        }

        // verify the required parameter 'runDefinitionFile' is set
        if (runDefinitionFile == null) {
            throw new ApiException("Missing the required parameter 'runDefinitionFile' when calling executionStartRun(Async)");
        }

        // verify the required parameter 'projectZipFile' is set
        if (projectZipFile == null) {
            throw new ApiException("Missing the required parameter 'projectZipFile' when calling executionStartRun(Async)");
        }

        return executionStartRunCall(subscriptionId, resourceGroupName, workspaceName, experimentName, runDefinitionFile, projectZipFile, runId, _callback);

    }

    /**
     * Start a run on a remote compute target.
     * Starts an experiment run using the provided definition.json file to define the run.              The source code and configuration is defined in a zip archive in project.zip.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param runDefinitionFile The JSON file containing the RunDefinition (required)
     * @param projectZipFile The zip archive of the project folder containing the source code to use for the run. (required)
     * @param runId A run id. If not supplied a run id will be created automatically. (optional)
     * @return StartRunResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A run was successfully started. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StartRunResult executionStartRun(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, File runDefinitionFile, File projectZipFile, String runId) throws ApiException {
        ApiResponse<StartRunResult> localVarResp = executionStartRunWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, experimentName, runDefinitionFile, projectZipFile, runId);
        return localVarResp.getData();
    }

    /**
     * Start a run on a remote compute target.
     * Starts an experiment run using the provided definition.json file to define the run.              The source code and configuration is defined in a zip archive in project.zip.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param runDefinitionFile The JSON file containing the RunDefinition (required)
     * @param projectZipFile The zip archive of the project folder containing the source code to use for the run. (required)
     * @param runId A run id. If not supplied a run id will be created automatically. (optional)
     * @return ApiResponse&lt;StartRunResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A run was successfully started. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartRunResult> executionStartRunWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, File runDefinitionFile, File projectZipFile, String runId) throws ApiException {
        okhttp3.Call localVarCall = executionStartRunValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, experimentName, runDefinitionFile, projectZipFile, runId, null);
        Type localVarReturnType = new TypeToken<StartRunResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a run on a remote compute target. (asynchronously)
     * Starts an experiment run using the provided definition.json file to define the run.              The source code and configuration is defined in a zip archive in project.zip.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param runDefinitionFile The JSON file containing the RunDefinition (required)
     * @param projectZipFile The zip archive of the project folder containing the source code to use for the run. (required)
     * @param runId A run id. If not supplied a run id will be created automatically. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A run was successfully started. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executionStartRunAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, File runDefinitionFile, File projectZipFile, String runId, final ApiCallback<StartRunResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = executionStartRunValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, experimentName, runDefinitionFile, projectZipFile, runId, _callback);
        Type localVarReturnType = new TypeToken<StartRunResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for executionStartSnapshotRun
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param definition A JSON run definition structure. (required)
     * @param runId A run id. If not supplied a run id will be created automatically. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot run was successfully started. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executionStartSnapshotRunCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, RunDefinition definition, String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = definition;

        // create path and map variables
        String localVarPath = "/execution/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/snapshotrun"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "experimentName" + "}", localVarApiClient.escapeString(experimentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (runId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("runId", runId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executionStartSnapshotRunValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, RunDefinition definition, String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling executionStartSnapshotRun(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling executionStartSnapshotRun(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling executionStartSnapshotRun(Async)");
        }

        // verify the required parameter 'experimentName' is set
        if (experimentName == null) {
            throw new ApiException("Missing the required parameter 'experimentName' when calling executionStartSnapshotRun(Async)");
        }

        // verify the required parameter 'definition' is set
        if (definition == null) {
            throw new ApiException("Missing the required parameter 'definition' when calling executionStartSnapshotRun(Async)");
        }

        return executionStartSnapshotRunCall(subscriptionId, resourceGroupName, workspaceName, experimentName, definition, runId, _callback);

    }

    /**
     * Start a run from a snapshot on a remote compute target.
     * Starts an experiment run on the remote compute target using the provided definition.json file to define the run.              The code for the run is retrieved using the snapshotId in definition.json.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param definition A JSON run definition structure. (required)
     * @param runId A run id. If not supplied a run id will be created automatically. (optional)
     * @return StartRunResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot run was successfully started. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StartRunResult executionStartSnapshotRun(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, RunDefinition definition, String runId) throws ApiException {
        ApiResponse<StartRunResult> localVarResp = executionStartSnapshotRunWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, experimentName, definition, runId);
        return localVarResp.getData();
    }

    /**
     * Start a run from a snapshot on a remote compute target.
     * Starts an experiment run on the remote compute target using the provided definition.json file to define the run.              The code for the run is retrieved using the snapshotId in definition.json.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param definition A JSON run definition structure. (required)
     * @param runId A run id. If not supplied a run id will be created automatically. (optional)
     * @return ApiResponse&lt;StartRunResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot run was successfully started. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartRunResult> executionStartSnapshotRunWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, RunDefinition definition, String runId) throws ApiException {
        okhttp3.Call localVarCall = executionStartSnapshotRunValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, experimentName, definition, runId, null);
        Type localVarReturnType = new TypeToken<StartRunResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a run from a snapshot on a remote compute target. (asynchronously)
     * Starts an experiment run on the remote compute target using the provided definition.json file to define the run.              The code for the run is retrieved using the snapshotId in definition.json.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param experimentName The experiment name. (required)
     * @param definition A JSON run definition structure. (required)
     * @param runId A run id. If not supplied a run id will be created automatically. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A snapshot run was successfully started. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executionStartSnapshotRunAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String experimentName, RunDefinition definition, String runId, final ApiCallback<StartRunResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = executionStartSnapshotRunValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, experimentName, definition, runId, _callback);
        Type localVarReturnType = new TypeToken<StartRunResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
