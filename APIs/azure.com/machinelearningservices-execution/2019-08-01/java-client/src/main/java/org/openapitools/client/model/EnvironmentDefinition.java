/*
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DockerSection;
import org.openapitools.client.model.PythonSection;
import org.openapitools.client.model.SparkSection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnvironmentDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:55:51.767311-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnvironmentDefinition {
  public static final String SERIALIZED_NAME_DOCKER = "docker";
  @SerializedName(SERIALIZED_NAME_DOCKER)
  private DockerSection docker;

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES = "environmentVariables";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES)
  private Map<String, String> environmentVariables = new HashMap<>();

  public static final String SERIALIZED_NAME_INFERENCING_STACK_VERSION = "inferencingStackVersion";
  @SerializedName(SERIALIZED_NAME_INFERENCING_STACK_VERSION)
  private String inferencingStackVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PYTHON = "python";
  @SerializedName(SERIALIZED_NAME_PYTHON)
  private PythonSection python;

  public static final String SERIALIZED_NAME_SPARK = "spark";
  @SerializedName(SERIALIZED_NAME_SPARK)
  private SparkSection spark;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public EnvironmentDefinition() {
  }

  public EnvironmentDefinition docker(DockerSection docker) {
    this.docker = docker;
    return this;
  }

  /**
   * Get docker
   * @return docker
   */
  @javax.annotation.Nullable
  public DockerSection getDocker() {
    return docker;
  }

  public void setDocker(DockerSection docker) {
    this.docker = docker;
  }


  public EnvironmentDefinition environmentVariables(Map<String, String> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  public EnvironmentDefinition putEnvironmentVariablesItem(String key, String environmentVariablesItem) {
    if (this.environmentVariables == null) {
      this.environmentVariables = new HashMap<>();
    }
    this.environmentVariables.put(key, environmentVariablesItem);
    return this;
  }

  /**
   * Definition of environment variables to be defined in the environment.
   * @return environmentVariables
   */
  @javax.annotation.Nullable
  public Map<String, String> getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(Map<String, String> environmentVariables) {
    this.environmentVariables = environmentVariables;
  }


  public EnvironmentDefinition inferencingStackVersion(String inferencingStackVersion) {
    this.inferencingStackVersion = inferencingStackVersion;
    return this;
  }

  /**
   * The inferencing stack version added to the image. To avoid adding an inferencing stack, do not set this value. Valid values: \&quot;latest\&quot;.
   * @return inferencingStackVersion
   */
  @javax.annotation.Nullable
  public String getInferencingStackVersion() {
    return inferencingStackVersion;
  }

  public void setInferencingStackVersion(String inferencingStackVersion) {
    this.inferencingStackVersion = inferencingStackVersion;
  }


  public EnvironmentDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the environment.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EnvironmentDefinition python(PythonSection python) {
    this.python = python;
    return this;
  }

  /**
   * Get python
   * @return python
   */
  @javax.annotation.Nullable
  public PythonSection getPython() {
    return python;
  }

  public void setPython(PythonSection python) {
    this.python = python;
  }


  public EnvironmentDefinition spark(SparkSection spark) {
    this.spark = spark;
    return this;
  }

  /**
   * Get spark
   * @return spark
   */
  @javax.annotation.Nullable
  public SparkSection getSpark() {
    return spark;
  }

  public void setSpark(SparkSection spark) {
    this.spark = spark;
  }


  public EnvironmentDefinition version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The environment version.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvironmentDefinition environmentDefinition = (EnvironmentDefinition) o;
    return Objects.equals(this.docker, environmentDefinition.docker) &&
        Objects.equals(this.environmentVariables, environmentDefinition.environmentVariables) &&
        Objects.equals(this.inferencingStackVersion, environmentDefinition.inferencingStackVersion) &&
        Objects.equals(this.name, environmentDefinition.name) &&
        Objects.equals(this.python, environmentDefinition.python) &&
        Objects.equals(this.spark, environmentDefinition.spark) &&
        Objects.equals(this.version, environmentDefinition.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docker, environmentVariables, inferencingStackVersion, name, python, spark, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvironmentDefinition {\n");
    sb.append("    docker: ").append(toIndentedString(docker)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    inferencingStackVersion: ").append(toIndentedString(inferencingStackVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    python: ").append(toIndentedString(python)).append("\n");
    sb.append("    spark: ").append(toIndentedString(spark)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("docker");
    openapiFields.add("environmentVariables");
    openapiFields.add("inferencingStackVersion");
    openapiFields.add("name");
    openapiFields.add("python");
    openapiFields.add("spark");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvironmentDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvironmentDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvironmentDefinition is not found in the empty JSON string", EnvironmentDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvironmentDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvironmentDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `docker`
      if (jsonObj.get("docker") != null && !jsonObj.get("docker").isJsonNull()) {
        DockerSection.validateJsonElement(jsonObj.get("docker"));
      }
      if ((jsonObj.get("inferencingStackVersion") != null && !jsonObj.get("inferencingStackVersion").isJsonNull()) && !jsonObj.get("inferencingStackVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inferencingStackVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inferencingStackVersion").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `python`
      if (jsonObj.get("python") != null && !jsonObj.get("python").isJsonNull()) {
        PythonSection.validateJsonElement(jsonObj.get("python"));
      }
      // validate the optional field `spark`
      if (jsonObj.get("spark") != null && !jsonObj.get("spark").isJsonNull()) {
        SparkSection.validateJsonElement(jsonObj.get("spark"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvironmentDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvironmentDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvironmentDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvironmentDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvironmentDefinition>() {
           @Override
           public void write(JsonWriter out, EnvironmentDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvironmentDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvironmentDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvironmentDefinition
   * @throws IOException if the JSON string is invalid with respect to EnvironmentDefinition
   */
  public static EnvironmentDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvironmentDefinition.class);
  }

  /**
   * Convert an instance of EnvironmentDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

