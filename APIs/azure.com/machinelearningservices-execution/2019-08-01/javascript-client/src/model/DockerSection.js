/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerRegistry from './ContainerRegistry';

/**
 * The DockerSection model module.
 * @module model/DockerSection
 * @version 2019-08-01
 */
class DockerSection {
    /**
     * Constructs a new <code>DockerSection</code>.
     * @alias module:model/DockerSection
     */
    constructor() { 
        
        DockerSection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DockerSection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DockerSection} obj Optional instance to populate.
     * @return {module:model/DockerSection} The populated <code>DockerSection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DockerSection();

            if (data.hasOwnProperty('arguments')) {
                obj['arguments'] = ApiClient.convertToType(data['arguments'], ['String']);
            }
            if (data.hasOwnProperty('baseDockerfile')) {
                obj['baseDockerfile'] = ApiClient.convertToType(data['baseDockerfile'], 'String');
            }
            if (data.hasOwnProperty('baseImage')) {
                obj['baseImage'] = ApiClient.convertToType(data['baseImage'], 'String');
            }
            if (data.hasOwnProperty('baseImageRegistry')) {
                obj['baseImageRegistry'] = ContainerRegistry.constructFromObject(data['baseImageRegistry']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('sharedVolumes')) {
                obj['sharedVolumes'] = ApiClient.convertToType(data['sharedVolumes'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DockerSection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DockerSection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['arguments'])) {
            throw new Error("Expected the field `arguments` to be an array in the JSON data but got " + data['arguments']);
        }
        // ensure the json data is a string
        if (data['baseDockerfile'] && !(typeof data['baseDockerfile'] === 'string' || data['baseDockerfile'] instanceof String)) {
            throw new Error("Expected the field `baseDockerfile` to be a primitive type in the JSON string but got " + data['baseDockerfile']);
        }
        // ensure the json data is a string
        if (data['baseImage'] && !(typeof data['baseImage'] === 'string' || data['baseImage'] instanceof String)) {
            throw new Error("Expected the field `baseImage` to be a primitive type in the JSON string but got " + data['baseImage']);
        }
        // validate the optional field `baseImageRegistry`
        if (data['baseImageRegistry']) { // data not null
          ContainerRegistry.validateJSON(data['baseImageRegistry']);
        }

        return true;
    }


}



/**
 * Extra arguments to the Docker run command.
 * @member {Array.<String>} arguments
 */
DockerSection.prototype['arguments'] = undefined;

/**
 * Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.
 * @member {String} baseDockerfile
 */
DockerSection.prototype['baseDockerfile'] = undefined;

/**
 * Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.
 * @member {String} baseImage
 */
DockerSection.prototype['baseImage'] = undefined;

/**
 * @member {module:model/ContainerRegistry} baseImageRegistry
 */
DockerSection.prototype['baseImageRegistry'] = undefined;

/**
 * Set true to perform this run inside a Docker container.
 * @member {Boolean} enabled
 */
DockerSection.prototype['enabled'] = undefined;

/**
 * Set false to disable AzureML's usage of the Docker shared volumes feature to work around bugs in certain versions of Docker for Windows.
 * @member {Boolean} sharedVolumes
 */
DockerSection.prototype['sharedVolumes'] = undefined;






export default DockerSection;

