/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataReferenceConfiguration from './DataReferenceConfiguration';
import EnvironmentDefinition from './EnvironmentDefinition';
import HdiConfiguration from './HdiConfiguration';
import HistoryConfiguration from './HistoryConfiguration';
import MpiConfiguration from './MpiConfiguration';
import SparkConfiguration from './SparkConfiguration';
import TensorflowConfiguration from './TensorflowConfiguration';

/**
 * The RunConfiguration model module.
 * @module model/RunConfiguration
 * @version 2019-08-01
 */
class RunConfiguration {
    /**
     * Constructs a new <code>RunConfiguration</code>.
     * @alias module:model/RunConfiguration
     */
    constructor() { 
        
        RunConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunConfiguration} obj Optional instance to populate.
     * @return {module:model/RunConfiguration} The populated <code>RunConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunConfiguration();

            if (data.hasOwnProperty('arguments')) {
                obj['arguments'] = ApiClient.convertToType(data['arguments'], ['String']);
            }
            if (data.hasOwnProperty('communicator')) {
                obj['communicator'] = ApiClient.convertToType(data['communicator'], 'String');
            }
            if (data.hasOwnProperty('dataReferences')) {
                obj['dataReferences'] = ApiClient.convertToType(data['dataReferences'], {'String': DataReferenceConfiguration});
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = EnvironmentDefinition.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('framework')) {
                obj['framework'] = ApiClient.convertToType(data['framework'], 'String');
            }
            if (data.hasOwnProperty('hdi')) {
                obj['hdi'] = HdiConfiguration.constructFromObject(data['hdi']);
            }
            if (data.hasOwnProperty('history')) {
                obj['history'] = HistoryConfiguration.constructFromObject(data['history']);
            }
            if (data.hasOwnProperty('jobName')) {
                obj['jobName'] = ApiClient.convertToType(data['jobName'], 'String');
            }
            if (data.hasOwnProperty('maxRunDurationSeconds')) {
                obj['maxRunDurationSeconds'] = ApiClient.convertToType(data['maxRunDurationSeconds'], 'Number');
            }
            if (data.hasOwnProperty('mpi')) {
                obj['mpi'] = MpiConfiguration.constructFromObject(data['mpi']);
            }
            if (data.hasOwnProperty('nodeCount')) {
                obj['nodeCount'] = ApiClient.convertToType(data['nodeCount'], 'Number');
            }
            if (data.hasOwnProperty('script')) {
                obj['script'] = ApiClient.convertToType(data['script'], 'String');
            }
            if (data.hasOwnProperty('spark')) {
                obj['spark'] = SparkConfiguration.constructFromObject(data['spark']);
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('tensorflow')) {
                obj['tensorflow'] = TensorflowConfiguration.constructFromObject(data['tensorflow']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['arguments'])) {
            throw new Error("Expected the field `arguments` to be an array in the JSON data but got " + data['arguments']);
        }
        // ensure the json data is a string
        if (data['communicator'] && !(typeof data['communicator'] === 'string' || data['communicator'] instanceof String)) {
            throw new Error("Expected the field `communicator` to be a primitive type in the JSON string but got " + data['communicator']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          EnvironmentDefinition.validateJSON(data['environment']);
        }
        // ensure the json data is a string
        if (data['framework'] && !(typeof data['framework'] === 'string' || data['framework'] instanceof String)) {
            throw new Error("Expected the field `framework` to be a primitive type in the JSON string but got " + data['framework']);
        }
        // validate the optional field `hdi`
        if (data['hdi']) { // data not null
          HdiConfiguration.validateJSON(data['hdi']);
        }
        // validate the optional field `history`
        if (data['history']) { // data not null
          HistoryConfiguration.validateJSON(data['history']);
        }
        // ensure the json data is a string
        if (data['jobName'] && !(typeof data['jobName'] === 'string' || data['jobName'] instanceof String)) {
            throw new Error("Expected the field `jobName` to be a primitive type in the JSON string but got " + data['jobName']);
        }
        // validate the optional field `mpi`
        if (data['mpi']) { // data not null
          MpiConfiguration.validateJSON(data['mpi']);
        }
        // ensure the json data is a string
        if (data['script'] && !(typeof data['script'] === 'string' || data['script'] instanceof String)) {
            throw new Error("Expected the field `script` to be a primitive type in the JSON string but got " + data['script']);
        }
        // validate the optional field `spark`
        if (data['spark']) { // data not null
          SparkConfiguration.validateJSON(data['spark']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }
        // validate the optional field `tensorflow`
        if (data['tensorflow']) { // data not null
          TensorflowConfiguration.validateJSON(data['tensorflow']);
        }

        return true;
    }


}



/**
 * Command line arguments for the python script file.
 * @member {Array.<String>} arguments
 */
RunConfiguration.prototype['arguments'] = undefined;

/**
 * The supported communicators are None, ParameterServer, OpenMpi, and IntelMpi Keep in mind that OpenMpi requires a custom image with OpenMpi installed.  Use ParameterServer or OpenMpi for AmlCompute clusters. Use IntelMpi for distributed training jobs.
 * @member {module:model/RunConfiguration.CommunicatorEnum} communicator
 */
RunConfiguration.prototype['communicator'] = undefined;

/**
 * All the data sources are made available to the run during execution based on each configuration.
 * @member {Object.<String, module:model/DataReferenceConfiguration>} dataReferences
 */
RunConfiguration.prototype['dataReferences'] = undefined;

/**
 * @member {module:model/EnvironmentDefinition} environment
 */
RunConfiguration.prototype['environment'] = undefined;

/**
 * The supported frameworks are Python, PySpark, CNTK, TensorFlow, and PyTorch. Use Tensorflow for AmlCompute clusters, and Python for distributed training jobs.
 * @member {module:model/RunConfiguration.FrameworkEnum} framework
 */
RunConfiguration.prototype['framework'] = undefined;

/**
 * @member {module:model/HdiConfiguration} hdi
 */
RunConfiguration.prototype['hdi'] = undefined;

/**
 * @member {module:model/HistoryConfiguration} history
 */
RunConfiguration.prototype['history'] = undefined;

/**
 * This is primarily intended for notebooks to override the default job name.  Defaults to ArgumentVector[0] if not specified.
 * @member {String} jobName
 */
RunConfiguration.prototype['jobName'] = undefined;

/**
 * Maximum allowed time for the run. The system will attempt to automatically cancel the run if it took longer than this value.  MaxRunDurationSeconds=null means infinite duration.
 * @member {Number} maxRunDurationSeconds
 */
RunConfiguration.prototype['maxRunDurationSeconds'] = undefined;

/**
 * @member {module:model/MpiConfiguration} mpi
 */
RunConfiguration.prototype['mpi'] = undefined;

/**
 * Number of compute nodes to run the job on. Only applies to AMLCompute.
 * @member {Number} nodeCount
 */
RunConfiguration.prototype['nodeCount'] = undefined;

/**
 * The relative path to the python script file. The file path is relative to the source_directory passed to submit run.
 * @member {String} script
 */
RunConfiguration.prototype['script'] = undefined;

/**
 * @member {module:model/SparkConfiguration} spark
 */
RunConfiguration.prototype['spark'] = undefined;

/**
 * Target refers to compute where the job is scheduled for execution. The default target is \"local\" referring to the local machine.
 * @member {String} target
 */
RunConfiguration.prototype['target'] = undefined;

/**
 * @member {module:model/TensorflowConfiguration} tensorflow
 */
RunConfiguration.prototype['tensorflow'] = undefined;





/**
 * Allowed values for the <code>communicator</code> property.
 * @enum {String}
 * @readonly
 */
RunConfiguration['CommunicatorEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "ParameterServer"
     * @const
     */
    "ParameterServer": "ParameterServer",

    /**
     * value: "Gloo"
     * @const
     */
    "Gloo": "Gloo",

    /**
     * value: "Mpi"
     * @const
     */
    "Mpi": "Mpi",

    /**
     * value: "Nccl"
     * @const
     */
    "Nccl": "Nccl"
};


/**
 * Allowed values for the <code>framework</code> property.
 * @enum {String}
 * @readonly
 */
RunConfiguration['FrameworkEnum'] = {

    /**
     * value: "Python"
     * @const
     */
    "Python": "Python",

    /**
     * value: "PySpark"
     * @const
     */
    "PySpark": "PySpark",

    /**
     * value: "Cntk"
     * @const
     */
    "Cntk": "Cntk",

    /**
     * value: "TensorFlow"
     * @const
     */
    "TensorFlow": "TensorFlow",

    /**
     * value: "PyTorch"
     * @const
     */
    "PyTorch": "PyTorch"
};



export default RunConfiguration;

