/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExecutionApi_H
#define OAI_OAIExecutionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIRunDefinition.h"
#include "OAIStartRunResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExecutionApi : public QObject {
    Q_OBJECT

public:
    OAIExecutionApi(const int timeOut = 0);
    ~OAIExecutionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  experiment_name QString [required]
    * @param[in]  run_id QString [required]
    */
    virtual void executionCancelRunWithUri(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &experiment_name, const QString &run_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  experiment_name QString [required]
    * @param[in]  definition OAIRunDefinition [required]
    * @param[in]  run_id QString [optional]
    */
    virtual void executionStartLocalRun(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &experiment_name, const OAIRunDefinition &definition, const ::OpenAPI::OptionalParam<QString> &run_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  experiment_name QString [required]
    * @param[in]  run_definition_file OAIHttpFileElement [required]
    * @param[in]  project_zip_file OAIHttpFileElement [required]
    * @param[in]  run_id QString [optional]
    */
    virtual void executionStartRun(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &experiment_name, const OAIHttpFileElement &run_definition_file, const OAIHttpFileElement &project_zip_file, const ::OpenAPI::OptionalParam<QString> &run_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  experiment_name QString [required]
    * @param[in]  definition OAIRunDefinition [required]
    * @param[in]  run_id QString [optional]
    */
    virtual void executionStartSnapshotRun(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &experiment_name, const OAIRunDefinition &definition, const ::OpenAPI::OptionalParam<QString> &run_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void executionCancelRunWithUriCallback(OAIHttpRequestWorker *worker);
    void executionStartLocalRunCallback(OAIHttpRequestWorker *worker);
    void executionStartRunCallback(OAIHttpRequestWorker *worker);
    void executionStartSnapshotRunCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void executionCancelRunWithUriSignal(OAIStartRunResult summary);
    void executionStartLocalRunSignal(OAIHttpFileElement summary);
    void executionStartRunSignal(OAIStartRunResult summary);
    void executionStartSnapshotRunSignal(OAIStartRunResult summary);


    void executionCancelRunWithUriSignalFull(OAIHttpRequestWorker *worker, OAIStartRunResult summary);
    void executionStartLocalRunSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void executionStartRunSignalFull(OAIHttpRequestWorker *worker, OAIStartRunResult summary);
    void executionStartSnapshotRunSignalFull(OAIHttpRequestWorker *worker, OAIStartRunResult summary);

    Q_DECL_DEPRECATED_X("Use executionCancelRunWithUriSignalError() instead")
    void executionCancelRunWithUriSignalE(OAIStartRunResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void executionCancelRunWithUriSignalError(OAIStartRunResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executionStartLocalRunSignalError() instead")
    void executionStartLocalRunSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void executionStartLocalRunSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executionStartRunSignalError() instead")
    void executionStartRunSignalE(OAIStartRunResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void executionStartRunSignalError(OAIStartRunResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executionStartSnapshotRunSignalError() instead")
    void executionStartSnapshotRunSignalE(OAIStartRunResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void executionStartSnapshotRunSignalError(OAIStartRunResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use executionCancelRunWithUriSignalErrorFull() instead")
    void executionCancelRunWithUriSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void executionCancelRunWithUriSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executionStartLocalRunSignalErrorFull() instead")
    void executionStartLocalRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void executionStartLocalRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executionStartRunSignalErrorFull() instead")
    void executionStartRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void executionStartRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executionStartSnapshotRunSignalErrorFull() instead")
    void executionStartSnapshotRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void executionStartSnapshotRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
