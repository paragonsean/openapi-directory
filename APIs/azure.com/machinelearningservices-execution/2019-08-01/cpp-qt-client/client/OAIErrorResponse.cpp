/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorResponse::OAIErrorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorResponse::OAIErrorResponse() {
    this->initializeModel();
}

OAIErrorResponse::~OAIErrorResponse() {}

void OAIErrorResponse::initializeModel() {

    m_correlation_isSet = false;
    m_correlation_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIErrorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorResponse::fromJsonObject(QJsonObject json) {

    m_correlation_isValid = ::OpenAPI::fromJsonValue(m_correlation, json[QString("correlation")]);
    m_correlation_isSet = !json[QString("correlation")].isNull() && m_correlation_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAIErrorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_correlation.size() > 0) {
        obj.insert(QString("correlation"), ::OpenAPI::toJsonValue(m_correlation));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

QMap<QString, QString> OAIErrorResponse::getCorrelation() const {
    return m_correlation;
}
void OAIErrorResponse::setCorrelation(const QMap<QString, QString> &correlation) {
    m_correlation = correlation;
    m_correlation_isSet = true;
}

bool OAIErrorResponse::is_correlation_Set() const{
    return m_correlation_isSet;
}

bool OAIErrorResponse::is_correlation_Valid() const{
    return m_correlation_isValid;
}

QString OAIErrorResponse::getEnvironment() const {
    return m_environment;
}
void OAIErrorResponse::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIErrorResponse::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIErrorResponse::is_environment_Valid() const{
    return m_environment_isValid;
}

OAIRootError OAIErrorResponse::getError() const {
    return m_error;
}
void OAIErrorResponse::setError(const OAIRootError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIErrorResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIErrorResponse::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIErrorResponse::getLocation() const {
    return m_location;
}
void OAIErrorResponse::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIErrorResponse::is_location_Set() const{
    return m_location_isSet;
}

bool OAIErrorResponse::is_location_Valid() const{
    return m_location_isValid;
}

QDateTime OAIErrorResponse::getTime() const {
    return m_time;
}
void OAIErrorResponse::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIErrorResponse::is_time_Set() const{
    return m_time_isSet;
}

bool OAIErrorResponse::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIErrorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_correlation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
