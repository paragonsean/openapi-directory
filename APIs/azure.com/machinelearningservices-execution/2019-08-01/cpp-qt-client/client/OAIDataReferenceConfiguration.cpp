/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataReferenceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataReferenceConfiguration::OAIDataReferenceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataReferenceConfiguration::OAIDataReferenceConfiguration() {
    this->initializeModel();
}

OAIDataReferenceConfiguration::~OAIDataReferenceConfiguration() {}

void OAIDataReferenceConfiguration::initializeModel() {

    m_data_store_name_isSet = false;
    m_data_store_name_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_overwrite_isSet = false;
    m_overwrite_isValid = false;

    m_path_on_compute_isSet = false;
    m_path_on_compute_isValid = false;

    m_path_on_data_store_isSet = false;
    m_path_on_data_store_isValid = false;
}

void OAIDataReferenceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataReferenceConfiguration::fromJsonObject(QJsonObject json) {

    m_data_store_name_isValid = ::OpenAPI::fromJsonValue(m_data_store_name, json[QString("dataStoreName")]);
    m_data_store_name_isSet = !json[QString("dataStoreName")].isNull() && m_data_store_name_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_overwrite_isValid = ::OpenAPI::fromJsonValue(m_overwrite, json[QString("overwrite")]);
    m_overwrite_isSet = !json[QString("overwrite")].isNull() && m_overwrite_isValid;

    m_path_on_compute_isValid = ::OpenAPI::fromJsonValue(m_path_on_compute, json[QString("pathOnCompute")]);
    m_path_on_compute_isSet = !json[QString("pathOnCompute")].isNull() && m_path_on_compute_isValid;

    m_path_on_data_store_isValid = ::OpenAPI::fromJsonValue(m_path_on_data_store, json[QString("pathOnDataStore")]);
    m_path_on_data_store_isSet = !json[QString("pathOnDataStore")].isNull() && m_path_on_data_store_isValid;
}

QString OAIDataReferenceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataReferenceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_data_store_name_isSet) {
        obj.insert(QString("dataStoreName"), ::OpenAPI::toJsonValue(m_data_store_name));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_overwrite_isSet) {
        obj.insert(QString("overwrite"), ::OpenAPI::toJsonValue(m_overwrite));
    }
    if (m_path_on_compute_isSet) {
        obj.insert(QString("pathOnCompute"), ::OpenAPI::toJsonValue(m_path_on_compute));
    }
    if (m_path_on_data_store_isSet) {
        obj.insert(QString("pathOnDataStore"), ::OpenAPI::toJsonValue(m_path_on_data_store));
    }
    return obj;
}

QString OAIDataReferenceConfiguration::getDataStoreName() const {
    return m_data_store_name;
}
void OAIDataReferenceConfiguration::setDataStoreName(const QString &data_store_name) {
    m_data_store_name = data_store_name;
    m_data_store_name_isSet = true;
}

bool OAIDataReferenceConfiguration::is_data_store_name_Set() const{
    return m_data_store_name_isSet;
}

bool OAIDataReferenceConfiguration::is_data_store_name_Valid() const{
    return m_data_store_name_isValid;
}

QString OAIDataReferenceConfiguration::getMode() const {
    return m_mode;
}
void OAIDataReferenceConfiguration::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIDataReferenceConfiguration::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIDataReferenceConfiguration::is_mode_Valid() const{
    return m_mode_isValid;
}

bool OAIDataReferenceConfiguration::isOverwrite() const {
    return m_overwrite;
}
void OAIDataReferenceConfiguration::setOverwrite(const bool &overwrite) {
    m_overwrite = overwrite;
    m_overwrite_isSet = true;
}

bool OAIDataReferenceConfiguration::is_overwrite_Set() const{
    return m_overwrite_isSet;
}

bool OAIDataReferenceConfiguration::is_overwrite_Valid() const{
    return m_overwrite_isValid;
}

QString OAIDataReferenceConfiguration::getPathOnCompute() const {
    return m_path_on_compute;
}
void OAIDataReferenceConfiguration::setPathOnCompute(const QString &path_on_compute) {
    m_path_on_compute = path_on_compute;
    m_path_on_compute_isSet = true;
}

bool OAIDataReferenceConfiguration::is_path_on_compute_Set() const{
    return m_path_on_compute_isSet;
}

bool OAIDataReferenceConfiguration::is_path_on_compute_Valid() const{
    return m_path_on_compute_isValid;
}

QString OAIDataReferenceConfiguration::getPathOnDataStore() const {
    return m_path_on_data_store;
}
void OAIDataReferenceConfiguration::setPathOnDataStore(const QString &path_on_data_store) {
    m_path_on_data_store = path_on_data_store;
    m_path_on_data_store_isSet = true;
}

bool OAIDataReferenceConfiguration::is_path_on_data_store_Set() const{
    return m_path_on_data_store_isSet;
}

bool OAIDataReferenceConfiguration::is_path_on_data_store_Valid() const{
    return m_path_on_data_store_isValid;
}

bool OAIDataReferenceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_store_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_on_compute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_on_data_store_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataReferenceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
