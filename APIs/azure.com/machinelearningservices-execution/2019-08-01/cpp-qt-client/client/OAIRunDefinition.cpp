/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunDefinition::OAIRunDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunDefinition::OAIRunDefinition() {
    this->initializeModel();
}

OAIRunDefinition::~OAIRunDefinition() {}

void OAIRunDefinition::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_parent_run_id_isSet = false;
    m_parent_run_id_isValid = false;

    m_run_type_isSet = false;
    m_run_type_isValid = false;

    m_snapshot_id_isSet = false;
    m_snapshot_id_isValid = false;
}

void OAIRunDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunDefinition::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_parent_run_id_isValid = ::OpenAPI::fromJsonValue(m_parent_run_id, json[QString("parentRunId")]);
    m_parent_run_id_isSet = !json[QString("parentRunId")].isNull() && m_parent_run_id_isValid;

    m_run_type_isValid = ::OpenAPI::fromJsonValue(m_run_type, json[QString("runType")]);
    m_run_type_isSet = !json[QString("runType")].isNull() && m_run_type_isValid;

    m_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_id, json[QString("snapshotId")]);
    m_snapshot_id_isSet = !json[QString("snapshotId")].isNull() && m_snapshot_id_isValid;
}

QString OAIRunDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_parent_run_id_isSet) {
        obj.insert(QString("parentRunId"), ::OpenAPI::toJsonValue(m_parent_run_id));
    }
    if (m_run_type_isSet) {
        obj.insert(QString("runType"), ::OpenAPI::toJsonValue(m_run_type));
    }
    if (m_snapshot_id_isSet) {
        obj.insert(QString("snapshotId"), ::OpenAPI::toJsonValue(m_snapshot_id));
    }
    return obj;
}

OAIRunConfiguration OAIRunDefinition::getConfiguration() const {
    return m_configuration;
}
void OAIRunDefinition::setConfiguration(const OAIRunConfiguration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIRunDefinition::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIRunDefinition::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIRunDefinition::getParentRunId() const {
    return m_parent_run_id;
}
void OAIRunDefinition::setParentRunId(const QString &parent_run_id) {
    m_parent_run_id = parent_run_id;
    m_parent_run_id_isSet = true;
}

bool OAIRunDefinition::is_parent_run_id_Set() const{
    return m_parent_run_id_isSet;
}

bool OAIRunDefinition::is_parent_run_id_Valid() const{
    return m_parent_run_id_isValid;
}

QString OAIRunDefinition::getRunType() const {
    return m_run_type;
}
void OAIRunDefinition::setRunType(const QString &run_type) {
    m_run_type = run_type;
    m_run_type_isSet = true;
}

bool OAIRunDefinition::is_run_type_Set() const{
    return m_run_type_isSet;
}

bool OAIRunDefinition::is_run_type_Valid() const{
    return m_run_type_isValid;
}

QString OAIRunDefinition::getSnapshotId() const {
    return m_snapshot_id;
}
void OAIRunDefinition::setSnapshotId(const QString &snapshot_id) {
    m_snapshot_id = snapshot_id;
    m_snapshot_id_isSet = true;
}

bool OAIRunDefinition::is_snapshot_id_Set() const{
    return m_snapshot_id_isSet;
}

bool OAIRunDefinition::is_snapshot_id_Valid() const{
    return m_snapshot_id_isValid;
}

bool OAIRunDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
