# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_details import ErrorDetails
from openapi_server.models.inner_error_response import InnerErrorResponse
from openapi_server import util


class RootError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, details: List[ErrorDetails]=None, inner_error: InnerErrorResponse=None, message: str=None, target: str=None):
        """RootError - a model defined in OpenAPI

        :param code: The code of this RootError.
        :param details: The details of this RootError.
        :param inner_error: The inner_error of this RootError.
        :param message: The message of this RootError.
        :param target: The target of this RootError.
        """
        self.openapi_types = {
            'code': str,
            'details': List[ErrorDetails],
            'inner_error': InnerErrorResponse,
            'message': str,
            'target': str
        }

        self.attribute_map = {
            'code': 'code',
            'details': 'details',
            'inner_error': 'innerError',
            'message': 'message',
            'target': 'target'
        }

        self._code = code
        self._details = details
        self._inner_error = inner_error
        self._message = message
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RootError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RootError of this RootError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this RootError.

        The service-defined error code. Supported error codes: ServiceError, UserError, ValidationError, AzureStorageError, TransientError, RequestThrottled.

        :return: The code of this RootError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RootError.

        The service-defined error code. Supported error codes: ServiceError, UserError, ValidationError, AzureStorageError, TransientError, RequestThrottled.

        :param code: The code of this RootError.
        :type code: str
        """

        self._code = code

    @property
    def details(self):
        """Gets the details of this RootError.

        The related errors that occurred during the request.

        :return: The details of this RootError.
        :rtype: List[ErrorDetails]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RootError.

        The related errors that occurred during the request.

        :param details: The details of this RootError.
        :type details: List[ErrorDetails]
        """

        self._details = details

    @property
    def inner_error(self):
        """Gets the inner_error of this RootError.


        :return: The inner_error of this RootError.
        :rtype: InnerErrorResponse
        """
        return self._inner_error

    @inner_error.setter
    def inner_error(self, inner_error):
        """Sets the inner_error of this RootError.


        :param inner_error: The inner_error of this RootError.
        :type inner_error: InnerErrorResponse
        """

        self._inner_error = inner_error

    @property
    def message(self):
        """Gets the message of this RootError.

        A human-readable representation of the error.

        :return: The message of this RootError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RootError.

        A human-readable representation of the error.

        :param message: The message of this RootError.
        :type message: str
        """

        self._message = message

    @property
    def target(self):
        """Gets the target of this RootError.

        The target of the error (e.g., the name of the property in error).

        :return: The target of this RootError.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this RootError.

        The target of the error (e.g., the name of the property in error).

        :param target: The target of this RootError.
        :type target: str
        """

        self._target = target
