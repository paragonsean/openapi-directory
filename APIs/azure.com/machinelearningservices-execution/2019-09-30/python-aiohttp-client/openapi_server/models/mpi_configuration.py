# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MpiConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, process_count_per_node: int=None):
        """MpiConfiguration - a model defined in OpenAPI

        :param process_count_per_node: The process_count_per_node of this MpiConfiguration.
        """
        self.openapi_types = {
            'process_count_per_node': int
        }

        self.attribute_map = {
            'process_count_per_node': 'processCountPerNode'
        }

        self._process_count_per_node = process_count_per_node

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MpiConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MpiConfiguration of this MpiConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def process_count_per_node(self):
        """Gets the process_count_per_node of this MpiConfiguration.

        Number of processes per node.

        :return: The process_count_per_node of this MpiConfiguration.
        :rtype: int
        """
        return self._process_count_per_node

    @process_count_per_node.setter
    def process_count_per_node(self, process_count_per_node):
        """Sets the process_count_per_node of this MpiConfiguration.

        Number of processes per node.

        :param process_count_per_node: The process_count_per_node of this MpiConfiguration.
        :type process_count_per_node: int
        """

        self._process_count_per_node = process_count_per_node
