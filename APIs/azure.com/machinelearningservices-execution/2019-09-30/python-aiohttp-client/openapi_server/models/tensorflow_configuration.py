# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TensorflowConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter_server_count: int=None, worker_count: int=None):
        """TensorflowConfiguration - a model defined in OpenAPI

        :param parameter_server_count: The parameter_server_count of this TensorflowConfiguration.
        :param worker_count: The worker_count of this TensorflowConfiguration.
        """
        self.openapi_types = {
            'parameter_server_count': int,
            'worker_count': int
        }

        self.attribute_map = {
            'parameter_server_count': 'parameterServerCount',
            'worker_count': 'workerCount'
        }

        self._parameter_server_count = parameter_server_count
        self._worker_count = worker_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TensorflowConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TensorflowConfiguration of this TensorflowConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter_server_count(self):
        """Gets the parameter_server_count of this TensorflowConfiguration.

        Number of parameter servers.

        :return: The parameter_server_count of this TensorflowConfiguration.
        :rtype: int
        """
        return self._parameter_server_count

    @parameter_server_count.setter
    def parameter_server_count(self, parameter_server_count):
        """Sets the parameter_server_count of this TensorflowConfiguration.

        Number of parameter servers.

        :param parameter_server_count: The parameter_server_count of this TensorflowConfiguration.
        :type parameter_server_count: int
        """

        self._parameter_server_count = parameter_server_count

    @property
    def worker_count(self):
        """Gets the worker_count of this TensorflowConfiguration.

        The number of workers.

        :return: The worker_count of this TensorflowConfiguration.
        :rtype: int
        """
        return self._worker_count

    @worker_count.setter
    def worker_count(self, worker_count):
        """Sets the worker_count of this TensorflowConfiguration.

        The number of workers.

        :param worker_count: The worker_count of this TensorflowConfiguration.
        :type worker_count: int
        """

        self._worker_count = worker_count
