# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.run_configuration import RunConfiguration
from openapi_server import util


class RunDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: RunConfiguration=None, parent_run_id: str=None, run_type: str=None, snapshot_id: str=None):
        """RunDefinition - a model defined in OpenAPI

        :param configuration: The configuration of this RunDefinition.
        :param parent_run_id: The parent_run_id of this RunDefinition.
        :param run_type: The run_type of this RunDefinition.
        :param snapshot_id: The snapshot_id of this RunDefinition.
        """
        self.openapi_types = {
            'configuration': RunConfiguration,
            'parent_run_id': str,
            'run_type': str,
            'snapshot_id': str
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'parent_run_id': 'parentRunId',
            'run_type': 'runType',
            'snapshot_id': 'snapshotId'
        }

        self._configuration = configuration
        self._parent_run_id = parent_run_id
        self._run_type = run_type
        self._snapshot_id = snapshot_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunDefinition of this RunDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this RunDefinition.


        :return: The configuration of this RunDefinition.
        :rtype: RunConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this RunDefinition.


        :param configuration: The configuration of this RunDefinition.
        :type configuration: RunConfiguration
        """

        self._configuration = configuration

    @property
    def parent_run_id(self):
        """Gets the parent_run_id of this RunDefinition.

        Specifies that the run history entry for this execution should be scoped within  an existing run as a child. Defaults to null, meaning the run has no parent.  This is intended for first-party service integration, not third-party API users.

        :return: The parent_run_id of this RunDefinition.
        :rtype: str
        """
        return self._parent_run_id

    @parent_run_id.setter
    def parent_run_id(self, parent_run_id):
        """Sets the parent_run_id of this RunDefinition.

        Specifies that the run history entry for this execution should be scoped within  an existing run as a child. Defaults to null, meaning the run has no parent.  This is intended for first-party service integration, not third-party API users.

        :param parent_run_id: The parent_run_id of this RunDefinition.
        :type parent_run_id: str
        """

        self._parent_run_id = parent_run_id

    @property
    def run_type(self):
        """Gets the run_type of this RunDefinition.

        Specifies the runsource property for this run. The default value is \"experiment\" if not specified.

        :return: The run_type of this RunDefinition.
        :rtype: str
        """
        return self._run_type

    @run_type.setter
    def run_type(self, run_type):
        """Sets the run_type of this RunDefinition.

        Specifies the runsource property for this run. The default value is \"experiment\" if not specified.

        :param run_type: The run_type of this RunDefinition.
        :type run_type: str
        """

        self._run_type = run_type

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this RunDefinition.

        Snapshots are user project folders that have been uploaded to the cloud for subsequent  execution. This field is required when executing against cloud-based compute targets  unless the run submission was against the API endpoint that takes a zipped project folder  inline with the request.

        :return: The snapshot_id of this RunDefinition.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this RunDefinition.

        Snapshots are user project folders that have been uploaded to the cloud for subsequent  execution. This field is required when executing against cloud-based compute targets  unless the run submission was against the API endpoint that takes a zipped project folder  inline with the request.

        :param snapshot_id: The snapshot_id of this RunDefinition.
        :type snapshot_id: str
        """

        self._snapshot_id = snapshot_id
