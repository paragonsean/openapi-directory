/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataReferenceConfiguration model module.
 * @module model/DataReferenceConfiguration
 * @version 2019-09-30
 */
class DataReferenceConfiguration {
    /**
     * Constructs a new <code>DataReferenceConfiguration</code>.
     * A class for managing DataReferenceConfiguration.
     * @alias module:model/DataReferenceConfiguration
     */
    constructor() { 
        
        DataReferenceConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataReferenceConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataReferenceConfiguration} obj Optional instance to populate.
     * @return {module:model/DataReferenceConfiguration} The populated <code>DataReferenceConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataReferenceConfiguration();

            if (data.hasOwnProperty('dataStoreName')) {
                obj['dataStoreName'] = ApiClient.convertToType(data['dataStoreName'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('overwrite')) {
                obj['overwrite'] = ApiClient.convertToType(data['overwrite'], 'Boolean');
            }
            if (data.hasOwnProperty('pathOnCompute')) {
                obj['pathOnCompute'] = ApiClient.convertToType(data['pathOnCompute'], 'String');
            }
            if (data.hasOwnProperty('pathOnDataStore')) {
                obj['pathOnDataStore'] = ApiClient.convertToType(data['pathOnDataStore'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataReferenceConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataReferenceConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataStoreName'] && !(typeof data['dataStoreName'] === 'string' || data['dataStoreName'] instanceof String)) {
            throw new Error("Expected the field `dataStoreName` to be a primitive type in the JSON string but got " + data['dataStoreName']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['pathOnCompute'] && !(typeof data['pathOnCompute'] === 'string' || data['pathOnCompute'] instanceof String)) {
            throw new Error("Expected the field `pathOnCompute` to be a primitive type in the JSON string but got " + data['pathOnCompute']);
        }
        // ensure the json data is a string
        if (data['pathOnDataStore'] && !(typeof data['pathOnDataStore'] === 'string' || data['pathOnDataStore'] instanceof String)) {
            throw new Error("Expected the field `pathOnDataStore` to be a primitive type in the JSON string but got " + data['pathOnDataStore']);
        }

        return true;
    }


}



/**
 * The name of the data store.
 * @member {String} dataStoreName
 */
DataReferenceConfiguration.prototype['dataStoreName'] = undefined;

/**
 * Operation on the datastore, mount, download, upload.
 * @member {module:model/DataReferenceConfiguration.ModeEnum} mode
 */
DataReferenceConfiguration.prototype['mode'] = undefined;

/**
 * Whether to overwrite the data if existing.
 * @member {Boolean} overwrite
 */
DataReferenceConfiguration.prototype['overwrite'] = undefined;

/**
 * The path on the compute target.
 * @member {String} pathOnCompute
 */
DataReferenceConfiguration.prototype['pathOnCompute'] = undefined;

/**
 * Relative path on the datastore.
 * @member {String} pathOnDataStore
 */
DataReferenceConfiguration.prototype['pathOnDataStore'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
DataReferenceConfiguration['ModeEnum'] = {

    /**
     * value: "Mount"
     * @const
     */
    "Mount": "Mount",

    /**
     * value: "Download"
     * @const
     */
    "Download": "Download",

    /**
     * value: "Upload"
     * @const
     */
    "Upload": "Upload"
};



export default DataReferenceConfiguration;

