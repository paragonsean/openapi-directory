/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SparkMavenPackage from './SparkMavenPackage';

/**
 * The SparkSection model module.
 * @module model/SparkSection
 * @version 2019-09-30
 */
class SparkSection {
    /**
     * Constructs a new <code>SparkSection</code>.
     * @alias module:model/SparkSection
     */
    constructor() { 
        
        SparkSection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SparkSection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SparkSection} obj Optional instance to populate.
     * @return {module:model/SparkSection} The populated <code>SparkSection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SparkSection();

            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], [SparkMavenPackage]);
            }
            if (data.hasOwnProperty('precachePackages')) {
                obj['precachePackages'] = ApiClient.convertToType(data['precachePackages'], 'Boolean');
            }
            if (data.hasOwnProperty('repositories')) {
                obj['repositories'] = ApiClient.convertToType(data['repositories'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SparkSection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SparkSection</code>.
     */
    static validateJSON(data) {
        if (data['packages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['packages'])) {
                throw new Error("Expected the field `packages` to be an array in the JSON data but got " + data['packages']);
            }
            // validate the optional field `packages` (array)
            for (const item of data['packages']) {
                SparkMavenPackage.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['repositories'])) {
            throw new Error("Expected the field `repositories` to be an array in the JSON data but got " + data['repositories']);
        }

        return true;
    }


}



/**
 * The Spark packages to use.
 * @member {Array.<module:model/SparkMavenPackage>} packages
 */
SparkSection.prototype['packages'] = undefined;

/**
 * Whether to precache the packages.
 * @member {Boolean} precachePackages
 */
SparkSection.prototype['precachePackages'] = undefined;

/**
 * The list of spark repositories.
 * @member {Array.<String>} repositories
 */
SparkSection.prototype['repositories'] = undefined;






export default SparkSection;

