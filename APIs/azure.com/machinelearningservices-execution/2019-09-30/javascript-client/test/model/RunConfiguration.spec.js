/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ExecutionService);
  }
}(this, function(expect, ExecutionService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ExecutionService.RunConfiguration();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RunConfiguration', function() {
    it('should create an instance of RunConfiguration', function() {
      // uncomment below and update the code to test RunConfiguration
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be.a(ExecutionService.RunConfiguration);
    });

    it('should have the property _arguments (base name: "arguments")', function() {
      // uncomment below and update the code to test the property _arguments
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property communicator (base name: "communicator")', function() {
      // uncomment below and update the code to test the property communicator
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property dataReferences (base name: "dataReferences")', function() {
      // uncomment below and update the code to test the property dataReferences
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property environment (base name: "environment")', function() {
      // uncomment below and update the code to test the property environment
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property framework (base name: "framework")', function() {
      // uncomment below and update the code to test the property framework
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property hdi (base name: "hdi")', function() {
      // uncomment below and update the code to test the property hdi
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property history (base name: "history")', function() {
      // uncomment below and update the code to test the property history
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property jobName (base name: "jobName")', function() {
      // uncomment below and update the code to test the property jobName
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property maxRunDurationSeconds (base name: "maxRunDurationSeconds")', function() {
      // uncomment below and update the code to test the property maxRunDurationSeconds
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property mpi (base name: "mpi")', function() {
      // uncomment below and update the code to test the property mpi
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property nodeCount (base name: "nodeCount")', function() {
      // uncomment below and update the code to test the property nodeCount
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property script (base name: "script")', function() {
      // uncomment below and update the code to test the property script
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property spark (base name: "spark")', function() {
      // uncomment below and update the code to test the property spark
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property target (base name: "target")', function() {
      // uncomment below and update the code to test the property target
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property tensorflow (base name: "tensorflow")', function() {
      // uncomment below and update the code to test the property tensorflow
      //var instance = new ExecutionService.RunConfiguration();
      //expect(instance).to.be();
    });

  });

}));
