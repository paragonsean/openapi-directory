/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRunConfiguration.h
 *
 * 
 */

#ifndef OAIRunConfiguration_H
#define OAIRunConfiguration_H

#include <QJsonObject>

#include "OAIDataReferenceConfiguration.h"
#include "OAIEnvironmentDefinition.h"
#include "OAIHdiConfiguration.h"
#include "OAIHistoryConfiguration.h"
#include "OAIMpiConfiguration.h"
#include "OAISparkConfiguration.h"
#include "OAITensorflowConfiguration.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataReferenceConfiguration;
class OAIEnvironmentDefinition;
class OAIHdiConfiguration;
class OAIHistoryConfiguration;
class OAIMpiConfiguration;
class OAISparkConfiguration;
class OAITensorflowConfiguration;

class OAIRunConfiguration : public OAIObject {
public:
    OAIRunConfiguration();
    OAIRunConfiguration(QString json);
    ~OAIRunConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getArguments() const;
    void setArguments(const QList<QString> &arguments);
    bool is_arguments_Set() const;
    bool is_arguments_Valid() const;

    QString getCommunicator() const;
    void setCommunicator(const QString &communicator);
    bool is_communicator_Set() const;
    bool is_communicator_Valid() const;

    QMap<QString, OAIDataReferenceConfiguration> getDataReferences() const;
    void setDataReferences(const QMap<QString, OAIDataReferenceConfiguration> &data_references);
    bool is_data_references_Set() const;
    bool is_data_references_Valid() const;

    OAIEnvironmentDefinition getEnvironment() const;
    void setEnvironment(const OAIEnvironmentDefinition &environment);
    bool is_environment_Set() const;
    bool is_environment_Valid() const;

    QString getFramework() const;
    void setFramework(const QString &framework);
    bool is_framework_Set() const;
    bool is_framework_Valid() const;

    OAIHdiConfiguration getHdi() const;
    void setHdi(const OAIHdiConfiguration &hdi);
    bool is_hdi_Set() const;
    bool is_hdi_Valid() const;

    OAIHistoryConfiguration getHistory() const;
    void setHistory(const OAIHistoryConfiguration &history);
    bool is_history_Set() const;
    bool is_history_Valid() const;

    QString getJobName() const;
    void setJobName(const QString &job_name);
    bool is_job_name_Set() const;
    bool is_job_name_Valid() const;

    qint64 getMaxRunDurationSeconds() const;
    void setMaxRunDurationSeconds(const qint64 &max_run_duration_seconds);
    bool is_max_run_duration_seconds_Set() const;
    bool is_max_run_duration_seconds_Valid() const;

    OAIMpiConfiguration getMpi() const;
    void setMpi(const OAIMpiConfiguration &mpi);
    bool is_mpi_Set() const;
    bool is_mpi_Valid() const;

    qint32 getNodeCount() const;
    void setNodeCount(const qint32 &node_count);
    bool is_node_count_Set() const;
    bool is_node_count_Valid() const;

    QString getScript() const;
    void setScript(const QString &script);
    bool is_script_Set() const;
    bool is_script_Valid() const;

    OAISparkConfiguration getSpark() const;
    void setSpark(const OAISparkConfiguration &spark);
    bool is_spark_Set() const;
    bool is_spark_Valid() const;

    QString getTarget() const;
    void setTarget(const QString &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    OAITensorflowConfiguration getTensorflow() const;
    void setTensorflow(const OAITensorflowConfiguration &tensorflow);
    bool is_tensorflow_Set() const;
    bool is_tensorflow_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_arguments;
    bool m_arguments_isSet;
    bool m_arguments_isValid;

    QString m_communicator;
    bool m_communicator_isSet;
    bool m_communicator_isValid;

    QMap<QString, OAIDataReferenceConfiguration> m_data_references;
    bool m_data_references_isSet;
    bool m_data_references_isValid;

    OAIEnvironmentDefinition m_environment;
    bool m_environment_isSet;
    bool m_environment_isValid;

    QString m_framework;
    bool m_framework_isSet;
    bool m_framework_isValid;

    OAIHdiConfiguration m_hdi;
    bool m_hdi_isSet;
    bool m_hdi_isValid;

    OAIHistoryConfiguration m_history;
    bool m_history_isSet;
    bool m_history_isValid;

    QString m_job_name;
    bool m_job_name_isSet;
    bool m_job_name_isValid;

    qint64 m_max_run_duration_seconds;
    bool m_max_run_duration_seconds_isSet;
    bool m_max_run_duration_seconds_isValid;

    OAIMpiConfiguration m_mpi;
    bool m_mpi_isSet;
    bool m_mpi_isValid;

    qint32 m_node_count;
    bool m_node_count_isSet;
    bool m_node_count_isValid;

    QString m_script;
    bool m_script_isSet;
    bool m_script_isValid;

    OAISparkConfiguration m_spark;
    bool m_spark_isSet;
    bool m_spark_isValid;

    QString m_target;
    bool m_target_isSet;
    bool m_target_isValid;

    OAITensorflowConfiguration m_tensorflow;
    bool m_tensorflow_isSet;
    bool m_tensorflow_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRunConfiguration)

#endif // OAIRunConfiguration_H
