/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentDefinition::OAIEnvironmentDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentDefinition::OAIEnvironmentDefinition() {
    this->initializeModel();
}

OAIEnvironmentDefinition::~OAIEnvironmentDefinition() {}

void OAIEnvironmentDefinition::initializeModel() {

    m_docker_isSet = false;
    m_docker_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_inferencing_stack_version_isSet = false;
    m_inferencing_stack_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_python_isSet = false;
    m_python_isValid = false;

    m_spark_isSet = false;
    m_spark_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIEnvironmentDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentDefinition::fromJsonObject(QJsonObject json) {

    m_docker_isValid = ::OpenAPI::fromJsonValue(m_docker, json[QString("docker")]);
    m_docker_isSet = !json[QString("docker")].isNull() && m_docker_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_inferencing_stack_version_isValid = ::OpenAPI::fromJsonValue(m_inferencing_stack_version, json[QString("inferencingStackVersion")]);
    m_inferencing_stack_version_isSet = !json[QString("inferencingStackVersion")].isNull() && m_inferencing_stack_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_python_isValid = ::OpenAPI::fromJsonValue(m_python, json[QString("python")]);
    m_python_isSet = !json[QString("python")].isNull() && m_python_isValid;

    m_spark_isValid = ::OpenAPI::fromJsonValue(m_spark, json[QString("spark")]);
    m_spark_isSet = !json[QString("spark")].isNull() && m_spark_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIEnvironmentDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_docker.isSet()) {
        obj.insert(QString("docker"), ::OpenAPI::toJsonValue(m_docker));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_inferencing_stack_version_isSet) {
        obj.insert(QString("inferencingStackVersion"), ::OpenAPI::toJsonValue(m_inferencing_stack_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_python.isSet()) {
        obj.insert(QString("python"), ::OpenAPI::toJsonValue(m_python));
    }
    if (m_spark.isSet()) {
        obj.insert(QString("spark"), ::OpenAPI::toJsonValue(m_spark));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIDockerSection OAIEnvironmentDefinition::getDocker() const {
    return m_docker;
}
void OAIEnvironmentDefinition::setDocker(const OAIDockerSection &docker) {
    m_docker = docker;
    m_docker_isSet = true;
}

bool OAIEnvironmentDefinition::is_docker_Set() const{
    return m_docker_isSet;
}

bool OAIEnvironmentDefinition::is_docker_Valid() const{
    return m_docker_isValid;
}

QMap<QString, QString> OAIEnvironmentDefinition::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIEnvironmentDefinition::setEnvironmentVariables(const QMap<QString, QString> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIEnvironmentDefinition::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIEnvironmentDefinition::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QString OAIEnvironmentDefinition::getInferencingStackVersion() const {
    return m_inferencing_stack_version;
}
void OAIEnvironmentDefinition::setInferencingStackVersion(const QString &inferencing_stack_version) {
    m_inferencing_stack_version = inferencing_stack_version;
    m_inferencing_stack_version_isSet = true;
}

bool OAIEnvironmentDefinition::is_inferencing_stack_version_Set() const{
    return m_inferencing_stack_version_isSet;
}

bool OAIEnvironmentDefinition::is_inferencing_stack_version_Valid() const{
    return m_inferencing_stack_version_isValid;
}

QString OAIEnvironmentDefinition::getName() const {
    return m_name;
}
void OAIEnvironmentDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnvironmentDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnvironmentDefinition::is_name_Valid() const{
    return m_name_isValid;
}

OAIPythonSection OAIEnvironmentDefinition::getPython() const {
    return m_python;
}
void OAIEnvironmentDefinition::setPython(const OAIPythonSection &python) {
    m_python = python;
    m_python_isSet = true;
}

bool OAIEnvironmentDefinition::is_python_Set() const{
    return m_python_isSet;
}

bool OAIEnvironmentDefinition::is_python_Valid() const{
    return m_python_isValid;
}

OAISparkSection OAIEnvironmentDefinition::getSpark() const {
    return m_spark;
}
void OAIEnvironmentDefinition::setSpark(const OAISparkSection &spark) {
    m_spark = spark;
    m_spark_isSet = true;
}

bool OAIEnvironmentDefinition::is_spark_Set() const{
    return m_spark_isSet;
}

bool OAIEnvironmentDefinition::is_spark_Valid() const{
    return m_spark_isValid;
}

QString OAIEnvironmentDefinition::getVersion() const {
    return m_version;
}
void OAIEnvironmentDefinition::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIEnvironmentDefinition::is_version_Set() const{
    return m_version_isSet;
}

bool OAIEnvironmentDefinition::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIEnvironmentDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_docker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inferencing_stack_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_python.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
