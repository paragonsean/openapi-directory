/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunConfiguration::OAIRunConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunConfiguration::OAIRunConfiguration() {
    this->initializeModel();
}

OAIRunConfiguration::~OAIRunConfiguration() {}

void OAIRunConfiguration::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_communicator_isSet = false;
    m_communicator_isValid = false;

    m_data_references_isSet = false;
    m_data_references_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_framework_isSet = false;
    m_framework_isValid = false;

    m_hdi_isSet = false;
    m_hdi_isValid = false;

    m_history_isSet = false;
    m_history_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_max_run_duration_seconds_isSet = false;
    m_max_run_duration_seconds_isValid = false;

    m_mpi_isSet = false;
    m_mpi_isValid = false;

    m_node_count_isSet = false;
    m_node_count_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_spark_isSet = false;
    m_spark_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_tensorflow_isSet = false;
    m_tensorflow_isValid = false;
}

void OAIRunConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunConfiguration::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_communicator_isValid = ::OpenAPI::fromJsonValue(m_communicator, json[QString("communicator")]);
    m_communicator_isSet = !json[QString("communicator")].isNull() && m_communicator_isValid;

    m_data_references_isValid = ::OpenAPI::fromJsonValue(m_data_references, json[QString("dataReferences")]);
    m_data_references_isSet = !json[QString("dataReferences")].isNull() && m_data_references_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_framework_isValid = ::OpenAPI::fromJsonValue(m_framework, json[QString("framework")]);
    m_framework_isSet = !json[QString("framework")].isNull() && m_framework_isValid;

    m_hdi_isValid = ::OpenAPI::fromJsonValue(m_hdi, json[QString("hdi")]);
    m_hdi_isSet = !json[QString("hdi")].isNull() && m_hdi_isValid;

    m_history_isValid = ::OpenAPI::fromJsonValue(m_history, json[QString("history")]);
    m_history_isSet = !json[QString("history")].isNull() && m_history_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("jobName")]);
    m_job_name_isSet = !json[QString("jobName")].isNull() && m_job_name_isValid;

    m_max_run_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_max_run_duration_seconds, json[QString("maxRunDurationSeconds")]);
    m_max_run_duration_seconds_isSet = !json[QString("maxRunDurationSeconds")].isNull() && m_max_run_duration_seconds_isValid;

    m_mpi_isValid = ::OpenAPI::fromJsonValue(m_mpi, json[QString("mpi")]);
    m_mpi_isSet = !json[QString("mpi")].isNull() && m_mpi_isValid;

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("nodeCount")]);
    m_node_count_isSet = !json[QString("nodeCount")].isNull() && m_node_count_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_spark_isValid = ::OpenAPI::fromJsonValue(m_spark, json[QString("spark")]);
    m_spark_isSet = !json[QString("spark")].isNull() && m_spark_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_tensorflow_isValid = ::OpenAPI::fromJsonValue(m_tensorflow, json[QString("tensorflow")]);
    m_tensorflow_isSet = !json[QString("tensorflow")].isNull() && m_tensorflow_isValid;
}

QString OAIRunConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments.size() > 0) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_communicator_isSet) {
        obj.insert(QString("communicator"), ::OpenAPI::toJsonValue(m_communicator));
    }
    if (m_data_references.size() > 0) {
        obj.insert(QString("dataReferences"), ::OpenAPI::toJsonValue(m_data_references));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_framework_isSet) {
        obj.insert(QString("framework"), ::OpenAPI::toJsonValue(m_framework));
    }
    if (m_hdi.isSet()) {
        obj.insert(QString("hdi"), ::OpenAPI::toJsonValue(m_hdi));
    }
    if (m_history.isSet()) {
        obj.insert(QString("history"), ::OpenAPI::toJsonValue(m_history));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("jobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_max_run_duration_seconds_isSet) {
        obj.insert(QString("maxRunDurationSeconds"), ::OpenAPI::toJsonValue(m_max_run_duration_seconds));
    }
    if (m_mpi.isSet()) {
        obj.insert(QString("mpi"), ::OpenAPI::toJsonValue(m_mpi));
    }
    if (m_node_count_isSet) {
        obj.insert(QString("nodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_spark.isSet()) {
        obj.insert(QString("spark"), ::OpenAPI::toJsonValue(m_spark));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_tensorflow.isSet()) {
        obj.insert(QString("tensorflow"), ::OpenAPI::toJsonValue(m_tensorflow));
    }
    return obj;
}

QList<QString> OAIRunConfiguration::getArguments() const {
    return m_arguments;
}
void OAIRunConfiguration::setArguments(const QList<QString> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIRunConfiguration::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIRunConfiguration::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QString OAIRunConfiguration::getCommunicator() const {
    return m_communicator;
}
void OAIRunConfiguration::setCommunicator(const QString &communicator) {
    m_communicator = communicator;
    m_communicator_isSet = true;
}

bool OAIRunConfiguration::is_communicator_Set() const{
    return m_communicator_isSet;
}

bool OAIRunConfiguration::is_communicator_Valid() const{
    return m_communicator_isValid;
}

QMap<QString, OAIDataReferenceConfiguration> OAIRunConfiguration::getDataReferences() const {
    return m_data_references;
}
void OAIRunConfiguration::setDataReferences(const QMap<QString, OAIDataReferenceConfiguration> &data_references) {
    m_data_references = data_references;
    m_data_references_isSet = true;
}

bool OAIRunConfiguration::is_data_references_Set() const{
    return m_data_references_isSet;
}

bool OAIRunConfiguration::is_data_references_Valid() const{
    return m_data_references_isValid;
}

OAIEnvironmentDefinition OAIRunConfiguration::getEnvironment() const {
    return m_environment;
}
void OAIRunConfiguration::setEnvironment(const OAIEnvironmentDefinition &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIRunConfiguration::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIRunConfiguration::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIRunConfiguration::getFramework() const {
    return m_framework;
}
void OAIRunConfiguration::setFramework(const QString &framework) {
    m_framework = framework;
    m_framework_isSet = true;
}

bool OAIRunConfiguration::is_framework_Set() const{
    return m_framework_isSet;
}

bool OAIRunConfiguration::is_framework_Valid() const{
    return m_framework_isValid;
}

OAIHdiConfiguration OAIRunConfiguration::getHdi() const {
    return m_hdi;
}
void OAIRunConfiguration::setHdi(const OAIHdiConfiguration &hdi) {
    m_hdi = hdi;
    m_hdi_isSet = true;
}

bool OAIRunConfiguration::is_hdi_Set() const{
    return m_hdi_isSet;
}

bool OAIRunConfiguration::is_hdi_Valid() const{
    return m_hdi_isValid;
}

OAIHistoryConfiguration OAIRunConfiguration::getHistory() const {
    return m_history;
}
void OAIRunConfiguration::setHistory(const OAIHistoryConfiguration &history) {
    m_history = history;
    m_history_isSet = true;
}

bool OAIRunConfiguration::is_history_Set() const{
    return m_history_isSet;
}

bool OAIRunConfiguration::is_history_Valid() const{
    return m_history_isValid;
}

QString OAIRunConfiguration::getJobName() const {
    return m_job_name;
}
void OAIRunConfiguration::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIRunConfiguration::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIRunConfiguration::is_job_name_Valid() const{
    return m_job_name_isValid;
}

qint64 OAIRunConfiguration::getMaxRunDurationSeconds() const {
    return m_max_run_duration_seconds;
}
void OAIRunConfiguration::setMaxRunDurationSeconds(const qint64 &max_run_duration_seconds) {
    m_max_run_duration_seconds = max_run_duration_seconds;
    m_max_run_duration_seconds_isSet = true;
}

bool OAIRunConfiguration::is_max_run_duration_seconds_Set() const{
    return m_max_run_duration_seconds_isSet;
}

bool OAIRunConfiguration::is_max_run_duration_seconds_Valid() const{
    return m_max_run_duration_seconds_isValid;
}

OAIMpiConfiguration OAIRunConfiguration::getMpi() const {
    return m_mpi;
}
void OAIRunConfiguration::setMpi(const OAIMpiConfiguration &mpi) {
    m_mpi = mpi;
    m_mpi_isSet = true;
}

bool OAIRunConfiguration::is_mpi_Set() const{
    return m_mpi_isSet;
}

bool OAIRunConfiguration::is_mpi_Valid() const{
    return m_mpi_isValid;
}

qint32 OAIRunConfiguration::getNodeCount() const {
    return m_node_count;
}
void OAIRunConfiguration::setNodeCount(const qint32 &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIRunConfiguration::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIRunConfiguration::is_node_count_Valid() const{
    return m_node_count_isValid;
}

QString OAIRunConfiguration::getScript() const {
    return m_script;
}
void OAIRunConfiguration::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIRunConfiguration::is_script_Set() const{
    return m_script_isSet;
}

bool OAIRunConfiguration::is_script_Valid() const{
    return m_script_isValid;
}

OAISparkConfiguration OAIRunConfiguration::getSpark() const {
    return m_spark;
}
void OAIRunConfiguration::setSpark(const OAISparkConfiguration &spark) {
    m_spark = spark;
    m_spark_isSet = true;
}

bool OAIRunConfiguration::is_spark_Set() const{
    return m_spark_isSet;
}

bool OAIRunConfiguration::is_spark_Valid() const{
    return m_spark_isValid;
}

QString OAIRunConfiguration::getTarget() const {
    return m_target;
}
void OAIRunConfiguration::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIRunConfiguration::is_target_Set() const{
    return m_target_isSet;
}

bool OAIRunConfiguration::is_target_Valid() const{
    return m_target_isValid;
}

OAITensorflowConfiguration OAIRunConfiguration::getTensorflow() const {
    return m_tensorflow;
}
void OAIRunConfiguration::setTensorflow(const OAITensorflowConfiguration &tensorflow) {
    m_tensorflow = tensorflow;
    m_tensorflow_isSet = true;
}

bool OAIRunConfiguration::is_tensorflow_Set() const{
    return m_tensorflow_isSet;
}

bool OAIRunConfiguration::is_tensorflow_Valid() const{
    return m_tensorflow_isValid;
}

bool OAIRunConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_communicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdi.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_history.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_run_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpi.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tensorflow.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
