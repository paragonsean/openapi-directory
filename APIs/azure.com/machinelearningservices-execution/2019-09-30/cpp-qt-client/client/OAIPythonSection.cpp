/**
 * Execution Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPythonSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPythonSection::OAIPythonSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPythonSection::OAIPythonSection() {
    this->initializeModel();
}

OAIPythonSection::~OAIPythonSection() {}

void OAIPythonSection::initializeModel() {

    m_base_conda_environment_isSet = false;
    m_base_conda_environment_isValid = false;

    m_conda_dependencies_isSet = false;
    m_conda_dependencies_isValid = false;

    m_interpreter_path_isSet = false;
    m_interpreter_path_isValid = false;

    m_user_managed_dependencies_isSet = false;
    m_user_managed_dependencies_isValid = false;
}

void OAIPythonSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPythonSection::fromJsonObject(QJsonObject json) {

    m_base_conda_environment_isValid = ::OpenAPI::fromJsonValue(m_base_conda_environment, json[QString("baseCondaEnvironment")]);
    m_base_conda_environment_isSet = !json[QString("baseCondaEnvironment")].isNull() && m_base_conda_environment_isValid;

    m_conda_dependencies_isValid = ::OpenAPI::fromJsonValue(m_conda_dependencies, json[QString("condaDependencies")]);
    m_conda_dependencies_isSet = !json[QString("condaDependencies")].isNull() && m_conda_dependencies_isValid;

    m_interpreter_path_isValid = ::OpenAPI::fromJsonValue(m_interpreter_path, json[QString("interpreterPath")]);
    m_interpreter_path_isSet = !json[QString("interpreterPath")].isNull() && m_interpreter_path_isValid;

    m_user_managed_dependencies_isValid = ::OpenAPI::fromJsonValue(m_user_managed_dependencies, json[QString("userManagedDependencies")]);
    m_user_managed_dependencies_isSet = !json[QString("userManagedDependencies")].isNull() && m_user_managed_dependencies_isValid;
}

QString OAIPythonSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPythonSection::asJsonObject() const {
    QJsonObject obj;
    if (m_base_conda_environment_isSet) {
        obj.insert(QString("baseCondaEnvironment"), ::OpenAPI::toJsonValue(m_base_conda_environment));
    }
    if (m_conda_dependencies_isSet) {
        obj.insert(QString("condaDependencies"), ::OpenAPI::toJsonValue(m_conda_dependencies));
    }
    if (m_interpreter_path_isSet) {
        obj.insert(QString("interpreterPath"), ::OpenAPI::toJsonValue(m_interpreter_path));
    }
    if (m_user_managed_dependencies_isSet) {
        obj.insert(QString("userManagedDependencies"), ::OpenAPI::toJsonValue(m_user_managed_dependencies));
    }
    return obj;
}

QString OAIPythonSection::getBaseCondaEnvironment() const {
    return m_base_conda_environment;
}
void OAIPythonSection::setBaseCondaEnvironment(const QString &base_conda_environment) {
    m_base_conda_environment = base_conda_environment;
    m_base_conda_environment_isSet = true;
}

bool OAIPythonSection::is_base_conda_environment_Set() const{
    return m_base_conda_environment_isSet;
}

bool OAIPythonSection::is_base_conda_environment_Valid() const{
    return m_base_conda_environment_isValid;
}

OAIObject OAIPythonSection::getCondaDependencies() const {
    return m_conda_dependencies;
}
void OAIPythonSection::setCondaDependencies(const OAIObject &conda_dependencies) {
    m_conda_dependencies = conda_dependencies;
    m_conda_dependencies_isSet = true;
}

bool OAIPythonSection::is_conda_dependencies_Set() const{
    return m_conda_dependencies_isSet;
}

bool OAIPythonSection::is_conda_dependencies_Valid() const{
    return m_conda_dependencies_isValid;
}

QString OAIPythonSection::getInterpreterPath() const {
    return m_interpreter_path;
}
void OAIPythonSection::setInterpreterPath(const QString &interpreter_path) {
    m_interpreter_path = interpreter_path;
    m_interpreter_path_isSet = true;
}

bool OAIPythonSection::is_interpreter_path_Set() const{
    return m_interpreter_path_isSet;
}

bool OAIPythonSection::is_interpreter_path_Valid() const{
    return m_interpreter_path_isValid;
}

bool OAIPythonSection::isUserManagedDependencies() const {
    return m_user_managed_dependencies;
}
void OAIPythonSection::setUserManagedDependencies(const bool &user_managed_dependencies) {
    m_user_managed_dependencies = user_managed_dependencies;
    m_user_managed_dependencies_isSet = true;
}

bool OAIPythonSection::is_user_managed_dependencies_Set() const{
    return m_user_managed_dependencies_isSet;
}

bool OAIPythonSection::is_user_managed_dependencies_Valid() const{
    return m_user_managed_dependencies_isValid;
}

bool OAIPythonSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_conda_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conda_dependencies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interpreter_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_managed_dependencies_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPythonSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
