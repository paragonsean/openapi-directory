/**
 * FabricAdminClient
 * Volume operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeModel::OAIVolumeModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeModel::OAIVolumeModel() {
    this->initializeModel();
}

OAIVolumeModel::~OAIVolumeModel() {}

void OAIVolumeModel::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_operational_status_isSet = false;
    m_operational_status_isValid = false;

    m_remaining_capacity_gb_isSet = false;
    m_remaining_capacity_gb_isValid = false;

    m_repair_status_isSet = false;
    m_repair_status_isValid = false;

    m_total_capacity_gb_isSet = false;
    m_total_capacity_gb_isValid = false;

    m_volume_label_isSet = false;
    m_volume_label_isValid = false;
}

void OAIVolumeModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeModel::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_operational_status_isValid = ::OpenAPI::fromJsonValue(m_operational_status, json[QString("operationalStatus")]);
    m_operational_status_isSet = !json[QString("operationalStatus")].isNull() && m_operational_status_isValid;

    m_remaining_capacity_gb_isValid = ::OpenAPI::fromJsonValue(m_remaining_capacity_gb, json[QString("remainingCapacityGB")]);
    m_remaining_capacity_gb_isSet = !json[QString("remainingCapacityGB")].isNull() && m_remaining_capacity_gb_isValid;

    m_repair_status_isValid = ::OpenAPI::fromJsonValue(m_repair_status, json[QString("repairStatus")]);
    m_repair_status_isSet = !json[QString("repairStatus")].isNull() && m_repair_status_isValid;

    m_total_capacity_gb_isValid = ::OpenAPI::fromJsonValue(m_total_capacity_gb, json[QString("totalCapacityGB")]);
    m_total_capacity_gb_isSet = !json[QString("totalCapacityGB")].isNull() && m_total_capacity_gb_isValid;

    m_volume_label_isValid = ::OpenAPI::fromJsonValue(m_volume_label, json[QString("volumeLabel")]);
    m_volume_label_isSet = !json[QString("volumeLabel")].isNull() && m_volume_label_isValid;
}

QString OAIVolumeModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeModel::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_health_status_isSet) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_operational_status_isSet) {
        obj.insert(QString("operationalStatus"), ::OpenAPI::toJsonValue(m_operational_status));
    }
    if (m_remaining_capacity_gb_isSet) {
        obj.insert(QString("remainingCapacityGB"), ::OpenAPI::toJsonValue(m_remaining_capacity_gb));
    }
    if (m_repair_status_isSet) {
        obj.insert(QString("repairStatus"), ::OpenAPI::toJsonValue(m_repair_status));
    }
    if (m_total_capacity_gb_isSet) {
        obj.insert(QString("totalCapacityGB"), ::OpenAPI::toJsonValue(m_total_capacity_gb));
    }
    if (m_volume_label_isSet) {
        obj.insert(QString("volumeLabel"), ::OpenAPI::toJsonValue(m_volume_label));
    }
    return obj;
}

QString OAIVolumeModel::getAction() const {
    return m_action;
}
void OAIVolumeModel::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIVolumeModel::is_action_Set() const{
    return m_action_isSet;
}

bool OAIVolumeModel::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIVolumeModel::getDescription() const {
    return m_description;
}
void OAIVolumeModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVolumeModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVolumeModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVolumeModel::getHealthStatus() const {
    return m_health_status;
}
void OAIVolumeModel::setHealthStatus(const QString &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIVolumeModel::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIVolumeModel::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QString OAIVolumeModel::getOperationalStatus() const {
    return m_operational_status;
}
void OAIVolumeModel::setOperationalStatus(const QString &operational_status) {
    m_operational_status = operational_status;
    m_operational_status_isSet = true;
}

bool OAIVolumeModel::is_operational_status_Set() const{
    return m_operational_status_isSet;
}

bool OAIVolumeModel::is_operational_status_Valid() const{
    return m_operational_status_isValid;
}

qint32 OAIVolumeModel::getRemainingCapacityGb() const {
    return m_remaining_capacity_gb;
}
void OAIVolumeModel::setRemainingCapacityGb(const qint32 &remaining_capacity_gb) {
    m_remaining_capacity_gb = remaining_capacity_gb;
    m_remaining_capacity_gb_isSet = true;
}

bool OAIVolumeModel::is_remaining_capacity_gb_Set() const{
    return m_remaining_capacity_gb_isSet;
}

bool OAIVolumeModel::is_remaining_capacity_gb_Valid() const{
    return m_remaining_capacity_gb_isValid;
}

QString OAIVolumeModel::getRepairStatus() const {
    return m_repair_status;
}
void OAIVolumeModel::setRepairStatus(const QString &repair_status) {
    m_repair_status = repair_status;
    m_repair_status_isSet = true;
}

bool OAIVolumeModel::is_repair_status_Set() const{
    return m_repair_status_isSet;
}

bool OAIVolumeModel::is_repair_status_Valid() const{
    return m_repair_status_isValid;
}

qint32 OAIVolumeModel::getTotalCapacityGb() const {
    return m_total_capacity_gb;
}
void OAIVolumeModel::setTotalCapacityGb(const qint32 &total_capacity_gb) {
    m_total_capacity_gb = total_capacity_gb;
    m_total_capacity_gb_isSet = true;
}

bool OAIVolumeModel::is_total_capacity_gb_Set() const{
    return m_total_capacity_gb_isSet;
}

bool OAIVolumeModel::is_total_capacity_gb_Valid() const{
    return m_total_capacity_gb_isValid;
}

QString OAIVolumeModel::getVolumeLabel() const {
    return m_volume_label;
}
void OAIVolumeModel::setVolumeLabel(const QString &volume_label) {
    m_volume_label = volume_label;
    m_volume_label_isSet = true;
}

bool OAIVolumeModel::is_volume_label_Set() const{
    return m_volume_label_isSet;
}

bool OAIVolumeModel::is_volume_label_Valid() const{
    return m_volume_label_isValid;
}

bool OAIVolumeModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operational_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_capacity_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repair_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_capacity_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
