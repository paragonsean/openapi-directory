# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, description: str=None, health_status: str=None, operational_status: str=None, remaining_capacity_gb: int=None, repair_status: str=None, total_capacity_gb: int=None, volume_label: str=None):
        """VolumeModel - a model defined in OpenAPI

        :param action: The action of this VolumeModel.
        :param description: The description of this VolumeModel.
        :param health_status: The health_status of this VolumeModel.
        :param operational_status: The operational_status of this VolumeModel.
        :param remaining_capacity_gb: The remaining_capacity_gb of this VolumeModel.
        :param repair_status: The repair_status of this VolumeModel.
        :param total_capacity_gb: The total_capacity_gb of this VolumeModel.
        :param volume_label: The volume_label of this VolumeModel.
        """
        self.openapi_types = {
            'action': str,
            'description': str,
            'health_status': str,
            'operational_status': str,
            'remaining_capacity_gb': int,
            'repair_status': str,
            'total_capacity_gb': int,
            'volume_label': str
        }

        self.attribute_map = {
            'action': 'action',
            'description': 'description',
            'health_status': 'healthStatus',
            'operational_status': 'operationalStatus',
            'remaining_capacity_gb': 'remainingCapacityGB',
            'repair_status': 'repairStatus',
            'total_capacity_gb': 'totalCapacityGB',
            'volume_label': 'volumeLabel'
        }

        self._action = action
        self._description = description
        self._health_status = health_status
        self._operational_status = operational_status
        self._remaining_capacity_gb = remaining_capacity_gb
        self._repair_status = repair_status
        self._total_capacity_gb = total_capacity_gb
        self._volume_label = volume_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeModel of this VolumeModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this VolumeModel.

        Detailed recommended action for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.

        :return: The action of this VolumeModel.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this VolumeModel.

        Detailed recommended action for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.

        :param action: The action of this VolumeModel.
        :type action: str
        """

        self._action = action

    @property
    def description(self):
        """Gets the description of this VolumeModel.

        Detailed description for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.

        :return: The description of this VolumeModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeModel.

        Detailed description for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.

        :param description: The description of this VolumeModel.
        :type description: str
        """

        self._description = description

    @property
    def health_status(self):
        """Gets the health_status of this VolumeModel.

        Health status of the volume.

        :return: The health_status of this VolumeModel.
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this VolumeModel.

        Health status of the volume.

        :param health_status: The health_status of this VolumeModel.
        :type health_status: str
        """

        self._health_status = health_status

    @property
    def operational_status(self):
        """Gets the operational_status of this VolumeModel.

        Operational status of the volume.

        :return: The operational_status of this VolumeModel.
        :rtype: str
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """Sets the operational_status of this VolumeModel.

        Operational status of the volume.

        :param operational_status: The operational_status of this VolumeModel.
        :type operational_status: str
        """

        self._operational_status = operational_status

    @property
    def remaining_capacity_gb(self):
        """Gets the remaining_capacity_gb of this VolumeModel.

        Remaining capacity in GB of the volume.

        :return: The remaining_capacity_gb of this VolumeModel.
        :rtype: int
        """
        return self._remaining_capacity_gb

    @remaining_capacity_gb.setter
    def remaining_capacity_gb(self, remaining_capacity_gb):
        """Sets the remaining_capacity_gb of this VolumeModel.

        Remaining capacity in GB of the volume.

        :param remaining_capacity_gb: The remaining_capacity_gb of this VolumeModel.
        :type remaining_capacity_gb: int
        """

        self._remaining_capacity_gb = remaining_capacity_gb

    @property
    def repair_status(self):
        """Gets the repair_status of this VolumeModel.

        Repair status of the volume. Empty if no repair job running, something like 'Running, 90%' when repairing.

        :return: The repair_status of this VolumeModel.
        :rtype: str
        """
        return self._repair_status

    @repair_status.setter
    def repair_status(self, repair_status):
        """Sets the repair_status of this VolumeModel.

        Repair status of the volume. Empty if no repair job running, something like 'Running, 90%' when repairing.

        :param repair_status: The repair_status of this VolumeModel.
        :type repair_status: str
        """

        self._repair_status = repair_status

    @property
    def total_capacity_gb(self):
        """Gets the total_capacity_gb of this VolumeModel.

        Total capacity in GB of the volume.

        :return: The total_capacity_gb of this VolumeModel.
        :rtype: int
        """
        return self._total_capacity_gb

    @total_capacity_gb.setter
    def total_capacity_gb(self, total_capacity_gb):
        """Sets the total_capacity_gb of this VolumeModel.

        Total capacity in GB of the volume.

        :param total_capacity_gb: The total_capacity_gb of this VolumeModel.
        :type total_capacity_gb: int
        """

        self._total_capacity_gb = total_capacity_gb

    @property
    def volume_label(self):
        """Gets the volume_label of this VolumeModel.

        Volume label.

        :return: The volume_label of this VolumeModel.
        :rtype: str
        """
        return self._volume_label

    @volume_label.setter
    def volume_label(self, volume_label):
        """Sets the volume_label of this VolumeModel.

        Volume label.

        :param volume_label: The volume_label of this VolumeModel.
        :type volume_label: str
        """

        self._volume_label = volume_label
