/**
 * FabricAdminClient
 * Volume operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VolumeModel model module.
 * @module model/VolumeModel
 * @version 2019-05-01
 */
class VolumeModel {
    /**
     * Constructs a new <code>VolumeModel</code>.
     * Properties of a volume.
     * @alias module:model/VolumeModel
     */
    constructor() { 
        
        VolumeModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeModel} obj Optional instance to populate.
     * @return {module:model/VolumeModel} The populated <code>VolumeModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeModel();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('healthStatus')) {
                obj['healthStatus'] = ApiClient.convertToType(data['healthStatus'], 'String');
            }
            if (data.hasOwnProperty('operationalStatus')) {
                obj['operationalStatus'] = ApiClient.convertToType(data['operationalStatus'], 'String');
            }
            if (data.hasOwnProperty('remainingCapacityGB')) {
                obj['remainingCapacityGB'] = ApiClient.convertToType(data['remainingCapacityGB'], 'Number');
            }
            if (data.hasOwnProperty('repairStatus')) {
                obj['repairStatus'] = ApiClient.convertToType(data['repairStatus'], 'String');
            }
            if (data.hasOwnProperty('totalCapacityGB')) {
                obj['totalCapacityGB'] = ApiClient.convertToType(data['totalCapacityGB'], 'Number');
            }
            if (data.hasOwnProperty('volumeLabel')) {
                obj['volumeLabel'] = ApiClient.convertToType(data['volumeLabel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['healthStatus'] && !(typeof data['healthStatus'] === 'string' || data['healthStatus'] instanceof String)) {
            throw new Error("Expected the field `healthStatus` to be a primitive type in the JSON string but got " + data['healthStatus']);
        }
        // ensure the json data is a string
        if (data['operationalStatus'] && !(typeof data['operationalStatus'] === 'string' || data['operationalStatus'] instanceof String)) {
            throw new Error("Expected the field `operationalStatus` to be a primitive type in the JSON string but got " + data['operationalStatus']);
        }
        // ensure the json data is a string
        if (data['repairStatus'] && !(typeof data['repairStatus'] === 'string' || data['repairStatus'] instanceof String)) {
            throw new Error("Expected the field `repairStatus` to be a primitive type in the JSON string but got " + data['repairStatus']);
        }
        // ensure the json data is a string
        if (data['volumeLabel'] && !(typeof data['volumeLabel'] === 'string' || data['volumeLabel'] instanceof String)) {
            throw new Error("Expected the field `volumeLabel` to be a primitive type in the JSON string but got " + data['volumeLabel']);
        }

        return true;
    }


}



/**
 * Detailed recommended action for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.
 * @member {String} action
 */
VolumeModel.prototype['action'] = undefined;

/**
 * Detailed description for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.
 * @member {String} description
 */
VolumeModel.prototype['description'] = undefined;

/**
 * Health status of the volume.
 * @member {String} healthStatus
 */
VolumeModel.prototype['healthStatus'] = undefined;

/**
 * Operational status of the volume.
 * @member {String} operationalStatus
 */
VolumeModel.prototype['operationalStatus'] = undefined;

/**
 * Remaining capacity in GB of the volume.
 * @member {Number} remainingCapacityGB
 */
VolumeModel.prototype['remainingCapacityGB'] = undefined;

/**
 * Repair status of the volume. Empty if no repair job running, something like 'Running, 90%' when repairing.
 * @member {String} repairStatus
 */
VolumeModel.prototype['repairStatus'] = undefined;

/**
 * Total capacity in GB of the volume.
 * @member {Number} totalCapacityGB
 */
VolumeModel.prototype['totalCapacityGB'] = undefined;

/**
 * Volume label.
 * @member {String} volumeLabel
 */
VolumeModel.prototype['volumeLabel'] = undefined;






export default VolumeModel;

