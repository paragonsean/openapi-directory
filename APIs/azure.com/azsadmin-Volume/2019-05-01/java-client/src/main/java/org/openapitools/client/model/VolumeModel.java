/*
 * FabricAdminClient
 * Volume operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a volume.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:34.164175-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeModel {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEALTH_STATUS = "healthStatus";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATUS)
  private String healthStatus;

  public static final String SERIALIZED_NAME_OPERATIONAL_STATUS = "operationalStatus";
  @SerializedName(SERIALIZED_NAME_OPERATIONAL_STATUS)
  private String operationalStatus;

  public static final String SERIALIZED_NAME_REMAINING_CAPACITY_G_B = "remainingCapacityGB";
  @SerializedName(SERIALIZED_NAME_REMAINING_CAPACITY_G_B)
  private Integer remainingCapacityGB;

  public static final String SERIALIZED_NAME_REPAIR_STATUS = "repairStatus";
  @SerializedName(SERIALIZED_NAME_REPAIR_STATUS)
  private String repairStatus;

  public static final String SERIALIZED_NAME_TOTAL_CAPACITY_G_B = "totalCapacityGB";
  @SerializedName(SERIALIZED_NAME_TOTAL_CAPACITY_G_B)
  private Integer totalCapacityGB;

  public static final String SERIALIZED_NAME_VOLUME_LABEL = "volumeLabel";
  @SerializedName(SERIALIZED_NAME_VOLUME_LABEL)
  private String volumeLabel;

  public VolumeModel() {
  }

  public VolumeModel(
     String action, 
     String description, 
     String healthStatus, 
     String operationalStatus, 
     Integer remainingCapacityGB, 
     String repairStatus, 
     Integer totalCapacityGB, 
     String volumeLabel
  ) {
    this();
    this.action = action;
    this.description = description;
    this.healthStatus = healthStatus;
    this.operationalStatus = operationalStatus;
    this.remainingCapacityGB = remainingCapacityGB;
    this.repairStatus = repairStatus;
    this.totalCapacityGB = totalCapacityGB;
    this.volumeLabel = volumeLabel;
  }

  /**
   * Detailed recommended action for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }



  /**
   * Detailed description for HealthStatus/OperationalStatus. Empty if HealthStatus/OperationalStatus is Healthy/Ok.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Health status of the volume.
   * @return healthStatus
   */
  @javax.annotation.Nullable
  public String getHealthStatus() {
    return healthStatus;
  }



  /**
   * Operational status of the volume.
   * @return operationalStatus
   */
  @javax.annotation.Nullable
  public String getOperationalStatus() {
    return operationalStatus;
  }



  /**
   * Remaining capacity in GB of the volume.
   * @return remainingCapacityGB
   */
  @javax.annotation.Nullable
  public Integer getRemainingCapacityGB() {
    return remainingCapacityGB;
  }



  /**
   * Repair status of the volume. Empty if no repair job running, something like &#39;Running, 90%&#39; when repairing.
   * @return repairStatus
   */
  @javax.annotation.Nullable
  public String getRepairStatus() {
    return repairStatus;
  }



  /**
   * Total capacity in GB of the volume.
   * @return totalCapacityGB
   */
  @javax.annotation.Nullable
  public Integer getTotalCapacityGB() {
    return totalCapacityGB;
  }



  /**
   * Volume label.
   * @return volumeLabel
   */
  @javax.annotation.Nullable
  public String getVolumeLabel() {
    return volumeLabel;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeModel volumeModel = (VolumeModel) o;
    return Objects.equals(this.action, volumeModel.action) &&
        Objects.equals(this.description, volumeModel.description) &&
        Objects.equals(this.healthStatus, volumeModel.healthStatus) &&
        Objects.equals(this.operationalStatus, volumeModel.operationalStatus) &&
        Objects.equals(this.remainingCapacityGB, volumeModel.remainingCapacityGB) &&
        Objects.equals(this.repairStatus, volumeModel.repairStatus) &&
        Objects.equals(this.totalCapacityGB, volumeModel.totalCapacityGB) &&
        Objects.equals(this.volumeLabel, volumeModel.volumeLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, description, healthStatus, operationalStatus, remainingCapacityGB, repairStatus, totalCapacityGB, volumeLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeModel {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    healthStatus: ").append(toIndentedString(healthStatus)).append("\n");
    sb.append("    operationalStatus: ").append(toIndentedString(operationalStatus)).append("\n");
    sb.append("    remainingCapacityGB: ").append(toIndentedString(remainingCapacityGB)).append("\n");
    sb.append("    repairStatus: ").append(toIndentedString(repairStatus)).append("\n");
    sb.append("    totalCapacityGB: ").append(toIndentedString(totalCapacityGB)).append("\n");
    sb.append("    volumeLabel: ").append(toIndentedString(volumeLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("description");
    openapiFields.add("healthStatus");
    openapiFields.add("operationalStatus");
    openapiFields.add("remainingCapacityGB");
    openapiFields.add("repairStatus");
    openapiFields.add("totalCapacityGB");
    openapiFields.add("volumeLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeModel is not found in the empty JSON string", VolumeModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("healthStatus") != null && !jsonObj.get("healthStatus").isJsonNull()) && !jsonObj.get("healthStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthStatus").toString()));
      }
      if ((jsonObj.get("operationalStatus") != null && !jsonObj.get("operationalStatus").isJsonNull()) && !jsonObj.get("operationalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationalStatus").toString()));
      }
      if ((jsonObj.get("repairStatus") != null && !jsonObj.get("repairStatus").isJsonNull()) && !jsonObj.get("repairStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repairStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repairStatus").toString()));
      }
      if ((jsonObj.get("volumeLabel") != null && !jsonObj.get("volumeLabel").isJsonNull()) && !jsonObj.get("volumeLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeModel.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeModel>() {
           @Override
           public void write(JsonWriter out, VolumeModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeModel
   * @throws IOException if the JSON string is invalid with respect to VolumeModel
   */
  public static VolumeModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeModel.class);
  }

  /**
   * Convert an instance of VolumeModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

