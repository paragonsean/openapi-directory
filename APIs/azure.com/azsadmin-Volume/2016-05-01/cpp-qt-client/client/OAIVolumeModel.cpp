/**
 * FabricAdminClient
 * Volume operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeModel::OAIVolumeModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeModel::OAIVolumeModel() {
    this->initializeModel();
}

OAIVolumeModel::~OAIVolumeModel() {}

void OAIVolumeModel::initializeModel() {

    m_file_system_isSet = false;
    m_file_system_isValid = false;

    m_remaining_size_gb_isSet = false;
    m_remaining_size_gb_isValid = false;

    m_size_gb_isSet = false;
    m_size_gb_isValid = false;

    m_volume_label_isSet = false;
    m_volume_label_isValid = false;
}

void OAIVolumeModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeModel::fromJsonObject(QJsonObject json) {

    m_file_system_isValid = ::OpenAPI::fromJsonValue(m_file_system, json[QString("fileSystem")]);
    m_file_system_isSet = !json[QString("fileSystem")].isNull() && m_file_system_isValid;

    m_remaining_size_gb_isValid = ::OpenAPI::fromJsonValue(m_remaining_size_gb, json[QString("remainingSizeGB")]);
    m_remaining_size_gb_isSet = !json[QString("remainingSizeGB")].isNull() && m_remaining_size_gb_isValid;

    m_size_gb_isValid = ::OpenAPI::fromJsonValue(m_size_gb, json[QString("sizeGB")]);
    m_size_gb_isSet = !json[QString("sizeGB")].isNull() && m_size_gb_isValid;

    m_volume_label_isValid = ::OpenAPI::fromJsonValue(m_volume_label, json[QString("volumeLabel")]);
    m_volume_label_isSet = !json[QString("volumeLabel")].isNull() && m_volume_label_isValid;
}

QString OAIVolumeModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeModel::asJsonObject() const {
    QJsonObject obj;
    if (m_file_system_isSet) {
        obj.insert(QString("fileSystem"), ::OpenAPI::toJsonValue(m_file_system));
    }
    if (m_remaining_size_gb_isSet) {
        obj.insert(QString("remainingSizeGB"), ::OpenAPI::toJsonValue(m_remaining_size_gb));
    }
    if (m_size_gb_isSet) {
        obj.insert(QString("sizeGB"), ::OpenAPI::toJsonValue(m_size_gb));
    }
    if (m_volume_label_isSet) {
        obj.insert(QString("volumeLabel"), ::OpenAPI::toJsonValue(m_volume_label));
    }
    return obj;
}

QString OAIVolumeModel::getFileSystem() const {
    return m_file_system;
}
void OAIVolumeModel::setFileSystem(const QString &file_system) {
    m_file_system = file_system;
    m_file_system_isSet = true;
}

bool OAIVolumeModel::is_file_system_Set() const{
    return m_file_system_isSet;
}

bool OAIVolumeModel::is_file_system_Valid() const{
    return m_file_system_isValid;
}

qint32 OAIVolumeModel::getRemainingSizeGb() const {
    return m_remaining_size_gb;
}
void OAIVolumeModel::setRemainingSizeGb(const qint32 &remaining_size_gb) {
    m_remaining_size_gb = remaining_size_gb;
    m_remaining_size_gb_isSet = true;
}

bool OAIVolumeModel::is_remaining_size_gb_Set() const{
    return m_remaining_size_gb_isSet;
}

bool OAIVolumeModel::is_remaining_size_gb_Valid() const{
    return m_remaining_size_gb_isValid;
}

qint32 OAIVolumeModel::getSizeGb() const {
    return m_size_gb;
}
void OAIVolumeModel::setSizeGb(const qint32 &size_gb) {
    m_size_gb = size_gb;
    m_size_gb_isSet = true;
}

bool OAIVolumeModel::is_size_gb_Set() const{
    return m_size_gb_isSet;
}

bool OAIVolumeModel::is_size_gb_Valid() const{
    return m_size_gb_isValid;
}

QString OAIVolumeModel::getVolumeLabel() const {
    return m_volume_label;
}
void OAIVolumeModel::setVolumeLabel(const QString &volume_label) {
    m_volume_label = volume_label;
    m_volume_label_isSet = true;
}

bool OAIVolumeModel::is_volume_label_Set() const{
    return m_volume_label_isSet;
}

bool OAIVolumeModel::is_volume_label_Valid() const{
    return m_volume_label_isValid;
}

bool OAIVolumeModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
