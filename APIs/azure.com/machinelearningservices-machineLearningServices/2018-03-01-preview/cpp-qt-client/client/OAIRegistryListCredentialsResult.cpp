/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistryListCredentialsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistryListCredentialsResult::OAIRegistryListCredentialsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistryListCredentialsResult::OAIRegistryListCredentialsResult() {
    this->initializeModel();
}

OAIRegistryListCredentialsResult::~OAIRegistryListCredentialsResult() {}

void OAIRegistryListCredentialsResult::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_passwords_isSet = false;
    m_passwords_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIRegistryListCredentialsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistryListCredentialsResult::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_passwords_isValid = ::OpenAPI::fromJsonValue(m_passwords, json[QString("passwords")]);
    m_passwords_isSet = !json[QString("passwords")].isNull() && m_passwords_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIRegistryListCredentialsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistryListCredentialsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_passwords.size() > 0) {
        obj.insert(QString("passwords"), ::OpenAPI::toJsonValue(m_passwords));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIRegistryListCredentialsResult::getLocation() const {
    return m_location;
}
void OAIRegistryListCredentialsResult::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIRegistryListCredentialsResult::is_location_Set() const{
    return m_location_isSet;
}

bool OAIRegistryListCredentialsResult::is_location_Valid() const{
    return m_location_isValid;
}

QList<OAIPassword> OAIRegistryListCredentialsResult::getPasswords() const {
    return m_passwords;
}
void OAIRegistryListCredentialsResult::setPasswords(const QList<OAIPassword> &passwords) {
    m_passwords = passwords;
    m_passwords_isSet = true;
}

bool OAIRegistryListCredentialsResult::is_passwords_Set() const{
    return m_passwords_isSet;
}

bool OAIRegistryListCredentialsResult::is_passwords_Valid() const{
    return m_passwords_isValid;
}

QString OAIRegistryListCredentialsResult::getUsername() const {
    return m_username;
}
void OAIRegistryListCredentialsResult::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIRegistryListCredentialsResult::is_username_Set() const{
    return m_username_isSet;
}

bool OAIRegistryListCredentialsResult::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIRegistryListCredentialsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passwords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistryListCredentialsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
