/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceProperties::OAIWorkspaceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceProperties::OAIWorkspaceProperties() {
    this->initializeModel();
}

OAIWorkspaceProperties::~OAIWorkspaceProperties() {}

void OAIWorkspaceProperties::initializeModel() {

    m_application_insights_isSet = false;
    m_application_insights_isValid = false;

    m_batchai_workspace_isSet = false;
    m_batchai_workspace_isValid = false;

    m_container_registry_isSet = false;
    m_container_registry_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discovery_url_isSet = false;
    m_discovery_url_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_key_vault_isSet = false;
    m_key_vault_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_storage_account_isSet = false;
    m_storage_account_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;
}

void OAIWorkspaceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceProperties::fromJsonObject(QJsonObject json) {

    m_application_insights_isValid = ::OpenAPI::fromJsonValue(m_application_insights, json[QString("applicationInsights")]);
    m_application_insights_isSet = !json[QString("applicationInsights")].isNull() && m_application_insights_isValid;

    m_batchai_workspace_isValid = ::OpenAPI::fromJsonValue(m_batchai_workspace, json[QString("batchaiWorkspace")]);
    m_batchai_workspace_isSet = !json[QString("batchaiWorkspace")].isNull() && m_batchai_workspace_isValid;

    m_container_registry_isValid = ::OpenAPI::fromJsonValue(m_container_registry, json[QString("containerRegistry")]);
    m_container_registry_isSet = !json[QString("containerRegistry")].isNull() && m_container_registry_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discovery_url_isValid = ::OpenAPI::fromJsonValue(m_discovery_url, json[QString("discoveryUrl")]);
    m_discovery_url_isSet = !json[QString("discoveryUrl")].isNull() && m_discovery_url_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_key_vault_isValid = ::OpenAPI::fromJsonValue(m_key_vault, json[QString("keyVault")]);
    m_key_vault_isSet = !json[QString("keyVault")].isNull() && m_key_vault_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_storage_account_isValid = ::OpenAPI::fromJsonValue(m_storage_account, json[QString("storageAccount")]);
    m_storage_account_isSet = !json[QString("storageAccount")].isNull() && m_storage_account_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;
}

QString OAIWorkspaceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_application_insights_isSet) {
        obj.insert(QString("applicationInsights"), ::OpenAPI::toJsonValue(m_application_insights));
    }
    if (m_batchai_workspace_isSet) {
        obj.insert(QString("batchaiWorkspace"), ::OpenAPI::toJsonValue(m_batchai_workspace));
    }
    if (m_container_registry_isSet) {
        obj.insert(QString("containerRegistry"), ::OpenAPI::toJsonValue(m_container_registry));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discovery_url_isSet) {
        obj.insert(QString("discoveryUrl"), ::OpenAPI::toJsonValue(m_discovery_url));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_key_vault_isSet) {
        obj.insert(QString("keyVault"), ::OpenAPI::toJsonValue(m_key_vault));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_storage_account_isSet) {
        obj.insert(QString("storageAccount"), ::OpenAPI::toJsonValue(m_storage_account));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    return obj;
}

QString OAIWorkspaceProperties::getApplicationInsights() const {
    return m_application_insights;
}
void OAIWorkspaceProperties::setApplicationInsights(const QString &application_insights) {
    m_application_insights = application_insights;
    m_application_insights_isSet = true;
}

bool OAIWorkspaceProperties::is_application_insights_Set() const{
    return m_application_insights_isSet;
}

bool OAIWorkspaceProperties::is_application_insights_Valid() const{
    return m_application_insights_isValid;
}

QString OAIWorkspaceProperties::getBatchaiWorkspace() const {
    return m_batchai_workspace;
}
void OAIWorkspaceProperties::setBatchaiWorkspace(const QString &batchai_workspace) {
    m_batchai_workspace = batchai_workspace;
    m_batchai_workspace_isSet = true;
}

bool OAIWorkspaceProperties::is_batchai_workspace_Set() const{
    return m_batchai_workspace_isSet;
}

bool OAIWorkspaceProperties::is_batchai_workspace_Valid() const{
    return m_batchai_workspace_isValid;
}

QString OAIWorkspaceProperties::getContainerRegistry() const {
    return m_container_registry;
}
void OAIWorkspaceProperties::setContainerRegistry(const QString &container_registry) {
    m_container_registry = container_registry;
    m_container_registry_isSet = true;
}

bool OAIWorkspaceProperties::is_container_registry_Set() const{
    return m_container_registry_isSet;
}

bool OAIWorkspaceProperties::is_container_registry_Valid() const{
    return m_container_registry_isValid;
}

QDateTime OAIWorkspaceProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIWorkspaceProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIWorkspaceProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIWorkspaceProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIWorkspaceProperties::getDescription() const {
    return m_description;
}
void OAIWorkspaceProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWorkspaceProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWorkspaceProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWorkspaceProperties::getDiscoveryUrl() const {
    return m_discovery_url;
}
void OAIWorkspaceProperties::setDiscoveryUrl(const QString &discovery_url) {
    m_discovery_url = discovery_url;
    m_discovery_url_isSet = true;
}

bool OAIWorkspaceProperties::is_discovery_url_Set() const{
    return m_discovery_url_isSet;
}

bool OAIWorkspaceProperties::is_discovery_url_Valid() const{
    return m_discovery_url_isValid;
}

QString OAIWorkspaceProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIWorkspaceProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIWorkspaceProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIWorkspaceProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIWorkspaceProperties::getKeyVault() const {
    return m_key_vault;
}
void OAIWorkspaceProperties::setKeyVault(const QString &key_vault) {
    m_key_vault = key_vault;
    m_key_vault_isSet = true;
}

bool OAIWorkspaceProperties::is_key_vault_Set() const{
    return m_key_vault_isSet;
}

bool OAIWorkspaceProperties::is_key_vault_Valid() const{
    return m_key_vault_isValid;
}

QString OAIWorkspaceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIWorkspaceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIWorkspaceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIWorkspaceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIWorkspaceProperties::getStorageAccount() const {
    return m_storage_account;
}
void OAIWorkspaceProperties::setStorageAccount(const QString &storage_account) {
    m_storage_account = storage_account;
    m_storage_account_isSet = true;
}

bool OAIWorkspaceProperties::is_storage_account_Set() const{
    return m_storage_account_isSet;
}

bool OAIWorkspaceProperties::is_storage_account_Valid() const{
    return m_storage_account_isValid;
}

QString OAIWorkspaceProperties::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIWorkspaceProperties::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIWorkspaceProperties::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIWorkspaceProperties::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

bool OAIWorkspaceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_insights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batchai_workspace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_registry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_vault_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
