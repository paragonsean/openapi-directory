/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkspacesApi_H
#define OAI_OAIWorkspacesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListWorkspaceKeysResult.h"
#include "OAIMachineLearningServiceError.h"
#include "OAIWorkspace.h"
#include "OAIWorkspaceListResult.h"
#include "OAIWorkspaceUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkspacesApi : public QObject {
    Q_OBJECT

public:
    OAIWorkspacesApi(const int timeOut = 0);
    ~OAIWorkspacesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  parameters OAIWorkspace [required]
    */
    virtual void workspacesCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const OAIWorkspace &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    */
    virtual void workspacesDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    */
    virtual void workspacesGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void workspacesListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void workspacesListBySubscription(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    */
    virtual void workspacesListKeys(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    */
    virtual void workspacesResyncKeys(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  parameters OAIWorkspaceUpdateParameters [required]
    */
    virtual void workspacesUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const OAIWorkspaceUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workspacesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void workspacesDeleteCallback(OAIHttpRequestWorker *worker);
    void workspacesGetCallback(OAIHttpRequestWorker *worker);
    void workspacesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void workspacesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void workspacesListKeysCallback(OAIHttpRequestWorker *worker);
    void workspacesResyncKeysCallback(OAIHttpRequestWorker *worker);
    void workspacesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workspacesCreateOrUpdateSignal(OAIWorkspace summary);
    void workspacesDeleteSignal();
    void workspacesGetSignal(OAIWorkspace summary);
    void workspacesListByResourceGroupSignal(OAIWorkspaceListResult summary);
    void workspacesListBySubscriptionSignal(OAIWorkspaceListResult summary);
    void workspacesListKeysSignal(OAIListWorkspaceKeysResult summary);
    void workspacesResyncKeysSignal();
    void workspacesUpdateSignal(OAIWorkspace summary);


    void workspacesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkspace summary);
    void workspacesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workspacesGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkspace summary);
    void workspacesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceListResult summary);
    void workspacesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceListResult summary);
    void workspacesListKeysSignalFull(OAIHttpRequestWorker *worker, OAIListWorkspaceKeysResult summary);
    void workspacesResyncKeysSignalFull(OAIHttpRequestWorker *worker);
    void workspacesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkspace summary);

    Q_DECL_DEPRECATED_X("Use workspacesCreateOrUpdateSignalError() instead")
    void workspacesCreateOrUpdateSignalE(OAIWorkspace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesCreateOrUpdateSignalError(OAIWorkspace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesDeleteSignalError() instead")
    void workspacesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesGetSignalError() instead")
    void workspacesGetSignalE(OAIWorkspace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesGetSignalError(OAIWorkspace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesListByResourceGroupSignalError() instead")
    void workspacesListByResourceGroupSignalE(OAIWorkspaceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesListByResourceGroupSignalError(OAIWorkspaceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesListBySubscriptionSignalError() instead")
    void workspacesListBySubscriptionSignalE(OAIWorkspaceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesListBySubscriptionSignalError(OAIWorkspaceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesListKeysSignalError() instead")
    void workspacesListKeysSignalE(OAIListWorkspaceKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesListKeysSignalError(OAIListWorkspaceKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesResyncKeysSignalError() instead")
    void workspacesResyncKeysSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesResyncKeysSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesUpdateSignalError() instead")
    void workspacesUpdateSignalE(OAIWorkspace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesUpdateSignalError(OAIWorkspace summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workspacesCreateOrUpdateSignalErrorFull() instead")
    void workspacesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesDeleteSignalErrorFull() instead")
    void workspacesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesGetSignalErrorFull() instead")
    void workspacesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesListByResourceGroupSignalErrorFull() instead")
    void workspacesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesListBySubscriptionSignalErrorFull() instead")
    void workspacesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesListKeysSignalErrorFull() instead")
    void workspacesListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesResyncKeysSignalErrorFull() instead")
    void workspacesResyncKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesResyncKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesUpdateSignalErrorFull() instead")
    void workspacesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
