/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAksComputeSecrets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAksComputeSecrets::OAIAksComputeSecrets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAksComputeSecrets::OAIAksComputeSecrets() {
    this->initializeModel();
}

OAIAksComputeSecrets::~OAIAksComputeSecrets() {}

void OAIAksComputeSecrets::initializeModel() {

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_admin_kube_config_isSet = false;
    m_admin_kube_config_isValid = false;

    m_image_pull_secret_name_isSet = false;
    m_image_pull_secret_name_isValid = false;

    m_user_kube_config_isSet = false;
    m_user_kube_config_isValid = false;
}

void OAIAksComputeSecrets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAksComputeSecrets::fromJsonObject(QJsonObject json) {

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("computeType")]);
    m_compute_type_isSet = !json[QString("computeType")].isNull() && m_compute_type_isValid;

    m_admin_kube_config_isValid = ::OpenAPI::fromJsonValue(m_admin_kube_config, json[QString("adminKubeConfig")]);
    m_admin_kube_config_isSet = !json[QString("adminKubeConfig")].isNull() && m_admin_kube_config_isValid;

    m_image_pull_secret_name_isValid = ::OpenAPI::fromJsonValue(m_image_pull_secret_name, json[QString("imagePullSecretName")]);
    m_image_pull_secret_name_isSet = !json[QString("imagePullSecretName")].isNull() && m_image_pull_secret_name_isValid;

    m_user_kube_config_isValid = ::OpenAPI::fromJsonValue(m_user_kube_config, json[QString("userKubeConfig")]);
    m_user_kube_config_isSet = !json[QString("userKubeConfig")].isNull() && m_user_kube_config_isValid;
}

QString OAIAksComputeSecrets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAksComputeSecrets::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_type.isSet()) {
        obj.insert(QString("computeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_admin_kube_config_isSet) {
        obj.insert(QString("adminKubeConfig"), ::OpenAPI::toJsonValue(m_admin_kube_config));
    }
    if (m_image_pull_secret_name_isSet) {
        obj.insert(QString("imagePullSecretName"), ::OpenAPI::toJsonValue(m_image_pull_secret_name));
    }
    if (m_user_kube_config_isSet) {
        obj.insert(QString("userKubeConfig"), ::OpenAPI::toJsonValue(m_user_kube_config));
    }
    return obj;
}

OAIComputeType OAIAksComputeSecrets::getComputeType() const {
    return m_compute_type;
}
void OAIAksComputeSecrets::setComputeType(const OAIComputeType &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAIAksComputeSecrets::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAIAksComputeSecrets::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

QString OAIAksComputeSecrets::getAdminKubeConfig() const {
    return m_admin_kube_config;
}
void OAIAksComputeSecrets::setAdminKubeConfig(const QString &admin_kube_config) {
    m_admin_kube_config = admin_kube_config;
    m_admin_kube_config_isSet = true;
}

bool OAIAksComputeSecrets::is_admin_kube_config_Set() const{
    return m_admin_kube_config_isSet;
}

bool OAIAksComputeSecrets::is_admin_kube_config_Valid() const{
    return m_admin_kube_config_isValid;
}

QString OAIAksComputeSecrets::getImagePullSecretName() const {
    return m_image_pull_secret_name;
}
void OAIAksComputeSecrets::setImagePullSecretName(const QString &image_pull_secret_name) {
    m_image_pull_secret_name = image_pull_secret_name;
    m_image_pull_secret_name_isSet = true;
}

bool OAIAksComputeSecrets::is_image_pull_secret_name_Set() const{
    return m_image_pull_secret_name_isSet;
}

bool OAIAksComputeSecrets::is_image_pull_secret_name_Valid() const{
    return m_image_pull_secret_name_isValid;
}

QString OAIAksComputeSecrets::getUserKubeConfig() const {
    return m_user_kube_config;
}
void OAIAksComputeSecrets::setUserKubeConfig(const QString &user_kube_config) {
    m_user_kube_config = user_kube_config;
    m_user_kube_config_isSet = true;
}

bool OAIAksComputeSecrets::is_user_kube_config_Set() const{
    return m_user_kube_config_isSet;
}

bool OAIAksComputeSecrets::is_user_kube_config_Valid() const{
    return m_user_kube_config_isValid;
}

bool OAIAksComputeSecrets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_kube_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_pull_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_kube_config_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAksComputeSecrets::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compute_type_isValid && true;
}

} // namespace OpenAPI
