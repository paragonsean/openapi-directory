# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ssl_configuration import SslConfiguration
from openapi_server.models.system_service import SystemService
from openapi_server import util


class AKSAllOfProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_count: int=None, agent_vm_size: str=None, cluster_fqdn: str=None, ssl_configuration: SslConfiguration=None, system_services: List[SystemService]=None):
        """AKSAllOfProperties - a model defined in OpenAPI

        :param agent_count: The agent_count of this AKSAllOfProperties.
        :param agent_vm_size: The agent_vm_size of this AKSAllOfProperties.
        :param cluster_fqdn: The cluster_fqdn of this AKSAllOfProperties.
        :param ssl_configuration: The ssl_configuration of this AKSAllOfProperties.
        :param system_services: The system_services of this AKSAllOfProperties.
        """
        self.openapi_types = {
            'agent_count': int,
            'agent_vm_size': str,
            'cluster_fqdn': str,
            'ssl_configuration': SslConfiguration,
            'system_services': List[SystemService]
        }

        self.attribute_map = {
            'agent_count': 'agentCount',
            'agent_vm_size': 'agentVMSize',
            'cluster_fqdn': 'clusterFqdn',
            'ssl_configuration': 'sslConfiguration',
            'system_services': 'systemServices'
        }

        self._agent_count = agent_count
        self._agent_vm_size = agent_vm_size
        self._cluster_fqdn = cluster_fqdn
        self._ssl_configuration = ssl_configuration
        self._system_services = system_services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AKSAllOfProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AKS_allOf_properties of this AKSAllOfProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_count(self):
        """Gets the agent_count of this AKSAllOfProperties.

        Number of agents

        :return: The agent_count of this AKSAllOfProperties.
        :rtype: int
        """
        return self._agent_count

    @agent_count.setter
    def agent_count(self, agent_count):
        """Sets the agent_count of this AKSAllOfProperties.

        Number of agents

        :param agent_count: The agent_count of this AKSAllOfProperties.
        :type agent_count: int
        """
        if agent_count is not None and agent_count < 1:
            raise ValueError("Invalid value for `agent_count`, must be a value greater than or equal to `1`")

        self._agent_count = agent_count

    @property
    def agent_vm_size(self):
        """Gets the agent_vm_size of this AKSAllOfProperties.

        Agent virtual machine size

        :return: The agent_vm_size of this AKSAllOfProperties.
        :rtype: str
        """
        return self._agent_vm_size

    @agent_vm_size.setter
    def agent_vm_size(self, agent_vm_size):
        """Sets the agent_vm_size of this AKSAllOfProperties.

        Agent virtual machine size

        :param agent_vm_size: The agent_vm_size of this AKSAllOfProperties.
        :type agent_vm_size: str
        """

        self._agent_vm_size = agent_vm_size

    @property
    def cluster_fqdn(self):
        """Gets the cluster_fqdn of this AKSAllOfProperties.

        Cluster full qualified domain name

        :return: The cluster_fqdn of this AKSAllOfProperties.
        :rtype: str
        """
        return self._cluster_fqdn

    @cluster_fqdn.setter
    def cluster_fqdn(self, cluster_fqdn):
        """Sets the cluster_fqdn of this AKSAllOfProperties.

        Cluster full qualified domain name

        :param cluster_fqdn: The cluster_fqdn of this AKSAllOfProperties.
        :type cluster_fqdn: str
        """

        self._cluster_fqdn = cluster_fqdn

    @property
    def ssl_configuration(self):
        """Gets the ssl_configuration of this AKSAllOfProperties.


        :return: The ssl_configuration of this AKSAllOfProperties.
        :rtype: SslConfiguration
        """
        return self._ssl_configuration

    @ssl_configuration.setter
    def ssl_configuration(self, ssl_configuration):
        """Sets the ssl_configuration of this AKSAllOfProperties.


        :param ssl_configuration: The ssl_configuration of this AKSAllOfProperties.
        :type ssl_configuration: SslConfiguration
        """

        self._ssl_configuration = ssl_configuration

    @property
    def system_services(self):
        """Gets the system_services of this AKSAllOfProperties.

        System services

        :return: The system_services of this AKSAllOfProperties.
        :rtype: List[SystemService]
        """
        return self._system_services

    @system_services.setter
    def system_services(self, system_services):
        """Sets the system_services of this AKSAllOfProperties.

        System services

        :param system_services: The system_services of this AKSAllOfProperties.
        :type system_services: List[SystemService]
        """

        self._system_services = system_services
