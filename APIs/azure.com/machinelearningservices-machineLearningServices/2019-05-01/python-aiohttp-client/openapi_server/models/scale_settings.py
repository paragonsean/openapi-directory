# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScaleSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_node_count: int=None, min_node_count: int=None, node_idle_time_before_scale_down: str=None):
        """ScaleSettings - a model defined in OpenAPI

        :param max_node_count: The max_node_count of this ScaleSettings.
        :param min_node_count: The min_node_count of this ScaleSettings.
        :param node_idle_time_before_scale_down: The node_idle_time_before_scale_down of this ScaleSettings.
        """
        self.openapi_types = {
            'max_node_count': int,
            'min_node_count': int,
            'node_idle_time_before_scale_down': str
        }

        self.attribute_map = {
            'max_node_count': 'maxNodeCount',
            'min_node_count': 'minNodeCount',
            'node_idle_time_before_scale_down': 'nodeIdleTimeBeforeScaleDown'
        }

        self._max_node_count = max_node_count
        self._min_node_count = min_node_count
        self._node_idle_time_before_scale_down = node_idle_time_before_scale_down

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScaleSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScaleSettings of this ScaleSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_node_count(self):
        """Gets the max_node_count of this ScaleSettings.

        Max number of nodes to use

        :return: The max_node_count of this ScaleSettings.
        :rtype: int
        """
        return self._max_node_count

    @max_node_count.setter
    def max_node_count(self, max_node_count):
        """Sets the max_node_count of this ScaleSettings.

        Max number of nodes to use

        :param max_node_count: The max_node_count of this ScaleSettings.
        :type max_node_count: int
        """
        if max_node_count is None:
            raise ValueError("Invalid value for `max_node_count`, must not be `None`")

        self._max_node_count = max_node_count

    @property
    def min_node_count(self):
        """Gets the min_node_count of this ScaleSettings.

        Min number of nodes to use

        :return: The min_node_count of this ScaleSettings.
        :rtype: int
        """
        return self._min_node_count

    @min_node_count.setter
    def min_node_count(self, min_node_count):
        """Sets the min_node_count of this ScaleSettings.

        Min number of nodes to use

        :param min_node_count: The min_node_count of this ScaleSettings.
        :type min_node_count: int
        """

        self._min_node_count = min_node_count

    @property
    def node_idle_time_before_scale_down(self):
        """Gets the node_idle_time_before_scale_down of this ScaleSettings.

        Node Idle Time before scaling down amlCompute

        :return: The node_idle_time_before_scale_down of this ScaleSettings.
        :rtype: str
        """
        return self._node_idle_time_before_scale_down

    @node_idle_time_before_scale_down.setter
    def node_idle_time_before_scale_down(self, node_idle_time_before_scale_down):
        """Sets the node_idle_time_before_scale_down of this ScaleSettings.

        Node Idle Time before scaling down amlCompute

        :param node_idle_time_before_scale_down: The node_idle_time_before_scale_down of this ScaleSettings.
        :type node_idle_time_before_scale_down: str
        """

        self._node_idle_time_before_scale_down = node_idle_time_before_scale_down
