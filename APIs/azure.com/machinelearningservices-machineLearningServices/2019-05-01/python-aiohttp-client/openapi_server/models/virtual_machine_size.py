# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualMachineSize(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, family: str=None, low_priority_capable: bool=None, max_resource_volume_mb: int=None, memory_gb: float=None, name: str=None, os_vhd_size_mb: int=None, premium_io: bool=None, v_cpus: int=None):
        """VirtualMachineSize - a model defined in OpenAPI

        :param family: The family of this VirtualMachineSize.
        :param low_priority_capable: The low_priority_capable of this VirtualMachineSize.
        :param max_resource_volume_mb: The max_resource_volume_mb of this VirtualMachineSize.
        :param memory_gb: The memory_gb of this VirtualMachineSize.
        :param name: The name of this VirtualMachineSize.
        :param os_vhd_size_mb: The os_vhd_size_mb of this VirtualMachineSize.
        :param premium_io: The premium_io of this VirtualMachineSize.
        :param v_cpus: The v_cpus of this VirtualMachineSize.
        """
        self.openapi_types = {
            'family': str,
            'low_priority_capable': bool,
            'max_resource_volume_mb': int,
            'memory_gb': float,
            'name': str,
            'os_vhd_size_mb': int,
            'premium_io': bool,
            'v_cpus': int
        }

        self.attribute_map = {
            'family': 'family',
            'low_priority_capable': 'lowPriorityCapable',
            'max_resource_volume_mb': 'maxResourceVolumeMB',
            'memory_gb': 'memoryGB',
            'name': 'name',
            'os_vhd_size_mb': 'osVhdSizeMB',
            'premium_io': 'premiumIO',
            'v_cpus': 'vCPUs'
        }

        self._family = family
        self._low_priority_capable = low_priority_capable
        self._max_resource_volume_mb = max_resource_volume_mb
        self._memory_gb = memory_gb
        self._name = name
        self._os_vhd_size_mb = os_vhd_size_mb
        self._premium_io = premium_io
        self._v_cpus = v_cpus

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineSize':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineSize of this VirtualMachineSize.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def family(self):
        """Gets the family of this VirtualMachineSize.

        The family name of the virtual machine size.

        :return: The family of this VirtualMachineSize.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this VirtualMachineSize.

        The family name of the virtual machine size.

        :param family: The family of this VirtualMachineSize.
        :type family: str
        """

        self._family = family

    @property
    def low_priority_capable(self):
        """Gets the low_priority_capable of this VirtualMachineSize.

        Specifies if the virtual machine size supports low priority VMs.

        :return: The low_priority_capable of this VirtualMachineSize.
        :rtype: bool
        """
        return self._low_priority_capable

    @low_priority_capable.setter
    def low_priority_capable(self, low_priority_capable):
        """Sets the low_priority_capable of this VirtualMachineSize.

        Specifies if the virtual machine size supports low priority VMs.

        :param low_priority_capable: The low_priority_capable of this VirtualMachineSize.
        :type low_priority_capable: bool
        """

        self._low_priority_capable = low_priority_capable

    @property
    def max_resource_volume_mb(self):
        """Gets the max_resource_volume_mb of this VirtualMachineSize.

        The resource volume size, in MB, allowed by the virtual machine size.

        :return: The max_resource_volume_mb of this VirtualMachineSize.
        :rtype: int
        """
        return self._max_resource_volume_mb

    @max_resource_volume_mb.setter
    def max_resource_volume_mb(self, max_resource_volume_mb):
        """Sets the max_resource_volume_mb of this VirtualMachineSize.

        The resource volume size, in MB, allowed by the virtual machine size.

        :param max_resource_volume_mb: The max_resource_volume_mb of this VirtualMachineSize.
        :type max_resource_volume_mb: int
        """

        self._max_resource_volume_mb = max_resource_volume_mb

    @property
    def memory_gb(self):
        """Gets the memory_gb of this VirtualMachineSize.

        The amount of memory, in GB, supported by the virtual machine size.

        :return: The memory_gb of this VirtualMachineSize.
        :rtype: float
        """
        return self._memory_gb

    @memory_gb.setter
    def memory_gb(self, memory_gb):
        """Sets the memory_gb of this VirtualMachineSize.

        The amount of memory, in GB, supported by the virtual machine size.

        :param memory_gb: The memory_gb of this VirtualMachineSize.
        :type memory_gb: float
        """

        self._memory_gb = memory_gb

    @property
    def name(self):
        """Gets the name of this VirtualMachineSize.

        The name of the virtual machine size.

        :return: The name of this VirtualMachineSize.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualMachineSize.

        The name of the virtual machine size.

        :param name: The name of this VirtualMachineSize.
        :type name: str
        """

        self._name = name

    @property
    def os_vhd_size_mb(self):
        """Gets the os_vhd_size_mb of this VirtualMachineSize.

        The OS VHD disk size, in MB, allowed by the virtual machine size.

        :return: The os_vhd_size_mb of this VirtualMachineSize.
        :rtype: int
        """
        return self._os_vhd_size_mb

    @os_vhd_size_mb.setter
    def os_vhd_size_mb(self, os_vhd_size_mb):
        """Sets the os_vhd_size_mb of this VirtualMachineSize.

        The OS VHD disk size, in MB, allowed by the virtual machine size.

        :param os_vhd_size_mb: The os_vhd_size_mb of this VirtualMachineSize.
        :type os_vhd_size_mb: int
        """

        self._os_vhd_size_mb = os_vhd_size_mb

    @property
    def premium_io(self):
        """Gets the premium_io of this VirtualMachineSize.

        Specifies if the virtual machine size supports premium IO.

        :return: The premium_io of this VirtualMachineSize.
        :rtype: bool
        """
        return self._premium_io

    @premium_io.setter
    def premium_io(self, premium_io):
        """Sets the premium_io of this VirtualMachineSize.

        Specifies if the virtual machine size supports premium IO.

        :param premium_io: The premium_io of this VirtualMachineSize.
        :type premium_io: bool
        """

        self._premium_io = premium_io

    @property
    def v_cpus(self):
        """Gets the v_cpus of this VirtualMachineSize.

        The number of vCPUs supported by the virtual machine size.

        :return: The v_cpus of this VirtualMachineSize.
        :rtype: int
        """
        return self._v_cpus

    @v_cpus.setter
    def v_cpus(self, v_cpus):
        """Sets the v_cpus of this VirtualMachineSize.

        The number of vCPUs supported by the virtual machine size.

        :param v_cpus: The v_cpus of this VirtualMachineSize.
        :type v_cpus: int
        """

        self._v_cpus = v_cpus
