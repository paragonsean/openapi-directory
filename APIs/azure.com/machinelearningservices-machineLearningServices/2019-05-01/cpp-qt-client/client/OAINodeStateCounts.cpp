/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeStateCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeStateCounts::OAINodeStateCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeStateCounts::OAINodeStateCounts() {
    this->initializeModel();
}

OAINodeStateCounts::~OAINodeStateCounts() {}

void OAINodeStateCounts::initializeModel() {

    m_idle_node_count_isSet = false;
    m_idle_node_count_isValid = false;

    m_leaving_node_count_isSet = false;
    m_leaving_node_count_isValid = false;

    m_preempted_node_count_isSet = false;
    m_preempted_node_count_isValid = false;

    m_preparing_node_count_isSet = false;
    m_preparing_node_count_isValid = false;

    m_running_node_count_isSet = false;
    m_running_node_count_isValid = false;

    m_unusable_node_count_isSet = false;
    m_unusable_node_count_isValid = false;
}

void OAINodeStateCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeStateCounts::fromJsonObject(QJsonObject json) {

    m_idle_node_count_isValid = ::OpenAPI::fromJsonValue(m_idle_node_count, json[QString("idleNodeCount")]);
    m_idle_node_count_isSet = !json[QString("idleNodeCount")].isNull() && m_idle_node_count_isValid;

    m_leaving_node_count_isValid = ::OpenAPI::fromJsonValue(m_leaving_node_count, json[QString("leavingNodeCount")]);
    m_leaving_node_count_isSet = !json[QString("leavingNodeCount")].isNull() && m_leaving_node_count_isValid;

    m_preempted_node_count_isValid = ::OpenAPI::fromJsonValue(m_preempted_node_count, json[QString("preemptedNodeCount")]);
    m_preempted_node_count_isSet = !json[QString("preemptedNodeCount")].isNull() && m_preempted_node_count_isValid;

    m_preparing_node_count_isValid = ::OpenAPI::fromJsonValue(m_preparing_node_count, json[QString("preparingNodeCount")]);
    m_preparing_node_count_isSet = !json[QString("preparingNodeCount")].isNull() && m_preparing_node_count_isValid;

    m_running_node_count_isValid = ::OpenAPI::fromJsonValue(m_running_node_count, json[QString("runningNodeCount")]);
    m_running_node_count_isSet = !json[QString("runningNodeCount")].isNull() && m_running_node_count_isValid;

    m_unusable_node_count_isValid = ::OpenAPI::fromJsonValue(m_unusable_node_count, json[QString("unusableNodeCount")]);
    m_unusable_node_count_isSet = !json[QString("unusableNodeCount")].isNull() && m_unusable_node_count_isValid;
}

QString OAINodeStateCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeStateCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_idle_node_count_isSet) {
        obj.insert(QString("idleNodeCount"), ::OpenAPI::toJsonValue(m_idle_node_count));
    }
    if (m_leaving_node_count_isSet) {
        obj.insert(QString("leavingNodeCount"), ::OpenAPI::toJsonValue(m_leaving_node_count));
    }
    if (m_preempted_node_count_isSet) {
        obj.insert(QString("preemptedNodeCount"), ::OpenAPI::toJsonValue(m_preempted_node_count));
    }
    if (m_preparing_node_count_isSet) {
        obj.insert(QString("preparingNodeCount"), ::OpenAPI::toJsonValue(m_preparing_node_count));
    }
    if (m_running_node_count_isSet) {
        obj.insert(QString("runningNodeCount"), ::OpenAPI::toJsonValue(m_running_node_count));
    }
    if (m_unusable_node_count_isSet) {
        obj.insert(QString("unusableNodeCount"), ::OpenAPI::toJsonValue(m_unusable_node_count));
    }
    return obj;
}

qint32 OAINodeStateCounts::getIdleNodeCount() const {
    return m_idle_node_count;
}
void OAINodeStateCounts::setIdleNodeCount(const qint32 &idle_node_count) {
    m_idle_node_count = idle_node_count;
    m_idle_node_count_isSet = true;
}

bool OAINodeStateCounts::is_idle_node_count_Set() const{
    return m_idle_node_count_isSet;
}

bool OAINodeStateCounts::is_idle_node_count_Valid() const{
    return m_idle_node_count_isValid;
}

qint32 OAINodeStateCounts::getLeavingNodeCount() const {
    return m_leaving_node_count;
}
void OAINodeStateCounts::setLeavingNodeCount(const qint32 &leaving_node_count) {
    m_leaving_node_count = leaving_node_count;
    m_leaving_node_count_isSet = true;
}

bool OAINodeStateCounts::is_leaving_node_count_Set() const{
    return m_leaving_node_count_isSet;
}

bool OAINodeStateCounts::is_leaving_node_count_Valid() const{
    return m_leaving_node_count_isValid;
}

qint32 OAINodeStateCounts::getPreemptedNodeCount() const {
    return m_preempted_node_count;
}
void OAINodeStateCounts::setPreemptedNodeCount(const qint32 &preempted_node_count) {
    m_preempted_node_count = preempted_node_count;
    m_preempted_node_count_isSet = true;
}

bool OAINodeStateCounts::is_preempted_node_count_Set() const{
    return m_preempted_node_count_isSet;
}

bool OAINodeStateCounts::is_preempted_node_count_Valid() const{
    return m_preempted_node_count_isValid;
}

qint32 OAINodeStateCounts::getPreparingNodeCount() const {
    return m_preparing_node_count;
}
void OAINodeStateCounts::setPreparingNodeCount(const qint32 &preparing_node_count) {
    m_preparing_node_count = preparing_node_count;
    m_preparing_node_count_isSet = true;
}

bool OAINodeStateCounts::is_preparing_node_count_Set() const{
    return m_preparing_node_count_isSet;
}

bool OAINodeStateCounts::is_preparing_node_count_Valid() const{
    return m_preparing_node_count_isValid;
}

qint32 OAINodeStateCounts::getRunningNodeCount() const {
    return m_running_node_count;
}
void OAINodeStateCounts::setRunningNodeCount(const qint32 &running_node_count) {
    m_running_node_count = running_node_count;
    m_running_node_count_isSet = true;
}

bool OAINodeStateCounts::is_running_node_count_Set() const{
    return m_running_node_count_isSet;
}

bool OAINodeStateCounts::is_running_node_count_Valid() const{
    return m_running_node_count_isValid;
}

qint32 OAINodeStateCounts::getUnusableNodeCount() const {
    return m_unusable_node_count;
}
void OAINodeStateCounts::setUnusableNodeCount(const qint32 &unusable_node_count) {
    m_unusable_node_count = unusable_node_count;
    m_unusable_node_count_isSet = true;
}

bool OAINodeStateCounts::is_unusable_node_count_Set() const{
    return m_unusable_node_count_isSet;
}

bool OAINodeStateCounts::is_unusable_node_count_Valid() const{
    return m_unusable_node_count_isValid;
}

bool OAINodeStateCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_idle_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leaving_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preempted_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preparing_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unusable_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeStateCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
