/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmlComputeNodeInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmlComputeNodeInformation::OAIAmlComputeNodeInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmlComputeNodeInformation::OAIAmlComputeNodeInformation() {
    this->initializeModel();
}

OAIAmlComputeNodeInformation::~OAIAmlComputeNodeInformation() {}

void OAIAmlComputeNodeInformation::initializeModel() {

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;
}

void OAIAmlComputeNodeInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmlComputeNodeInformation::fromJsonObject(QJsonObject json) {

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("nodeId")]);
    m_node_id_isSet = !json[QString("nodeId")].isNull() && m_node_id_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;
}

QString OAIAmlComputeNodeInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmlComputeNodeInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("nodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    return obj;
}

QString OAIAmlComputeNodeInformation::getIpAddress() const {
    return m_ip_address;
}
void OAIAmlComputeNodeInformation::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIAmlComputeNodeInformation::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIAmlComputeNodeInformation::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIAmlComputeNodeInformation::getNodeId() const {
    return m_node_id;
}
void OAIAmlComputeNodeInformation::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIAmlComputeNodeInformation::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIAmlComputeNodeInformation::is_node_id_Valid() const{
    return m_node_id_isValid;
}

double OAIAmlComputeNodeInformation::getPort() const {
    return m_port;
}
void OAIAmlComputeNodeInformation::setPort(const double &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIAmlComputeNodeInformation::is_port_Set() const{
    return m_port_isSet;
}

bool OAIAmlComputeNodeInformation::is_port_Valid() const{
    return m_port_isValid;
}

bool OAIAmlComputeNodeInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmlComputeNodeInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
