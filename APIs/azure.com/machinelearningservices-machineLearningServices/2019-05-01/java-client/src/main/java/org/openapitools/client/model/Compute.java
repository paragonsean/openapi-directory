/*
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComputeType;
import org.openapitools.client.model.MachineLearningServiceError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Machine Learning compute object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:06.431338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Compute {
  public static final String SERIALIZED_NAME_COMPUTE_LOCATION = "computeLocation";
  @SerializedName(SERIALIZED_NAME_COMPUTE_LOCATION)
  private String computeLocation;

  public static final String SERIALIZED_NAME_COMPUTE_TYPE = "computeType";
  @SerializedName(SERIALIZED_NAME_COMPUTE_TYPE)
  protected ComputeType computeType;

  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_ATTACHED_COMPUTE = "isAttachedCompute";
  @SerializedName(SERIALIZED_NAME_IS_ATTACHED_COMPUTE)
  private Boolean isAttachedCompute;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modifiedOn";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_PROVISIONING_ERRORS = "provisioningErrors";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_ERRORS)
  private List<MachineLearningServiceError> provisioningErrors = new ArrayList<>();

  /**
   * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    UNKNOWN("Unknown"),
    
    UPDATING("Updating"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public Compute() {
    this.computeType = this.getClass().getSimpleName();
  }

  public Compute(
     OffsetDateTime createdOn, 
     Boolean isAttachedCompute, 
     OffsetDateTime modifiedOn, 
     List<MachineLearningServiceError> provisioningErrors, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.createdOn = createdOn;
    this.isAttachedCompute = isAttachedCompute;
    this.modifiedOn = modifiedOn;
    this.provisioningErrors = provisioningErrors;
    this.provisioningState = provisioningState;
  }

  public Compute computeLocation(String computeLocation) {
    this.computeLocation = computeLocation;
    return this;
  }

  /**
   * Location for the underlying compute
   * @return computeLocation
   */
  @javax.annotation.Nullable
  public String getComputeLocation() {
    return computeLocation;
  }

  public void setComputeLocation(String computeLocation) {
    this.computeLocation = computeLocation;
  }


  public Compute computeType(ComputeType computeType) {
    this.computeType = computeType;
    return this;
  }

  /**
   * Get computeType
   * @return computeType
   */
  @javax.annotation.Nonnull
  public ComputeType getComputeType() {
    return computeType;
  }

  public void setComputeType(ComputeType computeType) {
    this.computeType = computeType;
  }


  /**
   * The date and time when the compute was created.
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }



  public Compute description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the Machine Learning compute.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
   * @return isAttachedCompute
   */
  @javax.annotation.Nullable
  public Boolean getIsAttachedCompute() {
    return isAttachedCompute;
  }



  /**
   * The date and time when the compute was last modified.
   * @return modifiedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }



  /**
   * Errors during provisioning
   * @return provisioningErrors
   */
  @javax.annotation.Nullable
  public List<MachineLearningServiceError> getProvisioningErrors() {
    return provisioningErrors;
  }



  /**
   * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public Compute resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * ARM resource id of the underlying compute
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Compute compute = (Compute) o;
    return Objects.equals(this.computeLocation, compute.computeLocation) &&
        Objects.equals(this.computeType, compute.computeType) &&
        Objects.equals(this.createdOn, compute.createdOn) &&
        Objects.equals(this.description, compute.description) &&
        Objects.equals(this.isAttachedCompute, compute.isAttachedCompute) &&
        Objects.equals(this.modifiedOn, compute.modifiedOn) &&
        Objects.equals(this.provisioningErrors, compute.provisioningErrors) &&
        Objects.equals(this.provisioningState, compute.provisioningState) &&
        Objects.equals(this.resourceId, compute.resourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computeLocation, computeType, createdOn, description, isAttachedCompute, modifiedOn, provisioningErrors, provisioningState, resourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Compute {\n");
    sb.append("    computeLocation: ").append(toIndentedString(computeLocation)).append("\n");
    sb.append("    computeType: ").append(toIndentedString(computeType)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isAttachedCompute: ").append(toIndentedString(isAttachedCompute)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    provisioningErrors: ").append(toIndentedString(provisioningErrors)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeLocation");
    openapiFields.add("computeType");
    openapiFields.add("createdOn");
    openapiFields.add("description");
    openapiFields.add("isAttachedCompute");
    openapiFields.add("modifiedOn");
    openapiFields.add("provisioningErrors");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("computeType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Compute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Compute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Compute is not found in the empty JSON string", Compute.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("computeType").getAsString();
      switch (discriminatorValue) {
        case "AKS":
          AKS.validateJsonElement(jsonElement);
          break;
        case "AmlCompute":
          AmlCompute.validateJsonElement(jsonElement);
          break;
        case "DataFactory":
          DataFactory.validateJsonElement(jsonElement);
          break;
        case "DataLakeAnalytics":
          DataLakeAnalytics.validateJsonElement(jsonElement);
          break;
        case "Databricks":
          Databricks.validateJsonElement(jsonElement);
          break;
        case "HDInsight":
          HDInsight.validateJsonElement(jsonElement);
          break;
        case "VirtualMachine":
          VirtualMachine.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `computeType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of Compute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Compute
   * @throws IOException if the JSON string is invalid with respect to Compute
   */
  public static Compute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Compute.class);
  }

  /**
   * Convert an instance of Compute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

