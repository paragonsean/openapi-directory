/*
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Advance configuration for AKS networking
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:06.431338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AksNetworkingConfiguration {
  public static final String SERIALIZED_NAME_DNS_SERVICE_I_P = "dnsServiceIP";
  @SerializedName(SERIALIZED_NAME_DNS_SERVICE_I_P)
  private String dnsServiceIP;

  public static final String SERIALIZED_NAME_DOCKER_BRIDGE_CIDR = "dockerBridgeCidr";
  @SerializedName(SERIALIZED_NAME_DOCKER_BRIDGE_CIDR)
  private String dockerBridgeCidr;

  public static final String SERIALIZED_NAME_SERVICE_CIDR = "serviceCidr";
  @SerializedName(SERIALIZED_NAME_SERVICE_CIDR)
  private String serviceCidr;

  public static final String SERIALIZED_NAME_SUBNET_ID = "subnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public AksNetworkingConfiguration() {
  }

  public AksNetworkingConfiguration dnsServiceIP(String dnsServiceIP) {
    this.dnsServiceIP = dnsServiceIP;
    return this;
  }

  /**
   * An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
   * @return dnsServiceIP
   */
  @javax.annotation.Nullable
  public String getDnsServiceIP() {
    return dnsServiceIP;
  }

  public void setDnsServiceIP(String dnsServiceIP) {
    this.dnsServiceIP = dnsServiceIP;
  }


  public AksNetworkingConfiguration dockerBridgeCidr(String dockerBridgeCidr) {
    this.dockerBridgeCidr = dockerBridgeCidr;
    return this;
  }

  /**
   * A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
   * @return dockerBridgeCidr
   */
  @javax.annotation.Nullable
  public String getDockerBridgeCidr() {
    return dockerBridgeCidr;
  }

  public void setDockerBridgeCidr(String dockerBridgeCidr) {
    this.dockerBridgeCidr = dockerBridgeCidr;
  }


  public AksNetworkingConfiguration serviceCidr(String serviceCidr) {
    this.serviceCidr = serviceCidr;
    return this;
  }

  /**
   * A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
   * @return serviceCidr
   */
  @javax.annotation.Nullable
  public String getServiceCidr() {
    return serviceCidr;
  }

  public void setServiceCidr(String serviceCidr) {
    this.serviceCidr = serviceCidr;
  }


  public AksNetworkingConfiguration subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * Virtual network subnet resource ID the compute nodes belong to
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AksNetworkingConfiguration aksNetworkingConfiguration = (AksNetworkingConfiguration) o;
    return Objects.equals(this.dnsServiceIP, aksNetworkingConfiguration.dnsServiceIP) &&
        Objects.equals(this.dockerBridgeCidr, aksNetworkingConfiguration.dockerBridgeCidr) &&
        Objects.equals(this.serviceCidr, aksNetworkingConfiguration.serviceCidr) &&
        Objects.equals(this.subnetId, aksNetworkingConfiguration.subnetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsServiceIP, dockerBridgeCidr, serviceCidr, subnetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AksNetworkingConfiguration {\n");
    sb.append("    dnsServiceIP: ").append(toIndentedString(dnsServiceIP)).append("\n");
    sb.append("    dockerBridgeCidr: ").append(toIndentedString(dockerBridgeCidr)).append("\n");
    sb.append("    serviceCidr: ").append(toIndentedString(serviceCidr)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dnsServiceIP");
    openapiFields.add("dockerBridgeCidr");
    openapiFields.add("serviceCidr");
    openapiFields.add("subnetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AksNetworkingConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AksNetworkingConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AksNetworkingConfiguration is not found in the empty JSON string", AksNetworkingConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AksNetworkingConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AksNetworkingConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dnsServiceIP") != null && !jsonObj.get("dnsServiceIP").isJsonNull()) && !jsonObj.get("dnsServiceIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsServiceIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsServiceIP").toString()));
      }
      if ((jsonObj.get("dockerBridgeCidr") != null && !jsonObj.get("dockerBridgeCidr").isJsonNull()) && !jsonObj.get("dockerBridgeCidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerBridgeCidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerBridgeCidr").toString()));
      }
      if ((jsonObj.get("serviceCidr") != null && !jsonObj.get("serviceCidr").isJsonNull()) && !jsonObj.get("serviceCidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceCidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceCidr").toString()));
      }
      if ((jsonObj.get("subnetId") != null && !jsonObj.get("subnetId").isJsonNull()) && !jsonObj.get("subnetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AksNetworkingConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AksNetworkingConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AksNetworkingConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AksNetworkingConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<AksNetworkingConfiguration>() {
           @Override
           public void write(JsonWriter out, AksNetworkingConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AksNetworkingConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AksNetworkingConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AksNetworkingConfiguration
   * @throws IOException if the JSON string is invalid with respect to AksNetworkingConfiguration
   */
  public static AksNetworkingConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AksNetworkingConfiguration.class);
  }

  /**
   * Convert an instance of AksNetworkingConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

