/*
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Counts of various compute node states on the amlCompute.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:06.431338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeStateCounts {
  public static final String SERIALIZED_NAME_IDLE_NODE_COUNT = "idleNodeCount";
  @SerializedName(SERIALIZED_NAME_IDLE_NODE_COUNT)
  private Integer idleNodeCount;

  public static final String SERIALIZED_NAME_LEAVING_NODE_COUNT = "leavingNodeCount";
  @SerializedName(SERIALIZED_NAME_LEAVING_NODE_COUNT)
  private Integer leavingNodeCount;

  public static final String SERIALIZED_NAME_PREEMPTED_NODE_COUNT = "preemptedNodeCount";
  @SerializedName(SERIALIZED_NAME_PREEMPTED_NODE_COUNT)
  private Integer preemptedNodeCount;

  public static final String SERIALIZED_NAME_PREPARING_NODE_COUNT = "preparingNodeCount";
  @SerializedName(SERIALIZED_NAME_PREPARING_NODE_COUNT)
  private Integer preparingNodeCount;

  public static final String SERIALIZED_NAME_RUNNING_NODE_COUNT = "runningNodeCount";
  @SerializedName(SERIALIZED_NAME_RUNNING_NODE_COUNT)
  private Integer runningNodeCount;

  public static final String SERIALIZED_NAME_UNUSABLE_NODE_COUNT = "unusableNodeCount";
  @SerializedName(SERIALIZED_NAME_UNUSABLE_NODE_COUNT)
  private Integer unusableNodeCount;

  public NodeStateCounts() {
  }

  public NodeStateCounts(
     Integer idleNodeCount, 
     Integer leavingNodeCount, 
     Integer preemptedNodeCount, 
     Integer preparingNodeCount, 
     Integer runningNodeCount, 
     Integer unusableNodeCount
  ) {
    this();
    this.idleNodeCount = idleNodeCount;
    this.leavingNodeCount = leavingNodeCount;
    this.preemptedNodeCount = preemptedNodeCount;
    this.preparingNodeCount = preparingNodeCount;
    this.runningNodeCount = runningNodeCount;
    this.unusableNodeCount = unusableNodeCount;
  }

  /**
   * Number of compute nodes in idle state.
   * @return idleNodeCount
   */
  @javax.annotation.Nullable
  public Integer getIdleNodeCount() {
    return idleNodeCount;
  }



  /**
   * Number of compute nodes which are leaving the amlCompute.
   * @return leavingNodeCount
   */
  @javax.annotation.Nullable
  public Integer getLeavingNodeCount() {
    return leavingNodeCount;
  }



  /**
   * Number of compute nodes which are in preempted state.
   * @return preemptedNodeCount
   */
  @javax.annotation.Nullable
  public Integer getPreemptedNodeCount() {
    return preemptedNodeCount;
  }



  /**
   * Number of compute nodes which are being prepared.
   * @return preparingNodeCount
   */
  @javax.annotation.Nullable
  public Integer getPreparingNodeCount() {
    return preparingNodeCount;
  }



  /**
   * Number of compute nodes which are running jobs.
   * @return runningNodeCount
   */
  @javax.annotation.Nullable
  public Integer getRunningNodeCount() {
    return runningNodeCount;
  }



  /**
   * Number of compute nodes which are in unusable state.
   * @return unusableNodeCount
   */
  @javax.annotation.Nullable
  public Integer getUnusableNodeCount() {
    return unusableNodeCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeStateCounts nodeStateCounts = (NodeStateCounts) o;
    return Objects.equals(this.idleNodeCount, nodeStateCounts.idleNodeCount) &&
        Objects.equals(this.leavingNodeCount, nodeStateCounts.leavingNodeCount) &&
        Objects.equals(this.preemptedNodeCount, nodeStateCounts.preemptedNodeCount) &&
        Objects.equals(this.preparingNodeCount, nodeStateCounts.preparingNodeCount) &&
        Objects.equals(this.runningNodeCount, nodeStateCounts.runningNodeCount) &&
        Objects.equals(this.unusableNodeCount, nodeStateCounts.unusableNodeCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idleNodeCount, leavingNodeCount, preemptedNodeCount, preparingNodeCount, runningNodeCount, unusableNodeCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeStateCounts {\n");
    sb.append("    idleNodeCount: ").append(toIndentedString(idleNodeCount)).append("\n");
    sb.append("    leavingNodeCount: ").append(toIndentedString(leavingNodeCount)).append("\n");
    sb.append("    preemptedNodeCount: ").append(toIndentedString(preemptedNodeCount)).append("\n");
    sb.append("    preparingNodeCount: ").append(toIndentedString(preparingNodeCount)).append("\n");
    sb.append("    runningNodeCount: ").append(toIndentedString(runningNodeCount)).append("\n");
    sb.append("    unusableNodeCount: ").append(toIndentedString(unusableNodeCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("idleNodeCount");
    openapiFields.add("leavingNodeCount");
    openapiFields.add("preemptedNodeCount");
    openapiFields.add("preparingNodeCount");
    openapiFields.add("runningNodeCount");
    openapiFields.add("unusableNodeCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeStateCounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeStateCounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeStateCounts is not found in the empty JSON string", NodeStateCounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeStateCounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeStateCounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeStateCounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeStateCounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeStateCounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeStateCounts.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeStateCounts>() {
           @Override
           public void write(JsonWriter out, NodeStateCounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeStateCounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeStateCounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeStateCounts
   * @throws IOException if the JSON string is invalid with respect to NodeStateCounts
   */
  public static NodeStateCounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeStateCounts.class);
  }

  /**
   * Convert an instance of NodeStateCounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

