/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComputeType from './ComputeType';
import MachineLearningServiceError from './MachineLearningServiceError';

/**
 * The Compute model module.
 * @module model/Compute
 * @version 2019-05-01
 */
class Compute {
    /**
     * Constructs a new <code>Compute</code>.
     * Machine Learning compute object.
     * @alias module:model/Compute
     * @param computeType {module:model/ComputeType} 
     */
    constructor(computeType) { 
        
        Compute.initialize(this, computeType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, computeType) { 
        obj['computeType'] = computeType;
    }

    /**
     * Constructs a <code>Compute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Compute} obj Optional instance to populate.
     * @return {module:model/Compute} The populated <code>Compute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Compute();

            if (data.hasOwnProperty('computeLocation')) {
                obj['computeLocation'] = ApiClient.convertToType(data['computeLocation'], 'String');
            }
            if (data.hasOwnProperty('computeType')) {
                obj['computeType'] = ComputeType.constructFromObject(data['computeType']);
            }
            if (data.hasOwnProperty('createdOn')) {
                obj['createdOn'] = ApiClient.convertToType(data['createdOn'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('isAttachedCompute')) {
                obj['isAttachedCompute'] = ApiClient.convertToType(data['isAttachedCompute'], 'Boolean');
            }
            if (data.hasOwnProperty('modifiedOn')) {
                obj['modifiedOn'] = ApiClient.convertToType(data['modifiedOn'], 'Date');
            }
            if (data.hasOwnProperty('provisioningErrors')) {
                obj['provisioningErrors'] = ApiClient.convertToType(data['provisioningErrors'], [MachineLearningServiceError]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Compute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Compute</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Compute.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['computeLocation'] && !(typeof data['computeLocation'] === 'string' || data['computeLocation'] instanceof String)) {
            throw new Error("Expected the field `computeLocation` to be a primitive type in the JSON string but got " + data['computeLocation']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['provisioningErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['provisioningErrors'])) {
                throw new Error("Expected the field `provisioningErrors` to be an array in the JSON data but got " + data['provisioningErrors']);
            }
            // validate the optional field `provisioningErrors` (array)
            for (const item of data['provisioningErrors']) {
                MachineLearningServiceError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }

        return true;
    }


}

Compute.RequiredProperties = ["computeType"];

/**
 * Location for the underlying compute
 * @member {String} computeLocation
 */
Compute.prototype['computeLocation'] = undefined;

/**
 * @member {module:model/ComputeType} computeType
 */
Compute.prototype['computeType'] = undefined;

/**
 * The date and time when the compute was created.
 * @member {Date} createdOn
 */
Compute.prototype['createdOn'] = undefined;

/**
 * The description of the Machine Learning compute.
 * @member {String} description
 */
Compute.prototype['description'] = undefined;

/**
 * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
 * @member {Boolean} isAttachedCompute
 */
Compute.prototype['isAttachedCompute'] = undefined;

/**
 * The date and time when the compute was last modified.
 * @member {Date} modifiedOn
 */
Compute.prototype['modifiedOn'] = undefined;

/**
 * Errors during provisioning
 * @member {Array.<module:model/MachineLearningServiceError>} provisioningErrors
 */
Compute.prototype['provisioningErrors'] = undefined;

/**
 * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
 * @member {module:model/Compute.ProvisioningStateEnum} provisioningState
 */
Compute.prototype['provisioningState'] = undefined;

/**
 * ARM resource id of the underlying compute
 * @member {String} resourceId
 */
Compute.prototype['resourceId'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
Compute['ProvisioningStateEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};



export default Compute;

