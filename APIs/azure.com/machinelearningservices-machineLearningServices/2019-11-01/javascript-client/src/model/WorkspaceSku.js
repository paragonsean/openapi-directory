/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceSkuLocationInfo from './ResourceSkuLocationInfo';
import Restriction from './Restriction';
import SKUCapability from './SKUCapability';

/**
 * The WorkspaceSku model module.
 * @module model/WorkspaceSku
 * @version 2019-11-01
 */
class WorkspaceSku {
    /**
     * Constructs a new <code>WorkspaceSku</code>.
     * Describes Workspace Sku details and features
     * @alias module:model/WorkspaceSku
     */
    constructor() { 
        
        WorkspaceSku.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkspaceSku</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkspaceSku} obj Optional instance to populate.
     * @return {module:model/WorkspaceSku} The populated <code>WorkspaceSku</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkspaceSku();

            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], [SKUCapability]);
            }
            if (data.hasOwnProperty('locationInfo')) {
                obj['locationInfo'] = ApiClient.convertToType(data['locationInfo'], [ResourceSkuLocationInfo]);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('restrictions')) {
                obj['restrictions'] = ApiClient.convertToType(data['restrictions'], [Restriction]);
            }
            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkspaceSku</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkspaceSku</code>.
     */
    static validateJSON(data) {
        if (data['capabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['capabilities'])) {
                throw new Error("Expected the field `capabilities` to be an array in the JSON data but got " + data['capabilities']);
            }
            // validate the optional field `capabilities` (array)
            for (const item of data['capabilities']) {
                SKUCapability.validateJSON(item);
            };
        }
        if (data['locationInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locationInfo'])) {
                throw new Error("Expected the field `locationInfo` to be an array in the JSON data but got " + data['locationInfo']);
            }
            // validate the optional field `locationInfo` (array)
            for (const item of data['locationInfo']) {
                ResourceSkuLocationInfo.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locations'])) {
            throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        if (data['restrictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['restrictions'])) {
                throw new Error("Expected the field `restrictions` to be an array in the JSON data but got " + data['restrictions']);
            }
            // validate the optional field `restrictions` (array)
            for (const item of data['restrictions']) {
                Restriction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['tier'] && !(typeof data['tier'] === 'string' || data['tier'] instanceof String)) {
            throw new Error("Expected the field `tier` to be a primitive type in the JSON string but got " + data['tier']);
        }

        return true;
    }


}



/**
 * List of features/user capabilities associated with the sku
 * @member {Array.<module:model/SKUCapability>} capabilities
 */
WorkspaceSku.prototype['capabilities'] = undefined;

/**
 * A list of locations and availability zones in those locations where the SKU is available.
 * @member {Array.<module:model/ResourceSkuLocationInfo>} locationInfo
 */
WorkspaceSku.prototype['locationInfo'] = undefined;

/**
 * The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
 * @member {Array.<String>} locations
 */
WorkspaceSku.prototype['locations'] = undefined;

/**
 * @member {String} name
 */
WorkspaceSku.prototype['name'] = undefined;

/**
 * @member {String} resourceType
 */
WorkspaceSku.prototype['resourceType'] = undefined;

/**
 * The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
 * @member {Array.<module:model/Restriction>} restrictions
 */
WorkspaceSku.prototype['restrictions'] = undefined;

/**
 * Sku Tier like Basic or Enterprise
 * @member {String} tier
 */
WorkspaceSku.prototype['tier'] = undefined;






export default WorkspaceSku;

