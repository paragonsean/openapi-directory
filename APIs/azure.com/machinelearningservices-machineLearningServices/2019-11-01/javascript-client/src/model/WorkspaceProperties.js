/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkspaceProperties model module.
 * @module model/WorkspaceProperties
 * @version 2019-11-01
 */
class WorkspaceProperties {
    /**
     * Constructs a new <code>WorkspaceProperties</code>.
     * The properties of a machine learning workspace.
     * @alias module:model/WorkspaceProperties
     */
    constructor() { 
        
        WorkspaceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkspaceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkspaceProperties} obj Optional instance to populate.
     * @return {module:model/WorkspaceProperties} The populated <code>WorkspaceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkspaceProperties();

            if (data.hasOwnProperty('applicationInsights')) {
                obj['applicationInsights'] = ApiClient.convertToType(data['applicationInsights'], 'String');
            }
            if (data.hasOwnProperty('containerRegistry')) {
                obj['containerRegistry'] = ApiClient.convertToType(data['containerRegistry'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discoveryUrl')) {
                obj['discoveryUrl'] = ApiClient.convertToType(data['discoveryUrl'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('keyVault')) {
                obj['keyVault'] = ApiClient.convertToType(data['keyVault'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('storageAccount')) {
                obj['storageAccount'] = ApiClient.convertToType(data['storageAccount'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkspaceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkspaceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['applicationInsights'] && !(typeof data['applicationInsights'] === 'string' || data['applicationInsights'] instanceof String)) {
            throw new Error("Expected the field `applicationInsights` to be a primitive type in the JSON string but got " + data['applicationInsights']);
        }
        // ensure the json data is a string
        if (data['containerRegistry'] && !(typeof data['containerRegistry'] === 'string' || data['containerRegistry'] instanceof String)) {
            throw new Error("Expected the field `containerRegistry` to be a primitive type in the JSON string but got " + data['containerRegistry']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['discoveryUrl'] && !(typeof data['discoveryUrl'] === 'string' || data['discoveryUrl'] instanceof String)) {
            throw new Error("Expected the field `discoveryUrl` to be a primitive type in the JSON string but got " + data['discoveryUrl']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['keyVault'] && !(typeof data['keyVault'] === 'string' || data['keyVault'] instanceof String)) {
            throw new Error("Expected the field `keyVault` to be a primitive type in the JSON string but got " + data['keyVault']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['storageAccount'] && !(typeof data['storageAccount'] === 'string' || data['storageAccount'] instanceof String)) {
            throw new Error("Expected the field `storageAccount` to be a primitive type in the JSON string but got " + data['storageAccount']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}



/**
 * ARM id of the application insights associated with this workspace. This cannot be changed once the workspace has been created
 * @member {String} applicationInsights
 */
WorkspaceProperties.prototype['applicationInsights'] = undefined;

/**
 * ARM id of the container registry associated with this workspace. This cannot be changed once the workspace has been created
 * @member {String} containerRegistry
 */
WorkspaceProperties.prototype['containerRegistry'] = undefined;

/**
 * The creation time of the machine learning workspace in ISO8601 format.
 * @member {Date} creationTime
 */
WorkspaceProperties.prototype['creationTime'] = undefined;

/**
 * The description of this workspace.
 * @member {String} description
 */
WorkspaceProperties.prototype['description'] = undefined;

/**
 * Url for the discovery service to identify regional endpoints for machine learning experimentation services
 * @member {String} discoveryUrl
 */
WorkspaceProperties.prototype['discoveryUrl'] = undefined;

/**
 * The friendly name for this workspace. This name in mutable
 * @member {String} friendlyName
 */
WorkspaceProperties.prototype['friendlyName'] = undefined;

/**
 * ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been created
 * @member {String} keyVault
 */
WorkspaceProperties.prototype['keyVault'] = undefined;

/**
 * The current deployment state of workspace resource. The provisioningState is to indicate states for resource provisioning.
 * @member {module:model/WorkspaceProperties.ProvisioningStateEnum} provisioningState
 */
WorkspaceProperties.prototype['provisioningState'] = undefined;

/**
 * ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been created
 * @member {String} storageAccount
 */
WorkspaceProperties.prototype['storageAccount'] = undefined;

/**
 * The immutable id associated with this workspace.
 * @member {String} workspaceId
 */
WorkspaceProperties.prototype['workspaceId'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
WorkspaceProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};



export default WorkspaceProperties;

