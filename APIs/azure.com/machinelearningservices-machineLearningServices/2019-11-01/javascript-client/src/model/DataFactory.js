/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Compute from './Compute';
import ComputeType from './ComputeType';
import MachineLearningServiceError from './MachineLearningServiceError';

/**
 * The DataFactory model module.
 * @module model/DataFactory
 * @version 2019-11-01
 */
class DataFactory {
    /**
     * Constructs a new <code>DataFactory</code>.
     * A DataFactory compute.
     * @alias module:model/DataFactory
     * @extends module:model/Compute
     * @implements module:model/Compute
     * @param computeType {module:model/ComputeType} 
     */
    constructor(computeType) { 
        Compute.initialize(this, computeType);
        DataFactory.initialize(this, computeType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, computeType) { 
    }

    /**
     * Constructs a <code>DataFactory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataFactory} obj Optional instance to populate.
     * @return {module:model/DataFactory} The populated <code>DataFactory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataFactory();
            Compute.constructFromObject(data, obj);
            Compute.constructFromObject(data, obj);

        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataFactory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataFactory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataFactory.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

DataFactory.RequiredProperties = ["computeType"];


// Implement Compute interface:
/**
 * Location for the underlying compute
 * @member {String} computeLocation
 */
Compute.prototype['computeLocation'] = undefined;
/**
 * @member {module:model/ComputeType} computeType
 */
Compute.prototype['computeType'] = undefined;
/**
 * The date and time when the compute was created.
 * @member {Date} createdOn
 */
Compute.prototype['createdOn'] = undefined;
/**
 * The description of the Machine Learning compute.
 * @member {String} description
 */
Compute.prototype['description'] = undefined;
/**
 * Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
 * @member {Boolean} isAttachedCompute
 */
Compute.prototype['isAttachedCompute'] = undefined;
/**
 * The date and time when the compute was last modified.
 * @member {Date} modifiedOn
 */
Compute.prototype['modifiedOn'] = undefined;
/**
 * Errors during provisioning
 * @member {Array.<module:model/MachineLearningServiceError>} provisioningErrors
 */
Compute.prototype['provisioningErrors'] = undefined;
/**
 * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
 * @member {module:model/Compute.ProvisioningStateEnum} provisioningState
 */
Compute.prototype['provisioningState'] = undefined;
/**
 * ARM resource id of the underlying compute
 * @member {String} resourceId
 */
Compute.prototype['resourceId'] = undefined;




export default DataFactory;

