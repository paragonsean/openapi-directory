# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkspaceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_insights: str=None, container_registry: str=None, creation_time: datetime=None, description: str=None, discovery_url: str=None, friendly_name: str=None, key_vault: str=None, provisioning_state: str=None, storage_account: str=None, workspace_id: str=None):
        """WorkspaceProperties - a model defined in OpenAPI

        :param application_insights: The application_insights of this WorkspaceProperties.
        :param container_registry: The container_registry of this WorkspaceProperties.
        :param creation_time: The creation_time of this WorkspaceProperties.
        :param description: The description of this WorkspaceProperties.
        :param discovery_url: The discovery_url of this WorkspaceProperties.
        :param friendly_name: The friendly_name of this WorkspaceProperties.
        :param key_vault: The key_vault of this WorkspaceProperties.
        :param provisioning_state: The provisioning_state of this WorkspaceProperties.
        :param storage_account: The storage_account of this WorkspaceProperties.
        :param workspace_id: The workspace_id of this WorkspaceProperties.
        """
        self.openapi_types = {
            'application_insights': str,
            'container_registry': str,
            'creation_time': datetime,
            'description': str,
            'discovery_url': str,
            'friendly_name': str,
            'key_vault': str,
            'provisioning_state': str,
            'storage_account': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'application_insights': 'applicationInsights',
            'container_registry': 'containerRegistry',
            'creation_time': 'creationTime',
            'description': 'description',
            'discovery_url': 'discoveryUrl',
            'friendly_name': 'friendlyName',
            'key_vault': 'keyVault',
            'provisioning_state': 'provisioningState',
            'storage_account': 'storageAccount',
            'workspace_id': 'workspaceId'
        }

        self._application_insights = application_insights
        self._container_registry = container_registry
        self._creation_time = creation_time
        self._description = description
        self._discovery_url = discovery_url
        self._friendly_name = friendly_name
        self._key_vault = key_vault
        self._provisioning_state = provisioning_state
        self._storage_account = storage_account
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceProperties of this WorkspaceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_insights(self):
        """Gets the application_insights of this WorkspaceProperties.

        ARM id of the application insights associated with this workspace. This cannot be changed once the workspace has been created

        :return: The application_insights of this WorkspaceProperties.
        :rtype: str
        """
        return self._application_insights

    @application_insights.setter
    def application_insights(self, application_insights):
        """Sets the application_insights of this WorkspaceProperties.

        ARM id of the application insights associated with this workspace. This cannot be changed once the workspace has been created

        :param application_insights: The application_insights of this WorkspaceProperties.
        :type application_insights: str
        """

        self._application_insights = application_insights

    @property
    def container_registry(self):
        """Gets the container_registry of this WorkspaceProperties.

        ARM id of the container registry associated with this workspace. This cannot be changed once the workspace has been created

        :return: The container_registry of this WorkspaceProperties.
        :rtype: str
        """
        return self._container_registry

    @container_registry.setter
    def container_registry(self, container_registry):
        """Sets the container_registry of this WorkspaceProperties.

        ARM id of the container registry associated with this workspace. This cannot be changed once the workspace has been created

        :param container_registry: The container_registry of this WorkspaceProperties.
        :type container_registry: str
        """

        self._container_registry = container_registry

    @property
    def creation_time(self):
        """Gets the creation_time of this WorkspaceProperties.

        The creation time of the machine learning workspace in ISO8601 format.

        :return: The creation_time of this WorkspaceProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this WorkspaceProperties.

        The creation time of the machine learning workspace in ISO8601 format.

        :param creation_time: The creation_time of this WorkspaceProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this WorkspaceProperties.

        The description of this workspace.

        :return: The description of this WorkspaceProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkspaceProperties.

        The description of this workspace.

        :param description: The description of this WorkspaceProperties.
        :type description: str
        """

        self._description = description

    @property
    def discovery_url(self):
        """Gets the discovery_url of this WorkspaceProperties.

        Url for the discovery service to identify regional endpoints for machine learning experimentation services

        :return: The discovery_url of this WorkspaceProperties.
        :rtype: str
        """
        return self._discovery_url

    @discovery_url.setter
    def discovery_url(self, discovery_url):
        """Sets the discovery_url of this WorkspaceProperties.

        Url for the discovery service to identify regional endpoints for machine learning experimentation services

        :param discovery_url: The discovery_url of this WorkspaceProperties.
        :type discovery_url: str
        """

        self._discovery_url = discovery_url

    @property
    def friendly_name(self):
        """Gets the friendly_name of this WorkspaceProperties.

        The friendly name for this workspace. This name in mutable

        :return: The friendly_name of this WorkspaceProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this WorkspaceProperties.

        The friendly name for this workspace. This name in mutable

        :param friendly_name: The friendly_name of this WorkspaceProperties.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def key_vault(self):
        """Gets the key_vault of this WorkspaceProperties.

        ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been created

        :return: The key_vault of this WorkspaceProperties.
        :rtype: str
        """
        return self._key_vault

    @key_vault.setter
    def key_vault(self, key_vault):
        """Sets the key_vault of this WorkspaceProperties.

        ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been created

        :param key_vault: The key_vault of this WorkspaceProperties.
        :type key_vault: str
        """

        self._key_vault = key_vault

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this WorkspaceProperties.

        The current deployment state of workspace resource. The provisioningState is to indicate states for resource provisioning.

        :return: The provisioning_state of this WorkspaceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this WorkspaceProperties.

        The current deployment state of workspace resource. The provisioningState is to indicate states for resource provisioning.

        :param provisioning_state: The provisioning_state of this WorkspaceProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Unknown", "Updating", "Creating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def storage_account(self):
        """Gets the storage_account of this WorkspaceProperties.

        ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been created

        :return: The storage_account of this WorkspaceProperties.
        :rtype: str
        """
        return self._storage_account

    @storage_account.setter
    def storage_account(self, storage_account):
        """Sets the storage_account of this WorkspaceProperties.

        ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been created

        :param storage_account: The storage_account of this WorkspaceProperties.
        :type storage_account: str
        """

        self._storage_account = storage_account

    @property
    def workspace_id(self):
        """Gets the workspace_id of this WorkspaceProperties.

        The immutable id associated with this workspace.

        :return: The workspace_id of this WorkspaceProperties.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this WorkspaceProperties.

        The immutable id associated with this workspace.

        :param workspace_id: The workspace_id of this WorkspaceProperties.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id
