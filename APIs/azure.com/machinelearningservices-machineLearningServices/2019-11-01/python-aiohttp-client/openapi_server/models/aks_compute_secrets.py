# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_secrets import ComputeSecrets
from openapi_server.models.compute_type import ComputeType
from openapi_server import util


class AksComputeSecrets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_type: ComputeType=None, admin_kube_config: str=None, image_pull_secret_name: str=None, user_kube_config: str=None):
        """AksComputeSecrets - a model defined in OpenAPI

        :param compute_type: The compute_type of this AksComputeSecrets.
        :param admin_kube_config: The admin_kube_config of this AksComputeSecrets.
        :param image_pull_secret_name: The image_pull_secret_name of this AksComputeSecrets.
        :param user_kube_config: The user_kube_config of this AksComputeSecrets.
        """
        self.openapi_types = {
            'compute_type': ComputeType,
            'admin_kube_config': str,
            'image_pull_secret_name': str,
            'user_kube_config': str
        }

        self.attribute_map = {
            'compute_type': 'computeType',
            'admin_kube_config': 'adminKubeConfig',
            'image_pull_secret_name': 'imagePullSecretName',
            'user_kube_config': 'userKubeConfig'
        }

        self._compute_type = compute_type
        self._admin_kube_config = admin_kube_config
        self._image_pull_secret_name = image_pull_secret_name
        self._user_kube_config = user_kube_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AksComputeSecrets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AksComputeSecrets of this AksComputeSecrets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_type(self):
        """Gets the compute_type of this AksComputeSecrets.


        :return: The compute_type of this AksComputeSecrets.
        :rtype: ComputeType
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this AksComputeSecrets.


        :param compute_type: The compute_type of this AksComputeSecrets.
        :type compute_type: ComputeType
        """
        if compute_type is None:
            raise ValueError("Invalid value for `compute_type`, must not be `None`")

        self._compute_type = compute_type

    @property
    def admin_kube_config(self):
        """Gets the admin_kube_config of this AksComputeSecrets.

        Content of kubeconfig file that can be used to connect to the Kubernetes cluster.

        :return: The admin_kube_config of this AksComputeSecrets.
        :rtype: str
        """
        return self._admin_kube_config

    @admin_kube_config.setter
    def admin_kube_config(self, admin_kube_config):
        """Sets the admin_kube_config of this AksComputeSecrets.

        Content of kubeconfig file that can be used to connect to the Kubernetes cluster.

        :param admin_kube_config: The admin_kube_config of this AksComputeSecrets.
        :type admin_kube_config: str
        """

        self._admin_kube_config = admin_kube_config

    @property
    def image_pull_secret_name(self):
        """Gets the image_pull_secret_name of this AksComputeSecrets.

        Image registry pull secret.

        :return: The image_pull_secret_name of this AksComputeSecrets.
        :rtype: str
        """
        return self._image_pull_secret_name

    @image_pull_secret_name.setter
    def image_pull_secret_name(self, image_pull_secret_name):
        """Sets the image_pull_secret_name of this AksComputeSecrets.

        Image registry pull secret.

        :param image_pull_secret_name: The image_pull_secret_name of this AksComputeSecrets.
        :type image_pull_secret_name: str
        """

        self._image_pull_secret_name = image_pull_secret_name

    @property
    def user_kube_config(self):
        """Gets the user_kube_config of this AksComputeSecrets.

        Content of kubeconfig file that can be used to connect to the Kubernetes cluster.

        :return: The user_kube_config of this AksComputeSecrets.
        :rtype: str
        """
        return self._user_kube_config

    @user_kube_config.setter
    def user_kube_config(self, user_kube_config):
        """Sets the user_kube_config of this AksComputeSecrets.

        Content of kubeconfig file that can be used to connect to the Kubernetes cluster.

        :param user_kube_config: The user_kube_config of this AksComputeSecrets.
        :type user_kube_config: str
        """

        self._user_kube_config = user_kube_config
