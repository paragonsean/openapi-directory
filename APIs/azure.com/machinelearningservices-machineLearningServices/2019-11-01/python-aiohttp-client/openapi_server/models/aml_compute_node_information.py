# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AmlComputeNodeInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_id: str=None, node_state: str=None, port: float=None, private_ip_address: str=None, public_ip_address: str=None, run_id: str=None):
        """AmlComputeNodeInformation - a model defined in OpenAPI

        :param node_id: The node_id of this AmlComputeNodeInformation.
        :param node_state: The node_state of this AmlComputeNodeInformation.
        :param port: The port of this AmlComputeNodeInformation.
        :param private_ip_address: The private_ip_address of this AmlComputeNodeInformation.
        :param public_ip_address: The public_ip_address of this AmlComputeNodeInformation.
        :param run_id: The run_id of this AmlComputeNodeInformation.
        """
        self.openapi_types = {
            'node_id': str,
            'node_state': str,
            'port': float,
            'private_ip_address': str,
            'public_ip_address': str,
            'run_id': str
        }

        self.attribute_map = {
            'node_id': 'nodeId',
            'node_state': 'nodeState',
            'port': 'port',
            'private_ip_address': 'privateIpAddress',
            'public_ip_address': 'publicIpAddress',
            'run_id': 'runId'
        }

        self._node_id = node_id
        self._node_state = node_state
        self._port = port
        self._private_ip_address = private_ip_address
        self._public_ip_address = public_ip_address
        self._run_id = run_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AmlComputeNodeInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AmlComputeNodeInformation of this AmlComputeNodeInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_id(self):
        """Gets the node_id of this AmlComputeNodeInformation.

        ID of the compute node.

        :return: The node_id of this AmlComputeNodeInformation.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this AmlComputeNodeInformation.

        ID of the compute node.

        :param node_id: The node_id of this AmlComputeNodeInformation.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def node_state(self):
        """Gets the node_state of this AmlComputeNodeInformation.

        State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.

        :return: The node_state of this AmlComputeNodeInformation.
        :rtype: str
        """
        return self._node_state

    @node_state.setter
    def node_state(self, node_state):
        """Sets the node_state of this AmlComputeNodeInformation.

        State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.

        :param node_state: The node_state of this AmlComputeNodeInformation.
        :type node_state: str
        """
        allowed_values = ["idle", "running", "preparing", "unusable", "leaving", "preempted"]  # noqa: E501
        if node_state not in allowed_values:
            raise ValueError(
                "Invalid value for `node_state` ({0}), must be one of {1}"
                .format(node_state, allowed_values)
            )

        self._node_state = node_state

    @property
    def port(self):
        """Gets the port of this AmlComputeNodeInformation.

        SSH port number of the node.

        :return: The port of this AmlComputeNodeInformation.
        :rtype: float
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this AmlComputeNodeInformation.

        SSH port number of the node.

        :param port: The port of this AmlComputeNodeInformation.
        :type port: float
        """

        self._port = port

    @property
    def private_ip_address(self):
        """Gets the private_ip_address of this AmlComputeNodeInformation.

        Private IP address of the compute node.

        :return: The private_ip_address of this AmlComputeNodeInformation.
        :rtype: str
        """
        return self._private_ip_address

    @private_ip_address.setter
    def private_ip_address(self, private_ip_address):
        """Sets the private_ip_address of this AmlComputeNodeInformation.

        Private IP address of the compute node.

        :param private_ip_address: The private_ip_address of this AmlComputeNodeInformation.
        :type private_ip_address: str
        """

        self._private_ip_address = private_ip_address

    @property
    def public_ip_address(self):
        """Gets the public_ip_address of this AmlComputeNodeInformation.

        Public IP address of the compute node.

        :return: The public_ip_address of this AmlComputeNodeInformation.
        :rtype: str
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address):
        """Sets the public_ip_address of this AmlComputeNodeInformation.

        Public IP address of the compute node.

        :param public_ip_address: The public_ip_address of this AmlComputeNodeInformation.
        :type public_ip_address: str
        """

        self._public_ip_address = public_ip_address

    @property
    def run_id(self):
        """Gets the run_id of this AmlComputeNodeInformation.

        ID of the Experiment running on the node, if any else null.

        :return: The run_id of this AmlComputeNodeInformation.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this AmlComputeNodeInformation.

        ID of the Experiment running on the node, if any else null.

        :param run_id: The run_id of this AmlComputeNodeInformation.
        :type run_id: str
        """

        self._run_id = run_id
