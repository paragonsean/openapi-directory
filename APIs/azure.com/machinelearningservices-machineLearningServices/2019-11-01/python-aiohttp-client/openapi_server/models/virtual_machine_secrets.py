# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_secrets import ComputeSecrets
from openapi_server.models.compute_type import ComputeType
from openapi_server.models.virtual_machine_ssh_credentials import VirtualMachineSshCredentials
from openapi_server import util


class VirtualMachineSecrets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_type: ComputeType=None, administrator_account: VirtualMachineSshCredentials=None):
        """VirtualMachineSecrets - a model defined in OpenAPI

        :param compute_type: The compute_type of this VirtualMachineSecrets.
        :param administrator_account: The administrator_account of this VirtualMachineSecrets.
        """
        self.openapi_types = {
            'compute_type': ComputeType,
            'administrator_account': VirtualMachineSshCredentials
        }

        self.attribute_map = {
            'compute_type': 'computeType',
            'administrator_account': 'administratorAccount'
        }

        self._compute_type = compute_type
        self._administrator_account = administrator_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineSecrets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineSecrets of this VirtualMachineSecrets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_type(self):
        """Gets the compute_type of this VirtualMachineSecrets.


        :return: The compute_type of this VirtualMachineSecrets.
        :rtype: ComputeType
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this VirtualMachineSecrets.


        :param compute_type: The compute_type of this VirtualMachineSecrets.
        :type compute_type: ComputeType
        """
        if compute_type is None:
            raise ValueError("Invalid value for `compute_type`, must not be `None`")

        self._compute_type = compute_type

    @property
    def administrator_account(self):
        """Gets the administrator_account of this VirtualMachineSecrets.


        :return: The administrator_account of this VirtualMachineSecrets.
        :rtype: VirtualMachineSshCredentials
        """
        return self._administrator_account

    @administrator_account.setter
    def administrator_account(self, administrator_account):
        """Sets the administrator_account of this VirtualMachineSecrets.


        :param administrator_account: The administrator_account of this VirtualMachineSecrets.
        :type administrator_account: VirtualMachineSshCredentials
        """

        self._administrator_account = administrator_account
