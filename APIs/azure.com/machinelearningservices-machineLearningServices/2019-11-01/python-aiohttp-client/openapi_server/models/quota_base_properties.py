# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QuotaBaseProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, limit: int=None, type: str=None, unit: str=None):
        """QuotaBaseProperties - a model defined in OpenAPI

        :param id: The id of this QuotaBaseProperties.
        :param limit: The limit of this QuotaBaseProperties.
        :param type: The type of this QuotaBaseProperties.
        :param unit: The unit of this QuotaBaseProperties.
        """
        self.openapi_types = {
            'id': str,
            'limit': int,
            'type': str,
            'unit': str
        }

        self.attribute_map = {
            'id': 'id',
            'limit': 'limit',
            'type': 'type',
            'unit': 'unit'
        }

        self._id = id
        self._limit = limit
        self._type = type
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuotaBaseProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuotaBaseProperties of this QuotaBaseProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this QuotaBaseProperties.

        Specifies the resource ID.

        :return: The id of this QuotaBaseProperties.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuotaBaseProperties.

        Specifies the resource ID.

        :param id: The id of this QuotaBaseProperties.
        :type id: str
        """

        self._id = id

    @property
    def limit(self):
        """Gets the limit of this QuotaBaseProperties.

        The maximum permitted quota of the resource.

        :return: The limit of this QuotaBaseProperties.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QuotaBaseProperties.

        The maximum permitted quota of the resource.

        :param limit: The limit of this QuotaBaseProperties.
        :type limit: int
        """

        self._limit = limit

    @property
    def type(self):
        """Gets the type of this QuotaBaseProperties.

        Specifies the resource type.

        :return: The type of this QuotaBaseProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QuotaBaseProperties.

        Specifies the resource type.

        :param type: The type of this QuotaBaseProperties.
        :type type: str
        """

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this QuotaBaseProperties.

        An enum describing the unit of quota measurement.

        :return: The unit of this QuotaBaseProperties.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this QuotaBaseProperties.

        An enum describing the unit of quota measurement.

        :param unit: The unit of this QuotaBaseProperties.
        :type unit: str
        """
        allowed_values = ["Count"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
