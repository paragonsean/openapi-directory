# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_sku_location_info import ResourceSkuLocationInfo
from openapi_server.models.restriction import Restriction
from openapi_server.models.sku_capability import SKUCapability
from openapi_server import util


class WorkspaceSku(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[SKUCapability]=None, location_info: List[ResourceSkuLocationInfo]=None, locations: List[str]=None, name: str=None, resource_type: str=None, restrictions: List[Restriction]=None, tier: str=None):
        """WorkspaceSku - a model defined in OpenAPI

        :param capabilities: The capabilities of this WorkspaceSku.
        :param location_info: The location_info of this WorkspaceSku.
        :param locations: The locations of this WorkspaceSku.
        :param name: The name of this WorkspaceSku.
        :param resource_type: The resource_type of this WorkspaceSku.
        :param restrictions: The restrictions of this WorkspaceSku.
        :param tier: The tier of this WorkspaceSku.
        """
        self.openapi_types = {
            'capabilities': List[SKUCapability],
            'location_info': List[ResourceSkuLocationInfo],
            'locations': List[str],
            'name': str,
            'resource_type': str,
            'restrictions': List[Restriction],
            'tier': str
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'location_info': 'locationInfo',
            'locations': 'locations',
            'name': 'name',
            'resource_type': 'resourceType',
            'restrictions': 'restrictions',
            'tier': 'tier'
        }

        self._capabilities = capabilities
        self._location_info = location_info
        self._locations = locations
        self._name = name
        self._resource_type = resource_type
        self._restrictions = restrictions
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceSku':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceSku of this WorkspaceSku.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this WorkspaceSku.

        List of features/user capabilities associated with the sku

        :return: The capabilities of this WorkspaceSku.
        :rtype: List[SKUCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this WorkspaceSku.

        List of features/user capabilities associated with the sku

        :param capabilities: The capabilities of this WorkspaceSku.
        :type capabilities: List[SKUCapability]
        """

        self._capabilities = capabilities

    @property
    def location_info(self):
        """Gets the location_info of this WorkspaceSku.

        A list of locations and availability zones in those locations where the SKU is available.

        :return: The location_info of this WorkspaceSku.
        :rtype: List[ResourceSkuLocationInfo]
        """
        return self._location_info

    @location_info.setter
    def location_info(self, location_info):
        """Sets the location_info of this WorkspaceSku.

        A list of locations and availability zones in those locations where the SKU is available.

        :param location_info: The location_info of this WorkspaceSku.
        :type location_info: List[ResourceSkuLocationInfo]
        """

        self._location_info = location_info

    @property
    def locations(self):
        """Gets the locations of this WorkspaceSku.

        The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).

        :return: The locations of this WorkspaceSku.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this WorkspaceSku.

        The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).

        :param locations: The locations of this WorkspaceSku.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this WorkspaceSku.


        :return: The name of this WorkspaceSku.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkspaceSku.


        :param name: The name of this WorkspaceSku.
        :type name: str
        """

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this WorkspaceSku.


        :return: The resource_type of this WorkspaceSku.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this WorkspaceSku.


        :param resource_type: The resource_type of this WorkspaceSku.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def restrictions(self):
        """Gets the restrictions of this WorkspaceSku.

        The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.

        :return: The restrictions of this WorkspaceSku.
        :rtype: List[Restriction]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this WorkspaceSku.

        The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.

        :param restrictions: The restrictions of this WorkspaceSku.
        :type restrictions: List[Restriction]
        """

        self._restrictions = restrictions

    @property
    def tier(self):
        """Gets the tier of this WorkspaceSku.

        Sku Tier like Basic or Enterprise

        :return: The tier of this WorkspaceSku.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this WorkspaceSku.

        Sku Tier like Basic or Enterprise

        :param tier: The tier of this WorkspaceSku.
        :type tier: str
        """

        self._tier = tier
