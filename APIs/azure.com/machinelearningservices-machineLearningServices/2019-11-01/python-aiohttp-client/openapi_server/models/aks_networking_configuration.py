# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AksNetworkingConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_service_ip: str=None, docker_bridge_cidr: str=None, service_cidr: str=None, subnet_id: str=None):
        """AksNetworkingConfiguration - a model defined in OpenAPI

        :param dns_service_ip: The dns_service_ip of this AksNetworkingConfiguration.
        :param docker_bridge_cidr: The docker_bridge_cidr of this AksNetworkingConfiguration.
        :param service_cidr: The service_cidr of this AksNetworkingConfiguration.
        :param subnet_id: The subnet_id of this AksNetworkingConfiguration.
        """
        self.openapi_types = {
            'dns_service_ip': str,
            'docker_bridge_cidr': str,
            'service_cidr': str,
            'subnet_id': str
        }

        self.attribute_map = {
            'dns_service_ip': 'dnsServiceIP',
            'docker_bridge_cidr': 'dockerBridgeCidr',
            'service_cidr': 'serviceCidr',
            'subnet_id': 'subnetId'
        }

        self._dns_service_ip = dns_service_ip
        self._docker_bridge_cidr = docker_bridge_cidr
        self._service_cidr = service_cidr
        self._subnet_id = subnet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AksNetworkingConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AksNetworkingConfiguration of this AksNetworkingConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_service_ip(self):
        """Gets the dns_service_ip of this AksNetworkingConfiguration.

        An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.

        :return: The dns_service_ip of this AksNetworkingConfiguration.
        :rtype: str
        """
        return self._dns_service_ip

    @dns_service_ip.setter
    def dns_service_ip(self, dns_service_ip):
        """Sets the dns_service_ip of this AksNetworkingConfiguration.

        An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.

        :param dns_service_ip: The dns_service_ip of this AksNetworkingConfiguration.
        :type dns_service_ip: str
        """
        if dns_service_ip is not None and not re.search(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', dns_service_ip):
            raise ValueError("Invalid value for `dns_service_ip`, must be a follow pattern or equal to `/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/`")

        self._dns_service_ip = dns_service_ip

    @property
    def docker_bridge_cidr(self):
        """Gets the docker_bridge_cidr of this AksNetworkingConfiguration.

        A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.

        :return: The docker_bridge_cidr of this AksNetworkingConfiguration.
        :rtype: str
        """
        return self._docker_bridge_cidr

    @docker_bridge_cidr.setter
    def docker_bridge_cidr(self, docker_bridge_cidr):
        """Sets the docker_bridge_cidr of this AksNetworkingConfiguration.

        A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.

        :param docker_bridge_cidr: The docker_bridge_cidr of this AksNetworkingConfiguration.
        :type docker_bridge_cidr: str
        """
        if docker_bridge_cidr is not None and not re.search(r'^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$', docker_bridge_cidr):
            raise ValueError("Invalid value for `docker_bridge_cidr`, must be a follow pattern or equal to `/^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/`")

        self._docker_bridge_cidr = docker_bridge_cidr

    @property
    def service_cidr(self):
        """Gets the service_cidr of this AksNetworkingConfiguration.

        A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.

        :return: The service_cidr of this AksNetworkingConfiguration.
        :rtype: str
        """
        return self._service_cidr

    @service_cidr.setter
    def service_cidr(self, service_cidr):
        """Sets the service_cidr of this AksNetworkingConfiguration.

        A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.

        :param service_cidr: The service_cidr of this AksNetworkingConfiguration.
        :type service_cidr: str
        """
        if service_cidr is not None and not re.search(r'^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$', service_cidr):
            raise ValueError("Invalid value for `service_cidr`, must be a follow pattern or equal to `/^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/`")

        self._service_cidr = service_cidr

    @property
    def subnet_id(self):
        """Gets the subnet_id of this AksNetworkingConfiguration.

        Virtual network subnet resource ID the compute nodes belong to

        :return: The subnet_id of this AksNetworkingConfiguration.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this AksNetworkingConfiguration.

        Virtual network subnet resource ID the compute nodes belong to

        :param subnet_id: The subnet_id of this AksNetworkingConfiguration.
        :type subnet_id: str
        """

        self._subnet_id = subnet_id
