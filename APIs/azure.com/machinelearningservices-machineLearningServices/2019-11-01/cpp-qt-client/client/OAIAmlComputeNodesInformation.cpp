/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmlComputeNodesInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmlComputeNodesInformation::OAIAmlComputeNodesInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmlComputeNodesInformation::OAIAmlComputeNodesInformation() {
    this->initializeModel();
}

OAIAmlComputeNodesInformation::~OAIAmlComputeNodesInformation() {}

void OAIAmlComputeNodesInformation::initializeModel() {

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;
}

void OAIAmlComputeNodesInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmlComputeNodesInformation::fromJsonObject(QJsonObject json) {

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("computeType")]);
    m_compute_type_isSet = !json[QString("computeType")].isNull() && m_compute_type_isValid;

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;
}

QString OAIAmlComputeNodesInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmlComputeNodesInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_type.isSet()) {
        obj.insert(QString("computeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    return obj;
}

OAIComputeType OAIAmlComputeNodesInformation::getComputeType() const {
    return m_compute_type;
}
void OAIAmlComputeNodesInformation::setComputeType(const OAIComputeType &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAIAmlComputeNodesInformation::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAIAmlComputeNodesInformation::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

QString OAIAmlComputeNodesInformation::getNextLink() const {
    return m_next_link;
}
void OAIAmlComputeNodesInformation::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIAmlComputeNodesInformation::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIAmlComputeNodesInformation::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QList<OAIAmlComputeNodeInformation> OAIAmlComputeNodesInformation::getNodes() const {
    return m_nodes;
}
void OAIAmlComputeNodesInformation::setNodes(const QList<OAIAmlComputeNodeInformation> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIAmlComputeNodesInformation::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIAmlComputeNodesInformation::is_nodes_Valid() const{
    return m_nodes_isValid;
}

bool OAIAmlComputeNodesInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmlComputeNodesInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compute_type_isValid && true;
}

} // namespace OpenAPI
