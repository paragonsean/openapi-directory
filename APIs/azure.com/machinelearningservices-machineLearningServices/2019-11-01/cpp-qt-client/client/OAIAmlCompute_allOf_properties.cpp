/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmlCompute_allOf_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmlCompute_allOf_properties::OAIAmlCompute_allOf_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmlCompute_allOf_properties::OAIAmlCompute_allOf_properties() {
    this->initializeModel();
}

OAIAmlCompute_allOf_properties::~OAIAmlCompute_allOf_properties() {}

void OAIAmlCompute_allOf_properties::initializeModel() {

    m_allocation_state_isSet = false;
    m_allocation_state_isValid = false;

    m_allocation_state_transition_time_isSet = false;
    m_allocation_state_transition_time_isValid = false;

    m_current_node_count_isSet = false;
    m_current_node_count_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_node_state_counts_isSet = false;
    m_node_state_counts_isValid = false;

    m_remote_login_port_public_access_isSet = false;
    m_remote_login_port_public_access_isValid = false;

    m_scale_settings_isSet = false;
    m_scale_settings_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;

    m_target_node_count_isSet = false;
    m_target_node_count_isValid = false;

    m_user_account_credentials_isSet = false;
    m_user_account_credentials_isValid = false;

    m_vm_priority_isSet = false;
    m_vm_priority_isValid = false;

    m_vm_size_isSet = false;
    m_vm_size_isValid = false;
}

void OAIAmlCompute_allOf_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmlCompute_allOf_properties::fromJsonObject(QJsonObject json) {

    m_allocation_state_isValid = ::OpenAPI::fromJsonValue(m_allocation_state, json[QString("allocationState")]);
    m_allocation_state_isSet = !json[QString("allocationState")].isNull() && m_allocation_state_isValid;

    m_allocation_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_allocation_state_transition_time, json[QString("allocationStateTransitionTime")]);
    m_allocation_state_transition_time_isSet = !json[QString("allocationStateTransitionTime")].isNull() && m_allocation_state_transition_time_isValid;

    m_current_node_count_isValid = ::OpenAPI::fromJsonValue(m_current_node_count, json[QString("currentNodeCount")]);
    m_current_node_count_isSet = !json[QString("currentNodeCount")].isNull() && m_current_node_count_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_node_state_counts_isValid = ::OpenAPI::fromJsonValue(m_node_state_counts, json[QString("nodeStateCounts")]);
    m_node_state_counts_isSet = !json[QString("nodeStateCounts")].isNull() && m_node_state_counts_isValid;

    m_remote_login_port_public_access_isValid = ::OpenAPI::fromJsonValue(m_remote_login_port_public_access, json[QString("remoteLoginPortPublicAccess")]);
    m_remote_login_port_public_access_isSet = !json[QString("remoteLoginPortPublicAccess")].isNull() && m_remote_login_port_public_access_isValid;

    m_scale_settings_isValid = ::OpenAPI::fromJsonValue(m_scale_settings, json[QString("scaleSettings")]);
    m_scale_settings_isSet = !json[QString("scaleSettings")].isNull() && m_scale_settings_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;

    m_target_node_count_isValid = ::OpenAPI::fromJsonValue(m_target_node_count, json[QString("targetNodeCount")]);
    m_target_node_count_isSet = !json[QString("targetNodeCount")].isNull() && m_target_node_count_isValid;

    m_user_account_credentials_isValid = ::OpenAPI::fromJsonValue(m_user_account_credentials, json[QString("userAccountCredentials")]);
    m_user_account_credentials_isSet = !json[QString("userAccountCredentials")].isNull() && m_user_account_credentials_isValid;

    m_vm_priority_isValid = ::OpenAPI::fromJsonValue(m_vm_priority, json[QString("vmPriority")]);
    m_vm_priority_isSet = !json[QString("vmPriority")].isNull() && m_vm_priority_isValid;

    m_vm_size_isValid = ::OpenAPI::fromJsonValue(m_vm_size, json[QString("vmSize")]);
    m_vm_size_isSet = !json[QString("vmSize")].isNull() && m_vm_size_isValid;
}

QString OAIAmlCompute_allOf_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmlCompute_allOf_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_state_isSet) {
        obj.insert(QString("allocationState"), ::OpenAPI::toJsonValue(m_allocation_state));
    }
    if (m_allocation_state_transition_time_isSet) {
        obj.insert(QString("allocationStateTransitionTime"), ::OpenAPI::toJsonValue(m_allocation_state_transition_time));
    }
    if (m_current_node_count_isSet) {
        obj.insert(QString("currentNodeCount"), ::OpenAPI::toJsonValue(m_current_node_count));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_node_state_counts.isSet()) {
        obj.insert(QString("nodeStateCounts"), ::OpenAPI::toJsonValue(m_node_state_counts));
    }
    if (m_remote_login_port_public_access_isSet) {
        obj.insert(QString("remoteLoginPortPublicAccess"), ::OpenAPI::toJsonValue(m_remote_login_port_public_access));
    }
    if (m_scale_settings.isSet()) {
        obj.insert(QString("scaleSettings"), ::OpenAPI::toJsonValue(m_scale_settings));
    }
    if (m_subnet.isSet()) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    if (m_target_node_count_isSet) {
        obj.insert(QString("targetNodeCount"), ::OpenAPI::toJsonValue(m_target_node_count));
    }
    if (m_user_account_credentials.isSet()) {
        obj.insert(QString("userAccountCredentials"), ::OpenAPI::toJsonValue(m_user_account_credentials));
    }
    if (m_vm_priority_isSet) {
        obj.insert(QString("vmPriority"), ::OpenAPI::toJsonValue(m_vm_priority));
    }
    if (m_vm_size_isSet) {
        obj.insert(QString("vmSize"), ::OpenAPI::toJsonValue(m_vm_size));
    }
    return obj;
}

QString OAIAmlCompute_allOf_properties::getAllocationState() const {
    return m_allocation_state;
}
void OAIAmlCompute_allOf_properties::setAllocationState(const QString &allocation_state) {
    m_allocation_state = allocation_state;
    m_allocation_state_isSet = true;
}

bool OAIAmlCompute_allOf_properties::is_allocation_state_Set() const{
    return m_allocation_state_isSet;
}

bool OAIAmlCompute_allOf_properties::is_allocation_state_Valid() const{
    return m_allocation_state_isValid;
}

QDateTime OAIAmlCompute_allOf_properties::getAllocationStateTransitionTime() const {
    return m_allocation_state_transition_time;
}
void OAIAmlCompute_allOf_properties::setAllocationStateTransitionTime(const QDateTime &allocation_state_transition_time) {
    m_allocation_state_transition_time = allocation_state_transition_time;
    m_allocation_state_transition_time_isSet = true;
}

bool OAIAmlCompute_allOf_properties::is_allocation_state_transition_time_Set() const{
    return m_allocation_state_transition_time_isSet;
}

bool OAIAmlCompute_allOf_properties::is_allocation_state_transition_time_Valid() const{
    return m_allocation_state_transition_time_isValid;
}

qint32 OAIAmlCompute_allOf_properties::getCurrentNodeCount() const {
    return m_current_node_count;
}
void OAIAmlCompute_allOf_properties::setCurrentNodeCount(const qint32 &current_node_count) {
    m_current_node_count = current_node_count;
    m_current_node_count_isSet = true;
}

bool OAIAmlCompute_allOf_properties::is_current_node_count_Set() const{
    return m_current_node_count_isSet;
}

bool OAIAmlCompute_allOf_properties::is_current_node_count_Valid() const{
    return m_current_node_count_isValid;
}

QList<OAIMachineLearningServiceError> OAIAmlCompute_allOf_properties::getErrors() const {
    return m_errors;
}
void OAIAmlCompute_allOf_properties::setErrors(const QList<OAIMachineLearningServiceError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIAmlCompute_allOf_properties::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIAmlCompute_allOf_properties::is_errors_Valid() const{
    return m_errors_isValid;
}

OAINodeStateCounts OAIAmlCompute_allOf_properties::getNodeStateCounts() const {
    return m_node_state_counts;
}
void OAIAmlCompute_allOf_properties::setNodeStateCounts(const OAINodeStateCounts &node_state_counts) {
    m_node_state_counts = node_state_counts;
    m_node_state_counts_isSet = true;
}

bool OAIAmlCompute_allOf_properties::is_node_state_counts_Set() const{
    return m_node_state_counts_isSet;
}

bool OAIAmlCompute_allOf_properties::is_node_state_counts_Valid() const{
    return m_node_state_counts_isValid;
}

QString OAIAmlCompute_allOf_properties::getRemoteLoginPortPublicAccess() const {
    return m_remote_login_port_public_access;
}
void OAIAmlCompute_allOf_properties::setRemoteLoginPortPublicAccess(const QString &remote_login_port_public_access) {
    m_remote_login_port_public_access = remote_login_port_public_access;
    m_remote_login_port_public_access_isSet = true;
}

bool OAIAmlCompute_allOf_properties::is_remote_login_port_public_access_Set() const{
    return m_remote_login_port_public_access_isSet;
}

bool OAIAmlCompute_allOf_properties::is_remote_login_port_public_access_Valid() const{
    return m_remote_login_port_public_access_isValid;
}

OAIScaleSettings OAIAmlCompute_allOf_properties::getScaleSettings() const {
    return m_scale_settings;
}
void OAIAmlCompute_allOf_properties::setScaleSettings(const OAIScaleSettings &scale_settings) {
    m_scale_settings = scale_settings;
    m_scale_settings_isSet = true;
}

bool OAIAmlCompute_allOf_properties::is_scale_settings_Set() const{
    return m_scale_settings_isSet;
}

bool OAIAmlCompute_allOf_properties::is_scale_settings_Valid() const{
    return m_scale_settings_isValid;
}

OAIResourceId OAIAmlCompute_allOf_properties::getSubnet() const {
    return m_subnet;
}
void OAIAmlCompute_allOf_properties::setSubnet(const OAIResourceId &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIAmlCompute_allOf_properties::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIAmlCompute_allOf_properties::is_subnet_Valid() const{
    return m_subnet_isValid;
}

qint32 OAIAmlCompute_allOf_properties::getTargetNodeCount() const {
    return m_target_node_count;
}
void OAIAmlCompute_allOf_properties::setTargetNodeCount(const qint32 &target_node_count) {
    m_target_node_count = target_node_count;
    m_target_node_count_isSet = true;
}

bool OAIAmlCompute_allOf_properties::is_target_node_count_Set() const{
    return m_target_node_count_isSet;
}

bool OAIAmlCompute_allOf_properties::is_target_node_count_Valid() const{
    return m_target_node_count_isValid;
}

OAIUserAccountCredentials OAIAmlCompute_allOf_properties::getUserAccountCredentials() const {
    return m_user_account_credentials;
}
void OAIAmlCompute_allOf_properties::setUserAccountCredentials(const OAIUserAccountCredentials &user_account_credentials) {
    m_user_account_credentials = user_account_credentials;
    m_user_account_credentials_isSet = true;
}

bool OAIAmlCompute_allOf_properties::is_user_account_credentials_Set() const{
    return m_user_account_credentials_isSet;
}

bool OAIAmlCompute_allOf_properties::is_user_account_credentials_Valid() const{
    return m_user_account_credentials_isValid;
}

QString OAIAmlCompute_allOf_properties::getVmPriority() const {
    return m_vm_priority;
}
void OAIAmlCompute_allOf_properties::setVmPriority(const QString &vm_priority) {
    m_vm_priority = vm_priority;
    m_vm_priority_isSet = true;
}

bool OAIAmlCompute_allOf_properties::is_vm_priority_Set() const{
    return m_vm_priority_isSet;
}

bool OAIAmlCompute_allOf_properties::is_vm_priority_Valid() const{
    return m_vm_priority_isValid;
}

QString OAIAmlCompute_allOf_properties::getVmSize() const {
    return m_vm_size;
}
void OAIAmlCompute_allOf_properties::setVmSize(const QString &vm_size) {
    m_vm_size = vm_size;
    m_vm_size_isSet = true;
}

bool OAIAmlCompute_allOf_properties::is_vm_size_Set() const{
    return m_vm_size_isSet;
}

bool OAIAmlCompute_allOf_properties::is_vm_size_Valid() const{
    return m_vm_size_isValid;
}

bool OAIAmlCompute_allOf_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocation_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_state_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_login_port_public_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_account_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmlCompute_allOf_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
