/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAksNetworkingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAksNetworkingConfiguration::OAIAksNetworkingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAksNetworkingConfiguration::OAIAksNetworkingConfiguration() {
    this->initializeModel();
}

OAIAksNetworkingConfiguration::~OAIAksNetworkingConfiguration() {}

void OAIAksNetworkingConfiguration::initializeModel() {

    m_dns_service_ip_isSet = false;
    m_dns_service_ip_isValid = false;

    m_docker_bridge_cidr_isSet = false;
    m_docker_bridge_cidr_isValid = false;

    m_service_cidr_isSet = false;
    m_service_cidr_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;
}

void OAIAksNetworkingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAksNetworkingConfiguration::fromJsonObject(QJsonObject json) {

    m_dns_service_ip_isValid = ::OpenAPI::fromJsonValue(m_dns_service_ip, json[QString("dnsServiceIP")]);
    m_dns_service_ip_isSet = !json[QString("dnsServiceIP")].isNull() && m_dns_service_ip_isValid;

    m_docker_bridge_cidr_isValid = ::OpenAPI::fromJsonValue(m_docker_bridge_cidr, json[QString("dockerBridgeCidr")]);
    m_docker_bridge_cidr_isSet = !json[QString("dockerBridgeCidr")].isNull() && m_docker_bridge_cidr_isValid;

    m_service_cidr_isValid = ::OpenAPI::fromJsonValue(m_service_cidr, json[QString("serviceCidr")]);
    m_service_cidr_isSet = !json[QString("serviceCidr")].isNull() && m_service_cidr_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;
}

QString OAIAksNetworkingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAksNetworkingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_service_ip_isSet) {
        obj.insert(QString("dnsServiceIP"), ::OpenAPI::toJsonValue(m_dns_service_ip));
    }
    if (m_docker_bridge_cidr_isSet) {
        obj.insert(QString("dockerBridgeCidr"), ::OpenAPI::toJsonValue(m_docker_bridge_cidr));
    }
    if (m_service_cidr_isSet) {
        obj.insert(QString("serviceCidr"), ::OpenAPI::toJsonValue(m_service_cidr));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    return obj;
}

QString OAIAksNetworkingConfiguration::getDnsServiceIp() const {
    return m_dns_service_ip;
}
void OAIAksNetworkingConfiguration::setDnsServiceIp(const QString &dns_service_ip) {
    m_dns_service_ip = dns_service_ip;
    m_dns_service_ip_isSet = true;
}

bool OAIAksNetworkingConfiguration::is_dns_service_ip_Set() const{
    return m_dns_service_ip_isSet;
}

bool OAIAksNetworkingConfiguration::is_dns_service_ip_Valid() const{
    return m_dns_service_ip_isValid;
}

QString OAIAksNetworkingConfiguration::getDockerBridgeCidr() const {
    return m_docker_bridge_cidr;
}
void OAIAksNetworkingConfiguration::setDockerBridgeCidr(const QString &docker_bridge_cidr) {
    m_docker_bridge_cidr = docker_bridge_cidr;
    m_docker_bridge_cidr_isSet = true;
}

bool OAIAksNetworkingConfiguration::is_docker_bridge_cidr_Set() const{
    return m_docker_bridge_cidr_isSet;
}

bool OAIAksNetworkingConfiguration::is_docker_bridge_cidr_Valid() const{
    return m_docker_bridge_cidr_isValid;
}

QString OAIAksNetworkingConfiguration::getServiceCidr() const {
    return m_service_cidr;
}
void OAIAksNetworkingConfiguration::setServiceCidr(const QString &service_cidr) {
    m_service_cidr = service_cidr;
    m_service_cidr_isSet = true;
}

bool OAIAksNetworkingConfiguration::is_service_cidr_Set() const{
    return m_service_cidr_isSet;
}

bool OAIAksNetworkingConfiguration::is_service_cidr_Valid() const{
    return m_service_cidr_isValid;
}

QString OAIAksNetworkingConfiguration::getSubnetId() const {
    return m_subnet_id;
}
void OAIAksNetworkingConfiguration::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIAksNetworkingConfiguration::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIAksNetworkingConfiguration::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

bool OAIAksNetworkingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_service_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_bridge_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAksNetworkingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
