/*
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceSkuLocationInfo;
import org.openapitools.client.model.Restriction;
import org.openapitools.client.model.SKUCapability;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes Workspace Sku details and features
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:00.479191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkspaceSku {
  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<SKUCapability> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION_INFO = "locationInfo";
  @SerializedName(SERIALIZED_NAME_LOCATION_INFO)
  private List<ResourceSkuLocationInfo> locationInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<String> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private List<Restriction> restrictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private String tier;

  public WorkspaceSku() {
  }

  public WorkspaceSku(
     List<SKUCapability> capabilities, 
     List<ResourceSkuLocationInfo> locationInfo, 
     List<String> locations, 
     String name, 
     String resourceType, 
     String tier
  ) {
    this();
    this.capabilities = capabilities;
    this.locationInfo = locationInfo;
    this.locations = locations;
    this.name = name;
    this.resourceType = resourceType;
    this.tier = tier;
  }

  /**
   * List of features/user capabilities associated with the sku
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<SKUCapability> getCapabilities() {
    return capabilities;
  }



  /**
   * A list of locations and availability zones in those locations where the SKU is available.
   * @return locationInfo
   */
  @javax.annotation.Nullable
  public List<ResourceSkuLocationInfo> getLocationInfo() {
    return locationInfo;
  }



  /**
   * The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
   * @return locations
   */
  @javax.annotation.Nullable
  public List<String> getLocations() {
    return locations;
  }



  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }



  public WorkspaceSku restrictions(List<Restriction> restrictions) {
    this.restrictions = restrictions;
    return this;
  }

  public WorkspaceSku addRestrictionsItem(Restriction restrictionsItem) {
    if (this.restrictions == null) {
      this.restrictions = new ArrayList<>();
    }
    this.restrictions.add(restrictionsItem);
    return this;
  }

  /**
   * The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
   * @return restrictions
   */
  @javax.annotation.Nullable
  public List<Restriction> getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(List<Restriction> restrictions) {
    this.restrictions = restrictions;
  }


  /**
   * Sku Tier like Basic or Enterprise
   * @return tier
   */
  @javax.annotation.Nullable
  public String getTier() {
    return tier;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkspaceSku workspaceSku = (WorkspaceSku) o;
    return Objects.equals(this.capabilities, workspaceSku.capabilities) &&
        Objects.equals(this.locationInfo, workspaceSku.locationInfo) &&
        Objects.equals(this.locations, workspaceSku.locations) &&
        Objects.equals(this.name, workspaceSku.name) &&
        Objects.equals(this.resourceType, workspaceSku.resourceType) &&
        Objects.equals(this.restrictions, workspaceSku.restrictions) &&
        Objects.equals(this.tier, workspaceSku.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilities, locationInfo, locations, name, resourceType, restrictions, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkspaceSku {\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    locationInfo: ").append(toIndentedString(locationInfo)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilities");
    openapiFields.add("locationInfo");
    openapiFields.add("locations");
    openapiFields.add("name");
    openapiFields.add("resourceType");
    openapiFields.add("restrictions");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkspaceSku
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkspaceSku.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkspaceSku is not found in the empty JSON string", WorkspaceSku.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkspaceSku.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkspaceSku` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull()) {
        JsonArray jsonArraycapabilities = jsonObj.getAsJsonArray("capabilities");
        if (jsonArraycapabilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("capabilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
          }

          // validate the optional field `capabilities` (array)
          for (int i = 0; i < jsonArraycapabilities.size(); i++) {
            SKUCapability.validateJsonElement(jsonArraycapabilities.get(i));
          };
        }
      }
      if (jsonObj.get("locationInfo") != null && !jsonObj.get("locationInfo").isJsonNull()) {
        JsonArray jsonArraylocationInfo = jsonObj.getAsJsonArray("locationInfo");
        if (jsonArraylocationInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locationInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locationInfo` to be an array in the JSON string but got `%s`", jsonObj.get("locationInfo").toString()));
          }

          // validate the optional field `locationInfo` (array)
          for (int i = 0; i < jsonArraylocationInfo.size(); i++) {
            ResourceSkuLocationInfo.validateJsonElement(jsonArraylocationInfo.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull() && !jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if (jsonObj.get("restrictions") != null && !jsonObj.get("restrictions").isJsonNull()) {
        JsonArray jsonArrayrestrictions = jsonObj.getAsJsonArray("restrictions");
        if (jsonArrayrestrictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("restrictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `restrictions` to be an array in the JSON string but got `%s`", jsonObj.get("restrictions").toString()));
          }

          // validate the optional field `restrictions` (array)
          for (int i = 0; i < jsonArrayrestrictions.size(); i++) {
            Restriction.validateJsonElement(jsonArrayrestrictions.get(i));
          };
        }
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkspaceSku.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkspaceSku' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkspaceSku> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkspaceSku.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkspaceSku>() {
           @Override
           public void write(JsonWriter out, WorkspaceSku value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkspaceSku read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkspaceSku given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkspaceSku
   * @throws IOException if the JSON string is invalid with respect to WorkspaceSku
   */
  public static WorkspaceSku fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkspaceSku.class);
  }

  /**
   * Convert an instance of WorkspaceSku to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

