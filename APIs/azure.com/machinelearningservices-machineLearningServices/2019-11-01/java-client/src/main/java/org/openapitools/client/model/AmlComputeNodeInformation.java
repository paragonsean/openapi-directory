/*
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Compute node information related to a AmlCompute.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:00.479191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AmlComputeNodeInformation {
  public static final String SERIALIZED_NAME_NODE_ID = "nodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  /**
   * State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
   */
  @JsonAdapter(NodeStateEnum.Adapter.class)
  public enum NodeStateEnum {
    IDLE("idle"),
    
    RUNNING("running"),
    
    PREPARING("preparing"),
    
    UNUSABLE("unusable"),
    
    LEAVING("leaving"),
    
    PREEMPTED("preempted");

    private String value;

    NodeStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NodeStateEnum fromValue(String value) {
      for (NodeStateEnum b : NodeStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NodeStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NodeStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NodeStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NodeStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NodeStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NODE_STATE = "nodeState";
  @SerializedName(SERIALIZED_NAME_NODE_STATE)
  private NodeStateEnum nodeState;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private BigDecimal port;

  public static final String SERIALIZED_NAME_PRIVATE_IP_ADDRESS = "privateIpAddress";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IP_ADDRESS)
  private String privateIpAddress;

  public static final String SERIALIZED_NAME_PUBLIC_IP_ADDRESS = "publicIpAddress";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP_ADDRESS)
  private String publicIpAddress;

  public static final String SERIALIZED_NAME_RUN_ID = "runId";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public AmlComputeNodeInformation() {
  }

  public AmlComputeNodeInformation(
     String nodeId, 
     NodeStateEnum nodeState, 
     BigDecimal port, 
     String privateIpAddress, 
     String publicIpAddress, 
     String runId
  ) {
    this();
    this.nodeId = nodeId;
    this.nodeState = nodeState;
    this.port = port;
    this.privateIpAddress = privateIpAddress;
    this.publicIpAddress = publicIpAddress;
    this.runId = runId;
  }

  /**
   * ID of the compute node.
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }



  /**
   * State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
   * @return nodeState
   */
  @javax.annotation.Nullable
  public NodeStateEnum getNodeState() {
    return nodeState;
  }



  /**
   * SSH port number of the node.
   * @return port
   */
  @javax.annotation.Nullable
  public BigDecimal getPort() {
    return port;
  }



  /**
   * Private IP address of the compute node.
   * @return privateIpAddress
   */
  @javax.annotation.Nullable
  public String getPrivateIpAddress() {
    return privateIpAddress;
  }



  /**
   * Public IP address of the compute node.
   * @return publicIpAddress
   */
  @javax.annotation.Nullable
  public String getPublicIpAddress() {
    return publicIpAddress;
  }



  /**
   * ID of the Experiment running on the node, if any else null.
   * @return runId
   */
  @javax.annotation.Nullable
  public String getRunId() {
    return runId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmlComputeNodeInformation amlComputeNodeInformation = (AmlComputeNodeInformation) o;
    return Objects.equals(this.nodeId, amlComputeNodeInformation.nodeId) &&
        Objects.equals(this.nodeState, amlComputeNodeInformation.nodeState) &&
        Objects.equals(this.port, amlComputeNodeInformation.port) &&
        Objects.equals(this.privateIpAddress, amlComputeNodeInformation.privateIpAddress) &&
        Objects.equals(this.publicIpAddress, amlComputeNodeInformation.publicIpAddress) &&
        Objects.equals(this.runId, amlComputeNodeInformation.runId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeId, nodeState, port, privateIpAddress, publicIpAddress, runId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmlComputeNodeInformation {\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodeState: ").append(toIndentedString(nodeState)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    privateIpAddress: ").append(toIndentedString(privateIpAddress)).append("\n");
    sb.append("    publicIpAddress: ").append(toIndentedString(publicIpAddress)).append("\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nodeId");
    openapiFields.add("nodeState");
    openapiFields.add("port");
    openapiFields.add("privateIpAddress");
    openapiFields.add("publicIpAddress");
    openapiFields.add("runId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AmlComputeNodeInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AmlComputeNodeInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmlComputeNodeInformation is not found in the empty JSON string", AmlComputeNodeInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AmlComputeNodeInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AmlComputeNodeInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nodeId") != null && !jsonObj.get("nodeId").isJsonNull()) && !jsonObj.get("nodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeId").toString()));
      }
      if ((jsonObj.get("nodeState") != null && !jsonObj.get("nodeState").isJsonNull()) && !jsonObj.get("nodeState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeState").toString()));
      }
      // validate the optional field `nodeState`
      if (jsonObj.get("nodeState") != null && !jsonObj.get("nodeState").isJsonNull()) {
        NodeStateEnum.validateJsonElement(jsonObj.get("nodeState"));
      }
      if ((jsonObj.get("privateIpAddress") != null && !jsonObj.get("privateIpAddress").isJsonNull()) && !jsonObj.get("privateIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateIpAddress").toString()));
      }
      if ((jsonObj.get("publicIpAddress") != null && !jsonObj.get("publicIpAddress").isJsonNull()) && !jsonObj.get("publicIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIpAddress").toString()));
      }
      if ((jsonObj.get("runId") != null && !jsonObj.get("runId").isJsonNull()) && !jsonObj.get("runId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmlComputeNodeInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmlComputeNodeInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmlComputeNodeInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmlComputeNodeInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<AmlComputeNodeInformation>() {
           @Override
           public void write(JsonWriter out, AmlComputeNodeInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AmlComputeNodeInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AmlComputeNodeInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AmlComputeNodeInformation
   * @throws IOException if the JSON string is invalid with respect to AmlComputeNodeInformation
   */
  public static AmlComputeNodeInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmlComputeNodeInformation.class);
  }

  /**
   * Convert an instance of AmlComputeNodeInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

