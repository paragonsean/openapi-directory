/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListWorkspaceKeysResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListWorkspaceKeysResult::OAIListWorkspaceKeysResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListWorkspaceKeysResult::OAIListWorkspaceKeysResult() {
    this->initializeModel();
}

OAIListWorkspaceKeysResult::~OAIListWorkspaceKeysResult() {}

void OAIListWorkspaceKeysResult::initializeModel() {

    m_app_insights_instrumentation_key_isSet = false;
    m_app_insights_instrumentation_key_isValid = false;

    m_container_registry_credentials_isSet = false;
    m_container_registry_credentials_isValid = false;

    m_user_storage_key_isSet = false;
    m_user_storage_key_isValid = false;

    m_user_storage_resource_id_isSet = false;
    m_user_storage_resource_id_isValid = false;
}

void OAIListWorkspaceKeysResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListWorkspaceKeysResult::fromJsonObject(QJsonObject json) {

    m_app_insights_instrumentation_key_isValid = ::OpenAPI::fromJsonValue(m_app_insights_instrumentation_key, json[QString("appInsightsInstrumentationKey")]);
    m_app_insights_instrumentation_key_isSet = !json[QString("appInsightsInstrumentationKey")].isNull() && m_app_insights_instrumentation_key_isValid;

    m_container_registry_credentials_isValid = ::OpenAPI::fromJsonValue(m_container_registry_credentials, json[QString("containerRegistryCredentials")]);
    m_container_registry_credentials_isSet = !json[QString("containerRegistryCredentials")].isNull() && m_container_registry_credentials_isValid;

    m_user_storage_key_isValid = ::OpenAPI::fromJsonValue(m_user_storage_key, json[QString("userStorageKey")]);
    m_user_storage_key_isSet = !json[QString("userStorageKey")].isNull() && m_user_storage_key_isValid;

    m_user_storage_resource_id_isValid = ::OpenAPI::fromJsonValue(m_user_storage_resource_id, json[QString("userStorageResourceId")]);
    m_user_storage_resource_id_isSet = !json[QString("userStorageResourceId")].isNull() && m_user_storage_resource_id_isValid;
}

QString OAIListWorkspaceKeysResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListWorkspaceKeysResult::asJsonObject() const {
    QJsonObject obj;
    if (m_app_insights_instrumentation_key_isSet) {
        obj.insert(QString("appInsightsInstrumentationKey"), ::OpenAPI::toJsonValue(m_app_insights_instrumentation_key));
    }
    if (m_container_registry_credentials.isSet()) {
        obj.insert(QString("containerRegistryCredentials"), ::OpenAPI::toJsonValue(m_container_registry_credentials));
    }
    if (m_user_storage_key_isSet) {
        obj.insert(QString("userStorageKey"), ::OpenAPI::toJsonValue(m_user_storage_key));
    }
    if (m_user_storage_resource_id_isSet) {
        obj.insert(QString("userStorageResourceId"), ::OpenAPI::toJsonValue(m_user_storage_resource_id));
    }
    return obj;
}

QString OAIListWorkspaceKeysResult::getAppInsightsInstrumentationKey() const {
    return m_app_insights_instrumentation_key;
}
void OAIListWorkspaceKeysResult::setAppInsightsInstrumentationKey(const QString &app_insights_instrumentation_key) {
    m_app_insights_instrumentation_key = app_insights_instrumentation_key;
    m_app_insights_instrumentation_key_isSet = true;
}

bool OAIListWorkspaceKeysResult::is_app_insights_instrumentation_key_Set() const{
    return m_app_insights_instrumentation_key_isSet;
}

bool OAIListWorkspaceKeysResult::is_app_insights_instrumentation_key_Valid() const{
    return m_app_insights_instrumentation_key_isValid;
}

OAIRegistryListCredentialsResult OAIListWorkspaceKeysResult::getContainerRegistryCredentials() const {
    return m_container_registry_credentials;
}
void OAIListWorkspaceKeysResult::setContainerRegistryCredentials(const OAIRegistryListCredentialsResult &container_registry_credentials) {
    m_container_registry_credentials = container_registry_credentials;
    m_container_registry_credentials_isSet = true;
}

bool OAIListWorkspaceKeysResult::is_container_registry_credentials_Set() const{
    return m_container_registry_credentials_isSet;
}

bool OAIListWorkspaceKeysResult::is_container_registry_credentials_Valid() const{
    return m_container_registry_credentials_isValid;
}

QString OAIListWorkspaceKeysResult::getUserStorageKey() const {
    return m_user_storage_key;
}
void OAIListWorkspaceKeysResult::setUserStorageKey(const QString &user_storage_key) {
    m_user_storage_key = user_storage_key;
    m_user_storage_key_isSet = true;
}

bool OAIListWorkspaceKeysResult::is_user_storage_key_Set() const{
    return m_user_storage_key_isSet;
}

bool OAIListWorkspaceKeysResult::is_user_storage_key_Valid() const{
    return m_user_storage_key_isValid;
}

QString OAIListWorkspaceKeysResult::getUserStorageResourceId() const {
    return m_user_storage_resource_id;
}
void OAIListWorkspaceKeysResult::setUserStorageResourceId(const QString &user_storage_resource_id) {
    m_user_storage_resource_id = user_storage_resource_id;
    m_user_storage_resource_id_isSet = true;
}

bool OAIListWorkspaceKeysResult::is_user_storage_resource_id_Set() const{
    return m_user_storage_resource_id_isSet;
}

bool OAIListWorkspaceKeysResult::is_user_storage_resource_id_Valid() const{
    return m_user_storage_resource_id_isValid;
}

bool OAIListWorkspaceKeysResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_insights_instrumentation_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_registry_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_storage_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_storage_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListWorkspaceKeysResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
