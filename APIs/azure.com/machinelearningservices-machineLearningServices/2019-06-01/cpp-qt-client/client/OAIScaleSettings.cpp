/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScaleSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScaleSettings::OAIScaleSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScaleSettings::OAIScaleSettings() {
    this->initializeModel();
}

OAIScaleSettings::~OAIScaleSettings() {}

void OAIScaleSettings::initializeModel() {

    m_max_node_count_isSet = false;
    m_max_node_count_isValid = false;

    m_min_node_count_isSet = false;
    m_min_node_count_isValid = false;

    m_node_idle_time_before_scale_down_isSet = false;
    m_node_idle_time_before_scale_down_isValid = false;
}

void OAIScaleSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScaleSettings::fromJsonObject(QJsonObject json) {

    m_max_node_count_isValid = ::OpenAPI::fromJsonValue(m_max_node_count, json[QString("maxNodeCount")]);
    m_max_node_count_isSet = !json[QString("maxNodeCount")].isNull() && m_max_node_count_isValid;

    m_min_node_count_isValid = ::OpenAPI::fromJsonValue(m_min_node_count, json[QString("minNodeCount")]);
    m_min_node_count_isSet = !json[QString("minNodeCount")].isNull() && m_min_node_count_isValid;

    m_node_idle_time_before_scale_down_isValid = ::OpenAPI::fromJsonValue(m_node_idle_time_before_scale_down, json[QString("nodeIdleTimeBeforeScaleDown")]);
    m_node_idle_time_before_scale_down_isSet = !json[QString("nodeIdleTimeBeforeScaleDown")].isNull() && m_node_idle_time_before_scale_down_isValid;
}

QString OAIScaleSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScaleSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_max_node_count_isSet) {
        obj.insert(QString("maxNodeCount"), ::OpenAPI::toJsonValue(m_max_node_count));
    }
    if (m_min_node_count_isSet) {
        obj.insert(QString("minNodeCount"), ::OpenAPI::toJsonValue(m_min_node_count));
    }
    if (m_node_idle_time_before_scale_down_isSet) {
        obj.insert(QString("nodeIdleTimeBeforeScaleDown"), ::OpenAPI::toJsonValue(m_node_idle_time_before_scale_down));
    }
    return obj;
}

qint32 OAIScaleSettings::getMaxNodeCount() const {
    return m_max_node_count;
}
void OAIScaleSettings::setMaxNodeCount(const qint32 &max_node_count) {
    m_max_node_count = max_node_count;
    m_max_node_count_isSet = true;
}

bool OAIScaleSettings::is_max_node_count_Set() const{
    return m_max_node_count_isSet;
}

bool OAIScaleSettings::is_max_node_count_Valid() const{
    return m_max_node_count_isValid;
}

qint32 OAIScaleSettings::getMinNodeCount() const {
    return m_min_node_count;
}
void OAIScaleSettings::setMinNodeCount(const qint32 &min_node_count) {
    m_min_node_count = min_node_count;
    m_min_node_count_isSet = true;
}

bool OAIScaleSettings::is_min_node_count_Set() const{
    return m_min_node_count_isSet;
}

bool OAIScaleSettings::is_min_node_count_Valid() const{
    return m_min_node_count_isValid;
}

QString OAIScaleSettings::getNodeIdleTimeBeforeScaleDown() const {
    return m_node_idle_time_before_scale_down;
}
void OAIScaleSettings::setNodeIdleTimeBeforeScaleDown(const QString &node_idle_time_before_scale_down) {
    m_node_idle_time_before_scale_down = node_idle_time_before_scale_down;
    m_node_idle_time_before_scale_down_isSet = true;
}

bool OAIScaleSettings::is_node_idle_time_before_scale_down_Set() const{
    return m_node_idle_time_before_scale_down_isSet;
}

bool OAIScaleSettings::is_node_idle_time_before_scale_down_Valid() const{
    return m_node_idle_time_before_scale_down_isValid;
}

bool OAIScaleSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_idle_time_before_scale_down_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScaleSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_node_count_isValid && true;
}

} // namespace OpenAPI
