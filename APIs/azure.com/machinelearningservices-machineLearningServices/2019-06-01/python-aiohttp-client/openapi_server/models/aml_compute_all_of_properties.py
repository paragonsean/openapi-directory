# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.machine_learning_service_error import MachineLearningServiceError
from openapi_server.models.node_state_counts import NodeStateCounts
from openapi_server.models.resource_id import ResourceId
from openapi_server.models.scale_settings import ScaleSettings
from openapi_server.models.user_account_credentials import UserAccountCredentials
from openapi_server import util


class AmlComputeAllOfProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocation_state: str=None, allocation_state_transition_time: datetime=None, current_node_count: int=None, errors: List[MachineLearningServiceError]=None, node_state_counts: NodeStateCounts=None, remote_login_port_public_access: str='NotSpecified', scale_settings: ScaleSettings=None, subnet: ResourceId=None, target_node_count: int=None, user_account_credentials: UserAccountCredentials=None, vm_priority: str=None, vm_size: str=None):
        """AmlComputeAllOfProperties - a model defined in OpenAPI

        :param allocation_state: The allocation_state of this AmlComputeAllOfProperties.
        :param allocation_state_transition_time: The allocation_state_transition_time of this AmlComputeAllOfProperties.
        :param current_node_count: The current_node_count of this AmlComputeAllOfProperties.
        :param errors: The errors of this AmlComputeAllOfProperties.
        :param node_state_counts: The node_state_counts of this AmlComputeAllOfProperties.
        :param remote_login_port_public_access: The remote_login_port_public_access of this AmlComputeAllOfProperties.
        :param scale_settings: The scale_settings of this AmlComputeAllOfProperties.
        :param subnet: The subnet of this AmlComputeAllOfProperties.
        :param target_node_count: The target_node_count of this AmlComputeAllOfProperties.
        :param user_account_credentials: The user_account_credentials of this AmlComputeAllOfProperties.
        :param vm_priority: The vm_priority of this AmlComputeAllOfProperties.
        :param vm_size: The vm_size of this AmlComputeAllOfProperties.
        """
        self.openapi_types = {
            'allocation_state': str,
            'allocation_state_transition_time': datetime,
            'current_node_count': int,
            'errors': List[MachineLearningServiceError],
            'node_state_counts': NodeStateCounts,
            'remote_login_port_public_access': str,
            'scale_settings': ScaleSettings,
            'subnet': ResourceId,
            'target_node_count': int,
            'user_account_credentials': UserAccountCredentials,
            'vm_priority': str,
            'vm_size': str
        }

        self.attribute_map = {
            'allocation_state': 'allocationState',
            'allocation_state_transition_time': 'allocationStateTransitionTime',
            'current_node_count': 'currentNodeCount',
            'errors': 'errors',
            'node_state_counts': 'nodeStateCounts',
            'remote_login_port_public_access': 'remoteLoginPortPublicAccess',
            'scale_settings': 'scaleSettings',
            'subnet': 'subnet',
            'target_node_count': 'targetNodeCount',
            'user_account_credentials': 'userAccountCredentials',
            'vm_priority': 'vmPriority',
            'vm_size': 'vmSize'
        }

        self._allocation_state = allocation_state
        self._allocation_state_transition_time = allocation_state_transition_time
        self._current_node_count = current_node_count
        self._errors = errors
        self._node_state_counts = node_state_counts
        self._remote_login_port_public_access = remote_login_port_public_access
        self._scale_settings = scale_settings
        self._subnet = subnet
        self._target_node_count = target_node_count
        self._user_account_credentials = user_account_credentials
        self._vm_priority = vm_priority
        self._vm_size = vm_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AmlComputeAllOfProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AmlCompute_allOf_properties of this AmlComputeAllOfProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocation_state(self):
        """Gets the allocation_state of this AmlComputeAllOfProperties.

        Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.

        :return: The allocation_state of this AmlComputeAllOfProperties.
        :rtype: str
        """
        return self._allocation_state

    @allocation_state.setter
    def allocation_state(self, allocation_state):
        """Sets the allocation_state of this AmlComputeAllOfProperties.

        Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.

        :param allocation_state: The allocation_state of this AmlComputeAllOfProperties.
        :type allocation_state: str
        """
        allowed_values = ["Steady", "Resizing"]  # noqa: E501
        if allocation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `allocation_state` ({0}), must be one of {1}"
                .format(allocation_state, allowed_values)
            )

        self._allocation_state = allocation_state

    @property
    def allocation_state_transition_time(self):
        """Gets the allocation_state_transition_time of this AmlComputeAllOfProperties.

        The time at which the compute entered its current allocation state.

        :return: The allocation_state_transition_time of this AmlComputeAllOfProperties.
        :rtype: datetime
        """
        return self._allocation_state_transition_time

    @allocation_state_transition_time.setter
    def allocation_state_transition_time(self, allocation_state_transition_time):
        """Sets the allocation_state_transition_time of this AmlComputeAllOfProperties.

        The time at which the compute entered its current allocation state.

        :param allocation_state_transition_time: The allocation_state_transition_time of this AmlComputeAllOfProperties.
        :type allocation_state_transition_time: datetime
        """

        self._allocation_state_transition_time = allocation_state_transition_time

    @property
    def current_node_count(self):
        """Gets the current_node_count of this AmlComputeAllOfProperties.

        The number of compute nodes currently assigned to the compute.

        :return: The current_node_count of this AmlComputeAllOfProperties.
        :rtype: int
        """
        return self._current_node_count

    @current_node_count.setter
    def current_node_count(self, current_node_count):
        """Sets the current_node_count of this AmlComputeAllOfProperties.

        The number of compute nodes currently assigned to the compute.

        :param current_node_count: The current_node_count of this AmlComputeAllOfProperties.
        :type current_node_count: int
        """

        self._current_node_count = current_node_count

    @property
    def errors(self):
        """Gets the errors of this AmlComputeAllOfProperties.

        Collection of errors encountered by various compute nodes during node setup.

        :return: The errors of this AmlComputeAllOfProperties.
        :rtype: List[MachineLearningServiceError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this AmlComputeAllOfProperties.

        Collection of errors encountered by various compute nodes during node setup.

        :param errors: The errors of this AmlComputeAllOfProperties.
        :type errors: List[MachineLearningServiceError]
        """

        self._errors = errors

    @property
    def node_state_counts(self):
        """Gets the node_state_counts of this AmlComputeAllOfProperties.


        :return: The node_state_counts of this AmlComputeAllOfProperties.
        :rtype: NodeStateCounts
        """
        return self._node_state_counts

    @node_state_counts.setter
    def node_state_counts(self, node_state_counts):
        """Sets the node_state_counts of this AmlComputeAllOfProperties.


        :param node_state_counts: The node_state_counts of this AmlComputeAllOfProperties.
        :type node_state_counts: NodeStateCounts
        """

        self._node_state_counts = node_state_counts

    @property
    def remote_login_port_public_access(self):
        """Gets the remote_login_port_public_access of this AmlComputeAllOfProperties.

        State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.

        :return: The remote_login_port_public_access of this AmlComputeAllOfProperties.
        :rtype: str
        """
        return self._remote_login_port_public_access

    @remote_login_port_public_access.setter
    def remote_login_port_public_access(self, remote_login_port_public_access):
        """Sets the remote_login_port_public_access of this AmlComputeAllOfProperties.

        State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.

        :param remote_login_port_public_access: The remote_login_port_public_access of this AmlComputeAllOfProperties.
        :type remote_login_port_public_access: str
        """
        allowed_values = ["Enabled", "Disabled", "NotSpecified"]  # noqa: E501
        if remote_login_port_public_access not in allowed_values:
            raise ValueError(
                "Invalid value for `remote_login_port_public_access` ({0}), must be one of {1}"
                .format(remote_login_port_public_access, allowed_values)
            )

        self._remote_login_port_public_access = remote_login_port_public_access

    @property
    def scale_settings(self):
        """Gets the scale_settings of this AmlComputeAllOfProperties.


        :return: The scale_settings of this AmlComputeAllOfProperties.
        :rtype: ScaleSettings
        """
        return self._scale_settings

    @scale_settings.setter
    def scale_settings(self, scale_settings):
        """Sets the scale_settings of this AmlComputeAllOfProperties.


        :param scale_settings: The scale_settings of this AmlComputeAllOfProperties.
        :type scale_settings: ScaleSettings
        """

        self._scale_settings = scale_settings

    @property
    def subnet(self):
        """Gets the subnet of this AmlComputeAllOfProperties.


        :return: The subnet of this AmlComputeAllOfProperties.
        :rtype: ResourceId
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this AmlComputeAllOfProperties.


        :param subnet: The subnet of this AmlComputeAllOfProperties.
        :type subnet: ResourceId
        """

        self._subnet = subnet

    @property
    def target_node_count(self):
        """Gets the target_node_count of this AmlComputeAllOfProperties.

        The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.

        :return: The target_node_count of this AmlComputeAllOfProperties.
        :rtype: int
        """
        return self._target_node_count

    @target_node_count.setter
    def target_node_count(self, target_node_count):
        """Sets the target_node_count of this AmlComputeAllOfProperties.

        The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.

        :param target_node_count: The target_node_count of this AmlComputeAllOfProperties.
        :type target_node_count: int
        """

        self._target_node_count = target_node_count

    @property
    def user_account_credentials(self):
        """Gets the user_account_credentials of this AmlComputeAllOfProperties.


        :return: The user_account_credentials of this AmlComputeAllOfProperties.
        :rtype: UserAccountCredentials
        """
        return self._user_account_credentials

    @user_account_credentials.setter
    def user_account_credentials(self, user_account_credentials):
        """Sets the user_account_credentials of this AmlComputeAllOfProperties.


        :param user_account_credentials: The user_account_credentials of this AmlComputeAllOfProperties.
        :type user_account_credentials: UserAccountCredentials
        """

        self._user_account_credentials = user_account_credentials

    @property
    def vm_priority(self):
        """Gets the vm_priority of this AmlComputeAllOfProperties.

        Virtual Machine priority

        :return: The vm_priority of this AmlComputeAllOfProperties.
        :rtype: str
        """
        return self._vm_priority

    @vm_priority.setter
    def vm_priority(self, vm_priority):
        """Sets the vm_priority of this AmlComputeAllOfProperties.

        Virtual Machine priority

        :param vm_priority: The vm_priority of this AmlComputeAllOfProperties.
        :type vm_priority: str
        """
        allowed_values = ["Dedicated", "LowPriority"]  # noqa: E501
        if vm_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `vm_priority` ({0}), must be one of {1}"
                .format(vm_priority, allowed_values)
            )

        self._vm_priority = vm_priority

    @property
    def vm_size(self):
        """Gets the vm_size of this AmlComputeAllOfProperties.

        Virtual Machine Size

        :return: The vm_size of this AmlComputeAllOfProperties.
        :rtype: str
        """
        return self._vm_size

    @vm_size.setter
    def vm_size(self, vm_size):
        """Sets the vm_size of this AmlComputeAllOfProperties.

        Virtual Machine Size

        :param vm_size: The vm_size of this AmlComputeAllOfProperties.
        :type vm_size: str
        """

        self._vm_size = vm_size
