/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AmlComputeNodeInformation model module.
 * @module model/AmlComputeNodeInformation
 * @version 2019-06-01
 */
class AmlComputeNodeInformation {
    /**
     * Constructs a new <code>AmlComputeNodeInformation</code>.
     * Compute node information related to a AmlCompute.
     * @alias module:model/AmlComputeNodeInformation
     */
    constructor() { 
        
        AmlComputeNodeInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AmlComputeNodeInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AmlComputeNodeInformation} obj Optional instance to populate.
     * @return {module:model/AmlComputeNodeInformation} The populated <code>AmlComputeNodeInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AmlComputeNodeInformation();

            if (data.hasOwnProperty('nodeId')) {
                obj['nodeId'] = ApiClient.convertToType(data['nodeId'], 'String');
            }
            if (data.hasOwnProperty('nodeState')) {
                obj['nodeState'] = ApiClient.convertToType(data['nodeState'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('privateIpAddress')) {
                obj['privateIpAddress'] = ApiClient.convertToType(data['privateIpAddress'], 'String');
            }
            if (data.hasOwnProperty('publicIpAddress')) {
                obj['publicIpAddress'] = ApiClient.convertToType(data['publicIpAddress'], 'String');
            }
            if (data.hasOwnProperty('runId')) {
                obj['runId'] = ApiClient.convertToType(data['runId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AmlComputeNodeInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AmlComputeNodeInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['nodeId'] && !(typeof data['nodeId'] === 'string' || data['nodeId'] instanceof String)) {
            throw new Error("Expected the field `nodeId` to be a primitive type in the JSON string but got " + data['nodeId']);
        }
        // ensure the json data is a string
        if (data['nodeState'] && !(typeof data['nodeState'] === 'string' || data['nodeState'] instanceof String)) {
            throw new Error("Expected the field `nodeState` to be a primitive type in the JSON string but got " + data['nodeState']);
        }
        // ensure the json data is a string
        if (data['privateIpAddress'] && !(typeof data['privateIpAddress'] === 'string' || data['privateIpAddress'] instanceof String)) {
            throw new Error("Expected the field `privateIpAddress` to be a primitive type in the JSON string but got " + data['privateIpAddress']);
        }
        // ensure the json data is a string
        if (data['publicIpAddress'] && !(typeof data['publicIpAddress'] === 'string' || data['publicIpAddress'] instanceof String)) {
            throw new Error("Expected the field `publicIpAddress` to be a primitive type in the JSON string but got " + data['publicIpAddress']);
        }
        // ensure the json data is a string
        if (data['runId'] && !(typeof data['runId'] === 'string' || data['runId'] instanceof String)) {
            throw new Error("Expected the field `runId` to be a primitive type in the JSON string but got " + data['runId']);
        }

        return true;
    }


}



/**
 * ID of the compute node.
 * @member {String} nodeId
 */
AmlComputeNodeInformation.prototype['nodeId'] = undefined;

/**
 * State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
 * @member {module:model/AmlComputeNodeInformation.NodeStateEnum} nodeState
 */
AmlComputeNodeInformation.prototype['nodeState'] = undefined;

/**
 * SSH port number of the node.
 * @member {Number} port
 */
AmlComputeNodeInformation.prototype['port'] = undefined;

/**
 * Private IP address of the compute node.
 * @member {String} privateIpAddress
 */
AmlComputeNodeInformation.prototype['privateIpAddress'] = undefined;

/**
 * Public IP address of the compute node.
 * @member {String} publicIpAddress
 */
AmlComputeNodeInformation.prototype['publicIpAddress'] = undefined;

/**
 * ID of the Experiment running on the node, if any else null.
 * @member {String} runId
 */
AmlComputeNodeInformation.prototype['runId'] = undefined;





/**
 * Allowed values for the <code>nodeState</code> property.
 * @enum {String}
 * @readonly
 */
AmlComputeNodeInformation['NodeStateEnum'] = {

    /**
     * value: "idle"
     * @const
     */
    "idle": "idle",

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "preparing"
     * @const
     */
    "preparing": "preparing",

    /**
     * value: "unusable"
     * @const
     */
    "unusable": "unusable",

    /**
     * value: "leaving"
     * @const
     */
    "leaving": "leaving",

    /**
     * value: "preempted"
     * @const
     */
    "preempted": "preempted"
};



export default AmlComputeNodeInformation;

