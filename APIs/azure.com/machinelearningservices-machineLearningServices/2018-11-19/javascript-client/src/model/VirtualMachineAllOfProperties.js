/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-11-19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VirtualMachineSshCredentials from './VirtualMachineSshCredentials';

/**
 * The VirtualMachineAllOfProperties model module.
 * @module model/VirtualMachineAllOfProperties
 * @version 2018-11-19
 */
class VirtualMachineAllOfProperties {
    /**
     * Constructs a new <code>VirtualMachineAllOfProperties</code>.
     * @alias module:model/VirtualMachineAllOfProperties
     */
    constructor() { 
        
        VirtualMachineAllOfProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualMachineAllOfProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineAllOfProperties} obj Optional instance to populate.
     * @return {module:model/VirtualMachineAllOfProperties} The populated <code>VirtualMachineAllOfProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineAllOfProperties();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('administratorAccount')) {
                obj['administratorAccount'] = VirtualMachineSshCredentials.constructFromObject(data['administratorAccount']);
            }
            if (data.hasOwnProperty('sshPort')) {
                obj['sshPort'] = ApiClient.convertToType(data['sshPort'], 'Number');
            }
            if (data.hasOwnProperty('virtualMachineSize')) {
                obj['virtualMachineSize'] = ApiClient.convertToType(data['virtualMachineSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineAllOfProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineAllOfProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // validate the optional field `administratorAccount`
        if (data['administratorAccount']) { // data not null
          VirtualMachineSshCredentials.validateJSON(data['administratorAccount']);
        }
        // ensure the json data is a string
        if (data['virtualMachineSize'] && !(typeof data['virtualMachineSize'] === 'string' || data['virtualMachineSize'] instanceof String)) {
            throw new Error("Expected the field `virtualMachineSize` to be a primitive type in the JSON string but got " + data['virtualMachineSize']);
        }

        return true;
    }


}



/**
 * Public IP address of the virtual machine.
 * @member {String} address
 */
VirtualMachineAllOfProperties.prototype['address'] = undefined;

/**
 * @member {module:model/VirtualMachineSshCredentials} administratorAccount
 */
VirtualMachineAllOfProperties.prototype['administratorAccount'] = undefined;

/**
 * Port open for ssh connections.
 * @member {Number} sshPort
 */
VirtualMachineAllOfProperties.prototype['sshPort'] = undefined;

/**
 * Virtual Machine size
 * @member {String} virtualMachineSize
 */
VirtualMachineAllOfProperties.prototype['virtualMachineSize'] = undefined;






export default VirtualMachineAllOfProperties;

