/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-11-19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeStateCounts model module.
 * @module model/NodeStateCounts
 * @version 2018-11-19
 */
class NodeStateCounts {
    /**
     * Constructs a new <code>NodeStateCounts</code>.
     * Counts of various compute node states on the amlCompute.
     * @alias module:model/NodeStateCounts
     */
    constructor() { 
        
        NodeStateCounts.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeStateCounts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeStateCounts} obj Optional instance to populate.
     * @return {module:model/NodeStateCounts} The populated <code>NodeStateCounts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeStateCounts();

            if (data.hasOwnProperty('idleNodeCount')) {
                obj['idleNodeCount'] = ApiClient.convertToType(data['idleNodeCount'], 'Number');
            }
            if (data.hasOwnProperty('leavingNodeCount')) {
                obj['leavingNodeCount'] = ApiClient.convertToType(data['leavingNodeCount'], 'Number');
            }
            if (data.hasOwnProperty('preemptedNodeCount')) {
                obj['preemptedNodeCount'] = ApiClient.convertToType(data['preemptedNodeCount'], 'Number');
            }
            if (data.hasOwnProperty('preparingNodeCount')) {
                obj['preparingNodeCount'] = ApiClient.convertToType(data['preparingNodeCount'], 'Number');
            }
            if (data.hasOwnProperty('runningNodeCount')) {
                obj['runningNodeCount'] = ApiClient.convertToType(data['runningNodeCount'], 'Number');
            }
            if (data.hasOwnProperty('unusableNodeCount')) {
                obj['unusableNodeCount'] = ApiClient.convertToType(data['unusableNodeCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeStateCounts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeStateCounts</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Number of compute nodes in idle state.
 * @member {Number} idleNodeCount
 */
NodeStateCounts.prototype['idleNodeCount'] = undefined;

/**
 * Number of compute nodes which are leaving the amlCompute.
 * @member {Number} leavingNodeCount
 */
NodeStateCounts.prototype['leavingNodeCount'] = undefined;

/**
 * Number of compute nodes which are in preempted state.
 * @member {Number} preemptedNodeCount
 */
NodeStateCounts.prototype['preemptedNodeCount'] = undefined;

/**
 * Number of compute nodes which are being prepared.
 * @member {Number} preparingNodeCount
 */
NodeStateCounts.prototype['preparingNodeCount'] = undefined;

/**
 * Number of compute nodes which are running jobs.
 * @member {Number} runningNodeCount
 */
NodeStateCounts.prototype['runningNodeCount'] = undefined;

/**
 * Number of compute nodes which are in unusable state.
 * @member {Number} unusableNodeCount
 */
NodeStateCounts.prototype['unusableNodeCount'] = undefined;






export default NodeStateCounts;

