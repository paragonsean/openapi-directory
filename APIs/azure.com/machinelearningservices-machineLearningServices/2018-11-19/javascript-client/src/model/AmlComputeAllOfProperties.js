/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-11-19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MachineLearningServiceError from './MachineLearningServiceError';
import NodeStateCounts from './NodeStateCounts';
import ResourceId from './ResourceId';
import ScaleSettings from './ScaleSettings';
import UserAccountCredentials from './UserAccountCredentials';

/**
 * The AmlComputeAllOfProperties model module.
 * @module model/AmlComputeAllOfProperties
 * @version 2018-11-19
 */
class AmlComputeAllOfProperties {
    /**
     * Constructs a new <code>AmlComputeAllOfProperties</code>.
     * AML Compute properties
     * @alias module:model/AmlComputeAllOfProperties
     */
    constructor() { 
        
        AmlComputeAllOfProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AmlComputeAllOfProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AmlComputeAllOfProperties} obj Optional instance to populate.
     * @return {module:model/AmlComputeAllOfProperties} The populated <code>AmlComputeAllOfProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AmlComputeAllOfProperties();

            if (data.hasOwnProperty('allocationState')) {
                obj['allocationState'] = ApiClient.convertToType(data['allocationState'], 'String');
            }
            if (data.hasOwnProperty('allocationStateTransitionTime')) {
                obj['allocationStateTransitionTime'] = ApiClient.convertToType(data['allocationStateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('currentNodeCount')) {
                obj['currentNodeCount'] = ApiClient.convertToType(data['currentNodeCount'], 'Number');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [MachineLearningServiceError]);
            }
            if (data.hasOwnProperty('nodeStateCounts')) {
                obj['nodeStateCounts'] = NodeStateCounts.constructFromObject(data['nodeStateCounts']);
            }
            if (data.hasOwnProperty('scaleSettings')) {
                obj['scaleSettings'] = ScaleSettings.constructFromObject(data['scaleSettings']);
            }
            if (data.hasOwnProperty('subnet')) {
                obj['subnet'] = ResourceId.constructFromObject(data['subnet']);
            }
            if (data.hasOwnProperty('targetNodeCount')) {
                obj['targetNodeCount'] = ApiClient.convertToType(data['targetNodeCount'], 'Number');
            }
            if (data.hasOwnProperty('userAccountCredentials')) {
                obj['userAccountCredentials'] = UserAccountCredentials.constructFromObject(data['userAccountCredentials']);
            }
            if (data.hasOwnProperty('vmPriority')) {
                obj['vmPriority'] = ApiClient.convertToType(data['vmPriority'], 'String');
            }
            if (data.hasOwnProperty('vmSize')) {
                obj['vmSize'] = ApiClient.convertToType(data['vmSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AmlComputeAllOfProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AmlComputeAllOfProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allocationState'] && !(typeof data['allocationState'] === 'string' || data['allocationState'] instanceof String)) {
            throw new Error("Expected the field `allocationState` to be a primitive type in the JSON string but got " + data['allocationState']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                MachineLearningServiceError.validateJSON(item);
            };
        }
        // validate the optional field `nodeStateCounts`
        if (data['nodeStateCounts']) { // data not null
          NodeStateCounts.validateJSON(data['nodeStateCounts']);
        }
        // validate the optional field `scaleSettings`
        if (data['scaleSettings']) { // data not null
          ScaleSettings.validateJSON(data['scaleSettings']);
        }
        // validate the optional field `subnet`
        if (data['subnet']) { // data not null
          ResourceId.validateJSON(data['subnet']);
        }
        // validate the optional field `userAccountCredentials`
        if (data['userAccountCredentials']) { // data not null
          UserAccountCredentials.validateJSON(data['userAccountCredentials']);
        }
        // ensure the json data is a string
        if (data['vmPriority'] && !(typeof data['vmPriority'] === 'string' || data['vmPriority'] instanceof String)) {
            throw new Error("Expected the field `vmPriority` to be a primitive type in the JSON string but got " + data['vmPriority']);
        }
        // ensure the json data is a string
        if (data['vmSize'] && !(typeof data['vmSize'] === 'string' || data['vmSize'] instanceof String)) {
            throw new Error("Expected the field `vmSize` to be a primitive type in the JSON string but got " + data['vmSize']);
        }

        return true;
    }


}



/**
 * Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
 * @member {module:model/AmlComputeAllOfProperties.AllocationStateEnum} allocationState
 */
AmlComputeAllOfProperties.prototype['allocationState'] = undefined;

/**
 * The time at which the compute entered its current allocation state.
 * @member {Date} allocationStateTransitionTime
 */
AmlComputeAllOfProperties.prototype['allocationStateTransitionTime'] = undefined;

/**
 * The number of compute nodes currently assigned to the compute.
 * @member {Number} currentNodeCount
 */
AmlComputeAllOfProperties.prototype['currentNodeCount'] = undefined;

/**
 * Collection of errors encountered by various compute nodes during node setup.
 * @member {Array.<module:model/MachineLearningServiceError>} errors
 */
AmlComputeAllOfProperties.prototype['errors'] = undefined;

/**
 * @member {module:model/NodeStateCounts} nodeStateCounts
 */
AmlComputeAllOfProperties.prototype['nodeStateCounts'] = undefined;

/**
 * @member {module:model/ScaleSettings} scaleSettings
 */
AmlComputeAllOfProperties.prototype['scaleSettings'] = undefined;

/**
 * @member {module:model/ResourceId} subnet
 */
AmlComputeAllOfProperties.prototype['subnet'] = undefined;

/**
 * The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
 * @member {Number} targetNodeCount
 */
AmlComputeAllOfProperties.prototype['targetNodeCount'] = undefined;

/**
 * @member {module:model/UserAccountCredentials} userAccountCredentials
 */
AmlComputeAllOfProperties.prototype['userAccountCredentials'] = undefined;

/**
 * Virtual Machine priority
 * @member {module:model/AmlComputeAllOfProperties.VmPriorityEnum} vmPriority
 */
AmlComputeAllOfProperties.prototype['vmPriority'] = undefined;

/**
 * Virtual Machine Size
 * @member {String} vmSize
 */
AmlComputeAllOfProperties.prototype['vmSize'] = undefined;





/**
 * Allowed values for the <code>allocationState</code> property.
 * @enum {String}
 * @readonly
 */
AmlComputeAllOfProperties['AllocationStateEnum'] = {

    /**
     * value: "Steady"
     * @const
     */
    "Steady": "Steady",

    /**
     * value: "Resizing"
     * @const
     */
    "Resizing": "Resizing"
};


/**
 * Allowed values for the <code>vmPriority</code> property.
 * @enum {String}
 * @readonly
 */
AmlComputeAllOfProperties['VmPriorityEnum'] = {

    /**
     * value: "Dedicated"
     * @const
     */
    "Dedicated": "Dedicated",

    /**
     * value: "LowPriority"
     * @const
     */
    "LowPriority": "LowPriority"
};



export default AmlComputeAllOfProperties;

