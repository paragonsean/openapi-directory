# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_type import ComputeType
from openapi_server import util


class ComputeNodesInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_type: ComputeType=None, next_link: str=None):
        """ComputeNodesInformation - a model defined in OpenAPI

        :param compute_type: The compute_type of this ComputeNodesInformation.
        :param next_link: The next_link of this ComputeNodesInformation.
        """
        self.openapi_types = {
            'compute_type': ComputeType,
            'next_link': str
        }

        self.attribute_map = {
            'compute_type': 'computeType',
            'next_link': 'nextLink'
        }

        self._compute_type = compute_type
        self._next_link = next_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeNodesInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComputeNodesInformation of this ComputeNodesInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_type(self):
        """Gets the compute_type of this ComputeNodesInformation.


        :return: The compute_type of this ComputeNodesInformation.
        :rtype: ComputeType
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this ComputeNodesInformation.


        :param compute_type: The compute_type of this ComputeNodesInformation.
        :type compute_type: ComputeType
        """
        if compute_type is None:
            raise ValueError("Invalid value for `compute_type`, must not be `None`")

        self._compute_type = compute_type

    @property
    def next_link(self):
        """Gets the next_link of this ComputeNodesInformation.

        The continuation token.

        :return: The next_link of this ComputeNodesInformation.
        :rtype: str
        """
        return self._next_link

    @next_link.setter
    def next_link(self, next_link):
        """Sets the next_link of this ComputeNodesInformation.

        The continuation token.

        :param next_link: The next_link of this ComputeNodesInformation.
        :type next_link: str
        """

        self._next_link = next_link
