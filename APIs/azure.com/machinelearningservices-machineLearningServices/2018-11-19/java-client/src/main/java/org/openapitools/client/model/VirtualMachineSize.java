/*
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-11-19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a VM size.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:08.785121-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineSize {
  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private String family;

  public static final String SERIALIZED_NAME_LOW_PRIORITY_CAPABLE = "lowPriorityCapable";
  @SerializedName(SERIALIZED_NAME_LOW_PRIORITY_CAPABLE)
  private Boolean lowPriorityCapable;

  public static final String SERIALIZED_NAME_MAX_RESOURCE_VOLUME_M_B = "maxResourceVolumeMB";
  @SerializedName(SERIALIZED_NAME_MAX_RESOURCE_VOLUME_M_B)
  private Integer maxResourceVolumeMB;

  public static final String SERIALIZED_NAME_MEMORY_G_B = "memoryGB";
  @SerializedName(SERIALIZED_NAME_MEMORY_G_B)
  private Double memoryGB;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OS_VHD_SIZE_M_B = "osVhdSizeMB";
  @SerializedName(SERIALIZED_NAME_OS_VHD_SIZE_M_B)
  private Integer osVhdSizeMB;

  public static final String SERIALIZED_NAME_PREMIUM_I_O = "premiumIO";
  @SerializedName(SERIALIZED_NAME_PREMIUM_I_O)
  private Boolean premiumIO;

  public static final String SERIALIZED_NAME_V_C_P_US = "vCPUs";
  @SerializedName(SERIALIZED_NAME_V_C_P_US)
  private Integer vCPUs;

  public VirtualMachineSize() {
  }

  public VirtualMachineSize(
     String family, 
     Boolean lowPriorityCapable, 
     Integer maxResourceVolumeMB, 
     Double memoryGB, 
     String name, 
     Integer osVhdSizeMB, 
     Boolean premiumIO, 
     Integer vCPUs
  ) {
    this();
    this.family = family;
    this.lowPriorityCapable = lowPriorityCapable;
    this.maxResourceVolumeMB = maxResourceVolumeMB;
    this.memoryGB = memoryGB;
    this.name = name;
    this.osVhdSizeMB = osVhdSizeMB;
    this.premiumIO = premiumIO;
    this.vCPUs = vCPUs;
  }

  /**
   * The family name of the virtual machine size.
   * @return family
   */
  @javax.annotation.Nullable
  public String getFamily() {
    return family;
  }



  /**
   * Specifies if the virtual machine size supports low priority VMs.
   * @return lowPriorityCapable
   */
  @javax.annotation.Nullable
  public Boolean getLowPriorityCapable() {
    return lowPriorityCapable;
  }



  /**
   * The resource volume size, in MB, allowed by the virtual machine size.
   * @return maxResourceVolumeMB
   */
  @javax.annotation.Nullable
  public Integer getMaxResourceVolumeMB() {
    return maxResourceVolumeMB;
  }



  /**
   * The amount of memory, in GB, supported by the virtual machine size.
   * @return memoryGB
   */
  @javax.annotation.Nullable
  public Double getMemoryGB() {
    return memoryGB;
  }



  /**
   * The name of the virtual machine size.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * The OS VHD disk size, in MB, allowed by the virtual machine size.
   * @return osVhdSizeMB
   */
  @javax.annotation.Nullable
  public Integer getOsVhdSizeMB() {
    return osVhdSizeMB;
  }



  /**
   * Specifies if the virtual machine size supports premium IO.
   * @return premiumIO
   */
  @javax.annotation.Nullable
  public Boolean getPremiumIO() {
    return premiumIO;
  }



  /**
   * The number of vCPUs supported by the virtual machine size.
   * @return vCPUs
   */
  @javax.annotation.Nullable
  public Integer getvCPUs() {
    return vCPUs;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineSize virtualMachineSize = (VirtualMachineSize) o;
    return Objects.equals(this.family, virtualMachineSize.family) &&
        Objects.equals(this.lowPriorityCapable, virtualMachineSize.lowPriorityCapable) &&
        Objects.equals(this.maxResourceVolumeMB, virtualMachineSize.maxResourceVolumeMB) &&
        Objects.equals(this.memoryGB, virtualMachineSize.memoryGB) &&
        Objects.equals(this.name, virtualMachineSize.name) &&
        Objects.equals(this.osVhdSizeMB, virtualMachineSize.osVhdSizeMB) &&
        Objects.equals(this.premiumIO, virtualMachineSize.premiumIO) &&
        Objects.equals(this.vCPUs, virtualMachineSize.vCPUs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(family, lowPriorityCapable, maxResourceVolumeMB, memoryGB, name, osVhdSizeMB, premiumIO, vCPUs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineSize {\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    lowPriorityCapable: ").append(toIndentedString(lowPriorityCapable)).append("\n");
    sb.append("    maxResourceVolumeMB: ").append(toIndentedString(maxResourceVolumeMB)).append("\n");
    sb.append("    memoryGB: ").append(toIndentedString(memoryGB)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osVhdSizeMB: ").append(toIndentedString(osVhdSizeMB)).append("\n");
    sb.append("    premiumIO: ").append(toIndentedString(premiumIO)).append("\n");
    sb.append("    vCPUs: ").append(toIndentedString(vCPUs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("family");
    openapiFields.add("lowPriorityCapable");
    openapiFields.add("maxResourceVolumeMB");
    openapiFields.add("memoryGB");
    openapiFields.add("name");
    openapiFields.add("osVhdSizeMB");
    openapiFields.add("premiumIO");
    openapiFields.add("vCPUs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineSize
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineSize.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineSize is not found in the empty JSON string", VirtualMachineSize.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineSize.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineSize` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("family") != null && !jsonObj.get("family").isJsonNull()) && !jsonObj.get("family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineSize.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineSize' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineSize> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineSize.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineSize>() {
           @Override
           public void write(JsonWriter out, VirtualMachineSize value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineSize read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineSize given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineSize
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineSize
   */
  public static VirtualMachineSize fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineSize.class);
  }

  /**
   * Convert an instance of VirtualMachineSize to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

