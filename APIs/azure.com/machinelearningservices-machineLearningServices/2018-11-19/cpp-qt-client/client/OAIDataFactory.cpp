/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-11-19
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataFactory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataFactory::OAIDataFactory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataFactory::OAIDataFactory() {
    this->initializeModel();
}

OAIDataFactory::~OAIDataFactory() {}

void OAIDataFactory::initializeModel() {

    m_compute_location_isSet = false;
    m_compute_location_isValid = false;

    m_compute_type_isSet = false;
    m_compute_type_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_attached_compute_isSet = false;
    m_is_attached_compute_isValid = false;

    m_modified_on_isSet = false;
    m_modified_on_isValid = false;

    m_provisioning_errors_isSet = false;
    m_provisioning_errors_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;
}

void OAIDataFactory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataFactory::fromJsonObject(QJsonObject json) {

    m_compute_location_isValid = ::OpenAPI::fromJsonValue(m_compute_location, json[QString("computeLocation")]);
    m_compute_location_isSet = !json[QString("computeLocation")].isNull() && m_compute_location_isValid;

    m_compute_type_isValid = ::OpenAPI::fromJsonValue(m_compute_type, json[QString("computeType")]);
    m_compute_type_isSet = !json[QString("computeType")].isNull() && m_compute_type_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_attached_compute_isValid = ::OpenAPI::fromJsonValue(m_is_attached_compute, json[QString("isAttachedCompute")]);
    m_is_attached_compute_isSet = !json[QString("isAttachedCompute")].isNull() && m_is_attached_compute_isValid;

    m_modified_on_isValid = ::OpenAPI::fromJsonValue(m_modified_on, json[QString("modifiedOn")]);
    m_modified_on_isSet = !json[QString("modifiedOn")].isNull() && m_modified_on_isValid;

    m_provisioning_errors_isValid = ::OpenAPI::fromJsonValue(m_provisioning_errors, json[QString("provisioningErrors")]);
    m_provisioning_errors_isSet = !json[QString("provisioningErrors")].isNull() && m_provisioning_errors_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;
}

QString OAIDataFactory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataFactory::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_location_isSet) {
        obj.insert(QString("computeLocation"), ::OpenAPI::toJsonValue(m_compute_location));
    }
    if (m_compute_type.isSet()) {
        obj.insert(QString("computeType"), ::OpenAPI::toJsonValue(m_compute_type));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_attached_compute_isSet) {
        obj.insert(QString("isAttachedCompute"), ::OpenAPI::toJsonValue(m_is_attached_compute));
    }
    if (m_modified_on_isSet) {
        obj.insert(QString("modifiedOn"), ::OpenAPI::toJsonValue(m_modified_on));
    }
    if (m_provisioning_errors.size() > 0) {
        obj.insert(QString("provisioningErrors"), ::OpenAPI::toJsonValue(m_provisioning_errors));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    return obj;
}

QString OAIDataFactory::getComputeLocation() const {
    return m_compute_location;
}
void OAIDataFactory::setComputeLocation(const QString &compute_location) {
    m_compute_location = compute_location;
    m_compute_location_isSet = true;
}

bool OAIDataFactory::is_compute_location_Set() const{
    return m_compute_location_isSet;
}

bool OAIDataFactory::is_compute_location_Valid() const{
    return m_compute_location_isValid;
}

OAIComputeType OAIDataFactory::getComputeType() const {
    return m_compute_type;
}
void OAIDataFactory::setComputeType(const OAIComputeType &compute_type) {
    m_compute_type = compute_type;
    m_compute_type_isSet = true;
}

bool OAIDataFactory::is_compute_type_Set() const{
    return m_compute_type_isSet;
}

bool OAIDataFactory::is_compute_type_Valid() const{
    return m_compute_type_isValid;
}

QDateTime OAIDataFactory::getCreatedOn() const {
    return m_created_on;
}
void OAIDataFactory::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIDataFactory::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIDataFactory::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIDataFactory::getDescription() const {
    return m_description;
}
void OAIDataFactory::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDataFactory::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDataFactory::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIDataFactory::isIsAttachedCompute() const {
    return m_is_attached_compute;
}
void OAIDataFactory::setIsAttachedCompute(const bool &is_attached_compute) {
    m_is_attached_compute = is_attached_compute;
    m_is_attached_compute_isSet = true;
}

bool OAIDataFactory::is_is_attached_compute_Set() const{
    return m_is_attached_compute_isSet;
}

bool OAIDataFactory::is_is_attached_compute_Valid() const{
    return m_is_attached_compute_isValid;
}

QDateTime OAIDataFactory::getModifiedOn() const {
    return m_modified_on;
}
void OAIDataFactory::setModifiedOn(const QDateTime &modified_on) {
    m_modified_on = modified_on;
    m_modified_on_isSet = true;
}

bool OAIDataFactory::is_modified_on_Set() const{
    return m_modified_on_isSet;
}

bool OAIDataFactory::is_modified_on_Valid() const{
    return m_modified_on_isValid;
}

QList<OAIMachineLearningServiceError> OAIDataFactory::getProvisioningErrors() const {
    return m_provisioning_errors;
}
void OAIDataFactory::setProvisioningErrors(const QList<OAIMachineLearningServiceError> &provisioning_errors) {
    m_provisioning_errors = provisioning_errors;
    m_provisioning_errors_isSet = true;
}

bool OAIDataFactory::is_provisioning_errors_Set() const{
    return m_provisioning_errors_isSet;
}

bool OAIDataFactory::is_provisioning_errors_Valid() const{
    return m_provisioning_errors_isValid;
}

QString OAIDataFactory::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDataFactory::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDataFactory::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDataFactory::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIDataFactory::getResourceId() const {
    return m_resource_id;
}
void OAIDataFactory::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIDataFactory::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIDataFactory::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

bool OAIDataFactory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_attached_compute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataFactory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compute_type_isValid && true;
}

} // namespace OpenAPI
