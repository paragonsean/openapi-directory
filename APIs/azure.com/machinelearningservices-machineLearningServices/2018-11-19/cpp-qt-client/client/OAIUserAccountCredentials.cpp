/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-11-19
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAccountCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAccountCredentials::OAIUserAccountCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAccountCredentials::OAIUserAccountCredentials() {
    this->initializeModel();
}

OAIUserAccountCredentials::~OAIUserAccountCredentials() {}

void OAIUserAccountCredentials::initializeModel() {

    m_admin_user_name_isSet = false;
    m_admin_user_name_isValid = false;

    m_admin_user_password_isSet = false;
    m_admin_user_password_isValid = false;

    m_admin_user_ssh_public_key_isSet = false;
    m_admin_user_ssh_public_key_isValid = false;
}

void OAIUserAccountCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAccountCredentials::fromJsonObject(QJsonObject json) {

    m_admin_user_name_isValid = ::OpenAPI::fromJsonValue(m_admin_user_name, json[QString("adminUserName")]);
    m_admin_user_name_isSet = !json[QString("adminUserName")].isNull() && m_admin_user_name_isValid;

    m_admin_user_password_isValid = ::OpenAPI::fromJsonValue(m_admin_user_password, json[QString("adminUserPassword")]);
    m_admin_user_password_isSet = !json[QString("adminUserPassword")].isNull() && m_admin_user_password_isValid;

    m_admin_user_ssh_public_key_isValid = ::OpenAPI::fromJsonValue(m_admin_user_ssh_public_key, json[QString("adminUserSshPublicKey")]);
    m_admin_user_ssh_public_key_isSet = !json[QString("adminUserSshPublicKey")].isNull() && m_admin_user_ssh_public_key_isValid;
}

QString OAIUserAccountCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAccountCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_user_name_isSet) {
        obj.insert(QString("adminUserName"), ::OpenAPI::toJsonValue(m_admin_user_name));
    }
    if (m_admin_user_password_isSet) {
        obj.insert(QString("adminUserPassword"), ::OpenAPI::toJsonValue(m_admin_user_password));
    }
    if (m_admin_user_ssh_public_key_isSet) {
        obj.insert(QString("adminUserSshPublicKey"), ::OpenAPI::toJsonValue(m_admin_user_ssh_public_key));
    }
    return obj;
}

QString OAIUserAccountCredentials::getAdminUserName() const {
    return m_admin_user_name;
}
void OAIUserAccountCredentials::setAdminUserName(const QString &admin_user_name) {
    m_admin_user_name = admin_user_name;
    m_admin_user_name_isSet = true;
}

bool OAIUserAccountCredentials::is_admin_user_name_Set() const{
    return m_admin_user_name_isSet;
}

bool OAIUserAccountCredentials::is_admin_user_name_Valid() const{
    return m_admin_user_name_isValid;
}

QString OAIUserAccountCredentials::getAdminUserPassword() const {
    return m_admin_user_password;
}
void OAIUserAccountCredentials::setAdminUserPassword(const QString &admin_user_password) {
    m_admin_user_password = admin_user_password;
    m_admin_user_password_isSet = true;
}

bool OAIUserAccountCredentials::is_admin_user_password_Set() const{
    return m_admin_user_password_isSet;
}

bool OAIUserAccountCredentials::is_admin_user_password_Valid() const{
    return m_admin_user_password_isValid;
}

QString OAIUserAccountCredentials::getAdminUserSshPublicKey() const {
    return m_admin_user_ssh_public_key;
}
void OAIUserAccountCredentials::setAdminUserSshPublicKey(const QString &admin_user_ssh_public_key) {
    m_admin_user_ssh_public_key = admin_user_ssh_public_key;
    m_admin_user_ssh_public_key_isSet = true;
}

bool OAIUserAccountCredentials::is_admin_user_ssh_public_key_Set() const{
    return m_admin_user_ssh_public_key_isSet;
}

bool OAIUserAccountCredentials::is_admin_user_ssh_public_key_Valid() const{
    return m_admin_user_ssh_public_key_isValid;
}

bool OAIUserAccountCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_user_ssh_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAccountCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_admin_user_name_isValid && true;
}

} // namespace OpenAPI
