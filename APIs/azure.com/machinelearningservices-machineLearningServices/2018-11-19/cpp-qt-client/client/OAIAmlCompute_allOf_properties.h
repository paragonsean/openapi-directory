/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-11-19
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAmlCompute_allOf_properties.h
 *
 * AML Compute properties
 */

#ifndef OAIAmlCompute_allOf_properties_H
#define OAIAmlCompute_allOf_properties_H

#include <QJsonObject>

#include "OAIMachineLearningServiceError.h"
#include "OAINodeStateCounts.h"
#include "OAIResourceId.h"
#include "OAIScaleSettings.h"
#include "OAIUserAccountCredentials.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMachineLearningServiceError;
class OAINodeStateCounts;
class OAIScaleSettings;
class OAIResourceId;
class OAIUserAccountCredentials;

class OAIAmlCompute_allOf_properties : public OAIObject {
public:
    OAIAmlCompute_allOf_properties();
    OAIAmlCompute_allOf_properties(QString json);
    ~OAIAmlCompute_allOf_properties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAllocationState() const;
    void setAllocationState(const QString &allocation_state);
    bool is_allocation_state_Set() const;
    bool is_allocation_state_Valid() const;

    QDateTime getAllocationStateTransitionTime() const;
    void setAllocationStateTransitionTime(const QDateTime &allocation_state_transition_time);
    bool is_allocation_state_transition_time_Set() const;
    bool is_allocation_state_transition_time_Valid() const;

    qint32 getCurrentNodeCount() const;
    void setCurrentNodeCount(const qint32 &current_node_count);
    bool is_current_node_count_Set() const;
    bool is_current_node_count_Valid() const;

    QList<OAIMachineLearningServiceError> getErrors() const;
    void setErrors(const QList<OAIMachineLearningServiceError> &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    OAINodeStateCounts getNodeStateCounts() const;
    void setNodeStateCounts(const OAINodeStateCounts &node_state_counts);
    bool is_node_state_counts_Set() const;
    bool is_node_state_counts_Valid() const;

    OAIScaleSettings getScaleSettings() const;
    void setScaleSettings(const OAIScaleSettings &scale_settings);
    bool is_scale_settings_Set() const;
    bool is_scale_settings_Valid() const;

    OAIResourceId getSubnet() const;
    void setSubnet(const OAIResourceId &subnet);
    bool is_subnet_Set() const;
    bool is_subnet_Valid() const;

    qint32 getTargetNodeCount() const;
    void setTargetNodeCount(const qint32 &target_node_count);
    bool is_target_node_count_Set() const;
    bool is_target_node_count_Valid() const;

    OAIUserAccountCredentials getUserAccountCredentials() const;
    void setUserAccountCredentials(const OAIUserAccountCredentials &user_account_credentials);
    bool is_user_account_credentials_Set() const;
    bool is_user_account_credentials_Valid() const;

    QString getVmPriority() const;
    void setVmPriority(const QString &vm_priority);
    bool is_vm_priority_Set() const;
    bool is_vm_priority_Valid() const;

    QString getVmSize() const;
    void setVmSize(const QString &vm_size);
    bool is_vm_size_Set() const;
    bool is_vm_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_allocation_state;
    bool m_allocation_state_isSet;
    bool m_allocation_state_isValid;

    QDateTime m_allocation_state_transition_time;
    bool m_allocation_state_transition_time_isSet;
    bool m_allocation_state_transition_time_isValid;

    qint32 m_current_node_count;
    bool m_current_node_count_isSet;
    bool m_current_node_count_isValid;

    QList<OAIMachineLearningServiceError> m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    OAINodeStateCounts m_node_state_counts;
    bool m_node_state_counts_isSet;
    bool m_node_state_counts_isValid;

    OAIScaleSettings m_scale_settings;
    bool m_scale_settings_isSet;
    bool m_scale_settings_isValid;

    OAIResourceId m_subnet;
    bool m_subnet_isSet;
    bool m_subnet_isValid;

    qint32 m_target_node_count;
    bool m_target_node_count_isSet;
    bool m_target_node_count_isValid;

    OAIUserAccountCredentials m_user_account_credentials;
    bool m_user_account_credentials_isSet;
    bool m_user_account_credentials_isValid;

    QString m_vm_priority;
    bool m_vm_priority_isSet;
    bool m_vm_priority_isValid;

    QString m_vm_size;
    bool m_vm_size_isSet;
    bool m_vm_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAmlCompute_allOf_properties)

#endif // OAIAmlCompute_allOf_properties_H
