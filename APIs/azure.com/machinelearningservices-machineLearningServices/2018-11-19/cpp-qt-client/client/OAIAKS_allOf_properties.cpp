/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-11-19
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAKS_allOf_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAKS_allOf_properties::OAIAKS_allOf_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAKS_allOf_properties::OAIAKS_allOf_properties() {
    this->initializeModel();
}

OAIAKS_allOf_properties::~OAIAKS_allOf_properties() {}

void OAIAKS_allOf_properties::initializeModel() {

    m_agent_count_isSet = false;
    m_agent_count_isValid = false;

    m_agent_vm_size_isSet = false;
    m_agent_vm_size_isValid = false;

    m_aks_networking_configuration_isSet = false;
    m_aks_networking_configuration_isValid = false;

    m_cluster_fqdn_isSet = false;
    m_cluster_fqdn_isValid = false;

    m_ssl_configuration_isSet = false;
    m_ssl_configuration_isValid = false;

    m_system_services_isSet = false;
    m_system_services_isValid = false;
}

void OAIAKS_allOf_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAKS_allOf_properties::fromJsonObject(QJsonObject json) {

    m_agent_count_isValid = ::OpenAPI::fromJsonValue(m_agent_count, json[QString("agentCount")]);
    m_agent_count_isSet = !json[QString("agentCount")].isNull() && m_agent_count_isValid;

    m_agent_vm_size_isValid = ::OpenAPI::fromJsonValue(m_agent_vm_size, json[QString("agentVMSize")]);
    m_agent_vm_size_isSet = !json[QString("agentVMSize")].isNull() && m_agent_vm_size_isValid;

    m_aks_networking_configuration_isValid = ::OpenAPI::fromJsonValue(m_aks_networking_configuration, json[QString("aksNetworkingConfiguration")]);
    m_aks_networking_configuration_isSet = !json[QString("aksNetworkingConfiguration")].isNull() && m_aks_networking_configuration_isValid;

    m_cluster_fqdn_isValid = ::OpenAPI::fromJsonValue(m_cluster_fqdn, json[QString("clusterFqdn")]);
    m_cluster_fqdn_isSet = !json[QString("clusterFqdn")].isNull() && m_cluster_fqdn_isValid;

    m_ssl_configuration_isValid = ::OpenAPI::fromJsonValue(m_ssl_configuration, json[QString("sslConfiguration")]);
    m_ssl_configuration_isSet = !json[QString("sslConfiguration")].isNull() && m_ssl_configuration_isValid;

    m_system_services_isValid = ::OpenAPI::fromJsonValue(m_system_services, json[QString("systemServices")]);
    m_system_services_isSet = !json[QString("systemServices")].isNull() && m_system_services_isValid;
}

QString OAIAKS_allOf_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAKS_allOf_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_count_isSet) {
        obj.insert(QString("agentCount"), ::OpenAPI::toJsonValue(m_agent_count));
    }
    if (m_agent_vm_size_isSet) {
        obj.insert(QString("agentVMSize"), ::OpenAPI::toJsonValue(m_agent_vm_size));
    }
    if (m_aks_networking_configuration.isSet()) {
        obj.insert(QString("aksNetworkingConfiguration"), ::OpenAPI::toJsonValue(m_aks_networking_configuration));
    }
    if (m_cluster_fqdn_isSet) {
        obj.insert(QString("clusterFqdn"), ::OpenAPI::toJsonValue(m_cluster_fqdn));
    }
    if (m_ssl_configuration.isSet()) {
        obj.insert(QString("sslConfiguration"), ::OpenAPI::toJsonValue(m_ssl_configuration));
    }
    if (m_system_services.size() > 0) {
        obj.insert(QString("systemServices"), ::OpenAPI::toJsonValue(m_system_services));
    }
    return obj;
}

qint32 OAIAKS_allOf_properties::getAgentCount() const {
    return m_agent_count;
}
void OAIAKS_allOf_properties::setAgentCount(const qint32 &agent_count) {
    m_agent_count = agent_count;
    m_agent_count_isSet = true;
}

bool OAIAKS_allOf_properties::is_agent_count_Set() const{
    return m_agent_count_isSet;
}

bool OAIAKS_allOf_properties::is_agent_count_Valid() const{
    return m_agent_count_isValid;
}

QString OAIAKS_allOf_properties::getAgentVmSize() const {
    return m_agent_vm_size;
}
void OAIAKS_allOf_properties::setAgentVmSize(const QString &agent_vm_size) {
    m_agent_vm_size = agent_vm_size;
    m_agent_vm_size_isSet = true;
}

bool OAIAKS_allOf_properties::is_agent_vm_size_Set() const{
    return m_agent_vm_size_isSet;
}

bool OAIAKS_allOf_properties::is_agent_vm_size_Valid() const{
    return m_agent_vm_size_isValid;
}

OAIAksNetworkingConfiguration OAIAKS_allOf_properties::getAksNetworkingConfiguration() const {
    return m_aks_networking_configuration;
}
void OAIAKS_allOf_properties::setAksNetworkingConfiguration(const OAIAksNetworkingConfiguration &aks_networking_configuration) {
    m_aks_networking_configuration = aks_networking_configuration;
    m_aks_networking_configuration_isSet = true;
}

bool OAIAKS_allOf_properties::is_aks_networking_configuration_Set() const{
    return m_aks_networking_configuration_isSet;
}

bool OAIAKS_allOf_properties::is_aks_networking_configuration_Valid() const{
    return m_aks_networking_configuration_isValid;
}

QString OAIAKS_allOf_properties::getClusterFqdn() const {
    return m_cluster_fqdn;
}
void OAIAKS_allOf_properties::setClusterFqdn(const QString &cluster_fqdn) {
    m_cluster_fqdn = cluster_fqdn;
    m_cluster_fqdn_isSet = true;
}

bool OAIAKS_allOf_properties::is_cluster_fqdn_Set() const{
    return m_cluster_fqdn_isSet;
}

bool OAIAKS_allOf_properties::is_cluster_fqdn_Valid() const{
    return m_cluster_fqdn_isValid;
}

OAISslConfiguration OAIAKS_allOf_properties::getSslConfiguration() const {
    return m_ssl_configuration;
}
void OAIAKS_allOf_properties::setSslConfiguration(const OAISslConfiguration &ssl_configuration) {
    m_ssl_configuration = ssl_configuration;
    m_ssl_configuration_isSet = true;
}

bool OAIAKS_allOf_properties::is_ssl_configuration_Set() const{
    return m_ssl_configuration_isSet;
}

bool OAIAKS_allOf_properties::is_ssl_configuration_Valid() const{
    return m_ssl_configuration_isValid;
}

QList<OAISystemService> OAIAKS_allOf_properties::getSystemServices() const {
    return m_system_services;
}
void OAIAKS_allOf_properties::setSystemServices(const QList<OAISystemService> &system_services) {
    m_system_services = system_services;
    m_system_services_isSet = true;
}

bool OAIAKS_allOf_properties::is_system_services_Set() const{
    return m_system_services_isSet;
}

bool OAIAKS_allOf_properties::is_system_services_Valid() const{
    return m_system_services_isValid;
}

bool OAIAKS_allOf_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aks_networking_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAKS_allOf_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
