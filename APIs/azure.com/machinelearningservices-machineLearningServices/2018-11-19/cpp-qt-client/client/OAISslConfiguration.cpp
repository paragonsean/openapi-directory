/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2018-11-19
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISslConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISslConfiguration::OAISslConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISslConfiguration::OAISslConfiguration() {
    this->initializeModel();
}

OAISslConfiguration::~OAISslConfiguration() {}

void OAISslConfiguration::initializeModel() {

    m_cert_isSet = false;
    m_cert_isValid = false;

    m_cname_isSet = false;
    m_cname_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISslConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISslConfiguration::fromJsonObject(QJsonObject json) {

    m_cert_isValid = ::OpenAPI::fromJsonValue(m_cert, json[QString("cert")]);
    m_cert_isSet = !json[QString("cert")].isNull() && m_cert_isValid;

    m_cname_isValid = ::OpenAPI::fromJsonValue(m_cname, json[QString("cname")]);
    m_cname_isSet = !json[QString("cname")].isNull() && m_cname_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISslConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISslConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_isSet) {
        obj.insert(QString("cert"), ::OpenAPI::toJsonValue(m_cert));
    }
    if (m_cname_isSet) {
        obj.insert(QString("cname"), ::OpenAPI::toJsonValue(m_cname));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAISslConfiguration::getCert() const {
    return m_cert;
}
void OAISslConfiguration::setCert(const QString &cert) {
    m_cert = cert;
    m_cert_isSet = true;
}

bool OAISslConfiguration::is_cert_Set() const{
    return m_cert_isSet;
}

bool OAISslConfiguration::is_cert_Valid() const{
    return m_cert_isValid;
}

QString OAISslConfiguration::getCname() const {
    return m_cname;
}
void OAISslConfiguration::setCname(const QString &cname) {
    m_cname = cname;
    m_cname_isSet = true;
}

bool OAISslConfiguration::is_cname_Set() const{
    return m_cname_isSet;
}

bool OAISslConfiguration::is_cname_Valid() const{
    return m_cname_isValid;
}

QString OAISslConfiguration::getKey() const {
    return m_key;
}
void OAISslConfiguration::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISslConfiguration::is_key_Set() const{
    return m_key_isSet;
}

bool OAISslConfiguration::is_key_Valid() const{
    return m_key_isValid;
}

QString OAISslConfiguration::getStatus() const {
    return m_status;
}
void OAISslConfiguration::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISslConfiguration::is_status_Set() const{
    return m_status_isSet;
}

bool OAISslConfiguration::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISslConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISslConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
