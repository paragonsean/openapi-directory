/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINodeStateCounts.h
 *
 * Counts of various compute node states on the amlCompute.
 */

#ifndef OAINodeStateCounts_H
#define OAINodeStateCounts_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINodeStateCounts : public OAIObject {
public:
    OAINodeStateCounts();
    OAINodeStateCounts(QString json);
    ~OAINodeStateCounts() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getIdleNodeCount() const;
    void setIdleNodeCount(const qint32 &idle_node_count);
    bool is_idle_node_count_Set() const;
    bool is_idle_node_count_Valid() const;

    qint32 getLeavingNodeCount() const;
    void setLeavingNodeCount(const qint32 &leaving_node_count);
    bool is_leaving_node_count_Set() const;
    bool is_leaving_node_count_Valid() const;

    qint32 getPreemptedNodeCount() const;
    void setPreemptedNodeCount(const qint32 &preempted_node_count);
    bool is_preempted_node_count_Set() const;
    bool is_preempted_node_count_Valid() const;

    qint32 getPreparingNodeCount() const;
    void setPreparingNodeCount(const qint32 &preparing_node_count);
    bool is_preparing_node_count_Set() const;
    bool is_preparing_node_count_Valid() const;

    qint32 getRunningNodeCount() const;
    void setRunningNodeCount(const qint32 &running_node_count);
    bool is_running_node_count_Set() const;
    bool is_running_node_count_Valid() const;

    qint32 getUnusableNodeCount() const;
    void setUnusableNodeCount(const qint32 &unusable_node_count);
    bool is_unusable_node_count_Set() const;
    bool is_unusable_node_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_idle_node_count;
    bool m_idle_node_count_isSet;
    bool m_idle_node_count_isValid;

    qint32 m_leaving_node_count;
    bool m_leaving_node_count_isSet;
    bool m_leaving_node_count_isValid;

    qint32 m_preempted_node_count;
    bool m_preempted_node_count_isSet;
    bool m_preempted_node_count_isValid;

    qint32 m_preparing_node_count;
    bool m_preparing_node_count_isSet;
    bool m_preparing_node_count_isValid;

    qint32 m_running_node_count;
    bool m_running_node_count_isSet;
    bool m_running_node_count_isValid;

    qint32 m_unusable_node_count;
    bool m_unusable_node_count_isSet;
    bool m_unusable_node_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINodeStateCounts)

#endif // OAINodeStateCounts_H
