/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyVaultProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyVaultProperties::OAIKeyVaultProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyVaultProperties::OAIKeyVaultProperties() {
    this->initializeModel();
}

OAIKeyVaultProperties::~OAIKeyVaultProperties() {}

void OAIKeyVaultProperties::initializeModel() {

    m_identity_client_id_isSet = false;
    m_identity_client_id_isValid = false;

    m_key_identifier_isSet = false;
    m_key_identifier_isValid = false;

    m_key_vault_arm_id_isSet = false;
    m_key_vault_arm_id_isValid = false;
}

void OAIKeyVaultProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyVaultProperties::fromJsonObject(QJsonObject json) {

    m_identity_client_id_isValid = ::OpenAPI::fromJsonValue(m_identity_client_id, json[QString("identityClientId")]);
    m_identity_client_id_isSet = !json[QString("identityClientId")].isNull() && m_identity_client_id_isValid;

    m_key_identifier_isValid = ::OpenAPI::fromJsonValue(m_key_identifier, json[QString("keyIdentifier")]);
    m_key_identifier_isSet = !json[QString("keyIdentifier")].isNull() && m_key_identifier_isValid;

    m_key_vault_arm_id_isValid = ::OpenAPI::fromJsonValue(m_key_vault_arm_id, json[QString("keyVaultArmId")]);
    m_key_vault_arm_id_isSet = !json[QString("keyVaultArmId")].isNull() && m_key_vault_arm_id_isValid;
}

QString OAIKeyVaultProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyVaultProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_client_id_isSet) {
        obj.insert(QString("identityClientId"), ::OpenAPI::toJsonValue(m_identity_client_id));
    }
    if (m_key_identifier_isSet) {
        obj.insert(QString("keyIdentifier"), ::OpenAPI::toJsonValue(m_key_identifier));
    }
    if (m_key_vault_arm_id_isSet) {
        obj.insert(QString("keyVaultArmId"), ::OpenAPI::toJsonValue(m_key_vault_arm_id));
    }
    return obj;
}

QString OAIKeyVaultProperties::getIdentityClientId() const {
    return m_identity_client_id;
}
void OAIKeyVaultProperties::setIdentityClientId(const QString &identity_client_id) {
    m_identity_client_id = identity_client_id;
    m_identity_client_id_isSet = true;
}

bool OAIKeyVaultProperties::is_identity_client_id_Set() const{
    return m_identity_client_id_isSet;
}

bool OAIKeyVaultProperties::is_identity_client_id_Valid() const{
    return m_identity_client_id_isValid;
}

QString OAIKeyVaultProperties::getKeyIdentifier() const {
    return m_key_identifier;
}
void OAIKeyVaultProperties::setKeyIdentifier(const QString &key_identifier) {
    m_key_identifier = key_identifier;
    m_key_identifier_isSet = true;
}

bool OAIKeyVaultProperties::is_key_identifier_Set() const{
    return m_key_identifier_isSet;
}

bool OAIKeyVaultProperties::is_key_identifier_Valid() const{
    return m_key_identifier_isValid;
}

QString OAIKeyVaultProperties::getKeyVaultArmId() const {
    return m_key_vault_arm_id;
}
void OAIKeyVaultProperties::setKeyVaultArmId(const QString &key_vault_arm_id) {
    m_key_vault_arm_id = key_vault_arm_id;
    m_key_vault_arm_id_isSet = true;
}

bool OAIKeyVaultProperties::is_key_vault_arm_id_Set() const{
    return m_key_vault_arm_id_isSet;
}

bool OAIKeyVaultProperties::is_key_vault_arm_id_Valid() const{
    return m_key_vault_arm_id_isValid;
}

bool OAIKeyVaultProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_vault_arm_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyVaultProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_identifier_isValid && m_key_vault_arm_id_isValid && true;
}

} // namespace OpenAPI
