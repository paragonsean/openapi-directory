/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMachineLearningComputesApi_H
#define OAI_OAIMachineLearningComputesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAmlComputeNodesInformation.h"
#include "OAIClusterUpdateParameters.h"
#include "OAIComputeResource.h"
#include "OAIComputeSecrets.h"
#include "OAIMachineLearningServiceError.h"
#include "OAIPaginatedComputeResourcesList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMachineLearningComputesApi : public QObject {
    Q_OBJECT

public:
    OAIMachineLearningComputesApi(const int timeOut = 0);
    ~OAIMachineLearningComputesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  compute_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIComputeResource [required]
    */
    virtual void machineLearningComputeCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &compute_name, const QString &api_version, const OAIComputeResource &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  compute_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  underlying_resource_action QString [required]
    */
    virtual void machineLearningComputeDelete(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &compute_name, const QString &api_version, const QString &underlying_resource_action);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  compute_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void machineLearningComputeGet(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &compute_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void machineLearningComputeListByWorkspace(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  compute_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void machineLearningComputeListKeys(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &compute_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  compute_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void machineLearningComputeListNodes(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &compute_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  compute_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIClusterUpdateParameters [required]
    */
    virtual void machineLearningComputeUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &compute_name, const QString &api_version, const OAIClusterUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void machineLearningComputeCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void machineLearningComputeDeleteCallback(OAIHttpRequestWorker *worker);
    void machineLearningComputeGetCallback(OAIHttpRequestWorker *worker);
    void machineLearningComputeListByWorkspaceCallback(OAIHttpRequestWorker *worker);
    void machineLearningComputeListKeysCallback(OAIHttpRequestWorker *worker);
    void machineLearningComputeListNodesCallback(OAIHttpRequestWorker *worker);
    void machineLearningComputeUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void machineLearningComputeCreateOrUpdateSignal(OAIComputeResource summary);
    void machineLearningComputeDeleteSignal();
    void machineLearningComputeGetSignal(OAIComputeResource summary);
    void machineLearningComputeListByWorkspaceSignal(OAIPaginatedComputeResourcesList summary);
    void machineLearningComputeListKeysSignal(OAIComputeSecrets summary);
    void machineLearningComputeListNodesSignal(OAIAmlComputeNodesInformation summary);
    void machineLearningComputeUpdateSignal(OAIComputeResource summary);


    void machineLearningComputeCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIComputeResource summary);
    void machineLearningComputeDeleteSignalFull(OAIHttpRequestWorker *worker);
    void machineLearningComputeGetSignalFull(OAIHttpRequestWorker *worker, OAIComputeResource summary);
    void machineLearningComputeListByWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedComputeResourcesList summary);
    void machineLearningComputeListKeysSignalFull(OAIHttpRequestWorker *worker, OAIComputeSecrets summary);
    void machineLearningComputeListNodesSignalFull(OAIHttpRequestWorker *worker, OAIAmlComputeNodesInformation summary);
    void machineLearningComputeUpdateSignalFull(OAIHttpRequestWorker *worker, OAIComputeResource summary);

    Q_DECL_DEPRECATED_X("Use machineLearningComputeCreateOrUpdateSignalError() instead")
    void machineLearningComputeCreateOrUpdateSignalE(OAIComputeResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeCreateOrUpdateSignalError(OAIComputeResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machineLearningComputeDeleteSignalError() instead")
    void machineLearningComputeDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machineLearningComputeGetSignalError() instead")
    void machineLearningComputeGetSignalE(OAIComputeResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeGetSignalError(OAIComputeResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machineLearningComputeListByWorkspaceSignalError() instead")
    void machineLearningComputeListByWorkspaceSignalE(OAIPaginatedComputeResourcesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeListByWorkspaceSignalError(OAIPaginatedComputeResourcesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machineLearningComputeListKeysSignalError() instead")
    void machineLearningComputeListKeysSignalE(OAIComputeSecrets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeListKeysSignalError(OAIComputeSecrets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machineLearningComputeListNodesSignalError() instead")
    void machineLearningComputeListNodesSignalE(OAIAmlComputeNodesInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeListNodesSignalError(OAIAmlComputeNodesInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machineLearningComputeUpdateSignalError() instead")
    void machineLearningComputeUpdateSignalE(OAIComputeResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeUpdateSignalError(OAIComputeResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use machineLearningComputeCreateOrUpdateSignalErrorFull() instead")
    void machineLearningComputeCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machineLearningComputeDeleteSignalErrorFull() instead")
    void machineLearningComputeDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machineLearningComputeGetSignalErrorFull() instead")
    void machineLearningComputeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machineLearningComputeListByWorkspaceSignalErrorFull() instead")
    void machineLearningComputeListByWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeListByWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machineLearningComputeListKeysSignalErrorFull() instead")
    void machineLearningComputeListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machineLearningComputeListNodesSignalErrorFull() instead")
    void machineLearningComputeListNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeListNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machineLearningComputeUpdateSignalErrorFull() instead")
    void machineLearningComputeUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machineLearningComputeUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
