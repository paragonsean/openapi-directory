/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualMachineSize.h
 *
 * Describes the properties of a VM size.
 */

#ifndef OAIVirtualMachineSize_H
#define OAIVirtualMachineSize_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVirtualMachineSize : public OAIObject {
public:
    OAIVirtualMachineSize();
    OAIVirtualMachineSize(QString json);
    ~OAIVirtualMachineSize() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFamily() const;
    void setFamily(const QString &family);
    bool is_family_Set() const;
    bool is_family_Valid() const;

    qint32 getGpus() const;
    void setGpus(const qint32 &gpus);
    bool is_gpus_Set() const;
    bool is_gpus_Valid() const;

    bool isLowPriorityCapable() const;
    void setLowPriorityCapable(const bool &low_priority_capable);
    bool is_low_priority_capable_Set() const;
    bool is_low_priority_capable_Valid() const;

    qint32 getMaxResourceVolumeMb() const;
    void setMaxResourceVolumeMb(const qint32 &max_resource_volume_mb);
    bool is_max_resource_volume_mb_Set() const;
    bool is_max_resource_volume_mb_Valid() const;

    double getMemoryGb() const;
    void setMemoryGb(const double &memory_gb);
    bool is_memory_gb_Set() const;
    bool is_memory_gb_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getOsVhdSizeMb() const;
    void setOsVhdSizeMb(const qint32 &os_vhd_size_mb);
    bool is_os_vhd_size_mb_Set() const;
    bool is_os_vhd_size_mb_Valid() const;

    bool isPremiumIo() const;
    void setPremiumIo(const bool &premium_io);
    bool is_premium_io_Set() const;
    bool is_premium_io_Valid() const;

    qint32 getVCpus() const;
    void setVCpus(const qint32 &v_cpus);
    bool is_v_cpus_Set() const;
    bool is_v_cpus_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_family;
    bool m_family_isSet;
    bool m_family_isValid;

    qint32 m_gpus;
    bool m_gpus_isSet;
    bool m_gpus_isValid;

    bool m_low_priority_capable;
    bool m_low_priority_capable_isSet;
    bool m_low_priority_capable_isValid;

    qint32 m_max_resource_volume_mb;
    bool m_max_resource_volume_mb_isSet;
    bool m_max_resource_volume_mb_isValid;

    double m_memory_gb;
    bool m_memory_gb_isSet;
    bool m_memory_gb_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_os_vhd_size_mb;
    bool m_os_vhd_size_mb_isSet;
    bool m_os_vhd_size_mb_isValid;

    bool m_premium_io;
    bool m_premium_io_isSet;
    bool m_premium_io_isValid;

    qint32 m_v_cpus;
    bool m_v_cpus_isSet;
    bool m_v_cpus_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualMachineSize)

#endif // OAIVirtualMachineSize_H
