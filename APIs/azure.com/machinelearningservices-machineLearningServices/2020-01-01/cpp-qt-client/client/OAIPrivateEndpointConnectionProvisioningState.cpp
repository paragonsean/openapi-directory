/**
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateEndpointConnectionProvisioningState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateEndpointConnectionProvisioningState::OAIPrivateEndpointConnectionProvisioningState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateEndpointConnectionProvisioningState::OAIPrivateEndpointConnectionProvisioningState() {
    this->initializeModel();
}

OAIPrivateEndpointConnectionProvisioningState::~OAIPrivateEndpointConnectionProvisioningState() {}

void OAIPrivateEndpointConnectionProvisioningState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPrivateEndpointConnectionProvisioningState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPrivateEndpointConnectionProvisioningState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Succeeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPrivateEndpointConnectionProvisioningState::SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Creating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPrivateEndpointConnectionProvisioningState::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPrivateEndpointConnectionProvisioningState::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPrivateEndpointConnectionProvisioningState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPrivateEndpointConnectionProvisioningState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPrivateEndpointConnectionProvisioningState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPrivateEndpointConnectionProvisioningState::SUCCEEDED:
            val = "Succeeded";
            break;
        case eOAIPrivateEndpointConnectionProvisioningState::CREATING:
            val = "Creating";
            break;
        case eOAIPrivateEndpointConnectionProvisioningState::DELETING:
            val = "Deleting";
            break;
        case eOAIPrivateEndpointConnectionProvisioningState::FAILED:
            val = "Failed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPrivateEndpointConnectionProvisioningState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPrivateEndpointConnectionProvisioningState::eOAIPrivateEndpointConnectionProvisioningState OAIPrivateEndpointConnectionProvisioningState::getValue() const {
    return m_value;
}

void OAIPrivateEndpointConnectionProvisioningState::setValue(const OAIPrivateEndpointConnectionProvisioningState::eOAIPrivateEndpointConnectionProvisioningState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPrivateEndpointConnectionProvisioningState::isSet() const {
    
    return m_value_isSet;
}

bool OAIPrivateEndpointConnectionProvisioningState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
