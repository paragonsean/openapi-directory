/*
 * Azure Machine Learning Workspaces
 * These APIs allow end users to operate on Azure Machine Learning Workspace resources.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AksNetworkingConfiguration;
import org.openapitools.client.model.SslConfiguration;
import org.openapitools.client.model.SystemService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AKS properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:02.866872-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AKSAllOfProperties {
  public static final String SERIALIZED_NAME_AGENT_COUNT = "agentCount";
  @SerializedName(SERIALIZED_NAME_AGENT_COUNT)
  private Integer agentCount;

  public static final String SERIALIZED_NAME_AGENT_V_M_SIZE = "agentVMSize";
  @SerializedName(SERIALIZED_NAME_AGENT_V_M_SIZE)
  private String agentVMSize;

  public static final String SERIALIZED_NAME_AKS_NETWORKING_CONFIGURATION = "aksNetworkingConfiguration";
  @SerializedName(SERIALIZED_NAME_AKS_NETWORKING_CONFIGURATION)
  private AksNetworkingConfiguration aksNetworkingConfiguration;

  public static final String SERIALIZED_NAME_CLUSTER_FQDN = "clusterFqdn";
  @SerializedName(SERIALIZED_NAME_CLUSTER_FQDN)
  private String clusterFqdn;

  public static final String SERIALIZED_NAME_SSL_CONFIGURATION = "sslConfiguration";
  @SerializedName(SERIALIZED_NAME_SSL_CONFIGURATION)
  private SslConfiguration sslConfiguration;

  public static final String SERIALIZED_NAME_SYSTEM_SERVICES = "systemServices";
  @SerializedName(SERIALIZED_NAME_SYSTEM_SERVICES)
  private List<SystemService> systemServices = new ArrayList<>();

  public AKSAllOfProperties() {
  }

  public AKSAllOfProperties(
     List<SystemService> systemServices
  ) {
    this();
    this.systemServices = systemServices;
  }

  public AKSAllOfProperties agentCount(Integer agentCount) {
    this.agentCount = agentCount;
    return this;
  }

  /**
   * Number of agents
   * minimum: 1
   * @return agentCount
   */
  @javax.annotation.Nullable
  public Integer getAgentCount() {
    return agentCount;
  }

  public void setAgentCount(Integer agentCount) {
    this.agentCount = agentCount;
  }


  public AKSAllOfProperties agentVMSize(String agentVMSize) {
    this.agentVMSize = agentVMSize;
    return this;
  }

  /**
   * Agent virtual machine size
   * @return agentVMSize
   */
  @javax.annotation.Nullable
  public String getAgentVMSize() {
    return agentVMSize;
  }

  public void setAgentVMSize(String agentVMSize) {
    this.agentVMSize = agentVMSize;
  }


  public AKSAllOfProperties aksNetworkingConfiguration(AksNetworkingConfiguration aksNetworkingConfiguration) {
    this.aksNetworkingConfiguration = aksNetworkingConfiguration;
    return this;
  }

  /**
   * Get aksNetworkingConfiguration
   * @return aksNetworkingConfiguration
   */
  @javax.annotation.Nullable
  public AksNetworkingConfiguration getAksNetworkingConfiguration() {
    return aksNetworkingConfiguration;
  }

  public void setAksNetworkingConfiguration(AksNetworkingConfiguration aksNetworkingConfiguration) {
    this.aksNetworkingConfiguration = aksNetworkingConfiguration;
  }


  public AKSAllOfProperties clusterFqdn(String clusterFqdn) {
    this.clusterFqdn = clusterFqdn;
    return this;
  }

  /**
   * Cluster full qualified domain name
   * @return clusterFqdn
   */
  @javax.annotation.Nullable
  public String getClusterFqdn() {
    return clusterFqdn;
  }

  public void setClusterFqdn(String clusterFqdn) {
    this.clusterFqdn = clusterFqdn;
  }


  public AKSAllOfProperties sslConfiguration(SslConfiguration sslConfiguration) {
    this.sslConfiguration = sslConfiguration;
    return this;
  }

  /**
   * Get sslConfiguration
   * @return sslConfiguration
   */
  @javax.annotation.Nullable
  public SslConfiguration getSslConfiguration() {
    return sslConfiguration;
  }

  public void setSslConfiguration(SslConfiguration sslConfiguration) {
    this.sslConfiguration = sslConfiguration;
  }


  /**
   * System services
   * @return systemServices
   */
  @javax.annotation.Nullable
  public List<SystemService> getSystemServices() {
    return systemServices;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AKSAllOfProperties akSAllOfProperties = (AKSAllOfProperties) o;
    return Objects.equals(this.agentCount, akSAllOfProperties.agentCount) &&
        Objects.equals(this.agentVMSize, akSAllOfProperties.agentVMSize) &&
        Objects.equals(this.aksNetworkingConfiguration, akSAllOfProperties.aksNetworkingConfiguration) &&
        Objects.equals(this.clusterFqdn, akSAllOfProperties.clusterFqdn) &&
        Objects.equals(this.sslConfiguration, akSAllOfProperties.sslConfiguration) &&
        Objects.equals(this.systemServices, akSAllOfProperties.systemServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentCount, agentVMSize, aksNetworkingConfiguration, clusterFqdn, sslConfiguration, systemServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AKSAllOfProperties {\n");
    sb.append("    agentCount: ").append(toIndentedString(agentCount)).append("\n");
    sb.append("    agentVMSize: ").append(toIndentedString(agentVMSize)).append("\n");
    sb.append("    aksNetworkingConfiguration: ").append(toIndentedString(aksNetworkingConfiguration)).append("\n");
    sb.append("    clusterFqdn: ").append(toIndentedString(clusterFqdn)).append("\n");
    sb.append("    sslConfiguration: ").append(toIndentedString(sslConfiguration)).append("\n");
    sb.append("    systemServices: ").append(toIndentedString(systemServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentCount");
    openapiFields.add("agentVMSize");
    openapiFields.add("aksNetworkingConfiguration");
    openapiFields.add("clusterFqdn");
    openapiFields.add("sslConfiguration");
    openapiFields.add("systemServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AKSAllOfProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AKSAllOfProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AKSAllOfProperties is not found in the empty JSON string", AKSAllOfProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AKSAllOfProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AKSAllOfProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agentVMSize") != null && !jsonObj.get("agentVMSize").isJsonNull()) && !jsonObj.get("agentVMSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentVMSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentVMSize").toString()));
      }
      // validate the optional field `aksNetworkingConfiguration`
      if (jsonObj.get("aksNetworkingConfiguration") != null && !jsonObj.get("aksNetworkingConfiguration").isJsonNull()) {
        AksNetworkingConfiguration.validateJsonElement(jsonObj.get("aksNetworkingConfiguration"));
      }
      if ((jsonObj.get("clusterFqdn") != null && !jsonObj.get("clusterFqdn").isJsonNull()) && !jsonObj.get("clusterFqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterFqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterFqdn").toString()));
      }
      // validate the optional field `sslConfiguration`
      if (jsonObj.get("sslConfiguration") != null && !jsonObj.get("sslConfiguration").isJsonNull()) {
        SslConfiguration.validateJsonElement(jsonObj.get("sslConfiguration"));
      }
      if (jsonObj.get("systemServices") != null && !jsonObj.get("systemServices").isJsonNull()) {
        JsonArray jsonArraysystemServices = jsonObj.getAsJsonArray("systemServices");
        if (jsonArraysystemServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("systemServices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `systemServices` to be an array in the JSON string but got `%s`", jsonObj.get("systemServices").toString()));
          }

          // validate the optional field `systemServices` (array)
          for (int i = 0; i < jsonArraysystemServices.size(); i++) {
            SystemService.validateJsonElement(jsonArraysystemServices.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AKSAllOfProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AKSAllOfProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AKSAllOfProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AKSAllOfProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AKSAllOfProperties>() {
           @Override
           public void write(JsonWriter out, AKSAllOfProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AKSAllOfProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AKSAllOfProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AKSAllOfProperties
   * @throws IOException if the JSON string is invalid with respect to AKSAllOfProperties
   */
  public static AKSAllOfProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AKSAllOfProperties.class);
  }

  /**
   * Convert an instance of AKSAllOfProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

