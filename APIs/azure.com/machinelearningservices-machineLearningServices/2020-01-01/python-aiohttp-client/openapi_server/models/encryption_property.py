# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_vault_properties import KeyVaultProperties
from openapi_server import util


class EncryptionProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_vault_properties: KeyVaultProperties=None, status: str=None):
        """EncryptionProperty - a model defined in OpenAPI

        :param key_vault_properties: The key_vault_properties of this EncryptionProperty.
        :param status: The status of this EncryptionProperty.
        """
        self.openapi_types = {
            'key_vault_properties': KeyVaultProperties,
            'status': str
        }

        self.attribute_map = {
            'key_vault_properties': 'keyVaultProperties',
            'status': 'status'
        }

        self._key_vault_properties = key_vault_properties
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionProperty of this EncryptionProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_vault_properties(self):
        """Gets the key_vault_properties of this EncryptionProperty.


        :return: The key_vault_properties of this EncryptionProperty.
        :rtype: KeyVaultProperties
        """
        return self._key_vault_properties

    @key_vault_properties.setter
    def key_vault_properties(self, key_vault_properties):
        """Sets the key_vault_properties of this EncryptionProperty.


        :param key_vault_properties: The key_vault_properties of this EncryptionProperty.
        :type key_vault_properties: KeyVaultProperties
        """
        if key_vault_properties is None:
            raise ValueError("Invalid value for `key_vault_properties`, must not be `None`")

        self._key_vault_properties = key_vault_properties

    @property
    def status(self):
        """Gets the status of this EncryptionProperty.

        Indicates whether or not the encryption is enabled for the workspace.

        :return: The status of this EncryptionProperty.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EncryptionProperty.

        Indicates whether or not the encryption is enabled for the workspace.

        :param status: The status of this EncryptionProperty.
        :type status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
