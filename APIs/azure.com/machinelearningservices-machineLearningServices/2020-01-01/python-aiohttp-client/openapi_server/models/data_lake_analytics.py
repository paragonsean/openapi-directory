# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute import Compute
from openapi_server.models.compute_type import ComputeType
from openapi_server.models.data_lake_analytics_all_of_properties import DataLakeAnalyticsAllOfProperties
from openapi_server.models.machine_learning_service_error import MachineLearningServiceError
from openapi_server import util


class DataLakeAnalytics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_location: str=None, compute_type: ComputeType=None, created_on: datetime=None, description: str=None, is_attached_compute: bool=None, modified_on: datetime=None, provisioning_errors: List[MachineLearningServiceError]=None, provisioning_state: str=None, resource_id: str=None, properties: DataLakeAnalyticsAllOfProperties=None):
        """DataLakeAnalytics - a model defined in OpenAPI

        :param compute_location: The compute_location of this DataLakeAnalytics.
        :param compute_type: The compute_type of this DataLakeAnalytics.
        :param created_on: The created_on of this DataLakeAnalytics.
        :param description: The description of this DataLakeAnalytics.
        :param is_attached_compute: The is_attached_compute of this DataLakeAnalytics.
        :param modified_on: The modified_on of this DataLakeAnalytics.
        :param provisioning_errors: The provisioning_errors of this DataLakeAnalytics.
        :param provisioning_state: The provisioning_state of this DataLakeAnalytics.
        :param resource_id: The resource_id of this DataLakeAnalytics.
        :param properties: The properties of this DataLakeAnalytics.
        """
        self.openapi_types = {
            'compute_location': str,
            'compute_type': ComputeType,
            'created_on': datetime,
            'description': str,
            'is_attached_compute': bool,
            'modified_on': datetime,
            'provisioning_errors': List[MachineLearningServiceError],
            'provisioning_state': str,
            'resource_id': str,
            'properties': DataLakeAnalyticsAllOfProperties
        }

        self.attribute_map = {
            'compute_location': 'computeLocation',
            'compute_type': 'computeType',
            'created_on': 'createdOn',
            'description': 'description',
            'is_attached_compute': 'isAttachedCompute',
            'modified_on': 'modifiedOn',
            'provisioning_errors': 'provisioningErrors',
            'provisioning_state': 'provisioningState',
            'resource_id': 'resourceId',
            'properties': 'properties'
        }

        self._compute_location = compute_location
        self._compute_type = compute_type
        self._created_on = created_on
        self._description = description
        self._is_attached_compute = is_attached_compute
        self._modified_on = modified_on
        self._provisioning_errors = provisioning_errors
        self._provisioning_state = provisioning_state
        self._resource_id = resource_id
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataLakeAnalytics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataLakeAnalytics of this DataLakeAnalytics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_location(self):
        """Gets the compute_location of this DataLakeAnalytics.

        Location for the underlying compute

        :return: The compute_location of this DataLakeAnalytics.
        :rtype: str
        """
        return self._compute_location

    @compute_location.setter
    def compute_location(self, compute_location):
        """Sets the compute_location of this DataLakeAnalytics.

        Location for the underlying compute

        :param compute_location: The compute_location of this DataLakeAnalytics.
        :type compute_location: str
        """

        self._compute_location = compute_location

    @property
    def compute_type(self):
        """Gets the compute_type of this DataLakeAnalytics.


        :return: The compute_type of this DataLakeAnalytics.
        :rtype: ComputeType
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this DataLakeAnalytics.


        :param compute_type: The compute_type of this DataLakeAnalytics.
        :type compute_type: ComputeType
        """
        if compute_type is None:
            raise ValueError("Invalid value for `compute_type`, must not be `None`")

        self._compute_type = compute_type

    @property
    def created_on(self):
        """Gets the created_on of this DataLakeAnalytics.

        The date and time when the compute was created.

        :return: The created_on of this DataLakeAnalytics.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this DataLakeAnalytics.

        The date and time when the compute was created.

        :param created_on: The created_on of this DataLakeAnalytics.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def description(self):
        """Gets the description of this DataLakeAnalytics.

        The description of the Machine Learning compute.

        :return: The description of this DataLakeAnalytics.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataLakeAnalytics.

        The description of the Machine Learning compute.

        :param description: The description of this DataLakeAnalytics.
        :type description: str
        """

        self._description = description

    @property
    def is_attached_compute(self):
        """Gets the is_attached_compute of this DataLakeAnalytics.

        Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.

        :return: The is_attached_compute of this DataLakeAnalytics.
        :rtype: bool
        """
        return self._is_attached_compute

    @is_attached_compute.setter
    def is_attached_compute(self, is_attached_compute):
        """Sets the is_attached_compute of this DataLakeAnalytics.

        Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.

        :param is_attached_compute: The is_attached_compute of this DataLakeAnalytics.
        :type is_attached_compute: bool
        """

        self._is_attached_compute = is_attached_compute

    @property
    def modified_on(self):
        """Gets the modified_on of this DataLakeAnalytics.

        The date and time when the compute was last modified.

        :return: The modified_on of this DataLakeAnalytics.
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this DataLakeAnalytics.

        The date and time when the compute was last modified.

        :param modified_on: The modified_on of this DataLakeAnalytics.
        :type modified_on: datetime
        """

        self._modified_on = modified_on

    @property
    def provisioning_errors(self):
        """Gets the provisioning_errors of this DataLakeAnalytics.

        Errors during provisioning

        :return: The provisioning_errors of this DataLakeAnalytics.
        :rtype: List[MachineLearningServiceError]
        """
        return self._provisioning_errors

    @provisioning_errors.setter
    def provisioning_errors(self, provisioning_errors):
        """Sets the provisioning_errors of this DataLakeAnalytics.

        Errors during provisioning

        :param provisioning_errors: The provisioning_errors of this DataLakeAnalytics.
        :type provisioning_errors: List[MachineLearningServiceError]
        """

        self._provisioning_errors = provisioning_errors

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DataLakeAnalytics.

        The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.

        :return: The provisioning_state of this DataLakeAnalytics.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DataLakeAnalytics.

        The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.

        :param provisioning_state: The provisioning_state of this DataLakeAnalytics.
        :type provisioning_state: str
        """
        allowed_values = ["Unknown", "Updating", "Creating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def resource_id(self):
        """Gets the resource_id of this DataLakeAnalytics.

        ARM resource id of the underlying compute

        :return: The resource_id of this DataLakeAnalytics.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this DataLakeAnalytics.

        ARM resource id of the underlying compute

        :param resource_id: The resource_id of this DataLakeAnalytics.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def properties(self):
        """Gets the properties of this DataLakeAnalytics.


        :return: The properties of this DataLakeAnalytics.
        :rtype: DataLakeAnalyticsAllOfProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this DataLakeAnalytics.


        :param properties: The properties of this DataLakeAnalytics.
        :type properties: DataLakeAnalyticsAllOfProperties
        """

        self._properties = properties
