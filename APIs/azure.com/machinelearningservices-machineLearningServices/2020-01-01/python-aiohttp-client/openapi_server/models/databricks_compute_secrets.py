# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_secrets import ComputeSecrets
from openapi_server.models.compute_type import ComputeType
from openapi_server import util


class DatabricksComputeSecrets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_type: ComputeType=None, databricks_access_token: str=None):
        """DatabricksComputeSecrets - a model defined in OpenAPI

        :param compute_type: The compute_type of this DatabricksComputeSecrets.
        :param databricks_access_token: The databricks_access_token of this DatabricksComputeSecrets.
        """
        self.openapi_types = {
            'compute_type': ComputeType,
            'databricks_access_token': str
        }

        self.attribute_map = {
            'compute_type': 'computeType',
            'databricks_access_token': 'databricksAccessToken'
        }

        self._compute_type = compute_type
        self._databricks_access_token = databricks_access_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabricksComputeSecrets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabricksComputeSecrets of this DatabricksComputeSecrets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_type(self):
        """Gets the compute_type of this DatabricksComputeSecrets.


        :return: The compute_type of this DatabricksComputeSecrets.
        :rtype: ComputeType
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this DatabricksComputeSecrets.


        :param compute_type: The compute_type of this DatabricksComputeSecrets.
        :type compute_type: ComputeType
        """
        if compute_type is None:
            raise ValueError("Invalid value for `compute_type`, must not be `None`")

        self._compute_type = compute_type

    @property
    def databricks_access_token(self):
        """Gets the databricks_access_token of this DatabricksComputeSecrets.

        access token for databricks account.

        :return: The databricks_access_token of this DatabricksComputeSecrets.
        :rtype: str
        """
        return self._databricks_access_token

    @databricks_access_token.setter
    def databricks_access_token(self, databricks_access_token):
        """Sets the databricks_access_token of this DatabricksComputeSecrets.

        access token for databricks account.

        :param databricks_access_token: The databricks_access_token of this DatabricksComputeSecrets.
        :type databricks_access_token: str
        """

        self._databricks_access_token = databricks_access_token
