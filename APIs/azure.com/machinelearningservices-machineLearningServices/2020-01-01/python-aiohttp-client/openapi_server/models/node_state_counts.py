# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeStateCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, idle_node_count: int=None, leaving_node_count: int=None, preempted_node_count: int=None, preparing_node_count: int=None, running_node_count: int=None, unusable_node_count: int=None):
        """NodeStateCounts - a model defined in OpenAPI

        :param idle_node_count: The idle_node_count of this NodeStateCounts.
        :param leaving_node_count: The leaving_node_count of this NodeStateCounts.
        :param preempted_node_count: The preempted_node_count of this NodeStateCounts.
        :param preparing_node_count: The preparing_node_count of this NodeStateCounts.
        :param running_node_count: The running_node_count of this NodeStateCounts.
        :param unusable_node_count: The unusable_node_count of this NodeStateCounts.
        """
        self.openapi_types = {
            'idle_node_count': int,
            'leaving_node_count': int,
            'preempted_node_count': int,
            'preparing_node_count': int,
            'running_node_count': int,
            'unusable_node_count': int
        }

        self.attribute_map = {
            'idle_node_count': 'idleNodeCount',
            'leaving_node_count': 'leavingNodeCount',
            'preempted_node_count': 'preemptedNodeCount',
            'preparing_node_count': 'preparingNodeCount',
            'running_node_count': 'runningNodeCount',
            'unusable_node_count': 'unusableNodeCount'
        }

        self._idle_node_count = idle_node_count
        self._leaving_node_count = leaving_node_count
        self._preempted_node_count = preempted_node_count
        self._preparing_node_count = preparing_node_count
        self._running_node_count = running_node_count
        self._unusable_node_count = unusable_node_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeStateCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeStateCounts of this NodeStateCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def idle_node_count(self):
        """Gets the idle_node_count of this NodeStateCounts.

        Number of compute nodes in idle state.

        :return: The idle_node_count of this NodeStateCounts.
        :rtype: int
        """
        return self._idle_node_count

    @idle_node_count.setter
    def idle_node_count(self, idle_node_count):
        """Sets the idle_node_count of this NodeStateCounts.

        Number of compute nodes in idle state.

        :param idle_node_count: The idle_node_count of this NodeStateCounts.
        :type idle_node_count: int
        """

        self._idle_node_count = idle_node_count

    @property
    def leaving_node_count(self):
        """Gets the leaving_node_count of this NodeStateCounts.

        Number of compute nodes which are leaving the amlCompute.

        :return: The leaving_node_count of this NodeStateCounts.
        :rtype: int
        """
        return self._leaving_node_count

    @leaving_node_count.setter
    def leaving_node_count(self, leaving_node_count):
        """Sets the leaving_node_count of this NodeStateCounts.

        Number of compute nodes which are leaving the amlCompute.

        :param leaving_node_count: The leaving_node_count of this NodeStateCounts.
        :type leaving_node_count: int
        """

        self._leaving_node_count = leaving_node_count

    @property
    def preempted_node_count(self):
        """Gets the preempted_node_count of this NodeStateCounts.

        Number of compute nodes which are in preempted state.

        :return: The preempted_node_count of this NodeStateCounts.
        :rtype: int
        """
        return self._preempted_node_count

    @preempted_node_count.setter
    def preempted_node_count(self, preempted_node_count):
        """Sets the preempted_node_count of this NodeStateCounts.

        Number of compute nodes which are in preempted state.

        :param preempted_node_count: The preempted_node_count of this NodeStateCounts.
        :type preempted_node_count: int
        """

        self._preempted_node_count = preempted_node_count

    @property
    def preparing_node_count(self):
        """Gets the preparing_node_count of this NodeStateCounts.

        Number of compute nodes which are being prepared.

        :return: The preparing_node_count of this NodeStateCounts.
        :rtype: int
        """
        return self._preparing_node_count

    @preparing_node_count.setter
    def preparing_node_count(self, preparing_node_count):
        """Sets the preparing_node_count of this NodeStateCounts.

        Number of compute nodes which are being prepared.

        :param preparing_node_count: The preparing_node_count of this NodeStateCounts.
        :type preparing_node_count: int
        """

        self._preparing_node_count = preparing_node_count

    @property
    def running_node_count(self):
        """Gets the running_node_count of this NodeStateCounts.

        Number of compute nodes which are running jobs.

        :return: The running_node_count of this NodeStateCounts.
        :rtype: int
        """
        return self._running_node_count

    @running_node_count.setter
    def running_node_count(self, running_node_count):
        """Sets the running_node_count of this NodeStateCounts.

        Number of compute nodes which are running jobs.

        :param running_node_count: The running_node_count of this NodeStateCounts.
        :type running_node_count: int
        """

        self._running_node_count = running_node_count

    @property
    def unusable_node_count(self):
        """Gets the unusable_node_count of this NodeStateCounts.

        Number of compute nodes which are in unusable state.

        :return: The unusable_node_count of this NodeStateCounts.
        :rtype: int
        """
        return self._unusable_node_count

    @unusable_node_count.setter
    def unusable_node_count(self, unusable_node_count):
        """Sets the unusable_node_count of this NodeStateCounts.

        Number of compute nodes which are in unusable state.

        :param unusable_node_count: The unusable_node_count of this NodeStateCounts.
        :type unusable_node_count: int
        """

        self._unusable_node_count = unusable_node_count
