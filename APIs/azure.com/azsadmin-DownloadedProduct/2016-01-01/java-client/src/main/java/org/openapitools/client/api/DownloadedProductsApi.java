/*
 * AzureBridgeAdminClient
 * AzureBridge Admin Client.
 *
 * The version of the OpenAPI document: 2016-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DownloadedProductResourcesPage;
import org.openapitools.client.model.DownloadedProductsGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DownloadedProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DownloadedProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DownloadedProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for downloadedProductsCreate
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client Api Version. (required)
     * @param downloadedProduct Downloaded product resource definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadedProductsCreateCall(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion, DownloadedProductsGet200Response downloadedProduct, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = downloadedProduct;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/downloadedProducts/{productName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "activationName" + "}", localVarApiClient.escapeString(activationName.toString()))
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadedProductsCreateValidateBeforeCall(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion, DownloadedProductsGet200Response downloadedProduct, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling downloadedProductsCreate(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling downloadedProductsCreate(Async)");
        }

        // verify the required parameter 'activationName' is set
        if (activationName == null) {
            throw new ApiException("Missing the required parameter 'activationName' when calling downloadedProductsCreate(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling downloadedProductsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling downloadedProductsCreate(Async)");
        }

        // verify the required parameter 'downloadedProduct' is set
        if (downloadedProduct == null) {
            throw new ApiException("Missing the required parameter 'downloadedProduct' when calling downloadedProductsCreate(Async)");
        }

        return downloadedProductsCreateCall(subscriptionId, resourceGroup, activationName, productName, apiVersion, downloadedProduct, _callback);

    }

    /**
     * 
     * Creates a downloaded product.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client Api Version. (required)
     * @param downloadedProduct Downloaded product resource definition. (required)
     * @return DownloadedProductsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public DownloadedProductsGet200Response downloadedProductsCreate(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion, DownloadedProductsGet200Response downloadedProduct) throws ApiException {
        ApiResponse<DownloadedProductsGet200Response> localVarResp = downloadedProductsCreateWithHttpInfo(subscriptionId, resourceGroup, activationName, productName, apiVersion, downloadedProduct);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a downloaded product.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client Api Version. (required)
     * @param downloadedProduct Downloaded product resource definition. (required)
     * @return ApiResponse&lt;DownloadedProductsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DownloadedProductsGet200Response> downloadedProductsCreateWithHttpInfo(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion, DownloadedProductsGet200Response downloadedProduct) throws ApiException {
        okhttp3.Call localVarCall = downloadedProductsCreateValidateBeforeCall(subscriptionId, resourceGroup, activationName, productName, apiVersion, downloadedProduct, null);
        Type localVarReturnType = new TypeToken<DownloadedProductsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a downloaded product.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client Api Version. (required)
     * @param downloadedProduct Downloaded product resource definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadedProductsCreateAsync(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion, DownloadedProductsGet200Response downloadedProduct, final ApiCallback<DownloadedProductsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadedProductsCreateValidateBeforeCall(subscriptionId, resourceGroup, activationName, productName, apiVersion, downloadedProduct, _callback);
        Type localVarReturnType = new TypeToken<DownloadedProductsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadedProductsDelete
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadedProductsDeleteCall(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/downloadedProducts/{productName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "activationName" + "}", localVarApiClient.escapeString(activationName.toString()))
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadedProductsDeleteValidateBeforeCall(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling downloadedProductsDelete(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling downloadedProductsDelete(Async)");
        }

        // verify the required parameter 'activationName' is set
        if (activationName == null) {
            throw new ApiException("Missing the required parameter 'activationName' when calling downloadedProductsDelete(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling downloadedProductsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling downloadedProductsDelete(Async)");
        }

        return downloadedProductsDeleteCall(subscriptionId, resourceGroup, activationName, productName, apiVersion, _callback);

    }

    /**
     * 
     * Delete a downloaded product.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client Api Version. (required)
     * @return DownloadedProductsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DownloadedProductsGet200Response downloadedProductsDelete(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion) throws ApiException {
        ApiResponse<DownloadedProductsGet200Response> localVarResp = downloadedProductsDeleteWithHttpInfo(subscriptionId, resourceGroup, activationName, productName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a downloaded product.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;DownloadedProductsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DownloadedProductsGet200Response> downloadedProductsDeleteWithHttpInfo(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = downloadedProductsDeleteValidateBeforeCall(subscriptionId, resourceGroup, activationName, productName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DownloadedProductsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a downloaded product.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadedProductsDeleteAsync(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion, final ApiCallback<DownloadedProductsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadedProductsDeleteValidateBeforeCall(subscriptionId, resourceGroup, activationName, productName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DownloadedProductsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadedProductsGet
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadedProductsGetCall(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/downloadedProducts/{productName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "activationName" + "}", localVarApiClient.escapeString(activationName.toString()))
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadedProductsGetValidateBeforeCall(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling downloadedProductsGet(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling downloadedProductsGet(Async)");
        }

        // verify the required parameter 'activationName' is set
        if (activationName == null) {
            throw new ApiException("Missing the required parameter 'activationName' when calling downloadedProductsGet(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling downloadedProductsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling downloadedProductsGet(Async)");
        }

        return downloadedProductsGetCall(subscriptionId, resourceGroup, activationName, productName, apiVersion, _callback);

    }

    /**
     * 
     * Get a downloaded product.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client Api Version. (required)
     * @return DownloadedProductsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DownloadedProductsGet200Response downloadedProductsGet(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion) throws ApiException {
        ApiResponse<DownloadedProductsGet200Response> localVarResp = downloadedProductsGetWithHttpInfo(subscriptionId, resourceGroup, activationName, productName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a downloaded product.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;DownloadedProductsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DownloadedProductsGet200Response> downloadedProductsGetWithHttpInfo(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = downloadedProductsGetValidateBeforeCall(subscriptionId, resourceGroup, activationName, productName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DownloadedProductsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a downloaded product.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param productName Name of the product. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadedProductsGetAsync(String subscriptionId, String resourceGroup, String activationName, String productName, String apiVersion, final ApiCallback<DownloadedProductsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadedProductsGetValidateBeforeCall(subscriptionId, resourceGroup, activationName, productName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DownloadedProductsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadedProductsList
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadedProductsListCall(String subscriptionId, String resourceGroup, String activationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/downloadedProducts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "activationName" + "}", localVarApiClient.escapeString(activationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadedProductsListValidateBeforeCall(String subscriptionId, String resourceGroup, String activationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling downloadedProductsList(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling downloadedProductsList(Async)");
        }

        // verify the required parameter 'activationName' is set
        if (activationName == null) {
            throw new ApiException("Missing the required parameter 'activationName' when calling downloadedProductsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling downloadedProductsList(Async)");
        }

        return downloadedProductsListCall(subscriptionId, resourceGroup, activationName, apiVersion, _callback);

    }

    /**
     * 
     * Get a list of downloaded products.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return DownloadedProductResourcesPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DownloadedProductResourcesPage downloadedProductsList(String subscriptionId, String resourceGroup, String activationName, String apiVersion) throws ApiException {
        ApiResponse<DownloadedProductResourcesPage> localVarResp = downloadedProductsListWithHttpInfo(subscriptionId, resourceGroup, activationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of downloaded products.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;DownloadedProductResourcesPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DownloadedProductResourcesPage> downloadedProductsListWithHttpInfo(String subscriptionId, String resourceGroup, String activationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = downloadedProductsListValidateBeforeCall(subscriptionId, resourceGroup, activationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DownloadedProductResourcesPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of downloaded products.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup The resource group the resource is located under. (required)
     * @param activationName Name of the activation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadedProductsListAsync(String subscriptionId, String resourceGroup, String activationName, String apiVersion, final ApiCallback<DownloadedProductResourcesPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadedProductsListValidateBeforeCall(subscriptionId, resourceGroup, activationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DownloadedProductResourcesPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
