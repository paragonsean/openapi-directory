/**
 * HybridComputeManagementClient
 * The Hybrid Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-18-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMachineReconnectProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMachineReconnectProperties::OAIMachineReconnectProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMachineReconnectProperties::OAIMachineReconnectProperties() {
    this->initializeModel();
}

OAIMachineReconnectProperties::~OAIMachineReconnectProperties() {}

void OAIMachineReconnectProperties::initializeModel() {

    m_client_public_key_isSet = false;
    m_client_public_key_isValid = false;

    m_vm_id_isSet = false;
    m_vm_id_isValid = false;
}

void OAIMachineReconnectProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMachineReconnectProperties::fromJsonObject(QJsonObject json) {

    m_client_public_key_isValid = ::OpenAPI::fromJsonValue(m_client_public_key, json[QString("clientPublicKey")]);
    m_client_public_key_isSet = !json[QString("clientPublicKey")].isNull() && m_client_public_key_isValid;

    m_vm_id_isValid = ::OpenAPI::fromJsonValue(m_vm_id, json[QString("vmId")]);
    m_vm_id_isSet = !json[QString("vmId")].isNull() && m_vm_id_isValid;
}

QString OAIMachineReconnectProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMachineReconnectProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_client_public_key_isSet) {
        obj.insert(QString("clientPublicKey"), ::OpenAPI::toJsonValue(m_client_public_key));
    }
    if (m_vm_id_isSet) {
        obj.insert(QString("vmId"), ::OpenAPI::toJsonValue(m_vm_id));
    }
    return obj;
}

QString OAIMachineReconnectProperties::getClientPublicKey() const {
    return m_client_public_key;
}
void OAIMachineReconnectProperties::setClientPublicKey(const QString &client_public_key) {
    m_client_public_key = client_public_key;
    m_client_public_key_isSet = true;
}

bool OAIMachineReconnectProperties::is_client_public_key_Set() const{
    return m_client_public_key_isSet;
}

bool OAIMachineReconnectProperties::is_client_public_key_Valid() const{
    return m_client_public_key_isValid;
}

QString OAIMachineReconnectProperties::getVmId() const {
    return m_vm_id;
}
void OAIMachineReconnectProperties::setVmId(const QString &vm_id) {
    m_vm_id = vm_id;
    m_vm_id_isSet = true;
}

bool OAIMachineReconnectProperties::is_vm_id_Set() const{
    return m_vm_id_isSet;
}

bool OAIMachineReconnectProperties::is_vm_id_Valid() const{
    return m_vm_id_isValid;
}

bool OAIMachineReconnectProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMachineReconnectProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
