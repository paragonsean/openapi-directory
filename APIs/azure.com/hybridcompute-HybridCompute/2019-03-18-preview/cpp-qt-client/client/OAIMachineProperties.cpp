/**
 * HybridComputeManagementClient
 * The Hybrid Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-18-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMachineProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMachineProperties::OAIMachineProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMachineProperties::OAIMachineProperties() {
    this->initializeModel();
}

OAIMachineProperties::~OAIMachineProperties() {}

void OAIMachineProperties::initializeModel() {

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_client_public_key_isSet = false;
    m_client_public_key_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_error_details_isSet = false;
    m_error_details_isValid = false;

    m_last_status_change_isSet = false;
    m_last_status_change_isValid = false;

    m_machine_fqdn_isSet = false;
    m_machine_fqdn_isValid = false;

    m_os_name_isSet = false;
    m_os_name_isValid = false;

    m_os_profile_isSet = false;
    m_os_profile_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_physical_location_isSet = false;
    m_physical_location_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vm_id_isSet = false;
    m_vm_id_isValid = false;
}

void OAIMachineProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMachineProperties::fromJsonObject(QJsonObject json) {

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_client_public_key_isValid = ::OpenAPI::fromJsonValue(m_client_public_key, json[QString("clientPublicKey")]);
    m_client_public_key_isSet = !json[QString("clientPublicKey")].isNull() && m_client_public_key_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_error_details_isValid = ::OpenAPI::fromJsonValue(m_error_details, json[QString("errorDetails")]);
    m_error_details_isSet = !json[QString("errorDetails")].isNull() && m_error_details_isValid;

    m_last_status_change_isValid = ::OpenAPI::fromJsonValue(m_last_status_change, json[QString("lastStatusChange")]);
    m_last_status_change_isSet = !json[QString("lastStatusChange")].isNull() && m_last_status_change_isValid;

    m_machine_fqdn_isValid = ::OpenAPI::fromJsonValue(m_machine_fqdn, json[QString("machineFqdn")]);
    m_machine_fqdn_isSet = !json[QString("machineFqdn")].isNull() && m_machine_fqdn_isValid;

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("osName")]);
    m_os_name_isSet = !json[QString("osName")].isNull() && m_os_name_isValid;

    m_os_profile_isValid = ::OpenAPI::fromJsonValue(m_os_profile, json[QString("osProfile")]);
    m_os_profile_isSet = !json[QString("osProfile")].isNull() && m_os_profile_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_physical_location_isValid = ::OpenAPI::fromJsonValue(m_physical_location, json[QString("physicalLocation")]);
    m_physical_location_isSet = !json[QString("physicalLocation")].isNull() && m_physical_location_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vm_id_isValid = ::OpenAPI::fromJsonValue(m_vm_id, json[QString("vmId")]);
    m_vm_id_isSet = !json[QString("vmId")].isNull() && m_vm_id_isValid;
}

QString OAIMachineProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMachineProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_client_public_key_isSet) {
        obj.insert(QString("clientPublicKey"), ::OpenAPI::toJsonValue(m_client_public_key));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_error_details.size() > 0) {
        obj.insert(QString("errorDetails"), ::OpenAPI::toJsonValue(m_error_details));
    }
    if (m_last_status_change_isSet) {
        obj.insert(QString("lastStatusChange"), ::OpenAPI::toJsonValue(m_last_status_change));
    }
    if (m_machine_fqdn_isSet) {
        obj.insert(QString("machineFqdn"), ::OpenAPI::toJsonValue(m_machine_fqdn));
    }
    if (m_os_name_isSet) {
        obj.insert(QString("osName"), ::OpenAPI::toJsonValue(m_os_name));
    }
    if (m_os_profile.isSet()) {
        obj.insert(QString("osProfile"), ::OpenAPI::toJsonValue(m_os_profile));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_physical_location_isSet) {
        obj.insert(QString("physicalLocation"), ::OpenAPI::toJsonValue(m_physical_location));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vm_id_isSet) {
        obj.insert(QString("vmId"), ::OpenAPI::toJsonValue(m_vm_id));
    }
    return obj;
}

QString OAIMachineProperties::getAgentVersion() const {
    return m_agent_version;
}
void OAIMachineProperties::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIMachineProperties::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIMachineProperties::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QString OAIMachineProperties::getClientPublicKey() const {
    return m_client_public_key;
}
void OAIMachineProperties::setClientPublicKey(const QString &client_public_key) {
    m_client_public_key = client_public_key;
    m_client_public_key_isSet = true;
}

bool OAIMachineProperties::is_client_public_key_Set() const{
    return m_client_public_key_isSet;
}

bool OAIMachineProperties::is_client_public_key_Valid() const{
    return m_client_public_key_isValid;
}

QString OAIMachineProperties::getDisplayName() const {
    return m_display_name;
}
void OAIMachineProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMachineProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMachineProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIErrorDetail> OAIMachineProperties::getErrorDetails() const {
    return m_error_details;
}
void OAIMachineProperties::setErrorDetails(const QList<OAIErrorDetail> &error_details) {
    m_error_details = error_details;
    m_error_details_isSet = true;
}

bool OAIMachineProperties::is_error_details_Set() const{
    return m_error_details_isSet;
}

bool OAIMachineProperties::is_error_details_Valid() const{
    return m_error_details_isValid;
}

QDateTime OAIMachineProperties::getLastStatusChange() const {
    return m_last_status_change;
}
void OAIMachineProperties::setLastStatusChange(const QDateTime &last_status_change) {
    m_last_status_change = last_status_change;
    m_last_status_change_isSet = true;
}

bool OAIMachineProperties::is_last_status_change_Set() const{
    return m_last_status_change_isSet;
}

bool OAIMachineProperties::is_last_status_change_Valid() const{
    return m_last_status_change_isValid;
}

QString OAIMachineProperties::getMachineFqdn() const {
    return m_machine_fqdn;
}
void OAIMachineProperties::setMachineFqdn(const QString &machine_fqdn) {
    m_machine_fqdn = machine_fqdn;
    m_machine_fqdn_isSet = true;
}

bool OAIMachineProperties::is_machine_fqdn_Set() const{
    return m_machine_fqdn_isSet;
}

bool OAIMachineProperties::is_machine_fqdn_Valid() const{
    return m_machine_fqdn_isValid;
}

QString OAIMachineProperties::getOsName() const {
    return m_os_name;
}
void OAIMachineProperties::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAIMachineProperties::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAIMachineProperties::is_os_name_Valid() const{
    return m_os_name_isValid;
}

OAIOSProfile OAIMachineProperties::getOsProfile() const {
    return m_os_profile;
}
void OAIMachineProperties::setOsProfile(const OAIOSProfile &os_profile) {
    m_os_profile = os_profile;
    m_os_profile_isSet = true;
}

bool OAIMachineProperties::is_os_profile_Set() const{
    return m_os_profile_isSet;
}

bool OAIMachineProperties::is_os_profile_Valid() const{
    return m_os_profile_isValid;
}

QString OAIMachineProperties::getOsVersion() const {
    return m_os_version;
}
void OAIMachineProperties::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIMachineProperties::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIMachineProperties::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIMachineProperties::getPhysicalLocation() const {
    return m_physical_location;
}
void OAIMachineProperties::setPhysicalLocation(const QString &physical_location) {
    m_physical_location = physical_location;
    m_physical_location_isSet = true;
}

bool OAIMachineProperties::is_physical_location_Set() const{
    return m_physical_location_isSet;
}

bool OAIMachineProperties::is_physical_location_Valid() const{
    return m_physical_location_isValid;
}

QString OAIMachineProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIMachineProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIMachineProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIMachineProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIMachineProperties::getStatus() const {
    return m_status;
}
void OAIMachineProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMachineProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMachineProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMachineProperties::getVmId() const {
    return m_vm_id;
}
void OAIMachineProperties::setVmId(const QString &vm_id) {
    m_vm_id = vm_id;
    m_vm_id_isSet = true;
}

bool OAIMachineProperties::is_vm_id_Set() const{
    return m_vm_id_isSet;
}

bool OAIMachineProperties::is_vm_id_Valid() const{
    return m_vm_id_isValid;
}

bool OAIMachineProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMachineProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
