/**
 * HybridComputeManagementClient
 * The Hybrid Compute Management Client.
 *
 * The version of the OpenAPI document: 2019-03-18-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMachinesApi_H
#define OAI_OAIMachinesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIMachine.h"
#include "OAIMachineListResult.h"
#include "OAIMachineReconnect.h"
#include "OAIMachineUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMachinesApi : public QObject {
    Q_OBJECT

public:
    OAIMachinesApi(const int timeOut = 0);
    ~OAIMachinesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  parameters OAIMachine [required]
    */
    virtual void machinesCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &name, const OAIMachine &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    */
    virtual void machinesDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void machinesGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &name, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void machinesListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void machinesListBySubscription(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  parameters OAIMachineReconnect [required]
    */
    virtual void machinesReconnect(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &name, const OAIMachineReconnect &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  parameters OAIMachineUpdate [required]
    */
    virtual void machinesUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &name, const OAIMachineUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void machinesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void machinesDeleteCallback(OAIHttpRequestWorker *worker);
    void machinesGetCallback(OAIHttpRequestWorker *worker);
    void machinesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void machinesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void machinesReconnectCallback(OAIHttpRequestWorker *worker);
    void machinesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void machinesCreateOrUpdateSignal(OAIMachine summary);
    void machinesDeleteSignal();
    void machinesGetSignal(OAIMachine summary);
    void machinesListByResourceGroupSignal(OAIMachineListResult summary);
    void machinesListBySubscriptionSignal(OAIMachineListResult summary);
    void machinesReconnectSignal(OAIMachine summary);
    void machinesUpdateSignal(OAIMachine summary);


    void machinesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIMachine summary);
    void machinesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void machinesGetSignalFull(OAIHttpRequestWorker *worker, OAIMachine summary);
    void machinesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIMachineListResult summary);
    void machinesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIMachineListResult summary);
    void machinesReconnectSignalFull(OAIHttpRequestWorker *worker, OAIMachine summary);
    void machinesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIMachine summary);

    Q_DECL_DEPRECATED_X("Use machinesCreateOrUpdateSignalError() instead")
    void machinesCreateOrUpdateSignalE(OAIMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesCreateOrUpdateSignalError(OAIMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesDeleteSignalError() instead")
    void machinesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void machinesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesGetSignalError() instead")
    void machinesGetSignalE(OAIMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesGetSignalError(OAIMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesListByResourceGroupSignalError() instead")
    void machinesListByResourceGroupSignalE(OAIMachineListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesListByResourceGroupSignalError(OAIMachineListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesListBySubscriptionSignalError() instead")
    void machinesListBySubscriptionSignalE(OAIMachineListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesListBySubscriptionSignalError(OAIMachineListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesReconnectSignalError() instead")
    void machinesReconnectSignalE(OAIMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesReconnectSignalError(OAIMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesUpdateSignalError() instead")
    void machinesUpdateSignalE(OAIMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesUpdateSignalError(OAIMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use machinesCreateOrUpdateSignalErrorFull() instead")
    void machinesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesDeleteSignalErrorFull() instead")
    void machinesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesGetSignalErrorFull() instead")
    void machinesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesListByResourceGroupSignalErrorFull() instead")
    void machinesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesListBySubscriptionSignalErrorFull() instead")
    void machinesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesReconnectSignalErrorFull() instead")
    void machinesReconnectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesReconnectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesUpdateSignalErrorFull() instead")
    void machinesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
