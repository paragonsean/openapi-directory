/**
 * AzureBridgeAdminClient
 * AzureBridge Admin Client.
 *
 * The version of the OpenAPI document: 2016-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivation::OAIActivation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivation::OAIActivation() {
    this->initializeModel();
}

OAIActivation::~OAIActivation() {}

void OAIActivation::initializeModel() {

    m_azure_registration_resource_identifier_isSet = false;
    m_azure_registration_resource_identifier_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_marketplace_syndication_enabled_isSet = false;
    m_marketplace_syndication_enabled_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_usage_reporting_enabled_isSet = false;
    m_usage_reporting_enabled_isValid = false;
}

void OAIActivation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivation::fromJsonObject(QJsonObject json) {

    m_azure_registration_resource_identifier_isValid = ::OpenAPI::fromJsonValue(m_azure_registration_resource_identifier, json[QString("azureRegistrationResourceIdentifier")]);
    m_azure_registration_resource_identifier_isSet = !json[QString("azureRegistrationResourceIdentifier")].isNull() && m_azure_registration_resource_identifier_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_marketplace_syndication_enabled_isValid = ::OpenAPI::fromJsonValue(m_marketplace_syndication_enabled, json[QString("marketplaceSyndicationEnabled")]);
    m_marketplace_syndication_enabled_isSet = !json[QString("marketplaceSyndicationEnabled")].isNull() && m_marketplace_syndication_enabled_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_usage_reporting_enabled_isValid = ::OpenAPI::fromJsonValue(m_usage_reporting_enabled, json[QString("usageReportingEnabled")]);
    m_usage_reporting_enabled_isSet = !json[QString("usageReportingEnabled")].isNull() && m_usage_reporting_enabled_isValid;
}

QString OAIActivation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivation::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_registration_resource_identifier_isSet) {
        obj.insert(QString("azureRegistrationResourceIdentifier"), ::OpenAPI::toJsonValue(m_azure_registration_resource_identifier));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_marketplace_syndication_enabled_isSet) {
        obj.insert(QString("marketplaceSyndicationEnabled"), ::OpenAPI::toJsonValue(m_marketplace_syndication_enabled));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_usage_reporting_enabled_isSet) {
        obj.insert(QString("usageReportingEnabled"), ::OpenAPI::toJsonValue(m_usage_reporting_enabled));
    }
    return obj;
}

QString OAIActivation::getAzureRegistrationResourceIdentifier() const {
    return m_azure_registration_resource_identifier;
}
void OAIActivation::setAzureRegistrationResourceIdentifier(const QString &azure_registration_resource_identifier) {
    m_azure_registration_resource_identifier = azure_registration_resource_identifier;
    m_azure_registration_resource_identifier_isSet = true;
}

bool OAIActivation::is_azure_registration_resource_identifier_Set() const{
    return m_azure_registration_resource_identifier_isSet;
}

bool OAIActivation::is_azure_registration_resource_identifier_Valid() const{
    return m_azure_registration_resource_identifier_isValid;
}

QString OAIActivation::getDisplayName() const {
    return m_display_name;
}
void OAIActivation::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIActivation::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIActivation::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIActivation::getExpiration() const {
    return m_expiration;
}
void OAIActivation::setExpiration(const QString &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIActivation::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIActivation::is_expiration_Valid() const{
    return m_expiration_isValid;
}

bool OAIActivation::isMarketplaceSyndicationEnabled() const {
    return m_marketplace_syndication_enabled;
}
void OAIActivation::setMarketplaceSyndicationEnabled(const bool &marketplace_syndication_enabled) {
    m_marketplace_syndication_enabled = marketplace_syndication_enabled;
    m_marketplace_syndication_enabled_isSet = true;
}

bool OAIActivation::is_marketplace_syndication_enabled_Set() const{
    return m_marketplace_syndication_enabled_isSet;
}

bool OAIActivation::is_marketplace_syndication_enabled_Valid() const{
    return m_marketplace_syndication_enabled_isValid;
}

QString OAIActivation::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIActivation::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIActivation::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIActivation::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIActivation::isUsageReportingEnabled() const {
    return m_usage_reporting_enabled;
}
void OAIActivation::setUsageReportingEnabled(const bool &usage_reporting_enabled) {
    m_usage_reporting_enabled = usage_reporting_enabled;
    m_usage_reporting_enabled_isSet = true;
}

bool OAIActivation::is_usage_reporting_enabled_Set() const{
    return m_usage_reporting_enabled_isSet;
}

bool OAIActivation::is_usage_reporting_enabled_Valid() const{
    return m_usage_reporting_enabled_isValid;
}

bool OAIActivation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_registration_resource_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_syndication_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_reporting_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
