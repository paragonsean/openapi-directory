# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Activation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, azure_registration_resource_identifier: str=None, display_name: str=None, expiration: str=None, marketplace_syndication_enabled: bool=None, provisioning_state: str=None, usage_reporting_enabled: bool=None):
        """Activation - a model defined in OpenAPI

        :param azure_registration_resource_identifier: The azure_registration_resource_identifier of this Activation.
        :param display_name: The display_name of this Activation.
        :param expiration: The expiration of this Activation.
        :param marketplace_syndication_enabled: The marketplace_syndication_enabled of this Activation.
        :param provisioning_state: The provisioning_state of this Activation.
        :param usage_reporting_enabled: The usage_reporting_enabled of this Activation.
        """
        self.openapi_types = {
            'azure_registration_resource_identifier': str,
            'display_name': str,
            'expiration': str,
            'marketplace_syndication_enabled': bool,
            'provisioning_state': str,
            'usage_reporting_enabled': bool
        }

        self.attribute_map = {
            'azure_registration_resource_identifier': 'azureRegistrationResourceIdentifier',
            'display_name': 'displayName',
            'expiration': 'expiration',
            'marketplace_syndication_enabled': 'marketplaceSyndicationEnabled',
            'provisioning_state': 'provisioningState',
            'usage_reporting_enabled': 'usageReportingEnabled'
        }

        self._azure_registration_resource_identifier = azure_registration_resource_identifier
        self._display_name = display_name
        self._expiration = expiration
        self._marketplace_syndication_enabled = marketplace_syndication_enabled
        self._provisioning_state = provisioning_state
        self._usage_reporting_enabled = usage_reporting_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activation of this Activation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def azure_registration_resource_identifier(self):
        """Gets the azure_registration_resource_identifier of this Activation.

        Azure registration resource identifier.

        :return: The azure_registration_resource_identifier of this Activation.
        :rtype: str
        """
        return self._azure_registration_resource_identifier

    @azure_registration_resource_identifier.setter
    def azure_registration_resource_identifier(self, azure_registration_resource_identifier):
        """Sets the azure_registration_resource_identifier of this Activation.

        Azure registration resource identifier.

        :param azure_registration_resource_identifier: The azure_registration_resource_identifier of this Activation.
        :type azure_registration_resource_identifier: str
        """

        self._azure_registration_resource_identifier = azure_registration_resource_identifier

    @property
    def display_name(self):
        """Gets the display_name of this Activation.

        Name displayed for the product.

        :return: The display_name of this Activation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Activation.

        Name displayed for the product.

        :param display_name: The display_name of this Activation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def expiration(self):
        """Gets the expiration of this Activation.

        The activation expiration.

        :return: The expiration of this Activation.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this Activation.

        The activation expiration.

        :param expiration: The expiration of this Activation.
        :type expiration: str
        """

        self._expiration = expiration

    @property
    def marketplace_syndication_enabled(self):
        """Gets the marketplace_syndication_enabled of this Activation.

        Value indicating whether the marketplace syndication feature is enabled.

        :return: The marketplace_syndication_enabled of this Activation.
        :rtype: bool
        """
        return self._marketplace_syndication_enabled

    @marketplace_syndication_enabled.setter
    def marketplace_syndication_enabled(self, marketplace_syndication_enabled):
        """Sets the marketplace_syndication_enabled of this Activation.

        Value indicating whether the marketplace syndication feature is enabled.

        :param marketplace_syndication_enabled: The marketplace_syndication_enabled of this Activation.
        :type marketplace_syndication_enabled: bool
        """

        self._marketplace_syndication_enabled = marketplace_syndication_enabled

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this Activation.

        The provisioning state of the resource.

        :return: The provisioning_state of this Activation.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this Activation.

        The provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this Activation.
        :type provisioning_state: str
        """
        allowed_values = ["Stopped", "Starting", "Running", "Stopping", "Succeeded", "Downloading"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def usage_reporting_enabled(self):
        """Gets the usage_reporting_enabled of this Activation.

        Value indicating whether the usage reporting feature is enabled.

        :return: The usage_reporting_enabled of this Activation.
        :rtype: bool
        """
        return self._usage_reporting_enabled

    @usage_reporting_enabled.setter
    def usage_reporting_enabled(self, usage_reporting_enabled):
        """Sets the usage_reporting_enabled of this Activation.

        Value indicating whether the usage reporting feature is enabled.

        :param usage_reporting_enabled: The usage_reporting_enabled of this Activation.
        :type usage_reporting_enabled: bool
        """

        self._usage_reporting_enabled = usage_reporting_enabled
