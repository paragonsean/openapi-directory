/**
 * Provider API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackMinorVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackMinorVersion::OAIStackMinorVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackMinorVersion::OAIStackMinorVersion() {
    this->initializeModel();
}

OAIStackMinorVersion::~OAIStackMinorVersion() {}

void OAIStackMinorVersion::initializeModel() {

    m_display_version_isSet = false;
    m_display_version_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_remote_debugging_enabled_isSet = false;
    m_is_remote_debugging_enabled_isValid = false;

    m_runtime_version_isSet = false;
    m_runtime_version_isValid = false;
}

void OAIStackMinorVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackMinorVersion::fromJsonObject(QJsonObject json) {

    m_display_version_isValid = ::OpenAPI::fromJsonValue(m_display_version, json[QString("displayVersion")]);
    m_display_version_isSet = !json[QString("displayVersion")].isNull() && m_display_version_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_is_remote_debugging_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_remote_debugging_enabled, json[QString("isRemoteDebuggingEnabled")]);
    m_is_remote_debugging_enabled_isSet = !json[QString("isRemoteDebuggingEnabled")].isNull() && m_is_remote_debugging_enabled_isValid;

    m_runtime_version_isValid = ::OpenAPI::fromJsonValue(m_runtime_version, json[QString("runtimeVersion")]);
    m_runtime_version_isSet = !json[QString("runtimeVersion")].isNull() && m_runtime_version_isValid;
}

QString OAIStackMinorVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackMinorVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_display_version_isSet) {
        obj.insert(QString("displayVersion"), ::OpenAPI::toJsonValue(m_display_version));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_remote_debugging_enabled_isSet) {
        obj.insert(QString("isRemoteDebuggingEnabled"), ::OpenAPI::toJsonValue(m_is_remote_debugging_enabled));
    }
    if (m_runtime_version_isSet) {
        obj.insert(QString("runtimeVersion"), ::OpenAPI::toJsonValue(m_runtime_version));
    }
    return obj;
}

QString OAIStackMinorVersion::getDisplayVersion() const {
    return m_display_version;
}
void OAIStackMinorVersion::setDisplayVersion(const QString &display_version) {
    m_display_version = display_version;
    m_display_version_isSet = true;
}

bool OAIStackMinorVersion::is_display_version_Set() const{
    return m_display_version_isSet;
}

bool OAIStackMinorVersion::is_display_version_Valid() const{
    return m_display_version_isValid;
}

bool OAIStackMinorVersion::isIsDefault() const {
    return m_is_default;
}
void OAIStackMinorVersion::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIStackMinorVersion::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIStackMinorVersion::is_is_default_Valid() const{
    return m_is_default_isValid;
}

bool OAIStackMinorVersion::isIsRemoteDebuggingEnabled() const {
    return m_is_remote_debugging_enabled;
}
void OAIStackMinorVersion::setIsRemoteDebuggingEnabled(const bool &is_remote_debugging_enabled) {
    m_is_remote_debugging_enabled = is_remote_debugging_enabled;
    m_is_remote_debugging_enabled_isSet = true;
}

bool OAIStackMinorVersion::is_is_remote_debugging_enabled_Set() const{
    return m_is_remote_debugging_enabled_isSet;
}

bool OAIStackMinorVersion::is_is_remote_debugging_enabled_Valid() const{
    return m_is_remote_debugging_enabled_isValid;
}

QString OAIStackMinorVersion::getRuntimeVersion() const {
    return m_runtime_version;
}
void OAIStackMinorVersion::setRuntimeVersion(const QString &runtime_version) {
    m_runtime_version = runtime_version;
    m_runtime_version_isSet = true;
}

bool OAIStackMinorVersion::is_runtime_version_Set() const{
    return m_runtime_version_isSet;
}

bool OAIStackMinorVersion::is_runtime_version_Valid() const{
    return m_runtime_version_isValid;
}

bool OAIStackMinorVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_remote_debugging_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackMinorVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
