/**
 * Provider API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StackMajorVersion from './StackMajorVersion';

/**
 * The ApplicationStack model module.
 * @module model/ApplicationStack
 * @version 2018-02-01
 */
class ApplicationStack {
    /**
     * Constructs a new <code>ApplicationStack</code>.
     * Application stack.
     * @alias module:model/ApplicationStack
     */
    constructor() { 
        
        ApplicationStack.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationStack</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationStack} obj Optional instance to populate.
     * @return {module:model/ApplicationStack} The populated <code>ApplicationStack</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationStack();

            if (data.hasOwnProperty('dependency')) {
                obj['dependency'] = ApiClient.convertToType(data['dependency'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('frameworks')) {
                obj['frameworks'] = ApiClient.convertToType(data['frameworks'], [ApplicationStack]);
            }
            if (data.hasOwnProperty('majorVersions')) {
                obj['majorVersions'] = ApiClient.convertToType(data['majorVersions'], [StackMajorVersion]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationStack</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationStack</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dependency'] && !(typeof data['dependency'] === 'string' || data['dependency'] instanceof String)) {
            throw new Error("Expected the field `dependency` to be a primitive type in the JSON string but got " + data['dependency']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        if (data['frameworks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['frameworks'])) {
                throw new Error("Expected the field `frameworks` to be an array in the JSON data but got " + data['frameworks']);
            }
            // validate the optional field `frameworks` (array)
            for (const item of data['frameworks']) {
                ApplicationStack.validateJSON(item);
            };
        }
        if (data['majorVersions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['majorVersions'])) {
                throw new Error("Expected the field `majorVersions` to be an array in the JSON data but got " + data['majorVersions']);
            }
            // validate the optional field `majorVersions` (array)
            for (const item of data['majorVersions']) {
                StackMajorVersion.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Application stack dependency.
 * @member {String} dependency
 */
ApplicationStack.prototype['dependency'] = undefined;

/**
 * Application stack display name.
 * @member {String} display
 */
ApplicationStack.prototype['display'] = undefined;

/**
 * List of frameworks associated with application stack.
 * @member {Array.<module:model/ApplicationStack>} frameworks
 */
ApplicationStack.prototype['frameworks'] = undefined;

/**
 * List of major versions available.
 * @member {Array.<module:model/StackMajorVersion>} majorVersions
 */
ApplicationStack.prototype['majorVersions'] = undefined;

/**
 * Application stack name.
 * @member {String} name
 */
ApplicationStack.prototype['name'] = undefined;






export default ApplicationStack;

