# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stack_major_version import StackMajorVersion
from openapi_server import util


class ApplicationStack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dependency: str=None, display: str=None, frameworks: List[ApplicationStack]=None, major_versions: List[StackMajorVersion]=None, name: str=None):
        """ApplicationStack - a model defined in OpenAPI

        :param dependency: The dependency of this ApplicationStack.
        :param display: The display of this ApplicationStack.
        :param frameworks: The frameworks of this ApplicationStack.
        :param major_versions: The major_versions of this ApplicationStack.
        :param name: The name of this ApplicationStack.
        """
        self.openapi_types = {
            'dependency': str,
            'display': str,
            'frameworks': List[ApplicationStack],
            'major_versions': List[StackMajorVersion],
            'name': str
        }

        self.attribute_map = {
            'dependency': 'dependency',
            'display': 'display',
            'frameworks': 'frameworks',
            'major_versions': 'majorVersions',
            'name': 'name'
        }

        self._dependency = dependency
        self._display = display
        self._frameworks = frameworks
        self._major_versions = major_versions
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationStack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationStack of this ApplicationStack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dependency(self):
        """Gets the dependency of this ApplicationStack.

        Application stack dependency.

        :return: The dependency of this ApplicationStack.
        :rtype: str
        """
        return self._dependency

    @dependency.setter
    def dependency(self, dependency):
        """Sets the dependency of this ApplicationStack.

        Application stack dependency.

        :param dependency: The dependency of this ApplicationStack.
        :type dependency: str
        """

        self._dependency = dependency

    @property
    def display(self):
        """Gets the display of this ApplicationStack.

        Application stack display name.

        :return: The display of this ApplicationStack.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this ApplicationStack.

        Application stack display name.

        :param display: The display of this ApplicationStack.
        :type display: str
        """

        self._display = display

    @property
    def frameworks(self):
        """Gets the frameworks of this ApplicationStack.

        List of frameworks associated with application stack.

        :return: The frameworks of this ApplicationStack.
        :rtype: List[ApplicationStack]
        """
        return self._frameworks

    @frameworks.setter
    def frameworks(self, frameworks):
        """Sets the frameworks of this ApplicationStack.

        List of frameworks associated with application stack.

        :param frameworks: The frameworks of this ApplicationStack.
        :type frameworks: List[ApplicationStack]
        """

        self._frameworks = frameworks

    @property
    def major_versions(self):
        """Gets the major_versions of this ApplicationStack.

        List of major versions available.

        :return: The major_versions of this ApplicationStack.
        :rtype: List[StackMajorVersion]
        """
        return self._major_versions

    @major_versions.setter
    def major_versions(self, major_versions):
        """Sets the major_versions of this ApplicationStack.

        List of major versions available.

        :param major_versions: The major_versions of this ApplicationStack.
        :type major_versions: List[StackMajorVersion]
        """

        self._major_versions = major_versions

    @property
    def name(self):
        """Gets the name of this ApplicationStack.

        Application stack name.

        :return: The name of this ApplicationStack.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationStack.

        Application stack name.

        :param name: The name of this ApplicationStack.
        :type name: str
        """

        self._name = name
