# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StackMinorVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_version: str=None, is_default: bool=None, runtime_version: str=None):
        """StackMinorVersion - a model defined in OpenAPI

        :param display_version: The display_version of this StackMinorVersion.
        :param is_default: The is_default of this StackMinorVersion.
        :param runtime_version: The runtime_version of this StackMinorVersion.
        """
        self.openapi_types = {
            'display_version': str,
            'is_default': bool,
            'runtime_version': str
        }

        self.attribute_map = {
            'display_version': 'displayVersion',
            'is_default': 'isDefault',
            'runtime_version': 'runtimeVersion'
        }

        self._display_version = display_version
        self._is_default = is_default
        self._runtime_version = runtime_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StackMinorVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StackMinorVersion of this StackMinorVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_version(self):
        """Gets the display_version of this StackMinorVersion.

        Application stack minor version (display only).

        :return: The display_version of this StackMinorVersion.
        :rtype: str
        """
        return self._display_version

    @display_version.setter
    def display_version(self, display_version):
        """Sets the display_version of this StackMinorVersion.

        Application stack minor version (display only).

        :param display_version: The display_version of this StackMinorVersion.
        :type display_version: str
        """

        self._display_version = display_version

    @property
    def is_default(self):
        """Gets the is_default of this StackMinorVersion.

        <code>true</code> if this is the default minor version; otherwise, <code>false</code>.

        :return: The is_default of this StackMinorVersion.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this StackMinorVersion.

        <code>true</code> if this is the default minor version; otherwise, <code>false</code>.

        :param is_default: The is_default of this StackMinorVersion.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def runtime_version(self):
        """Gets the runtime_version of this StackMinorVersion.

        Application stack minor version (runtime only).

        :return: The runtime_version of this StackMinorVersion.
        :rtype: str
        """
        return self._runtime_version

    @runtime_version.setter
    def runtime_version(self, runtime_version):
        """Sets the runtime_version of this StackMinorVersion.

        Application stack minor version (runtime only).

        :param runtime_version: The runtime_version of this StackMinorVersion.
        :type runtime_version: str
        """

        self._runtime_version = runtime_version
