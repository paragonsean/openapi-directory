/*
 * Provider API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StackMajorVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Application stack.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:34:10.183138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationStack {
  public static final String SERIALIZED_NAME_DEPENDENCY = "dependency";
  @SerializedName(SERIALIZED_NAME_DEPENDENCY)
  private String dependency;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_FRAMEWORKS = "frameworks";
  @SerializedName(SERIALIZED_NAME_FRAMEWORKS)
  private List<ApplicationStack> frameworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAJOR_VERSIONS = "majorVersions";
  @SerializedName(SERIALIZED_NAME_MAJOR_VERSIONS)
  private List<StackMajorVersion> majorVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ApplicationStack() {
  }

  public ApplicationStack dependency(String dependency) {
    this.dependency = dependency;
    return this;
  }

  /**
   * Application stack dependency.
   * @return dependency
   */
  @javax.annotation.Nullable
  public String getDependency() {
    return dependency;
  }

  public void setDependency(String dependency) {
    this.dependency = dependency;
  }


  public ApplicationStack display(String display) {
    this.display = display;
    return this;
  }

  /**
   * Application stack display name.
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }

  public void setDisplay(String display) {
    this.display = display;
  }


  public ApplicationStack frameworks(List<ApplicationStack> frameworks) {
    this.frameworks = frameworks;
    return this;
  }

  public ApplicationStack addFrameworksItem(ApplicationStack frameworksItem) {
    if (this.frameworks == null) {
      this.frameworks = new ArrayList<>();
    }
    this.frameworks.add(frameworksItem);
    return this;
  }

  /**
   * List of frameworks associated with application stack.
   * @return frameworks
   */
  @javax.annotation.Nullable
  public List<ApplicationStack> getFrameworks() {
    return frameworks;
  }

  public void setFrameworks(List<ApplicationStack> frameworks) {
    this.frameworks = frameworks;
  }


  public ApplicationStack majorVersions(List<StackMajorVersion> majorVersions) {
    this.majorVersions = majorVersions;
    return this;
  }

  public ApplicationStack addMajorVersionsItem(StackMajorVersion majorVersionsItem) {
    if (this.majorVersions == null) {
      this.majorVersions = new ArrayList<>();
    }
    this.majorVersions.add(majorVersionsItem);
    return this;
  }

  /**
   * List of major versions available.
   * @return majorVersions
   */
  @javax.annotation.Nullable
  public List<StackMajorVersion> getMajorVersions() {
    return majorVersions;
  }

  public void setMajorVersions(List<StackMajorVersion> majorVersions) {
    this.majorVersions = majorVersions;
  }


  public ApplicationStack name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Application stack name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationStack applicationStack = (ApplicationStack) o;
    return Objects.equals(this.dependency, applicationStack.dependency) &&
        Objects.equals(this.display, applicationStack.display) &&
        Objects.equals(this.frameworks, applicationStack.frameworks) &&
        Objects.equals(this.majorVersions, applicationStack.majorVersions) &&
        Objects.equals(this.name, applicationStack.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependency, display, frameworks, majorVersions, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationStack {\n");
    sb.append("    dependency: ").append(toIndentedString(dependency)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    frameworks: ").append(toIndentedString(frameworks)).append("\n");
    sb.append("    majorVersions: ").append(toIndentedString(majorVersions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dependency");
    openapiFields.add("display");
    openapiFields.add("frameworks");
    openapiFields.add("majorVersions");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationStack
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationStack.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationStack is not found in the empty JSON string", ApplicationStack.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationStack.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationStack` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dependency") != null && !jsonObj.get("dependency").isJsonNull()) && !jsonObj.get("dependency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependency").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if (jsonObj.get("frameworks") != null && !jsonObj.get("frameworks").isJsonNull()) {
        JsonArray jsonArrayframeworks = jsonObj.getAsJsonArray("frameworks");
        if (jsonArrayframeworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("frameworks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `frameworks` to be an array in the JSON string but got `%s`", jsonObj.get("frameworks").toString()));
          }

          // validate the optional field `frameworks` (array)
          for (int i = 0; i < jsonArrayframeworks.size(); i++) {
            ApplicationStack.validateJsonElement(jsonArrayframeworks.get(i));
          };
        }
      }
      if (jsonObj.get("majorVersions") != null && !jsonObj.get("majorVersions").isJsonNull()) {
        JsonArray jsonArraymajorVersions = jsonObj.getAsJsonArray("majorVersions");
        if (jsonArraymajorVersions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("majorVersions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `majorVersions` to be an array in the JSON string but got `%s`", jsonObj.get("majorVersions").toString()));
          }

          // validate the optional field `majorVersions` (array)
          for (int i = 0; i < jsonArraymajorVersions.size(); i++) {
            StackMajorVersion.validateJsonElement(jsonArraymajorVersions.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationStack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationStack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationStack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationStack.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationStack>() {
           @Override
           public void write(JsonWriter out, ApplicationStack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationStack read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationStack given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationStack
   * @throws IOException if the JSON string is invalid with respect to ApplicationStack
   */
  public static ApplicationStack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationStack.class);
  }

  /**
   * Convert an instance of ApplicationStack to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

