/*
 * Provider API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StackMinorVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Application stack major version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:34:10.183138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StackMajorVersion {
  public static final String SERIALIZED_NAME_DISPLAY_VERSION = "displayVersion";
  @SerializedName(SERIALIZED_NAME_DISPLAY_VERSION)
  private String displayVersion;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_MINOR_VERSIONS = "minorVersions";
  @SerializedName(SERIALIZED_NAME_MINOR_VERSIONS)
  private List<StackMinorVersion> minorVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUNTIME_VERSION = "runtimeVersion";
  @SerializedName(SERIALIZED_NAME_RUNTIME_VERSION)
  private String runtimeVersion;

  public StackMajorVersion() {
  }

  public StackMajorVersion displayVersion(String displayVersion) {
    this.displayVersion = displayVersion;
    return this;
  }

  /**
   * Application stack major version (display only).
   * @return displayVersion
   */
  @javax.annotation.Nullable
  public String getDisplayVersion() {
    return displayVersion;
  }

  public void setDisplayVersion(String displayVersion) {
    this.displayVersion = displayVersion;
  }


  public StackMajorVersion isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if this is the default major version; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public StackMajorVersion minorVersions(List<StackMinorVersion> minorVersions) {
    this.minorVersions = minorVersions;
    return this;
  }

  public StackMajorVersion addMinorVersionsItem(StackMinorVersion minorVersionsItem) {
    if (this.minorVersions == null) {
      this.minorVersions = new ArrayList<>();
    }
    this.minorVersions.add(minorVersionsItem);
    return this;
  }

  /**
   * Minor versions associated with the major version.
   * @return minorVersions
   */
  @javax.annotation.Nullable
  public List<StackMinorVersion> getMinorVersions() {
    return minorVersions;
  }

  public void setMinorVersions(List<StackMinorVersion> minorVersions) {
    this.minorVersions = minorVersions;
  }


  public StackMajorVersion runtimeVersion(String runtimeVersion) {
    this.runtimeVersion = runtimeVersion;
    return this;
  }

  /**
   * Application stack major version (runtime only).
   * @return runtimeVersion
   */
  @javax.annotation.Nullable
  public String getRuntimeVersion() {
    return runtimeVersion;
  }

  public void setRuntimeVersion(String runtimeVersion) {
    this.runtimeVersion = runtimeVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackMajorVersion stackMajorVersion = (StackMajorVersion) o;
    return Objects.equals(this.displayVersion, stackMajorVersion.displayVersion) &&
        Objects.equals(this.isDefault, stackMajorVersion.isDefault) &&
        Objects.equals(this.minorVersions, stackMajorVersion.minorVersions) &&
        Objects.equals(this.runtimeVersion, stackMajorVersion.runtimeVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayVersion, isDefault, minorVersions, runtimeVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackMajorVersion {\n");
    sb.append("    displayVersion: ").append(toIndentedString(displayVersion)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    minorVersions: ").append(toIndentedString(minorVersions)).append("\n");
    sb.append("    runtimeVersion: ").append(toIndentedString(runtimeVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayVersion");
    openapiFields.add("isDefault");
    openapiFields.add("minorVersions");
    openapiFields.add("runtimeVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StackMajorVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StackMajorVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StackMajorVersion is not found in the empty JSON string", StackMajorVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StackMajorVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StackMajorVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayVersion") != null && !jsonObj.get("displayVersion").isJsonNull()) && !jsonObj.get("displayVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayVersion").toString()));
      }
      if (jsonObj.get("minorVersions") != null && !jsonObj.get("minorVersions").isJsonNull()) {
        JsonArray jsonArrayminorVersions = jsonObj.getAsJsonArray("minorVersions");
        if (jsonArrayminorVersions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("minorVersions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `minorVersions` to be an array in the JSON string but got `%s`", jsonObj.get("minorVersions").toString()));
          }

          // validate the optional field `minorVersions` (array)
          for (int i = 0; i < jsonArrayminorVersions.size(); i++) {
            StackMinorVersion.validateJsonElement(jsonArrayminorVersions.get(i));
          };
        }
      }
      if ((jsonObj.get("runtimeVersion") != null && !jsonObj.get("runtimeVersion").isJsonNull()) && !jsonObj.get("runtimeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtimeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runtimeVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StackMajorVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StackMajorVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StackMajorVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StackMajorVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<StackMajorVersion>() {
           @Override
           public void write(JsonWriter out, StackMajorVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StackMajorVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StackMajorVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StackMajorVersion
   * @throws IOException if the JSON string is invalid with respect to StackMajorVersion
   */
  public static StackMajorVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackMajorVersion.class);
  }

  /**
   * Convert an instance of StackMajorVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

