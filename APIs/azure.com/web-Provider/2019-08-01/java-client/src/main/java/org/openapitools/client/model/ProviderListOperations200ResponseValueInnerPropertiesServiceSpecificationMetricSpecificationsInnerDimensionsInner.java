/*
 * Provider API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dimension of a resource metric. For e.g. instance specific HTTP requests for a web app,  where instance name is dimension of the metric HTTP request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:34:07.763507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_INTERNAL_NAME = "internalName";
  @SerializedName(SERIALIZED_NAME_INTERNAL_NAME)
  private String internalName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TO_BE_EXPORTED_FOR_SHOEBOX = "toBeExportedForShoebox";
  @SerializedName(SERIALIZED_NAME_TO_BE_EXPORTED_FOR_SHOEBOX)
  private Boolean toBeExportedForShoebox;

  public ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner() {
  }

  public ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner internalName(String internalName) {
    this.internalName = internalName;
    return this;
  }

  /**
   * Get internalName
   * @return internalName
   */
  @javax.annotation.Nullable
  public String getInternalName() {
    return internalName;
  }

  public void setInternalName(String internalName) {
    this.internalName = internalName;
  }


  public ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner toBeExportedForShoebox(Boolean toBeExportedForShoebox) {
    this.toBeExportedForShoebox = toBeExportedForShoebox;
    return this;
  }

  /**
   * Get toBeExportedForShoebox
   * @return toBeExportedForShoebox
   */
  @javax.annotation.Nullable
  public Boolean getToBeExportedForShoebox() {
    return toBeExportedForShoebox;
  }

  public void setToBeExportedForShoebox(Boolean toBeExportedForShoebox) {
    this.toBeExportedForShoebox = toBeExportedForShoebox;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner providerListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner = (ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner) o;
    return Objects.equals(this.displayName, providerListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner.displayName) &&
        Objects.equals(this.internalName, providerListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner.internalName) &&
        Objects.equals(this.name, providerListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner.name) &&
        Objects.equals(this.toBeExportedForShoebox, providerListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner.toBeExportedForShoebox);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, internalName, name, toBeExportedForShoebox);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    internalName: ").append(toIndentedString(internalName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    toBeExportedForShoebox: ").append(toIndentedString(toBeExportedForShoebox)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("internalName");
    openapiFields.add("name");
    openapiFields.add("toBeExportedForShoebox");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner is not found in the empty JSON string", ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("internalName") != null && !jsonObj.get("internalName").isJsonNull()) && !jsonObj.get("internalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner>() {
           @Override
           public void write(JsonWriter out, ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner
   * @throws IOException if the JSON string is invalid with respect to ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner
   */
  public static ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner.class);
  }

  /**
   * Convert an instance of ProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInnerDimensionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

