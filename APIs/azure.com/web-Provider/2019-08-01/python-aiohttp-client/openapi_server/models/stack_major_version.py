# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stack_minor_version import StackMinorVersion
from openapi_server import util


class StackMajorVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_insights: bool=None, display_version: str=None, is_default: bool=None, is_deprecated: bool=None, is_hidden: bool=None, is_preview: bool=None, minor_versions: List[StackMinorVersion]=None, runtime_version: str=None):
        """StackMajorVersion - a model defined in OpenAPI

        :param application_insights: The application_insights of this StackMajorVersion.
        :param display_version: The display_version of this StackMajorVersion.
        :param is_default: The is_default of this StackMajorVersion.
        :param is_deprecated: The is_deprecated of this StackMajorVersion.
        :param is_hidden: The is_hidden of this StackMajorVersion.
        :param is_preview: The is_preview of this StackMajorVersion.
        :param minor_versions: The minor_versions of this StackMajorVersion.
        :param runtime_version: The runtime_version of this StackMajorVersion.
        """
        self.openapi_types = {
            'application_insights': bool,
            'display_version': str,
            'is_default': bool,
            'is_deprecated': bool,
            'is_hidden': bool,
            'is_preview': bool,
            'minor_versions': List[StackMinorVersion],
            'runtime_version': str
        }

        self.attribute_map = {
            'application_insights': 'applicationInsights',
            'display_version': 'displayVersion',
            'is_default': 'isDefault',
            'is_deprecated': 'isDeprecated',
            'is_hidden': 'isHidden',
            'is_preview': 'isPreview',
            'minor_versions': 'minorVersions',
            'runtime_version': 'runtimeVersion'
        }

        self._application_insights = application_insights
        self._display_version = display_version
        self._is_default = is_default
        self._is_deprecated = is_deprecated
        self._is_hidden = is_hidden
        self._is_preview = is_preview
        self._minor_versions = minor_versions
        self._runtime_version = runtime_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StackMajorVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StackMajorVersion of this StackMajorVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_insights(self):
        """Gets the application_insights of this StackMajorVersion.

        <code>true</code> if this supports Application Insights; otherwise, <code>false</code>.

        :return: The application_insights of this StackMajorVersion.
        :rtype: bool
        """
        return self._application_insights

    @application_insights.setter
    def application_insights(self, application_insights):
        """Sets the application_insights of this StackMajorVersion.

        <code>true</code> if this supports Application Insights; otherwise, <code>false</code>.

        :param application_insights: The application_insights of this StackMajorVersion.
        :type application_insights: bool
        """

        self._application_insights = application_insights

    @property
    def display_version(self):
        """Gets the display_version of this StackMajorVersion.

        Application stack major version (display only).

        :return: The display_version of this StackMajorVersion.
        :rtype: str
        """
        return self._display_version

    @display_version.setter
    def display_version(self, display_version):
        """Sets the display_version of this StackMajorVersion.

        Application stack major version (display only).

        :param display_version: The display_version of this StackMajorVersion.
        :type display_version: str
        """

        self._display_version = display_version

    @property
    def is_default(self):
        """Gets the is_default of this StackMajorVersion.

        <code>true</code> if this is the default major version; otherwise, <code>false</code>.

        :return: The is_default of this StackMajorVersion.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this StackMajorVersion.

        <code>true</code> if this is the default major version; otherwise, <code>false</code>.

        :param is_default: The is_default of this StackMajorVersion.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def is_deprecated(self):
        """Gets the is_deprecated of this StackMajorVersion.

        <code>true</code> if this stack has been deprecated, otherwise <code>false</code>.

        :return: The is_deprecated of this StackMajorVersion.
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """Sets the is_deprecated of this StackMajorVersion.

        <code>true</code> if this stack has been deprecated, otherwise <code>false</code>.

        :param is_deprecated: The is_deprecated of this StackMajorVersion.
        :type is_deprecated: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def is_hidden(self):
        """Gets the is_hidden of this StackMajorVersion.

        <code>true</code> if this stack should be hidden for new customers on portal, otherwise <code>false</code>.

        :return: The is_hidden of this StackMajorVersion.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this StackMajorVersion.

        <code>true</code> if this stack should be hidden for new customers on portal, otherwise <code>false</code>.

        :param is_hidden: The is_hidden of this StackMajorVersion.
        :type is_hidden: bool
        """

        self._is_hidden = is_hidden

    @property
    def is_preview(self):
        """Gets the is_preview of this StackMajorVersion.

        <code>true</code> if this stack is in Preview, otherwise <code>false</code>.

        :return: The is_preview of this StackMajorVersion.
        :rtype: bool
        """
        return self._is_preview

    @is_preview.setter
    def is_preview(self, is_preview):
        """Sets the is_preview of this StackMajorVersion.

        <code>true</code> if this stack is in Preview, otherwise <code>false</code>.

        :param is_preview: The is_preview of this StackMajorVersion.
        :type is_preview: bool
        """

        self._is_preview = is_preview

    @property
    def minor_versions(self):
        """Gets the minor_versions of this StackMajorVersion.

        Minor versions associated with the major version.

        :return: The minor_versions of this StackMajorVersion.
        :rtype: List[StackMinorVersion]
        """
        return self._minor_versions

    @minor_versions.setter
    def minor_versions(self, minor_versions):
        """Sets the minor_versions of this StackMajorVersion.

        Minor versions associated with the major version.

        :param minor_versions: The minor_versions of this StackMajorVersion.
        :type minor_versions: List[StackMinorVersion]
        """

        self._minor_versions = minor_versions

    @property
    def runtime_version(self):
        """Gets the runtime_version of this StackMajorVersion.

        Application stack major version (runtime only).

        :return: The runtime_version of this StackMajorVersion.
        :rtype: str
        """
        return self._runtime_version

    @runtime_version.setter
    def runtime_version(self, runtime_version):
        """Sets the runtime_version of this StackMajorVersion.

        Application stack major version (runtime only).

        :param runtime_version: The runtime_version of this StackMajorVersion.
        :type runtime_version: str
        """

        self._runtime_version = runtime_version
