/**
 * Provider API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackMajorVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackMajorVersion::OAIStackMajorVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackMajorVersion::OAIStackMajorVersion() {
    this->initializeModel();
}

OAIStackMajorVersion::~OAIStackMajorVersion() {}

void OAIStackMajorVersion::initializeModel() {

    m_application_insights_isSet = false;
    m_application_insights_isValid = false;

    m_display_version_isSet = false;
    m_display_version_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_deprecated_isSet = false;
    m_is_deprecated_isValid = false;

    m_is_hidden_isSet = false;
    m_is_hidden_isValid = false;

    m_is_preview_isSet = false;
    m_is_preview_isValid = false;

    m_minor_versions_isSet = false;
    m_minor_versions_isValid = false;

    m_runtime_version_isSet = false;
    m_runtime_version_isValid = false;
}

void OAIStackMajorVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackMajorVersion::fromJsonObject(QJsonObject json) {

    m_application_insights_isValid = ::OpenAPI::fromJsonValue(m_application_insights, json[QString("applicationInsights")]);
    m_application_insights_isSet = !json[QString("applicationInsights")].isNull() && m_application_insights_isValid;

    m_display_version_isValid = ::OpenAPI::fromJsonValue(m_display_version, json[QString("displayVersion")]);
    m_display_version_isSet = !json[QString("displayVersion")].isNull() && m_display_version_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_is_deprecated_isValid = ::OpenAPI::fromJsonValue(m_is_deprecated, json[QString("isDeprecated")]);
    m_is_deprecated_isSet = !json[QString("isDeprecated")].isNull() && m_is_deprecated_isValid;

    m_is_hidden_isValid = ::OpenAPI::fromJsonValue(m_is_hidden, json[QString("isHidden")]);
    m_is_hidden_isSet = !json[QString("isHidden")].isNull() && m_is_hidden_isValid;

    m_is_preview_isValid = ::OpenAPI::fromJsonValue(m_is_preview, json[QString("isPreview")]);
    m_is_preview_isSet = !json[QString("isPreview")].isNull() && m_is_preview_isValid;

    m_minor_versions_isValid = ::OpenAPI::fromJsonValue(m_minor_versions, json[QString("minorVersions")]);
    m_minor_versions_isSet = !json[QString("minorVersions")].isNull() && m_minor_versions_isValid;

    m_runtime_version_isValid = ::OpenAPI::fromJsonValue(m_runtime_version, json[QString("runtimeVersion")]);
    m_runtime_version_isSet = !json[QString("runtimeVersion")].isNull() && m_runtime_version_isValid;
}

QString OAIStackMajorVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackMajorVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_application_insights_isSet) {
        obj.insert(QString("applicationInsights"), ::OpenAPI::toJsonValue(m_application_insights));
    }
    if (m_display_version_isSet) {
        obj.insert(QString("displayVersion"), ::OpenAPI::toJsonValue(m_display_version));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_deprecated_isSet) {
        obj.insert(QString("isDeprecated"), ::OpenAPI::toJsonValue(m_is_deprecated));
    }
    if (m_is_hidden_isSet) {
        obj.insert(QString("isHidden"), ::OpenAPI::toJsonValue(m_is_hidden));
    }
    if (m_is_preview_isSet) {
        obj.insert(QString("isPreview"), ::OpenAPI::toJsonValue(m_is_preview));
    }
    if (m_minor_versions.size() > 0) {
        obj.insert(QString("minorVersions"), ::OpenAPI::toJsonValue(m_minor_versions));
    }
    if (m_runtime_version_isSet) {
        obj.insert(QString("runtimeVersion"), ::OpenAPI::toJsonValue(m_runtime_version));
    }
    return obj;
}

bool OAIStackMajorVersion::isApplicationInsights() const {
    return m_application_insights;
}
void OAIStackMajorVersion::setApplicationInsights(const bool &application_insights) {
    m_application_insights = application_insights;
    m_application_insights_isSet = true;
}

bool OAIStackMajorVersion::is_application_insights_Set() const{
    return m_application_insights_isSet;
}

bool OAIStackMajorVersion::is_application_insights_Valid() const{
    return m_application_insights_isValid;
}

QString OAIStackMajorVersion::getDisplayVersion() const {
    return m_display_version;
}
void OAIStackMajorVersion::setDisplayVersion(const QString &display_version) {
    m_display_version = display_version;
    m_display_version_isSet = true;
}

bool OAIStackMajorVersion::is_display_version_Set() const{
    return m_display_version_isSet;
}

bool OAIStackMajorVersion::is_display_version_Valid() const{
    return m_display_version_isValid;
}

bool OAIStackMajorVersion::isIsDefault() const {
    return m_is_default;
}
void OAIStackMajorVersion::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIStackMajorVersion::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIStackMajorVersion::is_is_default_Valid() const{
    return m_is_default_isValid;
}

bool OAIStackMajorVersion::isIsDeprecated() const {
    return m_is_deprecated;
}
void OAIStackMajorVersion::setIsDeprecated(const bool &is_deprecated) {
    m_is_deprecated = is_deprecated;
    m_is_deprecated_isSet = true;
}

bool OAIStackMajorVersion::is_is_deprecated_Set() const{
    return m_is_deprecated_isSet;
}

bool OAIStackMajorVersion::is_is_deprecated_Valid() const{
    return m_is_deprecated_isValid;
}

bool OAIStackMajorVersion::isIsHidden() const {
    return m_is_hidden;
}
void OAIStackMajorVersion::setIsHidden(const bool &is_hidden) {
    m_is_hidden = is_hidden;
    m_is_hidden_isSet = true;
}

bool OAIStackMajorVersion::is_is_hidden_Set() const{
    return m_is_hidden_isSet;
}

bool OAIStackMajorVersion::is_is_hidden_Valid() const{
    return m_is_hidden_isValid;
}

bool OAIStackMajorVersion::isIsPreview() const {
    return m_is_preview;
}
void OAIStackMajorVersion::setIsPreview(const bool &is_preview) {
    m_is_preview = is_preview;
    m_is_preview_isSet = true;
}

bool OAIStackMajorVersion::is_is_preview_Set() const{
    return m_is_preview_isSet;
}

bool OAIStackMajorVersion::is_is_preview_Valid() const{
    return m_is_preview_isValid;
}

QList<OAIStackMinorVersion> OAIStackMajorVersion::getMinorVersions() const {
    return m_minor_versions;
}
void OAIStackMajorVersion::setMinorVersions(const QList<OAIStackMinorVersion> &minor_versions) {
    m_minor_versions = minor_versions;
    m_minor_versions_isSet = true;
}

bool OAIStackMajorVersion::is_minor_versions_Set() const{
    return m_minor_versions_isSet;
}

bool OAIStackMajorVersion::is_minor_versions_Valid() const{
    return m_minor_versions_isValid;
}

QString OAIStackMajorVersion::getRuntimeVersion() const {
    return m_runtime_version;
}
void OAIStackMajorVersion::setRuntimeVersion(const QString &runtime_version) {
    m_runtime_version = runtime_version;
    m_runtime_version_isSet = true;
}

bool OAIStackMajorVersion::is_runtime_version_Set() const{
    return m_runtime_version_isSet;
}

bool OAIStackMajorVersion::is_runtime_version_Valid() const{
    return m_runtime_version_isValid;
}

bool OAIStackMajorVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_insights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_preview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minor_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackMajorVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
