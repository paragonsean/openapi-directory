/**
 * ApiManagementClient
 * Use these REST APIs for getting the network connectivity status of your Azure API Management deployment. When the API Management service is deployed inside a Virtual Network, it needs to have access to other Azure resources it depends on. This also gives details about the DNS Servers visible to Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectivityStatusContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectivityStatusContract::OAIConnectivityStatusContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectivityStatusContract::OAIConnectivityStatusContract() {
    this->initializeModel();
}

OAIConnectivityStatusContract::~OAIConnectivityStatusContract() {}

void OAIConnectivityStatusContract::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_last_status_change_isSet = false;
    m_last_status_change_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIConnectivityStatusContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectivityStatusContract::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_last_status_change_isValid = ::OpenAPI::fromJsonValue(m_last_status_change, json[QString("lastStatusChange")]);
    m_last_status_change_isSet = !json[QString("lastStatusChange")].isNull() && m_last_status_change_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIConnectivityStatusContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectivityStatusContract::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_last_status_change_isSet) {
        obj.insert(QString("lastStatusChange"), ::OpenAPI::toJsonValue(m_last_status_change));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIConnectivityStatusContract::getError() const {
    return m_error;
}
void OAIConnectivityStatusContract::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIConnectivityStatusContract::is_error_Set() const{
    return m_error_isSet;
}

bool OAIConnectivityStatusContract::is_error_Valid() const{
    return m_error_isValid;
}

QDateTime OAIConnectivityStatusContract::getLastStatusChange() const {
    return m_last_status_change;
}
void OAIConnectivityStatusContract::setLastStatusChange(const QDateTime &last_status_change) {
    m_last_status_change = last_status_change;
    m_last_status_change_isSet = true;
}

bool OAIConnectivityStatusContract::is_last_status_change_Set() const{
    return m_last_status_change_isSet;
}

bool OAIConnectivityStatusContract::is_last_status_change_Valid() const{
    return m_last_status_change_isValid;
}

QDateTime OAIConnectivityStatusContract::getLastUpdated() const {
    return m_last_updated;
}
void OAIConnectivityStatusContract::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIConnectivityStatusContract::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIConnectivityStatusContract::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIConnectivityStatusContract::getName() const {
    return m_name;
}
void OAIConnectivityStatusContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnectivityStatusContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnectivityStatusContract::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConnectivityStatusContract::getStatus() const {
    return m_status;
}
void OAIConnectivityStatusContract::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIConnectivityStatusContract::is_status_Set() const{
    return m_status_isSet;
}

bool OAIConnectivityStatusContract::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIConnectivityStatusContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectivityStatusContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_last_status_change_isValid && m_last_updated_isValid && m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
