/*
 * ApiManagementClient
 * Use these REST APIs for getting the network connectivity status of your Azure API Management deployment. When the API Management service is deployed inside a Virtual Network, it needs to have access to other Azure resources it depends on. This also gives details about the DNS Servers visible to Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.NetworkStatusContract;
import org.openapitools.client.model.NetworkStatusContractByLocation;
import org.openapitools.client.model.NetworkStatusListByLocationDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworkStatusApi
 */
@Disabled
public class NetworkStatusApiTest {

    private final NetworkStatusApi api = new NetworkStatusApi();

    /**
     * Gets the Connectivity Status to the external resources on which the Api Management service depends from inside the Cloud Service. This also returns the DNS Servers as visible to the CloudService.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkStatusListByLocationTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String serviceName = null;
        String locationName = null;
        String apiVersion = null;
        NetworkStatusContract response = api.networkStatusListByLocation(subscriptionId, resourceGroupName, serviceName, locationName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Connectivity Status to the external resources on which the Api Management service depends from inside the Cloud Service. This also returns the DNS Servers as visible to the CloudService.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkStatusListByServiceTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        List<NetworkStatusContractByLocation> response = api.networkStatusListByService(subscriptionId, resourceGroupName, serviceName, apiVersion);
        // TODO: test validations
    }

}
