# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_status_contract import NetworkStatusContract
from openapi_server import util


class NetworkStatusContractByLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, network_status: NetworkStatusContract=None):
        """NetworkStatusContractByLocation - a model defined in OpenAPI

        :param location: The location of this NetworkStatusContractByLocation.
        :param network_status: The network_status of this NetworkStatusContractByLocation.
        """
        self.openapi_types = {
            'location': str,
            'network_status': NetworkStatusContract
        }

        self.attribute_map = {
            'location': 'location',
            'network_status': 'networkStatus'
        }

        self._location = location
        self._network_status = network_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkStatusContractByLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkStatusContractByLocation of this NetworkStatusContractByLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this NetworkStatusContractByLocation.

        Location of service

        :return: The location of this NetworkStatusContractByLocation.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this NetworkStatusContractByLocation.

        Location of service

        :param location: The location of this NetworkStatusContractByLocation.
        :type location: str
        """
        if location is not None and len(location) < 1:
            raise ValueError("Invalid value for `location`, length must be greater than or equal to `1`")

        self._location = location

    @property
    def network_status(self):
        """Gets the network_status of this NetworkStatusContractByLocation.


        :return: The network_status of this NetworkStatusContractByLocation.
        :rtype: NetworkStatusContract
        """
        return self._network_status

    @network_status.setter
    def network_status(self, network_status):
        """Sets the network_status of this NetworkStatusContractByLocation.


        :param network_status: The network_status of this NetworkStatusContractByLocation.
        :type network_status: NetworkStatusContract
        """

        self._network_status = network_status
