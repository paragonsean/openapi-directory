/**
 * ApiManagementClient
 * Use these REST APIs for getting the network connectivity status of your Azure API Management deployment. When the API Management service is deployed inside a Virtual Network, it needs to have access to other Azure resources it depends on. This also gives details about the DNS Servers visible to Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConnectivityStatusContract model module.
 * @module model/ConnectivityStatusContract
 * @version 2018-01-01
 */
class ConnectivityStatusContract {
    /**
     * Constructs a new <code>ConnectivityStatusContract</code>.
     * Details about connectivity to a resource.
     * @alias module:model/ConnectivityStatusContract
     * @param lastStatusChange {Date} The date when the resource connectivity status last Changed from success to failure or vice-versa. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
     * @param lastUpdated {Date} The date when the resource connectivity status was last updated. This status should be updated every 15 minutes. If this status has not been updated, then it means that the service has lost network connectivity to the resource, from inside the Virtual Network.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
     * @param name {String} The hostname of the resource which the service depends on. This can be the database, storage or any other azure resource on which the service depends upon.
     * @param status {module:model/ConnectivityStatusContract.StatusEnum} Resource Connectivity Status Type identifier.
     */
    constructor(lastStatusChange, lastUpdated, name, status) { 
        
        ConnectivityStatusContract.initialize(this, lastStatusChange, lastUpdated, name, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lastStatusChange, lastUpdated, name, status) { 
        obj['lastStatusChange'] = lastStatusChange;
        obj['lastUpdated'] = lastUpdated;
        obj['name'] = name;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>ConnectivityStatusContract</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectivityStatusContract} obj Optional instance to populate.
     * @return {module:model/ConnectivityStatusContract} The populated <code>ConnectivityStatusContract</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectivityStatusContract();

            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('lastStatusChange')) {
                obj['lastStatusChange'] = ApiClient.convertToType(data['lastStatusChange'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectivityStatusContract</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectivityStatusContract</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConnectivityStatusContract.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

ConnectivityStatusContract.RequiredProperties = ["lastStatusChange", "lastUpdated", "name", "status"];

/**
 * Error details of the connectivity to the resource.
 * @member {String} error
 */
ConnectivityStatusContract.prototype['error'] = undefined;

/**
 * The date when the resource connectivity status last Changed from success to failure or vice-versa. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} lastStatusChange
 */
ConnectivityStatusContract.prototype['lastStatusChange'] = undefined;

/**
 * The date when the resource connectivity status was last updated. This status should be updated every 15 minutes. If this status has not been updated, then it means that the service has lost network connectivity to the resource, from inside the Virtual Network.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} lastUpdated
 */
ConnectivityStatusContract.prototype['lastUpdated'] = undefined;

/**
 * The hostname of the resource which the service depends on. This can be the database, storage or any other azure resource on which the service depends upon.
 * @member {String} name
 */
ConnectivityStatusContract.prototype['name'] = undefined;

/**
 * Resource Connectivity Status Type identifier.
 * @member {module:model/ConnectivityStatusContract.StatusEnum} status
 */
ConnectivityStatusContract.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ConnectivityStatusContract['StatusEnum'] = {

    /**
     * value: "initializing"
     * @const
     */
    "initializing": "initializing",

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "failure"
     * @const
     */
    "failure": "failure"
};



export default ConnectivityStatusContract;

