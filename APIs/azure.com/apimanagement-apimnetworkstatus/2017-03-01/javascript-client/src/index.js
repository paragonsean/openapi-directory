/**
 * ApiManagementClient
 * Use these REST APIs for getting the network connectivity status of your Azure API Management deployment. When the API Management service is deployed inside a Virtual Network, it needs to have access to other Azure resources it depends on. This also gives details about the DNS Servers visible to Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ConnectivityStatusContract from './model/ConnectivityStatusContract';
import NetworkStatusContract from './model/NetworkStatusContract';
import NetworkStatusListByLocationDefaultResponse from './model/NetworkStatusListByLocationDefaultResponse';
import NetworkStatusListByLocationDefaultResponseDetailsInner from './model/NetworkStatusListByLocationDefaultResponseDetailsInner';
import NetworkStatusApi from './api/NetworkStatusApi';


/**
* Use these REST APIs for getting the network connectivity status of your Azure API Management deployment. When the API Management service is deployed inside a Virtual Network, it needs to have access to other Azure resources it depends on. This also gives details about the DNS Servers visible to Azure API Management deployment..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ApiManagementClient = require('index'); // See note below*.
* var xxxSvc = new ApiManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ApiManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ApiManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ApiManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2017-03-01
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ConnectivityStatusContract model constructor.
     * @property {module:model/ConnectivityStatusContract}
     */
    ConnectivityStatusContract,

    /**
     * The NetworkStatusContract model constructor.
     * @property {module:model/NetworkStatusContract}
     */
    NetworkStatusContract,

    /**
     * The NetworkStatusListByLocationDefaultResponse model constructor.
     * @property {module:model/NetworkStatusListByLocationDefaultResponse}
     */
    NetworkStatusListByLocationDefaultResponse,

    /**
     * The NetworkStatusListByLocationDefaultResponseDetailsInner model constructor.
     * @property {module:model/NetworkStatusListByLocationDefaultResponseDetailsInner}
     */
    NetworkStatusListByLocationDefaultResponseDetailsInner,

    /**
    * The NetworkStatusApi service constructor.
    * @property {module:api/NetworkStatusApi}
    */
    NetworkStatusApi
};
