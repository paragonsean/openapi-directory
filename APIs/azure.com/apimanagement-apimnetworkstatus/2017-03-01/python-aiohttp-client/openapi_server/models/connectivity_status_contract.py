# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectivityStatusContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, last_status_change: datetime=None, last_updated: datetime=None, name: str=None, status: str=None):
        """ConnectivityStatusContract - a model defined in OpenAPI

        :param error: The error of this ConnectivityStatusContract.
        :param last_status_change: The last_status_change of this ConnectivityStatusContract.
        :param last_updated: The last_updated of this ConnectivityStatusContract.
        :param name: The name of this ConnectivityStatusContract.
        :param status: The status of this ConnectivityStatusContract.
        """
        self.openapi_types = {
            'error': str,
            'last_status_change': datetime,
            'last_updated': datetime,
            'name': str,
            'status': str
        }

        self.attribute_map = {
            'error': 'error',
            'last_status_change': 'lastStatusChange',
            'last_updated': 'lastUpdated',
            'name': 'name',
            'status': 'status'
        }

        self._error = error
        self._last_status_change = last_status_change
        self._last_updated = last_updated
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectivityStatusContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectivityStatusContract of this ConnectivityStatusContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this ConnectivityStatusContract.

        Error details of the connectivity to the resource.

        :return: The error of this ConnectivityStatusContract.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ConnectivityStatusContract.

        Error details of the connectivity to the resource.

        :param error: The error of this ConnectivityStatusContract.
        :type error: str
        """

        self._error = error

    @property
    def last_status_change(self):
        """Gets the last_status_change of this ConnectivityStatusContract.

        The date when the resource connectivity status last Changed from success to failure or vice-versa. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The last_status_change of this ConnectivityStatusContract.
        :rtype: datetime
        """
        return self._last_status_change

    @last_status_change.setter
    def last_status_change(self, last_status_change):
        """Sets the last_status_change of this ConnectivityStatusContract.

        The date when the resource connectivity status last Changed from success to failure or vice-versa. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param last_status_change: The last_status_change of this ConnectivityStatusContract.
        :type last_status_change: datetime
        """
        if last_status_change is None:
            raise ValueError("Invalid value for `last_status_change`, must not be `None`")

        self._last_status_change = last_status_change

    @property
    def last_updated(self):
        """Gets the last_updated of this ConnectivityStatusContract.

        The date when the resource connectivity status was last updated. This status should be updated every 15 minutes. If this status has not been updated, then it means that the service has lost network connectivity to the resource, from inside the Virtual Network.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The last_updated of this ConnectivityStatusContract.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ConnectivityStatusContract.

        The date when the resource connectivity status was last updated. This status should be updated every 15 minutes. If this status has not been updated, then it means that the service has lost network connectivity to the resource, from inside the Virtual Network.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param last_updated: The last_updated of this ConnectivityStatusContract.
        :type last_updated: datetime
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this ConnectivityStatusContract.

        The hostname of the resource which the service depends on. This can be the database, storage or any other azure resource on which the service depends upon.

        :return: The name of this ConnectivityStatusContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectivityStatusContract.

        The hostname of the resource which the service depends on. This can be the database, storage or any other azure resource on which the service depends upon.

        :param name: The name of this ConnectivityStatusContract.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this ConnectivityStatusContract.

        Resource Connectivity Status Type identifier.

        :return: The status of this ConnectivityStatusContract.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConnectivityStatusContract.

        Resource Connectivity Status Type identifier.

        :param status: The status of this ConnectivityStatusContract.
        :type status: str
        """
        allowed_values = ["initializing", "success", "failure"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
