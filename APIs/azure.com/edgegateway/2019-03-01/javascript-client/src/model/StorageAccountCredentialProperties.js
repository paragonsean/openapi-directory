/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AsymmetricEncryptedSecret from './AsymmetricEncryptedSecret';

/**
 * The StorageAccountCredentialProperties model module.
 * @module model/StorageAccountCredentialProperties
 * @version 2019-03-01
 */
class StorageAccountCredentialProperties {
    /**
     * Constructs a new <code>StorageAccountCredentialProperties</code>.
     * The storage account credential properties.
     * @alias module:model/StorageAccountCredentialProperties
     * @param accountType {module:model/StorageAccountCredentialProperties.AccountTypeEnum} Type of storage accessed on the storage account.
     * @param alias {String} Alias for the storage account.
     * @param sslStatus {module:model/StorageAccountCredentialProperties.SslStatusEnum} Signifies whether SSL needs to be enabled or not.
     */
    constructor(accountType, alias, sslStatus) { 
        
        StorageAccountCredentialProperties.initialize(this, accountType, alias, sslStatus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountType, alias, sslStatus) { 
        obj['accountType'] = accountType;
        obj['alias'] = alias;
        obj['sslStatus'] = sslStatus;
    }

    /**
     * Constructs a <code>StorageAccountCredentialProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StorageAccountCredentialProperties} obj Optional instance to populate.
     * @return {module:model/StorageAccountCredentialProperties} The populated <code>StorageAccountCredentialProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StorageAccountCredentialProperties();

            if (data.hasOwnProperty('accountKey')) {
                obj['accountKey'] = AsymmetricEncryptedSecret.constructFromObject(data['accountKey']);
            }
            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
            }
            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('blobDomainName')) {
                obj['blobDomainName'] = ApiClient.convertToType(data['blobDomainName'], 'String');
            }
            if (data.hasOwnProperty('connectionString')) {
                obj['connectionString'] = ApiClient.convertToType(data['connectionString'], 'String');
            }
            if (data.hasOwnProperty('sslStatus')) {
                obj['sslStatus'] = ApiClient.convertToType(data['sslStatus'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StorageAccountCredentialProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StorageAccountCredentialProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StorageAccountCredentialProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accountKey`
        if (data['accountKey']) { // data not null
          AsymmetricEncryptedSecret.validateJSON(data['accountKey']);
        }
        // ensure the json data is a string
        if (data['accountType'] && !(typeof data['accountType'] === 'string' || data['accountType'] instanceof String)) {
            throw new Error("Expected the field `accountType` to be a primitive type in the JSON string but got " + data['accountType']);
        }
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }
        // ensure the json data is a string
        if (data['blobDomainName'] && !(typeof data['blobDomainName'] === 'string' || data['blobDomainName'] instanceof String)) {
            throw new Error("Expected the field `blobDomainName` to be a primitive type in the JSON string but got " + data['blobDomainName']);
        }
        // ensure the json data is a string
        if (data['connectionString'] && !(typeof data['connectionString'] === 'string' || data['connectionString'] instanceof String)) {
            throw new Error("Expected the field `connectionString` to be a primitive type in the JSON string but got " + data['connectionString']);
        }
        // ensure the json data is a string
        if (data['sslStatus'] && !(typeof data['sslStatus'] === 'string' || data['sslStatus'] instanceof String)) {
            throw new Error("Expected the field `sslStatus` to be a primitive type in the JSON string but got " + data['sslStatus']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }

        return true;
    }


}

StorageAccountCredentialProperties.RequiredProperties = ["accountType", "alias", "sslStatus"];

/**
 * @member {module:model/AsymmetricEncryptedSecret} accountKey
 */
StorageAccountCredentialProperties.prototype['accountKey'] = undefined;

/**
 * Type of storage accessed on the storage account.
 * @member {module:model/StorageAccountCredentialProperties.AccountTypeEnum} accountType
 */
StorageAccountCredentialProperties.prototype['accountType'] = undefined;

/**
 * Alias for the storage account.
 * @member {String} alias
 */
StorageAccountCredentialProperties.prototype['alias'] = undefined;

/**
 * Blob end point for private clouds.
 * @member {String} blobDomainName
 */
StorageAccountCredentialProperties.prototype['blobDomainName'] = undefined;

/**
 * Connection string for the storage account. Use this string if username and account key are not specified.
 * @member {String} connectionString
 */
StorageAccountCredentialProperties.prototype['connectionString'] = undefined;

/**
 * Signifies whether SSL needs to be enabled or not.
 * @member {module:model/StorageAccountCredentialProperties.SslStatusEnum} sslStatus
 */
StorageAccountCredentialProperties.prototype['sslStatus'] = undefined;

/**
 * Username for the storage account.
 * @member {String} userName
 */
StorageAccountCredentialProperties.prototype['userName'] = undefined;





/**
 * Allowed values for the <code>accountType</code> property.
 * @enum {String}
 * @readonly
 */
StorageAccountCredentialProperties['AccountTypeEnum'] = {

    /**
     * value: "GeneralPurposeStorage"
     * @const
     */
    "GeneralPurposeStorage": "GeneralPurposeStorage",

    /**
     * value: "BlobStorage"
     * @const
     */
    "BlobStorage": "BlobStorage"
};


/**
 * Allowed values for the <code>sslStatus</code> property.
 * @enum {String}
 * @readonly
 */
StorageAccountCredentialProperties['SslStatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default StorageAccountCredentialProperties;

