/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Authentication from './Authentication';

/**
 * The IoTDeviceInfo model module.
 * @module model/IoTDeviceInfo
 * @version 2019-03-01
 */
class IoTDeviceInfo {
    /**
     * Constructs a new <code>IoTDeviceInfo</code>.
     * Metadata of IoT device/IoT Edge device to be configured.
     * @alias module:model/IoTDeviceInfo
     * @param deviceId {String} ID of the IoT device/edge device.
     * @param ioTHostHub {String} Host name for the IoT hub associated to the device.
     */
    constructor(deviceId, ioTHostHub) { 
        
        IoTDeviceInfo.initialize(this, deviceId, ioTHostHub);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceId, ioTHostHub) { 
        obj['deviceId'] = deviceId;
        obj['ioTHostHub'] = ioTHostHub;
    }

    /**
     * Constructs a <code>IoTDeviceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IoTDeviceInfo} obj Optional instance to populate.
     * @return {module:model/IoTDeviceInfo} The populated <code>IoTDeviceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoTDeviceInfo();

            if (data.hasOwnProperty('authentication')) {
                obj['authentication'] = Authentication.constructFromObject(data['authentication']);
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('ioTHostHub')) {
                obj['ioTHostHub'] = ApiClient.convertToType(data['ioTHostHub'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IoTDeviceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IoTDeviceInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IoTDeviceInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `authentication`
        if (data['authentication']) { // data not null
          Authentication.validateJSON(data['authentication']);
        }
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // ensure the json data is a string
        if (data['ioTHostHub'] && !(typeof data['ioTHostHub'] === 'string' || data['ioTHostHub'] instanceof String)) {
            throw new Error("Expected the field `ioTHostHub` to be a primitive type in the JSON string but got " + data['ioTHostHub']);
        }

        return true;
    }


}

IoTDeviceInfo.RequiredProperties = ["deviceId", "ioTHostHub"];

/**
 * @member {module:model/Authentication} authentication
 */
IoTDeviceInfo.prototype['authentication'] = undefined;

/**
 * ID of the IoT device/edge device.
 * @member {String} deviceId
 */
IoTDeviceInfo.prototype['deviceId'] = undefined;

/**
 * Host name for the IoT hub associated to the device.
 * @member {String} ioTHostHub
 */
IoTDeviceInfo.prototype['ioTHostHub'] = undefined;






export default IoTDeviceInfo;

