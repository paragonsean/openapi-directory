/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIoTDeviceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIoTDeviceInfo::OAIIoTDeviceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIoTDeviceInfo::OAIIoTDeviceInfo() {
    this->initializeModel();
}

OAIIoTDeviceInfo::~OAIIoTDeviceInfo() {}

void OAIIoTDeviceInfo::initializeModel() {

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_io_t_host_hub_isSet = false;
    m_io_t_host_hub_isValid = false;
}

void OAIIoTDeviceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIoTDeviceInfo::fromJsonObject(QJsonObject json) {

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_io_t_host_hub_isValid = ::OpenAPI::fromJsonValue(m_io_t_host_hub, json[QString("ioTHostHub")]);
    m_io_t_host_hub_isSet = !json[QString("ioTHostHub")].isNull() && m_io_t_host_hub_isValid;
}

QString OAIIoTDeviceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIoTDeviceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_io_t_host_hub_isSet) {
        obj.insert(QString("ioTHostHub"), ::OpenAPI::toJsonValue(m_io_t_host_hub));
    }
    return obj;
}

OAIAuthentication OAIIoTDeviceInfo::getAuthentication() const {
    return m_authentication;
}
void OAIIoTDeviceInfo::setAuthentication(const OAIAuthentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIIoTDeviceInfo::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIIoTDeviceInfo::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QString OAIIoTDeviceInfo::getDeviceId() const {
    return m_device_id;
}
void OAIIoTDeviceInfo::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIIoTDeviceInfo::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIIoTDeviceInfo::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIIoTDeviceInfo::getIoTHostHub() const {
    return m_io_t_host_hub;
}
void OAIIoTDeviceInfo::setIoTHostHub(const QString &io_t_host_hub) {
    m_io_t_host_hub = io_t_host_hub;
    m_io_t_host_hub_isSet = true;
}

bool OAIIoTDeviceInfo::is_io_t_host_hub_Set() const{
    return m_io_t_host_hub_isSet;
}

bool OAIIoTDeviceInfo::is_io_t_host_hub_Valid() const{
    return m_io_t_host_hub_isValid;
}

bool OAIIoTDeviceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_io_t_host_hub_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIoTDeviceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_id_isValid && m_io_t_host_hub_isValid && true;
}

} // namespace OpenAPI
