/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeriodicTimerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeriodicTimerProperties::OAIPeriodicTimerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeriodicTimerProperties::OAIPeriodicTimerProperties() {
    this->initializeModel();
}

OAIPeriodicTimerProperties::~OAIPeriodicTimerProperties() {}

void OAIPeriodicTimerProperties::initializeModel() {

    m_custom_context_tag_isSet = false;
    m_custom_context_tag_isValid = false;

    m_sink_info_isSet = false;
    m_sink_info_isValid = false;

    m_source_info_isSet = false;
    m_source_info_isValid = false;
}

void OAIPeriodicTimerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeriodicTimerProperties::fromJsonObject(QJsonObject json) {

    m_custom_context_tag_isValid = ::OpenAPI::fromJsonValue(m_custom_context_tag, json[QString("customContextTag")]);
    m_custom_context_tag_isSet = !json[QString("customContextTag")].isNull() && m_custom_context_tag_isValid;

    m_sink_info_isValid = ::OpenAPI::fromJsonValue(m_sink_info, json[QString("sinkInfo")]);
    m_sink_info_isSet = !json[QString("sinkInfo")].isNull() && m_sink_info_isValid;

    m_source_info_isValid = ::OpenAPI::fromJsonValue(m_source_info, json[QString("sourceInfo")]);
    m_source_info_isSet = !json[QString("sourceInfo")].isNull() && m_source_info_isValid;
}

QString OAIPeriodicTimerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeriodicTimerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_context_tag_isSet) {
        obj.insert(QString("customContextTag"), ::OpenAPI::toJsonValue(m_custom_context_tag));
    }
    if (m_sink_info.isSet()) {
        obj.insert(QString("sinkInfo"), ::OpenAPI::toJsonValue(m_sink_info));
    }
    if (m_source_info.isSet()) {
        obj.insert(QString("sourceInfo"), ::OpenAPI::toJsonValue(m_source_info));
    }
    return obj;
}

QString OAIPeriodicTimerProperties::getCustomContextTag() const {
    return m_custom_context_tag;
}
void OAIPeriodicTimerProperties::setCustomContextTag(const QString &custom_context_tag) {
    m_custom_context_tag = custom_context_tag;
    m_custom_context_tag_isSet = true;
}

bool OAIPeriodicTimerProperties::is_custom_context_tag_Set() const{
    return m_custom_context_tag_isSet;
}

bool OAIPeriodicTimerProperties::is_custom_context_tag_Valid() const{
    return m_custom_context_tag_isValid;
}

OAIRoleSinkInfo OAIPeriodicTimerProperties::getSinkInfo() const {
    return m_sink_info;
}
void OAIPeriodicTimerProperties::setSinkInfo(const OAIRoleSinkInfo &sink_info) {
    m_sink_info = sink_info;
    m_sink_info_isSet = true;
}

bool OAIPeriodicTimerProperties::is_sink_info_Set() const{
    return m_sink_info_isSet;
}

bool OAIPeriodicTimerProperties::is_sink_info_Valid() const{
    return m_sink_info_isValid;
}

OAIPeriodicTimerSourceInfo OAIPeriodicTimerProperties::getSourceInfo() const {
    return m_source_info;
}
void OAIPeriodicTimerProperties::setSourceInfo(const OAIPeriodicTimerSourceInfo &source_info) {
    m_source_info = source_info;
    m_source_info_isSet = true;
}

bool OAIPeriodicTimerProperties::is_source_info_Set() const{
    return m_source_info_isSet;
}

bool OAIPeriodicTimerProperties::is_source_info_Valid() const{
    return m_source_info_isValid;
}

bool OAIPeriodicTimerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_context_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeriodicTimerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sink_info_isValid && m_source_info_isValid && true;
}

} // namespace OpenAPI
