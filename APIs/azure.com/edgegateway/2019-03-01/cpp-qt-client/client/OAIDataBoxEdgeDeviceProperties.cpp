/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataBoxEdgeDeviceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataBoxEdgeDeviceProperties::OAIDataBoxEdgeDeviceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataBoxEdgeDeviceProperties::OAIDataBoxEdgeDeviceProperties() {
    this->initializeModel();
}

OAIDataBoxEdgeDeviceProperties::~OAIDataBoxEdgeDeviceProperties() {}

void OAIDataBoxEdgeDeviceProperties::initializeModel() {

    m_configured_role_types_isSet = false;
    m_configured_role_types_isValid = false;

    m_culture_isSet = false;
    m_culture_isValid = false;

    m_data_box_edge_device_status_isSet = false;
    m_data_box_edge_device_status_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_hcs_version_isSet = false;
    m_device_hcs_version_isValid = false;

    m_device_local_capacity_isSet = false;
    m_device_local_capacity_isValid = false;

    m_device_model_isSet = false;
    m_device_model_isValid = false;

    m_device_software_version_isSet = false;
    m_device_software_version_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_model_description_isSet = false;
    m_model_description_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIDataBoxEdgeDeviceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataBoxEdgeDeviceProperties::fromJsonObject(QJsonObject json) {

    m_configured_role_types_isValid = ::OpenAPI::fromJsonValue(m_configured_role_types, json[QString("configuredRoleTypes")]);
    m_configured_role_types_isSet = !json[QString("configuredRoleTypes")].isNull() && m_configured_role_types_isValid;

    m_culture_isValid = ::OpenAPI::fromJsonValue(m_culture, json[QString("culture")]);
    m_culture_isSet = !json[QString("culture")].isNull() && m_culture_isValid;

    m_data_box_edge_device_status_isValid = ::OpenAPI::fromJsonValue(m_data_box_edge_device_status, json[QString("dataBoxEdgeDeviceStatus")]);
    m_data_box_edge_device_status_isSet = !json[QString("dataBoxEdgeDeviceStatus")].isNull() && m_data_box_edge_device_status_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_hcs_version_isValid = ::OpenAPI::fromJsonValue(m_device_hcs_version, json[QString("deviceHcsVersion")]);
    m_device_hcs_version_isSet = !json[QString("deviceHcsVersion")].isNull() && m_device_hcs_version_isValid;

    m_device_local_capacity_isValid = ::OpenAPI::fromJsonValue(m_device_local_capacity, json[QString("deviceLocalCapacity")]);
    m_device_local_capacity_isSet = !json[QString("deviceLocalCapacity")].isNull() && m_device_local_capacity_isValid;

    m_device_model_isValid = ::OpenAPI::fromJsonValue(m_device_model, json[QString("deviceModel")]);
    m_device_model_isSet = !json[QString("deviceModel")].isNull() && m_device_model_isValid;

    m_device_software_version_isValid = ::OpenAPI::fromJsonValue(m_device_software_version, json[QString("deviceSoftwareVersion")]);
    m_device_software_version_isSet = !json[QString("deviceSoftwareVersion")].isNull() && m_device_software_version_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_model_description_isValid = ::OpenAPI::fromJsonValue(m_model_description, json[QString("modelDescription")]);
    m_model_description_isSet = !json[QString("modelDescription")].isNull() && m_model_description_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIDataBoxEdgeDeviceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataBoxEdgeDeviceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_configured_role_types.size() > 0) {
        obj.insert(QString("configuredRoleTypes"), ::OpenAPI::toJsonValue(m_configured_role_types));
    }
    if (m_culture_isSet) {
        obj.insert(QString("culture"), ::OpenAPI::toJsonValue(m_culture));
    }
    if (m_data_box_edge_device_status_isSet) {
        obj.insert(QString("dataBoxEdgeDeviceStatus"), ::OpenAPI::toJsonValue(m_data_box_edge_device_status));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device_hcs_version_isSet) {
        obj.insert(QString("deviceHcsVersion"), ::OpenAPI::toJsonValue(m_device_hcs_version));
    }
    if (m_device_local_capacity_isSet) {
        obj.insert(QString("deviceLocalCapacity"), ::OpenAPI::toJsonValue(m_device_local_capacity));
    }
    if (m_device_model_isSet) {
        obj.insert(QString("deviceModel"), ::OpenAPI::toJsonValue(m_device_model));
    }
    if (m_device_software_version_isSet) {
        obj.insert(QString("deviceSoftwareVersion"), ::OpenAPI::toJsonValue(m_device_software_version));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_model_description_isSet) {
        obj.insert(QString("modelDescription"), ::OpenAPI::toJsonValue(m_model_description));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QList<QString> OAIDataBoxEdgeDeviceProperties::getConfiguredRoleTypes() const {
    return m_configured_role_types;
}
void OAIDataBoxEdgeDeviceProperties::setConfiguredRoleTypes(const QList<QString> &configured_role_types) {
    m_configured_role_types = configured_role_types;
    m_configured_role_types_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_configured_role_types_Set() const{
    return m_configured_role_types_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_configured_role_types_Valid() const{
    return m_configured_role_types_isValid;
}

QString OAIDataBoxEdgeDeviceProperties::getCulture() const {
    return m_culture;
}
void OAIDataBoxEdgeDeviceProperties::setCulture(const QString &culture) {
    m_culture = culture;
    m_culture_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_culture_Set() const{
    return m_culture_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_culture_Valid() const{
    return m_culture_isValid;
}

QString OAIDataBoxEdgeDeviceProperties::getDataBoxEdgeDeviceStatus() const {
    return m_data_box_edge_device_status;
}
void OAIDataBoxEdgeDeviceProperties::setDataBoxEdgeDeviceStatus(const QString &data_box_edge_device_status) {
    m_data_box_edge_device_status = data_box_edge_device_status;
    m_data_box_edge_device_status_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_data_box_edge_device_status_Set() const{
    return m_data_box_edge_device_status_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_data_box_edge_device_status_Valid() const{
    return m_data_box_edge_device_status_isValid;
}

QString OAIDataBoxEdgeDeviceProperties::getDescription() const {
    return m_description;
}
void OAIDataBoxEdgeDeviceProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDataBoxEdgeDeviceProperties::getDeviceHcsVersion() const {
    return m_device_hcs_version;
}
void OAIDataBoxEdgeDeviceProperties::setDeviceHcsVersion(const QString &device_hcs_version) {
    m_device_hcs_version = device_hcs_version;
    m_device_hcs_version_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_device_hcs_version_Set() const{
    return m_device_hcs_version_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_device_hcs_version_Valid() const{
    return m_device_hcs_version_isValid;
}

qint64 OAIDataBoxEdgeDeviceProperties::getDeviceLocalCapacity() const {
    return m_device_local_capacity;
}
void OAIDataBoxEdgeDeviceProperties::setDeviceLocalCapacity(const qint64 &device_local_capacity) {
    m_device_local_capacity = device_local_capacity;
    m_device_local_capacity_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_device_local_capacity_Set() const{
    return m_device_local_capacity_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_device_local_capacity_Valid() const{
    return m_device_local_capacity_isValid;
}

QString OAIDataBoxEdgeDeviceProperties::getDeviceModel() const {
    return m_device_model;
}
void OAIDataBoxEdgeDeviceProperties::setDeviceModel(const QString &device_model) {
    m_device_model = device_model;
    m_device_model_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_device_model_Set() const{
    return m_device_model_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_device_model_Valid() const{
    return m_device_model_isValid;
}

QString OAIDataBoxEdgeDeviceProperties::getDeviceSoftwareVersion() const {
    return m_device_software_version;
}
void OAIDataBoxEdgeDeviceProperties::setDeviceSoftwareVersion(const QString &device_software_version) {
    m_device_software_version = device_software_version;
    m_device_software_version_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_device_software_version_Set() const{
    return m_device_software_version_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_device_software_version_Valid() const{
    return m_device_software_version_isValid;
}

QString OAIDataBoxEdgeDeviceProperties::getDeviceType() const {
    return m_device_type;
}
void OAIDataBoxEdgeDeviceProperties::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIDataBoxEdgeDeviceProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIDataBoxEdgeDeviceProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIDataBoxEdgeDeviceProperties::getModelDescription() const {
    return m_model_description;
}
void OAIDataBoxEdgeDeviceProperties::setModelDescription(const QString &model_description) {
    m_model_description = model_description;
    m_model_description_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_model_description_Set() const{
    return m_model_description_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_model_description_Valid() const{
    return m_model_description_isValid;
}

QString OAIDataBoxEdgeDeviceProperties::getSerialNumber() const {
    return m_serial_number;
}
void OAIDataBoxEdgeDeviceProperties::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIDataBoxEdgeDeviceProperties::getTimeZone() const {
    return m_time_zone;
}
void OAIDataBoxEdgeDeviceProperties::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIDataBoxEdgeDeviceProperties::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIDataBoxEdgeDeviceProperties::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIDataBoxEdgeDeviceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configured_role_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_culture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_box_edge_device_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_hcs_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_local_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataBoxEdgeDeviceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
