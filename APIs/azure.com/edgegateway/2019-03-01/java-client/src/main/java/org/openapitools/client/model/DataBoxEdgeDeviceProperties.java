/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the Data Box Edge/Gateway device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:10.716364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataBoxEdgeDeviceProperties {
  /**
   * Gets or Sets configuredRoleTypes
   */
  @JsonAdapter(ConfiguredRoleTypesEnum.Adapter.class)
  public enum ConfiguredRoleTypesEnum {
    IOT("IOT"),
    
    ASA("ASA"),
    
    FUNCTIONS("Functions"),
    
    COGNITIVE("Cognitive");

    private String value;

    ConfiguredRoleTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfiguredRoleTypesEnum fromValue(String value) {
      for (ConfiguredRoleTypesEnum b : ConfiguredRoleTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfiguredRoleTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfiguredRoleTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfiguredRoleTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfiguredRoleTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfiguredRoleTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIGURED_ROLE_TYPES = "configuredRoleTypes";
  @SerializedName(SERIALIZED_NAME_CONFIGURED_ROLE_TYPES)
  private List<ConfiguredRoleTypesEnum> configuredRoleTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CULTURE = "culture";
  @SerializedName(SERIALIZED_NAME_CULTURE)
  private String culture;

  /**
   * The status of the Data Box Edge/Gateway device.
   */
  @JsonAdapter(DataBoxEdgeDeviceStatusEnum.Adapter.class)
  public enum DataBoxEdgeDeviceStatusEnum {
    READY_TO_SETUP("ReadyToSetup"),
    
    ONLINE("Online"),
    
    OFFLINE("Offline"),
    
    NEEDS_ATTENTION("NeedsAttention"),
    
    DISCONNECTED("Disconnected"),
    
    PARTIALLY_DISCONNECTED("PartiallyDisconnected");

    private String value;

    DataBoxEdgeDeviceStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataBoxEdgeDeviceStatusEnum fromValue(String value) {
      for (DataBoxEdgeDeviceStatusEnum b : DataBoxEdgeDeviceStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataBoxEdgeDeviceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataBoxEdgeDeviceStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataBoxEdgeDeviceStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataBoxEdgeDeviceStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataBoxEdgeDeviceStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_BOX_EDGE_DEVICE_STATUS = "dataBoxEdgeDeviceStatus";
  @SerializedName(SERIALIZED_NAME_DATA_BOX_EDGE_DEVICE_STATUS)
  private DataBoxEdgeDeviceStatusEnum dataBoxEdgeDeviceStatus;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE_HCS_VERSION = "deviceHcsVersion";
  @SerializedName(SERIALIZED_NAME_DEVICE_HCS_VERSION)
  private String deviceHcsVersion;

  public static final String SERIALIZED_NAME_DEVICE_LOCAL_CAPACITY = "deviceLocalCapacity";
  @SerializedName(SERIALIZED_NAME_DEVICE_LOCAL_CAPACITY)
  private Long deviceLocalCapacity;

  public static final String SERIALIZED_NAME_DEVICE_MODEL = "deviceModel";
  @SerializedName(SERIALIZED_NAME_DEVICE_MODEL)
  private String deviceModel;

  public static final String SERIALIZED_NAME_DEVICE_SOFTWARE_VERSION = "deviceSoftwareVersion";
  @SerializedName(SERIALIZED_NAME_DEVICE_SOFTWARE_VERSION)
  private String deviceSoftwareVersion;

  /**
   * The type of the Data Box Edge/Gateway device.
   */
  @JsonAdapter(DeviceTypeEnum.Adapter.class)
  public enum DeviceTypeEnum {
    DATA_BOX_EDGE_DEVICE("DataBoxEdgeDevice");

    private String value;

    DeviceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceTypeEnum fromValue(String value) {
      for (DeviceTypeEnum b : DeviceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private DeviceTypeEnum deviceType;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_MODEL_DESCRIPTION = "modelDescription";
  @SerializedName(SERIALIZED_NAME_MODEL_DESCRIPTION)
  private String modelDescription;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public DataBoxEdgeDeviceProperties() {
  }

  public DataBoxEdgeDeviceProperties(
     List<ConfiguredRoleTypesEnum> configuredRoleTypes, 
     String culture, 
     String deviceHcsVersion, 
     Long deviceLocalCapacity, 
     String deviceModel, 
     String deviceSoftwareVersion, 
     DeviceTypeEnum deviceType, 
     String serialNumber, 
     String timeZone
  ) {
    this();
    this.configuredRoleTypes = configuredRoleTypes;
    this.culture = culture;
    this.deviceHcsVersion = deviceHcsVersion;
    this.deviceLocalCapacity = deviceLocalCapacity;
    this.deviceModel = deviceModel;
    this.deviceSoftwareVersion = deviceSoftwareVersion;
    this.deviceType = deviceType;
    this.serialNumber = serialNumber;
    this.timeZone = timeZone;
  }

  /**
   * Type of compute roles configured.
   * @return configuredRoleTypes
   */
  @javax.annotation.Nullable
  public List<ConfiguredRoleTypesEnum> getConfiguredRoleTypes() {
    return configuredRoleTypes;
  }



  /**
   * The Data Box Edge/Gateway device culture.
   * @return culture
   */
  @javax.annotation.Nullable
  public String getCulture() {
    return culture;
  }



  public DataBoxEdgeDeviceProperties dataBoxEdgeDeviceStatus(DataBoxEdgeDeviceStatusEnum dataBoxEdgeDeviceStatus) {
    this.dataBoxEdgeDeviceStatus = dataBoxEdgeDeviceStatus;
    return this;
  }

  /**
   * The status of the Data Box Edge/Gateway device.
   * @return dataBoxEdgeDeviceStatus
   */
  @javax.annotation.Nullable
  public DataBoxEdgeDeviceStatusEnum getDataBoxEdgeDeviceStatus() {
    return dataBoxEdgeDeviceStatus;
  }

  public void setDataBoxEdgeDeviceStatus(DataBoxEdgeDeviceStatusEnum dataBoxEdgeDeviceStatus) {
    this.dataBoxEdgeDeviceStatus = dataBoxEdgeDeviceStatus;
  }


  public DataBoxEdgeDeviceProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The Description of the Data Box Edge/Gateway device.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * The device software version number of the device (eg: 1.2.18105.6).
   * @return deviceHcsVersion
   */
  @javax.annotation.Nullable
  public String getDeviceHcsVersion() {
    return deviceHcsVersion;
  }



  /**
   * The Data Box Edge/Gateway device local capacity in MB.
   * @return deviceLocalCapacity
   */
  @javax.annotation.Nullable
  public Long getDeviceLocalCapacity() {
    return deviceLocalCapacity;
  }



  /**
   * The Data Box Edge/Gateway device model.
   * @return deviceModel
   */
  @javax.annotation.Nullable
  public String getDeviceModel() {
    return deviceModel;
  }



  /**
   * The Data Box Edge/Gateway device software version.
   * @return deviceSoftwareVersion
   */
  @javax.annotation.Nullable
  public String getDeviceSoftwareVersion() {
    return deviceSoftwareVersion;
  }



  /**
   * The type of the Data Box Edge/Gateway device.
   * @return deviceType
   */
  @javax.annotation.Nullable
  public DeviceTypeEnum getDeviceType() {
    return deviceType;
  }



  public DataBoxEdgeDeviceProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The Data Box Edge/Gateway device name.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public DataBoxEdgeDeviceProperties modelDescription(String modelDescription) {
    this.modelDescription = modelDescription;
    return this;
  }

  /**
   * The description of the Data Box Edge/Gateway device model.
   * @return modelDescription
   */
  @javax.annotation.Nullable
  public String getModelDescription() {
    return modelDescription;
  }

  public void setModelDescription(String modelDescription) {
    this.modelDescription = modelDescription;
  }


  /**
   * The Serial Number of Data Box Edge/Gateway device.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }



  /**
   * The Data Box Edge/Gateway device timezone.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataBoxEdgeDeviceProperties dataBoxEdgeDeviceProperties = (DataBoxEdgeDeviceProperties) o;
    return Objects.equals(this.configuredRoleTypes, dataBoxEdgeDeviceProperties.configuredRoleTypes) &&
        Objects.equals(this.culture, dataBoxEdgeDeviceProperties.culture) &&
        Objects.equals(this.dataBoxEdgeDeviceStatus, dataBoxEdgeDeviceProperties.dataBoxEdgeDeviceStatus) &&
        Objects.equals(this.description, dataBoxEdgeDeviceProperties.description) &&
        Objects.equals(this.deviceHcsVersion, dataBoxEdgeDeviceProperties.deviceHcsVersion) &&
        Objects.equals(this.deviceLocalCapacity, dataBoxEdgeDeviceProperties.deviceLocalCapacity) &&
        Objects.equals(this.deviceModel, dataBoxEdgeDeviceProperties.deviceModel) &&
        Objects.equals(this.deviceSoftwareVersion, dataBoxEdgeDeviceProperties.deviceSoftwareVersion) &&
        Objects.equals(this.deviceType, dataBoxEdgeDeviceProperties.deviceType) &&
        Objects.equals(this.friendlyName, dataBoxEdgeDeviceProperties.friendlyName) &&
        Objects.equals(this.modelDescription, dataBoxEdgeDeviceProperties.modelDescription) &&
        Objects.equals(this.serialNumber, dataBoxEdgeDeviceProperties.serialNumber) &&
        Objects.equals(this.timeZone, dataBoxEdgeDeviceProperties.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configuredRoleTypes, culture, dataBoxEdgeDeviceStatus, description, deviceHcsVersion, deviceLocalCapacity, deviceModel, deviceSoftwareVersion, deviceType, friendlyName, modelDescription, serialNumber, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataBoxEdgeDeviceProperties {\n");
    sb.append("    configuredRoleTypes: ").append(toIndentedString(configuredRoleTypes)).append("\n");
    sb.append("    culture: ").append(toIndentedString(culture)).append("\n");
    sb.append("    dataBoxEdgeDeviceStatus: ").append(toIndentedString(dataBoxEdgeDeviceStatus)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deviceHcsVersion: ").append(toIndentedString(deviceHcsVersion)).append("\n");
    sb.append("    deviceLocalCapacity: ").append(toIndentedString(deviceLocalCapacity)).append("\n");
    sb.append("    deviceModel: ").append(toIndentedString(deviceModel)).append("\n");
    sb.append("    deviceSoftwareVersion: ").append(toIndentedString(deviceSoftwareVersion)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    modelDescription: ").append(toIndentedString(modelDescription)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configuredRoleTypes");
    openapiFields.add("culture");
    openapiFields.add("dataBoxEdgeDeviceStatus");
    openapiFields.add("description");
    openapiFields.add("deviceHcsVersion");
    openapiFields.add("deviceLocalCapacity");
    openapiFields.add("deviceModel");
    openapiFields.add("deviceSoftwareVersion");
    openapiFields.add("deviceType");
    openapiFields.add("friendlyName");
    openapiFields.add("modelDescription");
    openapiFields.add("serialNumber");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataBoxEdgeDeviceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataBoxEdgeDeviceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataBoxEdgeDeviceProperties is not found in the empty JSON string", DataBoxEdgeDeviceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataBoxEdgeDeviceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataBoxEdgeDeviceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("configuredRoleTypes") != null && !jsonObj.get("configuredRoleTypes").isJsonNull() && !jsonObj.get("configuredRoleTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuredRoleTypes` to be an array in the JSON string but got `%s`", jsonObj.get("configuredRoleTypes").toString()));
      }
      if ((jsonObj.get("culture") != null && !jsonObj.get("culture").isJsonNull()) && !jsonObj.get("culture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `culture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("culture").toString()));
      }
      if ((jsonObj.get("dataBoxEdgeDeviceStatus") != null && !jsonObj.get("dataBoxEdgeDeviceStatus").isJsonNull()) && !jsonObj.get("dataBoxEdgeDeviceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataBoxEdgeDeviceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataBoxEdgeDeviceStatus").toString()));
      }
      // validate the optional field `dataBoxEdgeDeviceStatus`
      if (jsonObj.get("dataBoxEdgeDeviceStatus") != null && !jsonObj.get("dataBoxEdgeDeviceStatus").isJsonNull()) {
        DataBoxEdgeDeviceStatusEnum.validateJsonElement(jsonObj.get("dataBoxEdgeDeviceStatus"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("deviceHcsVersion") != null && !jsonObj.get("deviceHcsVersion").isJsonNull()) && !jsonObj.get("deviceHcsVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceHcsVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceHcsVersion").toString()));
      }
      if ((jsonObj.get("deviceModel") != null && !jsonObj.get("deviceModel").isJsonNull()) && !jsonObj.get("deviceModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceModel").toString()));
      }
      if ((jsonObj.get("deviceSoftwareVersion") != null && !jsonObj.get("deviceSoftwareVersion").isJsonNull()) && !jsonObj.get("deviceSoftwareVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceSoftwareVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceSoftwareVersion").toString()));
      }
      if ((jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) && !jsonObj.get("deviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceType").toString()));
      }
      // validate the optional field `deviceType`
      if (jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) {
        DeviceTypeEnum.validateJsonElement(jsonObj.get("deviceType"));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("modelDescription") != null && !jsonObj.get("modelDescription").isJsonNull()) && !jsonObj.get("modelDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelDescription").toString()));
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataBoxEdgeDeviceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataBoxEdgeDeviceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataBoxEdgeDeviceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataBoxEdgeDeviceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DataBoxEdgeDeviceProperties>() {
           @Override
           public void write(JsonWriter out, DataBoxEdgeDeviceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataBoxEdgeDeviceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataBoxEdgeDeviceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataBoxEdgeDeviceProperties
   * @throws IOException if the JSON string is invalid with respect to DataBoxEdgeDeviceProperties
   */
  public static DataBoxEdgeDeviceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataBoxEdgeDeviceProperties.class);
  }

  /**
   * Convert an instance of DataBoxEdgeDeviceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

