/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateDownloadProgress;
import org.openapitools.client.model.UpdateInstallProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties for the job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:10.716364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobProperties {
  /**
   * Current stage of the update operation.
   */
  @JsonAdapter(CurrentStageEnum.Adapter.class)
  public enum CurrentStageEnum {
    UNKNOWN("Unknown"),
    
    INITIAL("Initial"),
    
    SCAN_STARTED("ScanStarted"),
    
    SCAN_COMPLETE("ScanComplete"),
    
    SCAN_FAILED("ScanFailed"),
    
    DOWNLOAD_STARTED("DownloadStarted"),
    
    DOWNLOAD_COMPLETE("DownloadComplete"),
    
    DOWNLOAD_FAILED("DownloadFailed"),
    
    INSTALL_STARTED("InstallStarted"),
    
    INSTALL_COMPLETE("InstallComplete"),
    
    INSTALL_FAILED("InstallFailed"),
    
    REBOOT_INITIATED("RebootInitiated"),
    
    SUCCESS("Success"),
    
    FAILURE("Failure"),
    
    RESCAN_STARTED("RescanStarted"),
    
    RESCAN_COMPLETE("RescanComplete"),
    
    RESCAN_FAILED("RescanFailed");

    private String value;

    CurrentStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentStageEnum fromValue(String value) {
      for (CurrentStageEnum b : CurrentStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrentStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrentStageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrentStageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENT_STAGE = "currentStage";
  @SerializedName(SERIALIZED_NAME_CURRENT_STAGE)
  private CurrentStageEnum currentStage;

  public static final String SERIALIZED_NAME_DOWNLOAD_PROGRESS = "downloadProgress";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_PROGRESS)
  private UpdateDownloadProgress downloadProgress;

  public static final String SERIALIZED_NAME_ERROR_MANIFEST_FILE = "errorManifestFile";
  @SerializedName(SERIALIZED_NAME_ERROR_MANIFEST_FILE)
  private String errorManifestFile;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private String folder;

  public static final String SERIALIZED_NAME_INSTALL_PROGRESS = "installProgress";
  @SerializedName(SERIALIZED_NAME_INSTALL_PROGRESS)
  private UpdateInstallProgress installProgress;

  /**
   * The type of the job.
   */
  @JsonAdapter(JobTypeEnum.Adapter.class)
  public enum JobTypeEnum {
    INVALID("Invalid"),
    
    SCAN_FOR_UPDATES("ScanForUpdates"),
    
    DOWNLOAD_UPDATES("DownloadUpdates"),
    
    INSTALL_UPDATES("InstallUpdates"),
    
    REFRESH_SHARE("RefreshShare");

    private String value;

    JobTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobTypeEnum fromValue(String value) {
      for (JobTypeEnum b : JobTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobTypeEnum jobType;

  public static final String SERIALIZED_NAME_SHARE_ID = "shareId";
  @SerializedName(SERIALIZED_NAME_SHARE_ID)
  private String shareId;

  public static final String SERIALIZED_NAME_TOTAL_REFRESH_ERRORS = "totalRefreshErrors";
  @SerializedName(SERIALIZED_NAME_TOTAL_REFRESH_ERRORS)
  private Integer totalRefreshErrors;

  public JobProperties() {
  }

  public JobProperties(
     CurrentStageEnum currentStage, 
     String errorManifestFile, 
     JobTypeEnum jobType, 
     String shareId, 
     Integer totalRefreshErrors
  ) {
    this();
    this.currentStage = currentStage;
    this.errorManifestFile = errorManifestFile;
    this.jobType = jobType;
    this.shareId = shareId;
    this.totalRefreshErrors = totalRefreshErrors;
  }

  /**
   * Current stage of the update operation.
   * @return currentStage
   */
  @javax.annotation.Nullable
  public CurrentStageEnum getCurrentStage() {
    return currentStage;
  }



  public JobProperties downloadProgress(UpdateDownloadProgress downloadProgress) {
    this.downloadProgress = downloadProgress;
    return this;
  }

  /**
   * Get downloadProgress
   * @return downloadProgress
   */
  @javax.annotation.Nullable
  public UpdateDownloadProgress getDownloadProgress() {
    return downloadProgress;
  }

  public void setDownloadProgress(UpdateDownloadProgress downloadProgress) {
    this.downloadProgress = downloadProgress;
  }


  /**
   * Local share/remote container relative path to the error manifest file of the refresh.
   * @return errorManifestFile
   */
  @javax.annotation.Nullable
  public String getErrorManifestFile() {
    return errorManifestFile;
  }



  public JobProperties folder(String folder) {
    this.folder = folder;
    return this;
  }

  /**
   * If only subfolders need to be refreshed, then the subfolder path inside the share. (The path is empty if there are no subfolders.)
   * @return folder
   */
  @javax.annotation.Nullable
  public String getFolder() {
    return folder;
  }

  public void setFolder(String folder) {
    this.folder = folder;
  }


  public JobProperties installProgress(UpdateInstallProgress installProgress) {
    this.installProgress = installProgress;
    return this;
  }

  /**
   * Get installProgress
   * @return installProgress
   */
  @javax.annotation.Nullable
  public UpdateInstallProgress getInstallProgress() {
    return installProgress;
  }

  public void setInstallProgress(UpdateInstallProgress installProgress) {
    this.installProgress = installProgress;
  }


  /**
   * The type of the job.
   * @return jobType
   */
  @javax.annotation.Nullable
  public JobTypeEnum getJobType() {
    return jobType;
  }



  /**
   * ARM ID of the share that was refreshed.
   * @return shareId
   */
  @javax.annotation.Nullable
  public String getShareId() {
    return shareId;
  }



  /**
   * Total number of errors encountered during the refresh process.
   * @return totalRefreshErrors
   */
  @javax.annotation.Nullable
  public Integer getTotalRefreshErrors() {
    return totalRefreshErrors;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobProperties jobProperties = (JobProperties) o;
    return Objects.equals(this.currentStage, jobProperties.currentStage) &&
        Objects.equals(this.downloadProgress, jobProperties.downloadProgress) &&
        Objects.equals(this.errorManifestFile, jobProperties.errorManifestFile) &&
        Objects.equals(this.folder, jobProperties.folder) &&
        Objects.equals(this.installProgress, jobProperties.installProgress) &&
        Objects.equals(this.jobType, jobProperties.jobType) &&
        Objects.equals(this.shareId, jobProperties.shareId) &&
        Objects.equals(this.totalRefreshErrors, jobProperties.totalRefreshErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentStage, downloadProgress, errorManifestFile, folder, installProgress, jobType, shareId, totalRefreshErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobProperties {\n");
    sb.append("    currentStage: ").append(toIndentedString(currentStage)).append("\n");
    sb.append("    downloadProgress: ").append(toIndentedString(downloadProgress)).append("\n");
    sb.append("    errorManifestFile: ").append(toIndentedString(errorManifestFile)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    installProgress: ").append(toIndentedString(installProgress)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    shareId: ").append(toIndentedString(shareId)).append("\n");
    sb.append("    totalRefreshErrors: ").append(toIndentedString(totalRefreshErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentStage");
    openapiFields.add("downloadProgress");
    openapiFields.add("errorManifestFile");
    openapiFields.add("folder");
    openapiFields.add("installProgress");
    openapiFields.add("jobType");
    openapiFields.add("shareId");
    openapiFields.add("totalRefreshErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobProperties is not found in the empty JSON string", JobProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentStage") != null && !jsonObj.get("currentStage").isJsonNull()) && !jsonObj.get("currentStage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentStage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentStage").toString()));
      }
      // validate the optional field `currentStage`
      if (jsonObj.get("currentStage") != null && !jsonObj.get("currentStage").isJsonNull()) {
        CurrentStageEnum.validateJsonElement(jsonObj.get("currentStage"));
      }
      // validate the optional field `downloadProgress`
      if (jsonObj.get("downloadProgress") != null && !jsonObj.get("downloadProgress").isJsonNull()) {
        UpdateDownloadProgress.validateJsonElement(jsonObj.get("downloadProgress"));
      }
      if ((jsonObj.get("errorManifestFile") != null && !jsonObj.get("errorManifestFile").isJsonNull()) && !jsonObj.get("errorManifestFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorManifestFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorManifestFile").toString()));
      }
      if ((jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) && !jsonObj.get("folder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder").toString()));
      }
      // validate the optional field `installProgress`
      if (jsonObj.get("installProgress") != null && !jsonObj.get("installProgress").isJsonNull()) {
        UpdateInstallProgress.validateJsonElement(jsonObj.get("installProgress"));
      }
      if ((jsonObj.get("jobType") != null && !jsonObj.get("jobType").isJsonNull()) && !jsonObj.get("jobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobType").toString()));
      }
      // validate the optional field `jobType`
      if (jsonObj.get("jobType") != null && !jsonObj.get("jobType").isJsonNull()) {
        JobTypeEnum.validateJsonElement(jsonObj.get("jobType"));
      }
      if ((jsonObj.get("shareId") != null && !jsonObj.get("shareId").isJsonNull()) && !jsonObj.get("shareId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JobProperties>() {
           @Override
           public void write(JsonWriter out, JobProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobProperties
   * @throws IOException if the JSON string is invalid with respect to JobProperties
   */
  public static JobProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobProperties.class);
  }

  /**
   * Convert an instance of JobProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

