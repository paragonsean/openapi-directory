# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asymmetric_encrypted_secret import AsymmetricEncryptedSecret
from openapi_server.models.share_access_right import ShareAccessRight
from openapi_server import util


class UserProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encrypted_password: AsymmetricEncryptedSecret=None, share_access_rights: List[ShareAccessRight]=None):
        """UserProperties - a model defined in OpenAPI

        :param encrypted_password: The encrypted_password of this UserProperties.
        :param share_access_rights: The share_access_rights of this UserProperties.
        """
        self.openapi_types = {
            'encrypted_password': AsymmetricEncryptedSecret,
            'share_access_rights': List[ShareAccessRight]
        }

        self.attribute_map = {
            'encrypted_password': 'encryptedPassword',
            'share_access_rights': 'shareAccessRights'
        }

        self._encrypted_password = encrypted_password
        self._share_access_rights = share_access_rights

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserProperties of this UserProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encrypted_password(self):
        """Gets the encrypted_password of this UserProperties.


        :return: The encrypted_password of this UserProperties.
        :rtype: AsymmetricEncryptedSecret
        """
        return self._encrypted_password

    @encrypted_password.setter
    def encrypted_password(self, encrypted_password):
        """Sets the encrypted_password of this UserProperties.


        :param encrypted_password: The encrypted_password of this UserProperties.
        :type encrypted_password: AsymmetricEncryptedSecret
        """

        self._encrypted_password = encrypted_password

    @property
    def share_access_rights(self):
        """Gets the share_access_rights of this UserProperties.

        List of shares that the user has rights on. This field should not be specified during user creation.

        :return: The share_access_rights of this UserProperties.
        :rtype: List[ShareAccessRight]
        """
        return self._share_access_rights

    @share_access_rights.setter
    def share_access_rights(self, share_access_rights):
        """Sets the share_access_rights of this UserProperties.

        List of shares that the user has rights on. This field should not be specified during user creation.

        :param share_access_rights: The share_access_rights of this UserProperties.
        :type share_access_rights: List[ShareAccessRight]
        """

        self._share_access_rights = share_access_rights
