# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkAdapterPosition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_group: str=None, port: int=None):
        """NetworkAdapterPosition - a model defined in OpenAPI

        :param network_group: The network_group of this NetworkAdapterPosition.
        :param port: The port of this NetworkAdapterPosition.
        """
        self.openapi_types = {
            'network_group': str,
            'port': int
        }

        self.attribute_map = {
            'network_group': 'networkGroup',
            'port': 'port'
        }

        self._network_group = network_group
        self._port = port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkAdapterPosition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkAdapterPosition of this NetworkAdapterPosition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_group(self):
        """Gets the network_group of this NetworkAdapterPosition.

        The network group.

        :return: The network_group of this NetworkAdapterPosition.
        :rtype: str
        """
        return self._network_group

    @network_group.setter
    def network_group(self, network_group):
        """Sets the network_group of this NetworkAdapterPosition.

        The network group.

        :param network_group: The network_group of this NetworkAdapterPosition.
        :type network_group: str
        """
        allowed_values = ["None", "NonRDMA", "RDMA"]  # noqa: E501
        if network_group not in allowed_values:
            raise ValueError(
                "Invalid value for `network_group` ({0}), must be one of {1}"
                .format(network_group, allowed_values)
            )

        self._network_group = network_group

    @property
    def port(self):
        """Gets the port of this NetworkAdapterPosition.

        The port.

        :return: The port of this NetworkAdapterPosition.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NetworkAdapterPosition.

        The port.

        :param port: The port of this NetworkAdapterPosition.
        :type port: int
        """

        self._port = port
