# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataBoxEdgeDeviceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_role_types: List[str]=None, culture: str=None, data_box_edge_device_status: str=None, description: str=None, device_hcs_version: str=None, device_local_capacity: int=None, device_model: str=None, device_software_version: str=None, device_type: str=None, friendly_name: str=None, model_description: str=None, serial_number: str=None, time_zone: str=None):
        """DataBoxEdgeDeviceProperties - a model defined in OpenAPI

        :param configured_role_types: The configured_role_types of this DataBoxEdgeDeviceProperties.
        :param culture: The culture of this DataBoxEdgeDeviceProperties.
        :param data_box_edge_device_status: The data_box_edge_device_status of this DataBoxEdgeDeviceProperties.
        :param description: The description of this DataBoxEdgeDeviceProperties.
        :param device_hcs_version: The device_hcs_version of this DataBoxEdgeDeviceProperties.
        :param device_local_capacity: The device_local_capacity of this DataBoxEdgeDeviceProperties.
        :param device_model: The device_model of this DataBoxEdgeDeviceProperties.
        :param device_software_version: The device_software_version of this DataBoxEdgeDeviceProperties.
        :param device_type: The device_type of this DataBoxEdgeDeviceProperties.
        :param friendly_name: The friendly_name of this DataBoxEdgeDeviceProperties.
        :param model_description: The model_description of this DataBoxEdgeDeviceProperties.
        :param serial_number: The serial_number of this DataBoxEdgeDeviceProperties.
        :param time_zone: The time_zone of this DataBoxEdgeDeviceProperties.
        """
        self.openapi_types = {
            'configured_role_types': List[str],
            'culture': str,
            'data_box_edge_device_status': str,
            'description': str,
            'device_hcs_version': str,
            'device_local_capacity': int,
            'device_model': str,
            'device_software_version': str,
            'device_type': str,
            'friendly_name': str,
            'model_description': str,
            'serial_number': str,
            'time_zone': str
        }

        self.attribute_map = {
            'configured_role_types': 'configuredRoleTypes',
            'culture': 'culture',
            'data_box_edge_device_status': 'dataBoxEdgeDeviceStatus',
            'description': 'description',
            'device_hcs_version': 'deviceHcsVersion',
            'device_local_capacity': 'deviceLocalCapacity',
            'device_model': 'deviceModel',
            'device_software_version': 'deviceSoftwareVersion',
            'device_type': 'deviceType',
            'friendly_name': 'friendlyName',
            'model_description': 'modelDescription',
            'serial_number': 'serialNumber',
            'time_zone': 'timeZone'
        }

        self._configured_role_types = configured_role_types
        self._culture = culture
        self._data_box_edge_device_status = data_box_edge_device_status
        self._description = description
        self._device_hcs_version = device_hcs_version
        self._device_local_capacity = device_local_capacity
        self._device_model = device_model
        self._device_software_version = device_software_version
        self._device_type = device_type
        self._friendly_name = friendly_name
        self._model_description = model_description
        self._serial_number = serial_number
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataBoxEdgeDeviceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataBoxEdgeDeviceProperties of this DataBoxEdgeDeviceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_role_types(self):
        """Gets the configured_role_types of this DataBoxEdgeDeviceProperties.

        Type of compute roles configured.

        :return: The configured_role_types of this DataBoxEdgeDeviceProperties.
        :rtype: List[str]
        """
        return self._configured_role_types

    @configured_role_types.setter
    def configured_role_types(self, configured_role_types):
        """Sets the configured_role_types of this DataBoxEdgeDeviceProperties.

        Type of compute roles configured.

        :param configured_role_types: The configured_role_types of this DataBoxEdgeDeviceProperties.
        :type configured_role_types: List[str]
        """
        allowed_values = ["IOT", "ASA", "Functions", "Cognitive"]  # noqa: E501
        if not set(configured_role_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `configured_role_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(configured_role_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._configured_role_types = configured_role_types

    @property
    def culture(self):
        """Gets the culture of this DataBoxEdgeDeviceProperties.

        The Data Box Edge/Gateway device culture.

        :return: The culture of this DataBoxEdgeDeviceProperties.
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this DataBoxEdgeDeviceProperties.

        The Data Box Edge/Gateway device culture.

        :param culture: The culture of this DataBoxEdgeDeviceProperties.
        :type culture: str
        """

        self._culture = culture

    @property
    def data_box_edge_device_status(self):
        """Gets the data_box_edge_device_status of this DataBoxEdgeDeviceProperties.

        The status of the Data Box Edge/Gateway device.

        :return: The data_box_edge_device_status of this DataBoxEdgeDeviceProperties.
        :rtype: str
        """
        return self._data_box_edge_device_status

    @data_box_edge_device_status.setter
    def data_box_edge_device_status(self, data_box_edge_device_status):
        """Sets the data_box_edge_device_status of this DataBoxEdgeDeviceProperties.

        The status of the Data Box Edge/Gateway device.

        :param data_box_edge_device_status: The data_box_edge_device_status of this DataBoxEdgeDeviceProperties.
        :type data_box_edge_device_status: str
        """
        allowed_values = ["ReadyToSetup", "Online", "Offline", "NeedsAttention", "Disconnected", "PartiallyDisconnected"]  # noqa: E501
        if data_box_edge_device_status not in allowed_values:
            raise ValueError(
                "Invalid value for `data_box_edge_device_status` ({0}), must be one of {1}"
                .format(data_box_edge_device_status, allowed_values)
            )

        self._data_box_edge_device_status = data_box_edge_device_status

    @property
    def description(self):
        """Gets the description of this DataBoxEdgeDeviceProperties.

        The Description of the Data Box Edge/Gateway device.

        :return: The description of this DataBoxEdgeDeviceProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataBoxEdgeDeviceProperties.

        The Description of the Data Box Edge/Gateway device.

        :param description: The description of this DataBoxEdgeDeviceProperties.
        :type description: str
        """

        self._description = description

    @property
    def device_hcs_version(self):
        """Gets the device_hcs_version of this DataBoxEdgeDeviceProperties.

        The device software version number of the device (eg: 1.2.18105.6).

        :return: The device_hcs_version of this DataBoxEdgeDeviceProperties.
        :rtype: str
        """
        return self._device_hcs_version

    @device_hcs_version.setter
    def device_hcs_version(self, device_hcs_version):
        """Sets the device_hcs_version of this DataBoxEdgeDeviceProperties.

        The device software version number of the device (eg: 1.2.18105.6).

        :param device_hcs_version: The device_hcs_version of this DataBoxEdgeDeviceProperties.
        :type device_hcs_version: str
        """

        self._device_hcs_version = device_hcs_version

    @property
    def device_local_capacity(self):
        """Gets the device_local_capacity of this DataBoxEdgeDeviceProperties.

        The Data Box Edge/Gateway device local capacity in MB.

        :return: The device_local_capacity of this DataBoxEdgeDeviceProperties.
        :rtype: int
        """
        return self._device_local_capacity

    @device_local_capacity.setter
    def device_local_capacity(self, device_local_capacity):
        """Sets the device_local_capacity of this DataBoxEdgeDeviceProperties.

        The Data Box Edge/Gateway device local capacity in MB.

        :param device_local_capacity: The device_local_capacity of this DataBoxEdgeDeviceProperties.
        :type device_local_capacity: int
        """

        self._device_local_capacity = device_local_capacity

    @property
    def device_model(self):
        """Gets the device_model of this DataBoxEdgeDeviceProperties.

        The Data Box Edge/Gateway device model.

        :return: The device_model of this DataBoxEdgeDeviceProperties.
        :rtype: str
        """
        return self._device_model

    @device_model.setter
    def device_model(self, device_model):
        """Sets the device_model of this DataBoxEdgeDeviceProperties.

        The Data Box Edge/Gateway device model.

        :param device_model: The device_model of this DataBoxEdgeDeviceProperties.
        :type device_model: str
        """

        self._device_model = device_model

    @property
    def device_software_version(self):
        """Gets the device_software_version of this DataBoxEdgeDeviceProperties.

        The Data Box Edge/Gateway device software version.

        :return: The device_software_version of this DataBoxEdgeDeviceProperties.
        :rtype: str
        """
        return self._device_software_version

    @device_software_version.setter
    def device_software_version(self, device_software_version):
        """Sets the device_software_version of this DataBoxEdgeDeviceProperties.

        The Data Box Edge/Gateway device software version.

        :param device_software_version: The device_software_version of this DataBoxEdgeDeviceProperties.
        :type device_software_version: str
        """

        self._device_software_version = device_software_version

    @property
    def device_type(self):
        """Gets the device_type of this DataBoxEdgeDeviceProperties.

        The type of the Data Box Edge/Gateway device.

        :return: The device_type of this DataBoxEdgeDeviceProperties.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DataBoxEdgeDeviceProperties.

        The type of the Data Box Edge/Gateway device.

        :param device_type: The device_type of this DataBoxEdgeDeviceProperties.
        :type device_type: str
        """
        allowed_values = ["DataBoxEdgeDevice"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DataBoxEdgeDeviceProperties.

        The Data Box Edge/Gateway device name.

        :return: The friendly_name of this DataBoxEdgeDeviceProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DataBoxEdgeDeviceProperties.

        The Data Box Edge/Gateway device name.

        :param friendly_name: The friendly_name of this DataBoxEdgeDeviceProperties.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def model_description(self):
        """Gets the model_description of this DataBoxEdgeDeviceProperties.

        The description of the Data Box Edge/Gateway device model.

        :return: The model_description of this DataBoxEdgeDeviceProperties.
        :rtype: str
        """
        return self._model_description

    @model_description.setter
    def model_description(self, model_description):
        """Sets the model_description of this DataBoxEdgeDeviceProperties.

        The description of the Data Box Edge/Gateway device model.

        :param model_description: The model_description of this DataBoxEdgeDeviceProperties.
        :type model_description: str
        """

        self._model_description = model_description

    @property
    def serial_number(self):
        """Gets the serial_number of this DataBoxEdgeDeviceProperties.

        The Serial Number of Data Box Edge/Gateway device.

        :return: The serial_number of this DataBoxEdgeDeviceProperties.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DataBoxEdgeDeviceProperties.

        The Serial Number of Data Box Edge/Gateway device.

        :param serial_number: The serial_number of this DataBoxEdgeDeviceProperties.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def time_zone(self):
        """Gets the time_zone of this DataBoxEdgeDeviceProperties.

        The Data Box Edge/Gateway device timezone.

        :return: The time_zone of this DataBoxEdgeDeviceProperties.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this DataBoxEdgeDeviceProperties.

        The Data Box Edge/Gateway device timezone.

        :param time_zone: The time_zone of this DataBoxEdgeDeviceProperties.
        :type time_zone: str
        """

        self._time_zone = time_zone
