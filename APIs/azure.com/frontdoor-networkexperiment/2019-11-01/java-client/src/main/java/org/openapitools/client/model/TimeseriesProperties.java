/*
 * NetworkExperiments
 * These are the Network Experiment APIs. 
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TimeseriesDataPoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the properties of a timeseries
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:41.448584-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeseriesProperties {
  /**
   * The aggregation interval of the Timeseries
   */
  @JsonAdapter(AggregationIntervalEnum.Adapter.class)
  public enum AggregationIntervalEnum {
    HOURLY("Hourly"),
    
    DAILY("Daily");

    private String value;

    AggregationIntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationIntervalEnum fromValue(String value) {
      for (AggregationIntervalEnum b : AggregationIntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationIntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationIntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationIntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationIntervalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregationIntervalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION_INTERVAL = "aggregationInterval";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_INTERVAL)
  private AggregationIntervalEnum aggregationInterval;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_END_DATE_TIME_U_T_C = "endDateTimeUTC";
  @SerializedName(SERIALIZED_NAME_END_DATE_TIME_U_T_C)
  private String endDateTimeUTC;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_START_DATE_TIME_U_T_C = "startDateTimeUTC";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME_U_T_C)
  private String startDateTimeUTC;

  public static final String SERIALIZED_NAME_TIMESERIES_DATA = "timeseriesData";
  @SerializedName(SERIALIZED_NAME_TIMESERIES_DATA)
  private List<TimeseriesDataPoint> timeseriesData = new ArrayList<>();

  /**
   * The type of Timeseries
   */
  @JsonAdapter(TimeseriesTypeEnum.Adapter.class)
  public enum TimeseriesTypeEnum {
    MEASUREMENT_COUNTS("MeasurementCounts"),
    
    LATENCY_P50("LatencyP50"),
    
    LATENCY_P75("LatencyP75"),
    
    LATENCY_P95("LatencyP95");

    private String value;

    TimeseriesTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeseriesTypeEnum fromValue(String value) {
      for (TimeseriesTypeEnum b : TimeseriesTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeseriesTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeseriesTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeseriesTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeseriesTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeseriesTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIMESERIES_TYPE = "timeseriesType";
  @SerializedName(SERIALIZED_NAME_TIMESERIES_TYPE)
  private TimeseriesTypeEnum timeseriesType;

  public TimeseriesProperties() {
  }

  public TimeseriesProperties aggregationInterval(AggregationIntervalEnum aggregationInterval) {
    this.aggregationInterval = aggregationInterval;
    return this;
  }

  /**
   * The aggregation interval of the Timeseries
   * @return aggregationInterval
   */
  @javax.annotation.Nullable
  public AggregationIntervalEnum getAggregationInterval() {
    return aggregationInterval;
  }

  public void setAggregationInterval(AggregationIntervalEnum aggregationInterval) {
    this.aggregationInterval = aggregationInterval;
  }


  public TimeseriesProperties country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public TimeseriesProperties endDateTimeUTC(String endDateTimeUTC) {
    this.endDateTimeUTC = endDateTimeUTC;
    return this;
  }

  /**
   * The end DateTime of the Timeseries in UTC
   * @return endDateTimeUTC
   */
  @javax.annotation.Nullable
  public String getEndDateTimeUTC() {
    return endDateTimeUTC;
  }

  public void setEndDateTimeUTC(String endDateTimeUTC) {
    this.endDateTimeUTC = endDateTimeUTC;
  }


  public TimeseriesProperties endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * The endpoint associated with the Timeseries data point
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public TimeseriesProperties startDateTimeUTC(String startDateTimeUTC) {
    this.startDateTimeUTC = startDateTimeUTC;
    return this;
  }

  /**
   * The start DateTime of the Timeseries in UTC
   * @return startDateTimeUTC
   */
  @javax.annotation.Nullable
  public String getStartDateTimeUTC() {
    return startDateTimeUTC;
  }

  public void setStartDateTimeUTC(String startDateTimeUTC) {
    this.startDateTimeUTC = startDateTimeUTC;
  }


  public TimeseriesProperties timeseriesData(List<TimeseriesDataPoint> timeseriesData) {
    this.timeseriesData = timeseriesData;
    return this;
  }

  public TimeseriesProperties addTimeseriesDataItem(TimeseriesDataPoint timeseriesDataItem) {
    if (this.timeseriesData == null) {
      this.timeseriesData = new ArrayList<>();
    }
    this.timeseriesData.add(timeseriesDataItem);
    return this;
  }

  /**
   * The set of data points for the timeseries
   * @return timeseriesData
   */
  @javax.annotation.Nullable
  public List<TimeseriesDataPoint> getTimeseriesData() {
    return timeseriesData;
  }

  public void setTimeseriesData(List<TimeseriesDataPoint> timeseriesData) {
    this.timeseriesData = timeseriesData;
  }


  public TimeseriesProperties timeseriesType(TimeseriesTypeEnum timeseriesType) {
    this.timeseriesType = timeseriesType;
    return this;
  }

  /**
   * The type of Timeseries
   * @return timeseriesType
   */
  @javax.annotation.Nullable
  public TimeseriesTypeEnum getTimeseriesType() {
    return timeseriesType;
  }

  public void setTimeseriesType(TimeseriesTypeEnum timeseriesType) {
    this.timeseriesType = timeseriesType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeseriesProperties timeseriesProperties = (TimeseriesProperties) o;
    return Objects.equals(this.aggregationInterval, timeseriesProperties.aggregationInterval) &&
        Objects.equals(this.country, timeseriesProperties.country) &&
        Objects.equals(this.endDateTimeUTC, timeseriesProperties.endDateTimeUTC) &&
        Objects.equals(this.endpoint, timeseriesProperties.endpoint) &&
        Objects.equals(this.startDateTimeUTC, timeseriesProperties.startDateTimeUTC) &&
        Objects.equals(this.timeseriesData, timeseriesProperties.timeseriesData) &&
        Objects.equals(this.timeseriesType, timeseriesProperties.timeseriesType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationInterval, country, endDateTimeUTC, endpoint, startDateTimeUTC, timeseriesData, timeseriesType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeseriesProperties {\n");
    sb.append("    aggregationInterval: ").append(toIndentedString(aggregationInterval)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    endDateTimeUTC: ").append(toIndentedString(endDateTimeUTC)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    startDateTimeUTC: ").append(toIndentedString(startDateTimeUTC)).append("\n");
    sb.append("    timeseriesData: ").append(toIndentedString(timeseriesData)).append("\n");
    sb.append("    timeseriesType: ").append(toIndentedString(timeseriesType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationInterval");
    openapiFields.add("country");
    openapiFields.add("endDateTimeUTC");
    openapiFields.add("endpoint");
    openapiFields.add("startDateTimeUTC");
    openapiFields.add("timeseriesData");
    openapiFields.add("timeseriesType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeseriesProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeseriesProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeseriesProperties is not found in the empty JSON string", TimeseriesProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeseriesProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeseriesProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregationInterval") != null && !jsonObj.get("aggregationInterval").isJsonNull()) && !jsonObj.get("aggregationInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationInterval").toString()));
      }
      // validate the optional field `aggregationInterval`
      if (jsonObj.get("aggregationInterval") != null && !jsonObj.get("aggregationInterval").isJsonNull()) {
        AggregationIntervalEnum.validateJsonElement(jsonObj.get("aggregationInterval"));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("endDateTimeUTC") != null && !jsonObj.get("endDateTimeUTC").isJsonNull()) && !jsonObj.get("endDateTimeUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDateTimeUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDateTimeUTC").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("startDateTimeUTC") != null && !jsonObj.get("startDateTimeUTC").isJsonNull()) && !jsonObj.get("startDateTimeUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDateTimeUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDateTimeUTC").toString()));
      }
      if (jsonObj.get("timeseriesData") != null && !jsonObj.get("timeseriesData").isJsonNull()) {
        JsonArray jsonArraytimeseriesData = jsonObj.getAsJsonArray("timeseriesData");
        if (jsonArraytimeseriesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timeseriesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timeseriesData` to be an array in the JSON string but got `%s`", jsonObj.get("timeseriesData").toString()));
          }

          // validate the optional field `timeseriesData` (array)
          for (int i = 0; i < jsonArraytimeseriesData.size(); i++) {
            TimeseriesDataPoint.validateJsonElement(jsonArraytimeseriesData.get(i));
          };
        }
      }
      if ((jsonObj.get("timeseriesType") != null && !jsonObj.get("timeseriesType").isJsonNull()) && !jsonObj.get("timeseriesType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeseriesType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeseriesType").toString()));
      }
      // validate the optional field `timeseriesType`
      if (jsonObj.get("timeseriesType") != null && !jsonObj.get("timeseriesType").isJsonNull()) {
        TimeseriesTypeEnum.validateJsonElement(jsonObj.get("timeseriesType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeseriesProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeseriesProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeseriesProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeseriesProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeseriesProperties>() {
           @Override
           public void write(JsonWriter out, TimeseriesProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeseriesProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeseriesProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeseriesProperties
   * @throws IOException if the JSON string is invalid with respect to TimeseriesProperties
   */
  public static TimeseriesProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeseriesProperties.class);
  }

  /**
   * Convert an instance of TimeseriesProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

