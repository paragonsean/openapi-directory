/*
 * NetworkExperiments
 * These are the Network Experiment APIs. 
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Experiment;
import org.openapitools.client.model.ExperimentList;
import org.openapitools.client.model.ExperimentUpdateModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExperimentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExperimentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExperimentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for experimentsCreateOrUpdate
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @param parameters The Experiment resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new experiment has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call experimentsCreateOrUpdateCall(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, Experiment parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "experimentName" + "}", localVarApiClient.escapeString(experimentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call experimentsCreateOrUpdateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, Experiment parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling experimentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling experimentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling experimentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling experimentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'experimentName' is set
        if (experimentName == null) {
            throw new ApiException("Missing the required parameter 'experimentName' when calling experimentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling experimentsCreateOrUpdate(Async)");
        }

        return experimentsCreateOrUpdateCall(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, parameters, _callback);

    }

    /**
     * Creates or updates an Experiment
     * 
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @param parameters The Experiment resource (required)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new experiment has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Experiment experimentsCreateOrUpdate(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, Experiment parameters) throws ApiException {
        ApiResponse<Experiment> localVarResp = experimentsCreateOrUpdateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, parameters);
        return localVarResp.getData();
    }

    /**
     * Creates or updates an Experiment
     * 
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @param parameters The Experiment resource (required)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new experiment has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Experiment> experimentsCreateOrUpdateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, Experiment parameters) throws ApiException {
        okhttp3.Call localVarCall = experimentsCreateOrUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, parameters, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates an Experiment (asynchronously)
     * 
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @param parameters The Experiment resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new experiment has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call experimentsCreateOrUpdateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, Experiment parameters, final ApiCallback<Experiment> _callback) throws ApiException {

        okhttp3.Call localVarCall = experimentsCreateOrUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, parameters, _callback);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for experimentsDelete
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the policy was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call experimentsDeleteCall(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "experimentName" + "}", localVarApiClient.escapeString(experimentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call experimentsDeleteValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling experimentsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling experimentsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling experimentsDelete(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling experimentsDelete(Async)");
        }

        // verify the required parameter 'experimentName' is set
        if (experimentName == null) {
            throw new ApiException("Missing the required parameter 'experimentName' when calling experimentsDelete(Async)");
        }

        return experimentsDeleteCall(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, _callback);

    }

    /**
     * Deletes an Experiment
     * 
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the policy was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void experimentsDelete(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName) throws ApiException {
        experimentsDeleteWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName);
    }

    /**
     * Deletes an Experiment
     * 
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the policy was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> experimentsDeleteWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName) throws ApiException {
        okhttp3.Call localVarCall = experimentsDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an Experiment (asynchronously)
     * 
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the policy was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call experimentsDeleteAsync(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = experimentsDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for experimentsGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call experimentsGetCall(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "experimentName" + "}", localVarApiClient.escapeString(experimentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call experimentsGetValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling experimentsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling experimentsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling experimentsGet(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling experimentsGet(Async)");
        }

        // verify the required parameter 'experimentName' is set
        if (experimentName == null) {
            throw new ApiException("Missing the required parameter 'experimentName' when calling experimentsGet(Async)");
        }

        return experimentsGetCall(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, _callback);

    }

    /**
     * Gets an Experiment by ExperimentName
     * 
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Experiment experimentsGet(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName) throws ApiException {
        ApiResponse<Experiment> localVarResp = experimentsGetWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName);
        return localVarResp.getData();
    }

    /**
     * Gets an Experiment by ExperimentName
     * 
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Experiment> experimentsGetWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName) throws ApiException {
        okhttp3.Call localVarCall = experimentsGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an Experiment by ExperimentName (asynchronously)
     * 
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call experimentsGetAsync(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, final ApiCallback<Experiment> _callback) throws ApiException {

        okhttp3.Call localVarCall = experimentsGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, _callback);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for experimentsListByProfile
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call experimentsListByProfileCall(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call experimentsListByProfileValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling experimentsListByProfile(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling experimentsListByProfile(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling experimentsListByProfile(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling experimentsListByProfile(Async)");
        }

        return experimentsListByProfileCall(subscriptionId, apiVersion, resourceGroupName, profileName, _callback);

    }

    /**
     * Gets a list of Experiments
     * 
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @return ExperimentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ExperimentList experimentsListByProfile(String subscriptionId, String apiVersion, String resourceGroupName, String profileName) throws ApiException {
        ApiResponse<ExperimentList> localVarResp = experimentsListByProfileWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, profileName);
        return localVarResp.getData();
    }

    /**
     * Gets a list of Experiments
     * 
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @return ApiResponse&lt;ExperimentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExperimentList> experimentsListByProfileWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String profileName) throws ApiException {
        okhttp3.Call localVarCall = experimentsListByProfileValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, profileName, null);
        Type localVarReturnType = new TypeToken<ExperimentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of Experiments (asynchronously)
     * 
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call experimentsListByProfileAsync(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, final ApiCallback<ExperimentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = experimentsListByProfileValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, profileName, _callback);
        Type localVarReturnType = new TypeToken<ExperimentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for experimentsUpdate
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @param parameters The Experiment Update Model (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call experimentsUpdateCall(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, ExperimentUpdateModel parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "experimentName" + "}", localVarApiClient.escapeString(experimentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call experimentsUpdateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, ExperimentUpdateModel parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling experimentsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling experimentsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling experimentsUpdate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling experimentsUpdate(Async)");
        }

        // verify the required parameter 'experimentName' is set
        if (experimentName == null) {
            throw new ApiException("Missing the required parameter 'experimentName' when calling experimentsUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling experimentsUpdate(Async)");
        }

        return experimentsUpdateCall(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, parameters, _callback);

    }

    /**
     * Updates an Experiment by Experiment id
     * Updates an Experiment
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @param parameters The Experiment Update Model (required)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Experiment experimentsUpdate(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, ExperimentUpdateModel parameters) throws ApiException {
        ApiResponse<Experiment> localVarResp = experimentsUpdateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, parameters);
        return localVarResp.getData();
    }

    /**
     * Updates an Experiment by Experiment id
     * Updates an Experiment
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @param parameters The Experiment Update Model (required)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Experiment> experimentsUpdateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, ExperimentUpdateModel parameters) throws ApiException {
        okhttp3.Call localVarCall = experimentsUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, parameters, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an Experiment by Experiment id (asynchronously)
     * Updates an Experiment
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param profileName The Profile identifier associated with the Tenant and Partner (required)
     * @param experimentName The Experiment identifier associated with the Experiment (required)
     * @param parameters The Experiment Update Model (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call experimentsUpdateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String profileName, String experimentName, ExperimentUpdateModel parameters, final ApiCallback<Experiment> _callback) throws ApiException {

        okhttp3.Call localVarCall = experimentsUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, parameters, _callback);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
