/*
 * NetworkExperiments
 * These are the Network Experiment APIs. 
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LatencyMetric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a the properties of a Latency Scorecard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:41.448584-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LatencyScorecardProperties {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_DATE_TIME_U_T_C = "endDateTimeUTC";
  @SerializedName(SERIALIZED_NAME_END_DATE_TIME_U_T_C)
  private OffsetDateTime endDateTimeUTC;

  public static final String SERIALIZED_NAME_ENDPOINT_A = "endpointA";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_A)
  private String endpointA;

  public static final String SERIALIZED_NAME_ENDPOINT_B = "endpointB";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_B)
  private String endpointB;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LATENCY_METRICS = "latencyMetrics";
  @SerializedName(SERIALIZED_NAME_LATENCY_METRICS)
  private List<LatencyMetric> latencyMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE_TIME_U_T_C = "startDateTimeUTC";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME_U_T_C)
  private OffsetDateTime startDateTimeUTC;

  public LatencyScorecardProperties() {
  }

  public LatencyScorecardProperties(
     String country, 
     String description, 
     OffsetDateTime endDateTimeUTC, 
     String endpointA, 
     String endpointB, 
     String id, 
     String name, 
     OffsetDateTime startDateTimeUTC
  ) {
    this();
    this.country = country;
    this.description = description;
    this.endDateTimeUTC = endDateTimeUTC;
    this.endpointA = endpointA;
    this.endpointB = endpointB;
    this.id = id;
    this.name = name;
    this.startDateTimeUTC = startDateTimeUTC;
  }

  /**
   * The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }



  /**
   * The description of the Latency Scorecard
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * The end time of the Latency Scorecard in UTC
   * @return endDateTimeUTC
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDateTimeUTC() {
    return endDateTimeUTC;
  }



  /**
   * The A endpoint in the scorecard
   * @return endpointA
   */
  @javax.annotation.Nullable
  public String getEndpointA() {
    return endpointA;
  }



  /**
   * The B endpoint in the scorecard
   * @return endpointB
   */
  @javax.annotation.Nullable
  public String getEndpointB() {
    return endpointB;
  }



  /**
   * The unique identifier of the Latency Scorecard
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public LatencyScorecardProperties latencyMetrics(List<LatencyMetric> latencyMetrics) {
    this.latencyMetrics = latencyMetrics;
    return this;
  }

  public LatencyScorecardProperties addLatencyMetricsItem(LatencyMetric latencyMetricsItem) {
    if (this.latencyMetrics == null) {
      this.latencyMetrics = new ArrayList<>();
    }
    this.latencyMetrics.add(latencyMetricsItem);
    return this;
  }

  /**
   * The latency metrics of the Latency Scorecard
   * @return latencyMetrics
   */
  @javax.annotation.Nullable
  public List<LatencyMetric> getLatencyMetrics() {
    return latencyMetrics;
  }

  public void setLatencyMetrics(List<LatencyMetric> latencyMetrics) {
    this.latencyMetrics = latencyMetrics;
  }


  /**
   * The name of the Latency Scorecard
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * The start time of the Latency Scorecard in UTC
   * @return startDateTimeUTC
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDateTimeUTC() {
    return startDateTimeUTC;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LatencyScorecardProperties latencyScorecardProperties = (LatencyScorecardProperties) o;
    return Objects.equals(this.country, latencyScorecardProperties.country) &&
        Objects.equals(this.description, latencyScorecardProperties.description) &&
        Objects.equals(this.endDateTimeUTC, latencyScorecardProperties.endDateTimeUTC) &&
        Objects.equals(this.endpointA, latencyScorecardProperties.endpointA) &&
        Objects.equals(this.endpointB, latencyScorecardProperties.endpointB) &&
        Objects.equals(this.id, latencyScorecardProperties.id) &&
        Objects.equals(this.latencyMetrics, latencyScorecardProperties.latencyMetrics) &&
        Objects.equals(this.name, latencyScorecardProperties.name) &&
        Objects.equals(this.startDateTimeUTC, latencyScorecardProperties.startDateTimeUTC);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, description, endDateTimeUTC, endpointA, endpointB, id, latencyMetrics, name, startDateTimeUTC);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LatencyScorecardProperties {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endDateTimeUTC: ").append(toIndentedString(endDateTimeUTC)).append("\n");
    sb.append("    endpointA: ").append(toIndentedString(endpointA)).append("\n");
    sb.append("    endpointB: ").append(toIndentedString(endpointB)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    latencyMetrics: ").append(toIndentedString(latencyMetrics)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDateTimeUTC: ").append(toIndentedString(startDateTimeUTC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("description");
    openapiFields.add("endDateTimeUTC");
    openapiFields.add("endpointA");
    openapiFields.add("endpointB");
    openapiFields.add("id");
    openapiFields.add("latencyMetrics");
    openapiFields.add("name");
    openapiFields.add("startDateTimeUTC");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LatencyScorecardProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LatencyScorecardProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LatencyScorecardProperties is not found in the empty JSON string", LatencyScorecardProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LatencyScorecardProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LatencyScorecardProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("endpointA") != null && !jsonObj.get("endpointA").isJsonNull()) && !jsonObj.get("endpointA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointA").toString()));
      }
      if ((jsonObj.get("endpointB") != null && !jsonObj.get("endpointB").isJsonNull()) && !jsonObj.get("endpointB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointB").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("latencyMetrics") != null && !jsonObj.get("latencyMetrics").isJsonNull()) {
        JsonArray jsonArraylatencyMetrics = jsonObj.getAsJsonArray("latencyMetrics");
        if (jsonArraylatencyMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("latencyMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `latencyMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("latencyMetrics").toString()));
          }

          // validate the optional field `latencyMetrics` (array)
          for (int i = 0; i < jsonArraylatencyMetrics.size(); i++) {
            LatencyMetric.validateJsonElement(jsonArraylatencyMetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LatencyScorecardProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LatencyScorecardProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LatencyScorecardProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LatencyScorecardProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LatencyScorecardProperties>() {
           @Override
           public void write(JsonWriter out, LatencyScorecardProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LatencyScorecardProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LatencyScorecardProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LatencyScorecardProperties
   * @throws IOException if the JSON string is invalid with respect to LatencyScorecardProperties
   */
  public static LatencyScorecardProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LatencyScorecardProperties.class);
  }

  /**
   * Convert an instance of LatencyScorecardProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

