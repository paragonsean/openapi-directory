# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.timeseries_data_point import TimeseriesDataPoint
from openapi_server import util


class TimeseriesProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_interval: str=None, country: str=None, end_date_time_utc: str=None, endpoint: str=None, start_date_time_utc: str=None, timeseries_data: List[TimeseriesDataPoint]=None, timeseries_type: str=None):
        """TimeseriesProperties - a model defined in OpenAPI

        :param aggregation_interval: The aggregation_interval of this TimeseriesProperties.
        :param country: The country of this TimeseriesProperties.
        :param end_date_time_utc: The end_date_time_utc of this TimeseriesProperties.
        :param endpoint: The endpoint of this TimeseriesProperties.
        :param start_date_time_utc: The start_date_time_utc of this TimeseriesProperties.
        :param timeseries_data: The timeseries_data of this TimeseriesProperties.
        :param timeseries_type: The timeseries_type of this TimeseriesProperties.
        """
        self.openapi_types = {
            'aggregation_interval': str,
            'country': str,
            'end_date_time_utc': str,
            'endpoint': str,
            'start_date_time_utc': str,
            'timeseries_data': List[TimeseriesDataPoint],
            'timeseries_type': str
        }

        self.attribute_map = {
            'aggregation_interval': 'aggregationInterval',
            'country': 'country',
            'end_date_time_utc': 'endDateTimeUTC',
            'endpoint': 'endpoint',
            'start_date_time_utc': 'startDateTimeUTC',
            'timeseries_data': 'timeseriesData',
            'timeseries_type': 'timeseriesType'
        }

        self._aggregation_interval = aggregation_interval
        self._country = country
        self._end_date_time_utc = end_date_time_utc
        self._endpoint = endpoint
        self._start_date_time_utc = start_date_time_utc
        self._timeseries_data = timeseries_data
        self._timeseries_type = timeseries_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeseriesProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeseriesProperties of this TimeseriesProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_interval(self):
        """Gets the aggregation_interval of this TimeseriesProperties.

        The aggregation interval of the Timeseries

        :return: The aggregation_interval of this TimeseriesProperties.
        :rtype: str
        """
        return self._aggregation_interval

    @aggregation_interval.setter
    def aggregation_interval(self, aggregation_interval):
        """Sets the aggregation_interval of this TimeseriesProperties.

        The aggregation interval of the Timeseries

        :param aggregation_interval: The aggregation_interval of this TimeseriesProperties.
        :type aggregation_interval: str
        """
        allowed_values = ["Hourly", "Daily"]  # noqa: E501
        if aggregation_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_interval` ({0}), must be one of {1}"
                .format(aggregation_interval, allowed_values)
            )

        self._aggregation_interval = aggregation_interval

    @property
    def country(self):
        """Gets the country of this TimeseriesProperties.

        The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html

        :return: The country of this TimeseriesProperties.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TimeseriesProperties.

        The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html

        :param country: The country of this TimeseriesProperties.
        :type country: str
        """

        self._country = country

    @property
    def end_date_time_utc(self):
        """Gets the end_date_time_utc of this TimeseriesProperties.

        The end DateTime of the Timeseries in UTC

        :return: The end_date_time_utc of this TimeseriesProperties.
        :rtype: str
        """
        return self._end_date_time_utc

    @end_date_time_utc.setter
    def end_date_time_utc(self, end_date_time_utc):
        """Sets the end_date_time_utc of this TimeseriesProperties.

        The end DateTime of the Timeseries in UTC

        :param end_date_time_utc: The end_date_time_utc of this TimeseriesProperties.
        :type end_date_time_utc: str
        """

        self._end_date_time_utc = end_date_time_utc

    @property
    def endpoint(self):
        """Gets the endpoint of this TimeseriesProperties.

        The endpoint associated with the Timeseries data point

        :return: The endpoint of this TimeseriesProperties.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this TimeseriesProperties.

        The endpoint associated with the Timeseries data point

        :param endpoint: The endpoint of this TimeseriesProperties.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def start_date_time_utc(self):
        """Gets the start_date_time_utc of this TimeseriesProperties.

        The start DateTime of the Timeseries in UTC

        :return: The start_date_time_utc of this TimeseriesProperties.
        :rtype: str
        """
        return self._start_date_time_utc

    @start_date_time_utc.setter
    def start_date_time_utc(self, start_date_time_utc):
        """Sets the start_date_time_utc of this TimeseriesProperties.

        The start DateTime of the Timeseries in UTC

        :param start_date_time_utc: The start_date_time_utc of this TimeseriesProperties.
        :type start_date_time_utc: str
        """

        self._start_date_time_utc = start_date_time_utc

    @property
    def timeseries_data(self):
        """Gets the timeseries_data of this TimeseriesProperties.

        The set of data points for the timeseries

        :return: The timeseries_data of this TimeseriesProperties.
        :rtype: List[TimeseriesDataPoint]
        """
        return self._timeseries_data

    @timeseries_data.setter
    def timeseries_data(self, timeseries_data):
        """Sets the timeseries_data of this TimeseriesProperties.

        The set of data points for the timeseries

        :param timeseries_data: The timeseries_data of this TimeseriesProperties.
        :type timeseries_data: List[TimeseriesDataPoint]
        """

        self._timeseries_data = timeseries_data

    @property
    def timeseries_type(self):
        """Gets the timeseries_type of this TimeseriesProperties.

        The type of Timeseries

        :return: The timeseries_type of this TimeseriesProperties.
        :rtype: str
        """
        return self._timeseries_type

    @timeseries_type.setter
    def timeseries_type(self, timeseries_type):
        """Sets the timeseries_type of this TimeseriesProperties.

        The type of Timeseries

        :param timeseries_type: The timeseries_type of this TimeseriesProperties.
        :type timeseries_type: str
        """
        allowed_values = ["MeasurementCounts", "LatencyP50", "LatencyP75", "LatencyP95"]  # noqa: E501
        if timeseries_type not in allowed_values:
            raise ValueError(
                "Invalid value for `timeseries_type` ({0}), must be one of {1}"
                .format(timeseries_type, allowed_values)
            )

        self._timeseries_type = timeseries_type
