# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PreconfiguredEndpointProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend: str=None, description: str=None, endpoint: str=None, endpoint_type: str=None):
        """PreconfiguredEndpointProperties - a model defined in OpenAPI

        :param backend: The backend of this PreconfiguredEndpointProperties.
        :param description: The description of this PreconfiguredEndpointProperties.
        :param endpoint: The endpoint of this PreconfiguredEndpointProperties.
        :param endpoint_type: The endpoint_type of this PreconfiguredEndpointProperties.
        """
        self.openapi_types = {
            'backend': str,
            'description': str,
            'endpoint': str,
            'endpoint_type': str
        }

        self.attribute_map = {
            'backend': 'backend',
            'description': 'description',
            'endpoint': 'endpoint',
            'endpoint_type': 'endpointType'
        }

        self._backend = backend
        self._description = description
        self._endpoint = endpoint
        self._endpoint_type = endpoint_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PreconfiguredEndpointProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PreconfiguredEndpointProperties of this PreconfiguredEndpointProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend(self):
        """Gets the backend of this PreconfiguredEndpointProperties.

        The preconfigured endpoint backend

        :return: The backend of this PreconfiguredEndpointProperties.
        :rtype: str
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this PreconfiguredEndpointProperties.

        The preconfigured endpoint backend

        :param backend: The backend of this PreconfiguredEndpointProperties.
        :type backend: str
        """

        self._backend = backend

    @property
    def description(self):
        """Gets the description of this PreconfiguredEndpointProperties.

        The description of the endpoint

        :return: The description of this PreconfiguredEndpointProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PreconfiguredEndpointProperties.

        The description of the endpoint

        :param description: The description of this PreconfiguredEndpointProperties.
        :type description: str
        """

        self._description = description

    @property
    def endpoint(self):
        """Gets the endpoint of this PreconfiguredEndpointProperties.

        The endpoint that is preconfigured

        :return: The endpoint of this PreconfiguredEndpointProperties.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this PreconfiguredEndpointProperties.

        The endpoint that is preconfigured

        :param endpoint: The endpoint of this PreconfiguredEndpointProperties.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def endpoint_type(self):
        """Gets the endpoint_type of this PreconfiguredEndpointProperties.

        The type of endpoint

        :return: The endpoint_type of this PreconfiguredEndpointProperties.
        :rtype: str
        """
        return self._endpoint_type

    @endpoint_type.setter
    def endpoint_type(self, endpoint_type):
        """Sets the endpoint_type of this PreconfiguredEndpointProperties.

        The type of endpoint

        :param endpoint_type: The endpoint_type of this PreconfiguredEndpointProperties.
        :type endpoint_type: str
        """
        allowed_values = ["AFD", "AzureRegion", "CDN", "ATM"]  # noqa: E501
        if endpoint_type not in allowed_values:
            raise ValueError(
                "Invalid value for `endpoint_type` ({0}), must be one of {1}"
                .format(endpoint_type, allowed_values)
            )

        self._endpoint_type = endpoint_type
