/**
 * NetworkExperiments
 * These are the Network Experiment APIs. 
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkExperimentResourceState from './NetworkExperimentResourceState';

/**
 * The ProfileProperties model module.
 * @module model/ProfileProperties
 * @version 2019-11-01
 */
class ProfileProperties {
    /**
     * Constructs a new <code>ProfileProperties</code>.
     * Defines the properties of an experiment
     * @alias module:model/ProfileProperties
     */
    constructor() { 
        
        ProfileProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProfileProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProfileProperties} obj Optional instance to populate.
     * @return {module:model/ProfileProperties} The populated <code>ProfileProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProfileProperties();

            if (data.hasOwnProperty('enabledState')) {
                obj['enabledState'] = ApiClient.convertToType(data['enabledState'], 'String');
            }
            if (data.hasOwnProperty('resourceState')) {
                obj['resourceState'] = NetworkExperimentResourceState.constructFromObject(data['resourceState']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProfileProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProfileProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['enabledState'] && !(typeof data['enabledState'] === 'string' || data['enabledState'] instanceof String)) {
            throw new Error("Expected the field `enabledState` to be a primitive type in the JSON string but got " + data['enabledState']);
        }

        return true;
    }


}



/**
 * The state of the Experiment
 * @member {module:model/ProfileProperties.EnabledStateEnum} enabledState
 */
ProfileProperties.prototype['enabledState'] = undefined;

/**
 * @member {module:model/NetworkExperimentResourceState} resourceState
 */
ProfileProperties.prototype['resourceState'] = undefined;





/**
 * Allowed values for the <code>enabledState</code> property.
 * @enum {String}
 * @readonly
 */
ProfileProperties['EnabledStateEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default ProfileProperties;

