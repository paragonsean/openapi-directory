/**
 * NetworkExperiments
 * These are the Network Experiment APIs. 
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimeseriesDataPoint from './TimeseriesDataPoint';

/**
 * The TimeseriesProperties model module.
 * @module model/TimeseriesProperties
 * @version 2019-11-01
 */
class TimeseriesProperties {
    /**
     * Constructs a new <code>TimeseriesProperties</code>.
     * Defines the properties of a timeseries
     * @alias module:model/TimeseriesProperties
     */
    constructor() { 
        
        TimeseriesProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeseriesProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeseriesProperties} obj Optional instance to populate.
     * @return {module:model/TimeseriesProperties} The populated <code>TimeseriesProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeseriesProperties();

            if (data.hasOwnProperty('aggregationInterval')) {
                obj['aggregationInterval'] = ApiClient.convertToType(data['aggregationInterval'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('endDateTimeUTC')) {
                obj['endDateTimeUTC'] = ApiClient.convertToType(data['endDateTimeUTC'], 'String');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('startDateTimeUTC')) {
                obj['startDateTimeUTC'] = ApiClient.convertToType(data['startDateTimeUTC'], 'String');
            }
            if (data.hasOwnProperty('timeseriesData')) {
                obj['timeseriesData'] = ApiClient.convertToType(data['timeseriesData'], [TimeseriesDataPoint]);
            }
            if (data.hasOwnProperty('timeseriesType')) {
                obj['timeseriesType'] = ApiClient.convertToType(data['timeseriesType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeseriesProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeseriesProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregationInterval'] && !(typeof data['aggregationInterval'] === 'string' || data['aggregationInterval'] instanceof String)) {
            throw new Error("Expected the field `aggregationInterval` to be a primitive type in the JSON string but got " + data['aggregationInterval']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['endDateTimeUTC'] && !(typeof data['endDateTimeUTC'] === 'string' || data['endDateTimeUTC'] instanceof String)) {
            throw new Error("Expected the field `endDateTimeUTC` to be a primitive type in the JSON string but got " + data['endDateTimeUTC']);
        }
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // ensure the json data is a string
        if (data['startDateTimeUTC'] && !(typeof data['startDateTimeUTC'] === 'string' || data['startDateTimeUTC'] instanceof String)) {
            throw new Error("Expected the field `startDateTimeUTC` to be a primitive type in the JSON string but got " + data['startDateTimeUTC']);
        }
        if (data['timeseriesData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['timeseriesData'])) {
                throw new Error("Expected the field `timeseriesData` to be an array in the JSON data but got " + data['timeseriesData']);
            }
            // validate the optional field `timeseriesData` (array)
            for (const item of data['timeseriesData']) {
                TimeseriesDataPoint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['timeseriesType'] && !(typeof data['timeseriesType'] === 'string' || data['timeseriesType'] instanceof String)) {
            throw new Error("Expected the field `timeseriesType` to be a primitive type in the JSON string but got " + data['timeseriesType']);
        }

        return true;
    }


}



/**
 * The aggregation interval of the Timeseries
 * @member {module:model/TimeseriesProperties.AggregationIntervalEnum} aggregationInterval
 */
TimeseriesProperties.prototype['aggregationInterval'] = undefined;

/**
 * The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
 * @member {String} country
 */
TimeseriesProperties.prototype['country'] = undefined;

/**
 * The end DateTime of the Timeseries in UTC
 * @member {String} endDateTimeUTC
 */
TimeseriesProperties.prototype['endDateTimeUTC'] = undefined;

/**
 * The endpoint associated with the Timeseries data point
 * @member {String} endpoint
 */
TimeseriesProperties.prototype['endpoint'] = undefined;

/**
 * The start DateTime of the Timeseries in UTC
 * @member {String} startDateTimeUTC
 */
TimeseriesProperties.prototype['startDateTimeUTC'] = undefined;

/**
 * The set of data points for the timeseries
 * @member {Array.<module:model/TimeseriesDataPoint>} timeseriesData
 */
TimeseriesProperties.prototype['timeseriesData'] = undefined;

/**
 * The type of Timeseries
 * @member {module:model/TimeseriesProperties.TimeseriesTypeEnum} timeseriesType
 */
TimeseriesProperties.prototype['timeseriesType'] = undefined;





/**
 * Allowed values for the <code>aggregationInterval</code> property.
 * @enum {String}
 * @readonly
 */
TimeseriesProperties['AggregationIntervalEnum'] = {

    /**
     * value: "Hourly"
     * @const
     */
    "Hourly": "Hourly",

    /**
     * value: "Daily"
     * @const
     */
    "Daily": "Daily"
};


/**
 * Allowed values for the <code>timeseriesType</code> property.
 * @enum {String}
 * @readonly
 */
TimeseriesProperties['TimeseriesTypeEnum'] = {

    /**
     * value: "MeasurementCounts"
     * @const
     */
    "MeasurementCounts": "MeasurementCounts",

    /**
     * value: "LatencyP50"
     * @const
     */
    "LatencyP50": "LatencyP50",

    /**
     * value: "LatencyP75"
     * @const
     */
    "LatencyP75": "LatencyP75",

    /**
     * value: "LatencyP95"
     * @const
     */
    "LatencyP95": "LatencyP95"
};



export default TimeseriesProperties;

