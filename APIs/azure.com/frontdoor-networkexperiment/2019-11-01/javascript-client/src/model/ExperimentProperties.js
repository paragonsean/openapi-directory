/**
 * NetworkExperiments
 * These are the Network Experiment APIs. 
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Endpoint from './Endpoint';
import NetworkExperimentResourceState from './NetworkExperimentResourceState';

/**
 * The ExperimentProperties model module.
 * @module model/ExperimentProperties
 * @version 2019-11-01
 */
class ExperimentProperties {
    /**
     * Constructs a new <code>ExperimentProperties</code>.
     * Defines the properties of an experiment
     * @alias module:model/ExperimentProperties
     */
    constructor() { 
        
        ExperimentProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExperimentProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExperimentProperties} obj Optional instance to populate.
     * @return {module:model/ExperimentProperties} The populated <code>ExperimentProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExperimentProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enabledState')) {
                obj['enabledState'] = ApiClient.convertToType(data['enabledState'], 'String');
            }
            if (data.hasOwnProperty('endpointA')) {
                obj['endpointA'] = Endpoint.constructFromObject(data['endpointA']);
            }
            if (data.hasOwnProperty('endpointB')) {
                obj['endpointB'] = Endpoint.constructFromObject(data['endpointB']);
            }
            if (data.hasOwnProperty('resourceState')) {
                obj['resourceState'] = NetworkExperimentResourceState.constructFromObject(data['resourceState']);
            }
            if (data.hasOwnProperty('scriptFileUri')) {
                obj['scriptFileUri'] = ApiClient.convertToType(data['scriptFileUri'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExperimentProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExperimentProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['enabledState'] && !(typeof data['enabledState'] === 'string' || data['enabledState'] instanceof String)) {
            throw new Error("Expected the field `enabledState` to be a primitive type in the JSON string but got " + data['enabledState']);
        }
        // validate the optional field `endpointA`
        if (data['endpointA']) { // data not null
          Endpoint.validateJSON(data['endpointA']);
        }
        // validate the optional field `endpointB`
        if (data['endpointB']) { // data not null
          Endpoint.validateJSON(data['endpointB']);
        }
        // ensure the json data is a string
        if (data['scriptFileUri'] && !(typeof data['scriptFileUri'] === 'string' || data['scriptFileUri'] instanceof String)) {
            throw new Error("Expected the field `scriptFileUri` to be a primitive type in the JSON string but got " + data['scriptFileUri']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The description of the details or intents of the Experiment
 * @member {String} description
 */
ExperimentProperties.prototype['description'] = undefined;

/**
 * The state of the Experiment
 * @member {module:model/ExperimentProperties.EnabledStateEnum} enabledState
 */
ExperimentProperties.prototype['enabledState'] = undefined;

/**
 * @member {module:model/Endpoint} endpointA
 */
ExperimentProperties.prototype['endpointA'] = undefined;

/**
 * @member {module:model/Endpoint} endpointB
 */
ExperimentProperties.prototype['endpointB'] = undefined;

/**
 * @member {module:model/NetworkExperimentResourceState} resourceState
 */
ExperimentProperties.prototype['resourceState'] = undefined;

/**
 * The uri to the Script used in the Experiment
 * @member {String} scriptFileUri
 */
ExperimentProperties.prototype['scriptFileUri'] = undefined;

/**
 * The description of Experiment status from the server side
 * @member {String} status
 */
ExperimentProperties.prototype['status'] = undefined;





/**
 * Allowed values for the <code>enabledState</code> property.
 * @enum {String}
 * @readonly
 */
ExperimentProperties['EnabledStateEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default ExperimentProperties;

