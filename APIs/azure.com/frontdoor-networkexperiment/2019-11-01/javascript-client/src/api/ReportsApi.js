/**
 * NetworkExperiments
 * These are the Network Experiment APIs. 
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import LatencyScorecard from '../model/LatencyScorecard';
import Timeseries from '../model/Timeseries';

/**
* Reports service.
* @module api/ReportsApi
* @version 2019-11-01
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:api/ReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reportsGetLatencyScorecards operation.
     * @callback module:api/ReportsApi~reportsGetLatencyScorecardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LatencyScorecard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Latency Scorecard for a given Experiment
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} profileName The Profile identifier associated with the Tenant and Partner
     * @param {String} experimentName The Experiment identifier associated with the Experiment
     * @param {module:model/String} aggregationInterval The aggregation interval of the Latency Scorecard
     * @param {Object} opts Optional parameters
     * @param {String} [endDateTimeUTC] The end DateTime of the Latency Scorecard in UTC
     * @param {String} [country] The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
     * @param {module:api/ReportsApi~reportsGetLatencyScorecardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LatencyScorecard}
     */
    reportsGetLatencyScorecards(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, aggregationInterval, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling reportsGetLatencyScorecards");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling reportsGetLatencyScorecards");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling reportsGetLatencyScorecards");
      }
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling reportsGetLatencyScorecards");
      }
      // verify the required parameter 'experimentName' is set
      if (experimentName === undefined || experimentName === null) {
        throw new Error("Missing the required parameter 'experimentName' when calling reportsGetLatencyScorecards");
      }
      // verify the required parameter 'aggregationInterval' is set
      if (aggregationInterval === undefined || aggregationInterval === null) {
        throw new Error("Missing the required parameter 'aggregationInterval' when calling reportsGetLatencyScorecards");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'profileName': profileName,
        'experimentName': experimentName
      };
      let queryParams = {
        'api-version': apiVersion,
        'endDateTimeUTC': opts['endDateTimeUTC'],
        'country': opts['country'],
        'aggregationInterval': aggregationInterval
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LatencyScorecard;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/LatencyScorecard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsGetTimeseries operation.
     * @callback module:api/ReportsApi~reportsGetTimeseriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Timeseries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Timeseries for a given Experiment
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} profileName The Profile identifier associated with the Tenant and Partner
     * @param {String} experimentName The Experiment identifier associated with the Experiment
     * @param {Date} startDateTimeUTC The start DateTime of the Timeseries in UTC
     * @param {Date} endDateTimeUTC The end DateTime of the Timeseries in UTC
     * @param {module:model/String} aggregationInterval The aggregation interval of the Timeseries
     * @param {module:model/String} timeseriesType The type of Timeseries
     * @param {Object} opts Optional parameters
     * @param {String} [endpoint] The specific endpoint
     * @param {String} [country] The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
     * @param {module:api/ReportsApi~reportsGetTimeseriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Timeseries}
     */
    reportsGetTimeseries(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, startDateTimeUTC, endDateTimeUTC, aggregationInterval, timeseriesType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling reportsGetTimeseries");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling reportsGetTimeseries");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling reportsGetTimeseries");
      }
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling reportsGetTimeseries");
      }
      // verify the required parameter 'experimentName' is set
      if (experimentName === undefined || experimentName === null) {
        throw new Error("Missing the required parameter 'experimentName' when calling reportsGetTimeseries");
      }
      // verify the required parameter 'startDateTimeUTC' is set
      if (startDateTimeUTC === undefined || startDateTimeUTC === null) {
        throw new Error("Missing the required parameter 'startDateTimeUTC' when calling reportsGetTimeseries");
      }
      // verify the required parameter 'endDateTimeUTC' is set
      if (endDateTimeUTC === undefined || endDateTimeUTC === null) {
        throw new Error("Missing the required parameter 'endDateTimeUTC' when calling reportsGetTimeseries");
      }
      // verify the required parameter 'aggregationInterval' is set
      if (aggregationInterval === undefined || aggregationInterval === null) {
        throw new Error("Missing the required parameter 'aggregationInterval' when calling reportsGetTimeseries");
      }
      // verify the required parameter 'timeseriesType' is set
      if (timeseriesType === undefined || timeseriesType === null) {
        throw new Error("Missing the required parameter 'timeseriesType' when calling reportsGetTimeseries");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'profileName': profileName,
        'experimentName': experimentName
      };
      let queryParams = {
        'api-version': apiVersion,
        'startDateTimeUTC': startDateTimeUTC,
        'endDateTimeUTC': endDateTimeUTC,
        'aggregationInterval': aggregationInterval,
        'timeseriesType': timeseriesType,
        'endpoint': opts['endpoint'],
        'country': opts['country']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Timeseries;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/Timeseries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
