/**
 * NetworkExperiments
 * These are the Network Experiment APIs. 
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Experiment from '../model/Experiment';
import ExperimentList from '../model/ExperimentList';
import ExperimentUpdateModel from '../model/ExperimentUpdateModel';

/**
* Experiments service.
* @module api/ExperimentsApi
* @version 2019-11-01
*/
export default class ExperimentsApi {

    /**
    * Constructs a new ExperimentsApi. 
    * @alias module:api/ExperimentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the experimentsCreateOrUpdate operation.
     * @callback module:api/ExperimentsApi~experimentsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Experiment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an Experiment
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} profileName The Profile identifier associated with the Tenant and Partner
     * @param {String} experimentName The Experiment identifier associated with the Experiment
     * @param {module:model/Experiment} parameters The Experiment resource
     * @param {module:api/ExperimentsApi~experimentsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Experiment}
     */
    experimentsCreateOrUpdate(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling experimentsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling experimentsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling experimentsCreateOrUpdate");
      }
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling experimentsCreateOrUpdate");
      }
      // verify the required parameter 'experimentName' is set
      if (experimentName === undefined || experimentName === null) {
        throw new Error("Missing the required parameter 'experimentName' when calling experimentsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling experimentsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'profileName': profileName,
        'experimentName': experimentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Experiment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the experimentsDelete operation.
     * @callback module:api/ExperimentsApi~experimentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Experiment
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} profileName The Profile identifier associated with the Tenant and Partner
     * @param {String} experimentName The Experiment identifier associated with the Experiment
     * @param {module:api/ExperimentsApi~experimentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    experimentsDelete(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling experimentsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling experimentsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling experimentsDelete");
      }
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling experimentsDelete");
      }
      // verify the required parameter 'experimentName' is set
      if (experimentName === undefined || experimentName === null) {
        throw new Error("Missing the required parameter 'experimentName' when calling experimentsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'profileName': profileName,
        'experimentName': experimentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the experimentsGet operation.
     * @callback module:api/ExperimentsApi~experimentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Experiment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Experiment by ExperimentName
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} profileName The Profile identifier associated with the Tenant and Partner
     * @param {String} experimentName The Experiment identifier associated with the Experiment
     * @param {module:api/ExperimentsApi~experimentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Experiment}
     */
    experimentsGet(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling experimentsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling experimentsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling experimentsGet");
      }
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling experimentsGet");
      }
      // verify the required parameter 'experimentName' is set
      if (experimentName === undefined || experimentName === null) {
        throw new Error("Missing the required parameter 'experimentName' when calling experimentsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'profileName': profileName,
        'experimentName': experimentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Experiment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the experimentsListByProfile operation.
     * @callback module:api/ExperimentsApi~experimentsListByProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExperimentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of Experiments
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} profileName The Profile identifier associated with the Tenant and Partner
     * @param {module:api/ExperimentsApi~experimentsListByProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExperimentList}
     */
    experimentsListByProfile(subscriptionId, apiVersion, resourceGroupName, profileName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling experimentsListByProfile");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling experimentsListByProfile");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling experimentsListByProfile");
      }
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling experimentsListByProfile");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'profileName': profileName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExperimentList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the experimentsUpdate operation.
     * @callback module:api/ExperimentsApi~experimentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Experiment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Experiment by Experiment id
     * Updates an Experiment
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} profileName The Profile identifier associated with the Tenant and Partner
     * @param {String} experimentName The Experiment identifier associated with the Experiment
     * @param {module:model/ExperimentUpdateModel} parameters The Experiment Update Model
     * @param {module:api/ExperimentsApi~experimentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Experiment}
     */
    experimentsUpdate(subscriptionId, apiVersion, resourceGroupName, profileName, experimentName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling experimentsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling experimentsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling experimentsUpdate");
      }
      // verify the required parameter 'profileName' is set
      if (profileName === undefined || profileName === null) {
        throw new Error("Missing the required parameter 'profileName' when calling experimentsUpdate");
      }
      // verify the required parameter 'experimentName' is set
      if (experimentName === undefined || experimentName === null) {
        throw new Error("Missing the required parameter 'experimentName' when calling experimentsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling experimentsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'profileName': profileName,
        'experimentName': experimentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Experiment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
