/**
 * NetworkExperiments
 * These are the Network Experiment APIs. 
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILatencyScorecardProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILatencyScorecardProperties::OAILatencyScorecardProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILatencyScorecardProperties::OAILatencyScorecardProperties() {
    this->initializeModel();
}

OAILatencyScorecardProperties::~OAILatencyScorecardProperties() {}

void OAILatencyScorecardProperties::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_time_utc_isSet = false;
    m_end_date_time_utc_isValid = false;

    m_endpoint_a_isSet = false;
    m_endpoint_a_isValid = false;

    m_endpoint_b_isSet = false;
    m_endpoint_b_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latency_metrics_isSet = false;
    m_latency_metrics_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_date_time_utc_isSet = false;
    m_start_date_time_utc_isValid = false;
}

void OAILatencyScorecardProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILatencyScorecardProperties::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_date_time_utc_isValid = ::OpenAPI::fromJsonValue(m_end_date_time_utc, json[QString("endDateTimeUTC")]);
    m_end_date_time_utc_isSet = !json[QString("endDateTimeUTC")].isNull() && m_end_date_time_utc_isValid;

    m_endpoint_a_isValid = ::OpenAPI::fromJsonValue(m_endpoint_a, json[QString("endpointA")]);
    m_endpoint_a_isSet = !json[QString("endpointA")].isNull() && m_endpoint_a_isValid;

    m_endpoint_b_isValid = ::OpenAPI::fromJsonValue(m_endpoint_b, json[QString("endpointB")]);
    m_endpoint_b_isSet = !json[QString("endpointB")].isNull() && m_endpoint_b_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latency_metrics_isValid = ::OpenAPI::fromJsonValue(m_latency_metrics, json[QString("latencyMetrics")]);
    m_latency_metrics_isSet = !json[QString("latencyMetrics")].isNull() && m_latency_metrics_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_date_time_utc_isValid = ::OpenAPI::fromJsonValue(m_start_date_time_utc, json[QString("startDateTimeUTC")]);
    m_start_date_time_utc_isSet = !json[QString("startDateTimeUTC")].isNull() && m_start_date_time_utc_isValid;
}

QString OAILatencyScorecardProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILatencyScorecardProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_time_utc_isSet) {
        obj.insert(QString("endDateTimeUTC"), ::OpenAPI::toJsonValue(m_end_date_time_utc));
    }
    if (m_endpoint_a_isSet) {
        obj.insert(QString("endpointA"), ::OpenAPI::toJsonValue(m_endpoint_a));
    }
    if (m_endpoint_b_isSet) {
        obj.insert(QString("endpointB"), ::OpenAPI::toJsonValue(m_endpoint_b));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latency_metrics.size() > 0) {
        obj.insert(QString("latencyMetrics"), ::OpenAPI::toJsonValue(m_latency_metrics));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_date_time_utc_isSet) {
        obj.insert(QString("startDateTimeUTC"), ::OpenAPI::toJsonValue(m_start_date_time_utc));
    }
    return obj;
}

QString OAILatencyScorecardProperties::getCountry() const {
    return m_country;
}
void OAILatencyScorecardProperties::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILatencyScorecardProperties::is_country_Set() const{
    return m_country_isSet;
}

bool OAILatencyScorecardProperties::is_country_Valid() const{
    return m_country_isValid;
}

QString OAILatencyScorecardProperties::getDescription() const {
    return m_description;
}
void OAILatencyScorecardProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILatencyScorecardProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAILatencyScorecardProperties::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAILatencyScorecardProperties::getEndDateTimeUtc() const {
    return m_end_date_time_utc;
}
void OAILatencyScorecardProperties::setEndDateTimeUtc(const QDateTime &end_date_time_utc) {
    m_end_date_time_utc = end_date_time_utc;
    m_end_date_time_utc_isSet = true;
}

bool OAILatencyScorecardProperties::is_end_date_time_utc_Set() const{
    return m_end_date_time_utc_isSet;
}

bool OAILatencyScorecardProperties::is_end_date_time_utc_Valid() const{
    return m_end_date_time_utc_isValid;
}

QString OAILatencyScorecardProperties::getEndpointA() const {
    return m_endpoint_a;
}
void OAILatencyScorecardProperties::setEndpointA(const QString &endpoint_a) {
    m_endpoint_a = endpoint_a;
    m_endpoint_a_isSet = true;
}

bool OAILatencyScorecardProperties::is_endpoint_a_Set() const{
    return m_endpoint_a_isSet;
}

bool OAILatencyScorecardProperties::is_endpoint_a_Valid() const{
    return m_endpoint_a_isValid;
}

QString OAILatencyScorecardProperties::getEndpointB() const {
    return m_endpoint_b;
}
void OAILatencyScorecardProperties::setEndpointB(const QString &endpoint_b) {
    m_endpoint_b = endpoint_b;
    m_endpoint_b_isSet = true;
}

bool OAILatencyScorecardProperties::is_endpoint_b_Set() const{
    return m_endpoint_b_isSet;
}

bool OAILatencyScorecardProperties::is_endpoint_b_Valid() const{
    return m_endpoint_b_isValid;
}

QString OAILatencyScorecardProperties::getId() const {
    return m_id;
}
void OAILatencyScorecardProperties::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILatencyScorecardProperties::is_id_Set() const{
    return m_id_isSet;
}

bool OAILatencyScorecardProperties::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILatencyMetric> OAILatencyScorecardProperties::getLatencyMetrics() const {
    return m_latency_metrics;
}
void OAILatencyScorecardProperties::setLatencyMetrics(const QList<OAILatencyMetric> &latency_metrics) {
    m_latency_metrics = latency_metrics;
    m_latency_metrics_isSet = true;
}

bool OAILatencyScorecardProperties::is_latency_metrics_Set() const{
    return m_latency_metrics_isSet;
}

bool OAILatencyScorecardProperties::is_latency_metrics_Valid() const{
    return m_latency_metrics_isValid;
}

QString OAILatencyScorecardProperties::getName() const {
    return m_name;
}
void OAILatencyScorecardProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILatencyScorecardProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAILatencyScorecardProperties::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAILatencyScorecardProperties::getStartDateTimeUtc() const {
    return m_start_date_time_utc;
}
void OAILatencyScorecardProperties::setStartDateTimeUtc(const QDateTime &start_date_time_utc) {
    m_start_date_time_utc = start_date_time_utc;
    m_start_date_time_utc_isSet = true;
}

bool OAILatencyScorecardProperties::is_start_date_time_utc_Set() const{
    return m_start_date_time_utc_isSet;
}

bool OAILatencyScorecardProperties::is_start_date_time_utc_Valid() const{
    return m_start_date_time_utc_isValid;
}

bool OAILatencyScorecardProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_a_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILatencyScorecardProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
