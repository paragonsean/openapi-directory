/**
 * NetworkExperiments
 * These are the Network Experiment APIs. 
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreconfiguredEndpointProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreconfiguredEndpointProperties::OAIPreconfiguredEndpointProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreconfiguredEndpointProperties::OAIPreconfiguredEndpointProperties() {
    this->initializeModel();
}

OAIPreconfiguredEndpointProperties::~OAIPreconfiguredEndpointProperties() {}

void OAIPreconfiguredEndpointProperties::initializeModel() {

    m_backend_isSet = false;
    m_backend_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;
}

void OAIPreconfiguredEndpointProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreconfiguredEndpointProperties::fromJsonObject(QJsonObject json) {

    m_backend_isValid = ::OpenAPI::fromJsonValue(m_backend, json[QString("backend")]);
    m_backend_isSet = !json[QString("backend")].isNull() && m_backend_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("endpointType")]);
    m_endpoint_type_isSet = !json[QString("endpointType")].isNull() && m_endpoint_type_isValid;
}

QString OAIPreconfiguredEndpointProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreconfiguredEndpointProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_isSet) {
        obj.insert(QString("backend"), ::OpenAPI::toJsonValue(m_backend));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_endpoint_type_isSet) {
        obj.insert(QString("endpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    return obj;
}

QString OAIPreconfiguredEndpointProperties::getBackend() const {
    return m_backend;
}
void OAIPreconfiguredEndpointProperties::setBackend(const QString &backend) {
    m_backend = backend;
    m_backend_isSet = true;
}

bool OAIPreconfiguredEndpointProperties::is_backend_Set() const{
    return m_backend_isSet;
}

bool OAIPreconfiguredEndpointProperties::is_backend_Valid() const{
    return m_backend_isValid;
}

QString OAIPreconfiguredEndpointProperties::getDescription() const {
    return m_description;
}
void OAIPreconfiguredEndpointProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPreconfiguredEndpointProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPreconfiguredEndpointProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPreconfiguredEndpointProperties::getEndpoint() const {
    return m_endpoint;
}
void OAIPreconfiguredEndpointProperties::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIPreconfiguredEndpointProperties::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIPreconfiguredEndpointProperties::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIPreconfiguredEndpointProperties::getEndpointType() const {
    return m_endpoint_type;
}
void OAIPreconfiguredEndpointProperties::setEndpointType(const QString &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAIPreconfiguredEndpointProperties::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAIPreconfiguredEndpointProperties::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

bool OAIPreconfiguredEndpointProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreconfiguredEndpointProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
