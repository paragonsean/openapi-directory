/**
 * NetworkExperiments
 * These are the Network Experiment APIs. 
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperimentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperimentProperties::OAIExperimentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperimentProperties::OAIExperimentProperties() {
    this->initializeModel();
}

OAIExperimentProperties::~OAIExperimentProperties() {}

void OAIExperimentProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_state_isSet = false;
    m_enabled_state_isValid = false;

    m_endpoint_a_isSet = false;
    m_endpoint_a_isValid = false;

    m_endpoint_b_isSet = false;
    m_endpoint_b_isValid = false;

    m_resource_state_isSet = false;
    m_resource_state_isValid = false;

    m_script_file_uri_isSet = false;
    m_script_file_uri_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIExperimentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperimentProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_state_isValid = ::OpenAPI::fromJsonValue(m_enabled_state, json[QString("enabledState")]);
    m_enabled_state_isSet = !json[QString("enabledState")].isNull() && m_enabled_state_isValid;

    m_endpoint_a_isValid = ::OpenAPI::fromJsonValue(m_endpoint_a, json[QString("endpointA")]);
    m_endpoint_a_isSet = !json[QString("endpointA")].isNull() && m_endpoint_a_isValid;

    m_endpoint_b_isValid = ::OpenAPI::fromJsonValue(m_endpoint_b, json[QString("endpointB")]);
    m_endpoint_b_isSet = !json[QString("endpointB")].isNull() && m_endpoint_b_isValid;

    m_resource_state_isValid = ::OpenAPI::fromJsonValue(m_resource_state, json[QString("resourceState")]);
    m_resource_state_isSet = !json[QString("resourceState")].isNull() && m_resource_state_isValid;

    m_script_file_uri_isValid = ::OpenAPI::fromJsonValue(m_script_file_uri, json[QString("scriptFileUri")]);
    m_script_file_uri_isSet = !json[QString("scriptFileUri")].isNull() && m_script_file_uri_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIExperimentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperimentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_state_isSet) {
        obj.insert(QString("enabledState"), ::OpenAPI::toJsonValue(m_enabled_state));
    }
    if (m_endpoint_a.isSet()) {
        obj.insert(QString("endpointA"), ::OpenAPI::toJsonValue(m_endpoint_a));
    }
    if (m_endpoint_b.isSet()) {
        obj.insert(QString("endpointB"), ::OpenAPI::toJsonValue(m_endpoint_b));
    }
    if (m_resource_state.isSet()) {
        obj.insert(QString("resourceState"), ::OpenAPI::toJsonValue(m_resource_state));
    }
    if (m_script_file_uri_isSet) {
        obj.insert(QString("scriptFileUri"), ::OpenAPI::toJsonValue(m_script_file_uri));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIExperimentProperties::getDescription() const {
    return m_description;
}
void OAIExperimentProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExperimentProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExperimentProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIExperimentProperties::getEnabledState() const {
    return m_enabled_state;
}
void OAIExperimentProperties::setEnabledState(const QString &enabled_state) {
    m_enabled_state = enabled_state;
    m_enabled_state_isSet = true;
}

bool OAIExperimentProperties::is_enabled_state_Set() const{
    return m_enabled_state_isSet;
}

bool OAIExperimentProperties::is_enabled_state_Valid() const{
    return m_enabled_state_isValid;
}

OAIEndpoint OAIExperimentProperties::getEndpointA() const {
    return m_endpoint_a;
}
void OAIExperimentProperties::setEndpointA(const OAIEndpoint &endpoint_a) {
    m_endpoint_a = endpoint_a;
    m_endpoint_a_isSet = true;
}

bool OAIExperimentProperties::is_endpoint_a_Set() const{
    return m_endpoint_a_isSet;
}

bool OAIExperimentProperties::is_endpoint_a_Valid() const{
    return m_endpoint_a_isValid;
}

OAIEndpoint OAIExperimentProperties::getEndpointB() const {
    return m_endpoint_b;
}
void OAIExperimentProperties::setEndpointB(const OAIEndpoint &endpoint_b) {
    m_endpoint_b = endpoint_b;
    m_endpoint_b_isSet = true;
}

bool OAIExperimentProperties::is_endpoint_b_Set() const{
    return m_endpoint_b_isSet;
}

bool OAIExperimentProperties::is_endpoint_b_Valid() const{
    return m_endpoint_b_isValid;
}

OAINetworkExperimentResourceState OAIExperimentProperties::getResourceState() const {
    return m_resource_state;
}
void OAIExperimentProperties::setResourceState(const OAINetworkExperimentResourceState &resource_state) {
    m_resource_state = resource_state;
    m_resource_state_isSet = true;
}

bool OAIExperimentProperties::is_resource_state_Set() const{
    return m_resource_state_isSet;
}

bool OAIExperimentProperties::is_resource_state_Valid() const{
    return m_resource_state_isValid;
}

QString OAIExperimentProperties::getScriptFileUri() const {
    return m_script_file_uri;
}
void OAIExperimentProperties::setScriptFileUri(const QString &script_file_uri) {
    m_script_file_uri = script_file_uri;
    m_script_file_uri_isSet = true;
}

bool OAIExperimentProperties::is_script_file_uri_Set() const{
    return m_script_file_uri_isSet;
}

bool OAIExperimentProperties::is_script_file_uri_Valid() const{
    return m_script_file_uri_isValid;
}

QString OAIExperimentProperties::getStatus() const {
    return m_status;
}
void OAIExperimentProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExperimentProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExperimentProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIExperimentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_a.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_b.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_file_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperimentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
