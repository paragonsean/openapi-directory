/**
 * NetworkExperiments
 * These are the Network Experiment APIs. 
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILatencyMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILatencyMetric::OAILatencyMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILatencyMetric::OAILatencyMetric() {
    this->initializeModel();
}

OAILatencyMetric::~OAILatencyMetric() {}

void OAILatencyMetric::initializeModel() {

    m_a_c_lower95_ci_isSet = false;
    m_a_c_lower95_ci_isValid = false;

    m_a_h_upper95_ci_isSet = false;
    m_a_h_upper95_ci_isValid = false;

    m_a_value_isSet = false;
    m_a_value_isValid = false;

    m_b_c_lower95_ci_isSet = false;
    m_b_c_lower95_ci_isValid = false;

    m_b_upper95_ci_isSet = false;
    m_b_upper95_ci_isValid = false;

    m_b_value_isSet = false;
    m_b_value_isValid = false;

    m_delta_isSet = false;
    m_delta_isValid = false;

    m_delta_percent_isSet = false;
    m_delta_percent_isValid = false;

    m_end_date_time_utc_isSet = false;
    m_end_date_time_utc_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAILatencyMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILatencyMetric::fromJsonObject(QJsonObject json) {

    m_a_c_lower95_ci_isValid = ::OpenAPI::fromJsonValue(m_a_c_lower95_ci, json[QString("aCLower95CI")]);
    m_a_c_lower95_ci_isSet = !json[QString("aCLower95CI")].isNull() && m_a_c_lower95_ci_isValid;

    m_a_h_upper95_ci_isValid = ::OpenAPI::fromJsonValue(m_a_h_upper95_ci, json[QString("aHUpper95CI")]);
    m_a_h_upper95_ci_isSet = !json[QString("aHUpper95CI")].isNull() && m_a_h_upper95_ci_isValid;

    m_a_value_isValid = ::OpenAPI::fromJsonValue(m_a_value, json[QString("aValue")]);
    m_a_value_isSet = !json[QString("aValue")].isNull() && m_a_value_isValid;

    m_b_c_lower95_ci_isValid = ::OpenAPI::fromJsonValue(m_b_c_lower95_ci, json[QString("bCLower95CI")]);
    m_b_c_lower95_ci_isSet = !json[QString("bCLower95CI")].isNull() && m_b_c_lower95_ci_isValid;

    m_b_upper95_ci_isValid = ::OpenAPI::fromJsonValue(m_b_upper95_ci, json[QString("bUpper95CI")]);
    m_b_upper95_ci_isSet = !json[QString("bUpper95CI")].isNull() && m_b_upper95_ci_isValid;

    m_b_value_isValid = ::OpenAPI::fromJsonValue(m_b_value, json[QString("bValue")]);
    m_b_value_isSet = !json[QString("bValue")].isNull() && m_b_value_isValid;

    m_delta_isValid = ::OpenAPI::fromJsonValue(m_delta, json[QString("delta")]);
    m_delta_isSet = !json[QString("delta")].isNull() && m_delta_isValid;

    m_delta_percent_isValid = ::OpenAPI::fromJsonValue(m_delta_percent, json[QString("deltaPercent")]);
    m_delta_percent_isSet = !json[QString("deltaPercent")].isNull() && m_delta_percent_isValid;

    m_end_date_time_utc_isValid = ::OpenAPI::fromJsonValue(m_end_date_time_utc, json[QString("endDateTimeUTC")]);
    m_end_date_time_utc_isSet = !json[QString("endDateTimeUTC")].isNull() && m_end_date_time_utc_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAILatencyMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILatencyMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_a_c_lower95_ci_isSet) {
        obj.insert(QString("aCLower95CI"), ::OpenAPI::toJsonValue(m_a_c_lower95_ci));
    }
    if (m_a_h_upper95_ci_isSet) {
        obj.insert(QString("aHUpper95CI"), ::OpenAPI::toJsonValue(m_a_h_upper95_ci));
    }
    if (m_a_value_isSet) {
        obj.insert(QString("aValue"), ::OpenAPI::toJsonValue(m_a_value));
    }
    if (m_b_c_lower95_ci_isSet) {
        obj.insert(QString("bCLower95CI"), ::OpenAPI::toJsonValue(m_b_c_lower95_ci));
    }
    if (m_b_upper95_ci_isSet) {
        obj.insert(QString("bUpper95CI"), ::OpenAPI::toJsonValue(m_b_upper95_ci));
    }
    if (m_b_value_isSet) {
        obj.insert(QString("bValue"), ::OpenAPI::toJsonValue(m_b_value));
    }
    if (m_delta_isSet) {
        obj.insert(QString("delta"), ::OpenAPI::toJsonValue(m_delta));
    }
    if (m_delta_percent_isSet) {
        obj.insert(QString("deltaPercent"), ::OpenAPI::toJsonValue(m_delta_percent));
    }
    if (m_end_date_time_utc_isSet) {
        obj.insert(QString("endDateTimeUTC"), ::OpenAPI::toJsonValue(m_end_date_time_utc));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

double OAILatencyMetric::getACLower95Ci() const {
    return m_a_c_lower95_ci;
}
void OAILatencyMetric::setACLower95Ci(const double &a_c_lower95_ci) {
    m_a_c_lower95_ci = a_c_lower95_ci;
    m_a_c_lower95_ci_isSet = true;
}

bool OAILatencyMetric::is_a_c_lower95_ci_Set() const{
    return m_a_c_lower95_ci_isSet;
}

bool OAILatencyMetric::is_a_c_lower95_ci_Valid() const{
    return m_a_c_lower95_ci_isValid;
}

double OAILatencyMetric::getAHUpper95Ci() const {
    return m_a_h_upper95_ci;
}
void OAILatencyMetric::setAHUpper95Ci(const double &a_h_upper95_ci) {
    m_a_h_upper95_ci = a_h_upper95_ci;
    m_a_h_upper95_ci_isSet = true;
}

bool OAILatencyMetric::is_a_h_upper95_ci_Set() const{
    return m_a_h_upper95_ci_isSet;
}

bool OAILatencyMetric::is_a_h_upper95_ci_Valid() const{
    return m_a_h_upper95_ci_isValid;
}

double OAILatencyMetric::getAValue() const {
    return m_a_value;
}
void OAILatencyMetric::setAValue(const double &a_value) {
    m_a_value = a_value;
    m_a_value_isSet = true;
}

bool OAILatencyMetric::is_a_value_Set() const{
    return m_a_value_isSet;
}

bool OAILatencyMetric::is_a_value_Valid() const{
    return m_a_value_isValid;
}

double OAILatencyMetric::getBCLower95Ci() const {
    return m_b_c_lower95_ci;
}
void OAILatencyMetric::setBCLower95Ci(const double &b_c_lower95_ci) {
    m_b_c_lower95_ci = b_c_lower95_ci;
    m_b_c_lower95_ci_isSet = true;
}

bool OAILatencyMetric::is_b_c_lower95_ci_Set() const{
    return m_b_c_lower95_ci_isSet;
}

bool OAILatencyMetric::is_b_c_lower95_ci_Valid() const{
    return m_b_c_lower95_ci_isValid;
}

double OAILatencyMetric::getBUpper95Ci() const {
    return m_b_upper95_ci;
}
void OAILatencyMetric::setBUpper95Ci(const double &b_upper95_ci) {
    m_b_upper95_ci = b_upper95_ci;
    m_b_upper95_ci_isSet = true;
}

bool OAILatencyMetric::is_b_upper95_ci_Set() const{
    return m_b_upper95_ci_isSet;
}

bool OAILatencyMetric::is_b_upper95_ci_Valid() const{
    return m_b_upper95_ci_isValid;
}

double OAILatencyMetric::getBValue() const {
    return m_b_value;
}
void OAILatencyMetric::setBValue(const double &b_value) {
    m_b_value = b_value;
    m_b_value_isSet = true;
}

bool OAILatencyMetric::is_b_value_Set() const{
    return m_b_value_isSet;
}

bool OAILatencyMetric::is_b_value_Valid() const{
    return m_b_value_isValid;
}

double OAILatencyMetric::getDelta() const {
    return m_delta;
}
void OAILatencyMetric::setDelta(const double &delta) {
    m_delta = delta;
    m_delta_isSet = true;
}

bool OAILatencyMetric::is_delta_Set() const{
    return m_delta_isSet;
}

bool OAILatencyMetric::is_delta_Valid() const{
    return m_delta_isValid;
}

double OAILatencyMetric::getDeltaPercent() const {
    return m_delta_percent;
}
void OAILatencyMetric::setDeltaPercent(const double &delta_percent) {
    m_delta_percent = delta_percent;
    m_delta_percent_isSet = true;
}

bool OAILatencyMetric::is_delta_percent_Set() const{
    return m_delta_percent_isSet;
}

bool OAILatencyMetric::is_delta_percent_Valid() const{
    return m_delta_percent_isValid;
}

QString OAILatencyMetric::getEndDateTimeUtc() const {
    return m_end_date_time_utc;
}
void OAILatencyMetric::setEndDateTimeUtc(const QString &end_date_time_utc) {
    m_end_date_time_utc = end_date_time_utc;
    m_end_date_time_utc_isSet = true;
}

bool OAILatencyMetric::is_end_date_time_utc_Set() const{
    return m_end_date_time_utc_isSet;
}

bool OAILatencyMetric::is_end_date_time_utc_Valid() const{
    return m_end_date_time_utc_isValid;
}

QString OAILatencyMetric::getName() const {
    return m_name;
}
void OAILatencyMetric::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILatencyMetric::is_name_Set() const{
    return m_name_isSet;
}

bool OAILatencyMetric::is_name_Valid() const{
    return m_name_isValid;
}

bool OAILatencyMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_a_c_lower95_ci_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_h_upper95_ci_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_c_lower95_ci_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_upper95_ci_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delta_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILatencyMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
