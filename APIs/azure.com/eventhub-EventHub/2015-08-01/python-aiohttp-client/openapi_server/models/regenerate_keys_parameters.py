# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegenerateKeysParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policykey: str=None):
        """RegenerateKeysParameters - a model defined in OpenAPI

        :param policykey: The policykey of this RegenerateKeysParameters.
        """
        self.openapi_types = {
            'policykey': str
        }

        self.attribute_map = {
            'policykey': 'policykey'
        }

        self._policykey = policykey

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegenerateKeysParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegenerateKeysParameters of this RegenerateKeysParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policykey(self):
        """Gets the policykey of this RegenerateKeysParameters.

        Key that needs to be regenerated.

        :return: The policykey of this RegenerateKeysParameters.
        :rtype: str
        """
        return self._policykey

    @policykey.setter
    def policykey(self, policykey):
        """Sets the policykey of this RegenerateKeysParameters.

        Key that needs to be regenerated.

        :param policykey: The policykey of this RegenerateKeysParameters.
        :type policykey: str
        """
        allowed_values = ["PrimaryKey", "SecondaryKey"]  # noqa: E501
        if policykey not in allowed_values:
            raise ValueError(
                "Invalid value for `policykey` ({0}), must be one of {1}"
                .format(policykey, allowed_values)
            )

        self._policykey = policykey
