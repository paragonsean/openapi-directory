# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventHubProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, message_retention_in_days: int=None, partition_count: int=None, partition_ids: List[str]=None, status: str=None, updated_at: datetime=None):
        """EventHubProperties - a model defined in OpenAPI

        :param created_at: The created_at of this EventHubProperties.
        :param message_retention_in_days: The message_retention_in_days of this EventHubProperties.
        :param partition_count: The partition_count of this EventHubProperties.
        :param partition_ids: The partition_ids of this EventHubProperties.
        :param status: The status of this EventHubProperties.
        :param updated_at: The updated_at of this EventHubProperties.
        """
        self.openapi_types = {
            'created_at': datetime,
            'message_retention_in_days': int,
            'partition_count': int,
            'partition_ids': List[str],
            'status': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'message_retention_in_days': 'messageRetentionInDays',
            'partition_count': 'partitionCount',
            'partition_ids': 'partitionIds',
            'status': 'status',
            'updated_at': 'updatedAt'
        }

        self._created_at = created_at
        self._message_retention_in_days = message_retention_in_days
        self._partition_count = partition_count
        self._partition_ids = partition_ids
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventHubProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventHubProperties of this EventHubProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this EventHubProperties.

        Exact time the Event Hub was created.

        :return: The created_at of this EventHubProperties.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EventHubProperties.

        Exact time the Event Hub was created.

        :param created_at: The created_at of this EventHubProperties.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def message_retention_in_days(self):
        """Gets the message_retention_in_days of this EventHubProperties.

        Number of days to retain the events for this Event Hub.

        :return: The message_retention_in_days of this EventHubProperties.
        :rtype: int
        """
        return self._message_retention_in_days

    @message_retention_in_days.setter
    def message_retention_in_days(self, message_retention_in_days):
        """Sets the message_retention_in_days of this EventHubProperties.

        Number of days to retain the events for this Event Hub.

        :param message_retention_in_days: The message_retention_in_days of this EventHubProperties.
        :type message_retention_in_days: int
        """

        self._message_retention_in_days = message_retention_in_days

    @property
    def partition_count(self):
        """Gets the partition_count of this EventHubProperties.

        Number of partitions created for the Event Hub.

        :return: The partition_count of this EventHubProperties.
        :rtype: int
        """
        return self._partition_count

    @partition_count.setter
    def partition_count(self, partition_count):
        """Sets the partition_count of this EventHubProperties.

        Number of partitions created for the Event Hub.

        :param partition_count: The partition_count of this EventHubProperties.
        :type partition_count: int
        """

        self._partition_count = partition_count

    @property
    def partition_ids(self):
        """Gets the partition_ids of this EventHubProperties.

        Current number of shards on the Event Hub.

        :return: The partition_ids of this EventHubProperties.
        :rtype: List[str]
        """
        return self._partition_ids

    @partition_ids.setter
    def partition_ids(self, partition_ids):
        """Sets the partition_ids of this EventHubProperties.

        Current number of shards on the Event Hub.

        :param partition_ids: The partition_ids of this EventHubProperties.
        :type partition_ids: List[str]
        """

        self._partition_ids = partition_ids

    @property
    def status(self):
        """Gets the status of this EventHubProperties.

        Enumerates the possible values for the status of the Event Hub.

        :return: The status of this EventHubProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventHubProperties.

        Enumerates the possible values for the status of the Event Hub.

        :param status: The status of this EventHubProperties.
        :type status: str
        """
        allowed_values = ["Active", "Disabled", "Restoring", "SendDisabled", "ReceiveDisabled", "Creating", "Deleting", "Renaming", "Unknown"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this EventHubProperties.

        The exact time the message was updated.

        :return: The updated_at of this EventHubProperties.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EventHubProperties.

        The exact time the message was updated.

        :param updated_at: The updated_at of this EventHubProperties.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
