/**
 * EventHubManagementClient
 * Azure Event Hubs client
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceListKeys.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceListKeys::OAIResourceListKeys(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceListKeys::OAIResourceListKeys() {
    this->initializeModel();
}

OAIResourceListKeys::~OAIResourceListKeys() {}

void OAIResourceListKeys::initializeModel() {

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_primary_connection_string_isSet = false;
    m_primary_connection_string_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_secondary_connection_string_isSet = false;
    m_secondary_connection_string_isValid = false;

    m_secondary_key_isSet = false;
    m_secondary_key_isValid = false;
}

void OAIResourceListKeys::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceListKeys::fromJsonObject(QJsonObject json) {

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("keyName")]);
    m_key_name_isSet = !json[QString("keyName")].isNull() && m_key_name_isValid;

    m_primary_connection_string_isValid = ::OpenAPI::fromJsonValue(m_primary_connection_string, json[QString("primaryConnectionString")]);
    m_primary_connection_string_isSet = !json[QString("primaryConnectionString")].isNull() && m_primary_connection_string_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;

    m_secondary_connection_string_isValid = ::OpenAPI::fromJsonValue(m_secondary_connection_string, json[QString("secondaryConnectionString")]);
    m_secondary_connection_string_isSet = !json[QString("secondaryConnectionString")].isNull() && m_secondary_connection_string_isValid;

    m_secondary_key_isValid = ::OpenAPI::fromJsonValue(m_secondary_key, json[QString("secondaryKey")]);
    m_secondary_key_isSet = !json[QString("secondaryKey")].isNull() && m_secondary_key_isValid;
}

QString OAIResourceListKeys::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceListKeys::asJsonObject() const {
    QJsonObject obj;
    if (m_key_name_isSet) {
        obj.insert(QString("keyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_primary_connection_string_isSet) {
        obj.insert(QString("primaryConnectionString"), ::OpenAPI::toJsonValue(m_primary_connection_string));
    }
    if (m_primary_key_isSet) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    if (m_secondary_connection_string_isSet) {
        obj.insert(QString("secondaryConnectionString"), ::OpenAPI::toJsonValue(m_secondary_connection_string));
    }
    if (m_secondary_key_isSet) {
        obj.insert(QString("secondaryKey"), ::OpenAPI::toJsonValue(m_secondary_key));
    }
    return obj;
}

QString OAIResourceListKeys::getKeyName() const {
    return m_key_name;
}
void OAIResourceListKeys::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAIResourceListKeys::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAIResourceListKeys::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QString OAIResourceListKeys::getPrimaryConnectionString() const {
    return m_primary_connection_string;
}
void OAIResourceListKeys::setPrimaryConnectionString(const QString &primary_connection_string) {
    m_primary_connection_string = primary_connection_string;
    m_primary_connection_string_isSet = true;
}

bool OAIResourceListKeys::is_primary_connection_string_Set() const{
    return m_primary_connection_string_isSet;
}

bool OAIResourceListKeys::is_primary_connection_string_Valid() const{
    return m_primary_connection_string_isValid;
}

QString OAIResourceListKeys::getPrimaryKey() const {
    return m_primary_key;
}
void OAIResourceListKeys::setPrimaryKey(const QString &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAIResourceListKeys::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAIResourceListKeys::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

QString OAIResourceListKeys::getSecondaryConnectionString() const {
    return m_secondary_connection_string;
}
void OAIResourceListKeys::setSecondaryConnectionString(const QString &secondary_connection_string) {
    m_secondary_connection_string = secondary_connection_string;
    m_secondary_connection_string_isSet = true;
}

bool OAIResourceListKeys::is_secondary_connection_string_Set() const{
    return m_secondary_connection_string_isSet;
}

bool OAIResourceListKeys::is_secondary_connection_string_Valid() const{
    return m_secondary_connection_string_isValid;
}

QString OAIResourceListKeys::getSecondaryKey() const {
    return m_secondary_key;
}
void OAIResourceListKeys::setSecondaryKey(const QString &secondary_key) {
    m_secondary_key = secondary_key;
    m_secondary_key_isSet = true;
}

bool OAIResourceListKeys::is_secondary_key_Set() const{
    return m_secondary_key_isSet;
}

bool OAIResourceListKeys::is_secondary_key_Valid() const{
    return m_secondary_key_isValid;
}

bool OAIResourceListKeys::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_connection_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_connection_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceListKeys::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
