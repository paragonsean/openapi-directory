/**
 * EventHubManagementClient
 * Azure Event Hubs client
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventHubsApi_H
#define OAI_OAIEventHubsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEventHubCreateOrUpdateParameters.h"
#include "OAIEventHubListResult.h"
#include "OAIEventHubResource.h"
#include "OAIRegenerateKeysParameters.h"
#include "OAIResourceListKeys.h"
#include "OAISharedAccessAuthorizationRuleCreateOrUpdateParameters.h"
#include "OAISharedAccessAuthorizationRuleListResult.h"
#include "OAISharedAccessAuthorizationRuleResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventHubsApi : public QObject {
    Q_OBJECT

public:
    OAIEventHubsApi(const int timeOut = 0);
    ~OAIEventHubsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIEventHubCreateOrUpdateParameters [required]
    */
    virtual void eventHubsCreateOrUpdate(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &api_version, const QString &subscription_id, const OAIEventHubCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISharedAccessAuthorizationRuleCreateOrUpdateParameters [required]
    */
    virtual void eventHubsCreateOrUpdateAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id, const OAISharedAccessAuthorizationRuleCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void eventHubsDelete(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void eventHubsDeleteAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void eventHubsGet(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void eventHubsGetAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void eventHubsListAll(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void eventHubsListAuthorizationRules(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void eventHubsListKeys(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void eventHubsPostAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRegenerateKeysParameters [required]
    */
    virtual void eventHubsRegenerateKeys(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id, const OAIRegenerateKeysParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void eventHubsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void eventHubsCreateOrUpdateAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void eventHubsDeleteCallback(OAIHttpRequestWorker *worker);
    void eventHubsDeleteAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void eventHubsGetCallback(OAIHttpRequestWorker *worker);
    void eventHubsGetAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void eventHubsListAllCallback(OAIHttpRequestWorker *worker);
    void eventHubsListAuthorizationRulesCallback(OAIHttpRequestWorker *worker);
    void eventHubsListKeysCallback(OAIHttpRequestWorker *worker);
    void eventHubsPostAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void eventHubsRegenerateKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void eventHubsCreateOrUpdateSignal(OAIEventHubResource summary);
    void eventHubsCreateOrUpdateAuthorizationRuleSignal(OAISharedAccessAuthorizationRuleResource summary);
    void eventHubsDeleteSignal();
    void eventHubsDeleteAuthorizationRuleSignal();
    void eventHubsGetSignal(OAIEventHubResource summary);
    void eventHubsGetAuthorizationRuleSignal(OAISharedAccessAuthorizationRuleResource summary);
    void eventHubsListAllSignal(OAIEventHubListResult summary);
    void eventHubsListAuthorizationRulesSignal(OAISharedAccessAuthorizationRuleListResult summary);
    void eventHubsListKeysSignal(OAIResourceListKeys summary);
    void eventHubsPostAuthorizationRuleSignal(OAISharedAccessAuthorizationRuleResource summary);
    void eventHubsRegenerateKeysSignal(OAIResourceListKeys summary);


    void eventHubsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEventHubResource summary);
    void eventHubsCreateOrUpdateAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISharedAccessAuthorizationRuleResource summary);
    void eventHubsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void eventHubsDeleteAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker);
    void eventHubsGetSignalFull(OAIHttpRequestWorker *worker, OAIEventHubResource summary);
    void eventHubsGetAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISharedAccessAuthorizationRuleResource summary);
    void eventHubsListAllSignalFull(OAIHttpRequestWorker *worker, OAIEventHubListResult summary);
    void eventHubsListAuthorizationRulesSignalFull(OAIHttpRequestWorker *worker, OAISharedAccessAuthorizationRuleListResult summary);
    void eventHubsListKeysSignalFull(OAIHttpRequestWorker *worker, OAIResourceListKeys summary);
    void eventHubsPostAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISharedAccessAuthorizationRuleResource summary);
    void eventHubsRegenerateKeysSignalFull(OAIHttpRequestWorker *worker, OAIResourceListKeys summary);

    Q_DECL_DEPRECATED_X("Use eventHubsCreateOrUpdateSignalError() instead")
    void eventHubsCreateOrUpdateSignalE(OAIEventHubResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsCreateOrUpdateSignalError(OAIEventHubResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsCreateOrUpdateAuthorizationRuleSignalError() instead")
    void eventHubsCreateOrUpdateAuthorizationRuleSignalE(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsCreateOrUpdateAuthorizationRuleSignalError(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsDeleteSignalError() instead")
    void eventHubsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsDeleteAuthorizationRuleSignalError() instead")
    void eventHubsDeleteAuthorizationRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsDeleteAuthorizationRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsGetSignalError() instead")
    void eventHubsGetSignalE(OAIEventHubResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsGetSignalError(OAIEventHubResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsGetAuthorizationRuleSignalError() instead")
    void eventHubsGetAuthorizationRuleSignalE(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsGetAuthorizationRuleSignalError(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsListAllSignalError() instead")
    void eventHubsListAllSignalE(OAIEventHubListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsListAllSignalError(OAIEventHubListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsListAuthorizationRulesSignalError() instead")
    void eventHubsListAuthorizationRulesSignalE(OAISharedAccessAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsListAuthorizationRulesSignalError(OAISharedAccessAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsListKeysSignalError() instead")
    void eventHubsListKeysSignalE(OAIResourceListKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsListKeysSignalError(OAIResourceListKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsPostAuthorizationRuleSignalError() instead")
    void eventHubsPostAuthorizationRuleSignalE(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsPostAuthorizationRuleSignalError(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsRegenerateKeysSignalError() instead")
    void eventHubsRegenerateKeysSignalE(OAIResourceListKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsRegenerateKeysSignalError(OAIResourceListKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use eventHubsCreateOrUpdateSignalErrorFull() instead")
    void eventHubsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsCreateOrUpdateAuthorizationRuleSignalErrorFull() instead")
    void eventHubsCreateOrUpdateAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsCreateOrUpdateAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsDeleteSignalErrorFull() instead")
    void eventHubsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsDeleteAuthorizationRuleSignalErrorFull() instead")
    void eventHubsDeleteAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsDeleteAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsGetSignalErrorFull() instead")
    void eventHubsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsGetAuthorizationRuleSignalErrorFull() instead")
    void eventHubsGetAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsGetAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsListAllSignalErrorFull() instead")
    void eventHubsListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsListAuthorizationRulesSignalErrorFull() instead")
    void eventHubsListAuthorizationRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsListAuthorizationRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsListKeysSignalErrorFull() instead")
    void eventHubsListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsPostAuthorizationRuleSignalErrorFull() instead")
    void eventHubsPostAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsPostAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubsRegenerateKeysSignalErrorFull() instead")
    void eventHubsRegenerateKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubsRegenerateKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
