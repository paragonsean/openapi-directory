/*
 * EventHubManagementClient
 * Azure Event Hubs client
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CheckNameAvailabilityParameter;
import org.openapitools.client.model.CheckNameAvailabilityResult;
import org.openapitools.client.model.NamespaceCreateOrUpdateParameters;
import org.openapitools.client.model.NamespaceListResult;
import org.openapitools.client.model.NamespaceResource;
import org.openapitools.client.model.NamespaceUpdateParameter;
import org.openapitools.client.model.RegenerateKeysParameters;
import org.openapitools.client.model.ResourceListKeys;
import org.openapitools.client.model.SharedAccessAuthorizationRuleCreateOrUpdateParameters;
import org.openapitools.client.model.SharedAccessAuthorizationRuleListResult;
import org.openapitools.client.model.SharedAccessAuthorizationRuleResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NamespacesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NamespacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NamespacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for namespacesCheckNameAvailability
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to check availability of the given Namespace name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> check availability returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesCheckNameAvailabilityCall(String apiVersion, String subscriptionId, CheckNameAvailabilityParameter parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.EventHub/CheckNameAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesCheckNameAvailabilityValidateBeforeCall(String apiVersion, String subscriptionId, CheckNameAvailabilityParameter parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesCheckNameAvailability(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesCheckNameAvailability(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling namespacesCheckNameAvailability(Async)");
        }

        return namespacesCheckNameAvailabilityCall(apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Check the give Namespace name availability.
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to check availability of the given Namespace name (required)
     * @return CheckNameAvailabilityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> check availability returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CheckNameAvailabilityResult namespacesCheckNameAvailability(String apiVersion, String subscriptionId, CheckNameAvailabilityParameter parameters) throws ApiException {
        ApiResponse<CheckNameAvailabilityResult> localVarResp = namespacesCheckNameAvailabilityWithHttpInfo(apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the give Namespace name availability.
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to check availability of the given Namespace name (required)
     * @return ApiResponse&lt;CheckNameAvailabilityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> check availability returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckNameAvailabilityResult> namespacesCheckNameAvailabilityWithHttpInfo(String apiVersion, String subscriptionId, CheckNameAvailabilityParameter parameters) throws ApiException {
        okhttp3.Call localVarCall = namespacesCheckNameAvailabilityValidateBeforeCall(apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the give Namespace name availability.
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters to check availability of the given Namespace name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> check availability returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesCheckNameAvailabilityAsync(String apiVersion, String subscriptionId, CheckNameAvailabilityParameter parameters, final ApiCallback<CheckNameAvailabilityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesCheckNameAvailabilityValidateBeforeCall(apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespacesCreateOrUpdate
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters for creating a namespace resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace successfully created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Namespace create request accepted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Namespace create or update request accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesCreateOrUpdateCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, NamespaceCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, NamespaceCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling namespacesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling namespacesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling namespacesCreateOrUpdate(Async)");
        }

        return namespacesCreateOrUpdateCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a namespace. Once created, this namespace&#39;s resource manifest is immutable. This operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters for creating a namespace resource. (required)
     * @return NamespaceResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace successfully created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Namespace create request accepted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Namespace create or update request accepted. </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceResource namespacesCreateOrUpdate(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, NamespaceCreateOrUpdateParameters parameters) throws ApiException {
        ApiResponse<NamespaceResource> localVarResp = namespacesCreateOrUpdateWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a namespace. Once created, this namespace&#39;s resource manifest is immutable. This operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters for creating a namespace resource. (required)
     * @return ApiResponse&lt;NamespaceResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace successfully created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Namespace create request accepted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Namespace create or update request accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceResource> namespacesCreateOrUpdateWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, NamespaceCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = namespacesCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<NamespaceResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a namespace. Once created, this namespace&#39;s resource manifest is immutable. This operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters for creating a namespace resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace successfully created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Namespace create request accepted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Namespace create or update request accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesCreateOrUpdateAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, NamespaceCreateOrUpdateParameters parameters, final ApiCallback<NamespaceResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<NamespaceResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespacesCreateOrUpdateAuthorizationRule
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access AuthorizationRule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesCreateOrUpdateAuthorizationRuleCall(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesCreateOrUpdateAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling namespacesCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling namespacesCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling namespacesCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling namespacesCreateOrUpdateAuthorizationRule(Async)");
        }

        return namespacesCreateOrUpdateAuthorizationRuleCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates an AuthorizationRule for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access AuthorizationRule. (required)
     * @return SharedAccessAuthorizationRuleResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule created </td><td>  -  </td></tr>
     </table>
     */
    public SharedAccessAuthorizationRuleResource namespacesCreateOrUpdateAuthorizationRule(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters) throws ApiException {
        ApiResponse<SharedAccessAuthorizationRuleResource> localVarResp = namespacesCreateOrUpdateAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an AuthorizationRule for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access AuthorizationRule. (required)
     * @return ApiResponse&lt;SharedAccessAuthorizationRuleResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedAccessAuthorizationRuleResource> namespacesCreateOrUpdateAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = namespacesCreateOrUpdateAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an AuthorizationRule for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access AuthorizationRule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesCreateOrUpdateAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters, final ApiCallback<SharedAccessAuthorizationRuleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesCreateOrUpdateAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespacesDelete
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Namespace delete request accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesDeleteCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesDeleteValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling namespacesDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling namespacesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesDelete(Async)");
        }

        return namespacesDeleteCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes an existing namespace. This operation also removes all associated resources under the namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Namespace delete request accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public void namespacesDelete(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        namespacesDeleteWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes an existing namespace. This operation also removes all associated resources under the namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Namespace delete request accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> namespacesDeleteWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = namespacesDeleteValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing namespace. This operation also removes all associated resources under the namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Namespace delete request accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesDeleteAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesDeleteValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespacesDeleteAuthorizationRule
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesDeleteAuthorizationRuleCall(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesDeleteAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling namespacesDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling namespacesDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling namespacesDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesDeleteAuthorizationRule(Async)");
        }

        return namespacesDeleteAuthorizationRuleCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes an AuthorizationRule for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public void namespacesDeleteAuthorizationRule(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        namespacesDeleteAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes an AuthorizationRule for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> namespacesDeleteAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = namespacesDeleteAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an AuthorizationRule for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesDeleteAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesDeleteAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespacesGet
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace returned successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Namespace update request accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesGetCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesGetValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling namespacesGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling namespacesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesGet(Async)");
        }

        return namespacesGetCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the description of the specified namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return NamespaceResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace returned successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Namespace update request accepted. </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceResource namespacesGet(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<NamespaceResource> localVarResp = namespacesGetWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the description of the specified namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;NamespaceResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace returned successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Namespace update request accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceResource> namespacesGetWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = namespacesGetValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<NamespaceResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the description of the specified namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace returned successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Namespace update request accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesGetAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback<NamespaceResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesGetValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<NamespaceResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespacesGetAuthorizationRule
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesGetAuthorizationRuleCall(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesGetAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling namespacesGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling namespacesGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling namespacesGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesGetAuthorizationRule(Async)");
        }

        return namespacesGetAuthorizationRuleCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets an AuthorizationRule for a Namespace by rule name.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SharedAccessAuthorizationRuleResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SharedAccessAuthorizationRuleResource namespacesGetAuthorizationRule(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SharedAccessAuthorizationRuleResource> localVarResp = namespacesGetAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an AuthorizationRule for a Namespace by rule name.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SharedAccessAuthorizationRuleResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedAccessAuthorizationRuleResource> namespacesGetAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = namespacesGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an AuthorizationRule for a Namespace by rule name.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesGetAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<SharedAccessAuthorizationRuleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespacesListAuthorizationRules
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesListAuthorizationRulesCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/AuthorizationRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesListAuthorizationRulesValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling namespacesListAuthorizationRules(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling namespacesListAuthorizationRules(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesListAuthorizationRules(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesListAuthorizationRules(Async)");
        }

        return namespacesListAuthorizationRulesCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a list of authorization rules for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SharedAccessAuthorizationRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public SharedAccessAuthorizationRuleListResult namespacesListAuthorizationRules(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SharedAccessAuthorizationRuleListResult> localVarResp = namespacesListAuthorizationRulesWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of authorization rules for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SharedAccessAuthorizationRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedAccessAuthorizationRuleListResult> namespacesListAuthorizationRulesWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = namespacesListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of authorization rules for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace AuthorizationRule successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesListAuthorizationRulesAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback<SharedAccessAuthorizationRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespacesListByResourceGroup
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespaces returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling namespacesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesListByResourceGroup(Async)");
        }

        return namespacesListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists the available Namespaces within a resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return NamespaceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespaces returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceListResult namespacesListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<NamespaceListResult> localVarResp = namespacesListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the available Namespaces within a resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;NamespaceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespaces returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceListResult> namespacesListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = namespacesListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<NamespaceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the available Namespaces within a resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespaces returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<NamespaceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<NamespaceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespacesListBySubscription
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespaces returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesListBySubscriptionCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.EventHub/namespaces"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesListBySubscriptionValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesListBySubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesListBySubscription(Async)");
        }

        return namespacesListBySubscriptionCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists all the available Namespaces within a subscription, irrespective of the resource groups.
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return NamespaceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespaces returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceListResult namespacesListBySubscription(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<NamespaceListResult> localVarResp = namespacesListBySubscriptionWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the available Namespaces within a subscription, irrespective of the resource groups.
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;NamespaceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespaces returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceListResult> namespacesListBySubscriptionWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = namespacesListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<NamespaceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the available Namespaces within a subscription, irrespective of the resource groups.
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespaces returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesListBySubscriptionAsync(String apiVersion, String subscriptionId, final ApiCallback<NamespaceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<NamespaceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespacesListKeys
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesListKeysCall(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/listKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesListKeysValidateBeforeCall(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling namespacesListKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling namespacesListKeys(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling namespacesListKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesListKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesListKeys(Async)");
        }

        return namespacesListKeysCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the primary and secondary connection strings for the Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ResourceListKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListKeys namespacesListKeys(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ResourceListKeys> localVarResp = namespacesListKeysWithHttpInfo(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the primary and secondary connection strings for the Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ResourceListKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListKeys> namespacesListKeysWithHttpInfo(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = namespacesListKeysValidateBeforeCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ResourceListKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the primary and secondary connection strings for the Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesListKeysAsync(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<ResourceListKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesListKeysValidateBeforeCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ResourceListKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespacesRegenerateKeys
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters required to regenerate the connection string. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings regenerated successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesRegenerateKeysCall(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesRegenerateKeysValidateBeforeCall(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling namespacesRegenerateKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling namespacesRegenerateKeys(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling namespacesRegenerateKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesRegenerateKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesRegenerateKeys(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling namespacesRegenerateKeys(Async)");
        }

        return namespacesRegenerateKeysCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Regenerates the primary or secondary connection strings for the specified Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters required to regenerate the connection string. (required)
     * @return ResourceListKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings regenerated successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListKeys namespacesRegenerateKeys(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters) throws ApiException {
        ApiResponse<ResourceListKeys> localVarResp = namespacesRegenerateKeysWithHttpInfo(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerates the primary or secondary connection strings for the specified Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters required to regenerate the connection string. (required)
     * @return ApiResponse&lt;ResourceListKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings regenerated successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListKeys> namespacesRegenerateKeysWithHttpInfo(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = namespacesRegenerateKeysValidateBeforeCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ResourceListKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates the primary or secondary connection strings for the specified Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters required to regenerate the connection string. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection strings regenerated successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesRegenerateKeysAsync(String resourceGroupName, String namespaceName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters, final ApiCallback<ResourceListKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesRegenerateKeysValidateBeforeCall(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ResourceListKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for namespacesUpdate
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters for updating a namespace resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Namespace update request accepted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Namespace create or update request accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesUpdateCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, NamespaceUpdateParameter parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namespacesUpdateValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, NamespaceUpdateParameter parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling namespacesUpdate(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling namespacesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling namespacesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling namespacesUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling namespacesUpdate(Async)");
        }

        return namespacesUpdateCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a namespace. Once created, this namespace&#39;s resource manifest is immutable. This operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters for updating a namespace resource. (required)
     * @return NamespaceResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Namespace update request accepted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Namespace create or update request accepted. </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceResource namespacesUpdate(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, NamespaceUpdateParameter parameters) throws ApiException {
        ApiResponse<NamespaceResource> localVarResp = namespacesUpdateWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a namespace. Once created, this namespace&#39;s resource manifest is immutable. This operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters for updating a namespace resource. (required)
     * @return ApiResponse&lt;NamespaceResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Namespace update request accepted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Namespace create or update request accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceResource> namespacesUpdateWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, NamespaceUpdateParameter parameters) throws ApiException {
        okhttp3.Call localVarCall = namespacesUpdateValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<NamespaceResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a namespace. Once created, this namespace&#39;s resource manifest is immutable. This operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters for updating a namespace resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Namespace successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Namespace update request accepted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Namespace create or update request accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namespacesUpdateAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, NamespaceUpdateParameter parameters, final ApiCallback<NamespaceResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = namespacesUpdateValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<NamespaceResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
