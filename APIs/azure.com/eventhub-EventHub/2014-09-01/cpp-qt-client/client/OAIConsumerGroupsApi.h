/**
 * EventHubManagementClient
 * Azure Event Hubs client
 *
 * The version of the OpenAPI document: 2014-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConsumerGroupsApi_H
#define OAI_OAIConsumerGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConsumerGroupCreateOrUpdateParameters.h"
#include "OAIConsumerGroupListResult.h"
#include "OAIConsumerGroupResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConsumerGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIConsumerGroupsApi(const int timeOut = 0);
    ~OAIConsumerGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  consumer_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIConsumerGroupCreateOrUpdateParameters [required]
    */
    virtual void consumerGroupsCreateOrUpdate(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &consumer_group_name, const QString &api_version, const QString &subscription_id, const OAIConsumerGroupCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  consumer_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void consumerGroupsDelete(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &consumer_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  consumer_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void consumerGroupsGet(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &consumer_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  event_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void consumerGroupsListAll(const QString &resource_group_name, const QString &namespace_name, const QString &event_hub_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void consumerGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void consumerGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void consumerGroupsGetCallback(OAIHttpRequestWorker *worker);
    void consumerGroupsListAllCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void consumerGroupsCreateOrUpdateSignal(OAIConsumerGroupResource summary);
    void consumerGroupsDeleteSignal();
    void consumerGroupsGetSignal(OAIConsumerGroupResource summary);
    void consumerGroupsListAllSignal(OAIConsumerGroupListResult summary);


    void consumerGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsumerGroupResource summary);
    void consumerGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void consumerGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIConsumerGroupResource summary);
    void consumerGroupsListAllSignalFull(OAIHttpRequestWorker *worker, OAIConsumerGroupListResult summary);

    Q_DECL_DEPRECATED_X("Use consumerGroupsCreateOrUpdateSignalError() instead")
    void consumerGroupsCreateOrUpdateSignalE(OAIConsumerGroupResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerGroupsCreateOrUpdateSignalError(OAIConsumerGroupResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerGroupsDeleteSignalError() instead")
    void consumerGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void consumerGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerGroupsGetSignalError() instead")
    void consumerGroupsGetSignalE(OAIConsumerGroupResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerGroupsGetSignalError(OAIConsumerGroupResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerGroupsListAllSignalError() instead")
    void consumerGroupsListAllSignalE(OAIConsumerGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerGroupsListAllSignalError(OAIConsumerGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use consumerGroupsCreateOrUpdateSignalErrorFull() instead")
    void consumerGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerGroupsDeleteSignalErrorFull() instead")
    void consumerGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerGroupsGetSignalErrorFull() instead")
    void consumerGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use consumerGroupsListAllSignalErrorFull() instead")
    void consumerGroupsListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerGroupsListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
