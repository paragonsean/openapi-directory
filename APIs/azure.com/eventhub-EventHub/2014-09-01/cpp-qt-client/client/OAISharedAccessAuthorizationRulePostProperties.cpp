/**
 * EventHubManagementClient
 * Azure Event Hubs client
 *
 * The version of the OpenAPI document: 2014-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharedAccessAuthorizationRulePostProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharedAccessAuthorizationRulePostProperties::OAISharedAccessAuthorizationRulePostProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharedAccessAuthorizationRulePostProperties::OAISharedAccessAuthorizationRulePostProperties() {
    this->initializeModel();
}

OAISharedAccessAuthorizationRulePostProperties::~OAISharedAccessAuthorizationRulePostProperties() {}

void OAISharedAccessAuthorizationRulePostProperties::initializeModel() {

    m_claim_type_isSet = false;
    m_claim_type_isValid = false;

    m_claim_value_isSet = false;
    m_claim_value_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_modified_time_isSet = false;
    m_modified_time_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_rights_isSet = false;
    m_rights_isValid = false;

    m_secondary_key_isSet = false;
    m_secondary_key_isValid = false;
}

void OAISharedAccessAuthorizationRulePostProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharedAccessAuthorizationRulePostProperties::fromJsonObject(QJsonObject json) {

    m_claim_type_isValid = ::OpenAPI::fromJsonValue(m_claim_type, json[QString("claimType")]);
    m_claim_type_isSet = !json[QString("claimType")].isNull() && m_claim_type_isValid;

    m_claim_value_isValid = ::OpenAPI::fromJsonValue(m_claim_value, json[QString("claimValue")]);
    m_claim_value_isSet = !json[QString("claimValue")].isNull() && m_claim_value_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("keyName")]);
    m_key_name_isSet = !json[QString("keyName")].isNull() && m_key_name_isValid;

    m_modified_time_isValid = ::OpenAPI::fromJsonValue(m_modified_time, json[QString("modifiedTime")]);
    m_modified_time_isSet = !json[QString("modifiedTime")].isNull() && m_modified_time_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;

    m_rights_isValid = ::OpenAPI::fromJsonValue(m_rights, json[QString("rights")]);
    m_rights_isSet = !json[QString("rights")].isNull() && m_rights_isValid;

    m_secondary_key_isValid = ::OpenAPI::fromJsonValue(m_secondary_key, json[QString("secondaryKey")]);
    m_secondary_key_isSet = !json[QString("secondaryKey")].isNull() && m_secondary_key_isValid;
}

QString OAISharedAccessAuthorizationRulePostProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharedAccessAuthorizationRulePostProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_claim_type_isSet) {
        obj.insert(QString("claimType"), ::OpenAPI::toJsonValue(m_claim_type));
    }
    if (m_claim_value_isSet) {
        obj.insert(QString("claimValue"), ::OpenAPI::toJsonValue(m_claim_value));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_key_name_isSet) {
        obj.insert(QString("keyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_modified_time_isSet) {
        obj.insert(QString("modifiedTime"), ::OpenAPI::toJsonValue(m_modified_time));
    }
    if (m_primary_key_isSet) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    if (m_rights.size() > 0) {
        obj.insert(QString("rights"), ::OpenAPI::toJsonValue(m_rights));
    }
    if (m_secondary_key_isSet) {
        obj.insert(QString("secondaryKey"), ::OpenAPI::toJsonValue(m_secondary_key));
    }
    return obj;
}

QString OAISharedAccessAuthorizationRulePostProperties::getClaimType() const {
    return m_claim_type;
}
void OAISharedAccessAuthorizationRulePostProperties::setClaimType(const QString &claim_type) {
    m_claim_type = claim_type;
    m_claim_type_isSet = true;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_claim_type_Set() const{
    return m_claim_type_isSet;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_claim_type_Valid() const{
    return m_claim_type_isValid;
}

QString OAISharedAccessAuthorizationRulePostProperties::getClaimValue() const {
    return m_claim_value;
}
void OAISharedAccessAuthorizationRulePostProperties::setClaimValue(const QString &claim_value) {
    m_claim_value = claim_value;
    m_claim_value_isSet = true;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_claim_value_Set() const{
    return m_claim_value_isSet;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_claim_value_Valid() const{
    return m_claim_value_isValid;
}

QDateTime OAISharedAccessAuthorizationRulePostProperties::getCreatedTime() const {
    return m_created_time;
}
void OAISharedAccessAuthorizationRulePostProperties::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAISharedAccessAuthorizationRulePostProperties::getKeyName() const {
    return m_key_name;
}
void OAISharedAccessAuthorizationRulePostProperties::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QDateTime OAISharedAccessAuthorizationRulePostProperties::getModifiedTime() const {
    return m_modified_time;
}
void OAISharedAccessAuthorizationRulePostProperties::setModifiedTime(const QDateTime &modified_time) {
    m_modified_time = modified_time;
    m_modified_time_isSet = true;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_modified_time_Set() const{
    return m_modified_time_isSet;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_modified_time_Valid() const{
    return m_modified_time_isValid;
}

QString OAISharedAccessAuthorizationRulePostProperties::getPrimaryKey() const {
    return m_primary_key;
}
void OAISharedAccessAuthorizationRulePostProperties::setPrimaryKey(const QString &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

QList<QString> OAISharedAccessAuthorizationRulePostProperties::getRights() const {
    return m_rights;
}
void OAISharedAccessAuthorizationRulePostProperties::setRights(const QList<QString> &rights) {
    m_rights = rights;
    m_rights_isSet = true;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_rights_Set() const{
    return m_rights_isSet;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_rights_Valid() const{
    return m_rights_isValid;
}

QString OAISharedAccessAuthorizationRulePostProperties::getSecondaryKey() const {
    return m_secondary_key;
}
void OAISharedAccessAuthorizationRulePostProperties::setSecondaryKey(const QString &secondary_key) {
    m_secondary_key = secondary_key;
    m_secondary_key_isSet = true;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_secondary_key_Set() const{
    return m_secondary_key_isSet;
}

bool OAISharedAccessAuthorizationRulePostProperties::is_secondary_key_Valid() const{
    return m_secondary_key_isValid;
}

bool OAISharedAccessAuthorizationRulePostProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claim_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharedAccessAuthorizationRulePostProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rights_isValid && true;
}

} // namespace OpenAPI
