/*
 * EventHubManagementClient
 * Azure Event Hubs client
 *
 * The version of the OpenAPI document: 2014-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EventHubCreateOrUpdateParameters;
import org.openapitools.client.model.EventHubListResult;
import org.openapitools.client.model.EventHubResource;
import org.openapitools.client.model.SharedAccessAuthorizationRuleCreateOrUpdateParameters;
import org.openapitools.client.model.SharedAccessAuthorizationRuleListResult;
import org.openapitools.client.model.SharedAccessAuthorizationRulePostResource;
import org.openapitools.client.model.SharedAccessAuthorizationRuleResource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventHubsApi
 */
@Disabled
public class EventHubsApiTest {

    private final EventHubsApi api = new EventHubsApi();

    /**
     * Creates or updates a new Event Hub as a nested resource within a Namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventHubsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String eventHubName = null;
        String apiVersion = null;
        String subscriptionId = null;
        EventHubCreateOrUpdateParameters parameters = null;
        EventHubResource response = api.eventHubsCreateOrUpdate(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates or updates an AuthorizationRule for the specified Event Hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventHubsCreateOrUpdateAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String eventHubName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters = null;
        SharedAccessAuthorizationRuleResource response = api.eventHubsCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes an Event Hub from the specified Namespace and resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventHubsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String eventHubName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.eventHubsDelete(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes an Event Hub AuthorizationRule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventHubsDeleteAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String eventHubName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.eventHubsDeleteAuthorizationRule(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets an Event Hubs description for the specified Event Hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventHubsGetTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String eventHubName = null;
        String apiVersion = null;
        String subscriptionId = null;
        EventHubResource response = api.eventHubsGet(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets an AuthorizationRule for an Event Hub by rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventHubsGetAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String eventHubName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleResource response = api.eventHubsGetAuthorizationRule(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all the Event Hubs in a Namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventHubsListAllTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        EventHubListResult response = api.eventHubsListAll(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the authorization rules for an Event Hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventHubsListAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String eventHubName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleListResult response = api.eventHubsListAuthorizationRules(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets an AuthorizationRule for an Event Hub by rule name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventHubsPostAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String eventHubName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRulePostResource response = api.eventHubsPostAuthorizationRule(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

}
