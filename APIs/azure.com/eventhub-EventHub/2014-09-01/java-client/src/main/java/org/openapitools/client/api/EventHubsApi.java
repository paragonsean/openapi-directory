/*
 * EventHubManagementClient
 * Azure Event Hubs client
 *
 * The version of the OpenAPI document: 2014-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EventHubCreateOrUpdateParameters;
import org.openapitools.client.model.EventHubListResult;
import org.openapitools.client.model.EventHubResource;
import org.openapitools.client.model.SharedAccessAuthorizationRuleCreateOrUpdateParameters;
import org.openapitools.client.model.SharedAccessAuthorizationRuleListResult;
import org.openapitools.client.model.SharedAccessAuthorizationRulePostResource;
import org.openapitools.client.model.SharedAccessAuthorizationRuleResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventHubsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventHubsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventHubsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventHubsCreateOrUpdate
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create an Event Hub resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639497.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsCreateOrUpdateCall(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, EventHubCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "eventHubName" + "}", localVarApiClient.escapeString(eventHubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, EventHubCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling eventHubsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'eventHubName' is set
        if (eventHubName == null) {
            throw new ApiException("Missing the required parameter 'eventHubName' when calling eventHubsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling eventHubsCreateOrUpdate(Async)");
        }

        return eventHubsCreateOrUpdateCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a new Event Hub as a nested resource within a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create an Event Hub resource. (required)
     * @return EventHubResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639497.aspx"> Documentation</a>
     */
    public EventHubResource eventHubsCreateOrUpdate(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, EventHubCreateOrUpdateParameters parameters) throws ApiException {
        ApiResponse<EventHubResource> localVarResp = eventHubsCreateOrUpdateWithHttpInfo(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a new Event Hub as a nested resource within a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create an Event Hub resource. (required)
     * @return ApiResponse&lt;EventHubResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639497.aspx"> Documentation</a>
     */
    public ApiResponse<EventHubResource> eventHubsCreateOrUpdateWithHttpInfo(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, EventHubCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = eventHubsCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<EventHubResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a new Event Hub as a nested resource within a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create an Event Hub resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639497.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsCreateOrUpdateAsync(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, EventHubCreateOrUpdateParameters parameters, final ApiCallback<EventHubResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubsCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<EventHubResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubsCreateOrUpdateAuthorizationRule
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access AuthorizationRule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706096.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsCreateOrUpdateAuthorizationRuleCall(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "eventHubName" + "}", localVarApiClient.escapeString(eventHubName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubsCreateOrUpdateAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling eventHubsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'eventHubName' is set
        if (eventHubName == null) {
            throw new ApiException("Missing the required parameter 'eventHubName' when calling eventHubsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling eventHubsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling eventHubsCreateOrUpdateAuthorizationRule(Async)");
        }

        return eventHubsCreateOrUpdateAuthorizationRuleCall(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates an AuthorizationRule for the specified Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access AuthorizationRule. (required)
     * @return SharedAccessAuthorizationRuleResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706096.aspx"> Documentation</a>
     */
    public SharedAccessAuthorizationRuleResource eventHubsCreateOrUpdateAuthorizationRule(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters) throws ApiException {
        ApiResponse<SharedAccessAuthorizationRuleResource> localVarResp = eventHubsCreateOrUpdateAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an AuthorizationRule for the specified Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access AuthorizationRule. (required)
     * @return ApiResponse&lt;SharedAccessAuthorizationRuleResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706096.aspx"> Documentation</a>
     */
    public ApiResponse<SharedAccessAuthorizationRuleResource> eventHubsCreateOrUpdateAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = eventHubsCreateOrUpdateAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an AuthorizationRule for the specified Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The shared access AuthorizationRule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706096.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsCreateOrUpdateAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters, final ApiCallback<SharedAccessAuthorizationRuleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubsCreateOrUpdateAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubsDelete
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639496.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsDeleteCall(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "eventHubName" + "}", localVarApiClient.escapeString(eventHubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubsDeleteValidateBeforeCall(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubsDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling eventHubsDelete(Async)");
        }

        // verify the required parameter 'eventHubName' is set
        if (eventHubName == null) {
            throw new ApiException("Missing the required parameter 'eventHubName' when calling eventHubsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubsDelete(Async)");
        }

        return eventHubsDeleteCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes an Event Hub from the specified Namespace and resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639496.aspx"> Documentation</a>
     */
    public void eventHubsDelete(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId) throws ApiException {
        eventHubsDeleteWithHttpInfo(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes an Event Hub from the specified Namespace and resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639496.aspx"> Documentation</a>
     */
    public ApiResponse<Void> eventHubsDeleteWithHttpInfo(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = eventHubsDeleteValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an Event Hub from the specified Namespace and resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639496.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsDeleteAsync(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubsDeleteValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubsDeleteAuthorizationRule
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706100.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsDeleteAuthorizationRuleCall(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "eventHubName" + "}", localVarApiClient.escapeString(eventHubName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubsDeleteAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling eventHubsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'eventHubName' is set
        if (eventHubName == null) {
            throw new ApiException("Missing the required parameter 'eventHubName' when calling eventHubsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling eventHubsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubsDeleteAuthorizationRule(Async)");
        }

        return eventHubsDeleteAuthorizationRuleCall(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes an Event Hub AuthorizationRule.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706100.aspx"> Documentation</a>
     */
    public void eventHubsDeleteAuthorizationRule(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        eventHubsDeleteAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes an Event Hub AuthorizationRule.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706100.aspx"> Documentation</a>
     */
    public ApiResponse<Void> eventHubsDeleteAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = eventHubsDeleteAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an Event Hub AuthorizationRule.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706100.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsDeleteAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubsDeleteAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubsGet
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the Event Hub description. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639501.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsGetCall(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "eventHubName" + "}", localVarApiClient.escapeString(eventHubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubsGetValidateBeforeCall(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubsGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling eventHubsGet(Async)");
        }

        // verify the required parameter 'eventHubName' is set
        if (eventHubName == null) {
            throw new ApiException("Missing the required parameter 'eventHubName' when calling eventHubsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubsGet(Async)");
        }

        return eventHubsGetCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets an Event Hubs description for the specified Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return EventHubResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the Event Hub description. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639501.aspx"> Documentation</a>
     */
    public EventHubResource eventHubsGet(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<EventHubResource> localVarResp = eventHubsGetWithHttpInfo(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an Event Hubs description for the specified Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;EventHubResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the Event Hub description. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639501.aspx"> Documentation</a>
     */
    public ApiResponse<EventHubResource> eventHubsGetWithHttpInfo(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = eventHubsGetValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<EventHubResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an Event Hubs description for the specified Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the Event Hub description. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639501.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsGetAsync(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, final ApiCallback<EventHubResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubsGetValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<EventHubResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubsGetAuthorizationRule
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706097.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsGetAuthorizationRuleCall(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "eventHubName" + "}", localVarApiClient.escapeString(eventHubName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubsGetAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling eventHubsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'eventHubName' is set
        if (eventHubName == null) {
            throw new ApiException("Missing the required parameter 'eventHubName' when calling eventHubsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling eventHubsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubsGetAuthorizationRule(Async)");
        }

        return eventHubsGetAuthorizationRuleCall(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets an AuthorizationRule for an Event Hub by rule name.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SharedAccessAuthorizationRuleResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706097.aspx"> Documentation</a>
     */
    public SharedAccessAuthorizationRuleResource eventHubsGetAuthorizationRule(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SharedAccessAuthorizationRuleResource> localVarResp = eventHubsGetAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an AuthorizationRule for an Event Hub by rule name.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SharedAccessAuthorizationRuleResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706097.aspx"> Documentation</a>
     */
    public ApiResponse<SharedAccessAuthorizationRuleResource> eventHubsGetAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = eventHubsGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an AuthorizationRule for an Event Hub by rule name.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706097.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsGetAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<SharedAccessAuthorizationRuleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubsGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubsListAll
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of Event Hubs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639493.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsListAllCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubsListAllValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubsListAll(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling eventHubsListAll(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubsListAll(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubsListAll(Async)");
        }

        return eventHubsListAllCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all the Event Hubs in a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return EventHubListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of Event Hubs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639493.aspx"> Documentation</a>
     */
    public EventHubListResult eventHubsListAll(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<EventHubListResult> localVarResp = eventHubsListAllWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the Event Hubs in a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;EventHubListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of Event Hubs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639493.aspx"> Documentation</a>
     */
    public ApiResponse<EventHubListResult> eventHubsListAllWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = eventHubsListAllValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<EventHubListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the Event Hubs in a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of Event Hubs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639493.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsListAllAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback<EventHubListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubsListAllValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<EventHubListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubsListAuthorizationRules
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubsListAuthorizationRulesCall(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "eventHubName" + "}", localVarApiClient.escapeString(eventHubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubsListAuthorizationRulesValidateBeforeCall(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling eventHubsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'eventHubName' is set
        if (eventHubName == null) {
            throw new ApiException("Missing the required parameter 'eventHubName' when calling eventHubsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubsListAuthorizationRules(Async)");
        }

        return eventHubsListAuthorizationRulesCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the authorization rules for an Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SharedAccessAuthorizationRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public SharedAccessAuthorizationRuleListResult eventHubsListAuthorizationRules(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SharedAccessAuthorizationRuleListResult> localVarResp = eventHubsListAuthorizationRulesWithHttpInfo(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the authorization rules for an Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SharedAccessAuthorizationRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedAccessAuthorizationRuleListResult> eventHubsListAuthorizationRulesWithHttpInfo(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = eventHubsListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the authorization rules for an Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule returned successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubsListAuthorizationRulesAsync(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, final ApiCallback<SharedAccessAuthorizationRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubsListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubsPostAuthorizationRule
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706097.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsPostAuthorizationRuleCall(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "eventHubName" + "}", localVarApiClient.escapeString(eventHubName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubsPostAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubsPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling eventHubsPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'eventHubName' is set
        if (eventHubName == null) {
            throw new ApiException("Missing the required parameter 'eventHubName' when calling eventHubsPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling eventHubsPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubsPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubsPostAuthorizationRule(Async)");
        }

        return eventHubsPostAuthorizationRuleCall(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets an AuthorizationRule for an Event Hub by rule name.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SharedAccessAuthorizationRulePostResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706097.aspx"> Documentation</a>
     */
    public SharedAccessAuthorizationRulePostResource eventHubsPostAuthorizationRule(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SharedAccessAuthorizationRulePostResource> localVarResp = eventHubsPostAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an AuthorizationRule for an Event Hub by rule name.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SharedAccessAuthorizationRulePostResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706097.aspx"> Documentation</a>
     */
    public ApiResponse<SharedAccessAuthorizationRulePostResource> eventHubsPostAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = eventHubsPostAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRulePostResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an AuthorizationRule for an Event Hub by rule name.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param authorizationRuleName The authorization rule name. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event Hub AuthorizationRule successfully returned. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt706097.aspx"> Documentation</a>
     */
    public okhttp3.Call eventHubsPostAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String eventHubName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<SharedAccessAuthorizationRulePostResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubsPostAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessAuthorizationRulePostResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
