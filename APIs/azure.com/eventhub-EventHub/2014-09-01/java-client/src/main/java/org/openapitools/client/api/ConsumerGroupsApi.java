/*
 * EventHubManagementClient
 * Azure Event Hubs client
 *
 * The version of the OpenAPI document: 2014-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConsumerGroupCreateOrUpdateParameters;
import org.openapitools.client.model.ConsumerGroupListResult;
import org.openapitools.client.model.ConsumerGroupResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConsumerGroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConsumerGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConsumerGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for consumerGroupsCreateOrUpdate
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param consumerGroupName The consumer group name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create or update a consumer group resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consumer group successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639498.aspx"> Documentation</a>
     */
    public okhttp3.Call consumerGroupsCreateOrUpdateCall(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId, ConsumerGroupCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "eventHubName" + "}", localVarApiClient.escapeString(eventHubName.toString()))
            .replace("{" + "consumerGroupName" + "}", localVarApiClient.escapeString(consumerGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerGroupsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId, ConsumerGroupCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling consumerGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling consumerGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'eventHubName' is set
        if (eventHubName == null) {
            throw new ApiException("Missing the required parameter 'eventHubName' when calling consumerGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'consumerGroupName' is set
        if (consumerGroupName == null) {
            throw new ApiException("Missing the required parameter 'consumerGroupName' when calling consumerGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling consumerGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling consumerGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling consumerGroupsCreateOrUpdate(Async)");
        }

        return consumerGroupsCreateOrUpdateCall(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates an Event Hubs consumer group as a nested resource within a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param consumerGroupName The consumer group name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create or update a consumer group resource. (required)
     * @return ConsumerGroupResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consumer group successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639498.aspx"> Documentation</a>
     */
    public ConsumerGroupResource consumerGroupsCreateOrUpdate(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId, ConsumerGroupCreateOrUpdateParameters parameters) throws ApiException {
        ApiResponse<ConsumerGroupResource> localVarResp = consumerGroupsCreateOrUpdateWithHttpInfo(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an Event Hubs consumer group as a nested resource within a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param consumerGroupName The consumer group name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create or update a consumer group resource. (required)
     * @return ApiResponse&lt;ConsumerGroupResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consumer group successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639498.aspx"> Documentation</a>
     */
    public ApiResponse<ConsumerGroupResource> consumerGroupsCreateOrUpdateWithHttpInfo(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId, ConsumerGroupCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = consumerGroupsCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ConsumerGroupResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an Event Hubs consumer group as a nested resource within a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param consumerGroupName The consumer group name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create or update a consumer group resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consumer group successfully created. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639498.aspx"> Documentation</a>
     */
    public okhttp3.Call consumerGroupsCreateOrUpdateAsync(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId, ConsumerGroupCreateOrUpdateParameters parameters, final ApiCallback<ConsumerGroupResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerGroupsCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ConsumerGroupResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerGroupsDelete
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param consumerGroupName The consumer group name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consumer group deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639491.aspx"> Documentation</a>
     */
    public okhttp3.Call consumerGroupsDeleteCall(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "eventHubName" + "}", localVarApiClient.escapeString(eventHubName.toString()))
            .replace("{" + "consumerGroupName" + "}", localVarApiClient.escapeString(consumerGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerGroupsDeleteValidateBeforeCall(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling consumerGroupsDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling consumerGroupsDelete(Async)");
        }

        // verify the required parameter 'eventHubName' is set
        if (eventHubName == null) {
            throw new ApiException("Missing the required parameter 'eventHubName' when calling consumerGroupsDelete(Async)");
        }

        // verify the required parameter 'consumerGroupName' is set
        if (consumerGroupName == null) {
            throw new ApiException("Missing the required parameter 'consumerGroupName' when calling consumerGroupsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling consumerGroupsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling consumerGroupsDelete(Async)");
        }

        return consumerGroupsDeleteCall(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a consumer group from the specified Event Hub and resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param consumerGroupName The consumer group name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consumer group deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639491.aspx"> Documentation</a>
     */
    public void consumerGroupsDelete(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId) throws ApiException {
        consumerGroupsDeleteWithHttpInfo(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a consumer group from the specified Event Hub and resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param consumerGroupName The consumer group name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consumer group deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639491.aspx"> Documentation</a>
     */
    public ApiResponse<Void> consumerGroupsDeleteWithHttpInfo(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = consumerGroupsDeleteValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a consumer group from the specified Event Hub and resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param consumerGroupName The consumer group name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consumer group deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639491.aspx"> Documentation</a>
     */
    public okhttp3.Call consumerGroupsDeleteAsync(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerGroupsDeleteValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerGroupsGet
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param consumerGroupName The consumer group name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the consumer group description. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639488.aspx"> Documentation</a>
     */
    public okhttp3.Call consumerGroupsGetCall(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "eventHubName" + "}", localVarApiClient.escapeString(eventHubName.toString()))
            .replace("{" + "consumerGroupName" + "}", localVarApiClient.escapeString(consumerGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerGroupsGetValidateBeforeCall(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling consumerGroupsGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling consumerGroupsGet(Async)");
        }

        // verify the required parameter 'eventHubName' is set
        if (eventHubName == null) {
            throw new ApiException("Missing the required parameter 'eventHubName' when calling consumerGroupsGet(Async)");
        }

        // verify the required parameter 'consumerGroupName' is set
        if (consumerGroupName == null) {
            throw new ApiException("Missing the required parameter 'consumerGroupName' when calling consumerGroupsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling consumerGroupsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling consumerGroupsGet(Async)");
        }

        return consumerGroupsGetCall(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a description for the specified consumer group.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param consumerGroupName The consumer group name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ConsumerGroupResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the consumer group description. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639488.aspx"> Documentation</a>
     */
    public ConsumerGroupResource consumerGroupsGet(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ConsumerGroupResource> localVarResp = consumerGroupsGetWithHttpInfo(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a description for the specified consumer group.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param consumerGroupName The consumer group name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ConsumerGroupResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the consumer group description. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639488.aspx"> Documentation</a>
     */
    public ApiResponse<ConsumerGroupResource> consumerGroupsGetWithHttpInfo(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = consumerGroupsGetValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ConsumerGroupResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a description for the specified consumer group.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param consumerGroupName The consumer group name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the consumer group description. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639488.aspx"> Documentation</a>
     */
    public okhttp3.Call consumerGroupsGetAsync(String resourceGroupName, String namespaceName, String eventHubName, String consumerGroupName, String apiVersion, String subscriptionId, final ApiCallback<ConsumerGroupResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerGroupsGetValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ConsumerGroupResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consumerGroupsListAll
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of consumer groups. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639503.aspx"> Documentation</a>
     */
    public okhttp3.Call consumerGroupsListAllCall(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "eventHubName" + "}", localVarApiClient.escapeString(eventHubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerGroupsListAllValidateBeforeCall(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling consumerGroupsListAll(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling consumerGroupsListAll(Async)");
        }

        // verify the required parameter 'eventHubName' is set
        if (eventHubName == null) {
            throw new ApiException("Missing the required parameter 'eventHubName' when calling consumerGroupsListAll(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling consumerGroupsListAll(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling consumerGroupsListAll(Async)");
        }

        return consumerGroupsListAllCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all the consumer groups in a Namespace. An empty feed is returned if no consumer group exists in the Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ConsumerGroupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of consumer groups. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639503.aspx"> Documentation</a>
     */
    public ConsumerGroupListResult consumerGroupsListAll(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ConsumerGroupListResult> localVarResp = consumerGroupsListAllWithHttpInfo(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the consumer groups in a Namespace. An empty feed is returned if no consumer group exists in the Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ConsumerGroupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of consumer groups. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639503.aspx"> Documentation</a>
     */
    public ApiResponse<ConsumerGroupListResult> consumerGroupsListAllWithHttpInfo(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = consumerGroupsListAllValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ConsumerGroupListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the consumer groups in a Namespace. An empty feed is returned if no consumer group exists in the Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription. (required)
     * @param namespaceName The Namespace name (required)
     * @param eventHubName The Event Hub name (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of consumer groups. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://msdn.microsoft.com/en-us/library/azure/mt639503.aspx"> Documentation</a>
     */
    public okhttp3.Call consumerGroupsListAllAsync(String resourceGroupName, String namespaceName, String eventHubName, String apiVersion, String subscriptionId, final ApiCallback<ConsumerGroupListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerGroupsListAllValidateBeforeCall(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ConsumerGroupListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
