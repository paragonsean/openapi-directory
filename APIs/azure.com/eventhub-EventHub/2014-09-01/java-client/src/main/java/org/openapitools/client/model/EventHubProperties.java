/*
 * EventHubManagementClient
 * Azure Event Hubs client
 *
 * The version of the OpenAPI document: 2014-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties supplied to the Create Or Update Event Hub operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:27.617629-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventHubProperties {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_MESSAGE_RETENTION_IN_DAYS = "messageRetentionInDays";
  @SerializedName(SERIALIZED_NAME_MESSAGE_RETENTION_IN_DAYS)
  private Long messageRetentionInDays;

  public static final String SERIALIZED_NAME_PARTITION_COUNT = "partitionCount";
  @SerializedName(SERIALIZED_NAME_PARTITION_COUNT)
  private Long partitionCount;

  public static final String SERIALIZED_NAME_PARTITION_IDS = "partitionIds";
  @SerializedName(SERIALIZED_NAME_PARTITION_IDS)
  private List<String> partitionIds = new ArrayList<>();

  /**
   * Enumerates the possible values for the status of the Event Hub.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("Active"),
    
    DISABLED("Disabled"),
    
    RESTORING("Restoring"),
    
    SEND_DISABLED("SendDisabled"),
    
    RECEIVE_DISABLED("ReceiveDisabled"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    RENAMING("Renaming"),
    
    UNKNOWN("Unknown");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public EventHubProperties() {
  }

  public EventHubProperties(
     OffsetDateTime createdAt, 
     List<String> partitionIds, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.partitionIds = partitionIds;
    this.updatedAt = updatedAt;
  }

  /**
   * Exact time the Event Hub was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public EventHubProperties messageRetentionInDays(Long messageRetentionInDays) {
    this.messageRetentionInDays = messageRetentionInDays;
    return this;
  }

  /**
   * Number of days to retain the events for this Event Hub.
   * @return messageRetentionInDays
   */
  @javax.annotation.Nullable
  public Long getMessageRetentionInDays() {
    return messageRetentionInDays;
  }

  public void setMessageRetentionInDays(Long messageRetentionInDays) {
    this.messageRetentionInDays = messageRetentionInDays;
  }


  public EventHubProperties partitionCount(Long partitionCount) {
    this.partitionCount = partitionCount;
    return this;
  }

  /**
   * Number of partitions created for the Event Hub.
   * @return partitionCount
   */
  @javax.annotation.Nullable
  public Long getPartitionCount() {
    return partitionCount;
  }

  public void setPartitionCount(Long partitionCount) {
    this.partitionCount = partitionCount;
  }


  /**
   * Current number of shards on the Event Hub.
   * @return partitionIds
   */
  @javax.annotation.Nullable
  public List<String> getPartitionIds() {
    return partitionIds;
  }



  public EventHubProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Enumerates the possible values for the status of the Event Hub.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  /**
   * The exact time the message was updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventHubProperties eventHubProperties = (EventHubProperties) o;
    return Objects.equals(this.createdAt, eventHubProperties.createdAt) &&
        Objects.equals(this.messageRetentionInDays, eventHubProperties.messageRetentionInDays) &&
        Objects.equals(this.partitionCount, eventHubProperties.partitionCount) &&
        Objects.equals(this.partitionIds, eventHubProperties.partitionIds) &&
        Objects.equals(this.status, eventHubProperties.status) &&
        Objects.equals(this.updatedAt, eventHubProperties.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, messageRetentionInDays, partitionCount, partitionIds, status, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventHubProperties {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    messageRetentionInDays: ").append(toIndentedString(messageRetentionInDays)).append("\n");
    sb.append("    partitionCount: ").append(toIndentedString(partitionCount)).append("\n");
    sb.append("    partitionIds: ").append(toIndentedString(partitionIds)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("messageRetentionInDays");
    openapiFields.add("partitionCount");
    openapiFields.add("partitionIds");
    openapiFields.add("status");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventHubProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventHubProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventHubProperties is not found in the empty JSON string", EventHubProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventHubProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventHubProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("partitionIds") != null && !jsonObj.get("partitionIds").isJsonNull() && !jsonObj.get("partitionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `partitionIds` to be an array in the JSON string but got `%s`", jsonObj.get("partitionIds").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventHubProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventHubProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventHubProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventHubProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EventHubProperties>() {
           @Override
           public void write(JsonWriter out, EventHubProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventHubProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventHubProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventHubProperties
   * @throws IOException if the JSON string is invalid with respect to EventHubProperties
   */
  public static EventHubProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventHubProperties.class);
  }

  /**
   * Convert an instance of EventHubProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

