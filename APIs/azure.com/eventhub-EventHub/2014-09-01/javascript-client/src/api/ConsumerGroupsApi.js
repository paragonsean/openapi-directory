/**
 * EventHubManagementClient
 * Azure Event Hubs client
 *
 * The version of the OpenAPI document: 2014-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConsumerGroupCreateOrUpdateParameters from '../model/ConsumerGroupCreateOrUpdateParameters';
import ConsumerGroupListResult from '../model/ConsumerGroupListResult';
import ConsumerGroupResource from '../model/ConsumerGroupResource';

/**
* ConsumerGroups service.
* @module api/ConsumerGroupsApi
* @version 2014-09-01
*/
export default class ConsumerGroupsApi {

    /**
    * Constructs a new ConsumerGroupsApi. 
    * @alias module:api/ConsumerGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the consumerGroupsCreateOrUpdate operation.
     * @callback module:api/ConsumerGroupsApi~consumerGroupsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsumerGroupResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an Event Hubs consumer group as a nested resource within a Namespace.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} eventHubName The Event Hub name
     * @param {String} consumerGroupName The consumer group name
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ConsumerGroupCreateOrUpdateParameters} parameters Parameters supplied to create or update a consumer group resource.
     * @param {module:api/ConsumerGroupsApi~consumerGroupsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsumerGroupResource}
     */
    consumerGroupsCreateOrUpdate(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling consumerGroupsCreateOrUpdate");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling consumerGroupsCreateOrUpdate");
      }
      // verify the required parameter 'eventHubName' is set
      if (eventHubName === undefined || eventHubName === null) {
        throw new Error("Missing the required parameter 'eventHubName' when calling consumerGroupsCreateOrUpdate");
      }
      // verify the required parameter 'consumerGroupName' is set
      if (consumerGroupName === undefined || consumerGroupName === null) {
        throw new Error("Missing the required parameter 'consumerGroupName' when calling consumerGroupsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling consumerGroupsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling consumerGroupsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling consumerGroupsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'eventHubName': eventHubName,
        'consumerGroupName': consumerGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsumerGroupResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the consumerGroupsDelete operation.
     * @callback module:api/ConsumerGroupsApi~consumerGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a consumer group from the specified Event Hub and resource group.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} eventHubName The Event Hub name
     * @param {String} consumerGroupName The consumer group name
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ConsumerGroupsApi~consumerGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    consumerGroupsDelete(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling consumerGroupsDelete");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling consumerGroupsDelete");
      }
      // verify the required parameter 'eventHubName' is set
      if (eventHubName === undefined || eventHubName === null) {
        throw new Error("Missing the required parameter 'eventHubName' when calling consumerGroupsDelete");
      }
      // verify the required parameter 'consumerGroupName' is set
      if (consumerGroupName === undefined || consumerGroupName === null) {
        throw new Error("Missing the required parameter 'consumerGroupName' when calling consumerGroupsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling consumerGroupsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling consumerGroupsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'eventHubName': eventHubName,
        'consumerGroupName': consumerGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the consumerGroupsGet operation.
     * @callback module:api/ConsumerGroupsApi~consumerGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsumerGroupResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a description for the specified consumer group.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} eventHubName The Event Hub name
     * @param {String} consumerGroupName The consumer group name
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ConsumerGroupsApi~consumerGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsumerGroupResource}
     */
    consumerGroupsGet(resourceGroupName, namespaceName, eventHubName, consumerGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling consumerGroupsGet");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling consumerGroupsGet");
      }
      // verify the required parameter 'eventHubName' is set
      if (eventHubName === undefined || eventHubName === null) {
        throw new Error("Missing the required parameter 'eventHubName' when calling consumerGroupsGet");
      }
      // verify the required parameter 'consumerGroupName' is set
      if (consumerGroupName === undefined || consumerGroupName === null) {
        throw new Error("Missing the required parameter 'consumerGroupName' when calling consumerGroupsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling consumerGroupsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling consumerGroupsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'eventHubName': eventHubName,
        'consumerGroupName': consumerGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsumerGroupResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the consumerGroupsListAll operation.
     * @callback module:api/ConsumerGroupsApi~consumerGroupsListAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsumerGroupListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the consumer groups in a Namespace. An empty feed is returned if no consumer group exists in the Namespace.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} eventHubName The Event Hub name
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ConsumerGroupsApi~consumerGroupsListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsumerGroupListResult}
     */
    consumerGroupsListAll(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling consumerGroupsListAll");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling consumerGroupsListAll");
      }
      // verify the required parameter 'eventHubName' is set
      if (eventHubName === undefined || eventHubName === null) {
        throw new Error("Missing the required parameter 'eventHubName' when calling consumerGroupsListAll");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling consumerGroupsListAll");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling consumerGroupsListAll");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'eventHubName': eventHubName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsumerGroupListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
