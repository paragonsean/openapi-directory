/**
 * EventHubManagementClient
 * Azure Event Hubs client
 *
 * The version of the OpenAPI document: 2014-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventHubCreateOrUpdateParameters from '../model/EventHubCreateOrUpdateParameters';
import EventHubListResult from '../model/EventHubListResult';
import EventHubResource from '../model/EventHubResource';
import SharedAccessAuthorizationRuleCreateOrUpdateParameters from '../model/SharedAccessAuthorizationRuleCreateOrUpdateParameters';
import SharedAccessAuthorizationRuleListResult from '../model/SharedAccessAuthorizationRuleListResult';
import SharedAccessAuthorizationRulePostResource from '../model/SharedAccessAuthorizationRulePostResource';
import SharedAccessAuthorizationRuleResource from '../model/SharedAccessAuthorizationRuleResource';

/**
* EventHubs service.
* @module api/EventHubsApi
* @version 2014-09-01
*/
export default class EventHubsApi {

    /**
    * Constructs a new EventHubsApi. 
    * @alias module:api/EventHubsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventHubsCreateOrUpdate operation.
     * @callback module:api/EventHubsApi~eventHubsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventHubResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a new Event Hub as a nested resource within a Namespace.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} eventHubName The Event Hub name
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/EventHubCreateOrUpdateParameters} parameters Parameters supplied to create an Event Hub resource.
     * @param {module:api/EventHubsApi~eventHubsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventHubResource}
     */
    eventHubsCreateOrUpdate(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubsCreateOrUpdate");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling eventHubsCreateOrUpdate");
      }
      // verify the required parameter 'eventHubName' is set
      if (eventHubName === undefined || eventHubName === null) {
        throw new Error("Missing the required parameter 'eventHubName' when calling eventHubsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling eventHubsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'eventHubName': eventHubName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventHubResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubsCreateOrUpdateAuthorizationRule operation.
     * @callback module:api/EventHubsApi~eventHubsCreateOrUpdateAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an AuthorizationRule for the specified Event Hub.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} eventHubName The Event Hub name
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/SharedAccessAuthorizationRuleCreateOrUpdateParameters} parameters The shared access AuthorizationRule.
     * @param {module:api/EventHubsApi~eventHubsCreateOrUpdateAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleResource}
     */
    eventHubsCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubsCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling eventHubsCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'eventHubName' is set
      if (eventHubName === undefined || eventHubName === null) {
        throw new Error("Missing the required parameter 'eventHubName' when calling eventHubsCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling eventHubsCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubsCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubsCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling eventHubsCreateOrUpdateAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'eventHubName': eventHubName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubsDelete operation.
     * @callback module:api/EventHubsApi~eventHubsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Event Hub from the specified Namespace and resource group.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} eventHubName The Event Hub name
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/EventHubsApi~eventHubsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventHubsDelete(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubsDelete");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling eventHubsDelete");
      }
      // verify the required parameter 'eventHubName' is set
      if (eventHubName === undefined || eventHubName === null) {
        throw new Error("Missing the required parameter 'eventHubName' when calling eventHubsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'eventHubName': eventHubName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubsDeleteAuthorizationRule operation.
     * @callback module:api/EventHubsApi~eventHubsDeleteAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Event Hub AuthorizationRule.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} eventHubName The Event Hub name
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/EventHubsApi~eventHubsDeleteAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventHubsDeleteAuthorizationRule(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubsDeleteAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling eventHubsDeleteAuthorizationRule");
      }
      // verify the required parameter 'eventHubName' is set
      if (eventHubName === undefined || eventHubName === null) {
        throw new Error("Missing the required parameter 'eventHubName' when calling eventHubsDeleteAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling eventHubsDeleteAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubsDeleteAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubsDeleteAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'eventHubName': eventHubName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubsGet operation.
     * @callback module:api/EventHubsApi~eventHubsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventHubResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Event Hubs description for the specified Event Hub.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} eventHubName The Event Hub name
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/EventHubsApi~eventHubsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventHubResource}
     */
    eventHubsGet(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubsGet");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling eventHubsGet");
      }
      // verify the required parameter 'eventHubName' is set
      if (eventHubName === undefined || eventHubName === null) {
        throw new Error("Missing the required parameter 'eventHubName' when calling eventHubsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'eventHubName': eventHubName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventHubResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubsGetAuthorizationRule operation.
     * @callback module:api/EventHubsApi~eventHubsGetAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an AuthorizationRule for an Event Hub by rule name.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} eventHubName The Event Hub name
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/EventHubsApi~eventHubsGetAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleResource}
     */
    eventHubsGetAuthorizationRule(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubsGetAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling eventHubsGetAuthorizationRule");
      }
      // verify the required parameter 'eventHubName' is set
      if (eventHubName === undefined || eventHubName === null) {
        throw new Error("Missing the required parameter 'eventHubName' when calling eventHubsGetAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling eventHubsGetAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubsGetAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubsGetAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'eventHubName': eventHubName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubsListAll operation.
     * @callback module:api/EventHubsApi~eventHubsListAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventHubListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the Event Hubs in a Namespace.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/EventHubsApi~eventHubsListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventHubListResult}
     */
    eventHubsListAll(resourceGroupName, namespaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubsListAll");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling eventHubsListAll");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubsListAll");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubsListAll");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventHubListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubsListAuthorizationRules operation.
     * @callback module:api/EventHubsApi~eventHubsListAuthorizationRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the authorization rules for an Event Hub.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} eventHubName The Event Hub name
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/EventHubsApi~eventHubsListAuthorizationRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleListResult}
     */
    eventHubsListAuthorizationRules(resourceGroupName, namespaceName, eventHubName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubsListAuthorizationRules");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling eventHubsListAuthorizationRules");
      }
      // verify the required parameter 'eventHubName' is set
      if (eventHubName === undefined || eventHubName === null) {
        throw new Error("Missing the required parameter 'eventHubName' when calling eventHubsListAuthorizationRules");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubsListAuthorizationRules");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubsListAuthorizationRules");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'eventHubName': eventHubName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubsPostAuthorizationRule operation.
     * @callback module:api/EventHubsApi~eventHubsPostAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRulePostResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an AuthorizationRule for an Event Hub by rule name.
     * @param {String} resourceGroupName Name of the resource group within the azure subscription.
     * @param {String} namespaceName The Namespace name
     * @param {String} eventHubName The Event Hub name
     * @param {String} authorizationRuleName The authorization rule name.
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/EventHubsApi~eventHubsPostAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRulePostResource}
     */
    eventHubsPostAuthorizationRule(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubsPostAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling eventHubsPostAuthorizationRule");
      }
      // verify the required parameter 'eventHubName' is set
      if (eventHubName === undefined || eventHubName === null) {
        throw new Error("Missing the required parameter 'eventHubName' when calling eventHubsPostAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling eventHubsPostAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubsPostAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubsPostAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'eventHubName': eventHubName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRulePostResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
