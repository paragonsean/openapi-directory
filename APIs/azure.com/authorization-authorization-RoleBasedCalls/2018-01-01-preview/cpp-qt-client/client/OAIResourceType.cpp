/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceType::OAIResourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceType::OAIResourceType() {
    this->initializeModel();
}

OAIResourceType::~OAIResourceType() {}

void OAIResourceType::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operations_isSet = false;
    m_operations_isValid = false;
}

void OAIResourceType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceType::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("operations")]);
    m_operations_isSet = !json[QString("operations")].isNull() && m_operations_isValid;
}

QString OAIResourceType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceType::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operations.size() > 0) {
        obj.insert(QString("operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    return obj;
}

QString OAIResourceType::getDisplayName() const {
    return m_display_name;
}
void OAIResourceType::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIResourceType::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIResourceType::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIResourceType::getName() const {
    return m_name;
}
void OAIResourceType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceType::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIProviderOperation> OAIResourceType::getOperations() const {
    return m_operations;
}
void OAIResourceType::setOperations(const QList<OAIProviderOperation> &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIResourceType::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIResourceType::is_operations_Valid() const{
    return m_operations_isValid;
}

bool OAIResourceType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
