/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRoleDefinitionsApi_H
#define OAI_OAIRoleDefinitionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRoleDefinition.h"
#include "OAIRoleDefinitionListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRoleDefinitionsApi : public QObject {
    Q_OBJECT

public:
    OAIRoleDefinitionsApi(const int timeOut = 0);
    ~OAIRoleDefinitionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  role_definition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  role_definition OAIRoleDefinition [required]
    */
    virtual void roleDefinitionsCreateOrUpdate(const QString &scope, const QString &role_definition_id, const QString &api_version, const OAIRoleDefinition &role_definition);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  role_definition_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void roleDefinitionsDelete(const QString &scope, const QString &role_definition_id, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  role_definition_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void roleDefinitionsGet(const QString &scope, const QString &role_definition_id, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void roleDefinitionsList(const QString &scope, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void roleDefinitionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void roleDefinitionsDeleteCallback(OAIHttpRequestWorker *worker);
    void roleDefinitionsGetCallback(OAIHttpRequestWorker *worker);
    void roleDefinitionsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void roleDefinitionsCreateOrUpdateSignal(OAIRoleDefinition summary);
    void roleDefinitionsDeleteSignal(OAIRoleDefinition summary);
    void roleDefinitionsGetSignal(OAIRoleDefinition summary);
    void roleDefinitionsListSignal(OAIRoleDefinitionListResult summary);


    void roleDefinitionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRoleDefinition summary);
    void roleDefinitionsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIRoleDefinition summary);
    void roleDefinitionsGetSignalFull(OAIHttpRequestWorker *worker, OAIRoleDefinition summary);
    void roleDefinitionsListSignalFull(OAIHttpRequestWorker *worker, OAIRoleDefinitionListResult summary);

    Q_DECL_DEPRECATED_X("Use roleDefinitionsCreateOrUpdateSignalError() instead")
    void roleDefinitionsCreateOrUpdateSignalE(OAIRoleDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleDefinitionsCreateOrUpdateSignalError(OAIRoleDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleDefinitionsDeleteSignalError() instead")
    void roleDefinitionsDeleteSignalE(OAIRoleDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleDefinitionsDeleteSignalError(OAIRoleDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleDefinitionsGetSignalError() instead")
    void roleDefinitionsGetSignalE(OAIRoleDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleDefinitionsGetSignalError(OAIRoleDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleDefinitionsListSignalError() instead")
    void roleDefinitionsListSignalE(OAIRoleDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleDefinitionsListSignalError(OAIRoleDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use roleDefinitionsCreateOrUpdateSignalErrorFull() instead")
    void roleDefinitionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleDefinitionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleDefinitionsDeleteSignalErrorFull() instead")
    void roleDefinitionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleDefinitionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleDefinitionsGetSignalErrorFull() instead")
    void roleDefinitionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleDefinitionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleDefinitionsListSignalErrorFull() instead")
    void roleDefinitionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleDefinitionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
