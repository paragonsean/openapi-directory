/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProviderOperationsMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProviderOperationsMetadata::OAIProviderOperationsMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProviderOperationsMetadata::OAIProviderOperationsMetadata() {
    this->initializeModel();
}

OAIProviderOperationsMetadata::~OAIProviderOperationsMetadata() {}

void OAIProviderOperationsMetadata::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operations_isSet = false;
    m_operations_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIProviderOperationsMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProviderOperationsMetadata::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("operations")]);
    m_operations_isSet = !json[QString("operations")].isNull() && m_operations_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("resourceTypes")]);
    m_resource_types_isSet = !json[QString("resourceTypes")].isNull() && m_resource_types_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIProviderOperationsMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProviderOperationsMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operations.size() > 0) {
        obj.insert(QString("operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    if (m_resource_types.size() > 0) {
        obj.insert(QString("resourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIProviderOperationsMetadata::getDisplayName() const {
    return m_display_name;
}
void OAIProviderOperationsMetadata::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIProviderOperationsMetadata::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIProviderOperationsMetadata::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIProviderOperationsMetadata::getId() const {
    return m_id;
}
void OAIProviderOperationsMetadata::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProviderOperationsMetadata::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProviderOperationsMetadata::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProviderOperationsMetadata::getName() const {
    return m_name;
}
void OAIProviderOperationsMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProviderOperationsMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProviderOperationsMetadata::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIProviderOperation> OAIProviderOperationsMetadata::getOperations() const {
    return m_operations;
}
void OAIProviderOperationsMetadata::setOperations(const QList<OAIProviderOperation> &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIProviderOperationsMetadata::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIProviderOperationsMetadata::is_operations_Valid() const{
    return m_operations_isValid;
}

QList<OAIResourceType> OAIProviderOperationsMetadata::getResourceTypes() const {
    return m_resource_types;
}
void OAIProviderOperationsMetadata::setResourceTypes(const QList<OAIResourceType> &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAIProviderOperationsMetadata::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAIProviderOperationsMetadata::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

QString OAIProviderOperationsMetadata::getType() const {
    return m_type;
}
void OAIProviderOperationsMetadata::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProviderOperationsMetadata::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProviderOperationsMetadata::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIProviderOperationsMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProviderOperationsMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
