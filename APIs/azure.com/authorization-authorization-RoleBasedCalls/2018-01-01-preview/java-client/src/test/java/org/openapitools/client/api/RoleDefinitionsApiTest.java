/*
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RoleDefinition;
import org.openapitools.client.model.RoleDefinitionListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RoleDefinitionsApi
 */
@Disabled
public class RoleDefinitionsApiTest {

    private final RoleDefinitionsApi api = new RoleDefinitionsApi();

    /**
     * Creates or updates a role definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleDefinitionsCreateOrUpdateTest() throws ApiException {
        String scope = null;
        String roleDefinitionId = null;
        String apiVersion = null;
        RoleDefinition roleDefinition = null;
        RoleDefinition response = api.roleDefinitionsCreateOrUpdate(scope, roleDefinitionId, apiVersion, roleDefinition);
        // TODO: test validations
    }

    /**
     * Deletes a role definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleDefinitionsDeleteTest() throws ApiException {
        String scope = null;
        String roleDefinitionId = null;
        String apiVersion = null;
        RoleDefinition response = api.roleDefinitionsDelete(scope, roleDefinitionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get role definition by name (GUID).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleDefinitionsGetTest() throws ApiException {
        String scope = null;
        String roleDefinitionId = null;
        String apiVersion = null;
        RoleDefinition response = api.roleDefinitionsGet(scope, roleDefinitionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleDefinitionsListTest() throws ApiException {
        String scope = null;
        String apiVersion = null;
        String $filter = null;
        RoleDefinitionListResult response = api.roleDefinitionsList(scope, apiVersion, $filter);
        // TODO: test validations
    }

}
