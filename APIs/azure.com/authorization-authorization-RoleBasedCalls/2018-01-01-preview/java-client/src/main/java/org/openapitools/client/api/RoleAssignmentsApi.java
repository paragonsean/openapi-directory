/*
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RoleAssignment;
import org.openapitools.client.model.RoleAssignmentCreateParameters;
import org.openapitools.client.model.RoleAssignmentListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoleAssignmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoleAssignmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoleAssignmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for roleAssignmentsCreate
     * @param scope The scope of the role assignment to create. The scope can be any REST resource instance. For example, use &#39;/subscriptions/{subscription-id}/&#39; for a subscription, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for a resource group, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}&#39; for a resource. (required)
     * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param parameters Parameters for the role assignment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsCreateCall(String scope, String roleAssignmentName, String apiVersion, RoleAssignmentCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "roleAssignmentName" + "}", localVarApiClient.escapeString(roleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsCreateValidateBeforeCall(String scope, String roleAssignmentName, String apiVersion, RoleAssignmentCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling roleAssignmentsCreate(Async)");
        }

        // verify the required parameter 'roleAssignmentName' is set
        if (roleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'roleAssignmentName' when calling roleAssignmentsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling roleAssignmentsCreate(Async)");
        }

        return roleAssignmentsCreateCall(scope, roleAssignmentName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates a role assignment.
     * @param scope The scope of the role assignment to create. The scope can be any REST resource instance. For example, use &#39;/subscriptions/{subscription-id}/&#39; for a subscription, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for a resource group, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}&#39; for a resource. (required)
     * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param parameters Parameters for the role assignment. (required)
     * @return RoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignment roleAssignmentsCreate(String scope, String roleAssignmentName, String apiVersion, RoleAssignmentCreateParameters parameters) throws ApiException {
        ApiResponse<RoleAssignment> localVarResp = roleAssignmentsCreateWithHttpInfo(scope, roleAssignmentName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a role assignment.
     * @param scope The scope of the role assignment to create. The scope can be any REST resource instance. For example, use &#39;/subscriptions/{subscription-id}/&#39; for a subscription, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for a resource group, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}&#39; for a resource. (required)
     * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param parameters Parameters for the role assignment. (required)
     * @return ApiResponse&lt;RoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignment> roleAssignmentsCreateWithHttpInfo(String scope, String roleAssignmentName, String apiVersion, RoleAssignmentCreateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsCreateValidateBeforeCall(scope, roleAssignmentName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a role assignment.
     * @param scope The scope of the role assignment to create. The scope can be any REST resource instance. For example, use &#39;/subscriptions/{subscription-id}/&#39; for a subscription, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for a resource group, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}&#39; for a resource. (required)
     * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param parameters Parameters for the role assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsCreateAsync(String scope, String roleAssignmentName, String apiVersion, RoleAssignmentCreateParameters parameters, final ApiCallback<RoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsCreateValidateBeforeCall(scope, roleAssignmentName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsCreateById
     * @param roleId The ID of the role assignment to create. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param parameters Parameters for the role assignment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsCreateByIdCall(String roleId, String apiVersion, RoleAssignmentCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/{roleId}"
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsCreateByIdValidateBeforeCall(String roleId, String apiVersion, RoleAssignmentCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling roleAssignmentsCreateById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsCreateById(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling roleAssignmentsCreateById(Async)");
        }

        return roleAssignmentsCreateByIdCall(roleId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates a role assignment by ID.
     * @param roleId The ID of the role assignment to create. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param parameters Parameters for the role assignment. (required)
     * @return RoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignment roleAssignmentsCreateById(String roleId, String apiVersion, RoleAssignmentCreateParameters parameters) throws ApiException {
        ApiResponse<RoleAssignment> localVarResp = roleAssignmentsCreateByIdWithHttpInfo(roleId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a role assignment by ID.
     * @param roleId The ID of the role assignment to create. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param parameters Parameters for the role assignment. (required)
     * @return ApiResponse&lt;RoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignment> roleAssignmentsCreateByIdWithHttpInfo(String roleId, String apiVersion, RoleAssignmentCreateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsCreateByIdValidateBeforeCall(roleId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a role assignment by ID.
     * @param roleId The ID of the role assignment to create. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param parameters Parameters for the role assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsCreateByIdAsync(String roleId, String apiVersion, RoleAssignmentCreateParameters parameters, final ApiCallback<RoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsCreateByIdValidateBeforeCall(roleId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsDelete
     * @param scope The scope of the role assignment to delete. (required)
     * @param roleAssignmentName The name of the role assignment to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsDeleteCall(String scope, String roleAssignmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "roleAssignmentName" + "}", localVarApiClient.escapeString(roleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsDeleteValidateBeforeCall(String scope, String roleAssignmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling roleAssignmentsDelete(Async)");
        }

        // verify the required parameter 'roleAssignmentName' is set
        if (roleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'roleAssignmentName' when calling roleAssignmentsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsDelete(Async)");
        }

        return roleAssignmentsDeleteCall(scope, roleAssignmentName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a role assignment.
     * @param scope The scope of the role assignment to delete. (required)
     * @param roleAssignmentName The name of the role assignment to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return RoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignment roleAssignmentsDelete(String scope, String roleAssignmentName, String apiVersion) throws ApiException {
        ApiResponse<RoleAssignment> localVarResp = roleAssignmentsDeleteWithHttpInfo(scope, roleAssignmentName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a role assignment.
     * @param scope The scope of the role assignment to delete. (required)
     * @param roleAssignmentName The name of the role assignment to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;RoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignment> roleAssignmentsDeleteWithHttpInfo(String scope, String roleAssignmentName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsDeleteValidateBeforeCall(scope, roleAssignmentName, apiVersion, null);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a role assignment.
     * @param scope The scope of the role assignment to delete. (required)
     * @param roleAssignmentName The name of the role assignment to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsDeleteAsync(String scope, String roleAssignmentName, String apiVersion, final ApiCallback<RoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsDeleteValidateBeforeCall(scope, roleAssignmentName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsDeleteById
     * @param roleId The ID of the role assignment to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsDeleteByIdCall(String roleId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{roleId}"
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsDeleteByIdValidateBeforeCall(String roleId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling roleAssignmentsDeleteById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsDeleteById(Async)");
        }

        return roleAssignmentsDeleteByIdCall(roleId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a role assignment.
     * @param roleId The ID of the role assignment to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return RoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignment roleAssignmentsDeleteById(String roleId, String apiVersion) throws ApiException {
        ApiResponse<RoleAssignment> localVarResp = roleAssignmentsDeleteByIdWithHttpInfo(roleId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a role assignment.
     * @param roleId The ID of the role assignment to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;RoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignment> roleAssignmentsDeleteByIdWithHttpInfo(String roleId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsDeleteByIdValidateBeforeCall(roleId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a role assignment.
     * @param roleId The ID of the role assignment to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsDeleteByIdAsync(String roleId, String apiVersion, final ApiCallback<RoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsDeleteByIdValidateBeforeCall(roleId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsGet
     * @param scope The scope of the role assignment. (required)
     * @param roleAssignmentName The name of the role assignment to get. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsGetCall(String scope, String roleAssignmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "roleAssignmentName" + "}", localVarApiClient.escapeString(roleAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsGetValidateBeforeCall(String scope, String roleAssignmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling roleAssignmentsGet(Async)");
        }

        // verify the required parameter 'roleAssignmentName' is set
        if (roleAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'roleAssignmentName' when calling roleAssignmentsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsGet(Async)");
        }

        return roleAssignmentsGetCall(scope, roleAssignmentName, apiVersion, _callback);

    }

    /**
     * 
     * Get the specified role assignment.
     * @param scope The scope of the role assignment. (required)
     * @param roleAssignmentName The name of the role assignment to get. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return RoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignment roleAssignmentsGet(String scope, String roleAssignmentName, String apiVersion) throws ApiException {
        ApiResponse<RoleAssignment> localVarResp = roleAssignmentsGetWithHttpInfo(scope, roleAssignmentName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the specified role assignment.
     * @param scope The scope of the role assignment. (required)
     * @param roleAssignmentName The name of the role assignment to get. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;RoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignment> roleAssignmentsGetWithHttpInfo(String scope, String roleAssignmentName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsGetValidateBeforeCall(scope, roleAssignmentName, apiVersion, null);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the specified role assignment.
     * @param scope The scope of the role assignment. (required)
     * @param roleAssignmentName The name of the role assignment to get. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsGetAsync(String scope, String roleAssignmentName, String apiVersion, final ApiCallback<RoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsGetValidateBeforeCall(scope, roleAssignmentName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsGetById
     * @param roleId The ID of the role assignment to get. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsGetByIdCall(String roleId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{roleId}"
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsGetByIdValidateBeforeCall(String roleId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling roleAssignmentsGetById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsGetById(Async)");
        }

        return roleAssignmentsGetByIdCall(roleId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a role assignment by ID.
     * @param roleId The ID of the role assignment to get. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return RoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignment roleAssignmentsGetById(String roleId, String apiVersion) throws ApiException {
        ApiResponse<RoleAssignment> localVarResp = roleAssignmentsGetByIdWithHttpInfo(roleId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a role assignment by ID.
     * @param roleId The ID of the role assignment to get. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;RoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignment> roleAssignmentsGetByIdWithHttpInfo(String roleId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsGetByIdValidateBeforeCall(roleId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a role assignment by ID.
     * @param roleId The ID of the role assignment to get. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsGetByIdAsync(String roleId, String apiVersion, final ApiCallback<RoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsGetByIdValidateBeforeCall(roleId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsList
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsListCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleAssignments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsListValidateBeforeCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling roleAssignmentsList(Async)");
        }

        return roleAssignmentsListCall(apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Gets all role assignments for the subscription.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @return RoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignmentListResult roleAssignmentsList(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<RoleAssignmentListResult> localVarResp = roleAssignmentsListWithHttpInfo(apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all role assignments for the subscription.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @return ApiResponse&lt;RoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignmentListResult> roleAssignmentsListWithHttpInfo(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsListValidateBeforeCall(apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<RoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all role assignments for the subscription.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsListAsync(String apiVersion, String subscriptionId, String $filter, final ApiCallback<RoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsListValidateBeforeCall(apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsListForResource
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource. (required)
     * @param resourceName The name of the resource to get role assignments for. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsListForResourceCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/roleAssignments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderNamespace" + "}", localVarApiClient.escapeString(resourceProviderNamespace.toString()))
            .replace("{" + "parentResourcePath" + "}", localVarApiClient.escapeString(parentResourcePath.toString()))
            .replace("{" + "resourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsListForResourceValidateBeforeCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling roleAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'resourceProviderNamespace' is set
        if (resourceProviderNamespace == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderNamespace' when calling roleAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'parentResourcePath' is set
        if (parentResourcePath == null) {
            throw new ApiException("Missing the required parameter 'parentResourcePath' when calling roleAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling roleAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling roleAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling roleAssignmentsListForResource(Async)");
        }

        return roleAssignmentsListForResourceCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Gets role assignments for a resource.
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource. (required)
     * @param resourceName The name of the resource to get role assignments for. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @return RoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignmentListResult roleAssignmentsListForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<RoleAssignmentListResult> localVarResp = roleAssignmentsListForResourceWithHttpInfo(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets role assignments for a resource.
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource. (required)
     * @param resourceName The name of the resource to get role assignments for. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @return ApiResponse&lt;RoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignmentListResult> roleAssignmentsListForResourceWithHttpInfo(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsListForResourceValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<RoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets role assignments for a resource.
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource. (required)
     * @param resourceName The name of the resource to get role assignments for. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsListForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter, final ApiCallback<RoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsListForResourceValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsListForResourceGroup
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsListForResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/roleAssignments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsListForResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling roleAssignmentsListForResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsListForResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling roleAssignmentsListForResourceGroup(Async)");
        }

        return roleAssignmentsListForResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Gets role assignments for a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @return RoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignmentListResult roleAssignmentsListForResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<RoleAssignmentListResult> localVarResp = roleAssignmentsListForResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets role assignments for a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @return ApiResponse&lt;RoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignmentListResult> roleAssignmentsListForResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsListForResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<RoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets role assignments for a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsListForResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, final ApiCallback<RoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsListForResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsListForScope
     * @param scope The scope of the role assignments. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsListForScopeCall(String scope, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/roleAssignments"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsListForScopeValidateBeforeCall(String scope, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling roleAssignmentsListForScope(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsListForScope(Async)");
        }

        return roleAssignmentsListForScopeCall(scope, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Gets role assignments for a scope.
     * @param scope The scope of the role assignments. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @return RoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignmentListResult roleAssignmentsListForScope(String scope, String apiVersion, String $filter) throws ApiException {
        ApiResponse<RoleAssignmentListResult> localVarResp = roleAssignmentsListForScopeWithHttpInfo(scope, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets role assignments for a scope.
     * @param scope The scope of the role assignments. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @return ApiResponse&lt;RoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignmentListResult> roleAssignmentsListForScopeWithHttpInfo(String scope, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsListForScopeValidateBeforeCall(scope, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<RoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets role assignments for a scope.
     * @param scope The scope of the role assignments. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all role assignments at or above the scope. Use $filter&#x3D;principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsListForScopeAsync(String scope, String apiVersion, String $filter, final ApiCallback<RoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsListForScopeValidateBeforeCall(scope, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
