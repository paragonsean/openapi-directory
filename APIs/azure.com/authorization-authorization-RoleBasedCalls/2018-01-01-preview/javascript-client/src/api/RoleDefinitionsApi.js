/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RoleDefinition from '../model/RoleDefinition';
import RoleDefinitionListResult from '../model/RoleDefinitionListResult';

/**
* RoleDefinitions service.
* @module api/RoleDefinitionsApi
* @version 2018-01-01-preview
*/
export default class RoleDefinitionsApi {

    /**
    * Constructs a new RoleDefinitionsApi. 
    * @alias module:api/RoleDefinitionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the roleDefinitionsCreateOrUpdate operation.
     * @callback module:api/RoleDefinitionsApi~roleDefinitionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a role definition.
     * @param {String} scope The scope of the role definition.
     * @param {String} roleDefinitionId The ID of the role definition.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/RoleDefinition} roleDefinition The values for the role definition.
     * @param {module:api/RoleDefinitionsApi~roleDefinitionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleDefinition}
     */
    roleDefinitionsCreateOrUpdate(scope, roleDefinitionId, apiVersion, roleDefinition, callback) {
      let postBody = roleDefinition;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling roleDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'roleDefinitionId' is set
      if (roleDefinitionId === undefined || roleDefinitionId === null) {
        throw new Error("Missing the required parameter 'roleDefinitionId' when calling roleDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'roleDefinition' is set
      if (roleDefinition === undefined || roleDefinition === null) {
        throw new Error("Missing the required parameter 'roleDefinition' when calling roleDefinitionsCreateOrUpdate");
      }

      let pathParams = {
        'scope': scope,
        'roleDefinitionId': roleDefinitionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoleDefinition;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleDefinitionsDelete operation.
     * @callback module:api/RoleDefinitionsApi~roleDefinitionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a role definition.
     * @param {String} scope The scope of the role definition.
     * @param {String} roleDefinitionId The ID of the role definition to delete.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/RoleDefinitionsApi~roleDefinitionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleDefinition}
     */
    roleDefinitionsDelete(scope, roleDefinitionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling roleDefinitionsDelete");
      }
      // verify the required parameter 'roleDefinitionId' is set
      if (roleDefinitionId === undefined || roleDefinitionId === null) {
        throw new Error("Missing the required parameter 'roleDefinitionId' when calling roleDefinitionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleDefinitionsDelete");
      }

      let pathParams = {
        'scope': scope,
        'roleDefinitionId': roleDefinitionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleDefinition;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleDefinitionsGet operation.
     * @callback module:api/RoleDefinitionsApi~roleDefinitionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get role definition by name (GUID).
     * @param {String} scope The scope of the role definition.
     * @param {String} roleDefinitionId The ID of the role definition.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/RoleDefinitionsApi~roleDefinitionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleDefinition}
     */
    roleDefinitionsGet(scope, roleDefinitionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling roleDefinitionsGet");
      }
      // verify the required parameter 'roleDefinitionId' is set
      if (roleDefinitionId === undefined || roleDefinitionId === null) {
        throw new Error("Missing the required parameter 'roleDefinitionId' when calling roleDefinitionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleDefinitionsGet");
      }

      let pathParams = {
        'scope': scope,
        'roleDefinitionId': roleDefinitionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleDefinition;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleDefinitionsList operation.
     * @callback module:api/RoleDefinitionsApi~roleDefinitionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleDefinitionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all role definitions that are applicable at scope and above.
     * @param {String} scope The scope of the role definition.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well.
     * @param {module:api/RoleDefinitionsApi~roleDefinitionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleDefinitionListResult}
     */
    roleDefinitionsList(scope, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling roleDefinitionsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleDefinitionsList");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleDefinitionListResult;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/roleDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
