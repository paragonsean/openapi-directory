# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vulnerability_assessment_recurring_scans_properties import VulnerabilityAssessmentRecurringScansProperties
from openapi_server import util


class DatabaseVulnerabilityAssessmentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recurring_scans: VulnerabilityAssessmentRecurringScansProperties=None, storage_account_access_key: str=None, storage_container_path: str=None, storage_container_sas_key: str=None):
        """DatabaseVulnerabilityAssessmentProperties - a model defined in OpenAPI

        :param recurring_scans: The recurring_scans of this DatabaseVulnerabilityAssessmentProperties.
        :param storage_account_access_key: The storage_account_access_key of this DatabaseVulnerabilityAssessmentProperties.
        :param storage_container_path: The storage_container_path of this DatabaseVulnerabilityAssessmentProperties.
        :param storage_container_sas_key: The storage_container_sas_key of this DatabaseVulnerabilityAssessmentProperties.
        """
        self.openapi_types = {
            'recurring_scans': VulnerabilityAssessmentRecurringScansProperties,
            'storage_account_access_key': str,
            'storage_container_path': str,
            'storage_container_sas_key': str
        }

        self.attribute_map = {
            'recurring_scans': 'recurringScans',
            'storage_account_access_key': 'storageAccountAccessKey',
            'storage_container_path': 'storageContainerPath',
            'storage_container_sas_key': 'storageContainerSasKey'
        }

        self._recurring_scans = recurring_scans
        self._storage_account_access_key = storage_account_access_key
        self._storage_container_path = storage_container_path
        self._storage_container_sas_key = storage_container_sas_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseVulnerabilityAssessmentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseVulnerabilityAssessmentProperties of this DatabaseVulnerabilityAssessmentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recurring_scans(self):
        """Gets the recurring_scans of this DatabaseVulnerabilityAssessmentProperties.


        :return: The recurring_scans of this DatabaseVulnerabilityAssessmentProperties.
        :rtype: VulnerabilityAssessmentRecurringScansProperties
        """
        return self._recurring_scans

    @recurring_scans.setter
    def recurring_scans(self, recurring_scans):
        """Sets the recurring_scans of this DatabaseVulnerabilityAssessmentProperties.


        :param recurring_scans: The recurring_scans of this DatabaseVulnerabilityAssessmentProperties.
        :type recurring_scans: VulnerabilityAssessmentRecurringScansProperties
        """

        self._recurring_scans = recurring_scans

    @property
    def storage_account_access_key(self):
        """Gets the storage_account_access_key of this DatabaseVulnerabilityAssessmentProperties.

        Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.

        :return: The storage_account_access_key of this DatabaseVulnerabilityAssessmentProperties.
        :rtype: str
        """
        return self._storage_account_access_key

    @storage_account_access_key.setter
    def storage_account_access_key(self, storage_account_access_key):
        """Sets the storage_account_access_key of this DatabaseVulnerabilityAssessmentProperties.

        Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.

        :param storage_account_access_key: The storage_account_access_key of this DatabaseVulnerabilityAssessmentProperties.
        :type storage_account_access_key: str
        """

        self._storage_account_access_key = storage_account_access_key

    @property
    def storage_container_path(self):
        """Gets the storage_container_path of this DatabaseVulnerabilityAssessmentProperties.

        A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set

        :return: The storage_container_path of this DatabaseVulnerabilityAssessmentProperties.
        :rtype: str
        """
        return self._storage_container_path

    @storage_container_path.setter
    def storage_container_path(self, storage_container_path):
        """Sets the storage_container_path of this DatabaseVulnerabilityAssessmentProperties.

        A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set

        :param storage_container_path: The storage_container_path of this DatabaseVulnerabilityAssessmentProperties.
        :type storage_container_path: str
        """

        self._storage_container_path = storage_container_path

    @property
    def storage_container_sas_key(self):
        """Gets the storage_container_sas_key of this DatabaseVulnerabilityAssessmentProperties.

        A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.

        :return: The storage_container_sas_key of this DatabaseVulnerabilityAssessmentProperties.
        :rtype: str
        """
        return self._storage_container_sas_key

    @storage_container_sas_key.setter
    def storage_container_sas_key(self, storage_container_sas_key):
        """Sets the storage_container_sas_key of this DatabaseVulnerabilityAssessmentProperties.

        A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.

        :param storage_container_sas_key: The storage_container_sas_key of this DatabaseVulnerabilityAssessmentProperties.
        :type storage_container_sas_key: str
        """

        self._storage_container_sas_key = storage_container_sas_key
