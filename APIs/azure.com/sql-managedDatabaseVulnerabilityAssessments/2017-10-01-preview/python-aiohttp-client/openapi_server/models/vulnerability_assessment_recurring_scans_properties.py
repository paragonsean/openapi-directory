# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VulnerabilityAssessmentRecurringScansProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_subscription_admins: bool=True, emails: List[str]=None, is_enabled: bool=None):
        """VulnerabilityAssessmentRecurringScansProperties - a model defined in OpenAPI

        :param email_subscription_admins: The email_subscription_admins of this VulnerabilityAssessmentRecurringScansProperties.
        :param emails: The emails of this VulnerabilityAssessmentRecurringScansProperties.
        :param is_enabled: The is_enabled of this VulnerabilityAssessmentRecurringScansProperties.
        """
        self.openapi_types = {
            'email_subscription_admins': bool,
            'emails': List[str],
            'is_enabled': bool
        }

        self.attribute_map = {
            'email_subscription_admins': 'emailSubscriptionAdmins',
            'emails': 'emails',
            'is_enabled': 'isEnabled'
        }

        self._email_subscription_admins = email_subscription_admins
        self._emails = emails
        self._is_enabled = is_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VulnerabilityAssessmentRecurringScansProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VulnerabilityAssessmentRecurringScansProperties of this VulnerabilityAssessmentRecurringScansProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_subscription_admins(self):
        """Gets the email_subscription_admins of this VulnerabilityAssessmentRecurringScansProperties.

        Specifies that the schedule scan notification will be is sent to the subscription administrators.

        :return: The email_subscription_admins of this VulnerabilityAssessmentRecurringScansProperties.
        :rtype: bool
        """
        return self._email_subscription_admins

    @email_subscription_admins.setter
    def email_subscription_admins(self, email_subscription_admins):
        """Sets the email_subscription_admins of this VulnerabilityAssessmentRecurringScansProperties.

        Specifies that the schedule scan notification will be is sent to the subscription administrators.

        :param email_subscription_admins: The email_subscription_admins of this VulnerabilityAssessmentRecurringScansProperties.
        :type email_subscription_admins: bool
        """

        self._email_subscription_admins = email_subscription_admins

    @property
    def emails(self):
        """Gets the emails of this VulnerabilityAssessmentRecurringScansProperties.

        Specifies an array of e-mail addresses to which the scan notification is sent.

        :return: The emails of this VulnerabilityAssessmentRecurringScansProperties.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this VulnerabilityAssessmentRecurringScansProperties.

        Specifies an array of e-mail addresses to which the scan notification is sent.

        :param emails: The emails of this VulnerabilityAssessmentRecurringScansProperties.
        :type emails: List[str]
        """

        self._emails = emails

    @property
    def is_enabled(self):
        """Gets the is_enabled of this VulnerabilityAssessmentRecurringScansProperties.

        Recurring scans state.

        :return: The is_enabled of this VulnerabilityAssessmentRecurringScansProperties.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this VulnerabilityAssessmentRecurringScansProperties.

        Recurring scans state.

        :param is_enabled: The is_enabled of this VulnerabilityAssessmentRecurringScansProperties.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled
