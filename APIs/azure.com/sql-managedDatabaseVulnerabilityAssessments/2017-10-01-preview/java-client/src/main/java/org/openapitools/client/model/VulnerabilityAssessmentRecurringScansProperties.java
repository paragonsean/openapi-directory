/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a Vulnerability Assessment recurring scans.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:36:56.677935-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VulnerabilityAssessmentRecurringScansProperties {
  public static final String SERIALIZED_NAME_EMAIL_SUBSCRIPTION_ADMINS = "emailSubscriptionAdmins";
  @SerializedName(SERIALIZED_NAME_EMAIL_SUBSCRIPTION_ADMINS)
  private Boolean emailSubscriptionAdmins = true;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<String> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public VulnerabilityAssessmentRecurringScansProperties() {
  }

  public VulnerabilityAssessmentRecurringScansProperties emailSubscriptionAdmins(Boolean emailSubscriptionAdmins) {
    this.emailSubscriptionAdmins = emailSubscriptionAdmins;
    return this;
  }

  /**
   * Specifies that the schedule scan notification will be is sent to the subscription administrators.
   * @return emailSubscriptionAdmins
   */
  @javax.annotation.Nullable
  public Boolean getEmailSubscriptionAdmins() {
    return emailSubscriptionAdmins;
  }

  public void setEmailSubscriptionAdmins(Boolean emailSubscriptionAdmins) {
    this.emailSubscriptionAdmins = emailSubscriptionAdmins;
  }


  public VulnerabilityAssessmentRecurringScansProperties emails(List<String> emails) {
    this.emails = emails;
    return this;
  }

  public VulnerabilityAssessmentRecurringScansProperties addEmailsItem(String emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * Specifies an array of e-mail addresses to which the scan notification is sent.
   * @return emails
   */
  @javax.annotation.Nullable
  public List<String> getEmails() {
    return emails;
  }

  public void setEmails(List<String> emails) {
    this.emails = emails;
  }


  public VulnerabilityAssessmentRecurringScansProperties isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Recurring scans state.
   * @return isEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilityAssessmentRecurringScansProperties vulnerabilityAssessmentRecurringScansProperties = (VulnerabilityAssessmentRecurringScansProperties) o;
    return Objects.equals(this.emailSubscriptionAdmins, vulnerabilityAssessmentRecurringScansProperties.emailSubscriptionAdmins) &&
        Objects.equals(this.emails, vulnerabilityAssessmentRecurringScansProperties.emails) &&
        Objects.equals(this.isEnabled, vulnerabilityAssessmentRecurringScansProperties.isEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailSubscriptionAdmins, emails, isEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilityAssessmentRecurringScansProperties {\n");
    sb.append("    emailSubscriptionAdmins: ").append(toIndentedString(emailSubscriptionAdmins)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("emailSubscriptionAdmins");
    openapiFields.add("emails");
    openapiFields.add("isEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VulnerabilityAssessmentRecurringScansProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VulnerabilityAssessmentRecurringScansProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VulnerabilityAssessmentRecurringScansProperties is not found in the empty JSON string", VulnerabilityAssessmentRecurringScansProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VulnerabilityAssessmentRecurringScansProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VulnerabilityAssessmentRecurringScansProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull() && !jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VulnerabilityAssessmentRecurringScansProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VulnerabilityAssessmentRecurringScansProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VulnerabilityAssessmentRecurringScansProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilityAssessmentRecurringScansProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VulnerabilityAssessmentRecurringScansProperties>() {
           @Override
           public void write(JsonWriter out, VulnerabilityAssessmentRecurringScansProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VulnerabilityAssessmentRecurringScansProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VulnerabilityAssessmentRecurringScansProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VulnerabilityAssessmentRecurringScansProperties
   * @throws IOException if the JSON string is invalid with respect to VulnerabilityAssessmentRecurringScansProperties
   */
  public static VulnerabilityAssessmentRecurringScansProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VulnerabilityAssessmentRecurringScansProperties.class);
  }

  /**
   * Convert an instance of VulnerabilityAssessmentRecurringScansProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

