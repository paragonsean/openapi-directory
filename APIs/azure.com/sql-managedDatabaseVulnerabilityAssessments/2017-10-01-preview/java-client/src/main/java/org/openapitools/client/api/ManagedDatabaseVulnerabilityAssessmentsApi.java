/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DatabaseVulnerabilityAssessment;
import org.openapitools.client.model.DatabaseVulnerabilityAssessmentListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagedDatabaseVulnerabilityAssessmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagedDatabaseVulnerabilityAssessmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagedDatabaseVulnerabilityAssessmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for managedDatabaseVulnerabilityAssessmentsCreateOrUpdate
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedDatabaseVulnerabilityAssessmentsCreateOrUpdateCall(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion, DatabaseVulnerabilityAssessment parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "vulnerabilityAssessmentName" + "}", localVarApiClient.escapeString(vulnerabilityAssessmentName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedDatabaseVulnerabilityAssessmentsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion, DatabaseVulnerabilityAssessment parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'vulnerabilityAssessmentName' is set
        if (vulnerabilityAssessmentName == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityAssessmentName' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate(Async)");
        }

        return managedDatabaseVulnerabilityAssessmentsCreateOrUpdateCall(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates the database&#39;s vulnerability assessment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested resource. (required)
     * @return DatabaseVulnerabilityAssessment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseVulnerabilityAssessment managedDatabaseVulnerabilityAssessmentsCreateOrUpdate(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion, DatabaseVulnerabilityAssessment parameters) throws ApiException {
        ApiResponse<DatabaseVulnerabilityAssessment> localVarResp = managedDatabaseVulnerabilityAssessmentsCreateOrUpdateWithHttpInfo(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the database&#39;s vulnerability assessment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested resource. (required)
     * @return ApiResponse&lt;DatabaseVulnerabilityAssessment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseVulnerabilityAssessment> managedDatabaseVulnerabilityAssessmentsCreateOrUpdateWithHttpInfo(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion, DatabaseVulnerabilityAssessment parameters) throws ApiException {
        okhttp3.Call localVarCall = managedDatabaseVulnerabilityAssessmentsCreateOrUpdateValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<DatabaseVulnerabilityAssessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the database&#39;s vulnerability assessment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.   * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedDatabaseVulnerabilityAssessmentsCreateOrUpdateAsync(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion, DatabaseVulnerabilityAssessment parameters, final ApiCallback<DatabaseVulnerabilityAssessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedDatabaseVulnerabilityAssessmentsCreateOrUpdateValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<DatabaseVulnerabilityAssessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedDatabaseVulnerabilityAssessmentsDelete
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the database vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedDatabaseVulnerabilityAssessmentsDeleteCall(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "vulnerabilityAssessmentName" + "}", localVarApiClient.escapeString(vulnerabilityAssessmentName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedDatabaseVulnerabilityAssessmentsDeleteValidateBeforeCall(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedDatabaseVulnerabilityAssessmentsDelete(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedDatabaseVulnerabilityAssessmentsDelete(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling managedDatabaseVulnerabilityAssessmentsDelete(Async)");
        }

        // verify the required parameter 'vulnerabilityAssessmentName' is set
        if (vulnerabilityAssessmentName == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityAssessmentName' when calling managedDatabaseVulnerabilityAssessmentsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedDatabaseVulnerabilityAssessmentsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedDatabaseVulnerabilityAssessmentsDelete(Async)");
        }

        return managedDatabaseVulnerabilityAssessmentsDeleteCall(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Removes the database&#39;s vulnerability assessment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the database vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void managedDatabaseVulnerabilityAssessmentsDelete(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion) throws ApiException {
        managedDatabaseVulnerabilityAssessmentsDeleteWithHttpInfo(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Removes the database&#39;s vulnerability assessment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the database vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> managedDatabaseVulnerabilityAssessmentsDeleteWithHttpInfo(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedDatabaseVulnerabilityAssessmentsDeleteValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes the database&#39;s vulnerability assessment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the database vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedDatabaseVulnerabilityAssessmentsDeleteAsync(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedDatabaseVulnerabilityAssessmentsDeleteValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedDatabaseVulnerabilityAssessmentsGet
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the database vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedDatabaseVulnerabilityAssessmentsGetCall(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "vulnerabilityAssessmentName" + "}", localVarApiClient.escapeString(vulnerabilityAssessmentName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedDatabaseVulnerabilityAssessmentsGetValidateBeforeCall(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedDatabaseVulnerabilityAssessmentsGet(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedDatabaseVulnerabilityAssessmentsGet(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling managedDatabaseVulnerabilityAssessmentsGet(Async)");
        }

        // verify the required parameter 'vulnerabilityAssessmentName' is set
        if (vulnerabilityAssessmentName == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityAssessmentName' when calling managedDatabaseVulnerabilityAssessmentsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedDatabaseVulnerabilityAssessmentsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedDatabaseVulnerabilityAssessmentsGet(Async)");
        }

        return managedDatabaseVulnerabilityAssessmentsGetCall(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets the database&#39;s vulnerability assessment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return DatabaseVulnerabilityAssessment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the database vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseVulnerabilityAssessment managedDatabaseVulnerabilityAssessmentsGet(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DatabaseVulnerabilityAssessment> localVarResp = managedDatabaseVulnerabilityAssessmentsGetWithHttpInfo(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the database&#39;s vulnerability assessment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;DatabaseVulnerabilityAssessment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the database vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseVulnerabilityAssessment> managedDatabaseVulnerabilityAssessmentsGetWithHttpInfo(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedDatabaseVulnerabilityAssessmentsGetValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseVulnerabilityAssessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the database&#39;s vulnerability assessment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the database vulnerability assessment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedDatabaseVulnerabilityAssessmentsGetAsync(String resourceGroupName, String managedInstanceName, String databaseName, String vulnerabilityAssessmentName, String subscriptionId, String apiVersion, final ApiCallback<DatabaseVulnerabilityAssessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedDatabaseVulnerabilityAssessmentsGetValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseVulnerabilityAssessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedDatabaseVulnerabilityAssessmentsListByDatabase
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the database vulnerability assessments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedDatabaseVulnerabilityAssessmentsListByDatabaseCall(String resourceGroupName, String managedInstanceName, String databaseName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedDatabaseVulnerabilityAssessmentsListByDatabaseValidateBeforeCall(String resourceGroupName, String managedInstanceName, String databaseName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedDatabaseVulnerabilityAssessmentsListByDatabase(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedDatabaseVulnerabilityAssessmentsListByDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling managedDatabaseVulnerabilityAssessmentsListByDatabase(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedDatabaseVulnerabilityAssessmentsListByDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedDatabaseVulnerabilityAssessmentsListByDatabase(Async)");
        }

        return managedDatabaseVulnerabilityAssessmentsListByDatabaseCall(resourceGroupName, managedInstanceName, databaseName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists the vulnerability assessments of a managed database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return DatabaseVulnerabilityAssessmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the database vulnerability assessments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseVulnerabilityAssessmentListResult managedDatabaseVulnerabilityAssessmentsListByDatabase(String resourceGroupName, String managedInstanceName, String databaseName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DatabaseVulnerabilityAssessmentListResult> localVarResp = managedDatabaseVulnerabilityAssessmentsListByDatabaseWithHttpInfo(resourceGroupName, managedInstanceName, databaseName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the vulnerability assessments of a managed database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;DatabaseVulnerabilityAssessmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the database vulnerability assessments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseVulnerabilityAssessmentListResult> managedDatabaseVulnerabilityAssessmentsListByDatabaseWithHttpInfo(String resourceGroupName, String managedInstanceName, String databaseName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedDatabaseVulnerabilityAssessmentsListByDatabaseValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseVulnerabilityAssessmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the vulnerability assessments of a managed database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param databaseName The name of the database for which the vulnerability assessment is defined. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the database vulnerability assessments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.   * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.   * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn&#39;t set in server level policy   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 500 DatabaseIsUnavailable - Loading failed. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedDatabaseVulnerabilityAssessmentsListByDatabaseAsync(String resourceGroupName, String managedInstanceName, String databaseName, String subscriptionId, String apiVersion, final ApiCallback<DatabaseVulnerabilityAssessmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedDatabaseVulnerabilityAssessmentsListByDatabaseValidateBeforeCall(resourceGroupName, managedInstanceName, databaseName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseVulnerabilityAssessmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
