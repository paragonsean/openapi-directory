/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityAssessmentRecurringScansProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityAssessmentRecurringScansProperties::OAIVulnerabilityAssessmentRecurringScansProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityAssessmentRecurringScansProperties::OAIVulnerabilityAssessmentRecurringScansProperties() {
    this->initializeModel();
}

OAIVulnerabilityAssessmentRecurringScansProperties::~OAIVulnerabilityAssessmentRecurringScansProperties() {}

void OAIVulnerabilityAssessmentRecurringScansProperties::initializeModel() {

    m_email_subscription_admins_isSet = false;
    m_email_subscription_admins_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;
}

void OAIVulnerabilityAssessmentRecurringScansProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityAssessmentRecurringScansProperties::fromJsonObject(QJsonObject json) {

    m_email_subscription_admins_isValid = ::OpenAPI::fromJsonValue(m_email_subscription_admins, json[QString("emailSubscriptionAdmins")]);
    m_email_subscription_admins_isSet = !json[QString("emailSubscriptionAdmins")].isNull() && m_email_subscription_admins_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;
}

QString OAIVulnerabilityAssessmentRecurringScansProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityAssessmentRecurringScansProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_email_subscription_admins_isSet) {
        obj.insert(QString("emailSubscriptionAdmins"), ::OpenAPI::toJsonValue(m_email_subscription_admins));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    return obj;
}

bool OAIVulnerabilityAssessmentRecurringScansProperties::isEmailSubscriptionAdmins() const {
    return m_email_subscription_admins;
}
void OAIVulnerabilityAssessmentRecurringScansProperties::setEmailSubscriptionAdmins(const bool &email_subscription_admins) {
    m_email_subscription_admins = email_subscription_admins;
    m_email_subscription_admins_isSet = true;
}

bool OAIVulnerabilityAssessmentRecurringScansProperties::is_email_subscription_admins_Set() const{
    return m_email_subscription_admins_isSet;
}

bool OAIVulnerabilityAssessmentRecurringScansProperties::is_email_subscription_admins_Valid() const{
    return m_email_subscription_admins_isValid;
}

QList<QString> OAIVulnerabilityAssessmentRecurringScansProperties::getEmails() const {
    return m_emails;
}
void OAIVulnerabilityAssessmentRecurringScansProperties::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIVulnerabilityAssessmentRecurringScansProperties::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIVulnerabilityAssessmentRecurringScansProperties::is_emails_Valid() const{
    return m_emails_isValid;
}

bool OAIVulnerabilityAssessmentRecurringScansProperties::isIsEnabled() const {
    return m_is_enabled;
}
void OAIVulnerabilityAssessmentRecurringScansProperties::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIVulnerabilityAssessmentRecurringScansProperties::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIVulnerabilityAssessmentRecurringScansProperties::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

bool OAIVulnerabilityAssessmentRecurringScansProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_subscription_admins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityAssessmentRecurringScansProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
