/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseVulnerabilityAssessmentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseVulnerabilityAssessmentProperties::OAIDatabaseVulnerabilityAssessmentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseVulnerabilityAssessmentProperties::OAIDatabaseVulnerabilityAssessmentProperties() {
    this->initializeModel();
}

OAIDatabaseVulnerabilityAssessmentProperties::~OAIDatabaseVulnerabilityAssessmentProperties() {}

void OAIDatabaseVulnerabilityAssessmentProperties::initializeModel() {

    m_recurring_scans_isSet = false;
    m_recurring_scans_isValid = false;

    m_storage_account_access_key_isSet = false;
    m_storage_account_access_key_isValid = false;

    m_storage_container_path_isSet = false;
    m_storage_container_path_isValid = false;

    m_storage_container_sas_key_isSet = false;
    m_storage_container_sas_key_isValid = false;
}

void OAIDatabaseVulnerabilityAssessmentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseVulnerabilityAssessmentProperties::fromJsonObject(QJsonObject json) {

    m_recurring_scans_isValid = ::OpenAPI::fromJsonValue(m_recurring_scans, json[QString("recurringScans")]);
    m_recurring_scans_isSet = !json[QString("recurringScans")].isNull() && m_recurring_scans_isValid;

    m_storage_account_access_key_isValid = ::OpenAPI::fromJsonValue(m_storage_account_access_key, json[QString("storageAccountAccessKey")]);
    m_storage_account_access_key_isSet = !json[QString("storageAccountAccessKey")].isNull() && m_storage_account_access_key_isValid;

    m_storage_container_path_isValid = ::OpenAPI::fromJsonValue(m_storage_container_path, json[QString("storageContainerPath")]);
    m_storage_container_path_isSet = !json[QString("storageContainerPath")].isNull() && m_storage_container_path_isValid;

    m_storage_container_sas_key_isValid = ::OpenAPI::fromJsonValue(m_storage_container_sas_key, json[QString("storageContainerSasKey")]);
    m_storage_container_sas_key_isSet = !json[QString("storageContainerSasKey")].isNull() && m_storage_container_sas_key_isValid;
}

QString OAIDatabaseVulnerabilityAssessmentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseVulnerabilityAssessmentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_recurring_scans.isSet()) {
        obj.insert(QString("recurringScans"), ::OpenAPI::toJsonValue(m_recurring_scans));
    }
    if (m_storage_account_access_key_isSet) {
        obj.insert(QString("storageAccountAccessKey"), ::OpenAPI::toJsonValue(m_storage_account_access_key));
    }
    if (m_storage_container_path_isSet) {
        obj.insert(QString("storageContainerPath"), ::OpenAPI::toJsonValue(m_storage_container_path));
    }
    if (m_storage_container_sas_key_isSet) {
        obj.insert(QString("storageContainerSasKey"), ::OpenAPI::toJsonValue(m_storage_container_sas_key));
    }
    return obj;
}

OAIVulnerabilityAssessmentRecurringScansProperties OAIDatabaseVulnerabilityAssessmentProperties::getRecurringScans() const {
    return m_recurring_scans;
}
void OAIDatabaseVulnerabilityAssessmentProperties::setRecurringScans(const OAIVulnerabilityAssessmentRecurringScansProperties &recurring_scans) {
    m_recurring_scans = recurring_scans;
    m_recurring_scans_isSet = true;
}

bool OAIDatabaseVulnerabilityAssessmentProperties::is_recurring_scans_Set() const{
    return m_recurring_scans_isSet;
}

bool OAIDatabaseVulnerabilityAssessmentProperties::is_recurring_scans_Valid() const{
    return m_recurring_scans_isValid;
}

QString OAIDatabaseVulnerabilityAssessmentProperties::getStorageAccountAccessKey() const {
    return m_storage_account_access_key;
}
void OAIDatabaseVulnerabilityAssessmentProperties::setStorageAccountAccessKey(const QString &storage_account_access_key) {
    m_storage_account_access_key = storage_account_access_key;
    m_storage_account_access_key_isSet = true;
}

bool OAIDatabaseVulnerabilityAssessmentProperties::is_storage_account_access_key_Set() const{
    return m_storage_account_access_key_isSet;
}

bool OAIDatabaseVulnerabilityAssessmentProperties::is_storage_account_access_key_Valid() const{
    return m_storage_account_access_key_isValid;
}

QString OAIDatabaseVulnerabilityAssessmentProperties::getStorageContainerPath() const {
    return m_storage_container_path;
}
void OAIDatabaseVulnerabilityAssessmentProperties::setStorageContainerPath(const QString &storage_container_path) {
    m_storage_container_path = storage_container_path;
    m_storage_container_path_isSet = true;
}

bool OAIDatabaseVulnerabilityAssessmentProperties::is_storage_container_path_Set() const{
    return m_storage_container_path_isSet;
}

bool OAIDatabaseVulnerabilityAssessmentProperties::is_storage_container_path_Valid() const{
    return m_storage_container_path_isValid;
}

QString OAIDatabaseVulnerabilityAssessmentProperties::getStorageContainerSasKey() const {
    return m_storage_container_sas_key;
}
void OAIDatabaseVulnerabilityAssessmentProperties::setStorageContainerSasKey(const QString &storage_container_sas_key) {
    m_storage_container_sas_key = storage_container_sas_key;
    m_storage_container_sas_key_isSet = true;
}

bool OAIDatabaseVulnerabilityAssessmentProperties::is_storage_container_sas_key_Set() const{
    return m_storage_container_sas_key_isSet;
}

bool OAIDatabaseVulnerabilityAssessmentProperties::is_storage_container_sas_key_Valid() const{
    return m_storage_container_sas_key_isValid;
}

bool OAIDatabaseVulnerabilityAssessmentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recurring_scans.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_container_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_container_sas_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseVulnerabilityAssessmentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
