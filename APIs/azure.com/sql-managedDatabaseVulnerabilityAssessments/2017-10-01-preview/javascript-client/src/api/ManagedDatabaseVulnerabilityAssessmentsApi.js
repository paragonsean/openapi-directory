/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DatabaseVulnerabilityAssessment from '../model/DatabaseVulnerabilityAssessment';
import DatabaseVulnerabilityAssessmentListResult from '../model/DatabaseVulnerabilityAssessmentListResult';

/**
* ManagedDatabaseVulnerabilityAssessments service.
* @module api/ManagedDatabaseVulnerabilityAssessmentsApi
* @version 2017-10-01-preview
*/
export default class ManagedDatabaseVulnerabilityAssessmentsApi {

    /**
    * Constructs a new ManagedDatabaseVulnerabilityAssessmentsApi. 
    * @alias module:api/ManagedDatabaseVulnerabilityAssessmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the managedDatabaseVulnerabilityAssessmentsCreateOrUpdate operation.
     * @callback module:api/ManagedDatabaseVulnerabilityAssessmentsApi~managedDatabaseVulnerabilityAssessmentsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseVulnerabilityAssessment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the database's vulnerability assessment.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {String} databaseName The name of the database for which the vulnerability assessment is defined.
     * @param {module:model/String} vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/DatabaseVulnerabilityAssessment} parameters The requested resource.
     * @param {module:api/ManagedDatabaseVulnerabilityAssessmentsApi~managedDatabaseVulnerabilityAssessmentsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseVulnerabilityAssessment}
     */
    managedDatabaseVulnerabilityAssessmentsCreateOrUpdate(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate");
      }
      // verify the required parameter 'vulnerabilityAssessmentName' is set
      if (vulnerabilityAssessmentName === undefined || vulnerabilityAssessmentName === null) {
        throw new Error("Missing the required parameter 'vulnerabilityAssessmentName' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managedDatabaseVulnerabilityAssessmentsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'databaseName': databaseName,
        'vulnerabilityAssessmentName': vulnerabilityAssessmentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatabaseVulnerabilityAssessment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedDatabaseVulnerabilityAssessmentsDelete operation.
     * @callback module:api/ManagedDatabaseVulnerabilityAssessmentsApi~managedDatabaseVulnerabilityAssessmentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the database's vulnerability assessment.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {String} databaseName The name of the database for which the vulnerability assessment is defined.
     * @param {module:model/String} vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ManagedDatabaseVulnerabilityAssessmentsApi~managedDatabaseVulnerabilityAssessmentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managedDatabaseVulnerabilityAssessmentsDelete(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedDatabaseVulnerabilityAssessmentsDelete");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedDatabaseVulnerabilityAssessmentsDelete");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling managedDatabaseVulnerabilityAssessmentsDelete");
      }
      // verify the required parameter 'vulnerabilityAssessmentName' is set
      if (vulnerabilityAssessmentName === undefined || vulnerabilityAssessmentName === null) {
        throw new Error("Missing the required parameter 'vulnerabilityAssessmentName' when calling managedDatabaseVulnerabilityAssessmentsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedDatabaseVulnerabilityAssessmentsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedDatabaseVulnerabilityAssessmentsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'databaseName': databaseName,
        'vulnerabilityAssessmentName': vulnerabilityAssessmentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedDatabaseVulnerabilityAssessmentsGet operation.
     * @callback module:api/ManagedDatabaseVulnerabilityAssessmentsApi~managedDatabaseVulnerabilityAssessmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseVulnerabilityAssessment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the database's vulnerability assessment.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {String} databaseName The name of the database for which the vulnerability assessment is defined.
     * @param {module:model/String} vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ManagedDatabaseVulnerabilityAssessmentsApi~managedDatabaseVulnerabilityAssessmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseVulnerabilityAssessment}
     */
    managedDatabaseVulnerabilityAssessmentsGet(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedDatabaseVulnerabilityAssessmentsGet");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedDatabaseVulnerabilityAssessmentsGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling managedDatabaseVulnerabilityAssessmentsGet");
      }
      // verify the required parameter 'vulnerabilityAssessmentName' is set
      if (vulnerabilityAssessmentName === undefined || vulnerabilityAssessmentName === null) {
        throw new Error("Missing the required parameter 'vulnerabilityAssessmentName' when calling managedDatabaseVulnerabilityAssessmentsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedDatabaseVulnerabilityAssessmentsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedDatabaseVulnerabilityAssessmentsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'databaseName': databaseName,
        'vulnerabilityAssessmentName': vulnerabilityAssessmentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseVulnerabilityAssessment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedDatabaseVulnerabilityAssessmentsListByDatabase operation.
     * @callback module:api/ManagedDatabaseVulnerabilityAssessmentsApi~managedDatabaseVulnerabilityAssessmentsListByDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseVulnerabilityAssessmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the vulnerability assessments of a managed database.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {String} databaseName The name of the database for which the vulnerability assessment is defined.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ManagedDatabaseVulnerabilityAssessmentsApi~managedDatabaseVulnerabilityAssessmentsListByDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseVulnerabilityAssessmentListResult}
     */
    managedDatabaseVulnerabilityAssessmentsListByDatabase(resourceGroupName, managedInstanceName, databaseName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedDatabaseVulnerabilityAssessmentsListByDatabase");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedDatabaseVulnerabilityAssessmentsListByDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling managedDatabaseVulnerabilityAssessmentsListByDatabase");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedDatabaseVulnerabilityAssessmentsListByDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedDatabaseVulnerabilityAssessmentsListByDatabase");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseVulnerabilityAssessmentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
