/**
 * Microsoft.Support
 * Microsoft Azure Support Resource Provider.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CommunicationDetailsProperties model module.
 * @module model/CommunicationDetailsProperties
 * @version 2019-05-01-preview
 */
class CommunicationDetailsProperties {
    /**
     * Constructs a new <code>CommunicationDetailsProperties</code>.
     * Describes the properties of a communication resource.
     * @alias module:model/CommunicationDetailsProperties
     * @param body {String} Body of the communication
     * @param subject {String} Subject of the communication
     */
    constructor(body, subject) { 
        
        CommunicationDetailsProperties.initialize(this, body, subject);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, body, subject) { 
        obj['body'] = body;
        obj['subject'] = subject;
    }

    /**
     * Constructs a <code>CommunicationDetailsProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommunicationDetailsProperties} obj Optional instance to populate.
     * @return {module:model/CommunicationDetailsProperties} The populated <code>CommunicationDetailsProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommunicationDetailsProperties();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('communicationDirection')) {
                obj['communicationDirection'] = ApiClient.convertToType(data['communicationDirection'], 'String');
            }
            if (data.hasOwnProperty('communicationType')) {
                obj['communicationType'] = ApiClient.convertToType(data['communicationType'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommunicationDetailsProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommunicationDetailsProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CommunicationDetailsProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['communicationDirection'] && !(typeof data['communicationDirection'] === 'string' || data['communicationDirection'] instanceof String)) {
            throw new Error("Expected the field `communicationDirection` to be a primitive type in the JSON string but got " + data['communicationDirection']);
        }
        // ensure the json data is a string
        if (data['communicationType'] && !(typeof data['communicationType'] === 'string' || data['communicationType'] instanceof String)) {
            throw new Error("Expected the field `communicationType` to be a primitive type in the JSON string but got " + data['communicationType']);
        }
        // ensure the json data is a string
        if (data['sender'] && !(typeof data['sender'] === 'string' || data['sender'] instanceof String)) {
            throw new Error("Expected the field `sender` to be a primitive type in the JSON string but got " + data['sender']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }

        return true;
    }


}

CommunicationDetailsProperties.RequiredProperties = ["body", "subject"];

/**
 * Body of the communication
 * @member {String} body
 */
CommunicationDetailsProperties.prototype['body'] = undefined;

/**
 * Direction of communication
 * @member {module:model/CommunicationDetailsProperties.CommunicationDirectionEnum} communicationDirection
 */
CommunicationDetailsProperties.prototype['communicationDirection'] = undefined;

/**
 * Communication type
 * @member {module:model/CommunicationDetailsProperties.CommunicationTypeEnum} communicationType
 */
CommunicationDetailsProperties.prototype['communicationType'] = undefined;

/**
 * Time in UTC (ISO 8601 format) when the communication was created.
 * @member {Date} createdDate
 */
CommunicationDetailsProperties.prototype['createdDate'] = undefined;

/**
 * Email address of the sender
 * @member {String} sender
 */
CommunicationDetailsProperties.prototype['sender'] = undefined;

/**
 * Subject of the communication
 * @member {String} subject
 */
CommunicationDetailsProperties.prototype['subject'] = undefined;





/**
 * Allowed values for the <code>communicationDirection</code> property.
 * @enum {String}
 * @readonly
 */
CommunicationDetailsProperties['CommunicationDirectionEnum'] = {

    /**
     * value: "inbound"
     * @const
     */
    "inbound": "inbound",

    /**
     * value: "outbound"
     * @const
     */
    "outbound": "outbound"
};


/**
 * Allowed values for the <code>communicationType</code> property.
 * @enum {String}
 * @readonly
 */
CommunicationDetailsProperties['CommunicationTypeEnum'] = {

    /**
     * value: "web"
     * @const
     */
    "web": "web",

    /**
     * value: "phone"
     * @const
     */
    "phone": "phone"
};



export default CommunicationDetailsProperties;

