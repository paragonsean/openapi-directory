/**
 * Microsoft.Support
 * Microsoft Azure Support Resource Provider.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactProfile from './ContactProfile';
import QuotaTicketDetails from './QuotaTicketDetails';
import ServiceLevelAgreement from './ServiceLevelAgreement';
import SupportEngineer from './SupportEngineer';
import TechnicalTicketDetails from './TechnicalTicketDetails';

/**
 * The SupportTicketDetailsProperties model module.
 * @module model/SupportTicketDetailsProperties
 * @version 2019-05-01-preview
 */
class SupportTicketDetailsProperties {
    /**
     * Constructs a new <code>SupportTicketDetailsProperties</code>.
     * Describes the properties of a support ticket.
     * @alias module:model/SupportTicketDetailsProperties
     * @param contactDetails {module:model/ContactProfile} 
     * @param description {String} Detailed description of the question or issue.
     * @param problemClassificationId {String} Each Azure service has its own set of issue category called problem classification that corresponds to the type of problem you're experiencing. This parameter is the resource id of ProblemClassification resource.
     * @param serviceId {String} This is the resource id of the Azure service resource associated with the support ticket.
     * @param severity {module:model/SupportTicketDetailsProperties.SeverityEnum} A value that indicates the urgency of the case, which in turn determines the response time according to the service level agreement of the technical support plan you have with Azure.
     * @param title {String} Title of the support ticket.
     */
    constructor(contactDetails, description, problemClassificationId, serviceId, severity, title) { 
        
        SupportTicketDetailsProperties.initialize(this, contactDetails, description, problemClassificationId, serviceId, severity, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contactDetails, description, problemClassificationId, serviceId, severity, title) { 
        obj['contactDetails'] = contactDetails;
        obj['description'] = description;
        obj['problemClassificationId'] = problemClassificationId;
        obj['serviceId'] = serviceId;
        obj['severity'] = severity;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>SupportTicketDetailsProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SupportTicketDetailsProperties} obj Optional instance to populate.
     * @return {module:model/SupportTicketDetailsProperties} The populated <code>SupportTicketDetailsProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SupportTicketDetailsProperties();

            if (data.hasOwnProperty('contactDetails')) {
                obj['contactDetails'] = ContactProfile.constructFromObject(data['contactDetails']);
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enrollmentId')) {
                obj['enrollmentId'] = ApiClient.convertToType(data['enrollmentId'], 'String');
            }
            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('problemClassificationDisplayName')) {
                obj['problemClassificationDisplayName'] = ApiClient.convertToType(data['problemClassificationDisplayName'], 'String');
            }
            if (data.hasOwnProperty('problemClassificationId')) {
                obj['problemClassificationId'] = ApiClient.convertToType(data['problemClassificationId'], 'String');
            }
            if (data.hasOwnProperty('problemStartTime')) {
                obj['problemStartTime'] = ApiClient.convertToType(data['problemStartTime'], 'Date');
            }
            if (data.hasOwnProperty('productionOutage')) {
                obj['productionOutage'] = ApiClient.convertToType(data['productionOutage'], 'Boolean');
            }
            if (data.hasOwnProperty('quotaTicketDetails')) {
                obj['quotaTicketDetails'] = QuotaTicketDetails.constructFromObject(data['quotaTicketDetails']);
            }
            if (data.hasOwnProperty('require24X7Response')) {
                obj['require24X7Response'] = ApiClient.convertToType(data['require24X7Response'], 'Boolean');
            }
            if (data.hasOwnProperty('serviceDisplayName')) {
                obj['serviceDisplayName'] = ApiClient.convertToType(data['serviceDisplayName'], 'String');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('serviceLevelAgreement')) {
                obj['serviceLevelAgreement'] = ServiceLevelAgreement.constructFromObject(data['serviceLevelAgreement']);
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('supportEngineer')) {
                obj['supportEngineer'] = SupportEngineer.constructFromObject(data['supportEngineer']);
            }
            if (data.hasOwnProperty('supportPlanType')) {
                obj['supportPlanType'] = ApiClient.convertToType(data['supportPlanType'], 'String');
            }
            if (data.hasOwnProperty('supportTicketId')) {
                obj['supportTicketId'] = ApiClient.convertToType(data['supportTicketId'], 'String');
            }
            if (data.hasOwnProperty('technicalTicketDetails')) {
                obj['technicalTicketDetails'] = TechnicalTicketDetails.constructFromObject(data['technicalTicketDetails']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SupportTicketDetailsProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SupportTicketDetailsProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SupportTicketDetailsProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `contactDetails`
        if (data['contactDetails']) { // data not null
          ContactProfile.validateJSON(data['contactDetails']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['enrollmentId'] && !(typeof data['enrollmentId'] === 'string' || data['enrollmentId'] instanceof String)) {
            throw new Error("Expected the field `enrollmentId` to be a primitive type in the JSON string but got " + data['enrollmentId']);
        }
        // ensure the json data is a string
        if (data['problemClassificationDisplayName'] && !(typeof data['problemClassificationDisplayName'] === 'string' || data['problemClassificationDisplayName'] instanceof String)) {
            throw new Error("Expected the field `problemClassificationDisplayName` to be a primitive type in the JSON string but got " + data['problemClassificationDisplayName']);
        }
        // ensure the json data is a string
        if (data['problemClassificationId'] && !(typeof data['problemClassificationId'] === 'string' || data['problemClassificationId'] instanceof String)) {
            throw new Error("Expected the field `problemClassificationId` to be a primitive type in the JSON string but got " + data['problemClassificationId']);
        }
        // validate the optional field `quotaTicketDetails`
        if (data['quotaTicketDetails']) { // data not null
          QuotaTicketDetails.validateJSON(data['quotaTicketDetails']);
        }
        // ensure the json data is a string
        if (data['serviceDisplayName'] && !(typeof data['serviceDisplayName'] === 'string' || data['serviceDisplayName'] instanceof String)) {
            throw new Error("Expected the field `serviceDisplayName` to be a primitive type in the JSON string but got " + data['serviceDisplayName']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // validate the optional field `serviceLevelAgreement`
        if (data['serviceLevelAgreement']) { // data not null
          ServiceLevelAgreement.validateJSON(data['serviceLevelAgreement']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `supportEngineer`
        if (data['supportEngineer']) { // data not null
          SupportEngineer.validateJSON(data['supportEngineer']);
        }
        // ensure the json data is a string
        if (data['supportPlanType'] && !(typeof data['supportPlanType'] === 'string' || data['supportPlanType'] instanceof String)) {
            throw new Error("Expected the field `supportPlanType` to be a primitive type in the JSON string but got " + data['supportPlanType']);
        }
        // ensure the json data is a string
        if (data['supportTicketId'] && !(typeof data['supportTicketId'] === 'string' || data['supportTicketId'] instanceof String)) {
            throw new Error("Expected the field `supportTicketId` to be a primitive type in the JSON string but got " + data['supportTicketId']);
        }
        // validate the optional field `technicalTicketDetails`
        if (data['technicalTicketDetails']) { // data not null
          TechnicalTicketDetails.validateJSON(data['technicalTicketDetails']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

SupportTicketDetailsProperties.RequiredProperties = ["contactDetails", "description", "problemClassificationId", "serviceId", "severity", "title"];

/**
 * @member {module:model/ContactProfile} contactDetails
 */
SupportTicketDetailsProperties.prototype['contactDetails'] = undefined;

/**
 * Time in UTC (ISO 8601 format) when support ticket was created.
 * @member {Date} createdDate
 */
SupportTicketDetailsProperties.prototype['createdDate'] = undefined;

/**
 * Detailed description of the question or issue.
 * @member {String} description
 */
SupportTicketDetailsProperties.prototype['description'] = undefined;

/**
 * Enrollment ID associated with the support ticket.
 * @member {String} enrollmentId
 */
SupportTicketDetailsProperties.prototype['enrollmentId'] = undefined;

/**
 * Time in UTC (ISO 8601 format) when support ticket was last modified.
 * @member {Date} modifiedDate
 */
SupportTicketDetailsProperties.prototype['modifiedDate'] = undefined;

/**
 * Localized name of problem classification.
 * @member {String} problemClassificationDisplayName
 */
SupportTicketDetailsProperties.prototype['problemClassificationDisplayName'] = undefined;

/**
 * Each Azure service has its own set of issue category called problem classification that corresponds to the type of problem you're experiencing. This parameter is the resource id of ProblemClassification resource.
 * @member {String} problemClassificationId
 */
SupportTicketDetailsProperties.prototype['problemClassificationId'] = undefined;

/**
 * Time in UTC (ISO 8601 format) when the problem started.
 * @member {Date} problemStartTime
 */
SupportTicketDetailsProperties.prototype['problemStartTime'] = undefined;

/**
 * Indicates if this issue is a production outage.
 * @member {Boolean} productionOutage
 */
SupportTicketDetailsProperties.prototype['productionOutage'] = undefined;

/**
 * @member {module:model/QuotaTicketDetails} quotaTicketDetails
 */
SupportTicketDetailsProperties.prototype['quotaTicketDetails'] = undefined;

/**
 * Indicates if this requires a 24x7 response from Azure.
 * @member {Boolean} require24X7Response
 */
SupportTicketDetailsProperties.prototype['require24X7Response'] = undefined;

/**
 * Localized name of Azure service.
 * @member {String} serviceDisplayName
 */
SupportTicketDetailsProperties.prototype['serviceDisplayName'] = undefined;

/**
 * This is the resource id of the Azure service resource associated with the support ticket.
 * @member {String} serviceId
 */
SupportTicketDetailsProperties.prototype['serviceId'] = undefined;

/**
 * @member {module:model/ServiceLevelAgreement} serviceLevelAgreement
 */
SupportTicketDetailsProperties.prototype['serviceLevelAgreement'] = undefined;

/**
 * A value that indicates the urgency of the case, which in turn determines the response time according to the service level agreement of the technical support plan you have with Azure.
 * @member {module:model/SupportTicketDetailsProperties.SeverityEnum} severity
 */
SupportTicketDetailsProperties.prototype['severity'] = undefined;

/**
 * Status of the support ticket.
 * @member {String} status
 */
SupportTicketDetailsProperties.prototype['status'] = undefined;

/**
 * @member {module:model/SupportEngineer} supportEngineer
 */
SupportTicketDetailsProperties.prototype['supportEngineer'] = undefined;

/**
 * Support plan type associated with the support ticket.
 * @member {String} supportPlanType
 */
SupportTicketDetailsProperties.prototype['supportPlanType'] = undefined;

/**
 * System generated support ticket id that is unique.
 * @member {String} supportTicketId
 */
SupportTicketDetailsProperties.prototype['supportTicketId'] = undefined;

/**
 * @member {module:model/TechnicalTicketDetails} technicalTicketDetails
 */
SupportTicketDetailsProperties.prototype['technicalTicketDetails'] = undefined;

/**
 * Title of the support ticket.
 * @member {String} title
 */
SupportTicketDetailsProperties.prototype['title'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
SupportTicketDetailsProperties['SeverityEnum'] = {

    /**
     * value: "minimal"
     * @const
     */
    "minimal": "minimal",

    /**
     * value: "moderate"
     * @const
     */
    "moderate": "moderate",

    /**
     * value: "critical"
     * @const
     */
    "critical": "critical"
};



export default SupportTicketDetailsProperties;

