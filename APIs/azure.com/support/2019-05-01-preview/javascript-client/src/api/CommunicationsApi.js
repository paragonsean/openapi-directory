/**
 * Microsoft.Support
 * Microsoft Azure Support Resource Provider.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckNameAvailabilityInput from '../model/CheckNameAvailabilityInput';
import CheckNameAvailabilityOutput from '../model/CheckNameAvailabilityOutput';
import CommunicationDetails from '../model/CommunicationDetails';
import CommunicationsListResult from '../model/CommunicationsListResult';
import ExceptionResponse from '../model/ExceptionResponse';

/**
* Communications service.
* @module api/CommunicationsApi
* @version 2019-05-01-preview
*/
export default class CommunicationsApi {

    /**
    * Constructs a new CommunicationsApi. 
    * @alias module:api/CommunicationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the communicationsCheckNameAvailability operation.
     * @callback module:api/CommunicationsApi~communicationsCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckNameAvailabilityOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the availability of a resource name. This API should to be used to check the uniqueness of the name for adding a new communication to the support ticket.
     * @param {String} supportTicketName Support ticket name
     * @param {String} subscriptionId Azure subscription id
     * @param {String} apiVersion Api version
     * @param {module:model/CheckNameAvailabilityInput} checkNameAvailabilityInput Input to check
     * @param {module:api/CommunicationsApi~communicationsCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckNameAvailabilityOutput}
     */
    communicationsCheckNameAvailability(supportTicketName, subscriptionId, apiVersion, checkNameAvailabilityInput, callback) {
      let postBody = checkNameAvailabilityInput;
      // verify the required parameter 'supportTicketName' is set
      if (supportTicketName === undefined || supportTicketName === null) {
        throw new Error("Missing the required parameter 'supportTicketName' when calling communicationsCheckNameAvailability");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling communicationsCheckNameAvailability");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling communicationsCheckNameAvailability");
      }
      // verify the required parameter 'checkNameAvailabilityInput' is set
      if (checkNameAvailabilityInput === undefined || checkNameAvailabilityInput === null) {
        throw new Error("Missing the required parameter 'checkNameAvailabilityInput' when calling communicationsCheckNameAvailability");
      }

      let pathParams = {
        'supportTicketName': supportTicketName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckNameAvailabilityOutput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/checkNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the communicationsCreate operation.
     * @callback module:api/CommunicationsApi~communicationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunicationDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new customer communication to an Azure support ticket. Adding attachments are not currently supported via the API. <br/>To add a file to a support ticket, visit the <a target='_blank' href='https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest'>Manage support ticket</a> page in the Azure portal, select the support ticket, and use the file upload control to add a new file.
     * @param {String} supportTicketName Support ticket name
     * @param {String} communicationName Communication name
     * @param {String} subscriptionId Azure subscription id
     * @param {String} apiVersion Api version
     * @param {module:model/CommunicationDetails} createCommunicationParameters Communication object
     * @param {module:api/CommunicationsApi~communicationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunicationDetails}
     */
    communicationsCreate(supportTicketName, communicationName, subscriptionId, apiVersion, createCommunicationParameters, callback) {
      let postBody = createCommunicationParameters;
      // verify the required parameter 'supportTicketName' is set
      if (supportTicketName === undefined || supportTicketName === null) {
        throw new Error("Missing the required parameter 'supportTicketName' when calling communicationsCreate");
      }
      // verify the required parameter 'communicationName' is set
      if (communicationName === undefined || communicationName === null) {
        throw new Error("Missing the required parameter 'communicationName' when calling communicationsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling communicationsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling communicationsCreate");
      }
      // verify the required parameter 'createCommunicationParameters' is set
      if (createCommunicationParameters === undefined || createCommunicationParameters === null) {
        throw new Error("Missing the required parameter 'createCommunicationParameters' when calling communicationsCreate");
      }

      let pathParams = {
        'supportTicketName': supportTicketName,
        'communicationName': communicationName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommunicationDetails;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the communicationsGet operation.
     * @callback module:api/CommunicationsApi~communicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunicationDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of a specific communication in a support ticket.
     * @param {String} supportTicketName Support ticket name
     * @param {String} communicationName Communication name
     * @param {String} subscriptionId Azure subscription id
     * @param {String} apiVersion Api version
     * @param {module:api/CommunicationsApi~communicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunicationDetails}
     */
    communicationsGet(supportTicketName, communicationName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'supportTicketName' is set
      if (supportTicketName === undefined || supportTicketName === null) {
        throw new Error("Missing the required parameter 'supportTicketName' when calling communicationsGet");
      }
      // verify the required parameter 'communicationName' is set
      if (communicationName === undefined || communicationName === null) {
        throw new Error("Missing the required parameter 'communicationName' when calling communicationsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling communicationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling communicationsGet");
      }

      let pathParams = {
        'supportTicketName': supportTicketName,
        'communicationName': communicationName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommunicationDetails;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the communicationsList operation.
     * @callback module:api/CommunicationsApi~communicationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommunicationsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all communications (attachments not included) for a support ticket. <br/></br> You can also filter support ticket communications by <i>CreatedDate</i>�or <i>CommunicationType</i> using the $filter parameter. The only type of communication supported today is <i>Web</i>. Output will be a paged result with <i>nextLink</i>, using which you can retrieve the next set of Communication results. <br/><br/> Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
     * @param {String} supportTicketName Support ticket name
     * @param {String} subscriptionId Azure subscription id
     * @param {String} apiVersion Api version
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of values to return in the collection. Default is 10 and max is 10.
     * @param {String} [filter] The filter to apply on the operation. You can filter by communicationType and createdDate properties. CommunicationType supports Equals ('eq') operator and createdDate supports Greater Than ('gt') and Greater Than or Equals ('ge') operators. You may combine the CommunicationType and CreatedDate filters by Logical And ('and') operator.
     * @param {module:api/CommunicationsApi~communicationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommunicationsListResult}
     */
    communicationsList(supportTicketName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'supportTicketName' is set
      if (supportTicketName === undefined || supportTicketName === null) {
        throw new Error("Missing the required parameter 'supportTicketName' when calling communicationsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling communicationsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling communicationsList");
      }

      let pathParams = {
        'supportTicketName': supportTicketName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommunicationsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
