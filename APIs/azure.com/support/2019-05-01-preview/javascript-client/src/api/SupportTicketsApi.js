/**
 * Microsoft.Support
 * Microsoft Azure Support Resource Provider.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckNameAvailabilityInput from '../model/CheckNameAvailabilityInput';
import CheckNameAvailabilityOutput from '../model/CheckNameAvailabilityOutput';
import ExceptionResponse from '../model/ExceptionResponse';
import SupportTicketDetails from '../model/SupportTicketDetails';
import SupportTicketsListResult from '../model/SupportTicketsListResult';
import UpdateSupportTicket from '../model/UpdateSupportTicket';

/**
* SupportTickets service.
* @module api/SupportTicketsApi
* @version 2019-05-01-preview
*/
export default class SupportTicketsApi {

    /**
    * Constructs a new SupportTicketsApi. 
    * @alias module:api/SupportTicketsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the supportTicketsCheckNameAvailability operation.
     * @callback module:api/SupportTicketsApi~supportTicketsCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckNameAvailabilityOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the availability of a resource name. This API should to be used to check the uniqueness of the name for support ticket creation for the selected subscription.
     * @param {String} subscriptionId Azure subscription id
     * @param {String} apiVersion Api version
     * @param {module:model/CheckNameAvailabilityInput} checkNameAvailabilityInput Input to check.
     * @param {module:api/SupportTicketsApi~supportTicketsCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckNameAvailabilityOutput}
     */
    supportTicketsCheckNameAvailability(subscriptionId, apiVersion, checkNameAvailabilityInput, callback) {
      let postBody = checkNameAvailabilityInput;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling supportTicketsCheckNameAvailability");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling supportTicketsCheckNameAvailability");
      }
      // verify the required parameter 'checkNameAvailabilityInput' is set
      if (checkNameAvailabilityInput === undefined || checkNameAvailabilityInput === null) {
        throw new Error("Missing the required parameter 'checkNameAvailabilityInput' when calling supportTicketsCheckNameAvailability");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckNameAvailabilityOutput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the supportTicketsCreate operation.
     * @callback module:api/SupportTicketsApi~supportTicketsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportTicketDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new support ticket for Quota increase, Technical, Billing, and Subscription Management issues for the specified subscription. <br/><br/>A paid technical support plan is required to create a support ticket using this API. <a href='https://aka.ms/supportticketAPI'>Learn more</a> <br/><br/> Use the Services API to map the right Service Id to the issue type. For example: For billing tickets set *serviceId* to *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*. <br/> For Technical issues, the Service id will map to the Azure service you want to raise a support ticket for. <br/><br/>Always call the Services and ProblemClassifications API to get the most recent set of services and problem categories required for support ticket creation.
     * @param {String} supportTicketName Support ticket name.
     * @param {String} subscriptionId Azure subscription id
     * @param {String} apiVersion Api version
     * @param {module:model/SupportTicketDetails} createSupportTicketParameters Support ticket request payload.
     * @param {module:api/SupportTicketsApi~supportTicketsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportTicketDetails}
     */
    supportTicketsCreate(supportTicketName, subscriptionId, apiVersion, createSupportTicketParameters, callback) {
      let postBody = createSupportTicketParameters;
      // verify the required parameter 'supportTicketName' is set
      if (supportTicketName === undefined || supportTicketName === null) {
        throw new Error("Missing the required parameter 'supportTicketName' when calling supportTicketsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling supportTicketsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling supportTicketsCreate");
      }
      // verify the required parameter 'createSupportTicketParameters' is set
      if (createSupportTicketParameters === undefined || createSupportTicketParameters === null) {
        throw new Error("Missing the required parameter 'createSupportTicketParameters' when calling supportTicketsCreate");
      }

      let pathParams = {
        'supportTicketName': supportTicketName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SupportTicketDetails;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the supportTicketsGet operation.
     * @callback module:api/SupportTicketsApi~supportTicketsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportTicketDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details for a specific support ticket in an Azure subscription. <br/><br/>Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
     * @param {String} supportTicketName Support ticket name
     * @param {String} subscriptionId Azure subscription id
     * @param {String} apiVersion Api version
     * @param {module:api/SupportTicketsApi~supportTicketsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportTicketDetails}
     */
    supportTicketsGet(supportTicketName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'supportTicketName' is set
      if (supportTicketName === undefined || supportTicketName === null) {
        throw new Error("Missing the required parameter 'supportTicketName' when calling supportTicketsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling supportTicketsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling supportTicketsGet");
      }

      let pathParams = {
        'supportTicketName': supportTicketName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupportTicketDetails;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the supportTicketsList operation.
     * @callback module:api/SupportTicketsApi~supportTicketsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportTicketsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the support tickets for an Azure subscription. <br/><br/>You can also filter the support tickets by <i>Status</i> or <i>CreatedDate</i> using the $filter parameter. Output will be a paged result with <i>nextLink</i>, using which you can retrieve the next set of support tickets. <br/><br/>Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
     * @param {String} subscriptionId Azure subscription id
     * @param {String} apiVersion Api version
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of values to return in the collection. Default is 25 and max is 100.
     * @param {String} [filter] The filter to apply on the operation. We support 'odata v4.0' filter semantics. <a target='_blank' href='https://docs.microsoft.com/odata/concepts/queryoptions-overview'>Learn more</a> <br/><i>Status</i> filter can only be used with 'eq' operator. For <i>CreatedDate</i> filter, the supported operators are 'gt' and 'ge'. When using both filters, combine them using the logical 'AND'.
     * @param {module:api/SupportTicketsApi~supportTicketsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportTicketsListResult}
     */
    supportTicketsList(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling supportTicketsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling supportTicketsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupportTicketsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the supportTicketsUpdate operation.
     * @callback module:api/SupportTicketsApi~supportTicketsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportTicketDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This API allows you to update the severity level or your contact information in the support ticket. <br/><br/> Note: The severity levels cannot be changed if a support ticket is actively being worked upon by an Azure support engineer. In such a case, contact your support engineer to request severity update by adding a new communication using the Communications API.
     * @param {String} supportTicketName Support ticket name
     * @param {String} subscriptionId Azure subscription id
     * @param {String} apiVersion Api version
     * @param {module:model/UpdateSupportTicket} updateSupportTicket UpdateSupportTicket object
     * @param {module:api/SupportTicketsApi~supportTicketsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportTicketDetails}
     */
    supportTicketsUpdate(supportTicketName, subscriptionId, apiVersion, updateSupportTicket, callback) {
      let postBody = updateSupportTicket;
      // verify the required parameter 'supportTicketName' is set
      if (supportTicketName === undefined || supportTicketName === null) {
        throw new Error("Missing the required parameter 'supportTicketName' when calling supportTicketsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling supportTicketsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling supportTicketsUpdate");
      }
      // verify the required parameter 'updateSupportTicket' is set
      if (updateSupportTicket === undefined || updateSupportTicket === null) {
        throw new Error("Missing the required parameter 'updateSupportTicket' when calling supportTicketsUpdate");
      }

      let pathParams = {
        'supportTicketName': supportTicketName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SupportTicketDetails;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
