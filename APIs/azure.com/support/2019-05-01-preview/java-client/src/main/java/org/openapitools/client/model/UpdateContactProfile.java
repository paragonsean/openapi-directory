/*
 * Microsoft.Support
 * Microsoft Azure Support Resource Provider.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contact information associated with the support ticket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:04.189658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateContactProfile {
  public static final String SERIALIZED_NAME_ADDITIONAL_EMAIL_ADDRESSES = "additionalEmailAddresses";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_EMAIL_ADDRESSES)
  private List<String> additionalEmailAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  /**
   * Preferred contact method
   */
  @JsonAdapter(PreferredContactMethodEnum.Adapter.class)
  public enum PreferredContactMethodEnum {
    EMAIL("email"),
    
    PHONE("phone");

    private String value;

    PreferredContactMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreferredContactMethodEnum fromValue(String value) {
      for (PreferredContactMethodEnum b : PreferredContactMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PreferredContactMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreferredContactMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreferredContactMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PreferredContactMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PreferredContactMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREFERRED_CONTACT_METHOD = "preferredContactMethod";
  @SerializedName(SERIALIZED_NAME_PREFERRED_CONTACT_METHOD)
  private PreferredContactMethodEnum preferredContactMethod;

  public static final String SERIALIZED_NAME_PREFERRED_SUPPORT_LANGUAGE = "preferredSupportLanguage";
  @SerializedName(SERIALIZED_NAME_PREFERRED_SUPPORT_LANGUAGE)
  private String preferredSupportLanguage;

  public static final String SERIALIZED_NAME_PREFERRED_TIME_ZONE = "preferredTimeZone";
  @SerializedName(SERIALIZED_NAME_PREFERRED_TIME_ZONE)
  private String preferredTimeZone;

  public static final String SERIALIZED_NAME_PRIMARY_EMAIL_ADDRESS = "primaryEmailAddress";
  @SerializedName(SERIALIZED_NAME_PRIMARY_EMAIL_ADDRESS)
  private String primaryEmailAddress;

  public UpdateContactProfile() {
  }

  public UpdateContactProfile additionalEmailAddresses(List<String> additionalEmailAddresses) {
    this.additionalEmailAddresses = additionalEmailAddresses;
    return this;
  }

  public UpdateContactProfile addAdditionalEmailAddressesItem(String additionalEmailAddressesItem) {
    if (this.additionalEmailAddresses == null) {
      this.additionalEmailAddresses = new ArrayList<>();
    }
    this.additionalEmailAddresses.add(additionalEmailAddressesItem);
    return this;
  }

  /**
   * Email addresses listed will be copied on any correspondence about the support ticket
   * @return additionalEmailAddresses
   */
  @javax.annotation.Nullable
  public List<String> getAdditionalEmailAddresses() {
    return additionalEmailAddresses;
  }

  public void setAdditionalEmailAddresses(List<String> additionalEmailAddresses) {
    this.additionalEmailAddresses = additionalEmailAddresses;
  }


  public UpdateContactProfile country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country of the user. This is the ISO 3166-1 alpha-3 code.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public UpdateContactProfile firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UpdateContactProfile lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public UpdateContactProfile phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Phone number. This is required if preferred contact method is phone.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public UpdateContactProfile preferredContactMethod(PreferredContactMethodEnum preferredContactMethod) {
    this.preferredContactMethod = preferredContactMethod;
    return this;
  }

  /**
   * Preferred contact method
   * @return preferredContactMethod
   */
  @javax.annotation.Nullable
  public PreferredContactMethodEnum getPreferredContactMethod() {
    return preferredContactMethod;
  }

  public void setPreferredContactMethod(PreferredContactMethodEnum preferredContactMethod) {
    this.preferredContactMethod = preferredContactMethod;
  }


  public UpdateContactProfile preferredSupportLanguage(String preferredSupportLanguage) {
    this.preferredSupportLanguage = preferredSupportLanguage;
    return this;
  }

  /**
   * Preferred language of support from Azure. Support languages vary based on the severity you choose for your support ticket. Learn more at &lt;a  target&#x3D;&#39;_blank&#39; href&#x3D;&#39;https://azure.microsoft.com/support/plans/response/&#39;&gt;Azure Severity and responsiveness&lt;/a&gt;. Use the standard language-country code. Valid values are &#39;en-us&#39; for English, &#39;zh-hans&#39; for Chinese, &#39;es-es&#39; for Spanish, &#39;fr-fr&#39; for French, &#39;ja-jp&#39; for Japanese, &#39;ko-kr&#39; for Korean, &#39;ru-ru&#39; for Russian, &#39;pt-br&#39; for Portuguese, &#39;it-it&#39; for Italian, &#39;zh-tw&#39; for Chinese and &#39;de-de&#39; for German.
   * @return preferredSupportLanguage
   */
  @javax.annotation.Nullable
  public String getPreferredSupportLanguage() {
    return preferredSupportLanguage;
  }

  public void setPreferredSupportLanguage(String preferredSupportLanguage) {
    this.preferredSupportLanguage = preferredSupportLanguage;
  }


  public UpdateContactProfile preferredTimeZone(String preferredTimeZone) {
    this.preferredTimeZone = preferredTimeZone;
    return this;
  }

  /**
   * Time zone of the user. This is the name of the time zone from &lt;a  target&#x3D;&#39;_blank&#39; href&#x3D;&#39;https://support.microsoft.com/en-us/help/973627/microsoft-time-zone-index-values&#39;&gt;Microsoft Time Zone Index Values&lt;/a&gt;.
   * @return preferredTimeZone
   */
  @javax.annotation.Nullable
  public String getPreferredTimeZone() {
    return preferredTimeZone;
  }

  public void setPreferredTimeZone(String preferredTimeZone) {
    this.preferredTimeZone = preferredTimeZone;
  }


  public UpdateContactProfile primaryEmailAddress(String primaryEmailAddress) {
    this.primaryEmailAddress = primaryEmailAddress;
    return this;
  }

  /**
   * Primary email address
   * @return primaryEmailAddress
   */
  @javax.annotation.Nullable
  public String getPrimaryEmailAddress() {
    return primaryEmailAddress;
  }

  public void setPrimaryEmailAddress(String primaryEmailAddress) {
    this.primaryEmailAddress = primaryEmailAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateContactProfile updateContactProfile = (UpdateContactProfile) o;
    return Objects.equals(this.additionalEmailAddresses, updateContactProfile.additionalEmailAddresses) &&
        Objects.equals(this.country, updateContactProfile.country) &&
        Objects.equals(this.firstName, updateContactProfile.firstName) &&
        Objects.equals(this.lastName, updateContactProfile.lastName) &&
        Objects.equals(this.phoneNumber, updateContactProfile.phoneNumber) &&
        Objects.equals(this.preferredContactMethod, updateContactProfile.preferredContactMethod) &&
        Objects.equals(this.preferredSupportLanguage, updateContactProfile.preferredSupportLanguage) &&
        Objects.equals(this.preferredTimeZone, updateContactProfile.preferredTimeZone) &&
        Objects.equals(this.primaryEmailAddress, updateContactProfile.primaryEmailAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalEmailAddresses, country, firstName, lastName, phoneNumber, preferredContactMethod, preferredSupportLanguage, preferredTimeZone, primaryEmailAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateContactProfile {\n");
    sb.append("    additionalEmailAddresses: ").append(toIndentedString(additionalEmailAddresses)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    preferredContactMethod: ").append(toIndentedString(preferredContactMethod)).append("\n");
    sb.append("    preferredSupportLanguage: ").append(toIndentedString(preferredSupportLanguage)).append("\n");
    sb.append("    preferredTimeZone: ").append(toIndentedString(preferredTimeZone)).append("\n");
    sb.append("    primaryEmailAddress: ").append(toIndentedString(primaryEmailAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalEmailAddresses");
    openapiFields.add("country");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("phoneNumber");
    openapiFields.add("preferredContactMethod");
    openapiFields.add("preferredSupportLanguage");
    openapiFields.add("preferredTimeZone");
    openapiFields.add("primaryEmailAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateContactProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateContactProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateContactProfile is not found in the empty JSON string", UpdateContactProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateContactProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateContactProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("additionalEmailAddresses") != null && !jsonObj.get("additionalEmailAddresses").isJsonNull() && !jsonObj.get("additionalEmailAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalEmailAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("additionalEmailAddresses").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("preferredContactMethod") != null && !jsonObj.get("preferredContactMethod").isJsonNull()) && !jsonObj.get("preferredContactMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredContactMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredContactMethod").toString()));
      }
      // validate the optional field `preferredContactMethod`
      if (jsonObj.get("preferredContactMethod") != null && !jsonObj.get("preferredContactMethod").isJsonNull()) {
        PreferredContactMethodEnum.validateJsonElement(jsonObj.get("preferredContactMethod"));
      }
      if ((jsonObj.get("preferredSupportLanguage") != null && !jsonObj.get("preferredSupportLanguage").isJsonNull()) && !jsonObj.get("preferredSupportLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredSupportLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredSupportLanguage").toString()));
      }
      if ((jsonObj.get("preferredTimeZone") != null && !jsonObj.get("preferredTimeZone").isJsonNull()) && !jsonObj.get("preferredTimeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredTimeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredTimeZone").toString()));
      }
      if ((jsonObj.get("primaryEmailAddress") != null && !jsonObj.get("primaryEmailAddress").isJsonNull()) && !jsonObj.get("primaryEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryEmailAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateContactProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateContactProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateContactProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateContactProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateContactProfile>() {
           @Override
           public void write(JsonWriter out, UpdateContactProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateContactProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateContactProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateContactProfile
   * @throws IOException if the JSON string is invalid with respect to UpdateContactProfile
   */
  public static UpdateContactProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateContactProfile.class);
  }

  /**
   * Convert an instance of UpdateContactProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

