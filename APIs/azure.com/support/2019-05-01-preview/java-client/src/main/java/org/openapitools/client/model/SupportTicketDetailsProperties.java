/*
 * Microsoft.Support
 * Microsoft Azure Support Resource Provider.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ContactProfile;
import org.openapitools.client.model.QuotaTicketDetails;
import org.openapitools.client.model.ServiceLevelAgreement;
import org.openapitools.client.model.SupportEngineer;
import org.openapitools.client.model.TechnicalTicketDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a support ticket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:04.189658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SupportTicketDetailsProperties {
  public static final String SERIALIZED_NAME_CONTACT_DETAILS = "contactDetails";
  @SerializedName(SERIALIZED_NAME_CONTACT_DETAILS)
  private ContactProfile contactDetails;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENROLLMENT_ID = "enrollmentId";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_ID)
  private String enrollmentId;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private OffsetDateTime modifiedDate;

  public static final String SERIALIZED_NAME_PROBLEM_CLASSIFICATION_DISPLAY_NAME = "problemClassificationDisplayName";
  @SerializedName(SERIALIZED_NAME_PROBLEM_CLASSIFICATION_DISPLAY_NAME)
  private String problemClassificationDisplayName;

  public static final String SERIALIZED_NAME_PROBLEM_CLASSIFICATION_ID = "problemClassificationId";
  @SerializedName(SERIALIZED_NAME_PROBLEM_CLASSIFICATION_ID)
  private String problemClassificationId;

  public static final String SERIALIZED_NAME_PROBLEM_START_TIME = "problemStartTime";
  @SerializedName(SERIALIZED_NAME_PROBLEM_START_TIME)
  private OffsetDateTime problemStartTime;

  public static final String SERIALIZED_NAME_PRODUCTION_OUTAGE = "productionOutage";
  @SerializedName(SERIALIZED_NAME_PRODUCTION_OUTAGE)
  private Boolean productionOutage;

  public static final String SERIALIZED_NAME_QUOTA_TICKET_DETAILS = "quotaTicketDetails";
  @SerializedName(SERIALIZED_NAME_QUOTA_TICKET_DETAILS)
  private QuotaTicketDetails quotaTicketDetails;

  public static final String SERIALIZED_NAME_REQUIRE24_X7_RESPONSE = "require24X7Response";
  @SerializedName(SERIALIZED_NAME_REQUIRE24_X7_RESPONSE)
  private Boolean require24X7Response;

  public static final String SERIALIZED_NAME_SERVICE_DISPLAY_NAME = "serviceDisplayName";
  @SerializedName(SERIALIZED_NAME_SERVICE_DISPLAY_NAME)
  private String serviceDisplayName;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_SERVICE_LEVEL_AGREEMENT = "serviceLevelAgreement";
  @SerializedName(SERIALIZED_NAME_SERVICE_LEVEL_AGREEMENT)
  private ServiceLevelAgreement serviceLevelAgreement;

  /**
   * A value that indicates the urgency of the case, which in turn determines the response time according to the service level agreement of the technical support plan you have with Azure.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    MINIMAL("minimal"),
    
    MODERATE("moderate"),
    
    CRITICAL("critical");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUPPORT_ENGINEER = "supportEngineer";
  @SerializedName(SERIALIZED_NAME_SUPPORT_ENGINEER)
  private SupportEngineer supportEngineer;

  public static final String SERIALIZED_NAME_SUPPORT_PLAN_TYPE = "supportPlanType";
  @SerializedName(SERIALIZED_NAME_SUPPORT_PLAN_TYPE)
  private String supportPlanType;

  public static final String SERIALIZED_NAME_SUPPORT_TICKET_ID = "supportTicketId";
  @SerializedName(SERIALIZED_NAME_SUPPORT_TICKET_ID)
  private String supportTicketId;

  public static final String SERIALIZED_NAME_TECHNICAL_TICKET_DETAILS = "technicalTicketDetails";
  @SerializedName(SERIALIZED_NAME_TECHNICAL_TICKET_DETAILS)
  private TechnicalTicketDetails technicalTicketDetails;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public SupportTicketDetailsProperties() {
  }

  public SupportTicketDetailsProperties(
     OffsetDateTime createdDate, 
     String enrollmentId, 
     OffsetDateTime modifiedDate, 
     String problemClassificationDisplayName, 
     Boolean productionOutage, 
     String serviceDisplayName, 
     String status, 
     String supportPlanType
  ) {
    this();
    this.createdDate = createdDate;
    this.enrollmentId = enrollmentId;
    this.modifiedDate = modifiedDate;
    this.problemClassificationDisplayName = problemClassificationDisplayName;
    this.productionOutage = productionOutage;
    this.serviceDisplayName = serviceDisplayName;
    this.status = status;
    this.supportPlanType = supportPlanType;
  }

  public SupportTicketDetailsProperties contactDetails(ContactProfile contactDetails) {
    this.contactDetails = contactDetails;
    return this;
  }

  /**
   * Get contactDetails
   * @return contactDetails
   */
  @javax.annotation.Nonnull
  public ContactProfile getContactDetails() {
    return contactDetails;
  }

  public void setContactDetails(ContactProfile contactDetails) {
    this.contactDetails = contactDetails;
  }


  /**
   * Time in UTC (ISO 8601 format) when support ticket was created.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }



  public SupportTicketDetailsProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Detailed description of the question or issue.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Enrollment ID associated with the support ticket.
   * @return enrollmentId
   */
  @javax.annotation.Nullable
  public String getEnrollmentId() {
    return enrollmentId;
  }



  /**
   * Time in UTC (ISO 8601 format) when support ticket was last modified.
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }



  /**
   * Localized name of problem classification.
   * @return problemClassificationDisplayName
   */
  @javax.annotation.Nullable
  public String getProblemClassificationDisplayName() {
    return problemClassificationDisplayName;
  }



  public SupportTicketDetailsProperties problemClassificationId(String problemClassificationId) {
    this.problemClassificationId = problemClassificationId;
    return this;
  }

  /**
   * Each Azure service has its own set of issue category called problem classification that corresponds to the type of problem you&#39;re experiencing. This parameter is the resource id of ProblemClassification resource.
   * @return problemClassificationId
   */
  @javax.annotation.Nonnull
  public String getProblemClassificationId() {
    return problemClassificationId;
  }

  public void setProblemClassificationId(String problemClassificationId) {
    this.problemClassificationId = problemClassificationId;
  }


  public SupportTicketDetailsProperties problemStartTime(OffsetDateTime problemStartTime) {
    this.problemStartTime = problemStartTime;
    return this;
  }

  /**
   * Time in UTC (ISO 8601 format) when the problem started.
   * @return problemStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProblemStartTime() {
    return problemStartTime;
  }

  public void setProblemStartTime(OffsetDateTime problemStartTime) {
    this.problemStartTime = problemStartTime;
  }


  /**
   * Indicates if this issue is a production outage.
   * @return productionOutage
   */
  @javax.annotation.Nullable
  public Boolean getProductionOutage() {
    return productionOutage;
  }



  public SupportTicketDetailsProperties quotaTicketDetails(QuotaTicketDetails quotaTicketDetails) {
    this.quotaTicketDetails = quotaTicketDetails;
    return this;
  }

  /**
   * Get quotaTicketDetails
   * @return quotaTicketDetails
   */
  @javax.annotation.Nullable
  public QuotaTicketDetails getQuotaTicketDetails() {
    return quotaTicketDetails;
  }

  public void setQuotaTicketDetails(QuotaTicketDetails quotaTicketDetails) {
    this.quotaTicketDetails = quotaTicketDetails;
  }


  public SupportTicketDetailsProperties require24X7Response(Boolean require24X7Response) {
    this.require24X7Response = require24X7Response;
    return this;
  }

  /**
   * Indicates if this requires a 24x7 response from Azure.
   * @return require24X7Response
   */
  @javax.annotation.Nullable
  public Boolean getRequire24X7Response() {
    return require24X7Response;
  }

  public void setRequire24X7Response(Boolean require24X7Response) {
    this.require24X7Response = require24X7Response;
  }


  /**
   * Localized name of Azure service.
   * @return serviceDisplayName
   */
  @javax.annotation.Nullable
  public String getServiceDisplayName() {
    return serviceDisplayName;
  }



  public SupportTicketDetailsProperties serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * This is the resource id of the Azure service resource associated with the support ticket.
   * @return serviceId
   */
  @javax.annotation.Nonnull
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public SupportTicketDetailsProperties serviceLevelAgreement(ServiceLevelAgreement serviceLevelAgreement) {
    this.serviceLevelAgreement = serviceLevelAgreement;
    return this;
  }

  /**
   * Get serviceLevelAgreement
   * @return serviceLevelAgreement
   */
  @javax.annotation.Nullable
  public ServiceLevelAgreement getServiceLevelAgreement() {
    return serviceLevelAgreement;
  }

  public void setServiceLevelAgreement(ServiceLevelAgreement serviceLevelAgreement) {
    this.serviceLevelAgreement = serviceLevelAgreement;
  }


  public SupportTicketDetailsProperties severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * A value that indicates the urgency of the case, which in turn determines the response time according to the service level agreement of the technical support plan you have with Azure.
   * @return severity
   */
  @javax.annotation.Nonnull
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  /**
   * Status of the support ticket.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }



  public SupportTicketDetailsProperties supportEngineer(SupportEngineer supportEngineer) {
    this.supportEngineer = supportEngineer;
    return this;
  }

  /**
   * Get supportEngineer
   * @return supportEngineer
   */
  @javax.annotation.Nullable
  public SupportEngineer getSupportEngineer() {
    return supportEngineer;
  }

  public void setSupportEngineer(SupportEngineer supportEngineer) {
    this.supportEngineer = supportEngineer;
  }


  /**
   * Support plan type associated with the support ticket.
   * @return supportPlanType
   */
  @javax.annotation.Nullable
  public String getSupportPlanType() {
    return supportPlanType;
  }



  public SupportTicketDetailsProperties supportTicketId(String supportTicketId) {
    this.supportTicketId = supportTicketId;
    return this;
  }

  /**
   * System generated support ticket id that is unique.
   * @return supportTicketId
   */
  @javax.annotation.Nullable
  public String getSupportTicketId() {
    return supportTicketId;
  }

  public void setSupportTicketId(String supportTicketId) {
    this.supportTicketId = supportTicketId;
  }


  public SupportTicketDetailsProperties technicalTicketDetails(TechnicalTicketDetails technicalTicketDetails) {
    this.technicalTicketDetails = technicalTicketDetails;
    return this;
  }

  /**
   * Get technicalTicketDetails
   * @return technicalTicketDetails
   */
  @javax.annotation.Nullable
  public TechnicalTicketDetails getTechnicalTicketDetails() {
    return technicalTicketDetails;
  }

  public void setTechnicalTicketDetails(TechnicalTicketDetails technicalTicketDetails) {
    this.technicalTicketDetails = technicalTicketDetails;
  }


  public SupportTicketDetailsProperties title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the support ticket.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportTicketDetailsProperties supportTicketDetailsProperties = (SupportTicketDetailsProperties) o;
    return Objects.equals(this.contactDetails, supportTicketDetailsProperties.contactDetails) &&
        Objects.equals(this.createdDate, supportTicketDetailsProperties.createdDate) &&
        Objects.equals(this.description, supportTicketDetailsProperties.description) &&
        Objects.equals(this.enrollmentId, supportTicketDetailsProperties.enrollmentId) &&
        Objects.equals(this.modifiedDate, supportTicketDetailsProperties.modifiedDate) &&
        Objects.equals(this.problemClassificationDisplayName, supportTicketDetailsProperties.problemClassificationDisplayName) &&
        Objects.equals(this.problemClassificationId, supportTicketDetailsProperties.problemClassificationId) &&
        Objects.equals(this.problemStartTime, supportTicketDetailsProperties.problemStartTime) &&
        Objects.equals(this.productionOutage, supportTicketDetailsProperties.productionOutage) &&
        Objects.equals(this.quotaTicketDetails, supportTicketDetailsProperties.quotaTicketDetails) &&
        Objects.equals(this.require24X7Response, supportTicketDetailsProperties.require24X7Response) &&
        Objects.equals(this.serviceDisplayName, supportTicketDetailsProperties.serviceDisplayName) &&
        Objects.equals(this.serviceId, supportTicketDetailsProperties.serviceId) &&
        Objects.equals(this.serviceLevelAgreement, supportTicketDetailsProperties.serviceLevelAgreement) &&
        Objects.equals(this.severity, supportTicketDetailsProperties.severity) &&
        Objects.equals(this.status, supportTicketDetailsProperties.status) &&
        Objects.equals(this.supportEngineer, supportTicketDetailsProperties.supportEngineer) &&
        Objects.equals(this.supportPlanType, supportTicketDetailsProperties.supportPlanType) &&
        Objects.equals(this.supportTicketId, supportTicketDetailsProperties.supportTicketId) &&
        Objects.equals(this.technicalTicketDetails, supportTicketDetailsProperties.technicalTicketDetails) &&
        Objects.equals(this.title, supportTicketDetailsProperties.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactDetails, createdDate, description, enrollmentId, modifiedDate, problemClassificationDisplayName, problemClassificationId, problemStartTime, productionOutage, quotaTicketDetails, require24X7Response, serviceDisplayName, serviceId, serviceLevelAgreement, severity, status, supportEngineer, supportPlanType, supportTicketId, technicalTicketDetails, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportTicketDetailsProperties {\n");
    sb.append("    contactDetails: ").append(toIndentedString(contactDetails)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enrollmentId: ").append(toIndentedString(enrollmentId)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    problemClassificationDisplayName: ").append(toIndentedString(problemClassificationDisplayName)).append("\n");
    sb.append("    problemClassificationId: ").append(toIndentedString(problemClassificationId)).append("\n");
    sb.append("    problemStartTime: ").append(toIndentedString(problemStartTime)).append("\n");
    sb.append("    productionOutage: ").append(toIndentedString(productionOutage)).append("\n");
    sb.append("    quotaTicketDetails: ").append(toIndentedString(quotaTicketDetails)).append("\n");
    sb.append("    require24X7Response: ").append(toIndentedString(require24X7Response)).append("\n");
    sb.append("    serviceDisplayName: ").append(toIndentedString(serviceDisplayName)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    serviceLevelAgreement: ").append(toIndentedString(serviceLevelAgreement)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    supportEngineer: ").append(toIndentedString(supportEngineer)).append("\n");
    sb.append("    supportPlanType: ").append(toIndentedString(supportPlanType)).append("\n");
    sb.append("    supportTicketId: ").append(toIndentedString(supportTicketId)).append("\n");
    sb.append("    technicalTicketDetails: ").append(toIndentedString(technicalTicketDetails)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactDetails");
    openapiFields.add("createdDate");
    openapiFields.add("description");
    openapiFields.add("enrollmentId");
    openapiFields.add("modifiedDate");
    openapiFields.add("problemClassificationDisplayName");
    openapiFields.add("problemClassificationId");
    openapiFields.add("problemStartTime");
    openapiFields.add("productionOutage");
    openapiFields.add("quotaTicketDetails");
    openapiFields.add("require24X7Response");
    openapiFields.add("serviceDisplayName");
    openapiFields.add("serviceId");
    openapiFields.add("serviceLevelAgreement");
    openapiFields.add("severity");
    openapiFields.add("status");
    openapiFields.add("supportEngineer");
    openapiFields.add("supportPlanType");
    openapiFields.add("supportTicketId");
    openapiFields.add("technicalTicketDetails");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contactDetails");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("problemClassificationId");
    openapiRequiredFields.add("serviceId");
    openapiRequiredFields.add("severity");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SupportTicketDetailsProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SupportTicketDetailsProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SupportTicketDetailsProperties is not found in the empty JSON string", SupportTicketDetailsProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SupportTicketDetailsProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SupportTicketDetailsProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SupportTicketDetailsProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `contactDetails`
      ContactProfile.validateJsonElement(jsonObj.get("contactDetails"));
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("enrollmentId") != null && !jsonObj.get("enrollmentId").isJsonNull()) && !jsonObj.get("enrollmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentId").toString()));
      }
      if ((jsonObj.get("problemClassificationDisplayName") != null && !jsonObj.get("problemClassificationDisplayName").isJsonNull()) && !jsonObj.get("problemClassificationDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `problemClassificationDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("problemClassificationDisplayName").toString()));
      }
      if (!jsonObj.get("problemClassificationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `problemClassificationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("problemClassificationId").toString()));
      }
      // validate the optional field `quotaTicketDetails`
      if (jsonObj.get("quotaTicketDetails") != null && !jsonObj.get("quotaTicketDetails").isJsonNull()) {
        QuotaTicketDetails.validateJsonElement(jsonObj.get("quotaTicketDetails"));
      }
      if ((jsonObj.get("serviceDisplayName") != null && !jsonObj.get("serviceDisplayName").isJsonNull()) && !jsonObj.get("serviceDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDisplayName").toString()));
      }
      if (!jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      // validate the optional field `serviceLevelAgreement`
      if (jsonObj.get("serviceLevelAgreement") != null && !jsonObj.get("serviceLevelAgreement").isJsonNull()) {
        ServiceLevelAgreement.validateJsonElement(jsonObj.get("serviceLevelAgreement"));
      }
      if (!jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the required field `severity`
      SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `supportEngineer`
      if (jsonObj.get("supportEngineer") != null && !jsonObj.get("supportEngineer").isJsonNull()) {
        SupportEngineer.validateJsonElement(jsonObj.get("supportEngineer"));
      }
      if ((jsonObj.get("supportPlanType") != null && !jsonObj.get("supportPlanType").isJsonNull()) && !jsonObj.get("supportPlanType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportPlanType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportPlanType").toString()));
      }
      if ((jsonObj.get("supportTicketId") != null && !jsonObj.get("supportTicketId").isJsonNull()) && !jsonObj.get("supportTicketId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportTicketId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportTicketId").toString()));
      }
      // validate the optional field `technicalTicketDetails`
      if (jsonObj.get("technicalTicketDetails") != null && !jsonObj.get("technicalTicketDetails").isJsonNull()) {
        TechnicalTicketDetails.validateJsonElement(jsonObj.get("technicalTicketDetails"));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SupportTicketDetailsProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SupportTicketDetailsProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SupportTicketDetailsProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SupportTicketDetailsProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SupportTicketDetailsProperties>() {
           @Override
           public void write(JsonWriter out, SupportTicketDetailsProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SupportTicketDetailsProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SupportTicketDetailsProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SupportTicketDetailsProperties
   * @throws IOException if the JSON string is invalid with respect to SupportTicketDetailsProperties
   */
  public static SupportTicketDetailsProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SupportTicketDetailsProperties.class);
  }

  /**
   * Convert an instance of SupportTicketDetailsProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

