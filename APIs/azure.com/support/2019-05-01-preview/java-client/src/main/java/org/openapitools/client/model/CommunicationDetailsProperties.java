/*
 * Microsoft.Support
 * Microsoft Azure Support Resource Provider.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a communication resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:04.189658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommunicationDetailsProperties {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  /**
   * Direction of communication
   */
  @JsonAdapter(CommunicationDirectionEnum.Adapter.class)
  public enum CommunicationDirectionEnum {
    INBOUND("inbound"),
    
    OUTBOUND("outbound");

    private String value;

    CommunicationDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommunicationDirectionEnum fromValue(String value) {
      for (CommunicationDirectionEnum b : CommunicationDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommunicationDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommunicationDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommunicationDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommunicationDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CommunicationDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMMUNICATION_DIRECTION = "communicationDirection";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_DIRECTION)
  private CommunicationDirectionEnum communicationDirection;

  /**
   * Communication type
   */
  @JsonAdapter(CommunicationTypeEnum.Adapter.class)
  public enum CommunicationTypeEnum {
    WEB("web"),
    
    PHONE("phone");

    private String value;

    CommunicationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommunicationTypeEnum fromValue(String value) {
      for (CommunicationTypeEnum b : CommunicationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommunicationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommunicationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommunicationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommunicationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CommunicationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMMUNICATION_TYPE = "communicationType";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_TYPE)
  private CommunicationTypeEnum communicationType;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public CommunicationDetailsProperties() {
  }

  public CommunicationDetailsProperties(
     CommunicationDirectionEnum communicationDirection, 
     CommunicationTypeEnum communicationType, 
     OffsetDateTime createdDate
  ) {
    this();
    this.communicationDirection = communicationDirection;
    this.communicationType = communicationType;
    this.createdDate = createdDate;
  }

  public CommunicationDetailsProperties body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Body of the communication
   * @return body
   */
  @javax.annotation.Nonnull
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  /**
   * Direction of communication
   * @return communicationDirection
   */
  @javax.annotation.Nullable
  public CommunicationDirectionEnum getCommunicationDirection() {
    return communicationDirection;
  }



  /**
   * Communication type
   * @return communicationType
   */
  @javax.annotation.Nullable
  public CommunicationTypeEnum getCommunicationType() {
    return communicationType;
  }



  /**
   * Time in UTC (ISO 8601 format) when the communication was created.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }



  public CommunicationDetailsProperties sender(String sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Email address of the sender
   * @return sender
   */
  @javax.annotation.Nullable
  public String getSender() {
    return sender;
  }

  public void setSender(String sender) {
    this.sender = sender;
  }


  public CommunicationDetailsProperties subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Subject of the communication
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommunicationDetailsProperties communicationDetailsProperties = (CommunicationDetailsProperties) o;
    return Objects.equals(this.body, communicationDetailsProperties.body) &&
        Objects.equals(this.communicationDirection, communicationDetailsProperties.communicationDirection) &&
        Objects.equals(this.communicationType, communicationDetailsProperties.communicationType) &&
        Objects.equals(this.createdDate, communicationDetailsProperties.createdDate) &&
        Objects.equals(this.sender, communicationDetailsProperties.sender) &&
        Objects.equals(this.subject, communicationDetailsProperties.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, communicationDirection, communicationType, createdDate, sender, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommunicationDetailsProperties {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    communicationDirection: ").append(toIndentedString(communicationDirection)).append("\n");
    sb.append("    communicationType: ").append(toIndentedString(communicationType)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("communicationDirection");
    openapiFields.add("communicationType");
    openapiFields.add("createdDate");
    openapiFields.add("sender");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("subject");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommunicationDetailsProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommunicationDetailsProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommunicationDetailsProperties is not found in the empty JSON string", CommunicationDetailsProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommunicationDetailsProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommunicationDetailsProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommunicationDetailsProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("communicationDirection") != null && !jsonObj.get("communicationDirection").isJsonNull()) && !jsonObj.get("communicationDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `communicationDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("communicationDirection").toString()));
      }
      // validate the optional field `communicationDirection`
      if (jsonObj.get("communicationDirection") != null && !jsonObj.get("communicationDirection").isJsonNull()) {
        CommunicationDirectionEnum.validateJsonElement(jsonObj.get("communicationDirection"));
      }
      if ((jsonObj.get("communicationType") != null && !jsonObj.get("communicationType").isJsonNull()) && !jsonObj.get("communicationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `communicationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("communicationType").toString()));
      }
      // validate the optional field `communicationType`
      if (jsonObj.get("communicationType") != null && !jsonObj.get("communicationType").isJsonNull()) {
        CommunicationTypeEnum.validateJsonElement(jsonObj.get("communicationType"));
      }
      if ((jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) && !jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommunicationDetailsProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommunicationDetailsProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommunicationDetailsProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommunicationDetailsProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CommunicationDetailsProperties>() {
           @Override
           public void write(JsonWriter out, CommunicationDetailsProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommunicationDetailsProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommunicationDetailsProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommunicationDetailsProperties
   * @throws IOException if the JSON string is invalid with respect to CommunicationDetailsProperties
   */
  public static CommunicationDetailsProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommunicationDetailsProperties.class);
  }

  /**
   * Convert an instance of CommunicationDetailsProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

