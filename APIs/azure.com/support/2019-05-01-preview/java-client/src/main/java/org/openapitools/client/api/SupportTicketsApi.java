/*
 * Microsoft.Support
 * Microsoft Azure Support Resource Provider.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CheckNameAvailabilityInput;
import org.openapitools.client.model.CheckNameAvailabilityOutput;
import org.openapitools.client.model.ExceptionResponse;
import org.openapitools.client.model.SupportTicketDetails;
import org.openapitools.client.model.SupportTicketsListResult;
import org.openapitools.client.model.UpdateSupportTicket;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SupportTicketsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SupportTicketsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SupportTicketsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for supportTicketsCheckNameAvailability
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param checkNameAvailabilityInput Input to check. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportTicketsCheckNameAvailabilityCall(String subscriptionId, String apiVersion, CheckNameAvailabilityInput checkNameAvailabilityInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkNameAvailabilityInput;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supportTicketsCheckNameAvailabilityValidateBeforeCall(String subscriptionId, String apiVersion, CheckNameAvailabilityInput checkNameAvailabilityInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling supportTicketsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling supportTicketsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'checkNameAvailabilityInput' is set
        if (checkNameAvailabilityInput == null) {
            throw new ApiException("Missing the required parameter 'checkNameAvailabilityInput' when calling supportTicketsCheckNameAvailability(Async)");
        }

        return supportTicketsCheckNameAvailabilityCall(subscriptionId, apiVersion, checkNameAvailabilityInput, _callback);

    }

    /**
     * 
     * Check the availability of a resource name. This API should to be used to check the uniqueness of the name for support ticket creation for the selected subscription.
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param checkNameAvailabilityInput Input to check. (required)
     * @return CheckNameAvailabilityOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CheckNameAvailabilityOutput supportTicketsCheckNameAvailability(String subscriptionId, String apiVersion, CheckNameAvailabilityInput checkNameAvailabilityInput) throws ApiException {
        ApiResponse<CheckNameAvailabilityOutput> localVarResp = supportTicketsCheckNameAvailabilityWithHttpInfo(subscriptionId, apiVersion, checkNameAvailabilityInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the availability of a resource name. This API should to be used to check the uniqueness of the name for support ticket creation for the selected subscription.
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param checkNameAvailabilityInput Input to check. (required)
     * @return ApiResponse&lt;CheckNameAvailabilityOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckNameAvailabilityOutput> supportTicketsCheckNameAvailabilityWithHttpInfo(String subscriptionId, String apiVersion, CheckNameAvailabilityInput checkNameAvailabilityInput) throws ApiException {
        okhttp3.Call localVarCall = supportTicketsCheckNameAvailabilityValidateBeforeCall(subscriptionId, apiVersion, checkNameAvailabilityInput, null);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the availability of a resource name. This API should to be used to check the uniqueness of the name for support ticket creation for the selected subscription.
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param checkNameAvailabilityInput Input to check. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportTicketsCheckNameAvailabilityAsync(String subscriptionId, String apiVersion, CheckNameAvailabilityInput checkNameAvailabilityInput, final ApiCallback<CheckNameAvailabilityOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = supportTicketsCheckNameAvailabilityValidateBeforeCall(subscriptionId, apiVersion, checkNameAvailabilityInput, _callback);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supportTicketsCreate
     * @param supportTicketName Support ticket name. (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param createSupportTicketParameters Support ticket request payload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - SupportTicket created successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted, SupportTicket will be created asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportTicketsCreateCall(String supportTicketName, String subscriptionId, String apiVersion, SupportTicketDetails createSupportTicketParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSupportTicketParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}"
            .replace("{" + "supportTicketName" + "}", localVarApiClient.escapeString(supportTicketName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supportTicketsCreateValidateBeforeCall(String supportTicketName, String subscriptionId, String apiVersion, SupportTicketDetails createSupportTicketParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportTicketName' is set
        if (supportTicketName == null) {
            throw new ApiException("Missing the required parameter 'supportTicketName' when calling supportTicketsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling supportTicketsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling supportTicketsCreate(Async)");
        }

        // verify the required parameter 'createSupportTicketParameters' is set
        if (createSupportTicketParameters == null) {
            throw new ApiException("Missing the required parameter 'createSupportTicketParameters' when calling supportTicketsCreate(Async)");
        }

        return supportTicketsCreateCall(supportTicketName, subscriptionId, apiVersion, createSupportTicketParameters, _callback);

    }

    /**
     * 
     * Creates a new support ticket for Quota increase, Technical, Billing, and Subscription Management issues for the specified subscription. &lt;br/&gt;&lt;br/&gt;A paid technical support plan is required to create a support ticket using this API. &lt;a href&#x3D;&#39;https://aka.ms/supportticketAPI&#39;&gt;Learn more&lt;/a&gt; &lt;br/&gt;&lt;br/&gt; Use the Services API to map the right Service Id to the issue type. For example: For billing tickets set *serviceId* to *&#39;/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc&#39;*. &lt;br/&gt; For Technical issues, the Service id will map to the Azure service you want to raise a support ticket for. &lt;br/&gt;&lt;br/&gt;Always call the Services and ProblemClassifications API to get the most recent set of services and problem categories required for support ticket creation.
     * @param supportTicketName Support ticket name. (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param createSupportTicketParameters Support ticket request payload. (required)
     * @return SupportTicketDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - SupportTicket created successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted, SupportTicket will be created asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SupportTicketDetails supportTicketsCreate(String supportTicketName, String subscriptionId, String apiVersion, SupportTicketDetails createSupportTicketParameters) throws ApiException {
        ApiResponse<SupportTicketDetails> localVarResp = supportTicketsCreateWithHttpInfo(supportTicketName, subscriptionId, apiVersion, createSupportTicketParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new support ticket for Quota increase, Technical, Billing, and Subscription Management issues for the specified subscription. &lt;br/&gt;&lt;br/&gt;A paid technical support plan is required to create a support ticket using this API. &lt;a href&#x3D;&#39;https://aka.ms/supportticketAPI&#39;&gt;Learn more&lt;/a&gt; &lt;br/&gt;&lt;br/&gt; Use the Services API to map the right Service Id to the issue type. For example: For billing tickets set *serviceId* to *&#39;/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc&#39;*. &lt;br/&gt; For Technical issues, the Service id will map to the Azure service you want to raise a support ticket for. &lt;br/&gt;&lt;br/&gt;Always call the Services and ProblemClassifications API to get the most recent set of services and problem categories required for support ticket creation.
     * @param supportTicketName Support ticket name. (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param createSupportTicketParameters Support ticket request payload. (required)
     * @return ApiResponse&lt;SupportTicketDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - SupportTicket created successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted, SupportTicket will be created asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupportTicketDetails> supportTicketsCreateWithHttpInfo(String supportTicketName, String subscriptionId, String apiVersion, SupportTicketDetails createSupportTicketParameters) throws ApiException {
        okhttp3.Call localVarCall = supportTicketsCreateValidateBeforeCall(supportTicketName, subscriptionId, apiVersion, createSupportTicketParameters, null);
        Type localVarReturnType = new TypeToken<SupportTicketDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new support ticket for Quota increase, Technical, Billing, and Subscription Management issues for the specified subscription. &lt;br/&gt;&lt;br/&gt;A paid technical support plan is required to create a support ticket using this API. &lt;a href&#x3D;&#39;https://aka.ms/supportticketAPI&#39;&gt;Learn more&lt;/a&gt; &lt;br/&gt;&lt;br/&gt; Use the Services API to map the right Service Id to the issue type. For example: For billing tickets set *serviceId* to *&#39;/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc&#39;*. &lt;br/&gt; For Technical issues, the Service id will map to the Azure service you want to raise a support ticket for. &lt;br/&gt;&lt;br/&gt;Always call the Services and ProblemClassifications API to get the most recent set of services and problem categories required for support ticket creation.
     * @param supportTicketName Support ticket name. (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param createSupportTicketParameters Support ticket request payload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - SupportTicket created successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted, SupportTicket will be created asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportTicketsCreateAsync(String supportTicketName, String subscriptionId, String apiVersion, SupportTicketDetails createSupportTicketParameters, final ApiCallback<SupportTicketDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = supportTicketsCreateValidateBeforeCall(supportTicketName, subscriptionId, apiVersion, createSupportTicketParameters, _callback);
        Type localVarReturnType = new TypeToken<SupportTicketDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supportTicketsGet
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved support ticket. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportTicketsGetCall(String supportTicketName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}"
            .replace("{" + "supportTicketName" + "}", localVarApiClient.escapeString(supportTicketName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supportTicketsGetValidateBeforeCall(String supportTicketName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportTicketName' is set
        if (supportTicketName == null) {
            throw new ApiException("Missing the required parameter 'supportTicketName' when calling supportTicketsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling supportTicketsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling supportTicketsGet(Async)");
        }

        return supportTicketsGetCall(supportTicketName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets details for a specific support ticket in an Azure subscription. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @return SupportTicketDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved support ticket. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SupportTicketDetails supportTicketsGet(String supportTicketName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SupportTicketDetails> localVarResp = supportTicketsGetWithHttpInfo(supportTicketName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets details for a specific support ticket in an Azure subscription. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @return ApiResponse&lt;SupportTicketDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved support ticket. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupportTicketDetails> supportTicketsGetWithHttpInfo(String supportTicketName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = supportTicketsGetValidateBeforeCall(supportTicketName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SupportTicketDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets details for a specific support ticket in an Azure subscription. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved support ticket. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportTicketsGetAsync(String supportTicketName, String subscriptionId, String apiVersion, final ApiCallback<SupportTicketDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = supportTicketsGetValidateBeforeCall(supportTicketName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SupportTicketDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supportTicketsList
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param $top The number of values to return in the collection. Default is 25 and max is 100. (optional)
     * @param $filter The filter to apply on the operation. We support &#39;odata v4.0&#39; filter semantics. &lt;a target&#x3D;&#39;_blank&#39; href&#x3D;&#39;https://docs.microsoft.com/odata/concepts/queryoptions-overview&#39;&gt;Learn more&lt;/a&gt; &lt;br/&gt;&lt;i&gt;Status&lt;/i&gt; filter can only be used with &#39;eq&#39; operator. For &lt;i&gt;CreatedDate&lt;/i&gt; filter, the supported operators are &#39;gt&#39; and &#39;ge&#39;. When using both filters, combine them using the logical &#39;AND&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved support tickets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportTicketsListCall(String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supportTicketsListValidateBeforeCall(String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling supportTicketsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling supportTicketsList(Async)");
        }

        return supportTicketsListCall(subscriptionId, apiVersion, $top, $filter, _callback);

    }

    /**
     * 
     * Lists all the support tickets for an Azure subscription. &lt;br/&gt;&lt;br/&gt;You can also filter the support tickets by &lt;i&gt;Status&lt;/i&gt; or &lt;i&gt;CreatedDate&lt;/i&gt; using the $filter parameter. Output will be a paged result with &lt;i&gt;nextLink&lt;/i&gt;, using which you can retrieve the next set of support tickets. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param $top The number of values to return in the collection. Default is 25 and max is 100. (optional)
     * @param $filter The filter to apply on the operation. We support &#39;odata v4.0&#39; filter semantics. &lt;a target&#x3D;&#39;_blank&#39; href&#x3D;&#39;https://docs.microsoft.com/odata/concepts/queryoptions-overview&#39;&gt;Learn more&lt;/a&gt; &lt;br/&gt;&lt;i&gt;Status&lt;/i&gt; filter can only be used with &#39;eq&#39; operator. For &lt;i&gt;CreatedDate&lt;/i&gt; filter, the supported operators are &#39;gt&#39; and &#39;ge&#39;. When using both filters, combine them using the logical &#39;AND&#39;. (optional)
     * @return SupportTicketsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved support tickets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SupportTicketsListResult supportTicketsList(String subscriptionId, String apiVersion, Integer $top, String $filter) throws ApiException {
        ApiResponse<SupportTicketsListResult> localVarResp = supportTicketsListWithHttpInfo(subscriptionId, apiVersion, $top, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the support tickets for an Azure subscription. &lt;br/&gt;&lt;br/&gt;You can also filter the support tickets by &lt;i&gt;Status&lt;/i&gt; or &lt;i&gt;CreatedDate&lt;/i&gt; using the $filter parameter. Output will be a paged result with &lt;i&gt;nextLink&lt;/i&gt;, using which you can retrieve the next set of support tickets. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param $top The number of values to return in the collection. Default is 25 and max is 100. (optional)
     * @param $filter The filter to apply on the operation. We support &#39;odata v4.0&#39; filter semantics. &lt;a target&#x3D;&#39;_blank&#39; href&#x3D;&#39;https://docs.microsoft.com/odata/concepts/queryoptions-overview&#39;&gt;Learn more&lt;/a&gt; &lt;br/&gt;&lt;i&gt;Status&lt;/i&gt; filter can only be used with &#39;eq&#39; operator. For &lt;i&gt;CreatedDate&lt;/i&gt; filter, the supported operators are &#39;gt&#39; and &#39;ge&#39;. When using both filters, combine them using the logical &#39;AND&#39;. (optional)
     * @return ApiResponse&lt;SupportTicketsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved support tickets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupportTicketsListResult> supportTicketsListWithHttpInfo(String subscriptionId, String apiVersion, Integer $top, String $filter) throws ApiException {
        okhttp3.Call localVarCall = supportTicketsListValidateBeforeCall(subscriptionId, apiVersion, $top, $filter, null);
        Type localVarReturnType = new TypeToken<SupportTicketsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the support tickets for an Azure subscription. &lt;br/&gt;&lt;br/&gt;You can also filter the support tickets by &lt;i&gt;Status&lt;/i&gt; or &lt;i&gt;CreatedDate&lt;/i&gt; using the $filter parameter. Output will be a paged result with &lt;i&gt;nextLink&lt;/i&gt;, using which you can retrieve the next set of support tickets. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param $top The number of values to return in the collection. Default is 25 and max is 100. (optional)
     * @param $filter The filter to apply on the operation. We support &#39;odata v4.0&#39; filter semantics. &lt;a target&#x3D;&#39;_blank&#39; href&#x3D;&#39;https://docs.microsoft.com/odata/concepts/queryoptions-overview&#39;&gt;Learn more&lt;/a&gt; &lt;br/&gt;&lt;i&gt;Status&lt;/i&gt; filter can only be used with &#39;eq&#39; operator. For &lt;i&gt;CreatedDate&lt;/i&gt; filter, the supported operators are &#39;gt&#39; and &#39;ge&#39;. When using both filters, combine them using the logical &#39;AND&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved support tickets. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportTicketsListAsync(String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback<SupportTicketsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = supportTicketsListValidateBeforeCall(subscriptionId, apiVersion, $top, $filter, _callback);
        Type localVarReturnType = new TypeToken<SupportTicketsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supportTicketsUpdate
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param updateSupportTicket UpdateSupportTicket object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated support ticket. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportTicketsUpdateCall(String supportTicketName, String subscriptionId, String apiVersion, UpdateSupportTicket updateSupportTicket, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSupportTicket;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}"
            .replace("{" + "supportTicketName" + "}", localVarApiClient.escapeString(supportTicketName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supportTicketsUpdateValidateBeforeCall(String supportTicketName, String subscriptionId, String apiVersion, UpdateSupportTicket updateSupportTicket, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportTicketName' is set
        if (supportTicketName == null) {
            throw new ApiException("Missing the required parameter 'supportTicketName' when calling supportTicketsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling supportTicketsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling supportTicketsUpdate(Async)");
        }

        // verify the required parameter 'updateSupportTicket' is set
        if (updateSupportTicket == null) {
            throw new ApiException("Missing the required parameter 'updateSupportTicket' when calling supportTicketsUpdate(Async)");
        }

        return supportTicketsUpdateCall(supportTicketName, subscriptionId, apiVersion, updateSupportTicket, _callback);

    }

    /**
     * 
     * This API allows you to update the severity level or your contact information in the support ticket. &lt;br/&gt;&lt;br/&gt; Note: The severity levels cannot be changed if a support ticket is actively being worked upon by an Azure support engineer. In such a case, contact your support engineer to request severity update by adding a new communication using the Communications API.
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param updateSupportTicket UpdateSupportTicket object (required)
     * @return SupportTicketDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated support ticket. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SupportTicketDetails supportTicketsUpdate(String supportTicketName, String subscriptionId, String apiVersion, UpdateSupportTicket updateSupportTicket) throws ApiException {
        ApiResponse<SupportTicketDetails> localVarResp = supportTicketsUpdateWithHttpInfo(supportTicketName, subscriptionId, apiVersion, updateSupportTicket);
        return localVarResp.getData();
    }

    /**
     * 
     * This API allows you to update the severity level or your contact information in the support ticket. &lt;br/&gt;&lt;br/&gt; Note: The severity levels cannot be changed if a support ticket is actively being worked upon by an Azure support engineer. In such a case, contact your support engineer to request severity update by adding a new communication using the Communications API.
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param updateSupportTicket UpdateSupportTicket object (required)
     * @return ApiResponse&lt;SupportTicketDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated support ticket. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupportTicketDetails> supportTicketsUpdateWithHttpInfo(String supportTicketName, String subscriptionId, String apiVersion, UpdateSupportTicket updateSupportTicket) throws ApiException {
        okhttp3.Call localVarCall = supportTicketsUpdateValidateBeforeCall(supportTicketName, subscriptionId, apiVersion, updateSupportTicket, null);
        Type localVarReturnType = new TypeToken<SupportTicketDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This API allows you to update the severity level or your contact information in the support ticket. &lt;br/&gt;&lt;br/&gt; Note: The severity levels cannot be changed if a support ticket is actively being worked upon by an Azure support engineer. In such a case, contact your support engineer to request severity update by adding a new communication using the Communications API.
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param updateSupportTicket UpdateSupportTicket object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated support ticket. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportTicketsUpdateAsync(String supportTicketName, String subscriptionId, String apiVersion, UpdateSupportTicket updateSupportTicket, final ApiCallback<SupportTicketDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = supportTicketsUpdateValidateBeforeCall(supportTicketName, subscriptionId, apiVersion, updateSupportTicket, _callback);
        Type localVarReturnType = new TypeToken<SupportTicketDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
