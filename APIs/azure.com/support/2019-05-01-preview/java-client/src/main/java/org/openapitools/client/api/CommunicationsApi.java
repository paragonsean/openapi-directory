/*
 * Microsoft.Support
 * Microsoft Azure Support Resource Provider.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CheckNameAvailabilityInput;
import org.openapitools.client.model.CheckNameAvailabilityOutput;
import org.openapitools.client.model.CommunicationDetails;
import org.openapitools.client.model.CommunicationsListResult;
import org.openapitools.client.model.ExceptionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommunicationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommunicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommunicationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for communicationsCheckNameAvailability
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param checkNameAvailabilityInput Input to check (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationsCheckNameAvailabilityCall(String supportTicketName, String subscriptionId, String apiVersion, CheckNameAvailabilityInput checkNameAvailabilityInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkNameAvailabilityInput;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/checkNameAvailability"
            .replace("{" + "supportTicketName" + "}", localVarApiClient.escapeString(supportTicketName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communicationsCheckNameAvailabilityValidateBeforeCall(String supportTicketName, String subscriptionId, String apiVersion, CheckNameAvailabilityInput checkNameAvailabilityInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportTicketName' is set
        if (supportTicketName == null) {
            throw new ApiException("Missing the required parameter 'supportTicketName' when calling communicationsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling communicationsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling communicationsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'checkNameAvailabilityInput' is set
        if (checkNameAvailabilityInput == null) {
            throw new ApiException("Missing the required parameter 'checkNameAvailabilityInput' when calling communicationsCheckNameAvailability(Async)");
        }

        return communicationsCheckNameAvailabilityCall(supportTicketName, subscriptionId, apiVersion, checkNameAvailabilityInput, _callback);

    }

    /**
     * 
     * Check the availability of a resource name. This API should to be used to check the uniqueness of the name for adding a new communication to the support ticket.
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param checkNameAvailabilityInput Input to check (required)
     * @return CheckNameAvailabilityOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CheckNameAvailabilityOutput communicationsCheckNameAvailability(String supportTicketName, String subscriptionId, String apiVersion, CheckNameAvailabilityInput checkNameAvailabilityInput) throws ApiException {
        ApiResponse<CheckNameAvailabilityOutput> localVarResp = communicationsCheckNameAvailabilityWithHttpInfo(supportTicketName, subscriptionId, apiVersion, checkNameAvailabilityInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the availability of a resource name. This API should to be used to check the uniqueness of the name for adding a new communication to the support ticket.
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param checkNameAvailabilityInput Input to check (required)
     * @return ApiResponse&lt;CheckNameAvailabilityOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckNameAvailabilityOutput> communicationsCheckNameAvailabilityWithHttpInfo(String supportTicketName, String subscriptionId, String apiVersion, CheckNameAvailabilityInput checkNameAvailabilityInput) throws ApiException {
        okhttp3.Call localVarCall = communicationsCheckNameAvailabilityValidateBeforeCall(supportTicketName, subscriptionId, apiVersion, checkNameAvailabilityInput, null);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the availability of a resource name. This API should to be used to check the uniqueness of the name for adding a new communication to the support ticket.
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param checkNameAvailabilityInput Input to check (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationsCheckNameAvailabilityAsync(String supportTicketName, String subscriptionId, String apiVersion, CheckNameAvailabilityInput checkNameAvailabilityInput, final ApiCallback<CheckNameAvailabilityOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = communicationsCheckNameAvailabilityValidateBeforeCall(supportTicketName, subscriptionId, apiVersion, checkNameAvailabilityInput, _callback);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for communicationsCreate
     * @param supportTicketName Support ticket name (required)
     * @param communicationName Communication name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param createCommunicationParameters Communication object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Communication created successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted, Communication will be created asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationsCreateCall(String supportTicketName, String communicationName, String subscriptionId, String apiVersion, CommunicationDetails createCommunicationParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCommunicationParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}"
            .replace("{" + "supportTicketName" + "}", localVarApiClient.escapeString(supportTicketName.toString()))
            .replace("{" + "communicationName" + "}", localVarApiClient.escapeString(communicationName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communicationsCreateValidateBeforeCall(String supportTicketName, String communicationName, String subscriptionId, String apiVersion, CommunicationDetails createCommunicationParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportTicketName' is set
        if (supportTicketName == null) {
            throw new ApiException("Missing the required parameter 'supportTicketName' when calling communicationsCreate(Async)");
        }

        // verify the required parameter 'communicationName' is set
        if (communicationName == null) {
            throw new ApiException("Missing the required parameter 'communicationName' when calling communicationsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling communicationsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling communicationsCreate(Async)");
        }

        // verify the required parameter 'createCommunicationParameters' is set
        if (createCommunicationParameters == null) {
            throw new ApiException("Missing the required parameter 'createCommunicationParameters' when calling communicationsCreate(Async)");
        }

        return communicationsCreateCall(supportTicketName, communicationName, subscriptionId, apiVersion, createCommunicationParameters, _callback);

    }

    /**
     * 
     * Adds a new customer communication to an Azure support ticket. Adding attachments are not currently supported via the API. &lt;br/&gt;To add a file to a support ticket, visit the &lt;a target&#x3D;&#39;_blank&#39; href&#x3D;&#39;https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest&#39;&gt;Manage support ticket&lt;/a&gt; page in the Azure portal, select the support ticket, and use the file upload control to add a new file.
     * @param supportTicketName Support ticket name (required)
     * @param communicationName Communication name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param createCommunicationParameters Communication object (required)
     * @return CommunicationDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Communication created successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted, Communication will be created asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CommunicationDetails communicationsCreate(String supportTicketName, String communicationName, String subscriptionId, String apiVersion, CommunicationDetails createCommunicationParameters) throws ApiException {
        ApiResponse<CommunicationDetails> localVarResp = communicationsCreateWithHttpInfo(supportTicketName, communicationName, subscriptionId, apiVersion, createCommunicationParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a new customer communication to an Azure support ticket. Adding attachments are not currently supported via the API. &lt;br/&gt;To add a file to a support ticket, visit the &lt;a target&#x3D;&#39;_blank&#39; href&#x3D;&#39;https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest&#39;&gt;Manage support ticket&lt;/a&gt; page in the Azure portal, select the support ticket, and use the file upload control to add a new file.
     * @param supportTicketName Support ticket name (required)
     * @param communicationName Communication name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param createCommunicationParameters Communication object (required)
     * @return ApiResponse&lt;CommunicationDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Communication created successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted, Communication will be created asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunicationDetails> communicationsCreateWithHttpInfo(String supportTicketName, String communicationName, String subscriptionId, String apiVersion, CommunicationDetails createCommunicationParameters) throws ApiException {
        okhttp3.Call localVarCall = communicationsCreateValidateBeforeCall(supportTicketName, communicationName, subscriptionId, apiVersion, createCommunicationParameters, null);
        Type localVarReturnType = new TypeToken<CommunicationDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a new customer communication to an Azure support ticket. Adding attachments are not currently supported via the API. &lt;br/&gt;To add a file to a support ticket, visit the &lt;a target&#x3D;&#39;_blank&#39; href&#x3D;&#39;https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest&#39;&gt;Manage support ticket&lt;/a&gt; page in the Azure portal, select the support ticket, and use the file upload control to add a new file.
     * @param supportTicketName Support ticket name (required)
     * @param communicationName Communication name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param createCommunicationParameters Communication object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Communication created successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted, Communication will be created asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationsCreateAsync(String supportTicketName, String communicationName, String subscriptionId, String apiVersion, CommunicationDetails createCommunicationParameters, final ApiCallback<CommunicationDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = communicationsCreateValidateBeforeCall(supportTicketName, communicationName, subscriptionId, apiVersion, createCommunicationParameters, _callback);
        Type localVarReturnType = new TypeToken<CommunicationDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for communicationsGet
     * @param supportTicketName Support ticket name (required)
     * @param communicationName Communication name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved communication details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationsGetCall(String supportTicketName, String communicationName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}"
            .replace("{" + "supportTicketName" + "}", localVarApiClient.escapeString(supportTicketName.toString()))
            .replace("{" + "communicationName" + "}", localVarApiClient.escapeString(communicationName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communicationsGetValidateBeforeCall(String supportTicketName, String communicationName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportTicketName' is set
        if (supportTicketName == null) {
            throw new ApiException("Missing the required parameter 'supportTicketName' when calling communicationsGet(Async)");
        }

        // verify the required parameter 'communicationName' is set
        if (communicationName == null) {
            throw new ApiException("Missing the required parameter 'communicationName' when calling communicationsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling communicationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling communicationsGet(Async)");
        }

        return communicationsGetCall(supportTicketName, communicationName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Returns details of a specific communication in a support ticket.
     * @param supportTicketName Support ticket name (required)
     * @param communicationName Communication name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @return CommunicationDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved communication details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CommunicationDetails communicationsGet(String supportTicketName, String communicationName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<CommunicationDetails> localVarResp = communicationsGetWithHttpInfo(supportTicketName, communicationName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns details of a specific communication in a support ticket.
     * @param supportTicketName Support ticket name (required)
     * @param communicationName Communication name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @return ApiResponse&lt;CommunicationDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved communication details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunicationDetails> communicationsGetWithHttpInfo(String supportTicketName, String communicationName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = communicationsGetValidateBeforeCall(supportTicketName, communicationName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<CommunicationDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns details of a specific communication in a support ticket.
     * @param supportTicketName Support ticket name (required)
     * @param communicationName Communication name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved communication details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationsGetAsync(String supportTicketName, String communicationName, String subscriptionId, String apiVersion, final ApiCallback<CommunicationDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = communicationsGetValidateBeforeCall(supportTicketName, communicationName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CommunicationDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for communicationsList
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param $top The number of values to return in the collection. Default is 10 and max is 10. (optional)
     * @param $filter The filter to apply on the operation. You can filter by communicationType and createdDate properties. CommunicationType supports Equals (&#39;eq&#39;) operator and createdDate supports Greater Than (&#39;gt&#39;) and Greater Than or Equals (&#39;ge&#39;) operators. You may combine the CommunicationType and CreatedDate filters by Logical And (&#39;and&#39;) operator. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved communications for a support ticket. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationsListCall(String supportTicketName, String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications"
            .replace("{" + "supportTicketName" + "}", localVarApiClient.escapeString(supportTicketName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communicationsListValidateBeforeCall(String supportTicketName, String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportTicketName' is set
        if (supportTicketName == null) {
            throw new ApiException("Missing the required parameter 'supportTicketName' when calling communicationsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling communicationsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling communicationsList(Async)");
        }

        return communicationsListCall(supportTicketName, subscriptionId, apiVersion, $top, $filter, _callback);

    }

    /**
     * 
     * Lists all communications (attachments not included) for a support ticket. &lt;br/&gt;&lt;/br&gt; You can also filter support ticket communications by &lt;i&gt;CreatedDate&lt;/i&gt;�or &lt;i&gt;CommunicationType&lt;/i&gt; using the $filter parameter. The only type of communication supported today is &lt;i&gt;Web&lt;/i&gt;. Output will be a paged result with &lt;i&gt;nextLink&lt;/i&gt;, using which you can retrieve the next set of Communication results. &lt;br/&gt;&lt;br/&gt; Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param $top The number of values to return in the collection. Default is 10 and max is 10. (optional)
     * @param $filter The filter to apply on the operation. You can filter by communicationType and createdDate properties. CommunicationType supports Equals (&#39;eq&#39;) operator and createdDate supports Greater Than (&#39;gt&#39;) and Greater Than or Equals (&#39;ge&#39;) operators. You may combine the CommunicationType and CreatedDate filters by Logical And (&#39;and&#39;) operator. (optional)
     * @return CommunicationsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved communications for a support ticket. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CommunicationsListResult communicationsList(String supportTicketName, String subscriptionId, String apiVersion, Integer $top, String $filter) throws ApiException {
        ApiResponse<CommunicationsListResult> localVarResp = communicationsListWithHttpInfo(supportTicketName, subscriptionId, apiVersion, $top, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all communications (attachments not included) for a support ticket. &lt;br/&gt;&lt;/br&gt; You can also filter support ticket communications by &lt;i&gt;CreatedDate&lt;/i&gt;�or &lt;i&gt;CommunicationType&lt;/i&gt; using the $filter parameter. The only type of communication supported today is &lt;i&gt;Web&lt;/i&gt;. Output will be a paged result with &lt;i&gt;nextLink&lt;/i&gt;, using which you can retrieve the next set of Communication results. &lt;br/&gt;&lt;br/&gt; Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param $top The number of values to return in the collection. Default is 10 and max is 10. (optional)
     * @param $filter The filter to apply on the operation. You can filter by communicationType and createdDate properties. CommunicationType supports Equals (&#39;eq&#39;) operator and createdDate supports Greater Than (&#39;gt&#39;) and Greater Than or Equals (&#39;ge&#39;) operators. You may combine the CommunicationType and CreatedDate filters by Logical And (&#39;and&#39;) operator. (optional)
     * @return ApiResponse&lt;CommunicationsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved communications for a support ticket. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunicationsListResult> communicationsListWithHttpInfo(String supportTicketName, String subscriptionId, String apiVersion, Integer $top, String $filter) throws ApiException {
        okhttp3.Call localVarCall = communicationsListValidateBeforeCall(supportTicketName, subscriptionId, apiVersion, $top, $filter, null);
        Type localVarReturnType = new TypeToken<CommunicationsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all communications (attachments not included) for a support ticket. &lt;br/&gt;&lt;/br&gt; You can also filter support ticket communications by &lt;i&gt;CreatedDate&lt;/i&gt;�or &lt;i&gt;CommunicationType&lt;/i&gt; using the $filter parameter. The only type of communication supported today is &lt;i&gt;Web&lt;/i&gt;. Output will be a paged result with &lt;i&gt;nextLink&lt;/i&gt;, using which you can retrieve the next set of Communication results. &lt;br/&gt;&lt;br/&gt; Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
     * @param supportTicketName Support ticket name (required)
     * @param subscriptionId Azure subscription id (required)
     * @param apiVersion Api version (required)
     * @param $top The number of values to return in the collection. Default is 10 and max is 10. (optional)
     * @param $filter The filter to apply on the operation. You can filter by communicationType and createdDate properties. CommunicationType supports Equals (&#39;eq&#39;) operator and createdDate supports Greater Than (&#39;gt&#39;) and Greater Than or Equals (&#39;ge&#39;) operators. You may combine the CommunicationType and CreatedDate filters by Logical And (&#39;and&#39;) operator. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved communications for a support ticket. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationsListAsync(String supportTicketName, String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback<CommunicationsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = communicationsListValidateBeforeCall(supportTicketName, subscriptionId, apiVersion, $top, $filter, _callback);
        Type localVarReturnType = new TypeToken<CommunicationsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
