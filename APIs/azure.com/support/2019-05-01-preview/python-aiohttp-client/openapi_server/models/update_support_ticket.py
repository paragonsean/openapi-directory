# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_contact_profile import UpdateContactProfile
from openapi_server import util


class UpdateSupportTicket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_details: UpdateContactProfile=None, severity: str=None):
        """UpdateSupportTicket - a model defined in OpenAPI

        :param contact_details: The contact_details of this UpdateSupportTicket.
        :param severity: The severity of this UpdateSupportTicket.
        """
        self.openapi_types = {
            'contact_details': UpdateContactProfile,
            'severity': str
        }

        self.attribute_map = {
            'contact_details': 'contactDetails',
            'severity': 'severity'
        }

        self._contact_details = contact_details
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSupportTicket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSupportTicket of this UpdateSupportTicket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_details(self):
        """Gets the contact_details of this UpdateSupportTicket.


        :return: The contact_details of this UpdateSupportTicket.
        :rtype: UpdateContactProfile
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this UpdateSupportTicket.


        :param contact_details: The contact_details of this UpdateSupportTicket.
        :type contact_details: UpdateContactProfile
        """

        self._contact_details = contact_details

    @property
    def severity(self):
        """Gets the severity of this UpdateSupportTicket.

        Severity level

        :return: The severity of this UpdateSupportTicket.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this UpdateSupportTicket.

        Severity level

        :param severity: The severity of this UpdateSupportTicket.
        :type severity: str
        """
        allowed_values = ["minimal", "moderate", "critical"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity
