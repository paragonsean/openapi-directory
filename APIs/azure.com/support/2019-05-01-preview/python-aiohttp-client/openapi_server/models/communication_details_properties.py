# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CommunicationDetailsProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, communication_direction: str=None, communication_type: str=None, created_date: datetime=None, sender: str=None, subject: str=None):
        """CommunicationDetailsProperties - a model defined in OpenAPI

        :param body: The body of this CommunicationDetailsProperties.
        :param communication_direction: The communication_direction of this CommunicationDetailsProperties.
        :param communication_type: The communication_type of this CommunicationDetailsProperties.
        :param created_date: The created_date of this CommunicationDetailsProperties.
        :param sender: The sender of this CommunicationDetailsProperties.
        :param subject: The subject of this CommunicationDetailsProperties.
        """
        self.openapi_types = {
            'body': str,
            'communication_direction': str,
            'communication_type': str,
            'created_date': datetime,
            'sender': str,
            'subject': str
        }

        self.attribute_map = {
            'body': 'body',
            'communication_direction': 'communicationDirection',
            'communication_type': 'communicationType',
            'created_date': 'createdDate',
            'sender': 'sender',
            'subject': 'subject'
        }

        self._body = body
        self._communication_direction = communication_direction
        self._communication_type = communication_type
        self._created_date = created_date
        self._sender = sender
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommunicationDetailsProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommunicationDetailsProperties of this CommunicationDetailsProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this CommunicationDetailsProperties.

        Body of the communication

        :return: The body of this CommunicationDetailsProperties.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CommunicationDetailsProperties.

        Body of the communication

        :param body: The body of this CommunicationDetailsProperties.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def communication_direction(self):
        """Gets the communication_direction of this CommunicationDetailsProperties.

        Direction of communication

        :return: The communication_direction of this CommunicationDetailsProperties.
        :rtype: str
        """
        return self._communication_direction

    @communication_direction.setter
    def communication_direction(self, communication_direction):
        """Sets the communication_direction of this CommunicationDetailsProperties.

        Direction of communication

        :param communication_direction: The communication_direction of this CommunicationDetailsProperties.
        :type communication_direction: str
        """
        allowed_values = ["inbound", "outbound"]  # noqa: E501
        if communication_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `communication_direction` ({0}), must be one of {1}"
                .format(communication_direction, allowed_values)
            )

        self._communication_direction = communication_direction

    @property
    def communication_type(self):
        """Gets the communication_type of this CommunicationDetailsProperties.

        Communication type

        :return: The communication_type of this CommunicationDetailsProperties.
        :rtype: str
        """
        return self._communication_type

    @communication_type.setter
    def communication_type(self, communication_type):
        """Sets the communication_type of this CommunicationDetailsProperties.

        Communication type

        :param communication_type: The communication_type of this CommunicationDetailsProperties.
        :type communication_type: str
        """
        allowed_values = ["web", "phone"]  # noqa: E501
        if communication_type not in allowed_values:
            raise ValueError(
                "Invalid value for `communication_type` ({0}), must be one of {1}"
                .format(communication_type, allowed_values)
            )

        self._communication_type = communication_type

    @property
    def created_date(self):
        """Gets the created_date of this CommunicationDetailsProperties.

        Time in UTC (ISO 8601 format) when the communication was created.

        :return: The created_date of this CommunicationDetailsProperties.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CommunicationDetailsProperties.

        Time in UTC (ISO 8601 format) when the communication was created.

        :param created_date: The created_date of this CommunicationDetailsProperties.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def sender(self):
        """Gets the sender of this CommunicationDetailsProperties.

        Email address of the sender

        :return: The sender of this CommunicationDetailsProperties.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this CommunicationDetailsProperties.

        Email address of the sender

        :param sender: The sender of this CommunicationDetailsProperties.
        :type sender: str
        """

        self._sender = sender

    @property
    def subject(self):
        """Gets the subject of this CommunicationDetailsProperties.

        Subject of the communication

        :return: The subject of this CommunicationDetailsProperties.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CommunicationDetailsProperties.

        Subject of the communication

        :param subject: The subject of this CommunicationDetailsProperties.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject
