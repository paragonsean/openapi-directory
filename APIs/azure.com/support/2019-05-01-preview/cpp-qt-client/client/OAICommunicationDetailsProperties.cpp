/**
 * Microsoft.Support
 * Microsoft Azure Support Resource Provider.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommunicationDetailsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommunicationDetailsProperties::OAICommunicationDetailsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommunicationDetailsProperties::OAICommunicationDetailsProperties() {
    this->initializeModel();
}

OAICommunicationDetailsProperties::~OAICommunicationDetailsProperties() {}

void OAICommunicationDetailsProperties::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_communication_direction_isSet = false;
    m_communication_direction_isValid = false;

    m_communication_type_isSet = false;
    m_communication_type_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAICommunicationDetailsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommunicationDetailsProperties::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_communication_direction_isValid = ::OpenAPI::fromJsonValue(m_communication_direction, json[QString("communicationDirection")]);
    m_communication_direction_isSet = !json[QString("communicationDirection")].isNull() && m_communication_direction_isValid;

    m_communication_type_isValid = ::OpenAPI::fromJsonValue(m_communication_type, json[QString("communicationType")]);
    m_communication_type_isSet = !json[QString("communicationType")].isNull() && m_communication_type_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAICommunicationDetailsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommunicationDetailsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_communication_direction_isSet) {
        obj.insert(QString("communicationDirection"), ::OpenAPI::toJsonValue(m_communication_direction));
    }
    if (m_communication_type_isSet) {
        obj.insert(QString("communicationType"), ::OpenAPI::toJsonValue(m_communication_type));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_sender_isSet) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAICommunicationDetailsProperties::getBody() const {
    return m_body;
}
void OAICommunicationDetailsProperties::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAICommunicationDetailsProperties::is_body_Set() const{
    return m_body_isSet;
}

bool OAICommunicationDetailsProperties::is_body_Valid() const{
    return m_body_isValid;
}

QString OAICommunicationDetailsProperties::getCommunicationDirection() const {
    return m_communication_direction;
}
void OAICommunicationDetailsProperties::setCommunicationDirection(const QString &communication_direction) {
    m_communication_direction = communication_direction;
    m_communication_direction_isSet = true;
}

bool OAICommunicationDetailsProperties::is_communication_direction_Set() const{
    return m_communication_direction_isSet;
}

bool OAICommunicationDetailsProperties::is_communication_direction_Valid() const{
    return m_communication_direction_isValid;
}

QString OAICommunicationDetailsProperties::getCommunicationType() const {
    return m_communication_type;
}
void OAICommunicationDetailsProperties::setCommunicationType(const QString &communication_type) {
    m_communication_type = communication_type;
    m_communication_type_isSet = true;
}

bool OAICommunicationDetailsProperties::is_communication_type_Set() const{
    return m_communication_type_isSet;
}

bool OAICommunicationDetailsProperties::is_communication_type_Valid() const{
    return m_communication_type_isValid;
}

QDateTime OAICommunicationDetailsProperties::getCreatedDate() const {
    return m_created_date;
}
void OAICommunicationDetailsProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAICommunicationDetailsProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAICommunicationDetailsProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAICommunicationDetailsProperties::getSender() const {
    return m_sender;
}
void OAICommunicationDetailsProperties::setSender(const QString &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAICommunicationDetailsProperties::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAICommunicationDetailsProperties::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAICommunicationDetailsProperties::getSubject() const {
    return m_subject;
}
void OAICommunicationDetailsProperties::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICommunicationDetailsProperties::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICommunicationDetailsProperties::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAICommunicationDetailsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_communication_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_communication_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommunicationDetailsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_isValid && m_subject_isValid && true;
}

} // namespace OpenAPI
