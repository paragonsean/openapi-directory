/**
 * Microsoft.Support
 * Microsoft Azure Support Resource Provider.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactProfile::OAIContactProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactProfile::OAIContactProfile() {
    this->initializeModel();
}

OAIContactProfile::~OAIContactProfile() {}

void OAIContactProfile::initializeModel() {

    m_additional_email_addresses_isSet = false;
    m_additional_email_addresses_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_preferred_contact_method_isSet = false;
    m_preferred_contact_method_isValid = false;

    m_preferred_support_language_isSet = false;
    m_preferred_support_language_isValid = false;

    m_preferred_time_zone_isSet = false;
    m_preferred_time_zone_isValid = false;

    m_primary_email_address_isSet = false;
    m_primary_email_address_isValid = false;
}

void OAIContactProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactProfile::fromJsonObject(QJsonObject json) {

    m_additional_email_addresses_isValid = ::OpenAPI::fromJsonValue(m_additional_email_addresses, json[QString("additionalEmailAddresses")]);
    m_additional_email_addresses_isSet = !json[QString("additionalEmailAddresses")].isNull() && m_additional_email_addresses_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_preferred_contact_method_isValid = ::OpenAPI::fromJsonValue(m_preferred_contact_method, json[QString("preferredContactMethod")]);
    m_preferred_contact_method_isSet = !json[QString("preferredContactMethod")].isNull() && m_preferred_contact_method_isValid;

    m_preferred_support_language_isValid = ::OpenAPI::fromJsonValue(m_preferred_support_language, json[QString("preferredSupportLanguage")]);
    m_preferred_support_language_isSet = !json[QString("preferredSupportLanguage")].isNull() && m_preferred_support_language_isValid;

    m_preferred_time_zone_isValid = ::OpenAPI::fromJsonValue(m_preferred_time_zone, json[QString("preferredTimeZone")]);
    m_preferred_time_zone_isSet = !json[QString("preferredTimeZone")].isNull() && m_preferred_time_zone_isValid;

    m_primary_email_address_isValid = ::OpenAPI::fromJsonValue(m_primary_email_address, json[QString("primaryEmailAddress")]);
    m_primary_email_address_isSet = !json[QString("primaryEmailAddress")].isNull() && m_primary_email_address_isValid;
}

QString OAIContactProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_email_addresses.size() > 0) {
        obj.insert(QString("additionalEmailAddresses"), ::OpenAPI::toJsonValue(m_additional_email_addresses));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_preferred_contact_method_isSet) {
        obj.insert(QString("preferredContactMethod"), ::OpenAPI::toJsonValue(m_preferred_contact_method));
    }
    if (m_preferred_support_language_isSet) {
        obj.insert(QString("preferredSupportLanguage"), ::OpenAPI::toJsonValue(m_preferred_support_language));
    }
    if (m_preferred_time_zone_isSet) {
        obj.insert(QString("preferredTimeZone"), ::OpenAPI::toJsonValue(m_preferred_time_zone));
    }
    if (m_primary_email_address_isSet) {
        obj.insert(QString("primaryEmailAddress"), ::OpenAPI::toJsonValue(m_primary_email_address));
    }
    return obj;
}

QList<QString> OAIContactProfile::getAdditionalEmailAddresses() const {
    return m_additional_email_addresses;
}
void OAIContactProfile::setAdditionalEmailAddresses(const QList<QString> &additional_email_addresses) {
    m_additional_email_addresses = additional_email_addresses;
    m_additional_email_addresses_isSet = true;
}

bool OAIContactProfile::is_additional_email_addresses_Set() const{
    return m_additional_email_addresses_isSet;
}

bool OAIContactProfile::is_additional_email_addresses_Valid() const{
    return m_additional_email_addresses_isValid;
}

QString OAIContactProfile::getCountry() const {
    return m_country;
}
void OAIContactProfile::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIContactProfile::is_country_Set() const{
    return m_country_isSet;
}

bool OAIContactProfile::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIContactProfile::getFirstName() const {
    return m_first_name;
}
void OAIContactProfile::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIContactProfile::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIContactProfile::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIContactProfile::getLastName() const {
    return m_last_name;
}
void OAIContactProfile::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIContactProfile::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIContactProfile::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIContactProfile::getPhoneNumber() const {
    return m_phone_number;
}
void OAIContactProfile::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIContactProfile::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIContactProfile::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIContactProfile::getPreferredContactMethod() const {
    return m_preferred_contact_method;
}
void OAIContactProfile::setPreferredContactMethod(const QString &preferred_contact_method) {
    m_preferred_contact_method = preferred_contact_method;
    m_preferred_contact_method_isSet = true;
}

bool OAIContactProfile::is_preferred_contact_method_Set() const{
    return m_preferred_contact_method_isSet;
}

bool OAIContactProfile::is_preferred_contact_method_Valid() const{
    return m_preferred_contact_method_isValid;
}

QString OAIContactProfile::getPreferredSupportLanguage() const {
    return m_preferred_support_language;
}
void OAIContactProfile::setPreferredSupportLanguage(const QString &preferred_support_language) {
    m_preferred_support_language = preferred_support_language;
    m_preferred_support_language_isSet = true;
}

bool OAIContactProfile::is_preferred_support_language_Set() const{
    return m_preferred_support_language_isSet;
}

bool OAIContactProfile::is_preferred_support_language_Valid() const{
    return m_preferred_support_language_isValid;
}

QString OAIContactProfile::getPreferredTimeZone() const {
    return m_preferred_time_zone;
}
void OAIContactProfile::setPreferredTimeZone(const QString &preferred_time_zone) {
    m_preferred_time_zone = preferred_time_zone;
    m_preferred_time_zone_isSet = true;
}

bool OAIContactProfile::is_preferred_time_zone_Set() const{
    return m_preferred_time_zone_isSet;
}

bool OAIContactProfile::is_preferred_time_zone_Valid() const{
    return m_preferred_time_zone_isValid;
}

QString OAIContactProfile::getPrimaryEmailAddress() const {
    return m_primary_email_address;
}
void OAIContactProfile::setPrimaryEmailAddress(const QString &primary_email_address) {
    m_primary_email_address = primary_email_address;
    m_primary_email_address_isSet = true;
}

bool OAIContactProfile::is_primary_email_address_Set() const{
    return m_primary_email_address_isSet;
}

bool OAIContactProfile::is_primary_email_address_Valid() const{
    return m_primary_email_address_isValid;
}

bool OAIContactProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_email_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_contact_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_support_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_first_name_isValid && m_last_name_isValid && m_preferred_contact_method_isValid && m_preferred_support_language_isValid && m_preferred_time_zone_isValid && m_primary_email_address_isValid && true;
}

} // namespace OpenAPI
