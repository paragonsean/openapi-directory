/**
 * Microsoft.Support
 * Microsoft Azure Support Resource Provider.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupportTicketDetailsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupportTicketDetailsProperties::OAISupportTicketDetailsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupportTicketDetailsProperties::OAISupportTicketDetailsProperties() {
    this->initializeModel();
}

OAISupportTicketDetailsProperties::~OAISupportTicketDetailsProperties() {}

void OAISupportTicketDetailsProperties::initializeModel() {

    m_contact_details_isSet = false;
    m_contact_details_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enrollment_id_isSet = false;
    m_enrollment_id_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_problem_classification_display_name_isSet = false;
    m_problem_classification_display_name_isValid = false;

    m_problem_classification_id_isSet = false;
    m_problem_classification_id_isValid = false;

    m_problem_start_time_isSet = false;
    m_problem_start_time_isValid = false;

    m_production_outage_isSet = false;
    m_production_outage_isValid = false;

    m_quota_ticket_details_isSet = false;
    m_quota_ticket_details_isValid = false;

    m_require24_x7_response_isSet = false;
    m_require24_x7_response_isValid = false;

    m_service_display_name_isSet = false;
    m_service_display_name_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_level_agreement_isSet = false;
    m_service_level_agreement_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_support_engineer_isSet = false;
    m_support_engineer_isValid = false;

    m_support_plan_type_isSet = false;
    m_support_plan_type_isValid = false;

    m_support_ticket_id_isSet = false;
    m_support_ticket_id_isValid = false;

    m_technical_ticket_details_isSet = false;
    m_technical_ticket_details_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISupportTicketDetailsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupportTicketDetailsProperties::fromJsonObject(QJsonObject json) {

    m_contact_details_isValid = ::OpenAPI::fromJsonValue(m_contact_details, json[QString("contactDetails")]);
    m_contact_details_isSet = !json[QString("contactDetails")].isNull() && m_contact_details_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enrollment_id_isValid = ::OpenAPI::fromJsonValue(m_enrollment_id, json[QString("enrollmentId")]);
    m_enrollment_id_isSet = !json[QString("enrollmentId")].isNull() && m_enrollment_id_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_problem_classification_display_name_isValid = ::OpenAPI::fromJsonValue(m_problem_classification_display_name, json[QString("problemClassificationDisplayName")]);
    m_problem_classification_display_name_isSet = !json[QString("problemClassificationDisplayName")].isNull() && m_problem_classification_display_name_isValid;

    m_problem_classification_id_isValid = ::OpenAPI::fromJsonValue(m_problem_classification_id, json[QString("problemClassificationId")]);
    m_problem_classification_id_isSet = !json[QString("problemClassificationId")].isNull() && m_problem_classification_id_isValid;

    m_problem_start_time_isValid = ::OpenAPI::fromJsonValue(m_problem_start_time, json[QString("problemStartTime")]);
    m_problem_start_time_isSet = !json[QString("problemStartTime")].isNull() && m_problem_start_time_isValid;

    m_production_outage_isValid = ::OpenAPI::fromJsonValue(m_production_outage, json[QString("productionOutage")]);
    m_production_outage_isSet = !json[QString("productionOutage")].isNull() && m_production_outage_isValid;

    m_quota_ticket_details_isValid = ::OpenAPI::fromJsonValue(m_quota_ticket_details, json[QString("quotaTicketDetails")]);
    m_quota_ticket_details_isSet = !json[QString("quotaTicketDetails")].isNull() && m_quota_ticket_details_isValid;

    m_require24_x7_response_isValid = ::OpenAPI::fromJsonValue(m_require24_x7_response, json[QString("require24X7Response")]);
    m_require24_x7_response_isSet = !json[QString("require24X7Response")].isNull() && m_require24_x7_response_isValid;

    m_service_display_name_isValid = ::OpenAPI::fromJsonValue(m_service_display_name, json[QString("serviceDisplayName")]);
    m_service_display_name_isSet = !json[QString("serviceDisplayName")].isNull() && m_service_display_name_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_level_agreement_isValid = ::OpenAPI::fromJsonValue(m_service_level_agreement, json[QString("serviceLevelAgreement")]);
    m_service_level_agreement_isSet = !json[QString("serviceLevelAgreement")].isNull() && m_service_level_agreement_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_support_engineer_isValid = ::OpenAPI::fromJsonValue(m_support_engineer, json[QString("supportEngineer")]);
    m_support_engineer_isSet = !json[QString("supportEngineer")].isNull() && m_support_engineer_isValid;

    m_support_plan_type_isValid = ::OpenAPI::fromJsonValue(m_support_plan_type, json[QString("supportPlanType")]);
    m_support_plan_type_isSet = !json[QString("supportPlanType")].isNull() && m_support_plan_type_isValid;

    m_support_ticket_id_isValid = ::OpenAPI::fromJsonValue(m_support_ticket_id, json[QString("supportTicketId")]);
    m_support_ticket_id_isSet = !json[QString("supportTicketId")].isNull() && m_support_ticket_id_isValid;

    m_technical_ticket_details_isValid = ::OpenAPI::fromJsonValue(m_technical_ticket_details, json[QString("technicalTicketDetails")]);
    m_technical_ticket_details_isSet = !json[QString("technicalTicketDetails")].isNull() && m_technical_ticket_details_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISupportTicketDetailsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupportTicketDetailsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_details.isSet()) {
        obj.insert(QString("contactDetails"), ::OpenAPI::toJsonValue(m_contact_details));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enrollment_id_isSet) {
        obj.insert(QString("enrollmentId"), ::OpenAPI::toJsonValue(m_enrollment_id));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_problem_classification_display_name_isSet) {
        obj.insert(QString("problemClassificationDisplayName"), ::OpenAPI::toJsonValue(m_problem_classification_display_name));
    }
    if (m_problem_classification_id_isSet) {
        obj.insert(QString("problemClassificationId"), ::OpenAPI::toJsonValue(m_problem_classification_id));
    }
    if (m_problem_start_time_isSet) {
        obj.insert(QString("problemStartTime"), ::OpenAPI::toJsonValue(m_problem_start_time));
    }
    if (m_production_outage_isSet) {
        obj.insert(QString("productionOutage"), ::OpenAPI::toJsonValue(m_production_outage));
    }
    if (m_quota_ticket_details.isSet()) {
        obj.insert(QString("quotaTicketDetails"), ::OpenAPI::toJsonValue(m_quota_ticket_details));
    }
    if (m_require24_x7_response_isSet) {
        obj.insert(QString("require24X7Response"), ::OpenAPI::toJsonValue(m_require24_x7_response));
    }
    if (m_service_display_name_isSet) {
        obj.insert(QString("serviceDisplayName"), ::OpenAPI::toJsonValue(m_service_display_name));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_level_agreement.isSet()) {
        obj.insert(QString("serviceLevelAgreement"), ::OpenAPI::toJsonValue(m_service_level_agreement));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_support_engineer.isSet()) {
        obj.insert(QString("supportEngineer"), ::OpenAPI::toJsonValue(m_support_engineer));
    }
    if (m_support_plan_type_isSet) {
        obj.insert(QString("supportPlanType"), ::OpenAPI::toJsonValue(m_support_plan_type));
    }
    if (m_support_ticket_id_isSet) {
        obj.insert(QString("supportTicketId"), ::OpenAPI::toJsonValue(m_support_ticket_id));
    }
    if (m_technical_ticket_details.isSet()) {
        obj.insert(QString("technicalTicketDetails"), ::OpenAPI::toJsonValue(m_technical_ticket_details));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIContactProfile OAISupportTicketDetailsProperties::getContactDetails() const {
    return m_contact_details;
}
void OAISupportTicketDetailsProperties::setContactDetails(const OAIContactProfile &contact_details) {
    m_contact_details = contact_details;
    m_contact_details_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_contact_details_Set() const{
    return m_contact_details_isSet;
}

bool OAISupportTicketDetailsProperties::is_contact_details_Valid() const{
    return m_contact_details_isValid;
}

QDateTime OAISupportTicketDetailsProperties::getCreatedDate() const {
    return m_created_date;
}
void OAISupportTicketDetailsProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAISupportTicketDetailsProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAISupportTicketDetailsProperties::getDescription() const {
    return m_description;
}
void OAISupportTicketDetailsProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAISupportTicketDetailsProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISupportTicketDetailsProperties::getEnrollmentId() const {
    return m_enrollment_id;
}
void OAISupportTicketDetailsProperties::setEnrollmentId(const QString &enrollment_id) {
    m_enrollment_id = enrollment_id;
    m_enrollment_id_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_enrollment_id_Set() const{
    return m_enrollment_id_isSet;
}

bool OAISupportTicketDetailsProperties::is_enrollment_id_Valid() const{
    return m_enrollment_id_isValid;
}

QDateTime OAISupportTicketDetailsProperties::getModifiedDate() const {
    return m_modified_date;
}
void OAISupportTicketDetailsProperties::setModifiedDate(const QDateTime &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAISupportTicketDetailsProperties::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAISupportTicketDetailsProperties::getProblemClassificationDisplayName() const {
    return m_problem_classification_display_name;
}
void OAISupportTicketDetailsProperties::setProblemClassificationDisplayName(const QString &problem_classification_display_name) {
    m_problem_classification_display_name = problem_classification_display_name;
    m_problem_classification_display_name_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_problem_classification_display_name_Set() const{
    return m_problem_classification_display_name_isSet;
}

bool OAISupportTicketDetailsProperties::is_problem_classification_display_name_Valid() const{
    return m_problem_classification_display_name_isValid;
}

QString OAISupportTicketDetailsProperties::getProblemClassificationId() const {
    return m_problem_classification_id;
}
void OAISupportTicketDetailsProperties::setProblemClassificationId(const QString &problem_classification_id) {
    m_problem_classification_id = problem_classification_id;
    m_problem_classification_id_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_problem_classification_id_Set() const{
    return m_problem_classification_id_isSet;
}

bool OAISupportTicketDetailsProperties::is_problem_classification_id_Valid() const{
    return m_problem_classification_id_isValid;
}

QDateTime OAISupportTicketDetailsProperties::getProblemStartTime() const {
    return m_problem_start_time;
}
void OAISupportTicketDetailsProperties::setProblemStartTime(const QDateTime &problem_start_time) {
    m_problem_start_time = problem_start_time;
    m_problem_start_time_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_problem_start_time_Set() const{
    return m_problem_start_time_isSet;
}

bool OAISupportTicketDetailsProperties::is_problem_start_time_Valid() const{
    return m_problem_start_time_isValid;
}

bool OAISupportTicketDetailsProperties::isProductionOutage() const {
    return m_production_outage;
}
void OAISupportTicketDetailsProperties::setProductionOutage(const bool &production_outage) {
    m_production_outage = production_outage;
    m_production_outage_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_production_outage_Set() const{
    return m_production_outage_isSet;
}

bool OAISupportTicketDetailsProperties::is_production_outage_Valid() const{
    return m_production_outage_isValid;
}

OAIQuotaTicketDetails OAISupportTicketDetailsProperties::getQuotaTicketDetails() const {
    return m_quota_ticket_details;
}
void OAISupportTicketDetailsProperties::setQuotaTicketDetails(const OAIQuotaTicketDetails &quota_ticket_details) {
    m_quota_ticket_details = quota_ticket_details;
    m_quota_ticket_details_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_quota_ticket_details_Set() const{
    return m_quota_ticket_details_isSet;
}

bool OAISupportTicketDetailsProperties::is_quota_ticket_details_Valid() const{
    return m_quota_ticket_details_isValid;
}

bool OAISupportTicketDetailsProperties::isRequire24X7Response() const {
    return m_require24_x7_response;
}
void OAISupportTicketDetailsProperties::setRequire24X7Response(const bool &require24_x7_response) {
    m_require24_x7_response = require24_x7_response;
    m_require24_x7_response_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_require24_x7_response_Set() const{
    return m_require24_x7_response_isSet;
}

bool OAISupportTicketDetailsProperties::is_require24_x7_response_Valid() const{
    return m_require24_x7_response_isValid;
}

QString OAISupportTicketDetailsProperties::getServiceDisplayName() const {
    return m_service_display_name;
}
void OAISupportTicketDetailsProperties::setServiceDisplayName(const QString &service_display_name) {
    m_service_display_name = service_display_name;
    m_service_display_name_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_service_display_name_Set() const{
    return m_service_display_name_isSet;
}

bool OAISupportTicketDetailsProperties::is_service_display_name_Valid() const{
    return m_service_display_name_isValid;
}

QString OAISupportTicketDetailsProperties::getServiceId() const {
    return m_service_id;
}
void OAISupportTicketDetailsProperties::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAISupportTicketDetailsProperties::is_service_id_Valid() const{
    return m_service_id_isValid;
}

OAIServiceLevelAgreement OAISupportTicketDetailsProperties::getServiceLevelAgreement() const {
    return m_service_level_agreement;
}
void OAISupportTicketDetailsProperties::setServiceLevelAgreement(const OAIServiceLevelAgreement &service_level_agreement) {
    m_service_level_agreement = service_level_agreement;
    m_service_level_agreement_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_service_level_agreement_Set() const{
    return m_service_level_agreement_isSet;
}

bool OAISupportTicketDetailsProperties::is_service_level_agreement_Valid() const{
    return m_service_level_agreement_isValid;
}

QString OAISupportTicketDetailsProperties::getSeverity() const {
    return m_severity;
}
void OAISupportTicketDetailsProperties::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAISupportTicketDetailsProperties::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAISupportTicketDetailsProperties::getStatus() const {
    return m_status;
}
void OAISupportTicketDetailsProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAISupportTicketDetailsProperties::is_status_Valid() const{
    return m_status_isValid;
}

OAISupportEngineer OAISupportTicketDetailsProperties::getSupportEngineer() const {
    return m_support_engineer;
}
void OAISupportTicketDetailsProperties::setSupportEngineer(const OAISupportEngineer &support_engineer) {
    m_support_engineer = support_engineer;
    m_support_engineer_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_support_engineer_Set() const{
    return m_support_engineer_isSet;
}

bool OAISupportTicketDetailsProperties::is_support_engineer_Valid() const{
    return m_support_engineer_isValid;
}

QString OAISupportTicketDetailsProperties::getSupportPlanType() const {
    return m_support_plan_type;
}
void OAISupportTicketDetailsProperties::setSupportPlanType(const QString &support_plan_type) {
    m_support_plan_type = support_plan_type;
    m_support_plan_type_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_support_plan_type_Set() const{
    return m_support_plan_type_isSet;
}

bool OAISupportTicketDetailsProperties::is_support_plan_type_Valid() const{
    return m_support_plan_type_isValid;
}

QString OAISupportTicketDetailsProperties::getSupportTicketId() const {
    return m_support_ticket_id;
}
void OAISupportTicketDetailsProperties::setSupportTicketId(const QString &support_ticket_id) {
    m_support_ticket_id = support_ticket_id;
    m_support_ticket_id_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_support_ticket_id_Set() const{
    return m_support_ticket_id_isSet;
}

bool OAISupportTicketDetailsProperties::is_support_ticket_id_Valid() const{
    return m_support_ticket_id_isValid;
}

OAITechnicalTicketDetails OAISupportTicketDetailsProperties::getTechnicalTicketDetails() const {
    return m_technical_ticket_details;
}
void OAISupportTicketDetailsProperties::setTechnicalTicketDetails(const OAITechnicalTicketDetails &technical_ticket_details) {
    m_technical_ticket_details = technical_ticket_details;
    m_technical_ticket_details_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_technical_ticket_details_Set() const{
    return m_technical_ticket_details_isSet;
}

bool OAISupportTicketDetailsProperties::is_technical_ticket_details_Valid() const{
    return m_technical_ticket_details_isValid;
}

QString OAISupportTicketDetailsProperties::getTitle() const {
    return m_title;
}
void OAISupportTicketDetailsProperties::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISupportTicketDetailsProperties::is_title_Set() const{
    return m_title_isSet;
}

bool OAISupportTicketDetailsProperties::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISupportTicketDetailsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrollment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_problem_classification_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_problem_classification_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_problem_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_outage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_ticket_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_require24_x7_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_level_agreement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_engineer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_plan_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_ticket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_technical_ticket_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupportTicketDetailsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_details_isValid && m_description_isValid && m_problem_classification_id_isValid && m_service_id_isValid && m_severity_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
