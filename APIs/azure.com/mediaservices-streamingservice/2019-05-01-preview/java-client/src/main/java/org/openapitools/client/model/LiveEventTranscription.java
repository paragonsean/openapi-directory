/*
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LiveEventInputTrackSelection;
import org.openapitools.client.model.LiveEventOutputTranscriptionTrack;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the transcription tracks in the output of a Live Event, generated using speech-to-text transcription.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:02.865231-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveEventTranscription {
  public static final String SERIALIZED_NAME_INPUT_TRACK_SELECTION = "inputTrackSelection";
  @SerializedName(SERIALIZED_NAME_INPUT_TRACK_SELECTION)
  private List<LiveEventInputTrackSelection> inputTrackSelection = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_OUTPUT_TRANSCRIPTION_TRACK = "outputTranscriptionTrack";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TRANSCRIPTION_TRACK)
  private LiveEventOutputTranscriptionTrack outputTranscriptionTrack;

  public LiveEventTranscription() {
  }

  public LiveEventTranscription inputTrackSelection(List<LiveEventInputTrackSelection> inputTrackSelection) {
    this.inputTrackSelection = inputTrackSelection;
    return this;
  }

  public LiveEventTranscription addInputTrackSelectionItem(LiveEventInputTrackSelection inputTrackSelectionItem) {
    if (this.inputTrackSelection == null) {
      this.inputTrackSelection = new ArrayList<>();
    }
    this.inputTrackSelection.add(inputTrackSelectionItem);
    return this;
  }

  /**
   * Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied.
   * @return inputTrackSelection
   */
  @javax.annotation.Nullable
  public List<LiveEventInputTrackSelection> getInputTrackSelection() {
    return inputTrackSelection;
  }

  public void setInputTrackSelection(List<LiveEventInputTrackSelection> inputTrackSelection) {
    this.inputTrackSelection = inputTrackSelection;
  }


  public LiveEventTranscription language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Specifies the language (locale) used for speech-to-text transcription ï¿½ it should match the spoken language in the audio track. The value should be in BCP-47 format of &#39;language tag-region&#39; (e.g: &#39;en-US&#39;). The list of supported languages are &#39;en-US&#39; and &#39;en-GB&#39;.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public LiveEventTranscription outputTranscriptionTrack(LiveEventOutputTranscriptionTrack outputTranscriptionTrack) {
    this.outputTranscriptionTrack = outputTranscriptionTrack;
    return this;
  }

  /**
   * Get outputTranscriptionTrack
   * @return outputTranscriptionTrack
   */
  @javax.annotation.Nullable
  public LiveEventOutputTranscriptionTrack getOutputTranscriptionTrack() {
    return outputTranscriptionTrack;
  }

  public void setOutputTranscriptionTrack(LiveEventOutputTranscriptionTrack outputTranscriptionTrack) {
    this.outputTranscriptionTrack = outputTranscriptionTrack;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveEventTranscription liveEventTranscription = (LiveEventTranscription) o;
    return Objects.equals(this.inputTrackSelection, liveEventTranscription.inputTrackSelection) &&
        Objects.equals(this.language, liveEventTranscription.language) &&
        Objects.equals(this.outputTranscriptionTrack, liveEventTranscription.outputTranscriptionTrack);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputTrackSelection, language, outputTranscriptionTrack);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveEventTranscription {\n");
    sb.append("    inputTrackSelection: ").append(toIndentedString(inputTrackSelection)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    outputTranscriptionTrack: ").append(toIndentedString(outputTranscriptionTrack)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inputTrackSelection");
    openapiFields.add("language");
    openapiFields.add("outputTranscriptionTrack");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveEventTranscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveEventTranscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveEventTranscription is not found in the empty JSON string", LiveEventTranscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveEventTranscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveEventTranscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("inputTrackSelection") != null && !jsonObj.get("inputTrackSelection").isJsonNull()) {
        JsonArray jsonArrayinputTrackSelection = jsonObj.getAsJsonArray("inputTrackSelection");
        if (jsonArrayinputTrackSelection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputTrackSelection").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputTrackSelection` to be an array in the JSON string but got `%s`", jsonObj.get("inputTrackSelection").toString()));
          }

          // validate the optional field `inputTrackSelection` (array)
          for (int i = 0; i < jsonArrayinputTrackSelection.size(); i++) {
            LiveEventInputTrackSelection.validateJsonElement(jsonArrayinputTrackSelection.get(i));
          };
        }
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `outputTranscriptionTrack`
      if (jsonObj.get("outputTranscriptionTrack") != null && !jsonObj.get("outputTranscriptionTrack").isJsonNull()) {
        LiveEventOutputTranscriptionTrack.validateJsonElement(jsonObj.get("outputTranscriptionTrack"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveEventTranscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveEventTranscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveEventTranscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveEventTranscription.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveEventTranscription>() {
           @Override
           public void write(JsonWriter out, LiveEventTranscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveEventTranscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveEventTranscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveEventTranscription
   * @throws IOException if the JSON string is invalid with respect to LiveEventTranscription
   */
  public static LiveEventTranscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveEventTranscription.class);
  }

  /**
   * Convert an instance of LiveEventTranscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

