/*
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CrossSiteAccessPolicies;
import org.openapitools.client.model.LiveEventEncoding;
import org.openapitools.client.model.LiveEventInput;
import org.openapitools.client.model.LiveEventPreview;
import org.openapitools.client.model.LiveEventTranscription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Live Event properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:02.865231-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveEventProperties {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CROSS_SITE_ACCESS_POLICIES = "crossSiteAccessPolicies";
  @SerializedName(SERIALIZED_NAME_CROSS_SITE_ACCESS_POLICIES)
  private CrossSiteAccessPolicies crossSiteAccessPolicies;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private LiveEventEncoding encoding;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private LiveEventInput input;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_PREVIEW = "preview";
  @SerializedName(SERIALIZED_NAME_PREVIEW)
  private LiveEventPreview preview;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  /**
   * The resource state of the Live Event.
   */
  @JsonAdapter(ResourceStateEnum.Adapter.class)
  public enum ResourceStateEnum {
    STOPPED("Stopped"),
    
    STARTING("Starting"),
    
    RUNNING("Running"),
    
    STOPPING("Stopping"),
    
    DELETING("Deleting");

    private String value;

    ResourceStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceStateEnum fromValue(String value) {
      for (ResourceStateEnum b : ResourceStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_STATE = "resourceState";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATE)
  private ResourceStateEnum resourceState;

  /**
   * Gets or Sets streamOptions
   */
  @JsonAdapter(StreamOptionsEnum.Adapter.class)
  public enum StreamOptionsEnum {
    DEFAULT("Default"),
    
    LOW_LATENCY("LowLatency");

    private String value;

    StreamOptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreamOptionsEnum fromValue(String value) {
      for (StreamOptionsEnum b : StreamOptionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreamOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreamOptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreamOptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreamOptionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StreamOptionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STREAM_OPTIONS = "streamOptions";
  @SerializedName(SERIALIZED_NAME_STREAM_OPTIONS)
  private List<StreamOptionsEnum> streamOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSCRIPTIONS = "transcriptions";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPTIONS)
  private List<LiveEventTranscription> transcriptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_VANITY_URL = "vanityUrl";
  @SerializedName(SERIALIZED_NAME_VANITY_URL)
  private Boolean vanityUrl;

  public LiveEventProperties() {
  }

  public LiveEventProperties(
     OffsetDateTime created, 
     OffsetDateTime lastModified, 
     String provisioningState, 
     ResourceStateEnum resourceState
  ) {
    this();
    this.created = created;
    this.lastModified = lastModified;
    this.provisioningState = provisioningState;
    this.resourceState = resourceState;
  }

  /**
   * The exact time the Live Event was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public LiveEventProperties crossSiteAccessPolicies(CrossSiteAccessPolicies crossSiteAccessPolicies) {
    this.crossSiteAccessPolicies = crossSiteAccessPolicies;
    return this;
  }

  /**
   * Get crossSiteAccessPolicies
   * @return crossSiteAccessPolicies
   */
  @javax.annotation.Nullable
  public CrossSiteAccessPolicies getCrossSiteAccessPolicies() {
    return crossSiteAccessPolicies;
  }

  public void setCrossSiteAccessPolicies(CrossSiteAccessPolicies crossSiteAccessPolicies) {
    this.crossSiteAccessPolicies = crossSiteAccessPolicies;
  }


  public LiveEventProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The Live Event description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LiveEventProperties encoding(LiveEventEncoding encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Get encoding
   * @return encoding
   */
  @javax.annotation.Nullable
  public LiveEventEncoding getEncoding() {
    return encoding;
  }

  public void setEncoding(LiveEventEncoding encoding) {
    this.encoding = encoding;
  }


  public LiveEventProperties input(LiveEventInput input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nonnull
  public LiveEventInput getInput() {
    return input;
  }

  public void setInput(LiveEventInput input) {
    this.input = input;
  }


  /**
   * The exact time the Live Event was last modified.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }



  public LiveEventProperties preview(LiveEventPreview preview) {
    this.preview = preview;
    return this;
  }

  /**
   * Get preview
   * @return preview
   */
  @javax.annotation.Nullable
  public LiveEventPreview getPreview() {
    return preview;
  }

  public void setPreview(LiveEventPreview preview) {
    this.preview = preview;
  }


  /**
   * The provisioning state of the Live Event.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * The resource state of the Live Event.
   * @return resourceState
   */
  @javax.annotation.Nullable
  public ResourceStateEnum getResourceState() {
    return resourceState;
  }



  public LiveEventProperties streamOptions(List<StreamOptionsEnum> streamOptions) {
    this.streamOptions = streamOptions;
    return this;
  }

  public LiveEventProperties addStreamOptionsItem(StreamOptionsEnum streamOptionsItem) {
    if (this.streamOptions == null) {
      this.streamOptions = new ArrayList<>();
    }
    this.streamOptions.add(streamOptionsItem);
    return this;
  }

  /**
   * The options to use for the LiveEvent.  This value is specified at creation time and cannot be updated.
   * @return streamOptions
   */
  @javax.annotation.Nullable
  public List<StreamOptionsEnum> getStreamOptions() {
    return streamOptions;
  }

  public void setStreamOptions(List<StreamOptionsEnum> streamOptions) {
    this.streamOptions = streamOptions;
  }


  public LiveEventProperties transcriptions(List<LiveEventTranscription> transcriptions) {
    this.transcriptions = transcriptions;
    return this;
  }

  public LiveEventProperties addTranscriptionsItem(LiveEventTranscription transcriptionsItem) {
    if (this.transcriptions == null) {
      this.transcriptions = new ArrayList<>();
    }
    this.transcriptions.add(transcriptionsItem);
    return this;
  }

  /**
   * The Live Event transcription.
   * @return transcriptions
   */
  @javax.annotation.Nullable
  public List<LiveEventTranscription> getTranscriptions() {
    return transcriptions;
  }

  public void setTranscriptions(List<LiveEventTranscription> transcriptions) {
    this.transcriptions = transcriptions;
  }


  public LiveEventProperties vanityUrl(Boolean vanityUrl) {
    this.vanityUrl = vanityUrl;
    return this;
  }

  /**
   * Specifies whether to use a vanity url with the Live Event.  This value is specified at creation time and cannot be updated.
   * @return vanityUrl
   */
  @javax.annotation.Nullable
  public Boolean getVanityUrl() {
    return vanityUrl;
  }

  public void setVanityUrl(Boolean vanityUrl) {
    this.vanityUrl = vanityUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveEventProperties liveEventProperties = (LiveEventProperties) o;
    return Objects.equals(this.created, liveEventProperties.created) &&
        Objects.equals(this.crossSiteAccessPolicies, liveEventProperties.crossSiteAccessPolicies) &&
        Objects.equals(this.description, liveEventProperties.description) &&
        Objects.equals(this.encoding, liveEventProperties.encoding) &&
        Objects.equals(this.input, liveEventProperties.input) &&
        Objects.equals(this.lastModified, liveEventProperties.lastModified) &&
        Objects.equals(this.preview, liveEventProperties.preview) &&
        Objects.equals(this.provisioningState, liveEventProperties.provisioningState) &&
        Objects.equals(this.resourceState, liveEventProperties.resourceState) &&
        Objects.equals(this.streamOptions, liveEventProperties.streamOptions) &&
        Objects.equals(this.transcriptions, liveEventProperties.transcriptions) &&
        Objects.equals(this.vanityUrl, liveEventProperties.vanityUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, crossSiteAccessPolicies, description, encoding, input, lastModified, preview, provisioningState, resourceState, streamOptions, transcriptions, vanityUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveEventProperties {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    crossSiteAccessPolicies: ").append(toIndentedString(crossSiteAccessPolicies)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceState: ").append(toIndentedString(resourceState)).append("\n");
    sb.append("    streamOptions: ").append(toIndentedString(streamOptions)).append("\n");
    sb.append("    transcriptions: ").append(toIndentedString(transcriptions)).append("\n");
    sb.append("    vanityUrl: ").append(toIndentedString(vanityUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("crossSiteAccessPolicies");
    openapiFields.add("description");
    openapiFields.add("encoding");
    openapiFields.add("input");
    openapiFields.add("lastModified");
    openapiFields.add("preview");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceState");
    openapiFields.add("streamOptions");
    openapiFields.add("transcriptions");
    openapiFields.add("vanityUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("input");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveEventProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveEventProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveEventProperties is not found in the empty JSON string", LiveEventProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveEventProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveEventProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiveEventProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `crossSiteAccessPolicies`
      if (jsonObj.get("crossSiteAccessPolicies") != null && !jsonObj.get("crossSiteAccessPolicies").isJsonNull()) {
        CrossSiteAccessPolicies.validateJsonElement(jsonObj.get("crossSiteAccessPolicies"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `encoding`
      if (jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) {
        LiveEventEncoding.validateJsonElement(jsonObj.get("encoding"));
      }
      // validate the required field `input`
      LiveEventInput.validateJsonElement(jsonObj.get("input"));
      // validate the optional field `preview`
      if (jsonObj.get("preview") != null && !jsonObj.get("preview").isJsonNull()) {
        LiveEventPreview.validateJsonElement(jsonObj.get("preview"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) && !jsonObj.get("resourceState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceState").toString()));
      }
      // validate the optional field `resourceState`
      if (jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) {
        ResourceStateEnum.validateJsonElement(jsonObj.get("resourceState"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("streamOptions") != null && !jsonObj.get("streamOptions").isJsonNull() && !jsonObj.get("streamOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamOptions` to be an array in the JSON string but got `%s`", jsonObj.get("streamOptions").toString()));
      }
      if (jsonObj.get("transcriptions") != null && !jsonObj.get("transcriptions").isJsonNull()) {
        JsonArray jsonArraytranscriptions = jsonObj.getAsJsonArray("transcriptions");
        if (jsonArraytranscriptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transcriptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transcriptions` to be an array in the JSON string but got `%s`", jsonObj.get("transcriptions").toString()));
          }

          // validate the optional field `transcriptions` (array)
          for (int i = 0; i < jsonArraytranscriptions.size(); i++) {
            LiveEventTranscription.validateJsonElement(jsonArraytranscriptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveEventProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveEventProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveEventProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveEventProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveEventProperties>() {
           @Override
           public void write(JsonWriter out, LiveEventProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveEventProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveEventProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveEventProperties
   * @throws IOException if the JSON string is invalid with respect to LiveEventProperties
   */
  public static LiveEventProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveEventProperties.class);
  }

  /**
   * Convert an instance of LiveEventProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

