/*
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LiveEventEndpoint;
import org.openapitools.client.model.LiveEventInputAccessControl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Live Event input.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:02.865231-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveEventInput {
  public static final String SERIALIZED_NAME_ACCESS_CONTROL = "accessControl";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL)
  private LiveEventInputAccessControl accessControl;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_ENDPOINTS = "endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private List<LiveEventEndpoint> endpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEY_FRAME_INTERVAL_DURATION = "keyFrameIntervalDuration";
  @SerializedName(SERIALIZED_NAME_KEY_FRAME_INTERVAL_DURATION)
  private String keyFrameIntervalDuration;

  /**
   * The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.
   */
  @JsonAdapter(StreamingProtocolEnum.Adapter.class)
  public enum StreamingProtocolEnum {
    FRAGMENTED_MP4("FragmentedMP4"),
    
    RTMP("RTMP");

    private String value;

    StreamingProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreamingProtocolEnum fromValue(String value) {
      for (StreamingProtocolEnum b : StreamingProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreamingProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreamingProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreamingProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreamingProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StreamingProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STREAMING_PROTOCOL = "streamingProtocol";
  @SerializedName(SERIALIZED_NAME_STREAMING_PROTOCOL)
  private StreamingProtocolEnum streamingProtocol;

  public LiveEventInput() {
  }

  public LiveEventInput accessControl(LiveEventInputAccessControl accessControl) {
    this.accessControl = accessControl;
    return this;
  }

  /**
   * Get accessControl
   * @return accessControl
   */
  @javax.annotation.Nullable
  public LiveEventInputAccessControl getAccessControl() {
    return accessControl;
  }

  public void setAccessControl(LiveEventInputAccessControl accessControl) {
    this.accessControl = accessControl;
  }


  public LiveEventInput accessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * A unique identifier for a stream.  This can be specified at creation time but cannot be updated.  If omitted, the service will generate a unique value.
   * @return accessToken
   */
  @javax.annotation.Nullable
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  public LiveEventInput endpoints(List<LiveEventEndpoint> endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  public LiveEventInput addEndpointsItem(LiveEventEndpoint endpointsItem) {
    if (this.endpoints == null) {
      this.endpoints = new ArrayList<>();
    }
    this.endpoints.add(endpointsItem);
    return this;
  }

  /**
   * The input endpoints for the Live Event.
   * @return endpoints
   */
  @javax.annotation.Nullable
  public List<LiveEventEndpoint> getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(List<LiveEventEndpoint> endpoints) {
    this.endpoints = endpoints;
  }


  public LiveEventInput keyFrameIntervalDuration(String keyFrameIntervalDuration) {
    this.keyFrameIntervalDuration = keyFrameIntervalDuration;
    return this;
  }

  /**
   * ISO 8601 timespan duration of the key frame interval duration.
   * @return keyFrameIntervalDuration
   */
  @javax.annotation.Nullable
  public String getKeyFrameIntervalDuration() {
    return keyFrameIntervalDuration;
  }

  public void setKeyFrameIntervalDuration(String keyFrameIntervalDuration) {
    this.keyFrameIntervalDuration = keyFrameIntervalDuration;
  }


  public LiveEventInput streamingProtocol(StreamingProtocolEnum streamingProtocol) {
    this.streamingProtocol = streamingProtocol;
    return this;
  }

  /**
   * The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.
   * @return streamingProtocol
   */
  @javax.annotation.Nonnull
  public StreamingProtocolEnum getStreamingProtocol() {
    return streamingProtocol;
  }

  public void setStreamingProtocol(StreamingProtocolEnum streamingProtocol) {
    this.streamingProtocol = streamingProtocol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveEventInput liveEventInput = (LiveEventInput) o;
    return Objects.equals(this.accessControl, liveEventInput.accessControl) &&
        Objects.equals(this.accessToken, liveEventInput.accessToken) &&
        Objects.equals(this.endpoints, liveEventInput.endpoints) &&
        Objects.equals(this.keyFrameIntervalDuration, liveEventInput.keyFrameIntervalDuration) &&
        Objects.equals(this.streamingProtocol, liveEventInput.streamingProtocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessControl, accessToken, endpoints, keyFrameIntervalDuration, streamingProtocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveEventInput {\n");
    sb.append("    accessControl: ").append(toIndentedString(accessControl)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    keyFrameIntervalDuration: ").append(toIndentedString(keyFrameIntervalDuration)).append("\n");
    sb.append("    streamingProtocol: ").append(toIndentedString(streamingProtocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessControl");
    openapiFields.add("accessToken");
    openapiFields.add("endpoints");
    openapiFields.add("keyFrameIntervalDuration");
    openapiFields.add("streamingProtocol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("streamingProtocol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveEventInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveEventInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveEventInput is not found in the empty JSON string", LiveEventInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveEventInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveEventInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiveEventInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessControl`
      if (jsonObj.get("accessControl") != null && !jsonObj.get("accessControl").isJsonNull()) {
        LiveEventInputAccessControl.validateJsonElement(jsonObj.get("accessControl"));
      }
      if ((jsonObj.get("accessToken") != null && !jsonObj.get("accessToken").isJsonNull()) && !jsonObj.get("accessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessToken").toString()));
      }
      if (jsonObj.get("endpoints") != null && !jsonObj.get("endpoints").isJsonNull()) {
        JsonArray jsonArrayendpoints = jsonObj.getAsJsonArray("endpoints");
        if (jsonArrayendpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("endpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("endpoints").toString()));
          }

          // validate the optional field `endpoints` (array)
          for (int i = 0; i < jsonArrayendpoints.size(); i++) {
            LiveEventEndpoint.validateJsonElement(jsonArrayendpoints.get(i));
          };
        }
      }
      if ((jsonObj.get("keyFrameIntervalDuration") != null && !jsonObj.get("keyFrameIntervalDuration").isJsonNull()) && !jsonObj.get("keyFrameIntervalDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyFrameIntervalDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyFrameIntervalDuration").toString()));
      }
      if (!jsonObj.get("streamingProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamingProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamingProtocol").toString()));
      }
      // validate the required field `streamingProtocol`
      StreamingProtocolEnum.validateJsonElement(jsonObj.get("streamingProtocol"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveEventInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveEventInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveEventInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveEventInput.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveEventInput>() {
           @Override
           public void write(JsonWriter out, LiveEventInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveEventInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveEventInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveEventInput
   * @throws IOException if the JSON string is invalid with respect to LiveEventInput
   */
  public static LiveEventInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveEventInput.class);
  }

  /**
   * Convert an instance of LiveEventInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

