/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import LiveEvent from '../model/LiveEvent';
import LiveEventActionInput from '../model/LiveEventActionInput';
import LiveEventListResult from '../model/LiveEventListResult';

/**
* LiveEvents service.
* @module api/LiveEventsApi
* @version 2019-05-01-preview
*/
export default class LiveEventsApi {

    /**
    * Constructs a new LiveEventsApi. 
    * @alias module:api/LiveEventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the liveEventsCreate operation.
     * @callback module:api/LiveEventsApi~liveEventsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Live Event
     * Creates a Live Event.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} liveEventName The name of the Live Event.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/LiveEvent} parameters Live Event properties needed for creation.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [autoStart] The flag indicates if the resource should be automatically started on creation.
     * @param {module:api/LiveEventsApi~liveEventsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveEvent}
     */
    liveEventsCreate(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, opts, callback) {
      opts = opts || {};
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling liveEventsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling liveEventsCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling liveEventsCreate");
      }
      // verify the required parameter 'liveEventName' is set
      if (liveEventName === undefined || liveEventName === null) {
        throw new Error("Missing the required parameter 'liveEventName' when calling liveEventsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling liveEventsCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling liveEventsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'liveEventName': liveEventName
      };
      let queryParams = {
        'api-version': apiVersion,
        'autoStart': opts['autoStart']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiveEvent;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liveEventsDelete operation.
     * @callback module:api/LiveEventsApi~liveEventsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Live Event
     * Deletes a Live Event.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} liveEventName The name of the Live Event.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/LiveEventsApi~liveEventsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    liveEventsDelete(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling liveEventsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling liveEventsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling liveEventsDelete");
      }
      // verify the required parameter 'liveEventName' is set
      if (liveEventName === undefined || liveEventName === null) {
        throw new Error("Missing the required parameter 'liveEventName' when calling liveEventsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling liveEventsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'liveEventName': liveEventName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liveEventsGet operation.
     * @callback module:api/LiveEventsApi~liveEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Live Event
     * Gets a Live Event.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} liveEventName The name of the Live Event.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/LiveEventsApi~liveEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveEvent}
     */
    liveEventsGet(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling liveEventsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling liveEventsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling liveEventsGet");
      }
      // verify the required parameter 'liveEventName' is set
      if (liveEventName === undefined || liveEventName === null) {
        throw new Error("Missing the required parameter 'liveEventName' when calling liveEventsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling liveEventsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'liveEventName': liveEventName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiveEvent;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liveEventsList operation.
     * @callback module:api/LiveEventsApi~liveEventsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveEventListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Live Events
     * Lists the Live Events in the account.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/LiveEventsApi~liveEventsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveEventListResult}
     */
    liveEventsList(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling liveEventsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling liveEventsList");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling liveEventsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling liveEventsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiveEventListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liveEventsReset operation.
     * @callback module:api/LiveEventsApi~liveEventsResetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset Live Event
     * Resets an existing Live Event.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} liveEventName The name of the Live Event.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/LiveEventsApi~liveEventsResetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    liveEventsReset(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling liveEventsReset");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling liveEventsReset");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling liveEventsReset");
      }
      // verify the required parameter 'liveEventName' is set
      if (liveEventName === undefined || liveEventName === null) {
        throw new Error("Missing the required parameter 'liveEventName' when calling liveEventsReset");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling liveEventsReset");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'liveEventName': liveEventName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liveEventsStart operation.
     * @callback module:api/LiveEventsApi~liveEventsStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start Live Event
     * Starts an existing Live Event.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} liveEventName The name of the Live Event.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/LiveEventsApi~liveEventsStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    liveEventsStart(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling liveEventsStart");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling liveEventsStart");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling liveEventsStart");
      }
      // verify the required parameter 'liveEventName' is set
      if (liveEventName === undefined || liveEventName === null) {
        throw new Error("Missing the required parameter 'liveEventName' when calling liveEventsStart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling liveEventsStart");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'liveEventName': liveEventName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liveEventsStop operation.
     * @callback module:api/LiveEventsApi~liveEventsStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop Live Event
     * Stops an existing Live Event.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} liveEventName The name of the Live Event.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/LiveEventActionInput} parameters LiveEvent stop parameters
     * @param {module:api/LiveEventsApi~liveEventsStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    liveEventsStop(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling liveEventsStop");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling liveEventsStop");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling liveEventsStop");
      }
      // verify the required parameter 'liveEventName' is set
      if (liveEventName === undefined || liveEventName === null) {
        throw new Error("Missing the required parameter 'liveEventName' when calling liveEventsStop");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling liveEventsStop");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling liveEventsStop");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'liveEventName': liveEventName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liveEventsUpdate operation.
     * @callback module:api/LiveEventsApi~liveEventsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a existing Live Event.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} liveEventName The name of the Live Event.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/LiveEvent} parameters Live Event properties needed for creation.
     * @param {module:api/LiveEventsApi~liveEventsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveEvent}
     */
    liveEventsUpdate(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling liveEventsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling liveEventsUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling liveEventsUpdate");
      }
      // verify the required parameter 'liveEventName' is set
      if (liveEventName === undefined || liveEventName === null) {
        throw new Error("Missing the required parameter 'liveEventName' when calling liveEventsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling liveEventsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling liveEventsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'liveEventName': liveEventName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiveEvent;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
