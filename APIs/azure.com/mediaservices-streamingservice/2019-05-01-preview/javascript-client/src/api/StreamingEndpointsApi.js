/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import StreamingEndpoint from '../model/StreamingEndpoint';
import StreamingEndpointListResult from '../model/StreamingEndpointListResult';
import StreamingEntityScaleUnit from '../model/StreamingEntityScaleUnit';

/**
* StreamingEndpoints service.
* @module api/StreamingEndpointsApi
* @version 2019-05-01-preview
*/
export default class StreamingEndpointsApi {

    /**
    * Constructs a new StreamingEndpointsApi. 
    * @alias module:api/StreamingEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the streamingEndpointsCreate operation.
     * @callback module:api/StreamingEndpointsApi~streamingEndpointsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create StreamingEndpoint
     * Creates a StreamingEndpoint.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingEndpointName The name of the StreamingEndpoint.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/StreamingEndpoint} parameters StreamingEndpoint properties needed for creation.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [autoStart] The flag indicates if the resource should be automatically started on creation.
     * @param {module:api/StreamingEndpointsApi~streamingEndpointsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingEndpoint}
     */
    streamingEndpointsCreate(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, parameters, opts, callback) {
      opts = opts || {};
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingEndpointsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingEndpointsCreate");
      }
      // verify the required parameter 'streamingEndpointName' is set
      if (streamingEndpointName === undefined || streamingEndpointName === null) {
        throw new Error("Missing the required parameter 'streamingEndpointName' when calling streamingEndpointsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingEndpointsCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling streamingEndpointsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingEndpointName': streamingEndpointName
      };
      let queryParams = {
        'api-version': apiVersion,
        'autoStart': opts['autoStart']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StreamingEndpoint;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingEndpointsDelete operation.
     * @callback module:api/StreamingEndpointsApi~streamingEndpointsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete StreamingEndpoint
     * Deletes a StreamingEndpoint.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingEndpointName The name of the StreamingEndpoint.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/StreamingEndpointsApi~streamingEndpointsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    streamingEndpointsDelete(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingEndpointsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingEndpointsDelete");
      }
      // verify the required parameter 'streamingEndpointName' is set
      if (streamingEndpointName === undefined || streamingEndpointName === null) {
        throw new Error("Missing the required parameter 'streamingEndpointName' when calling streamingEndpointsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingEndpointsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingEndpointName': streamingEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingEndpointsGet operation.
     * @callback module:api/StreamingEndpointsApi~streamingEndpointsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get StreamingEndpoint
     * Gets a StreamingEndpoint.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingEndpointName The name of the StreamingEndpoint.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/StreamingEndpointsApi~streamingEndpointsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingEndpoint}
     */
    streamingEndpointsGet(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingEndpointsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingEndpointsGet");
      }
      // verify the required parameter 'streamingEndpointName' is set
      if (streamingEndpointName === undefined || streamingEndpointName === null) {
        throw new Error("Missing the required parameter 'streamingEndpointName' when calling streamingEndpointsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingEndpointsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingEndpointName': streamingEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamingEndpoint;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingEndpointsList operation.
     * @callback module:api/StreamingEndpointsApi~streamingEndpointsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingEndpointListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List StreamingEndpoints
     * Lists the StreamingEndpoints in the account.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/StreamingEndpointsApi~streamingEndpointsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingEndpointListResult}
     */
    streamingEndpointsList(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingEndpointsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsList");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingEndpointsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingEndpointsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamingEndpointListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingEndpointsScale operation.
     * @callback module:api/StreamingEndpointsApi~streamingEndpointsScaleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scale StreamingEndpoint
     * Scales an existing StreamingEndpoint.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingEndpointName The name of the StreamingEndpoint.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/StreamingEntityScaleUnit} parameters StreamingEndpoint scale parameters
     * @param {module:api/StreamingEndpointsApi~streamingEndpointsScaleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    streamingEndpointsScale(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingEndpointsScale");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsScale");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingEndpointsScale");
      }
      // verify the required parameter 'streamingEndpointName' is set
      if (streamingEndpointName === undefined || streamingEndpointName === null) {
        throw new Error("Missing the required parameter 'streamingEndpointName' when calling streamingEndpointsScale");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingEndpointsScale");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling streamingEndpointsScale");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingEndpointName': streamingEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/scale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingEndpointsStart operation.
     * @callback module:api/StreamingEndpointsApi~streamingEndpointsStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start StreamingEndpoint
     * Starts an existing StreamingEndpoint.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingEndpointName The name of the StreamingEndpoint.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/StreamingEndpointsApi~streamingEndpointsStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    streamingEndpointsStart(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingEndpointsStart");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsStart");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingEndpointsStart");
      }
      // verify the required parameter 'streamingEndpointName' is set
      if (streamingEndpointName === undefined || streamingEndpointName === null) {
        throw new Error("Missing the required parameter 'streamingEndpointName' when calling streamingEndpointsStart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingEndpointsStart");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingEndpointName': streamingEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamingEndpointsStop operation.
     * @callback module:api/StreamingEndpointsApi~streamingEndpointsStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop StreamingEndpoint
     * Stops an existing StreamingEndpoint.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} streamingEndpointName The name of the StreamingEndpoint.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/StreamingEndpointsApi~streamingEndpointsStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    streamingEndpointsStop(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling streamingEndpointsStop");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsStop");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling streamingEndpointsStop");
      }
      // verify the required parameter 'streamingEndpointName' is set
      if (streamingEndpointName === undefined || streamingEndpointName === null) {
        throw new Error("Missing the required parameter 'streamingEndpointName' when calling streamingEndpointsStop");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling streamingEndpointsStop");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'streamingEndpointName': streamingEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
