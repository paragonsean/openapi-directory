/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LiveEventInputTrackSelection from './LiveEventInputTrackSelection';
import LiveEventOutputTranscriptionTrack from './LiveEventOutputTranscriptionTrack';

/**
 * The LiveEventTranscription model module.
 * @module model/LiveEventTranscription
 * @version 2019-05-01-preview
 */
class LiveEventTranscription {
    /**
     * Constructs a new <code>LiveEventTranscription</code>.
     * Describes the transcription tracks in the output of a Live Event, generated using speech-to-text transcription.
     * @alias module:model/LiveEventTranscription
     */
    constructor() { 
        
        LiveEventTranscription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveEventTranscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveEventTranscription} obj Optional instance to populate.
     * @return {module:model/LiveEventTranscription} The populated <code>LiveEventTranscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveEventTranscription();

            if (data.hasOwnProperty('inputTrackSelection')) {
                obj['inputTrackSelection'] = ApiClient.convertToType(data['inputTrackSelection'], [LiveEventInputTrackSelection]);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('outputTranscriptionTrack')) {
                obj['outputTranscriptionTrack'] = LiveEventOutputTranscriptionTrack.constructFromObject(data['outputTranscriptionTrack']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveEventTranscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveEventTranscription</code>.
     */
    static validateJSON(data) {
        if (data['inputTrackSelection']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputTrackSelection'])) {
                throw new Error("Expected the field `inputTrackSelection` to be an array in the JSON data but got " + data['inputTrackSelection']);
            }
            // validate the optional field `inputTrackSelection` (array)
            for (const item of data['inputTrackSelection']) {
                LiveEventInputTrackSelection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // validate the optional field `outputTranscriptionTrack`
        if (data['outputTranscriptionTrack']) { // data not null
          LiveEventOutputTranscriptionTrack.validateJSON(data['outputTranscriptionTrack']);
        }

        return true;
    }


}



/**
 * Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied.
 * @member {Array.<module:model/LiveEventInputTrackSelection>} inputTrackSelection
 */
LiveEventTranscription.prototype['inputTrackSelection'] = undefined;

/**
 * Specifies the language (locale) used for speech-to-text transcription ï¿½ it should match the spoken language in the audio track. The value should be in BCP-47 format of 'language tag-region' (e.g: 'en-US'). The list of supported languages are 'en-US' and 'en-GB'.
 * @member {String} language
 */
LiveEventTranscription.prototype['language'] = undefined;

/**
 * @member {module:model/LiveEventOutputTranscriptionTrack} outputTranscriptionTrack
 */
LiveEventTranscription.prototype['outputTranscriptionTrack'] = undefined;






export default LiveEventTranscription;

