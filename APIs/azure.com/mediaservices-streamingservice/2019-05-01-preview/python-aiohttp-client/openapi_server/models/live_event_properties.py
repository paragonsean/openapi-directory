# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cross_site_access_policies import CrossSiteAccessPolicies
from openapi_server.models.live_event_encoding import LiveEventEncoding
from openapi_server.models.live_event_input import LiveEventInput
from openapi_server.models.live_event_preview import LiveEventPreview
from openapi_server.models.live_event_transcription import LiveEventTranscription
from openapi_server import util


class LiveEventProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, cross_site_access_policies: CrossSiteAccessPolicies=None, description: str=None, encoding: LiveEventEncoding=None, input: LiveEventInput=None, last_modified: datetime=None, preview: LiveEventPreview=None, provisioning_state: str=None, resource_state: str=None, stream_options: List[str]=None, transcriptions: List[LiveEventTranscription]=None, vanity_url: bool=None):
        """LiveEventProperties - a model defined in OpenAPI

        :param created: The created of this LiveEventProperties.
        :param cross_site_access_policies: The cross_site_access_policies of this LiveEventProperties.
        :param description: The description of this LiveEventProperties.
        :param encoding: The encoding of this LiveEventProperties.
        :param input: The input of this LiveEventProperties.
        :param last_modified: The last_modified of this LiveEventProperties.
        :param preview: The preview of this LiveEventProperties.
        :param provisioning_state: The provisioning_state of this LiveEventProperties.
        :param resource_state: The resource_state of this LiveEventProperties.
        :param stream_options: The stream_options of this LiveEventProperties.
        :param transcriptions: The transcriptions of this LiveEventProperties.
        :param vanity_url: The vanity_url of this LiveEventProperties.
        """
        self.openapi_types = {
            'created': datetime,
            'cross_site_access_policies': CrossSiteAccessPolicies,
            'description': str,
            'encoding': LiveEventEncoding,
            'input': LiveEventInput,
            'last_modified': datetime,
            'preview': LiveEventPreview,
            'provisioning_state': str,
            'resource_state': str,
            'stream_options': List[str],
            'transcriptions': List[LiveEventTranscription],
            'vanity_url': bool
        }

        self.attribute_map = {
            'created': 'created',
            'cross_site_access_policies': 'crossSiteAccessPolicies',
            'description': 'description',
            'encoding': 'encoding',
            'input': 'input',
            'last_modified': 'lastModified',
            'preview': 'preview',
            'provisioning_state': 'provisioningState',
            'resource_state': 'resourceState',
            'stream_options': 'streamOptions',
            'transcriptions': 'transcriptions',
            'vanity_url': 'vanityUrl'
        }

        self._created = created
        self._cross_site_access_policies = cross_site_access_policies
        self._description = description
        self._encoding = encoding
        self._input = input
        self._last_modified = last_modified
        self._preview = preview
        self._provisioning_state = provisioning_state
        self._resource_state = resource_state
        self._stream_options = stream_options
        self._transcriptions = transcriptions
        self._vanity_url = vanity_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveEventProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveEventProperties of this LiveEventProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this LiveEventProperties.

        The exact time the Live Event was created.

        :return: The created of this LiveEventProperties.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this LiveEventProperties.

        The exact time the Live Event was created.

        :param created: The created of this LiveEventProperties.
        :type created: datetime
        """

        self._created = created

    @property
    def cross_site_access_policies(self):
        """Gets the cross_site_access_policies of this LiveEventProperties.


        :return: The cross_site_access_policies of this LiveEventProperties.
        :rtype: CrossSiteAccessPolicies
        """
        return self._cross_site_access_policies

    @cross_site_access_policies.setter
    def cross_site_access_policies(self, cross_site_access_policies):
        """Sets the cross_site_access_policies of this LiveEventProperties.


        :param cross_site_access_policies: The cross_site_access_policies of this LiveEventProperties.
        :type cross_site_access_policies: CrossSiteAccessPolicies
        """

        self._cross_site_access_policies = cross_site_access_policies

    @property
    def description(self):
        """Gets the description of this LiveEventProperties.

        The Live Event description.

        :return: The description of this LiveEventProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LiveEventProperties.

        The Live Event description.

        :param description: The description of this LiveEventProperties.
        :type description: str
        """

        self._description = description

    @property
    def encoding(self):
        """Gets the encoding of this LiveEventProperties.


        :return: The encoding of this LiveEventProperties.
        :rtype: LiveEventEncoding
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this LiveEventProperties.


        :param encoding: The encoding of this LiveEventProperties.
        :type encoding: LiveEventEncoding
        """

        self._encoding = encoding

    @property
    def input(self):
        """Gets the input of this LiveEventProperties.


        :return: The input of this LiveEventProperties.
        :rtype: LiveEventInput
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this LiveEventProperties.


        :param input: The input of this LiveEventProperties.
        :type input: LiveEventInput
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def last_modified(self):
        """Gets the last_modified of this LiveEventProperties.

        The exact time the Live Event was last modified.

        :return: The last_modified of this LiveEventProperties.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this LiveEventProperties.

        The exact time the Live Event was last modified.

        :param last_modified: The last_modified of this LiveEventProperties.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def preview(self):
        """Gets the preview of this LiveEventProperties.


        :return: The preview of this LiveEventProperties.
        :rtype: LiveEventPreview
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this LiveEventProperties.


        :param preview: The preview of this LiveEventProperties.
        :type preview: LiveEventPreview
        """

        self._preview = preview

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this LiveEventProperties.

        The provisioning state of the Live Event.

        :return: The provisioning_state of this LiveEventProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this LiveEventProperties.

        The provisioning state of the Live Event.

        :param provisioning_state: The provisioning_state of this LiveEventProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def resource_state(self):
        """Gets the resource_state of this LiveEventProperties.

        The resource state of the Live Event.

        :return: The resource_state of this LiveEventProperties.
        :rtype: str
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this LiveEventProperties.

        The resource state of the Live Event.

        :param resource_state: The resource_state of this LiveEventProperties.
        :type resource_state: str
        """
        allowed_values = ["Stopped", "Starting", "Running", "Stopping", "Deleting"]  # noqa: E501
        if resource_state not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_state` ({0}), must be one of {1}"
                .format(resource_state, allowed_values)
            )

        self._resource_state = resource_state

    @property
    def stream_options(self):
        """Gets the stream_options of this LiveEventProperties.

        The options to use for the LiveEvent.  This value is specified at creation time and cannot be updated.

        :return: The stream_options of this LiveEventProperties.
        :rtype: List[str]
        """
        return self._stream_options

    @stream_options.setter
    def stream_options(self, stream_options):
        """Sets the stream_options of this LiveEventProperties.

        The options to use for the LiveEvent.  This value is specified at creation time and cannot be updated.

        :param stream_options: The stream_options of this LiveEventProperties.
        :type stream_options: List[str]
        """
        allowed_values = ["Default", "LowLatency"]  # noqa: E501
        if not set(stream_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `stream_options` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(stream_options) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._stream_options = stream_options

    @property
    def transcriptions(self):
        """Gets the transcriptions of this LiveEventProperties.

        The Live Event transcription.

        :return: The transcriptions of this LiveEventProperties.
        :rtype: List[LiveEventTranscription]
        """
        return self._transcriptions

    @transcriptions.setter
    def transcriptions(self, transcriptions):
        """Sets the transcriptions of this LiveEventProperties.

        The Live Event transcription.

        :param transcriptions: The transcriptions of this LiveEventProperties.
        :type transcriptions: List[LiveEventTranscription]
        """

        self._transcriptions = transcriptions

    @property
    def vanity_url(self):
        """Gets the vanity_url of this LiveEventProperties.

        Specifies whether to use a vanity url with the Live Event.  This value is specified at creation time and cannot be updated.

        :return: The vanity_url of this LiveEventProperties.
        :rtype: bool
        """
        return self._vanity_url

    @vanity_url.setter
    def vanity_url(self, vanity_url):
        """Sets the vanity_url of this LiveEventProperties.

        Specifies whether to use a vanity url with the Live Event.  This value is specified at creation time and cannot be updated.

        :param vanity_url: The vanity_url of this LiveEventProperties.
        :type vanity_url: bool
        """

        self._vanity_url = vanity_url
