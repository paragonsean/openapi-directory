# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LiveEventOutputTranscriptionTrack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, track_name: str=None):
        """LiveEventOutputTranscriptionTrack - a model defined in OpenAPI

        :param track_name: The track_name of this LiveEventOutputTranscriptionTrack.
        """
        self.openapi_types = {
            'track_name': str
        }

        self.attribute_map = {
            'track_name': 'trackName'
        }

        self._track_name = track_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveEventOutputTranscriptionTrack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveEventOutputTranscriptionTrack of this LiveEventOutputTranscriptionTrack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def track_name(self):
        """Gets the track_name of this LiveEventOutputTranscriptionTrack.

        The output track name.

        :return: The track_name of this LiveEventOutputTranscriptionTrack.
        :rtype: str
        """
        return self._track_name

    @track_name.setter
    def track_name(self, track_name):
        """Sets the track_name of this LiveEventOutputTranscriptionTrack.

        The output track name.

        :param track_name: The track_name of this LiveEventOutputTranscriptionTrack.
        :type track_name: str
        """
        if track_name is None:
            raise ValueError("Invalid value for `track_name`, must not be `None`")

        self._track_name = track_name
