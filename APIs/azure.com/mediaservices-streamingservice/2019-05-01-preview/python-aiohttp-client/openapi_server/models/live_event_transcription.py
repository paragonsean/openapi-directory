# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_event_input_track_selection import LiveEventInputTrackSelection
from openapi_server.models.live_event_output_transcription_track import LiveEventOutputTranscriptionTrack
from openapi_server import util


class LiveEventTranscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_track_selection: List[LiveEventInputTrackSelection]=None, language: str=None, output_transcription_track: LiveEventOutputTranscriptionTrack=None):
        """LiveEventTranscription - a model defined in OpenAPI

        :param input_track_selection: The input_track_selection of this LiveEventTranscription.
        :param language: The language of this LiveEventTranscription.
        :param output_transcription_track: The output_transcription_track of this LiveEventTranscription.
        """
        self.openapi_types = {
            'input_track_selection': List[LiveEventInputTrackSelection],
            'language': str,
            'output_transcription_track': LiveEventOutputTranscriptionTrack
        }

        self.attribute_map = {
            'input_track_selection': 'inputTrackSelection',
            'language': 'language',
            'output_transcription_track': 'outputTranscriptionTrack'
        }

        self._input_track_selection = input_track_selection
        self._language = language
        self._output_transcription_track = output_transcription_track

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveEventTranscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveEventTranscription of this LiveEventTranscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_track_selection(self):
        """Gets the input_track_selection of this LiveEventTranscription.

        Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied.

        :return: The input_track_selection of this LiveEventTranscription.
        :rtype: List[LiveEventInputTrackSelection]
        """
        return self._input_track_selection

    @input_track_selection.setter
    def input_track_selection(self, input_track_selection):
        """Sets the input_track_selection of this LiveEventTranscription.

        Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied.

        :param input_track_selection: The input_track_selection of this LiveEventTranscription.
        :type input_track_selection: List[LiveEventInputTrackSelection]
        """

        self._input_track_selection = input_track_selection

    @property
    def language(self):
        """Gets the language of this LiveEventTranscription.

        Specifies the language (locale) used for speech-to-text transcription � it should match the spoken language in the audio track. The value should be in BCP-47 format of 'language tag-region' (e.g: 'en-US'). The list of supported languages are 'en-US' and 'en-GB'.

        :return: The language of this LiveEventTranscription.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LiveEventTranscription.

        Specifies the language (locale) used for speech-to-text transcription � it should match the spoken language in the audio track. The value should be in BCP-47 format of 'language tag-region' (e.g: 'en-US'). The list of supported languages are 'en-US' and 'en-GB'.

        :param language: The language of this LiveEventTranscription.
        :type language: str
        """

        self._language = language

    @property
    def output_transcription_track(self):
        """Gets the output_transcription_track of this LiveEventTranscription.


        :return: The output_transcription_track of this LiveEventTranscription.
        :rtype: LiveEventOutputTranscriptionTrack
        """
        return self._output_transcription_track

    @output_transcription_track.setter
    def output_transcription_track(self, output_transcription_track):
        """Sets the output_transcription_track of this LiveEventTranscription.


        :param output_transcription_track: The output_transcription_track of this LiveEventTranscription.
        :type output_transcription_track: LiveEventOutputTranscriptionTrack
        """

        self._output_transcription_track = output_transcription_track
