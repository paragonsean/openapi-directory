/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveEventEncoding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveEventEncoding::OAILiveEventEncoding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveEventEncoding::OAILiveEventEncoding() {
    this->initializeModel();
}

OAILiveEventEncoding::~OAILiveEventEncoding() {}

void OAILiveEventEncoding::initializeModel() {

    m_encoding_type_isSet = false;
    m_encoding_type_isValid = false;

    m_preset_name_isSet = false;
    m_preset_name_isValid = false;
}

void OAILiveEventEncoding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveEventEncoding::fromJsonObject(QJsonObject json) {

    m_encoding_type_isValid = ::OpenAPI::fromJsonValue(m_encoding_type, json[QString("encodingType")]);
    m_encoding_type_isSet = !json[QString("encodingType")].isNull() && m_encoding_type_isValid;

    m_preset_name_isValid = ::OpenAPI::fromJsonValue(m_preset_name, json[QString("presetName")]);
    m_preset_name_isSet = !json[QString("presetName")].isNull() && m_preset_name_isValid;
}

QString OAILiveEventEncoding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveEventEncoding::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding_type_isSet) {
        obj.insert(QString("encodingType"), ::OpenAPI::toJsonValue(m_encoding_type));
    }
    if (m_preset_name_isSet) {
        obj.insert(QString("presetName"), ::OpenAPI::toJsonValue(m_preset_name));
    }
    return obj;
}

QString OAILiveEventEncoding::getEncodingType() const {
    return m_encoding_type;
}
void OAILiveEventEncoding::setEncodingType(const QString &encoding_type) {
    m_encoding_type = encoding_type;
    m_encoding_type_isSet = true;
}

bool OAILiveEventEncoding::is_encoding_type_Set() const{
    return m_encoding_type_isSet;
}

bool OAILiveEventEncoding::is_encoding_type_Valid() const{
    return m_encoding_type_isValid;
}

QString OAILiveEventEncoding::getPresetName() const {
    return m_preset_name;
}
void OAILiveEventEncoding::setPresetName(const QString &preset_name) {
    m_preset_name = preset_name;
    m_preset_name_isSet = true;
}

bool OAILiveEventEncoding::is_preset_name_Set() const{
    return m_preset_name_isSet;
}

bool OAILiveEventEncoding::is_preset_name_Valid() const{
    return m_preset_name_isValid;
}

bool OAILiveEventEncoding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preset_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveEventEncoding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
