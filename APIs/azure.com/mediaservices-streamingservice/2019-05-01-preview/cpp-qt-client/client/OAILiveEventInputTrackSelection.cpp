/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveEventInputTrackSelection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveEventInputTrackSelection::OAILiveEventInputTrackSelection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveEventInputTrackSelection::OAILiveEventInputTrackSelection() {
    this->initializeModel();
}

OAILiveEventInputTrackSelection::~OAILiveEventInputTrackSelection() {}

void OAILiveEventInputTrackSelection::initializeModel() {

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAILiveEventInputTrackSelection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveEventInputTrackSelection::fromJsonObject(QJsonObject json) {

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAILiveEventInputTrackSelection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveEventInputTrackSelection::asJsonObject() const {
    QJsonObject obj;
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_property_isSet) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAILiveEventInputTrackSelection::getOperation() const {
    return m_operation;
}
void OAILiveEventInputTrackSelection::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAILiveEventInputTrackSelection::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAILiveEventInputTrackSelection::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAILiveEventInputTrackSelection::getProperty() const {
    return m_property;
}
void OAILiveEventInputTrackSelection::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAILiveEventInputTrackSelection::is_property_Set() const{
    return m_property_isSet;
}

bool OAILiveEventInputTrackSelection::is_property_Valid() const{
    return m_property_isValid;
}

QString OAILiveEventInputTrackSelection::getValue() const {
    return m_value;
}
void OAILiveEventInputTrackSelection::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAILiveEventInputTrackSelection::is_value_Set() const{
    return m_value_isSet;
}

bool OAILiveEventInputTrackSelection::is_value_Valid() const{
    return m_value_isValid;
}

bool OAILiveEventInputTrackSelection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveEventInputTrackSelection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
