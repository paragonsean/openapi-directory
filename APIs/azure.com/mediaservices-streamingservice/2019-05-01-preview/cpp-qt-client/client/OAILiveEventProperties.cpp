/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveEventProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveEventProperties::OAILiveEventProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveEventProperties::OAILiveEventProperties() {
    this->initializeModel();
}

OAILiveEventProperties::~OAILiveEventProperties() {}

void OAILiveEventProperties::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_cross_site_access_policies_isSet = false;
    m_cross_site_access_policies_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_preview_isSet = false;
    m_preview_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_state_isSet = false;
    m_resource_state_isValid = false;

    m_stream_options_isSet = false;
    m_stream_options_isValid = false;

    m_transcriptions_isSet = false;
    m_transcriptions_isValid = false;

    m_vanity_url_isSet = false;
    m_vanity_url_isValid = false;
}

void OAILiveEventProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveEventProperties::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_cross_site_access_policies_isValid = ::OpenAPI::fromJsonValue(m_cross_site_access_policies, json[QString("crossSiteAccessPolicies")]);
    m_cross_site_access_policies_isSet = !json[QString("crossSiteAccessPolicies")].isNull() && m_cross_site_access_policies_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_preview_isValid = ::OpenAPI::fromJsonValue(m_preview, json[QString("preview")]);
    m_preview_isSet = !json[QString("preview")].isNull() && m_preview_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_state_isValid = ::OpenAPI::fromJsonValue(m_resource_state, json[QString("resourceState")]);
    m_resource_state_isSet = !json[QString("resourceState")].isNull() && m_resource_state_isValid;

    m_stream_options_isValid = ::OpenAPI::fromJsonValue(m_stream_options, json[QString("streamOptions")]);
    m_stream_options_isSet = !json[QString("streamOptions")].isNull() && m_stream_options_isValid;

    m_transcriptions_isValid = ::OpenAPI::fromJsonValue(m_transcriptions, json[QString("transcriptions")]);
    m_transcriptions_isSet = !json[QString("transcriptions")].isNull() && m_transcriptions_isValid;

    m_vanity_url_isValid = ::OpenAPI::fromJsonValue(m_vanity_url, json[QString("vanityUrl")]);
    m_vanity_url_isSet = !json[QString("vanityUrl")].isNull() && m_vanity_url_isValid;
}

QString OAILiveEventProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveEventProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_cross_site_access_policies.isSet()) {
        obj.insert(QString("crossSiteAccessPolicies"), ::OpenAPI::toJsonValue(m_cross_site_access_policies));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_encoding.isSet()) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_input.isSet()) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_preview.isSet()) {
        obj.insert(QString("preview"), ::OpenAPI::toJsonValue(m_preview));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_state_isSet) {
        obj.insert(QString("resourceState"), ::OpenAPI::toJsonValue(m_resource_state));
    }
    if (m_stream_options.size() > 0) {
        obj.insert(QString("streamOptions"), ::OpenAPI::toJsonValue(m_stream_options));
    }
    if (m_transcriptions.size() > 0) {
        obj.insert(QString("transcriptions"), ::OpenAPI::toJsonValue(m_transcriptions));
    }
    if (m_vanity_url_isSet) {
        obj.insert(QString("vanityUrl"), ::OpenAPI::toJsonValue(m_vanity_url));
    }
    return obj;
}

QDateTime OAILiveEventProperties::getCreated() const {
    return m_created;
}
void OAILiveEventProperties::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAILiveEventProperties::is_created_Set() const{
    return m_created_isSet;
}

bool OAILiveEventProperties::is_created_Valid() const{
    return m_created_isValid;
}

OAICrossSiteAccessPolicies OAILiveEventProperties::getCrossSiteAccessPolicies() const {
    return m_cross_site_access_policies;
}
void OAILiveEventProperties::setCrossSiteAccessPolicies(const OAICrossSiteAccessPolicies &cross_site_access_policies) {
    m_cross_site_access_policies = cross_site_access_policies;
    m_cross_site_access_policies_isSet = true;
}

bool OAILiveEventProperties::is_cross_site_access_policies_Set() const{
    return m_cross_site_access_policies_isSet;
}

bool OAILiveEventProperties::is_cross_site_access_policies_Valid() const{
    return m_cross_site_access_policies_isValid;
}

QString OAILiveEventProperties::getDescription() const {
    return m_description;
}
void OAILiveEventProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILiveEventProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAILiveEventProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAILiveEventEncoding OAILiveEventProperties::getEncoding() const {
    return m_encoding;
}
void OAILiveEventProperties::setEncoding(const OAILiveEventEncoding &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAILiveEventProperties::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAILiveEventProperties::is_encoding_Valid() const{
    return m_encoding_isValid;
}

OAILiveEventInput OAILiveEventProperties::getInput() const {
    return m_input;
}
void OAILiveEventProperties::setInput(const OAILiveEventInput &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAILiveEventProperties::is_input_Set() const{
    return m_input_isSet;
}

bool OAILiveEventProperties::is_input_Valid() const{
    return m_input_isValid;
}

QDateTime OAILiveEventProperties::getLastModified() const {
    return m_last_modified;
}
void OAILiveEventProperties::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAILiveEventProperties::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAILiveEventProperties::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

OAILiveEventPreview OAILiveEventProperties::getPreview() const {
    return m_preview;
}
void OAILiveEventProperties::setPreview(const OAILiveEventPreview &preview) {
    m_preview = preview;
    m_preview_isSet = true;
}

bool OAILiveEventProperties::is_preview_Set() const{
    return m_preview_isSet;
}

bool OAILiveEventProperties::is_preview_Valid() const{
    return m_preview_isValid;
}

QString OAILiveEventProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILiveEventProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILiveEventProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILiveEventProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAILiveEventProperties::getResourceState() const {
    return m_resource_state;
}
void OAILiveEventProperties::setResourceState(const QString &resource_state) {
    m_resource_state = resource_state;
    m_resource_state_isSet = true;
}

bool OAILiveEventProperties::is_resource_state_Set() const{
    return m_resource_state_isSet;
}

bool OAILiveEventProperties::is_resource_state_Valid() const{
    return m_resource_state_isValid;
}

QList<QString> OAILiveEventProperties::getStreamOptions() const {
    return m_stream_options;
}
void OAILiveEventProperties::setStreamOptions(const QList<QString> &stream_options) {
    m_stream_options = stream_options;
    m_stream_options_isSet = true;
}

bool OAILiveEventProperties::is_stream_options_Set() const{
    return m_stream_options_isSet;
}

bool OAILiveEventProperties::is_stream_options_Valid() const{
    return m_stream_options_isValid;
}

QList<OAILiveEventTranscription> OAILiveEventProperties::getTranscriptions() const {
    return m_transcriptions;
}
void OAILiveEventProperties::setTranscriptions(const QList<OAILiveEventTranscription> &transcriptions) {
    m_transcriptions = transcriptions;
    m_transcriptions_isSet = true;
}

bool OAILiveEventProperties::is_transcriptions_Set() const{
    return m_transcriptions_isSet;
}

bool OAILiveEventProperties::is_transcriptions_Valid() const{
    return m_transcriptions_isValid;
}

bool OAILiveEventProperties::isVanityUrl() const {
    return m_vanity_url;
}
void OAILiveEventProperties::setVanityUrl(const bool &vanity_url) {
    m_vanity_url = vanity_url;
    m_vanity_url_isSet = true;
}

bool OAILiveEventProperties::is_vanity_url_Set() const{
    return m_vanity_url_isSet;
}

bool OAILiveEventProperties::is_vanity_url_Valid() const{
    return m_vanity_url_isValid;
}

bool OAILiveEventProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_site_access_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vanity_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveEventProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_isValid && true;
}

} // namespace OpenAPI
