/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveEventTranscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveEventTranscription::OAILiveEventTranscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveEventTranscription::OAILiveEventTranscription() {
    this->initializeModel();
}

OAILiveEventTranscription::~OAILiveEventTranscription() {}

void OAILiveEventTranscription::initializeModel() {

    m_input_track_selection_isSet = false;
    m_input_track_selection_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_output_transcription_track_isSet = false;
    m_output_transcription_track_isValid = false;
}

void OAILiveEventTranscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveEventTranscription::fromJsonObject(QJsonObject json) {

    m_input_track_selection_isValid = ::OpenAPI::fromJsonValue(m_input_track_selection, json[QString("inputTrackSelection")]);
    m_input_track_selection_isSet = !json[QString("inputTrackSelection")].isNull() && m_input_track_selection_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_output_transcription_track_isValid = ::OpenAPI::fromJsonValue(m_output_transcription_track, json[QString("outputTranscriptionTrack")]);
    m_output_transcription_track_isSet = !json[QString("outputTranscriptionTrack")].isNull() && m_output_transcription_track_isValid;
}

QString OAILiveEventTranscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveEventTranscription::asJsonObject() const {
    QJsonObject obj;
    if (m_input_track_selection.size() > 0) {
        obj.insert(QString("inputTrackSelection"), ::OpenAPI::toJsonValue(m_input_track_selection));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_output_transcription_track.isSet()) {
        obj.insert(QString("outputTranscriptionTrack"), ::OpenAPI::toJsonValue(m_output_transcription_track));
    }
    return obj;
}

QList<OAILiveEventInputTrackSelection> OAILiveEventTranscription::getInputTrackSelection() const {
    return m_input_track_selection;
}
void OAILiveEventTranscription::setInputTrackSelection(const QList<OAILiveEventInputTrackSelection> &input_track_selection) {
    m_input_track_selection = input_track_selection;
    m_input_track_selection_isSet = true;
}

bool OAILiveEventTranscription::is_input_track_selection_Set() const{
    return m_input_track_selection_isSet;
}

bool OAILiveEventTranscription::is_input_track_selection_Valid() const{
    return m_input_track_selection_isValid;
}

QString OAILiveEventTranscription::getLanguage() const {
    return m_language;
}
void OAILiveEventTranscription::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAILiveEventTranscription::is_language_Set() const{
    return m_language_isSet;
}

bool OAILiveEventTranscription::is_language_Valid() const{
    return m_language_isValid;
}

OAILiveEventOutputTranscriptionTrack OAILiveEventTranscription::getOutputTranscriptionTrack() const {
    return m_output_transcription_track;
}
void OAILiveEventTranscription::setOutputTranscriptionTrack(const OAILiveEventOutputTranscriptionTrack &output_transcription_track) {
    m_output_transcription_track = output_transcription_track;
    m_output_transcription_track_isSet = true;
}

bool OAILiveEventTranscription::is_output_transcription_track_Set() const{
    return m_output_transcription_track_isSet;
}

bool OAILiveEventTranscription::is_output_transcription_track_Valid() const{
    return m_output_transcription_track_isValid;
}

bool OAILiveEventTranscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_track_selection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_transcription_track.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveEventTranscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
