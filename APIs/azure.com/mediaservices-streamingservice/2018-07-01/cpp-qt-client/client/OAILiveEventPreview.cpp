/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveEventPreview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveEventPreview::OAILiveEventPreview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveEventPreview::OAILiveEventPreview() {
    this->initializeModel();
}

OAILiveEventPreview::~OAILiveEventPreview() {}

void OAILiveEventPreview::initializeModel() {

    m_access_control_isSet = false;
    m_access_control_isValid = false;

    m_alternative_media_id_isSet = false;
    m_alternative_media_id_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_preview_locator_isSet = false;
    m_preview_locator_isValid = false;

    m_streaming_policy_name_isSet = false;
    m_streaming_policy_name_isValid = false;
}

void OAILiveEventPreview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveEventPreview::fromJsonObject(QJsonObject json) {

    m_access_control_isValid = ::OpenAPI::fromJsonValue(m_access_control, json[QString("accessControl")]);
    m_access_control_isSet = !json[QString("accessControl")].isNull() && m_access_control_isValid;

    m_alternative_media_id_isValid = ::OpenAPI::fromJsonValue(m_alternative_media_id, json[QString("alternativeMediaId")]);
    m_alternative_media_id_isSet = !json[QString("alternativeMediaId")].isNull() && m_alternative_media_id_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_preview_locator_isValid = ::OpenAPI::fromJsonValue(m_preview_locator, json[QString("previewLocator")]);
    m_preview_locator_isSet = !json[QString("previewLocator")].isNull() && m_preview_locator_isValid;

    m_streaming_policy_name_isValid = ::OpenAPI::fromJsonValue(m_streaming_policy_name, json[QString("streamingPolicyName")]);
    m_streaming_policy_name_isSet = !json[QString("streamingPolicyName")].isNull() && m_streaming_policy_name_isValid;
}

QString OAILiveEventPreview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveEventPreview::asJsonObject() const {
    QJsonObject obj;
    if (m_access_control.isSet()) {
        obj.insert(QString("accessControl"), ::OpenAPI::toJsonValue(m_access_control));
    }
    if (m_alternative_media_id_isSet) {
        obj.insert(QString("alternativeMediaId"), ::OpenAPI::toJsonValue(m_alternative_media_id));
    }
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_preview_locator_isSet) {
        obj.insert(QString("previewLocator"), ::OpenAPI::toJsonValue(m_preview_locator));
    }
    if (m_streaming_policy_name_isSet) {
        obj.insert(QString("streamingPolicyName"), ::OpenAPI::toJsonValue(m_streaming_policy_name));
    }
    return obj;
}

OAILiveEventPreviewAccessControl OAILiveEventPreview::getAccessControl() const {
    return m_access_control;
}
void OAILiveEventPreview::setAccessControl(const OAILiveEventPreviewAccessControl &access_control) {
    m_access_control = access_control;
    m_access_control_isSet = true;
}

bool OAILiveEventPreview::is_access_control_Set() const{
    return m_access_control_isSet;
}

bool OAILiveEventPreview::is_access_control_Valid() const{
    return m_access_control_isValid;
}

QString OAILiveEventPreview::getAlternativeMediaId() const {
    return m_alternative_media_id;
}
void OAILiveEventPreview::setAlternativeMediaId(const QString &alternative_media_id) {
    m_alternative_media_id = alternative_media_id;
    m_alternative_media_id_isSet = true;
}

bool OAILiveEventPreview::is_alternative_media_id_Set() const{
    return m_alternative_media_id_isSet;
}

bool OAILiveEventPreview::is_alternative_media_id_Valid() const{
    return m_alternative_media_id_isValid;
}

QList<OAILiveEventEndpoint> OAILiveEventPreview::getEndpoints() const {
    return m_endpoints;
}
void OAILiveEventPreview::setEndpoints(const QList<OAILiveEventEndpoint> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAILiveEventPreview::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAILiveEventPreview::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QString OAILiveEventPreview::getPreviewLocator() const {
    return m_preview_locator;
}
void OAILiveEventPreview::setPreviewLocator(const QString &preview_locator) {
    m_preview_locator = preview_locator;
    m_preview_locator_isSet = true;
}

bool OAILiveEventPreview::is_preview_locator_Set() const{
    return m_preview_locator_isSet;
}

bool OAILiveEventPreview::is_preview_locator_Valid() const{
    return m_preview_locator_isValid;
}

QString OAILiveEventPreview::getStreamingPolicyName() const {
    return m_streaming_policy_name;
}
void OAILiveEventPreview::setStreamingPolicyName(const QString &streaming_policy_name) {
    m_streaming_policy_name = streaming_policy_name;
    m_streaming_policy_name_isSet = true;
}

bool OAILiveEventPreview::is_streaming_policy_name_Set() const{
    return m_streaming_policy_name_isSet;
}

bool OAILiveEventPreview::is_streaming_policy_name_Valid() const{
    return m_streaming_policy_name_isValid;
}

bool OAILiveEventPreview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternative_media_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_locator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveEventPreview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
