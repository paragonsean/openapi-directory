/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILiveEventsApi_H
#define OAI_OAILiveEventsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAILiveEvent.h"
#include "OAILiveEventActionInput.h"
#include "OAILiveEventListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILiveEventsApi : public QObject {
    Q_OBJECT

public:
    OAILiveEventsApi(const int timeOut = 0);
    ~OAILiveEventsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  live_event_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAILiveEvent [required]
    * @param[in]  auto_start bool [optional]
    */
    virtual void liveEventsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &live_event_name, const QString &api_version, const OAILiveEvent &parameters, const ::OpenAPI::OptionalParam<bool> &auto_start = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  live_event_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void liveEventsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &live_event_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  live_event_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void liveEventsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &live_event_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void liveEventsList(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  live_event_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void liveEventsReset(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &live_event_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  live_event_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void liveEventsStart(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &live_event_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  live_event_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAILiveEventActionInput [required]
    */
    virtual void liveEventsStop(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &live_event_name, const QString &api_version, const OAILiveEventActionInput &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  live_event_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAILiveEvent [required]
    */
    virtual void liveEventsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &live_event_name, const QString &api_version, const OAILiveEvent &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void liveEventsCreateCallback(OAIHttpRequestWorker *worker);
    void liveEventsDeleteCallback(OAIHttpRequestWorker *worker);
    void liveEventsGetCallback(OAIHttpRequestWorker *worker);
    void liveEventsListCallback(OAIHttpRequestWorker *worker);
    void liveEventsResetCallback(OAIHttpRequestWorker *worker);
    void liveEventsStartCallback(OAIHttpRequestWorker *worker);
    void liveEventsStopCallback(OAIHttpRequestWorker *worker);
    void liveEventsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void liveEventsCreateSignal(OAILiveEvent summary);
    void liveEventsDeleteSignal();
    void liveEventsGetSignal(OAILiveEvent summary);
    void liveEventsListSignal(OAILiveEventListResult summary);
    void liveEventsResetSignal();
    void liveEventsStartSignal();
    void liveEventsStopSignal();
    void liveEventsUpdateSignal(OAILiveEvent summary);


    void liveEventsCreateSignalFull(OAIHttpRequestWorker *worker, OAILiveEvent summary);
    void liveEventsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void liveEventsGetSignalFull(OAIHttpRequestWorker *worker, OAILiveEvent summary);
    void liveEventsListSignalFull(OAIHttpRequestWorker *worker, OAILiveEventListResult summary);
    void liveEventsResetSignalFull(OAIHttpRequestWorker *worker);
    void liveEventsStartSignalFull(OAIHttpRequestWorker *worker);
    void liveEventsStopSignalFull(OAIHttpRequestWorker *worker);
    void liveEventsUpdateSignalFull(OAIHttpRequestWorker *worker, OAILiveEvent summary);

    Q_DECL_DEPRECATED_X("Use liveEventsCreateSignalError() instead")
    void liveEventsCreateSignalE(OAILiveEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsCreateSignalError(OAILiveEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsDeleteSignalError() instead")
    void liveEventsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsGetSignalError() instead")
    void liveEventsGetSignalE(OAILiveEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsGetSignalError(OAILiveEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsListSignalError() instead")
    void liveEventsListSignalE(OAILiveEventListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsListSignalError(OAILiveEventListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsResetSignalError() instead")
    void liveEventsResetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsResetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsStartSignalError() instead")
    void liveEventsStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsStopSignalError() instead")
    void liveEventsStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsUpdateSignalError() instead")
    void liveEventsUpdateSignalE(OAILiveEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsUpdateSignalError(OAILiveEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use liveEventsCreateSignalErrorFull() instead")
    void liveEventsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsDeleteSignalErrorFull() instead")
    void liveEventsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsGetSignalErrorFull() instead")
    void liveEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsListSignalErrorFull() instead")
    void liveEventsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsResetSignalErrorFull() instead")
    void liveEventsResetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsResetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsStartSignalErrorFull() instead")
    void liveEventsStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsStopSignalErrorFull() instead")
    void liveEventsStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveEventsUpdateSignalErrorFull() instead")
    void liveEventsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liveEventsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
