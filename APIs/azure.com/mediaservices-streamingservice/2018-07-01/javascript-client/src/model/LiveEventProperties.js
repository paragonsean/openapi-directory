/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CrossSiteAccessPolicies from './CrossSiteAccessPolicies';
import LiveEventEncoding from './LiveEventEncoding';
import LiveEventInput from './LiveEventInput';
import LiveEventPreview from './LiveEventPreview';

/**
 * The LiveEventProperties model module.
 * @module model/LiveEventProperties
 * @version 2018-07-01
 */
class LiveEventProperties {
    /**
     * Constructs a new <code>LiveEventProperties</code>.
     * The Live Event properties.
     * @alias module:model/LiveEventProperties
     * @param input {module:model/LiveEventInput} 
     */
    constructor(input) { 
        
        LiveEventProperties.initialize(this, input);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, input) { 
        obj['input'] = input;
    }

    /**
     * Constructs a <code>LiveEventProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveEventProperties} obj Optional instance to populate.
     * @return {module:model/LiveEventProperties} The populated <code>LiveEventProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveEventProperties();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('crossSiteAccessPolicies')) {
                obj['crossSiteAccessPolicies'] = CrossSiteAccessPolicies.constructFromObject(data['crossSiteAccessPolicies']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = LiveEventEncoding.constructFromObject(data['encoding']);
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = LiveEventInput.constructFromObject(data['input']);
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('preview')) {
                obj['preview'] = LiveEventPreview.constructFromObject(data['preview']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('resourceState')) {
                obj['resourceState'] = ApiClient.convertToType(data['resourceState'], 'String');
            }
            if (data.hasOwnProperty('streamOptions')) {
                obj['streamOptions'] = ApiClient.convertToType(data['streamOptions'], ['String']);
            }
            if (data.hasOwnProperty('vanityUrl')) {
                obj['vanityUrl'] = ApiClient.convertToType(data['vanityUrl'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveEventProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveEventProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LiveEventProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `crossSiteAccessPolicies`
        if (data['crossSiteAccessPolicies']) { // data not null
          CrossSiteAccessPolicies.validateJSON(data['crossSiteAccessPolicies']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `encoding`
        if (data['encoding']) { // data not null
          LiveEventEncoding.validateJSON(data['encoding']);
        }
        // validate the optional field `input`
        if (data['input']) { // data not null
          LiveEventInput.validateJSON(data['input']);
        }
        // validate the optional field `preview`
        if (data['preview']) { // data not null
          LiveEventPreview.validateJSON(data['preview']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['resourceState'] && !(typeof data['resourceState'] === 'string' || data['resourceState'] instanceof String)) {
            throw new Error("Expected the field `resourceState` to be a primitive type in the JSON string but got " + data['resourceState']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['streamOptions'])) {
            throw new Error("Expected the field `streamOptions` to be an array in the JSON data but got " + data['streamOptions']);
        }

        return true;
    }


}

LiveEventProperties.RequiredProperties = ["input"];

/**
 * The exact time the Live Event was created.
 * @member {Date} created
 */
LiveEventProperties.prototype['created'] = undefined;

/**
 * @member {module:model/CrossSiteAccessPolicies} crossSiteAccessPolicies
 */
LiveEventProperties.prototype['crossSiteAccessPolicies'] = undefined;

/**
 * The Live Event description.
 * @member {String} description
 */
LiveEventProperties.prototype['description'] = undefined;

/**
 * @member {module:model/LiveEventEncoding} encoding
 */
LiveEventProperties.prototype['encoding'] = undefined;

/**
 * @member {module:model/LiveEventInput} input
 */
LiveEventProperties.prototype['input'] = undefined;

/**
 * The exact time the Live Event was last modified.
 * @member {Date} lastModified
 */
LiveEventProperties.prototype['lastModified'] = undefined;

/**
 * @member {module:model/LiveEventPreview} preview
 */
LiveEventProperties.prototype['preview'] = undefined;

/**
 * The provisioning state of the Live Event.
 * @member {String} provisioningState
 */
LiveEventProperties.prototype['provisioningState'] = undefined;

/**
 * The resource state of the Live Event.
 * @member {module:model/LiveEventProperties.ResourceStateEnum} resourceState
 */
LiveEventProperties.prototype['resourceState'] = undefined;

/**
 * The options to use for the LiveEvent.  This value is specified at creation time and cannot be updated.
 * @member {Array.<module:model/LiveEventProperties.StreamOptionsEnum>} streamOptions
 */
LiveEventProperties.prototype['streamOptions'] = undefined;

/**
 * Specifies whether to use a vanity url with the Live Event.  This value is specified at creation time and cannot be updated.
 * @member {Boolean} vanityUrl
 */
LiveEventProperties.prototype['vanityUrl'] = undefined;





/**
 * Allowed values for the <code>resourceState</code> property.
 * @enum {String}
 * @readonly
 */
LiveEventProperties['ResourceStateEnum'] = {

    /**
     * value: "Stopped"
     * @const
     */
    "Stopped": "Stopped",

    /**
     * value: "Starting"
     * @const
     */
    "Starting": "Starting",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Stopping"
     * @const
     */
    "Stopping": "Stopping",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting"
};


/**
 * Allowed values for the <code>streamOptions</code> property.
 * @enum {String}
 * @readonly
 */
LiveEventProperties['StreamOptionsEnum'] = {

    /**
     * value: "Default"
     * @const
     */
    "Default": "Default",

    /**
     * value: "LowLatency"
     * @const
     */
    "LowLatency": "LowLatency"
};



export default LiveEventProperties;

