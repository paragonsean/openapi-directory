/*
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.LiveOutput;
import org.openapitools.client.model.LiveOutputListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LiveOutputsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LiveOutputsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LiveOutputsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for liveOutputsCreate
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param liveOutputName The name of the Live Output. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters Live Output properties needed for creation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. See https://go.microsoft.com/fwlink/?linkid&#x3D;2087017 for details on the monitoring asynchronous Azure Operations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveOutputsCreateCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion, LiveOutput parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "liveEventName" + "}", localVarApiClient.escapeString(liveEventName.toString()))
            .replace("{" + "liveOutputName" + "}", localVarApiClient.escapeString(liveOutputName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveOutputsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion, LiveOutput parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling liveOutputsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling liveOutputsCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling liveOutputsCreate(Async)");
        }

        // verify the required parameter 'liveEventName' is set
        if (liveEventName == null) {
            throw new ApiException("Missing the required parameter 'liveEventName' when calling liveOutputsCreate(Async)");
        }

        // verify the required parameter 'liveOutputName' is set
        if (liveOutputName == null) {
            throw new ApiException("Missing the required parameter 'liveOutputName' when calling liveOutputsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling liveOutputsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling liveOutputsCreate(Async)");
        }

        return liveOutputsCreateCall(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, parameters, _callback);

    }

    /**
     * Create Live Output
     * Creates a Live Output.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param liveOutputName The name of the Live Output. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters Live Output properties needed for creation. (required)
     * @return LiveOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. See https://go.microsoft.com/fwlink/?linkid&#x3D;2087017 for details on the monitoring asynchronous Azure Operations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LiveOutput liveOutputsCreate(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion, LiveOutput parameters) throws ApiException {
        ApiResponse<LiveOutput> localVarResp = liveOutputsCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create Live Output
     * Creates a Live Output.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param liveOutputName The name of the Live Output. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters Live Output properties needed for creation. (required)
     * @return ApiResponse&lt;LiveOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. See https://go.microsoft.com/fwlink/?linkid&#x3D;2087017 for details on the monitoring asynchronous Azure Operations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiveOutput> liveOutputsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion, LiveOutput parameters) throws ApiException {
        okhttp3.Call localVarCall = liveOutputsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<LiveOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Live Output (asynchronously)
     * Creates a Live Output.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param liveOutputName The name of the Live Output. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters Live Output properties needed for creation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. See https://go.microsoft.com/fwlink/?linkid&#x3D;2087017 for details on the monitoring asynchronous Azure Operations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveOutputsCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion, LiveOutput parameters, final ApiCallback<LiveOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveOutputsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<LiveOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for liveOutputsDelete
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param liveOutputName The name of the Live Output. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. See https://go.microsoft.com/fwlink/?linkid&#x3D;2087017 for details on the monitoring asynchronous Azure Operations. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. The request has been accepted but the Live Output was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveOutputsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "liveEventName" + "}", localVarApiClient.escapeString(liveEventName.toString()))
            .replace("{" + "liveOutputName" + "}", localVarApiClient.escapeString(liveOutputName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveOutputsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling liveOutputsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling liveOutputsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling liveOutputsDelete(Async)");
        }

        // verify the required parameter 'liveEventName' is set
        if (liveEventName == null) {
            throw new ApiException("Missing the required parameter 'liveEventName' when calling liveOutputsDelete(Async)");
        }

        // verify the required parameter 'liveOutputName' is set
        if (liveOutputName == null) {
            throw new ApiException("Missing the required parameter 'liveOutputName' when calling liveOutputsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling liveOutputsDelete(Async)");
        }

        return liveOutputsDeleteCall(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, _callback);

    }

    /**
     * Delete Live Output
     * Deletes a Live Output.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param liveOutputName The name of the Live Output. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. See https://go.microsoft.com/fwlink/?linkid&#x3D;2087017 for details on the monitoring asynchronous Azure Operations. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. The request has been accepted but the Live Output was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void liveOutputsDelete(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion) throws ApiException {
        liveOutputsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion);
    }

    /**
     * Delete Live Output
     * Deletes a Live Output.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param liveOutputName The name of the Live Output. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. See https://go.microsoft.com/fwlink/?linkid&#x3D;2087017 for details on the monitoring asynchronous Azure Operations. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. The request has been accepted but the Live Output was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> liveOutputsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = liveOutputsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Live Output (asynchronously)
     * Deletes a Live Output.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param liveOutputName The name of the Live Output. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. See https://go.microsoft.com/fwlink/?linkid&#x3D;2087017 for details on the monitoring asynchronous Azure Operations. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. The request has been accepted but the Live Output was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveOutputsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveOutputsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for liveOutputsGet
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param liveOutputName The name of the Live Output. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveOutputsGetCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "liveEventName" + "}", localVarApiClient.escapeString(liveEventName.toString()))
            .replace("{" + "liveOutputName" + "}", localVarApiClient.escapeString(liveOutputName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveOutputsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling liveOutputsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling liveOutputsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling liveOutputsGet(Async)");
        }

        // verify the required parameter 'liveEventName' is set
        if (liveEventName == null) {
            throw new ApiException("Missing the required parameter 'liveEventName' when calling liveOutputsGet(Async)");
        }

        // verify the required parameter 'liveOutputName' is set
        if (liveOutputName == null) {
            throw new ApiException("Missing the required parameter 'liveOutputName' when calling liveOutputsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling liveOutputsGet(Async)");
        }

        return liveOutputsGetCall(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, _callback);

    }

    /**
     * Get Live Output
     * Gets a Live Output.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param liveOutputName The name of the Live Output. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return LiveOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LiveOutput liveOutputsGet(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion) throws ApiException {
        ApiResponse<LiveOutput> localVarResp = liveOutputsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Live Output
     * Gets a Live Output.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param liveOutputName The name of the Live Output. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;LiveOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiveOutput> liveOutputsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = liveOutputsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, null);
        Type localVarReturnType = new TypeToken<LiveOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Live Output (asynchronously)
     * Gets a Live Output.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param liveOutputName The name of the Live Output. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveOutputsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String liveOutputName, String apiVersion, final ApiCallback<LiveOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveOutputsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LiveOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for liveOutputsList
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveOutputsListCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "liveEventName" + "}", localVarApiClient.escapeString(liveEventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveOutputsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling liveOutputsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling liveOutputsList(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling liveOutputsList(Async)");
        }

        // verify the required parameter 'liveEventName' is set
        if (liveEventName == null) {
            throw new ApiException("Missing the required parameter 'liveEventName' when calling liveOutputsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling liveOutputsList(Async)");
        }

        return liveOutputsListCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, _callback);

    }

    /**
     * List Live Outputs
     * Lists the Live Outputs in the Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return LiveOutputListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LiveOutputListResult liveOutputsList(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion) throws ApiException {
        ApiResponse<LiveOutputListResult> localVarResp = liveOutputsListWithHttpInfo(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List Live Outputs
     * Lists the Live Outputs in the Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;LiveOutputListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiveOutputListResult> liveOutputsListWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = liveOutputsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, null);
        Type localVarReturnType = new TypeToken<LiveOutputListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Live Outputs (asynchronously)
     * Lists the Live Outputs in the Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveOutputsListAsync(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback<LiveOutputListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveOutputsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LiveOutputListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
