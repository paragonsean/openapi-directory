# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IPRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, name: str=None, subnet_prefix_length: int=None):
        """IPRange - a model defined in OpenAPI

        :param address: The address of this IPRange.
        :param name: The name of this IPRange.
        :param subnet_prefix_length: The subnet_prefix_length of this IPRange.
        """
        self.openapi_types = {
            'address': str,
            'name': str,
            'subnet_prefix_length': int
        }

        self.attribute_map = {
            'address': 'address',
            'name': 'name',
            'subnet_prefix_length': 'subnetPrefixLength'
        }

        self._address = address
        self._name = name
        self._subnet_prefix_length = subnet_prefix_length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPRange of this IPRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this IPRange.

        The IP address.

        :return: The address of this IPRange.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IPRange.

        The IP address.

        :param address: The address of this IPRange.
        :type address: str
        """

        self._address = address

    @property
    def name(self):
        """Gets the name of this IPRange.

        The friendly name for the IP address range.

        :return: The name of this IPRange.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IPRange.

        The friendly name for the IP address range.

        :param name: The name of this IPRange.
        :type name: str
        """

        self._name = name

    @property
    def subnet_prefix_length(self):
        """Gets the subnet_prefix_length of this IPRange.

        The subnet mask prefix length (see CIDR notation).

        :return: The subnet_prefix_length of this IPRange.
        :rtype: int
        """
        return self._subnet_prefix_length

    @subnet_prefix_length.setter
    def subnet_prefix_length(self, subnet_prefix_length):
        """Sets the subnet_prefix_length of this IPRange.

        The subnet mask prefix length (see CIDR notation).

        :param subnet_prefix_length: The subnet_prefix_length of this IPRange.
        :type subnet_prefix_length: int
        """

        self._subnet_prefix_length = subnet_prefix_length
