/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrossSiteAccessPolicies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrossSiteAccessPolicies::OAICrossSiteAccessPolicies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrossSiteAccessPolicies::OAICrossSiteAccessPolicies() {
    this->initializeModel();
}

OAICrossSiteAccessPolicies::~OAICrossSiteAccessPolicies() {}

void OAICrossSiteAccessPolicies::initializeModel() {

    m_client_access_policy_isSet = false;
    m_client_access_policy_isValid = false;

    m_cross_domain_policy_isSet = false;
    m_cross_domain_policy_isValid = false;
}

void OAICrossSiteAccessPolicies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrossSiteAccessPolicies::fromJsonObject(QJsonObject json) {

    m_client_access_policy_isValid = ::OpenAPI::fromJsonValue(m_client_access_policy, json[QString("clientAccessPolicy")]);
    m_client_access_policy_isSet = !json[QString("clientAccessPolicy")].isNull() && m_client_access_policy_isValid;

    m_cross_domain_policy_isValid = ::OpenAPI::fromJsonValue(m_cross_domain_policy, json[QString("crossDomainPolicy")]);
    m_cross_domain_policy_isSet = !json[QString("crossDomainPolicy")].isNull() && m_cross_domain_policy_isValid;
}

QString OAICrossSiteAccessPolicies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrossSiteAccessPolicies::asJsonObject() const {
    QJsonObject obj;
    if (m_client_access_policy_isSet) {
        obj.insert(QString("clientAccessPolicy"), ::OpenAPI::toJsonValue(m_client_access_policy));
    }
    if (m_cross_domain_policy_isSet) {
        obj.insert(QString("crossDomainPolicy"), ::OpenAPI::toJsonValue(m_cross_domain_policy));
    }
    return obj;
}

QString OAICrossSiteAccessPolicies::getClientAccessPolicy() const {
    return m_client_access_policy;
}
void OAICrossSiteAccessPolicies::setClientAccessPolicy(const QString &client_access_policy) {
    m_client_access_policy = client_access_policy;
    m_client_access_policy_isSet = true;
}

bool OAICrossSiteAccessPolicies::is_client_access_policy_Set() const{
    return m_client_access_policy_isSet;
}

bool OAICrossSiteAccessPolicies::is_client_access_policy_Valid() const{
    return m_client_access_policy_isValid;
}

QString OAICrossSiteAccessPolicies::getCrossDomainPolicy() const {
    return m_cross_domain_policy;
}
void OAICrossSiteAccessPolicies::setCrossDomainPolicy(const QString &cross_domain_policy) {
    m_cross_domain_policy = cross_domain_policy;
    m_cross_domain_policy_isSet = true;
}

bool OAICrossSiteAccessPolicies::is_cross_domain_policy_Set() const{
    return m_cross_domain_policy_isSet;
}

bool OAICrossSiteAccessPolicies::is_cross_domain_policy_Valid() const{
    return m_cross_domain_policy_isValid;
}

bool OAICrossSiteAccessPolicies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_access_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_domain_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrossSiteAccessPolicies::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
