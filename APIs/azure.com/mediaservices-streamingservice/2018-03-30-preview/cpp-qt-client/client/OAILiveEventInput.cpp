/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveEventInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveEventInput::OAILiveEventInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveEventInput::OAILiveEventInput() {
    this->initializeModel();
}

OAILiveEventInput::~OAILiveEventInput() {}

void OAILiveEventInput::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_key_frame_interval_duration_isSet = false;
    m_key_frame_interval_duration_isValid = false;

    m_streaming_protocol_isSet = false;
    m_streaming_protocol_isValid = false;
}

void OAILiveEventInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveEventInput::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_key_frame_interval_duration_isValid = ::OpenAPI::fromJsonValue(m_key_frame_interval_duration, json[QString("keyFrameIntervalDuration")]);
    m_key_frame_interval_duration_isSet = !json[QString("keyFrameIntervalDuration")].isNull() && m_key_frame_interval_duration_isValid;

    m_streaming_protocol_isValid = ::OpenAPI::fromJsonValue(m_streaming_protocol, json[QString("streamingProtocol")]);
    m_streaming_protocol_isSet = !json[QString("streamingProtocol")].isNull() && m_streaming_protocol_isValid;
}

QString OAILiveEventInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveEventInput::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_key_frame_interval_duration_isSet) {
        obj.insert(QString("keyFrameIntervalDuration"), ::OpenAPI::toJsonValue(m_key_frame_interval_duration));
    }
    if (m_streaming_protocol_isSet) {
        obj.insert(QString("streamingProtocol"), ::OpenAPI::toJsonValue(m_streaming_protocol));
    }
    return obj;
}

QString OAILiveEventInput::getAccessToken() const {
    return m_access_token;
}
void OAILiveEventInput::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAILiveEventInput::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAILiveEventInput::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QList<OAILiveEventEndpoint> OAILiveEventInput::getEndpoints() const {
    return m_endpoints;
}
void OAILiveEventInput::setEndpoints(const QList<OAILiveEventEndpoint> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAILiveEventInput::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAILiveEventInput::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QString OAILiveEventInput::getKeyFrameIntervalDuration() const {
    return m_key_frame_interval_duration;
}
void OAILiveEventInput::setKeyFrameIntervalDuration(const QString &key_frame_interval_duration) {
    m_key_frame_interval_duration = key_frame_interval_duration;
    m_key_frame_interval_duration_isSet = true;
}

bool OAILiveEventInput::is_key_frame_interval_duration_Set() const{
    return m_key_frame_interval_duration_isSet;
}

bool OAILiveEventInput::is_key_frame_interval_duration_Valid() const{
    return m_key_frame_interval_duration_isValid;
}

QString OAILiveEventInput::getStreamingProtocol() const {
    return m_streaming_protocol;
}
void OAILiveEventInput::setStreamingProtocol(const QString &streaming_protocol) {
    m_streaming_protocol = streaming_protocol;
    m_streaming_protocol_isSet = true;
}

bool OAILiveEventInput::is_streaming_protocol_Set() const{
    return m_streaming_protocol_isSet;
}

bool OAILiveEventInput::is_streaming_protocol_Valid() const{
    return m_streaming_protocol_isValid;
}

bool OAILiveEventInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_frame_interval_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveEventInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_streaming_protocol_isValid && true;
}

} // namespace OpenAPI
