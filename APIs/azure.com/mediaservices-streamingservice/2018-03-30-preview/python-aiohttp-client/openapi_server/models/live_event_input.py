# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_event_endpoint import LiveEventEndpoint
from openapi_server import util


class LiveEventInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, endpoints: List[LiveEventEndpoint]=None, key_frame_interval_duration: str=None, streaming_protocol: str=None):
        """LiveEventInput - a model defined in OpenAPI

        :param access_token: The access_token of this LiveEventInput.
        :param endpoints: The endpoints of this LiveEventInput.
        :param key_frame_interval_duration: The key_frame_interval_duration of this LiveEventInput.
        :param streaming_protocol: The streaming_protocol of this LiveEventInput.
        """
        self.openapi_types = {
            'access_token': str,
            'endpoints': List[LiveEventEndpoint],
            'key_frame_interval_duration': str,
            'streaming_protocol': str
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'endpoints': 'endpoints',
            'key_frame_interval_duration': 'keyFrameIntervalDuration',
            'streaming_protocol': 'streamingProtocol'
        }

        self._access_token = access_token
        self._endpoints = endpoints
        self._key_frame_interval_duration = key_frame_interval_duration
        self._streaming_protocol = streaming_protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveEventInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveEventInput of this LiveEventInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this LiveEventInput.

        The access token.

        :return: The access_token of this LiveEventInput.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this LiveEventInput.

        The access token.

        :param access_token: The access_token of this LiveEventInput.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def endpoints(self):
        """Gets the endpoints of this LiveEventInput.

        The input endpoints for the Live Event.

        :return: The endpoints of this LiveEventInput.
        :rtype: List[LiveEventEndpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this LiveEventInput.

        The input endpoints for the Live Event.

        :param endpoints: The endpoints of this LiveEventInput.
        :type endpoints: List[LiveEventEndpoint]
        """

        self._endpoints = endpoints

    @property
    def key_frame_interval_duration(self):
        """Gets the key_frame_interval_duration of this LiveEventInput.

        ISO 8601 timespan duration of the key frame interval duration.

        :return: The key_frame_interval_duration of this LiveEventInput.
        :rtype: str
        """
        return self._key_frame_interval_duration

    @key_frame_interval_duration.setter
    def key_frame_interval_duration(self, key_frame_interval_duration):
        """Sets the key_frame_interval_duration of this LiveEventInput.

        ISO 8601 timespan duration of the key frame interval duration.

        :param key_frame_interval_duration: The key_frame_interval_duration of this LiveEventInput.
        :type key_frame_interval_duration: str
        """

        self._key_frame_interval_duration = key_frame_interval_duration

    @property
    def streaming_protocol(self):
        """Gets the streaming_protocol of this LiveEventInput.

        The streaming protocol for the Live Event.

        :return: The streaming_protocol of this LiveEventInput.
        :rtype: str
        """
        return self._streaming_protocol

    @streaming_protocol.setter
    def streaming_protocol(self, streaming_protocol):
        """Sets the streaming_protocol of this LiveEventInput.

        The streaming protocol for the Live Event.

        :param streaming_protocol: The streaming_protocol of this LiveEventInput.
        :type streaming_protocol: str
        """
        allowed_values = ["FragmentedMP4", "RTMP"]  # noqa: E501
        if streaming_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `streaming_protocol` ({0}), must be one of {1}"
                .format(streaming_protocol, allowed_values)
            )

        self._streaming_protocol = streaming_protocol
