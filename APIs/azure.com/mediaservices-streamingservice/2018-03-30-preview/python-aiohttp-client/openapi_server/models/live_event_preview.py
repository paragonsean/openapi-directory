# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_event_endpoint import LiveEventEndpoint
from openapi_server.models.live_event_preview_access_control import LiveEventPreviewAccessControl
from openapi_server import util


class LiveEventPreview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_control: LiveEventPreviewAccessControl=None, endpoints: List[LiveEventEndpoint]=None, preview_locator: str=None, streaming_policy_name: str=None):
        """LiveEventPreview - a model defined in OpenAPI

        :param access_control: The access_control of this LiveEventPreview.
        :param endpoints: The endpoints of this LiveEventPreview.
        :param preview_locator: The preview_locator of this LiveEventPreview.
        :param streaming_policy_name: The streaming_policy_name of this LiveEventPreview.
        """
        self.openapi_types = {
            'access_control': LiveEventPreviewAccessControl,
            'endpoints': List[LiveEventEndpoint],
            'preview_locator': str,
            'streaming_policy_name': str
        }

        self.attribute_map = {
            'access_control': 'accessControl',
            'endpoints': 'endpoints',
            'preview_locator': 'previewLocator',
            'streaming_policy_name': 'streamingPolicyName'
        }

        self._access_control = access_control
        self._endpoints = endpoints
        self._preview_locator = preview_locator
        self._streaming_policy_name = streaming_policy_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveEventPreview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveEventPreview of this LiveEventPreview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_control(self):
        """Gets the access_control of this LiveEventPreview.


        :return: The access_control of this LiveEventPreview.
        :rtype: LiveEventPreviewAccessControl
        """
        return self._access_control

    @access_control.setter
    def access_control(self, access_control):
        """Sets the access_control of this LiveEventPreview.


        :param access_control: The access_control of this LiveEventPreview.
        :type access_control: LiveEventPreviewAccessControl
        """

        self._access_control = access_control

    @property
    def endpoints(self):
        """Gets the endpoints of this LiveEventPreview.

        The endpoints for preview.

        :return: The endpoints of this LiveEventPreview.
        :rtype: List[LiveEventEndpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this LiveEventPreview.

        The endpoints for preview.

        :param endpoints: The endpoints of this LiveEventPreview.
        :type endpoints: List[LiveEventEndpoint]
        """

        self._endpoints = endpoints

    @property
    def preview_locator(self):
        """Gets the preview_locator of this LiveEventPreview.

        The preview locator Guid.

        :return: The preview_locator of this LiveEventPreview.
        :rtype: str
        """
        return self._preview_locator

    @preview_locator.setter
    def preview_locator(self, preview_locator):
        """Sets the preview_locator of this LiveEventPreview.

        The preview locator Guid.

        :param preview_locator: The preview_locator of this LiveEventPreview.
        :type preview_locator: str
        """

        self._preview_locator = preview_locator

    @property
    def streaming_policy_name(self):
        """Gets the streaming_policy_name of this LiveEventPreview.

        The name of streaming policy used for LiveEvent preview

        :return: The streaming_policy_name of this LiveEventPreview.
        :rtype: str
        """
        return self._streaming_policy_name

    @streaming_policy_name.setter
    def streaming_policy_name(self, streaming_policy_name):
        """Sets the streaming_policy_name of this LiveEventPreview.

        The name of streaming policy used for LiveEvent preview

        :param streaming_policy_name: The streaming_policy_name of this LiveEventPreview.
        :type streaming_policy_name: str
        """

        self._streaming_policy_name = streaming_policy_name
