# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hls import Hls
from openapi_server import util


class LiveOutputProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_window_length: str=None, asset_name: str=None, created: datetime=None, description: str=None, hls: Hls=None, last_modified: datetime=None, manifest_name: str=None, output_snap_time: int=None, provisioning_state: str=None, resource_state: str=None):
        """LiveOutputProperties - a model defined in OpenAPI

        :param archive_window_length: The archive_window_length of this LiveOutputProperties.
        :param asset_name: The asset_name of this LiveOutputProperties.
        :param created: The created of this LiveOutputProperties.
        :param description: The description of this LiveOutputProperties.
        :param hls: The hls of this LiveOutputProperties.
        :param last_modified: The last_modified of this LiveOutputProperties.
        :param manifest_name: The manifest_name of this LiveOutputProperties.
        :param output_snap_time: The output_snap_time of this LiveOutputProperties.
        :param provisioning_state: The provisioning_state of this LiveOutputProperties.
        :param resource_state: The resource_state of this LiveOutputProperties.
        """
        self.openapi_types = {
            'archive_window_length': str,
            'asset_name': str,
            'created': datetime,
            'description': str,
            'hls': Hls,
            'last_modified': datetime,
            'manifest_name': str,
            'output_snap_time': int,
            'provisioning_state': str,
            'resource_state': str
        }

        self.attribute_map = {
            'archive_window_length': 'archiveWindowLength',
            'asset_name': 'assetName',
            'created': 'created',
            'description': 'description',
            'hls': 'hls',
            'last_modified': 'lastModified',
            'manifest_name': 'manifestName',
            'output_snap_time': 'outputSnapTime',
            'provisioning_state': 'provisioningState',
            'resource_state': 'resourceState'
        }

        self._archive_window_length = archive_window_length
        self._asset_name = asset_name
        self._created = created
        self._description = description
        self._hls = hls
        self._last_modified = last_modified
        self._manifest_name = manifest_name
        self._output_snap_time = output_snap_time
        self._provisioning_state = provisioning_state
        self._resource_state = resource_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveOutputProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveOutputProperties of this LiveOutputProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_window_length(self):
        """Gets the archive_window_length of this LiveOutputProperties.

        ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.

        :return: The archive_window_length of this LiveOutputProperties.
        :rtype: str
        """
        return self._archive_window_length

    @archive_window_length.setter
    def archive_window_length(self, archive_window_length):
        """Sets the archive_window_length of this LiveOutputProperties.

        ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.

        :param archive_window_length: The archive_window_length of this LiveOutputProperties.
        :type archive_window_length: str
        """
        if archive_window_length is None:
            raise ValueError("Invalid value for `archive_window_length`, must not be `None`")

        self._archive_window_length = archive_window_length

    @property
    def asset_name(self):
        """Gets the asset_name of this LiveOutputProperties.

        The asset name.

        :return: The asset_name of this LiveOutputProperties.
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this LiveOutputProperties.

        The asset name.

        :param asset_name: The asset_name of this LiveOutputProperties.
        :type asset_name: str
        """
        if asset_name is None:
            raise ValueError("Invalid value for `asset_name`, must not be `None`")

        self._asset_name = asset_name

    @property
    def created(self):
        """Gets the created of this LiveOutputProperties.

        The exact time the Live Output was created.

        :return: The created of this LiveOutputProperties.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this LiveOutputProperties.

        The exact time the Live Output was created.

        :param created: The created of this LiveOutputProperties.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this LiveOutputProperties.

        The description of the Live Output.

        :return: The description of this LiveOutputProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LiveOutputProperties.

        The description of the Live Output.

        :param description: The description of this LiveOutputProperties.
        :type description: str
        """

        self._description = description

    @property
    def hls(self):
        """Gets the hls of this LiveOutputProperties.


        :return: The hls of this LiveOutputProperties.
        :rtype: Hls
        """
        return self._hls

    @hls.setter
    def hls(self, hls):
        """Sets the hls of this LiveOutputProperties.


        :param hls: The hls of this LiveOutputProperties.
        :type hls: Hls
        """

        self._hls = hls

    @property
    def last_modified(self):
        """Gets the last_modified of this LiveOutputProperties.

        The exact time the Live Output was last modified.

        :return: The last_modified of this LiveOutputProperties.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this LiveOutputProperties.

        The exact time the Live Output was last modified.

        :param last_modified: The last_modified of this LiveOutputProperties.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def manifest_name(self):
        """Gets the manifest_name of this LiveOutputProperties.

        The manifest file name.

        :return: The manifest_name of this LiveOutputProperties.
        :rtype: str
        """
        return self._manifest_name

    @manifest_name.setter
    def manifest_name(self, manifest_name):
        """Sets the manifest_name of this LiveOutputProperties.

        The manifest file name.

        :param manifest_name: The manifest_name of this LiveOutputProperties.
        :type manifest_name: str
        """

        self._manifest_name = manifest_name

    @property
    def output_snap_time(self):
        """Gets the output_snap_time of this LiveOutputProperties.

        The output snapshot time.

        :return: The output_snap_time of this LiveOutputProperties.
        :rtype: int
        """
        return self._output_snap_time

    @output_snap_time.setter
    def output_snap_time(self, output_snap_time):
        """Sets the output_snap_time of this LiveOutputProperties.

        The output snapshot time.

        :param output_snap_time: The output_snap_time of this LiveOutputProperties.
        :type output_snap_time: int
        """

        self._output_snap_time = output_snap_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this LiveOutputProperties.

        The provisioning state of the Live Output.

        :return: The provisioning_state of this LiveOutputProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this LiveOutputProperties.

        The provisioning state of the Live Output.

        :param provisioning_state: The provisioning_state of this LiveOutputProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def resource_state(self):
        """Gets the resource_state of this LiveOutputProperties.

        The resource state of the Live Output.

        :return: The resource_state of this LiveOutputProperties.
        :rtype: str
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this LiveOutputProperties.

        The resource state of the Live Output.

        :param resource_state: The resource_state of this LiveOutputProperties.
        :type resource_state: str
        """
        allowed_values = ["Creating", "Running", "Deleting"]  # noqa: E501
        if resource_state not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_state` ({0}), must be one of {1}"
                .format(resource_state, allowed_values)
            )

        self._resource_state = resource_state
