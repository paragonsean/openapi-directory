/*
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Hls;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The JSON object that contains the properties required to create a Live Output.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:10.183421-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveOutputProperties {
  public static final String SERIALIZED_NAME_ARCHIVE_WINDOW_LENGTH = "archiveWindowLength";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_WINDOW_LENGTH)
  private String archiveWindowLength;

  public static final String SERIALIZED_NAME_ASSET_NAME = "assetName";
  @SerializedName(SERIALIZED_NAME_ASSET_NAME)
  private String assetName;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HLS = "hls";
  @SerializedName(SERIALIZED_NAME_HLS)
  private Hls hls;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_MANIFEST_NAME = "manifestName";
  @SerializedName(SERIALIZED_NAME_MANIFEST_NAME)
  private String manifestName;

  public static final String SERIALIZED_NAME_OUTPUT_SNAP_TIME = "outputSnapTime";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SNAP_TIME)
  private Long outputSnapTime;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  /**
   * The resource state of the Live Output.
   */
  @JsonAdapter(ResourceStateEnum.Adapter.class)
  public enum ResourceStateEnum {
    CREATING("Creating"),
    
    RUNNING("Running"),
    
    DELETING("Deleting");

    private String value;

    ResourceStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceStateEnum fromValue(String value) {
      for (ResourceStateEnum b : ResourceStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_STATE = "resourceState";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATE)
  private ResourceStateEnum resourceState;

  public LiveOutputProperties() {
  }

  public LiveOutputProperties(
     OffsetDateTime created, 
     OffsetDateTime lastModified, 
     String provisioningState, 
     ResourceStateEnum resourceState
  ) {
    this();
    this.created = created;
    this.lastModified = lastModified;
    this.provisioningState = provisioningState;
    this.resourceState = resourceState;
  }

  public LiveOutputProperties archiveWindowLength(String archiveWindowLength) {
    this.archiveWindowLength = archiveWindowLength;
    return this;
  }

  /**
   * ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
   * @return archiveWindowLength
   */
  @javax.annotation.Nonnull
  public String getArchiveWindowLength() {
    return archiveWindowLength;
  }

  public void setArchiveWindowLength(String archiveWindowLength) {
    this.archiveWindowLength = archiveWindowLength;
  }


  public LiveOutputProperties assetName(String assetName) {
    this.assetName = assetName;
    return this;
  }

  /**
   * The asset name.
   * @return assetName
   */
  @javax.annotation.Nonnull
  public String getAssetName() {
    return assetName;
  }

  public void setAssetName(String assetName) {
    this.assetName = assetName;
  }


  /**
   * The exact time the Live Output was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public LiveOutputProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the Live Output.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LiveOutputProperties hls(Hls hls) {
    this.hls = hls;
    return this;
  }

  /**
   * Get hls
   * @return hls
   */
  @javax.annotation.Nullable
  public Hls getHls() {
    return hls;
  }

  public void setHls(Hls hls) {
    this.hls = hls;
  }


  /**
   * The exact time the Live Output was last modified.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }



  public LiveOutputProperties manifestName(String manifestName) {
    this.manifestName = manifestName;
    return this;
  }

  /**
   * The manifest file name.
   * @return manifestName
   */
  @javax.annotation.Nullable
  public String getManifestName() {
    return manifestName;
  }

  public void setManifestName(String manifestName) {
    this.manifestName = manifestName;
  }


  public LiveOutputProperties outputSnapTime(Long outputSnapTime) {
    this.outputSnapTime = outputSnapTime;
    return this;
  }

  /**
   * The output snapshot time.
   * @return outputSnapTime
   */
  @javax.annotation.Nullable
  public Long getOutputSnapTime() {
    return outputSnapTime;
  }

  public void setOutputSnapTime(Long outputSnapTime) {
    this.outputSnapTime = outputSnapTime;
  }


  /**
   * The provisioning state of the Live Output.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * The resource state of the Live Output.
   * @return resourceState
   */
  @javax.annotation.Nullable
  public ResourceStateEnum getResourceState() {
    return resourceState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveOutputProperties liveOutputProperties = (LiveOutputProperties) o;
    return Objects.equals(this.archiveWindowLength, liveOutputProperties.archiveWindowLength) &&
        Objects.equals(this.assetName, liveOutputProperties.assetName) &&
        Objects.equals(this.created, liveOutputProperties.created) &&
        Objects.equals(this.description, liveOutputProperties.description) &&
        Objects.equals(this.hls, liveOutputProperties.hls) &&
        Objects.equals(this.lastModified, liveOutputProperties.lastModified) &&
        Objects.equals(this.manifestName, liveOutputProperties.manifestName) &&
        Objects.equals(this.outputSnapTime, liveOutputProperties.outputSnapTime) &&
        Objects.equals(this.provisioningState, liveOutputProperties.provisioningState) &&
        Objects.equals(this.resourceState, liveOutputProperties.resourceState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveWindowLength, assetName, created, description, hls, lastModified, manifestName, outputSnapTime, provisioningState, resourceState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveOutputProperties {\n");
    sb.append("    archiveWindowLength: ").append(toIndentedString(archiveWindowLength)).append("\n");
    sb.append("    assetName: ").append(toIndentedString(assetName)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hls: ").append(toIndentedString(hls)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    manifestName: ").append(toIndentedString(manifestName)).append("\n");
    sb.append("    outputSnapTime: ").append(toIndentedString(outputSnapTime)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceState: ").append(toIndentedString(resourceState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archiveWindowLength");
    openapiFields.add("assetName");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("hls");
    openapiFields.add("lastModified");
    openapiFields.add("manifestName");
    openapiFields.add("outputSnapTime");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("archiveWindowLength");
    openapiRequiredFields.add("assetName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveOutputProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveOutputProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveOutputProperties is not found in the empty JSON string", LiveOutputProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveOutputProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveOutputProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiveOutputProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("archiveWindowLength").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archiveWindowLength` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archiveWindowLength").toString()));
      }
      if (!jsonObj.get("assetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `hls`
      if (jsonObj.get("hls") != null && !jsonObj.get("hls").isJsonNull()) {
        Hls.validateJsonElement(jsonObj.get("hls"));
      }
      if ((jsonObj.get("manifestName") != null && !jsonObj.get("manifestName").isJsonNull()) && !jsonObj.get("manifestName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifestName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifestName").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) && !jsonObj.get("resourceState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceState").toString()));
      }
      // validate the optional field `resourceState`
      if (jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) {
        ResourceStateEnum.validateJsonElement(jsonObj.get("resourceState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveOutputProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveOutputProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveOutputProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveOutputProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveOutputProperties>() {
           @Override
           public void write(JsonWriter out, LiveOutputProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveOutputProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveOutputProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveOutputProperties
   * @throws IOException if the JSON string is invalid with respect to LiveOutputProperties
   */
  public static LiveOutputProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveOutputProperties.class);
  }

  /**
   * Convert an instance of LiveOutputProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

