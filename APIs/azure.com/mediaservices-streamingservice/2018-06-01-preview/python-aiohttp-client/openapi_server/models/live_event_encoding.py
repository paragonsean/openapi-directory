# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LiveEventEncoding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoding_type: str=None, preset_name: str=None):
        """LiveEventEncoding - a model defined in OpenAPI

        :param encoding_type: The encoding_type of this LiveEventEncoding.
        :param preset_name: The preset_name of this LiveEventEncoding.
        """
        self.openapi_types = {
            'encoding_type': str,
            'preset_name': str
        }

        self.attribute_map = {
            'encoding_type': 'encodingType',
            'preset_name': 'presetName'
        }

        self._encoding_type = encoding_type
        self._preset_name = preset_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveEventEncoding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveEventEncoding of this LiveEventEncoding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoding_type(self):
        """Gets the encoding_type of this LiveEventEncoding.

        The encoding type for Live Event.

        :return: The encoding_type of this LiveEventEncoding.
        :rtype: str
        """
        return self._encoding_type

    @encoding_type.setter
    def encoding_type(self, encoding_type):
        """Sets the encoding_type of this LiveEventEncoding.

        The encoding type for Live Event.

        :param encoding_type: The encoding_type of this LiveEventEncoding.
        :type encoding_type: str
        """
        allowed_values = ["None", "Basic"]  # noqa: E501
        if encoding_type not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding_type` ({0}), must be one of {1}"
                .format(encoding_type, allowed_values)
            )

        self._encoding_type = encoding_type

    @property
    def preset_name(self):
        """Gets the preset_name of this LiveEventEncoding.

        The encoding preset name.

        :return: The preset_name of this LiveEventEncoding.
        :rtype: str
        """
        return self._preset_name

    @preset_name.setter
    def preset_name(self, preset_name):
        """Sets the preset_name of this LiveEventEncoding.

        The encoding preset name.

        :param preset_name: The preset_name of this LiveEventEncoding.
        :type preset_name: str
        """

        self._preset_name = preset_name
