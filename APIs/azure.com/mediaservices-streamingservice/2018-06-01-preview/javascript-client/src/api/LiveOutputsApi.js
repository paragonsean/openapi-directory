/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import LiveOutput from '../model/LiveOutput';
import LiveOutputListResult from '../model/LiveOutputListResult';

/**
* LiveOutputs service.
* @module api/LiveOutputsApi
* @version 2018-06-01-preview
*/
export default class LiveOutputsApi {

    /**
    * Constructs a new LiveOutputsApi. 
    * @alias module:api/LiveOutputsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the liveOutputsCreate operation.
     * @callback module:api/LiveOutputsApi~liveOutputsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Live Output
     * Creates a Live Output.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} liveEventName The name of the Live Event.
     * @param {String} liveOutputName The name of the Live Output.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/LiveOutput} parameters Live Output properties needed for creation.
     * @param {module:api/LiveOutputsApi~liveOutputsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveOutput}
     */
    liveOutputsCreate(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling liveOutputsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling liveOutputsCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling liveOutputsCreate");
      }
      // verify the required parameter 'liveEventName' is set
      if (liveEventName === undefined || liveEventName === null) {
        throw new Error("Missing the required parameter 'liveEventName' when calling liveOutputsCreate");
      }
      // verify the required parameter 'liveOutputName' is set
      if (liveOutputName === undefined || liveOutputName === null) {
        throw new Error("Missing the required parameter 'liveOutputName' when calling liveOutputsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling liveOutputsCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling liveOutputsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'liveEventName': liveEventName,
        'liveOutputName': liveOutputName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiveOutput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liveOutputsDelete operation.
     * @callback module:api/LiveOutputsApi~liveOutputsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Live Output
     * Deletes a Live Output.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} liveEventName The name of the Live Event.
     * @param {String} liveOutputName The name of the Live Output.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/LiveOutputsApi~liveOutputsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    liveOutputsDelete(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling liveOutputsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling liveOutputsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling liveOutputsDelete");
      }
      // verify the required parameter 'liveEventName' is set
      if (liveEventName === undefined || liveEventName === null) {
        throw new Error("Missing the required parameter 'liveEventName' when calling liveOutputsDelete");
      }
      // verify the required parameter 'liveOutputName' is set
      if (liveOutputName === undefined || liveOutputName === null) {
        throw new Error("Missing the required parameter 'liveOutputName' when calling liveOutputsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling liveOutputsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'liveEventName': liveEventName,
        'liveOutputName': liveOutputName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liveOutputsGet operation.
     * @callback module:api/LiveOutputsApi~liveOutputsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Live Output
     * Gets a Live Output.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} liveEventName The name of the Live Event.
     * @param {String} liveOutputName The name of the Live Output.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/LiveOutputsApi~liveOutputsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveOutput}
     */
    liveOutputsGet(subscriptionId, resourceGroupName, accountName, liveEventName, liveOutputName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling liveOutputsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling liveOutputsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling liveOutputsGet");
      }
      // verify the required parameter 'liveEventName' is set
      if (liveEventName === undefined || liveEventName === null) {
        throw new Error("Missing the required parameter 'liveEventName' when calling liveOutputsGet");
      }
      // verify the required parameter 'liveOutputName' is set
      if (liveOutputName === undefined || liveOutputName === null) {
        throw new Error("Missing the required parameter 'liveOutputName' when calling liveOutputsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling liveOutputsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'liveEventName': liveEventName,
        'liveOutputName': liveOutputName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiveOutput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liveOutputsList operation.
     * @callback module:api/LiveOutputsApi~liveOutputsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveOutputListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Live Outputs
     * Lists the Live Outputs in the Live Event.
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} liveEventName The name of the Live Event.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/LiveOutputsApi~liveOutputsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveOutputListResult}
     */
    liveOutputsList(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling liveOutputsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling liveOutputsList");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling liveOutputsList");
      }
      // verify the required parameter 'liveEventName' is set
      if (liveEventName === undefined || liveEventName === null) {
        throw new Error("Missing the required parameter 'liveEventName' when calling liveOutputsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling liveOutputsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'liveEventName': liveEventName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiveOutputListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
