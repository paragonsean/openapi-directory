/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LiveEventEncoding model module.
 * @module model/LiveEventEncoding
 * @version 2018-06-01-preview
 */
class LiveEventEncoding {
    /**
     * Constructs a new <code>LiveEventEncoding</code>.
     * The Live Event encoding.
     * @alias module:model/LiveEventEncoding
     */
    constructor() { 
        
        LiveEventEncoding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveEventEncoding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveEventEncoding} obj Optional instance to populate.
     * @return {module:model/LiveEventEncoding} The populated <code>LiveEventEncoding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveEventEncoding();

            if (data.hasOwnProperty('encodingType')) {
                obj['encodingType'] = ApiClient.convertToType(data['encodingType'], 'String');
            }
            if (data.hasOwnProperty('presetName')) {
                obj['presetName'] = ApiClient.convertToType(data['presetName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveEventEncoding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveEventEncoding</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encodingType'] && !(typeof data['encodingType'] === 'string' || data['encodingType'] instanceof String)) {
            throw new Error("Expected the field `encodingType` to be a primitive type in the JSON string but got " + data['encodingType']);
        }
        // ensure the json data is a string
        if (data['presetName'] && !(typeof data['presetName'] === 'string' || data['presetName'] instanceof String)) {
            throw new Error("Expected the field `presetName` to be a primitive type in the JSON string but got " + data['presetName']);
        }

        return true;
    }


}



/**
 * The encoding type for Live Event.
 * @member {module:model/LiveEventEncoding.EncodingTypeEnum} encodingType
 */
LiveEventEncoding.prototype['encodingType'] = undefined;

/**
 * The encoding preset name.
 * @member {String} presetName
 */
LiveEventEncoding.prototype['presetName'] = undefined;





/**
 * Allowed values for the <code>encodingType</code> property.
 * @enum {String}
 * @readonly
 */
LiveEventEncoding['EncodingTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Basic"
     * @const
     */
    "Basic": "Basic"
};



export default LiveEventEncoding;

