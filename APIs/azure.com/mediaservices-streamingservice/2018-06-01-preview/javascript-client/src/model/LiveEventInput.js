/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LiveEventEndpoint from './LiveEventEndpoint';

/**
 * The LiveEventInput model module.
 * @module model/LiveEventInput
 * @version 2018-06-01-preview
 */
class LiveEventInput {
    /**
     * Constructs a new <code>LiveEventInput</code>.
     * The Live Event input.
     * @alias module:model/LiveEventInput
     * @param streamingProtocol {module:model/LiveEventInput.StreamingProtocolEnum} The streaming protocol for the Live Event.
     */
    constructor(streamingProtocol) { 
        
        LiveEventInput.initialize(this, streamingProtocol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, streamingProtocol) { 
        obj['streamingProtocol'] = streamingProtocol;
    }

    /**
     * Constructs a <code>LiveEventInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveEventInput} obj Optional instance to populate.
     * @return {module:model/LiveEventInput} The populated <code>LiveEventInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveEventInput();

            if (data.hasOwnProperty('accessToken')) {
                obj['accessToken'] = ApiClient.convertToType(data['accessToken'], 'String');
            }
            if (data.hasOwnProperty('endpoints')) {
                obj['endpoints'] = ApiClient.convertToType(data['endpoints'], [LiveEventEndpoint]);
            }
            if (data.hasOwnProperty('keyFrameIntervalDuration')) {
                obj['keyFrameIntervalDuration'] = ApiClient.convertToType(data['keyFrameIntervalDuration'], 'String');
            }
            if (data.hasOwnProperty('streamingProtocol')) {
                obj['streamingProtocol'] = ApiClient.convertToType(data['streamingProtocol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveEventInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveEventInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LiveEventInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accessToken'] && !(typeof data['accessToken'] === 'string' || data['accessToken'] instanceof String)) {
            throw new Error("Expected the field `accessToken` to be a primitive type in the JSON string but got " + data['accessToken']);
        }
        if (data['endpoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['endpoints'])) {
                throw new Error("Expected the field `endpoints` to be an array in the JSON data but got " + data['endpoints']);
            }
            // validate the optional field `endpoints` (array)
            for (const item of data['endpoints']) {
                LiveEventEndpoint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['keyFrameIntervalDuration'] && !(typeof data['keyFrameIntervalDuration'] === 'string' || data['keyFrameIntervalDuration'] instanceof String)) {
            throw new Error("Expected the field `keyFrameIntervalDuration` to be a primitive type in the JSON string but got " + data['keyFrameIntervalDuration']);
        }
        // ensure the json data is a string
        if (data['streamingProtocol'] && !(typeof data['streamingProtocol'] === 'string' || data['streamingProtocol'] instanceof String)) {
            throw new Error("Expected the field `streamingProtocol` to be a primitive type in the JSON string but got " + data['streamingProtocol']);
        }

        return true;
    }


}

LiveEventInput.RequiredProperties = ["streamingProtocol"];

/**
 * The access token.
 * @member {String} accessToken
 */
LiveEventInput.prototype['accessToken'] = undefined;

/**
 * The input endpoints for the Live Event.
 * @member {Array.<module:model/LiveEventEndpoint>} endpoints
 */
LiveEventInput.prototype['endpoints'] = undefined;

/**
 * ISO 8601 timespan duration of the key frame interval duration.
 * @member {String} keyFrameIntervalDuration
 */
LiveEventInput.prototype['keyFrameIntervalDuration'] = undefined;

/**
 * The streaming protocol for the Live Event.
 * @member {module:model/LiveEventInput.StreamingProtocolEnum} streamingProtocol
 */
LiveEventInput.prototype['streamingProtocol'] = undefined;





/**
 * Allowed values for the <code>streamingProtocol</code> property.
 * @enum {String}
 * @readonly
 */
LiveEventInput['StreamingProtocolEnum'] = {

    /**
     * value: "FragmentedMP4"
     * @const
     */
    "FragmentedMP4": "FragmentedMP4",

    /**
     * value: "RTMP"
     * @const
     */
    "RTMP": "RTMP"
};



export default LiveEventInput;

