/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LiveEventEndpoint from './LiveEventEndpoint';
import LiveEventPreviewAccessControl from './LiveEventPreviewAccessControl';

/**
 * The LiveEventPreview model module.
 * @module model/LiveEventPreview
 * @version 2018-06-01-preview
 */
class LiveEventPreview {
    /**
     * Constructs a new <code>LiveEventPreview</code>.
     * The Live Event preview.
     * @alias module:model/LiveEventPreview
     */
    constructor() { 
        
        LiveEventPreview.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveEventPreview</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveEventPreview} obj Optional instance to populate.
     * @return {module:model/LiveEventPreview} The populated <code>LiveEventPreview</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveEventPreview();

            if (data.hasOwnProperty('accessControl')) {
                obj['accessControl'] = LiveEventPreviewAccessControl.constructFromObject(data['accessControl']);
            }
            if (data.hasOwnProperty('alternativeMediaId')) {
                obj['alternativeMediaId'] = ApiClient.convertToType(data['alternativeMediaId'], 'String');
            }
            if (data.hasOwnProperty('endpoints')) {
                obj['endpoints'] = ApiClient.convertToType(data['endpoints'], [LiveEventEndpoint]);
            }
            if (data.hasOwnProperty('previewLocator')) {
                obj['previewLocator'] = ApiClient.convertToType(data['previewLocator'], 'String');
            }
            if (data.hasOwnProperty('streamingPolicyName')) {
                obj['streamingPolicyName'] = ApiClient.convertToType(data['streamingPolicyName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveEventPreview</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveEventPreview</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accessControl`
        if (data['accessControl']) { // data not null
          LiveEventPreviewAccessControl.validateJSON(data['accessControl']);
        }
        // ensure the json data is a string
        if (data['alternativeMediaId'] && !(typeof data['alternativeMediaId'] === 'string' || data['alternativeMediaId'] instanceof String)) {
            throw new Error("Expected the field `alternativeMediaId` to be a primitive type in the JSON string but got " + data['alternativeMediaId']);
        }
        if (data['endpoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['endpoints'])) {
                throw new Error("Expected the field `endpoints` to be an array in the JSON data but got " + data['endpoints']);
            }
            // validate the optional field `endpoints` (array)
            for (const item of data['endpoints']) {
                LiveEventEndpoint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['previewLocator'] && !(typeof data['previewLocator'] === 'string' || data['previewLocator'] instanceof String)) {
            throw new Error("Expected the field `previewLocator` to be a primitive type in the JSON string but got " + data['previewLocator']);
        }
        // ensure the json data is a string
        if (data['streamingPolicyName'] && !(typeof data['streamingPolicyName'] === 'string' || data['streamingPolicyName'] instanceof String)) {
            throw new Error("Expected the field `streamingPolicyName` to be a primitive type in the JSON string but got " + data['streamingPolicyName']);
        }

        return true;
    }


}



/**
 * @member {module:model/LiveEventPreviewAccessControl} accessControl
 */
LiveEventPreview.prototype['accessControl'] = undefined;

/**
 * An Alternative Media Identifier associated with the preview url.  This identifier can be used to distinguish the preview of different live events for authorization purposes in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
 * @member {String} alternativeMediaId
 */
LiveEventPreview.prototype['alternativeMediaId'] = undefined;

/**
 * The endpoints for preview.
 * @member {Array.<module:model/LiveEventEndpoint>} endpoints
 */
LiveEventPreview.prototype['endpoints'] = undefined;

/**
 * The preview locator Guid.
 * @member {String} previewLocator
 */
LiveEventPreview.prototype['previewLocator'] = undefined;

/**
 * The name of streaming policy used for LiveEvent preview
 * @member {String} streamingPolicyName
 */
LiveEventPreview.prototype['streamingPolicyName'] = undefined;






export default LiveEventPreview;

