/*
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.LiveEvent;
import org.openapitools.client.model.LiveEventActionInput;
import org.openapitools.client.model.LiveEventListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LiveEventsApi
 */
@Disabled
public class LiveEventsApiTest {

    private final LiveEventsApi api = new LiveEventsApi();

    /**
     * Create Live Event
     *
     * Creates a Live Event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void liveEventsCreateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String liveEventName = null;
        String apiVersion = null;
        LiveEvent parameters = null;
        Boolean autoStart = null;
        LiveEvent response = api.liveEventsCreate(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, autoStart);
        // TODO: test validations
    }

    /**
     * Delete Live Event
     *
     * Deletes a Live Event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void liveEventsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String liveEventName = null;
        String apiVersion = null;
        api.liveEventsDelete(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Live Event
     *
     * Gets a Live Event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void liveEventsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String liveEventName = null;
        String apiVersion = null;
        LiveEvent response = api.liveEventsGet(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion);
        // TODO: test validations
    }

    /**
     * List Live Events
     *
     * Lists the Live Events in the account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void liveEventsListTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        LiveEventListResult response = api.liveEventsList(subscriptionId, resourceGroupName, accountName, apiVersion);
        // TODO: test validations
    }

    /**
     * Reset Live Event
     *
     * Resets an existing Live Event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void liveEventsResetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String liveEventName = null;
        String apiVersion = null;
        api.liveEventsReset(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion);
        // TODO: test validations
    }

    /**
     * Start Live Event
     *
     * Starts an existing Live Event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void liveEventsStartTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String liveEventName = null;
        String apiVersion = null;
        api.liveEventsStart(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion);
        // TODO: test validations
    }

    /**
     * Stop Live Event
     *
     * Stops an existing Live Event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void liveEventsStopTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String liveEventName = null;
        String apiVersion = null;
        LiveEventActionInput parameters = null;
        api.liveEventsStop(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Updates a existing Live Event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void liveEventsUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String liveEventName = null;
        String apiVersion = null;
        LiveEvent parameters = null;
        LiveEvent response = api.liveEventsUpdate(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters);
        // TODO: test validations
    }

}
