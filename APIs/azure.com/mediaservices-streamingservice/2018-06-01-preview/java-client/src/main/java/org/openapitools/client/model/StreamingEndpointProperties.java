/*
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CrossSiteAccessPolicies;
import org.openapitools.client.model.StreamingEndpointAccessControl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The StreamingEndpoint properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:59:04.707675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingEndpointProperties {
  public static final String SERIALIZED_NAME_ACCESS_CONTROL = "accessControl";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL)
  private StreamingEndpointAccessControl accessControl;

  public static final String SERIALIZED_NAME_AVAILABILITY_SET_NAME = "availabilitySetName";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_SET_NAME)
  private String availabilitySetName;

  public static final String SERIALIZED_NAME_CDN_ENABLED = "cdnEnabled";
  @SerializedName(SERIALIZED_NAME_CDN_ENABLED)
  private Boolean cdnEnabled;

  public static final String SERIALIZED_NAME_CDN_PROFILE = "cdnProfile";
  @SerializedName(SERIALIZED_NAME_CDN_PROFILE)
  private String cdnProfile;

  public static final String SERIALIZED_NAME_CDN_PROVIDER = "cdnProvider";
  @SerializedName(SERIALIZED_NAME_CDN_PROVIDER)
  private String cdnProvider;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CROSS_SITE_ACCESS_POLICIES = "crossSiteAccessPolicies";
  @SerializedName(SERIALIZED_NAME_CROSS_SITE_ACCESS_POLICIES)
  private CrossSiteAccessPolicies crossSiteAccessPolicies;

  public static final String SERIALIZED_NAME_CUSTOM_HOST_NAMES = "customHostNames";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HOST_NAMES)
  private List<String> customHostNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FREE_TRIAL_END_TIME = "freeTrialEndTime";
  @SerializedName(SERIALIZED_NAME_FREE_TRIAL_END_TIME)
  private OffsetDateTime freeTrialEndTime;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_MAX_CACHE_AGE = "maxCacheAge";
  @SerializedName(SERIALIZED_NAME_MAX_CACHE_AGE)
  private Long maxCacheAge;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  /**
   * The resource state of the StreamingEndpoint.
   */
  @JsonAdapter(ResourceStateEnum.Adapter.class)
  public enum ResourceStateEnum {
    STOPPED("Stopped"),
    
    STARTING("Starting"),
    
    RUNNING("Running"),
    
    STOPPING("Stopping"),
    
    DELETING("Deleting"),
    
    SCALING("Scaling");

    private String value;

    ResourceStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceStateEnum fromValue(String value) {
      for (ResourceStateEnum b : ResourceStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_STATE = "resourceState";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATE)
  private ResourceStateEnum resourceState;

  public static final String SERIALIZED_NAME_SCALE_UNITS = "scaleUnits";
  @SerializedName(SERIALIZED_NAME_SCALE_UNITS)
  private Integer scaleUnits;

  public StreamingEndpointProperties() {
  }

  public StreamingEndpointProperties(
     OffsetDateTime created, 
     OffsetDateTime freeTrialEndTime, 
     String hostName, 
     OffsetDateTime lastModified, 
     String provisioningState, 
     ResourceStateEnum resourceState
  ) {
    this();
    this.created = created;
    this.freeTrialEndTime = freeTrialEndTime;
    this.hostName = hostName;
    this.lastModified = lastModified;
    this.provisioningState = provisioningState;
    this.resourceState = resourceState;
  }

  public StreamingEndpointProperties accessControl(StreamingEndpointAccessControl accessControl) {
    this.accessControl = accessControl;
    return this;
  }

  /**
   * Get accessControl
   * @return accessControl
   */
  @javax.annotation.Nullable
  public StreamingEndpointAccessControl getAccessControl() {
    return accessControl;
  }

  public void setAccessControl(StreamingEndpointAccessControl accessControl) {
    this.accessControl = accessControl;
  }


  public StreamingEndpointProperties availabilitySetName(String availabilitySetName) {
    this.availabilitySetName = availabilitySetName;
    return this;
  }

  /**
   * AvailabilitySet name
   * @return availabilitySetName
   */
  @javax.annotation.Nullable
  public String getAvailabilitySetName() {
    return availabilitySetName;
  }

  public void setAvailabilitySetName(String availabilitySetName) {
    this.availabilitySetName = availabilitySetName;
  }


  public StreamingEndpointProperties cdnEnabled(Boolean cdnEnabled) {
    this.cdnEnabled = cdnEnabled;
    return this;
  }

  /**
   * The CDN enabled flag.
   * @return cdnEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCdnEnabled() {
    return cdnEnabled;
  }

  public void setCdnEnabled(Boolean cdnEnabled) {
    this.cdnEnabled = cdnEnabled;
  }


  public StreamingEndpointProperties cdnProfile(String cdnProfile) {
    this.cdnProfile = cdnProfile;
    return this;
  }

  /**
   * The CDN profile name.
   * @return cdnProfile
   */
  @javax.annotation.Nullable
  public String getCdnProfile() {
    return cdnProfile;
  }

  public void setCdnProfile(String cdnProfile) {
    this.cdnProfile = cdnProfile;
  }


  public StreamingEndpointProperties cdnProvider(String cdnProvider) {
    this.cdnProvider = cdnProvider;
    return this;
  }

  /**
   * The CDN provider name.
   * @return cdnProvider
   */
  @javax.annotation.Nullable
  public String getCdnProvider() {
    return cdnProvider;
  }

  public void setCdnProvider(String cdnProvider) {
    this.cdnProvider = cdnProvider;
  }


  /**
   * The exact time the StreamingEndpoint was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public StreamingEndpointProperties crossSiteAccessPolicies(CrossSiteAccessPolicies crossSiteAccessPolicies) {
    this.crossSiteAccessPolicies = crossSiteAccessPolicies;
    return this;
  }

  /**
   * Get crossSiteAccessPolicies
   * @return crossSiteAccessPolicies
   */
  @javax.annotation.Nullable
  public CrossSiteAccessPolicies getCrossSiteAccessPolicies() {
    return crossSiteAccessPolicies;
  }

  public void setCrossSiteAccessPolicies(CrossSiteAccessPolicies crossSiteAccessPolicies) {
    this.crossSiteAccessPolicies = crossSiteAccessPolicies;
  }


  public StreamingEndpointProperties customHostNames(List<String> customHostNames) {
    this.customHostNames = customHostNames;
    return this;
  }

  public StreamingEndpointProperties addCustomHostNamesItem(String customHostNamesItem) {
    if (this.customHostNames == null) {
      this.customHostNames = new ArrayList<>();
    }
    this.customHostNames.add(customHostNamesItem);
    return this;
  }

  /**
   * The custom host names of the StreamingEndpoint
   * @return customHostNames
   */
  @javax.annotation.Nullable
  public List<String> getCustomHostNames() {
    return customHostNames;
  }

  public void setCustomHostNames(List<String> customHostNames) {
    this.customHostNames = customHostNames;
  }


  public StreamingEndpointProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The StreamingEndpoint description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * The free trial expiration time.
   * @return freeTrialEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFreeTrialEndTime() {
    return freeTrialEndTime;
  }



  /**
   * The StreamingEndpoint host name.
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }



  /**
   * The exact time the StreamingEndpoint was last modified.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }



  public StreamingEndpointProperties maxCacheAge(Long maxCacheAge) {
    this.maxCacheAge = maxCacheAge;
    return this;
  }

  /**
   * Max cache age
   * @return maxCacheAge
   */
  @javax.annotation.Nullable
  public Long getMaxCacheAge() {
    return maxCacheAge;
  }

  public void setMaxCacheAge(Long maxCacheAge) {
    this.maxCacheAge = maxCacheAge;
  }


  /**
   * The provisioning state of the StreamingEndpoint.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * The resource state of the StreamingEndpoint.
   * @return resourceState
   */
  @javax.annotation.Nullable
  public ResourceStateEnum getResourceState() {
    return resourceState;
  }



  public StreamingEndpointProperties scaleUnits(Integer scaleUnits) {
    this.scaleUnits = scaleUnits;
    return this;
  }

  /**
   * The number of scale units.
   * @return scaleUnits
   */
  @javax.annotation.Nullable
  public Integer getScaleUnits() {
    return scaleUnits;
  }

  public void setScaleUnits(Integer scaleUnits) {
    this.scaleUnits = scaleUnits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingEndpointProperties streamingEndpointProperties = (StreamingEndpointProperties) o;
    return Objects.equals(this.accessControl, streamingEndpointProperties.accessControl) &&
        Objects.equals(this.availabilitySetName, streamingEndpointProperties.availabilitySetName) &&
        Objects.equals(this.cdnEnabled, streamingEndpointProperties.cdnEnabled) &&
        Objects.equals(this.cdnProfile, streamingEndpointProperties.cdnProfile) &&
        Objects.equals(this.cdnProvider, streamingEndpointProperties.cdnProvider) &&
        Objects.equals(this.created, streamingEndpointProperties.created) &&
        Objects.equals(this.crossSiteAccessPolicies, streamingEndpointProperties.crossSiteAccessPolicies) &&
        Objects.equals(this.customHostNames, streamingEndpointProperties.customHostNames) &&
        Objects.equals(this.description, streamingEndpointProperties.description) &&
        Objects.equals(this.freeTrialEndTime, streamingEndpointProperties.freeTrialEndTime) &&
        Objects.equals(this.hostName, streamingEndpointProperties.hostName) &&
        Objects.equals(this.lastModified, streamingEndpointProperties.lastModified) &&
        Objects.equals(this.maxCacheAge, streamingEndpointProperties.maxCacheAge) &&
        Objects.equals(this.provisioningState, streamingEndpointProperties.provisioningState) &&
        Objects.equals(this.resourceState, streamingEndpointProperties.resourceState) &&
        Objects.equals(this.scaleUnits, streamingEndpointProperties.scaleUnits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessControl, availabilitySetName, cdnEnabled, cdnProfile, cdnProvider, created, crossSiteAccessPolicies, customHostNames, description, freeTrialEndTime, hostName, lastModified, maxCacheAge, provisioningState, resourceState, scaleUnits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingEndpointProperties {\n");
    sb.append("    accessControl: ").append(toIndentedString(accessControl)).append("\n");
    sb.append("    availabilitySetName: ").append(toIndentedString(availabilitySetName)).append("\n");
    sb.append("    cdnEnabled: ").append(toIndentedString(cdnEnabled)).append("\n");
    sb.append("    cdnProfile: ").append(toIndentedString(cdnProfile)).append("\n");
    sb.append("    cdnProvider: ").append(toIndentedString(cdnProvider)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    crossSiteAccessPolicies: ").append(toIndentedString(crossSiteAccessPolicies)).append("\n");
    sb.append("    customHostNames: ").append(toIndentedString(customHostNames)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    freeTrialEndTime: ").append(toIndentedString(freeTrialEndTime)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    maxCacheAge: ").append(toIndentedString(maxCacheAge)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceState: ").append(toIndentedString(resourceState)).append("\n");
    sb.append("    scaleUnits: ").append(toIndentedString(scaleUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessControl");
    openapiFields.add("availabilitySetName");
    openapiFields.add("cdnEnabled");
    openapiFields.add("cdnProfile");
    openapiFields.add("cdnProvider");
    openapiFields.add("created");
    openapiFields.add("crossSiteAccessPolicies");
    openapiFields.add("customHostNames");
    openapiFields.add("description");
    openapiFields.add("freeTrialEndTime");
    openapiFields.add("hostName");
    openapiFields.add("lastModified");
    openapiFields.add("maxCacheAge");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceState");
    openapiFields.add("scaleUnits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingEndpointProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingEndpointProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingEndpointProperties is not found in the empty JSON string", StreamingEndpointProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingEndpointProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingEndpointProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessControl`
      if (jsonObj.get("accessControl") != null && !jsonObj.get("accessControl").isJsonNull()) {
        StreamingEndpointAccessControl.validateJsonElement(jsonObj.get("accessControl"));
      }
      if ((jsonObj.get("availabilitySetName") != null && !jsonObj.get("availabilitySetName").isJsonNull()) && !jsonObj.get("availabilitySetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilitySetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availabilitySetName").toString()));
      }
      if ((jsonObj.get("cdnProfile") != null && !jsonObj.get("cdnProfile").isJsonNull()) && !jsonObj.get("cdnProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cdnProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cdnProfile").toString()));
      }
      if ((jsonObj.get("cdnProvider") != null && !jsonObj.get("cdnProvider").isJsonNull()) && !jsonObj.get("cdnProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cdnProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cdnProvider").toString()));
      }
      // validate the optional field `crossSiteAccessPolicies`
      if (jsonObj.get("crossSiteAccessPolicies") != null && !jsonObj.get("crossSiteAccessPolicies").isJsonNull()) {
        CrossSiteAccessPolicies.validateJsonElement(jsonObj.get("crossSiteAccessPolicies"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customHostNames") != null && !jsonObj.get("customHostNames").isJsonNull() && !jsonObj.get("customHostNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customHostNames` to be an array in the JSON string but got `%s`", jsonObj.get("customHostNames").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) && !jsonObj.get("resourceState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceState").toString()));
      }
      // validate the optional field `resourceState`
      if (jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) {
        ResourceStateEnum.validateJsonElement(jsonObj.get("resourceState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingEndpointProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingEndpointProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingEndpointProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingEndpointProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingEndpointProperties>() {
           @Override
           public void write(JsonWriter out, StreamingEndpointProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingEndpointProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingEndpointProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingEndpointProperties
   * @throws IOException if the JSON string is invalid with respect to StreamingEndpointProperties
   */
  public static StreamingEndpointProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingEndpointProperties.class);
  }

  /**
   * Convert an instance of StreamingEndpointProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

