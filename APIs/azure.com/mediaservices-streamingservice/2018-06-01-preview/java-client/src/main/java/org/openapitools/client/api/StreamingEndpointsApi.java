/*
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.StreamingEndpoint;
import org.openapitools.client.model.StreamingEndpointListResult;
import org.openapitools.client.model.StreamingEntityScaleUnit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamingEndpointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreamingEndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamingEndpointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for streamingEndpointsCreate
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters StreamingEndpoint properties needed for creation. (required)
     * @param autoStart The flag indicates if auto start the Live Event. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsCreateCall(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, StreamingEndpoint parameters, Boolean autoStart, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "streamingEndpointName" + "}", localVarApiClient.escapeString(streamingEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (autoStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autoStart", autoStart));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamingEndpointsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, StreamingEndpoint parameters, Boolean autoStart, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling streamingEndpointsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling streamingEndpointsCreate(Async)");
        }

        // verify the required parameter 'streamingEndpointName' is set
        if (streamingEndpointName == null) {
            throw new ApiException("Missing the required parameter 'streamingEndpointName' when calling streamingEndpointsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling streamingEndpointsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling streamingEndpointsCreate(Async)");
        }

        return streamingEndpointsCreateCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, parameters, autoStart, _callback);

    }

    /**
     * Create StreamingEndpoint
     * Creates a StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters StreamingEndpoint properties needed for creation. (required)
     * @param autoStart The flag indicates if auto start the Live Event. (optional)
     * @return StreamingEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StreamingEndpoint streamingEndpointsCreate(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, StreamingEndpoint parameters, Boolean autoStart) throws ApiException {
        ApiResponse<StreamingEndpoint> localVarResp = streamingEndpointsCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, parameters, autoStart);
        return localVarResp.getData();
    }

    /**
     * Create StreamingEndpoint
     * Creates a StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters StreamingEndpoint properties needed for creation. (required)
     * @param autoStart The flag indicates if auto start the Live Event. (optional)
     * @return ApiResponse&lt;StreamingEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamingEndpoint> streamingEndpointsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, StreamingEndpoint parameters, Boolean autoStart) throws ApiException {
        okhttp3.Call localVarCall = streamingEndpointsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, parameters, autoStart, null);
        Type localVarReturnType = new TypeToken<StreamingEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create StreamingEndpoint (asynchronously)
     * Creates a StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters StreamingEndpoint properties needed for creation. (required)
     * @param autoStart The flag indicates if auto start the Live Event. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, StreamingEndpoint parameters, Boolean autoStart, final ApiCallback<StreamingEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamingEndpointsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, parameters, autoStart, _callback);
        Type localVarReturnType = new TypeToken<StreamingEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamingEndpointsDelete
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. The request has been accepted but the Streaming Endpoint was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "streamingEndpointName" + "}", localVarApiClient.escapeString(streamingEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamingEndpointsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling streamingEndpointsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling streamingEndpointsDelete(Async)");
        }

        // verify the required parameter 'streamingEndpointName' is set
        if (streamingEndpointName == null) {
            throw new ApiException("Missing the required parameter 'streamingEndpointName' when calling streamingEndpointsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling streamingEndpointsDelete(Async)");
        }

        return streamingEndpointsDeleteCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, _callback);

    }

    /**
     * Delete StreamingEndpoint
     * Deletes a StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. The request has been accepted but the Streaming Endpoint was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void streamingEndpointsDelete(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion) throws ApiException {
        streamingEndpointsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion);
    }

    /**
     * Delete StreamingEndpoint
     * Deletes a StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. The request has been accepted but the Streaming Endpoint was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamingEndpointsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = streamingEndpointsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete StreamingEndpoint (asynchronously)
     * Deletes a StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. The request has been accepted but the Streaming Endpoint was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamingEndpointsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamingEndpointsGet
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsGetCall(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "streamingEndpointName" + "}", localVarApiClient.escapeString(streamingEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamingEndpointsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling streamingEndpointsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling streamingEndpointsGet(Async)");
        }

        // verify the required parameter 'streamingEndpointName' is set
        if (streamingEndpointName == null) {
            throw new ApiException("Missing the required parameter 'streamingEndpointName' when calling streamingEndpointsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling streamingEndpointsGet(Async)");
        }

        return streamingEndpointsGetCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, _callback);

    }

    /**
     * Get StreamingEndpoint
     * Gets a StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return StreamingEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StreamingEndpoint streamingEndpointsGet(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion) throws ApiException {
        ApiResponse<StreamingEndpoint> localVarResp = streamingEndpointsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get StreamingEndpoint
     * Gets a StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;StreamingEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamingEndpoint> streamingEndpointsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = streamingEndpointsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, null);
        Type localVarReturnType = new TypeToken<StreamingEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get StreamingEndpoint (asynchronously)
     * Gets a StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, final ApiCallback<StreamingEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamingEndpointsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StreamingEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamingEndpointsList
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsListCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamingEndpointsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling streamingEndpointsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsList(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling streamingEndpointsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling streamingEndpointsList(Async)");
        }

        return streamingEndpointsListCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * List StreamingEndpoints
     * Lists the StreamingEndpoints in the account.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return StreamingEndpointListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StreamingEndpointListResult streamingEndpointsList(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<StreamingEndpointListResult> localVarResp = streamingEndpointsListWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List StreamingEndpoints
     * Lists the StreamingEndpoints in the account.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;StreamingEndpointListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamingEndpointListResult> streamingEndpointsListWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = streamingEndpointsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<StreamingEndpointListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List StreamingEndpoints (asynchronously)
     * Lists the StreamingEndpoints in the account.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsListAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<StreamingEndpointListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamingEndpointsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StreamingEndpointListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamingEndpointsScale
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters StreamingEndpoint scale parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsScaleCall(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, StreamingEntityScaleUnit parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/scale"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "streamingEndpointName" + "}", localVarApiClient.escapeString(streamingEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamingEndpointsScaleValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, StreamingEntityScaleUnit parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling streamingEndpointsScale(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsScale(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling streamingEndpointsScale(Async)");
        }

        // verify the required parameter 'streamingEndpointName' is set
        if (streamingEndpointName == null) {
            throw new ApiException("Missing the required parameter 'streamingEndpointName' when calling streamingEndpointsScale(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling streamingEndpointsScale(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling streamingEndpointsScale(Async)");
        }

        return streamingEndpointsScaleCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, parameters, _callback);

    }

    /**
     * Scale StreamingEndpoint
     * Scales an existing StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters StreamingEndpoint scale parameters (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void streamingEndpointsScale(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, StreamingEntityScaleUnit parameters) throws ApiException {
        streamingEndpointsScaleWithHttpInfo(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, parameters);
    }

    /**
     * Scale StreamingEndpoint
     * Scales an existing StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters StreamingEndpoint scale parameters (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamingEndpointsScaleWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, StreamingEntityScaleUnit parameters) throws ApiException {
        okhttp3.Call localVarCall = streamingEndpointsScaleValidateBeforeCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Scale StreamingEndpoint (asynchronously)
     * Scales an existing StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters StreamingEndpoint scale parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsScaleAsync(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, StreamingEntityScaleUnit parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamingEndpointsScaleValidateBeforeCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamingEndpointsStart
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsStartCall(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/start"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "streamingEndpointName" + "}", localVarApiClient.escapeString(streamingEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamingEndpointsStartValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling streamingEndpointsStart(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsStart(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling streamingEndpointsStart(Async)");
        }

        // verify the required parameter 'streamingEndpointName' is set
        if (streamingEndpointName == null) {
            throw new ApiException("Missing the required parameter 'streamingEndpointName' when calling streamingEndpointsStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling streamingEndpointsStart(Async)");
        }

        return streamingEndpointsStartCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, _callback);

    }

    /**
     * Start StreamingEndpoint
     * Starts an existing StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void streamingEndpointsStart(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion) throws ApiException {
        streamingEndpointsStartWithHttpInfo(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion);
    }

    /**
     * Start StreamingEndpoint
     * Starts an existing StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamingEndpointsStartWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = streamingEndpointsStartValidateBeforeCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start StreamingEndpoint (asynchronously)
     * Starts an existing StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsStartAsync(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamingEndpointsStartValidateBeforeCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamingEndpointsStop
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsStopCall(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/stop"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "streamingEndpointName" + "}", localVarApiClient.escapeString(streamingEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamingEndpointsStopValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling streamingEndpointsStop(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling streamingEndpointsStop(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling streamingEndpointsStop(Async)");
        }

        // verify the required parameter 'streamingEndpointName' is set
        if (streamingEndpointName == null) {
            throw new ApiException("Missing the required parameter 'streamingEndpointName' when calling streamingEndpointsStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling streamingEndpointsStop(Async)");
        }

        return streamingEndpointsStopCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, _callback);

    }

    /**
     * Stop StreamingEndpoint
     * Stops an existing StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void streamingEndpointsStop(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion) throws ApiException {
        streamingEndpointsStopWithHttpInfo(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion);
    }

    /**
     * Stop StreamingEndpoint
     * Stops an existing StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamingEndpointsStopWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = streamingEndpointsStopValidateBeforeCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop StreamingEndpoint (asynchronously)
     * Stops an existing StreamingEndpoint.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param streamingEndpointName The name of the StreamingEndpoint. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamingEndpointsStopAsync(String subscriptionId, String resourceGroupName, String accountName, String streamingEndpointName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamingEndpointsStopValidateBeforeCall(subscriptionId, resourceGroupName, accountName, streamingEndpointName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
