/*
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.LiveEvent;
import org.openapitools.client.model.LiveEventActionInput;
import org.openapitools.client.model.LiveEventListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LiveEventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LiveEventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LiveEventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for liveEventsCreate
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters Live Event properties needed for creation. (required)
     * @param autoStart The flag indicates if auto start the Live Event. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsCreateCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEvent parameters, Boolean autoStart, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "liveEventName" + "}", localVarApiClient.escapeString(liveEventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (autoStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autoStart", autoStart));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveEventsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEvent parameters, Boolean autoStart, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling liveEventsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling liveEventsCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling liveEventsCreate(Async)");
        }

        // verify the required parameter 'liveEventName' is set
        if (liveEventName == null) {
            throw new ApiException("Missing the required parameter 'liveEventName' when calling liveEventsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling liveEventsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling liveEventsCreate(Async)");
        }

        return liveEventsCreateCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, autoStart, _callback);

    }

    /**
     * Create Live Event
     * Creates a Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters Live Event properties needed for creation. (required)
     * @param autoStart The flag indicates if auto start the Live Event. (optional)
     * @return LiveEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LiveEvent liveEventsCreate(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEvent parameters, Boolean autoStart) throws ApiException {
        ApiResponse<LiveEvent> localVarResp = liveEventsCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, autoStart);
        return localVarResp.getData();
    }

    /**
     * Create Live Event
     * Creates a Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters Live Event properties needed for creation. (required)
     * @param autoStart The flag indicates if auto start the Live Event. (optional)
     * @return ApiResponse&lt;LiveEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiveEvent> liveEventsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEvent parameters, Boolean autoStart) throws ApiException {
        okhttp3.Call localVarCall = liveEventsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, autoStart, null);
        Type localVarReturnType = new TypeToken<LiveEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Live Event (asynchronously)
     * Creates a Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters Live Event properties needed for creation. (required)
     * @param autoStart The flag indicates if auto start the Live Event. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEvent parameters, Boolean autoStart, final ApiCallback<LiveEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveEventsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, autoStart, _callback);
        Type localVarReturnType = new TypeToken<LiveEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for liveEventsDelete
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. The request has been accepted but the Live Event was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "liveEventName" + "}", localVarApiClient.escapeString(liveEventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveEventsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling liveEventsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling liveEventsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling liveEventsDelete(Async)");
        }

        // verify the required parameter 'liveEventName' is set
        if (liveEventName == null) {
            throw new ApiException("Missing the required parameter 'liveEventName' when calling liveEventsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling liveEventsDelete(Async)");
        }

        return liveEventsDeleteCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, _callback);

    }

    /**
     * Delete Live Event
     * Deletes a Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. The request has been accepted but the Live Event was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void liveEventsDelete(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion) throws ApiException {
        liveEventsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion);
    }

    /**
     * Delete Live Event
     * Deletes a Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. The request has been accepted but the Live Event was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> liveEventsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = liveEventsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Live Event (asynchronously)
     * Deletes a Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. The request has been accepted but the Live Event was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveEventsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for liveEventsGet
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsGetCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "liveEventName" + "}", localVarApiClient.escapeString(liveEventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveEventsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling liveEventsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling liveEventsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling liveEventsGet(Async)");
        }

        // verify the required parameter 'liveEventName' is set
        if (liveEventName == null) {
            throw new ApiException("Missing the required parameter 'liveEventName' when calling liveEventsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling liveEventsGet(Async)");
        }

        return liveEventsGetCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, _callback);

    }

    /**
     * Get Live Event
     * Gets a Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return LiveEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LiveEvent liveEventsGet(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion) throws ApiException {
        ApiResponse<LiveEvent> localVarResp = liveEventsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Live Event
     * Gets a Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;LiveEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiveEvent> liveEventsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = liveEventsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, null);
        Type localVarReturnType = new TypeToken<LiveEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Live Event (asynchronously)
     * Gets a Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback<LiveEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveEventsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LiveEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for liveEventsList
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsListCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveEventsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling liveEventsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling liveEventsList(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling liveEventsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling liveEventsList(Async)");
        }

        return liveEventsListCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * List Live Events
     * Lists the Live Events in the account.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return LiveEventListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LiveEventListResult liveEventsList(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<LiveEventListResult> localVarResp = liveEventsListWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List Live Events
     * Lists the Live Events in the account.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;LiveEventListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiveEventListResult> liveEventsListWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = liveEventsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<LiveEventListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Live Events (asynchronously)
     * Lists the Live Events in the account.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsListAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<LiveEventListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveEventsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LiveEventListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for liveEventsReset
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsResetCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/reset"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "liveEventName" + "}", localVarApiClient.escapeString(liveEventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveEventsResetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling liveEventsReset(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling liveEventsReset(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling liveEventsReset(Async)");
        }

        // verify the required parameter 'liveEventName' is set
        if (liveEventName == null) {
            throw new ApiException("Missing the required parameter 'liveEventName' when calling liveEventsReset(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling liveEventsReset(Async)");
        }

        return liveEventsResetCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, _callback);

    }

    /**
     * Reset Live Event
     * Resets an existing Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void liveEventsReset(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion) throws ApiException {
        liveEventsResetWithHttpInfo(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion);
    }

    /**
     * Reset Live Event
     * Resets an existing Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> liveEventsResetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = liveEventsResetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset Live Event (asynchronously)
     * Resets an existing Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsResetAsync(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveEventsResetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for liveEventsStart
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsStartCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/start"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "liveEventName" + "}", localVarApiClient.escapeString(liveEventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveEventsStartValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling liveEventsStart(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling liveEventsStart(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling liveEventsStart(Async)");
        }

        // verify the required parameter 'liveEventName' is set
        if (liveEventName == null) {
            throw new ApiException("Missing the required parameter 'liveEventName' when calling liveEventsStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling liveEventsStart(Async)");
        }

        return liveEventsStartCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, _callback);

    }

    /**
     * Start Live Event
     * Starts an existing Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void liveEventsStart(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion) throws ApiException {
        liveEventsStartWithHttpInfo(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion);
    }

    /**
     * Start Live Event
     * Starts an existing Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> liveEventsStartWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = liveEventsStartValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start Live Event (asynchronously)
     * Starts an existing Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsStartAsync(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveEventsStartValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for liveEventsStop
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters LiveEvent stop parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsStopCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEventActionInput parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/stop"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "liveEventName" + "}", localVarApiClient.escapeString(liveEventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveEventsStopValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEventActionInput parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling liveEventsStop(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling liveEventsStop(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling liveEventsStop(Async)");
        }

        // verify the required parameter 'liveEventName' is set
        if (liveEventName == null) {
            throw new ApiException("Missing the required parameter 'liveEventName' when calling liveEventsStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling liveEventsStop(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling liveEventsStop(Async)");
        }

        return liveEventsStopCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, _callback);

    }

    /**
     * Stop Live Event
     * Stops an existing Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters LiveEvent stop parameters (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void liveEventsStop(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEventActionInput parameters) throws ApiException {
        liveEventsStopWithHttpInfo(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters);
    }

    /**
     * Stop Live Event
     * Stops an existing Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters LiveEvent stop parameters (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> liveEventsStopWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEventActionInput parameters) throws ApiException {
        okhttp3.Call localVarCall = liveEventsStopValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop Live Event (asynchronously)
     * Stops an existing Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters LiveEvent stop parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsStopAsync(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEventActionInput parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveEventsStopValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for liveEventsUpdate
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters Live Event properties needed for creation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEvent parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "liveEventName" + "}", localVarApiClient.escapeString(liveEventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveEventsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEvent parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling liveEventsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling liveEventsUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling liveEventsUpdate(Async)");
        }

        // verify the required parameter 'liveEventName' is set
        if (liveEventName == null) {
            throw new ApiException("Missing the required parameter 'liveEventName' when calling liveEventsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling liveEventsUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling liveEventsUpdate(Async)");
        }

        return liveEventsUpdateCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Updates a existing Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters Live Event properties needed for creation. (required)
     * @return LiveEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LiveEvent liveEventsUpdate(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEvent parameters) throws ApiException {
        ApiResponse<LiveEvent> localVarResp = liveEventsUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a existing Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters Live Event properties needed for creation. (required)
     * @return ApiResponse&lt;LiveEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiveEvent> liveEventsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEvent parameters) throws ApiException {
        okhttp3.Call localVarCall = liveEventsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<LiveEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a existing Live Event.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param liveEventName The name of the Live Event. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters Live Event properties needed for creation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The streaming error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveEventsUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String liveEventName, String apiVersion, LiveEvent parameters, final ApiCallback<LiveEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveEventsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, liveEventName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<LiveEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
