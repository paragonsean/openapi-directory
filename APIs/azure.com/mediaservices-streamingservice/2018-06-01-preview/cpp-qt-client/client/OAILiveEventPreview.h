/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILiveEventPreview.h
 *
 * The Live Event preview.
 */

#ifndef OAILiveEventPreview_H
#define OAILiveEventPreview_H

#include <QJsonObject>

#include "OAILiveEventEndpoint.h"
#include "OAILiveEventPreviewAccessControl.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILiveEventPreviewAccessControl;
class OAILiveEventEndpoint;

class OAILiveEventPreview : public OAIObject {
public:
    OAILiveEventPreview();
    OAILiveEventPreview(QString json);
    ~OAILiveEventPreview() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAILiveEventPreviewAccessControl getAccessControl() const;
    void setAccessControl(const OAILiveEventPreviewAccessControl &access_control);
    bool is_access_control_Set() const;
    bool is_access_control_Valid() const;

    QString getAlternativeMediaId() const;
    void setAlternativeMediaId(const QString &alternative_media_id);
    bool is_alternative_media_id_Set() const;
    bool is_alternative_media_id_Valid() const;

    QList<OAILiveEventEndpoint> getEndpoints() const;
    void setEndpoints(const QList<OAILiveEventEndpoint> &endpoints);
    bool is_endpoints_Set() const;
    bool is_endpoints_Valid() const;

    QString getPreviewLocator() const;
    void setPreviewLocator(const QString &preview_locator);
    bool is_preview_locator_Set() const;
    bool is_preview_locator_Valid() const;

    QString getStreamingPolicyName() const;
    void setStreamingPolicyName(const QString &streaming_policy_name);
    bool is_streaming_policy_name_Set() const;
    bool is_streaming_policy_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAILiveEventPreviewAccessControl m_access_control;
    bool m_access_control_isSet;
    bool m_access_control_isValid;

    QString m_alternative_media_id;
    bool m_alternative_media_id_isSet;
    bool m_alternative_media_id_isValid;

    QList<OAILiveEventEndpoint> m_endpoints;
    bool m_endpoints_isSet;
    bool m_endpoints_isValid;

    QString m_preview_locator;
    bool m_preview_locator_isSet;
    bool m_preview_locator_isValid;

    QString m_streaming_policy_name;
    bool m_streaming_policy_name_isSet;
    bool m_streaming_policy_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILiveEventPreview)

#endif // OAILiveEventPreview_H
