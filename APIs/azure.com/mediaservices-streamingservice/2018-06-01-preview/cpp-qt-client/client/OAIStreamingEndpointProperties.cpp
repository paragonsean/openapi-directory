/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingEndpointProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingEndpointProperties::OAIStreamingEndpointProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingEndpointProperties::OAIStreamingEndpointProperties() {
    this->initializeModel();
}

OAIStreamingEndpointProperties::~OAIStreamingEndpointProperties() {}

void OAIStreamingEndpointProperties::initializeModel() {

    m_access_control_isSet = false;
    m_access_control_isValid = false;

    m_availability_set_name_isSet = false;
    m_availability_set_name_isValid = false;

    m_cdn_enabled_isSet = false;
    m_cdn_enabled_isValid = false;

    m_cdn_profile_isSet = false;
    m_cdn_profile_isValid = false;

    m_cdn_provider_isSet = false;
    m_cdn_provider_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_cross_site_access_policies_isSet = false;
    m_cross_site_access_policies_isValid = false;

    m_custom_host_names_isSet = false;
    m_custom_host_names_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_free_trial_end_time_isSet = false;
    m_free_trial_end_time_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_max_cache_age_isSet = false;
    m_max_cache_age_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_state_isSet = false;
    m_resource_state_isValid = false;

    m_scale_units_isSet = false;
    m_scale_units_isValid = false;
}

void OAIStreamingEndpointProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingEndpointProperties::fromJsonObject(QJsonObject json) {

    m_access_control_isValid = ::OpenAPI::fromJsonValue(m_access_control, json[QString("accessControl")]);
    m_access_control_isSet = !json[QString("accessControl")].isNull() && m_access_control_isValid;

    m_availability_set_name_isValid = ::OpenAPI::fromJsonValue(m_availability_set_name, json[QString("availabilitySetName")]);
    m_availability_set_name_isSet = !json[QString("availabilitySetName")].isNull() && m_availability_set_name_isValid;

    m_cdn_enabled_isValid = ::OpenAPI::fromJsonValue(m_cdn_enabled, json[QString("cdnEnabled")]);
    m_cdn_enabled_isSet = !json[QString("cdnEnabled")].isNull() && m_cdn_enabled_isValid;

    m_cdn_profile_isValid = ::OpenAPI::fromJsonValue(m_cdn_profile, json[QString("cdnProfile")]);
    m_cdn_profile_isSet = !json[QString("cdnProfile")].isNull() && m_cdn_profile_isValid;

    m_cdn_provider_isValid = ::OpenAPI::fromJsonValue(m_cdn_provider, json[QString("cdnProvider")]);
    m_cdn_provider_isSet = !json[QString("cdnProvider")].isNull() && m_cdn_provider_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_cross_site_access_policies_isValid = ::OpenAPI::fromJsonValue(m_cross_site_access_policies, json[QString("crossSiteAccessPolicies")]);
    m_cross_site_access_policies_isSet = !json[QString("crossSiteAccessPolicies")].isNull() && m_cross_site_access_policies_isValid;

    m_custom_host_names_isValid = ::OpenAPI::fromJsonValue(m_custom_host_names, json[QString("customHostNames")]);
    m_custom_host_names_isSet = !json[QString("customHostNames")].isNull() && m_custom_host_names_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_free_trial_end_time_isValid = ::OpenAPI::fromJsonValue(m_free_trial_end_time, json[QString("freeTrialEndTime")]);
    m_free_trial_end_time_isSet = !json[QString("freeTrialEndTime")].isNull() && m_free_trial_end_time_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_max_cache_age_isValid = ::OpenAPI::fromJsonValue(m_max_cache_age, json[QString("maxCacheAge")]);
    m_max_cache_age_isSet = !json[QString("maxCacheAge")].isNull() && m_max_cache_age_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_state_isValid = ::OpenAPI::fromJsonValue(m_resource_state, json[QString("resourceState")]);
    m_resource_state_isSet = !json[QString("resourceState")].isNull() && m_resource_state_isValid;

    m_scale_units_isValid = ::OpenAPI::fromJsonValue(m_scale_units, json[QString("scaleUnits")]);
    m_scale_units_isSet = !json[QString("scaleUnits")].isNull() && m_scale_units_isValid;
}

QString OAIStreamingEndpointProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingEndpointProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_access_control.isSet()) {
        obj.insert(QString("accessControl"), ::OpenAPI::toJsonValue(m_access_control));
    }
    if (m_availability_set_name_isSet) {
        obj.insert(QString("availabilitySetName"), ::OpenAPI::toJsonValue(m_availability_set_name));
    }
    if (m_cdn_enabled_isSet) {
        obj.insert(QString("cdnEnabled"), ::OpenAPI::toJsonValue(m_cdn_enabled));
    }
    if (m_cdn_profile_isSet) {
        obj.insert(QString("cdnProfile"), ::OpenAPI::toJsonValue(m_cdn_profile));
    }
    if (m_cdn_provider_isSet) {
        obj.insert(QString("cdnProvider"), ::OpenAPI::toJsonValue(m_cdn_provider));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_cross_site_access_policies.isSet()) {
        obj.insert(QString("crossSiteAccessPolicies"), ::OpenAPI::toJsonValue(m_cross_site_access_policies));
    }
    if (m_custom_host_names.size() > 0) {
        obj.insert(QString("customHostNames"), ::OpenAPI::toJsonValue(m_custom_host_names));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_free_trial_end_time_isSet) {
        obj.insert(QString("freeTrialEndTime"), ::OpenAPI::toJsonValue(m_free_trial_end_time));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_max_cache_age_isSet) {
        obj.insert(QString("maxCacheAge"), ::OpenAPI::toJsonValue(m_max_cache_age));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_state_isSet) {
        obj.insert(QString("resourceState"), ::OpenAPI::toJsonValue(m_resource_state));
    }
    if (m_scale_units_isSet) {
        obj.insert(QString("scaleUnits"), ::OpenAPI::toJsonValue(m_scale_units));
    }
    return obj;
}

OAIStreamingEndpointAccessControl OAIStreamingEndpointProperties::getAccessControl() const {
    return m_access_control;
}
void OAIStreamingEndpointProperties::setAccessControl(const OAIStreamingEndpointAccessControl &access_control) {
    m_access_control = access_control;
    m_access_control_isSet = true;
}

bool OAIStreamingEndpointProperties::is_access_control_Set() const{
    return m_access_control_isSet;
}

bool OAIStreamingEndpointProperties::is_access_control_Valid() const{
    return m_access_control_isValid;
}

QString OAIStreamingEndpointProperties::getAvailabilitySetName() const {
    return m_availability_set_name;
}
void OAIStreamingEndpointProperties::setAvailabilitySetName(const QString &availability_set_name) {
    m_availability_set_name = availability_set_name;
    m_availability_set_name_isSet = true;
}

bool OAIStreamingEndpointProperties::is_availability_set_name_Set() const{
    return m_availability_set_name_isSet;
}

bool OAIStreamingEndpointProperties::is_availability_set_name_Valid() const{
    return m_availability_set_name_isValid;
}

bool OAIStreamingEndpointProperties::isCdnEnabled() const {
    return m_cdn_enabled;
}
void OAIStreamingEndpointProperties::setCdnEnabled(const bool &cdn_enabled) {
    m_cdn_enabled = cdn_enabled;
    m_cdn_enabled_isSet = true;
}

bool OAIStreamingEndpointProperties::is_cdn_enabled_Set() const{
    return m_cdn_enabled_isSet;
}

bool OAIStreamingEndpointProperties::is_cdn_enabled_Valid() const{
    return m_cdn_enabled_isValid;
}

QString OAIStreamingEndpointProperties::getCdnProfile() const {
    return m_cdn_profile;
}
void OAIStreamingEndpointProperties::setCdnProfile(const QString &cdn_profile) {
    m_cdn_profile = cdn_profile;
    m_cdn_profile_isSet = true;
}

bool OAIStreamingEndpointProperties::is_cdn_profile_Set() const{
    return m_cdn_profile_isSet;
}

bool OAIStreamingEndpointProperties::is_cdn_profile_Valid() const{
    return m_cdn_profile_isValid;
}

QString OAIStreamingEndpointProperties::getCdnProvider() const {
    return m_cdn_provider;
}
void OAIStreamingEndpointProperties::setCdnProvider(const QString &cdn_provider) {
    m_cdn_provider = cdn_provider;
    m_cdn_provider_isSet = true;
}

bool OAIStreamingEndpointProperties::is_cdn_provider_Set() const{
    return m_cdn_provider_isSet;
}

bool OAIStreamingEndpointProperties::is_cdn_provider_Valid() const{
    return m_cdn_provider_isValid;
}

QDateTime OAIStreamingEndpointProperties::getCreated() const {
    return m_created;
}
void OAIStreamingEndpointProperties::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIStreamingEndpointProperties::is_created_Set() const{
    return m_created_isSet;
}

bool OAIStreamingEndpointProperties::is_created_Valid() const{
    return m_created_isValid;
}

OAICrossSiteAccessPolicies OAIStreamingEndpointProperties::getCrossSiteAccessPolicies() const {
    return m_cross_site_access_policies;
}
void OAIStreamingEndpointProperties::setCrossSiteAccessPolicies(const OAICrossSiteAccessPolicies &cross_site_access_policies) {
    m_cross_site_access_policies = cross_site_access_policies;
    m_cross_site_access_policies_isSet = true;
}

bool OAIStreamingEndpointProperties::is_cross_site_access_policies_Set() const{
    return m_cross_site_access_policies_isSet;
}

bool OAIStreamingEndpointProperties::is_cross_site_access_policies_Valid() const{
    return m_cross_site_access_policies_isValid;
}

QList<QString> OAIStreamingEndpointProperties::getCustomHostNames() const {
    return m_custom_host_names;
}
void OAIStreamingEndpointProperties::setCustomHostNames(const QList<QString> &custom_host_names) {
    m_custom_host_names = custom_host_names;
    m_custom_host_names_isSet = true;
}

bool OAIStreamingEndpointProperties::is_custom_host_names_Set() const{
    return m_custom_host_names_isSet;
}

bool OAIStreamingEndpointProperties::is_custom_host_names_Valid() const{
    return m_custom_host_names_isValid;
}

QString OAIStreamingEndpointProperties::getDescription() const {
    return m_description;
}
void OAIStreamingEndpointProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStreamingEndpointProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStreamingEndpointProperties::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIStreamingEndpointProperties::getFreeTrialEndTime() const {
    return m_free_trial_end_time;
}
void OAIStreamingEndpointProperties::setFreeTrialEndTime(const QDateTime &free_trial_end_time) {
    m_free_trial_end_time = free_trial_end_time;
    m_free_trial_end_time_isSet = true;
}

bool OAIStreamingEndpointProperties::is_free_trial_end_time_Set() const{
    return m_free_trial_end_time_isSet;
}

bool OAIStreamingEndpointProperties::is_free_trial_end_time_Valid() const{
    return m_free_trial_end_time_isValid;
}

QString OAIStreamingEndpointProperties::getHostName() const {
    return m_host_name;
}
void OAIStreamingEndpointProperties::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIStreamingEndpointProperties::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIStreamingEndpointProperties::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QDateTime OAIStreamingEndpointProperties::getLastModified() const {
    return m_last_modified;
}
void OAIStreamingEndpointProperties::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIStreamingEndpointProperties::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIStreamingEndpointProperties::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

qint64 OAIStreamingEndpointProperties::getMaxCacheAge() const {
    return m_max_cache_age;
}
void OAIStreamingEndpointProperties::setMaxCacheAge(const qint64 &max_cache_age) {
    m_max_cache_age = max_cache_age;
    m_max_cache_age_isSet = true;
}

bool OAIStreamingEndpointProperties::is_max_cache_age_Set() const{
    return m_max_cache_age_isSet;
}

bool OAIStreamingEndpointProperties::is_max_cache_age_Valid() const{
    return m_max_cache_age_isValid;
}

QString OAIStreamingEndpointProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIStreamingEndpointProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIStreamingEndpointProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIStreamingEndpointProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIStreamingEndpointProperties::getResourceState() const {
    return m_resource_state;
}
void OAIStreamingEndpointProperties::setResourceState(const QString &resource_state) {
    m_resource_state = resource_state;
    m_resource_state_isSet = true;
}

bool OAIStreamingEndpointProperties::is_resource_state_Set() const{
    return m_resource_state_isSet;
}

bool OAIStreamingEndpointProperties::is_resource_state_Valid() const{
    return m_resource_state_isValid;
}

qint32 OAIStreamingEndpointProperties::getScaleUnits() const {
    return m_scale_units;
}
void OAIStreamingEndpointProperties::setScaleUnits(const qint32 &scale_units) {
    m_scale_units = scale_units;
    m_scale_units_isSet = true;
}

bool OAIStreamingEndpointProperties::is_scale_units_Set() const{
    return m_scale_units_isSet;
}

bool OAIStreamingEndpointProperties::is_scale_units_Valid() const{
    return m_scale_units_isValid;
}

bool OAIStreamingEndpointProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdn_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdn_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdn_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_site_access_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_host_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_trial_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_cache_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingEndpointProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
