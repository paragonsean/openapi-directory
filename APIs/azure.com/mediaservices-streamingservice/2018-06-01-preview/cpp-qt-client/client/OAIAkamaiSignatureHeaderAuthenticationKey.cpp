/**
 * Azure Media Services
 * Streaming resource management client for Azure Media Services
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAkamaiSignatureHeaderAuthenticationKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAkamaiSignatureHeaderAuthenticationKey::OAIAkamaiSignatureHeaderAuthenticationKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAkamaiSignatureHeaderAuthenticationKey::OAIAkamaiSignatureHeaderAuthenticationKey() {
    this->initializeModel();
}

OAIAkamaiSignatureHeaderAuthenticationKey::~OAIAkamaiSignatureHeaderAuthenticationKey() {}

void OAIAkamaiSignatureHeaderAuthenticationKey::initializeModel() {

    m_base64_key_isSet = false;
    m_base64_key_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;
}

void OAIAkamaiSignatureHeaderAuthenticationKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAkamaiSignatureHeaderAuthenticationKey::fromJsonObject(QJsonObject json) {

    m_base64_key_isValid = ::OpenAPI::fromJsonValue(m_base64_key, json[QString("base64Key")]);
    m_base64_key_isSet = !json[QString("base64Key")].isNull() && m_base64_key_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;
}

QString OAIAkamaiSignatureHeaderAuthenticationKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAkamaiSignatureHeaderAuthenticationKey::asJsonObject() const {
    QJsonObject obj;
    if (m_base64_key_isSet) {
        obj.insert(QString("base64Key"), ::OpenAPI::toJsonValue(m_base64_key));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    return obj;
}

QString OAIAkamaiSignatureHeaderAuthenticationKey::getBase64Key() const {
    return m_base64_key;
}
void OAIAkamaiSignatureHeaderAuthenticationKey::setBase64Key(const QString &base64_key) {
    m_base64_key = base64_key;
    m_base64_key_isSet = true;
}

bool OAIAkamaiSignatureHeaderAuthenticationKey::is_base64_key_Set() const{
    return m_base64_key_isSet;
}

bool OAIAkamaiSignatureHeaderAuthenticationKey::is_base64_key_Valid() const{
    return m_base64_key_isValid;
}

QDateTime OAIAkamaiSignatureHeaderAuthenticationKey::getExpiration() const {
    return m_expiration;
}
void OAIAkamaiSignatureHeaderAuthenticationKey::setExpiration(const QDateTime &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIAkamaiSignatureHeaderAuthenticationKey::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIAkamaiSignatureHeaderAuthenticationKey::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAIAkamaiSignatureHeaderAuthenticationKey::getIdentifier() const {
    return m_identifier;
}
void OAIAkamaiSignatureHeaderAuthenticationKey::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIAkamaiSignatureHeaderAuthenticationKey::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIAkamaiSignatureHeaderAuthenticationKey::is_identifier_Valid() const{
    return m_identifier_isValid;
}

bool OAIAkamaiSignatureHeaderAuthenticationKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base64_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAkamaiSignatureHeaderAuthenticationKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
