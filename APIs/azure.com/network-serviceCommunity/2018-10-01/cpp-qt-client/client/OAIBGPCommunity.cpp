/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBGPCommunity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBGPCommunity::OAIBGPCommunity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBGPCommunity::OAIBGPCommunity() {
    this->initializeModel();
}

OAIBGPCommunity::~OAIBGPCommunity() {}

void OAIBGPCommunity::initializeModel() {

    m_community_name_isSet = false;
    m_community_name_isValid = false;

    m_community_prefixes_isSet = false;
    m_community_prefixes_isValid = false;

    m_community_value_isSet = false;
    m_community_value_isValid = false;

    m_is_authorized_to_use_isSet = false;
    m_is_authorized_to_use_isValid = false;

    m_service_group_isSet = false;
    m_service_group_isValid = false;

    m_service_supported_region_isSet = false;
    m_service_supported_region_isValid = false;
}

void OAIBGPCommunity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBGPCommunity::fromJsonObject(QJsonObject json) {

    m_community_name_isValid = ::OpenAPI::fromJsonValue(m_community_name, json[QString("communityName")]);
    m_community_name_isSet = !json[QString("communityName")].isNull() && m_community_name_isValid;

    m_community_prefixes_isValid = ::OpenAPI::fromJsonValue(m_community_prefixes, json[QString("communityPrefixes")]);
    m_community_prefixes_isSet = !json[QString("communityPrefixes")].isNull() && m_community_prefixes_isValid;

    m_community_value_isValid = ::OpenAPI::fromJsonValue(m_community_value, json[QString("communityValue")]);
    m_community_value_isSet = !json[QString("communityValue")].isNull() && m_community_value_isValid;

    m_is_authorized_to_use_isValid = ::OpenAPI::fromJsonValue(m_is_authorized_to_use, json[QString("isAuthorizedToUse")]);
    m_is_authorized_to_use_isSet = !json[QString("isAuthorizedToUse")].isNull() && m_is_authorized_to_use_isValid;

    m_service_group_isValid = ::OpenAPI::fromJsonValue(m_service_group, json[QString("serviceGroup")]);
    m_service_group_isSet = !json[QString("serviceGroup")].isNull() && m_service_group_isValid;

    m_service_supported_region_isValid = ::OpenAPI::fromJsonValue(m_service_supported_region, json[QString("serviceSupportedRegion")]);
    m_service_supported_region_isSet = !json[QString("serviceSupportedRegion")].isNull() && m_service_supported_region_isValid;
}

QString OAIBGPCommunity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBGPCommunity::asJsonObject() const {
    QJsonObject obj;
    if (m_community_name_isSet) {
        obj.insert(QString("communityName"), ::OpenAPI::toJsonValue(m_community_name));
    }
    if (m_community_prefixes.size() > 0) {
        obj.insert(QString("communityPrefixes"), ::OpenAPI::toJsonValue(m_community_prefixes));
    }
    if (m_community_value_isSet) {
        obj.insert(QString("communityValue"), ::OpenAPI::toJsonValue(m_community_value));
    }
    if (m_is_authorized_to_use_isSet) {
        obj.insert(QString("isAuthorizedToUse"), ::OpenAPI::toJsonValue(m_is_authorized_to_use));
    }
    if (m_service_group_isSet) {
        obj.insert(QString("serviceGroup"), ::OpenAPI::toJsonValue(m_service_group));
    }
    if (m_service_supported_region_isSet) {
        obj.insert(QString("serviceSupportedRegion"), ::OpenAPI::toJsonValue(m_service_supported_region));
    }
    return obj;
}

QString OAIBGPCommunity::getCommunityName() const {
    return m_community_name;
}
void OAIBGPCommunity::setCommunityName(const QString &community_name) {
    m_community_name = community_name;
    m_community_name_isSet = true;
}

bool OAIBGPCommunity::is_community_name_Set() const{
    return m_community_name_isSet;
}

bool OAIBGPCommunity::is_community_name_Valid() const{
    return m_community_name_isValid;
}

QList<QString> OAIBGPCommunity::getCommunityPrefixes() const {
    return m_community_prefixes;
}
void OAIBGPCommunity::setCommunityPrefixes(const QList<QString> &community_prefixes) {
    m_community_prefixes = community_prefixes;
    m_community_prefixes_isSet = true;
}

bool OAIBGPCommunity::is_community_prefixes_Set() const{
    return m_community_prefixes_isSet;
}

bool OAIBGPCommunity::is_community_prefixes_Valid() const{
    return m_community_prefixes_isValid;
}

QString OAIBGPCommunity::getCommunityValue() const {
    return m_community_value;
}
void OAIBGPCommunity::setCommunityValue(const QString &community_value) {
    m_community_value = community_value;
    m_community_value_isSet = true;
}

bool OAIBGPCommunity::is_community_value_Set() const{
    return m_community_value_isSet;
}

bool OAIBGPCommunity::is_community_value_Valid() const{
    return m_community_value_isValid;
}

bool OAIBGPCommunity::isIsAuthorizedToUse() const {
    return m_is_authorized_to_use;
}
void OAIBGPCommunity::setIsAuthorizedToUse(const bool &is_authorized_to_use) {
    m_is_authorized_to_use = is_authorized_to_use;
    m_is_authorized_to_use_isSet = true;
}

bool OAIBGPCommunity::is_is_authorized_to_use_Set() const{
    return m_is_authorized_to_use_isSet;
}

bool OAIBGPCommunity::is_is_authorized_to_use_Valid() const{
    return m_is_authorized_to_use_isValid;
}

QString OAIBGPCommunity::getServiceGroup() const {
    return m_service_group;
}
void OAIBGPCommunity::setServiceGroup(const QString &service_group) {
    m_service_group = service_group;
    m_service_group_isSet = true;
}

bool OAIBGPCommunity::is_service_group_Set() const{
    return m_service_group_isSet;
}

bool OAIBGPCommunity::is_service_group_Valid() const{
    return m_service_group_isValid;
}

QString OAIBGPCommunity::getServiceSupportedRegion() const {
    return m_service_supported_region;
}
void OAIBGPCommunity::setServiceSupportedRegion(const QString &service_supported_region) {
    m_service_supported_region = service_supported_region;
    m_service_supported_region_isSet = true;
}

bool OAIBGPCommunity::is_service_supported_region_Set() const{
    return m_service_supported_region_isSet;
}

bool OAIBGPCommunity::is_service_supported_region_Valid() const{
    return m_service_supported_region_isValid;
}

bool OAIBGPCommunity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_community_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_authorized_to_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_supported_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBGPCommunity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
