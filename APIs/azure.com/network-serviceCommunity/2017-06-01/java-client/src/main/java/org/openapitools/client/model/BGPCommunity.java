/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains bgp community information offered in Service Community resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:55:25.081237-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BGPCommunity {
  public static final String SERIALIZED_NAME_COMMUNITY_NAME = "communityName";
  @SerializedName(SERIALIZED_NAME_COMMUNITY_NAME)
  private String communityName;

  public static final String SERIALIZED_NAME_COMMUNITY_PREFIXES = "communityPrefixes";
  @SerializedName(SERIALIZED_NAME_COMMUNITY_PREFIXES)
  private List<String> communityPrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMUNITY_VALUE = "communityValue";
  @SerializedName(SERIALIZED_NAME_COMMUNITY_VALUE)
  private String communityValue;

  public static final String SERIALIZED_NAME_IS_AUTHORIZED_TO_USE = "isAuthorizedToUse";
  @SerializedName(SERIALIZED_NAME_IS_AUTHORIZED_TO_USE)
  private Boolean isAuthorizedToUse;

  public static final String SERIALIZED_NAME_SERVICE_GROUP = "serviceGroup";
  @SerializedName(SERIALIZED_NAME_SERVICE_GROUP)
  private String serviceGroup;

  public static final String SERIALIZED_NAME_SERVICE_SUPPORTED_REGION = "serviceSupportedRegion";
  @SerializedName(SERIALIZED_NAME_SERVICE_SUPPORTED_REGION)
  private String serviceSupportedRegion;

  public BGPCommunity() {
  }

  public BGPCommunity communityName(String communityName) {
    this.communityName = communityName;
    return this;
  }

  /**
   * The name of the bgp community. e.g. Skype.
   * @return communityName
   */
  @javax.annotation.Nullable
  public String getCommunityName() {
    return communityName;
  }

  public void setCommunityName(String communityName) {
    this.communityName = communityName;
  }


  public BGPCommunity communityPrefixes(List<String> communityPrefixes) {
    this.communityPrefixes = communityPrefixes;
    return this;
  }

  public BGPCommunity addCommunityPrefixesItem(String communityPrefixesItem) {
    if (this.communityPrefixes == null) {
      this.communityPrefixes = new ArrayList<>();
    }
    this.communityPrefixes.add(communityPrefixesItem);
    return this;
  }

  /**
   * The prefixes that the bgp community contains.
   * @return communityPrefixes
   */
  @javax.annotation.Nullable
  public List<String> getCommunityPrefixes() {
    return communityPrefixes;
  }

  public void setCommunityPrefixes(List<String> communityPrefixes) {
    this.communityPrefixes = communityPrefixes;
  }


  public BGPCommunity communityValue(String communityValue) {
    this.communityValue = communityValue;
    return this;
  }

  /**
   * The value of the bgp community. For more information: https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.
   * @return communityValue
   */
  @javax.annotation.Nullable
  public String getCommunityValue() {
    return communityValue;
  }

  public void setCommunityValue(String communityValue) {
    this.communityValue = communityValue;
  }


  public BGPCommunity isAuthorizedToUse(Boolean isAuthorizedToUse) {
    this.isAuthorizedToUse = isAuthorizedToUse;
    return this;
  }

  /**
   * Customer is authorized to use bgp community or not.
   * @return isAuthorizedToUse
   */
  @javax.annotation.Nullable
  public Boolean getIsAuthorizedToUse() {
    return isAuthorizedToUse;
  }

  public void setIsAuthorizedToUse(Boolean isAuthorizedToUse) {
    this.isAuthorizedToUse = isAuthorizedToUse;
  }


  public BGPCommunity serviceGroup(String serviceGroup) {
    this.serviceGroup = serviceGroup;
    return this;
  }

  /**
   * The service group of the bgp community contains.
   * @return serviceGroup
   */
  @javax.annotation.Nullable
  public String getServiceGroup() {
    return serviceGroup;
  }

  public void setServiceGroup(String serviceGroup) {
    this.serviceGroup = serviceGroup;
  }


  public BGPCommunity serviceSupportedRegion(String serviceSupportedRegion) {
    this.serviceSupportedRegion = serviceSupportedRegion;
    return this;
  }

  /**
   * The region which the service support. e.g. For O365, region is Global.
   * @return serviceSupportedRegion
   */
  @javax.annotation.Nullable
  public String getServiceSupportedRegion() {
    return serviceSupportedRegion;
  }

  public void setServiceSupportedRegion(String serviceSupportedRegion) {
    this.serviceSupportedRegion = serviceSupportedRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BGPCommunity bgPCommunity = (BGPCommunity) o;
    return Objects.equals(this.communityName, bgPCommunity.communityName) &&
        Objects.equals(this.communityPrefixes, bgPCommunity.communityPrefixes) &&
        Objects.equals(this.communityValue, bgPCommunity.communityValue) &&
        Objects.equals(this.isAuthorizedToUse, bgPCommunity.isAuthorizedToUse) &&
        Objects.equals(this.serviceGroup, bgPCommunity.serviceGroup) &&
        Objects.equals(this.serviceSupportedRegion, bgPCommunity.serviceSupportedRegion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(communityName, communityPrefixes, communityValue, isAuthorizedToUse, serviceGroup, serviceSupportedRegion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BGPCommunity {\n");
    sb.append("    communityName: ").append(toIndentedString(communityName)).append("\n");
    sb.append("    communityPrefixes: ").append(toIndentedString(communityPrefixes)).append("\n");
    sb.append("    communityValue: ").append(toIndentedString(communityValue)).append("\n");
    sb.append("    isAuthorizedToUse: ").append(toIndentedString(isAuthorizedToUse)).append("\n");
    sb.append("    serviceGroup: ").append(toIndentedString(serviceGroup)).append("\n");
    sb.append("    serviceSupportedRegion: ").append(toIndentedString(serviceSupportedRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("communityName");
    openapiFields.add("communityPrefixes");
    openapiFields.add("communityValue");
    openapiFields.add("isAuthorizedToUse");
    openapiFields.add("serviceGroup");
    openapiFields.add("serviceSupportedRegion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BGPCommunity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BGPCommunity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BGPCommunity is not found in the empty JSON string", BGPCommunity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BGPCommunity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BGPCommunity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("communityName") != null && !jsonObj.get("communityName").isJsonNull()) && !jsonObj.get("communityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `communityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("communityName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("communityPrefixes") != null && !jsonObj.get("communityPrefixes").isJsonNull() && !jsonObj.get("communityPrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `communityPrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("communityPrefixes").toString()));
      }
      if ((jsonObj.get("communityValue") != null && !jsonObj.get("communityValue").isJsonNull()) && !jsonObj.get("communityValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `communityValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("communityValue").toString()));
      }
      if ((jsonObj.get("serviceGroup") != null && !jsonObj.get("serviceGroup").isJsonNull()) && !jsonObj.get("serviceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceGroup").toString()));
      }
      if ((jsonObj.get("serviceSupportedRegion") != null && !jsonObj.get("serviceSupportedRegion").isJsonNull()) && !jsonObj.get("serviceSupportedRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceSupportedRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceSupportedRegion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BGPCommunity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BGPCommunity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BGPCommunity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BGPCommunity.class));

       return (TypeAdapter<T>) new TypeAdapter<BGPCommunity>() {
           @Override
           public void write(JsonWriter out, BGPCommunity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BGPCommunity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BGPCommunity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BGPCommunity
   * @throws IOException if the JSON string is invalid with respect to BGPCommunity
   */
  public static BGPCommunity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BGPCommunity.class);
  }

  /**
   * Convert an instance of BGPCommunity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

