/**
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAcquiredPlansApi_H
#define OAI_OAIAcquiredPlansApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPlanAcquisition.h"
#include "OAIPlanAcquisitionList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAcquiredPlansApi : public QObject {
    Q_OBJECT

public:
    OAIAcquiredPlansApi(const int timeOut = 0);
    ~OAIAcquiredPlansApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  target_subscription_id QString [required]
    * @param[in]  plan_acquisition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  new_acquired_plan OAIPlanAcquisition [required]
    */
    virtual void acquiredPlansCreate(const QString &subscription_id, const QString &target_subscription_id, const QString &plan_acquisition_id, const QString &api_version, const OAIPlanAcquisition &new_acquired_plan);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  target_subscription_id QString [required]
    * @param[in]  plan_acquisition_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void acquiredPlansDelete(const QString &subscription_id, const QString &target_subscription_id, const QString &plan_acquisition_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  target_subscription_id QString [required]
    * @param[in]  plan_acquisition_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void acquiredPlansGet(const QString &subscription_id, const QString &target_subscription_id, const QString &plan_acquisition_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  target_subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void acquiredPlansList(const QString &subscription_id, const QString &target_subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acquiredPlansCreateCallback(OAIHttpRequestWorker *worker);
    void acquiredPlansDeleteCallback(OAIHttpRequestWorker *worker);
    void acquiredPlansGetCallback(OAIHttpRequestWorker *worker);
    void acquiredPlansListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acquiredPlansCreateSignal(OAIPlanAcquisition summary);
    void acquiredPlansDeleteSignal();
    void acquiredPlansGetSignal(OAIPlanAcquisition summary);
    void acquiredPlansListSignal(OAIPlanAcquisitionList summary);


    void acquiredPlansCreateSignalFull(OAIHttpRequestWorker *worker, OAIPlanAcquisition summary);
    void acquiredPlansDeleteSignalFull(OAIHttpRequestWorker *worker);
    void acquiredPlansGetSignalFull(OAIHttpRequestWorker *worker, OAIPlanAcquisition summary);
    void acquiredPlansListSignalFull(OAIHttpRequestWorker *worker, OAIPlanAcquisitionList summary);

    Q_DECL_DEPRECATED_X("Use acquiredPlansCreateSignalError() instead")
    void acquiredPlansCreateSignalE(OAIPlanAcquisition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void acquiredPlansCreateSignalError(OAIPlanAcquisition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use acquiredPlansDeleteSignalError() instead")
    void acquiredPlansDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void acquiredPlansDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use acquiredPlansGetSignalError() instead")
    void acquiredPlansGetSignalE(OAIPlanAcquisition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void acquiredPlansGetSignalError(OAIPlanAcquisition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use acquiredPlansListSignalError() instead")
    void acquiredPlansListSignalE(OAIPlanAcquisitionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void acquiredPlansListSignalError(OAIPlanAcquisitionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acquiredPlansCreateSignalErrorFull() instead")
    void acquiredPlansCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acquiredPlansCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use acquiredPlansDeleteSignalErrorFull() instead")
    void acquiredPlansDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acquiredPlansDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use acquiredPlansGetSignalErrorFull() instead")
    void acquiredPlansGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acquiredPlansGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use acquiredPlansListSignalErrorFull() instead")
    void acquiredPlansListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acquiredPlansListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
