/**
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlanAcquisition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlanAcquisition::OAIPlanAcquisition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlanAcquisition::OAIPlanAcquisition() {
    this->initializeModel();
}

OAIPlanAcquisition::~OAIPlanAcquisition() {}

void OAIPlanAcquisition::initializeModel() {

    m_acquisition_id_isSet = false;
    m_acquisition_id_isValid = false;

    m_acquisition_time_isSet = false;
    m_acquisition_time_isValid = false;

    m_external_reference_id_isSet = false;
    m_external_reference_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIPlanAcquisition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlanAcquisition::fromJsonObject(QJsonObject json) {

    m_acquisition_id_isValid = ::OpenAPI::fromJsonValue(m_acquisition_id, json[QString("acquisitionId")]);
    m_acquisition_id_isSet = !json[QString("acquisitionId")].isNull() && m_acquisition_id_isValid;

    m_acquisition_time_isValid = ::OpenAPI::fromJsonValue(m_acquisition_time, json[QString("acquisitionTime")]);
    m_acquisition_time_isSet = !json[QString("acquisitionTime")].isNull() && m_acquisition_time_isValid;

    m_external_reference_id_isValid = ::OpenAPI::fromJsonValue(m_external_reference_id, json[QString("externalReferenceId")]);
    m_external_reference_id_isSet = !json[QString("externalReferenceId")].isNull() && m_external_reference_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("planId")]);
    m_plan_id_isSet = !json[QString("planId")].isNull() && m_plan_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIPlanAcquisition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlanAcquisition::asJsonObject() const {
    QJsonObject obj;
    if (m_acquisition_id_isSet) {
        obj.insert(QString("acquisitionId"), ::OpenAPI::toJsonValue(m_acquisition_id));
    }
    if (m_acquisition_time_isSet) {
        obj.insert(QString("acquisitionTime"), ::OpenAPI::toJsonValue(m_acquisition_time));
    }
    if (m_external_reference_id_isSet) {
        obj.insert(QString("externalReferenceId"), ::OpenAPI::toJsonValue(m_external_reference_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("planId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIPlanAcquisition::getAcquisitionId() const {
    return m_acquisition_id;
}
void OAIPlanAcquisition::setAcquisitionId(const QString &acquisition_id) {
    m_acquisition_id = acquisition_id;
    m_acquisition_id_isSet = true;
}

bool OAIPlanAcquisition::is_acquisition_id_Set() const{
    return m_acquisition_id_isSet;
}

bool OAIPlanAcquisition::is_acquisition_id_Valid() const{
    return m_acquisition_id_isValid;
}

QDateTime OAIPlanAcquisition::getAcquisitionTime() const {
    return m_acquisition_time;
}
void OAIPlanAcquisition::setAcquisitionTime(const QDateTime &acquisition_time) {
    m_acquisition_time = acquisition_time;
    m_acquisition_time_isSet = true;
}

bool OAIPlanAcquisition::is_acquisition_time_Set() const{
    return m_acquisition_time_isSet;
}

bool OAIPlanAcquisition::is_acquisition_time_Valid() const{
    return m_acquisition_time_isValid;
}

QString OAIPlanAcquisition::getExternalReferenceId() const {
    return m_external_reference_id;
}
void OAIPlanAcquisition::setExternalReferenceId(const QString &external_reference_id) {
    m_external_reference_id = external_reference_id;
    m_external_reference_id_isSet = true;
}

bool OAIPlanAcquisition::is_external_reference_id_Set() const{
    return m_external_reference_id_isSet;
}

bool OAIPlanAcquisition::is_external_reference_id_Valid() const{
    return m_external_reference_id_isValid;
}

QString OAIPlanAcquisition::getId() const {
    return m_id;
}
void OAIPlanAcquisition::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlanAcquisition::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlanAcquisition::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlanAcquisition::getPlanId() const {
    return m_plan_id;
}
void OAIPlanAcquisition::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIPlanAcquisition::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIPlanAcquisition::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

OAIProvisioningState OAIPlanAcquisition::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPlanAcquisition::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPlanAcquisition::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPlanAcquisition::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIPlanAcquisition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquisition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acquisition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlanAcquisition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
