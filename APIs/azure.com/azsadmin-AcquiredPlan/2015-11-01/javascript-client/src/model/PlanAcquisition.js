/**
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProvisioningState from './ProvisioningState';

/**
 * The PlanAcquisition model module.
 * @module model/PlanAcquisition
 * @version 2015-11-01
 */
class PlanAcquisition {
    /**
     * Constructs a new <code>PlanAcquisition</code>.
     * Represents the acquisition of an add-on plan for a subscription.
     * @alias module:model/PlanAcquisition
     */
    constructor() { 
        
        PlanAcquisition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlanAcquisition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlanAcquisition} obj Optional instance to populate.
     * @return {module:model/PlanAcquisition} The populated <code>PlanAcquisition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlanAcquisition();

            if (data.hasOwnProperty('acquisitionId')) {
                obj['acquisitionId'] = ApiClient.convertToType(data['acquisitionId'], 'String');
            }
            if (data.hasOwnProperty('acquisitionTime')) {
                obj['acquisitionTime'] = ApiClient.convertToType(data['acquisitionTime'], 'Date');
            }
            if (data.hasOwnProperty('externalReferenceId')) {
                obj['externalReferenceId'] = ApiClient.convertToType(data['externalReferenceId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('planId')) {
                obj['planId'] = ApiClient.convertToType(data['planId'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ProvisioningState.constructFromObject(data['provisioningState']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlanAcquisition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlanAcquisition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acquisitionId'] && !(typeof data['acquisitionId'] === 'string' || data['acquisitionId'] instanceof String)) {
            throw new Error("Expected the field `acquisitionId` to be a primitive type in the JSON string but got " + data['acquisitionId']);
        }
        // ensure the json data is a string
        if (data['externalReferenceId'] && !(typeof data['externalReferenceId'] === 'string' || data['externalReferenceId'] instanceof String)) {
            throw new Error("Expected the field `externalReferenceId` to be a primitive type in the JSON string but got " + data['externalReferenceId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['planId'] && !(typeof data['planId'] === 'string' || data['planId'] instanceof String)) {
            throw new Error("Expected the field `planId` to be a primitive type in the JSON string but got " + data['planId']);
        }

        return true;
    }


}



/**
 * Acquisition identifier.
 * @member {String} acquisitionId
 */
PlanAcquisition.prototype['acquisitionId'] = undefined;

/**
 * Acquisition time.
 * @member {Date} acquisitionTime
 */
PlanAcquisition.prototype['acquisitionTime'] = undefined;

/**
 * External reference identifier.
 * @member {String} externalReferenceId
 */
PlanAcquisition.prototype['externalReferenceId'] = undefined;

/**
 * Identifier in the tenant subscription context.
 * @member {String} id
 */
PlanAcquisition.prototype['id'] = undefined;

/**
 * Plan identifier in the tenant subscription context.
 * @member {String} planId
 */
PlanAcquisition.prototype['planId'] = undefined;

/**
 * @member {module:model/ProvisioningState} provisioningState
 */
PlanAcquisition.prototype['provisioningState'] = undefined;






export default PlanAcquisition;

