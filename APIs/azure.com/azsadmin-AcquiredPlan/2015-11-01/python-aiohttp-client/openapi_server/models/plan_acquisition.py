# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server import util


class PlanAcquisition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquisition_id: str=None, acquisition_time: datetime=None, external_reference_id: str=None, id: str=None, plan_id: str=None, provisioning_state: ProvisioningState=None):
        """PlanAcquisition - a model defined in OpenAPI

        :param acquisition_id: The acquisition_id of this PlanAcquisition.
        :param acquisition_time: The acquisition_time of this PlanAcquisition.
        :param external_reference_id: The external_reference_id of this PlanAcquisition.
        :param id: The id of this PlanAcquisition.
        :param plan_id: The plan_id of this PlanAcquisition.
        :param provisioning_state: The provisioning_state of this PlanAcquisition.
        """
        self.openapi_types = {
            'acquisition_id': str,
            'acquisition_time': datetime,
            'external_reference_id': str,
            'id': str,
            'plan_id': str,
            'provisioning_state': ProvisioningState
        }

        self.attribute_map = {
            'acquisition_id': 'acquisitionId',
            'acquisition_time': 'acquisitionTime',
            'external_reference_id': 'externalReferenceId',
            'id': 'id',
            'plan_id': 'planId',
            'provisioning_state': 'provisioningState'
        }

        self._acquisition_id = acquisition_id
        self._acquisition_time = acquisition_time
        self._external_reference_id = external_reference_id
        self._id = id
        self._plan_id = plan_id
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanAcquisition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanAcquisition of this PlanAcquisition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquisition_id(self):
        """Gets the acquisition_id of this PlanAcquisition.

        Acquisition identifier.

        :return: The acquisition_id of this PlanAcquisition.
        :rtype: str
        """
        return self._acquisition_id

    @acquisition_id.setter
    def acquisition_id(self, acquisition_id):
        """Sets the acquisition_id of this PlanAcquisition.

        Acquisition identifier.

        :param acquisition_id: The acquisition_id of this PlanAcquisition.
        :type acquisition_id: str
        """

        self._acquisition_id = acquisition_id

    @property
    def acquisition_time(self):
        """Gets the acquisition_time of this PlanAcquisition.

        Acquisition time.

        :return: The acquisition_time of this PlanAcquisition.
        :rtype: datetime
        """
        return self._acquisition_time

    @acquisition_time.setter
    def acquisition_time(self, acquisition_time):
        """Sets the acquisition_time of this PlanAcquisition.

        Acquisition time.

        :param acquisition_time: The acquisition_time of this PlanAcquisition.
        :type acquisition_time: datetime
        """

        self._acquisition_time = acquisition_time

    @property
    def external_reference_id(self):
        """Gets the external_reference_id of this PlanAcquisition.

        External reference identifier.

        :return: The external_reference_id of this PlanAcquisition.
        :rtype: str
        """
        return self._external_reference_id

    @external_reference_id.setter
    def external_reference_id(self, external_reference_id):
        """Sets the external_reference_id of this PlanAcquisition.

        External reference identifier.

        :param external_reference_id: The external_reference_id of this PlanAcquisition.
        :type external_reference_id: str
        """

        self._external_reference_id = external_reference_id

    @property
    def id(self):
        """Gets the id of this PlanAcquisition.

        Identifier in the tenant subscription context.

        :return: The id of this PlanAcquisition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanAcquisition.

        Identifier in the tenant subscription context.

        :param id: The id of this PlanAcquisition.
        :type id: str
        """

        self._id = id

    @property
    def plan_id(self):
        """Gets the plan_id of this PlanAcquisition.

        Plan identifier in the tenant subscription context.

        :return: The plan_id of this PlanAcquisition.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PlanAcquisition.

        Plan identifier in the tenant subscription context.

        :param plan_id: The plan_id of this PlanAcquisition.
        :type plan_id: str
        """

        self._plan_id = plan_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this PlanAcquisition.


        :return: The provisioning_state of this PlanAcquisition.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this PlanAcquisition.


        :param provisioning_state: The provisioning_state of this PlanAcquisition.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state
