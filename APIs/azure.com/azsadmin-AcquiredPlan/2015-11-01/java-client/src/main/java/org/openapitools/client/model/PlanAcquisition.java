/*
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ProvisioningState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the acquisition of an add-on plan for a subscription.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:19.638924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlanAcquisition {
  public static final String SERIALIZED_NAME_ACQUISITION_ID = "acquisitionId";
  @SerializedName(SERIALIZED_NAME_ACQUISITION_ID)
  private String acquisitionId;

  public static final String SERIALIZED_NAME_ACQUISITION_TIME = "acquisitionTime";
  @SerializedName(SERIALIZED_NAME_ACQUISITION_TIME)
  private OffsetDateTime acquisitionTime;

  public static final String SERIALIZED_NAME_EXTERNAL_REFERENCE_ID = "externalReferenceId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REFERENCE_ID)
  private String externalReferenceId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PLAN_ID = "planId";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  private String planId;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public PlanAcquisition() {
  }

  public PlanAcquisition acquisitionId(String acquisitionId) {
    this.acquisitionId = acquisitionId;
    return this;
  }

  /**
   * Acquisition identifier.
   * @return acquisitionId
   */
  @javax.annotation.Nullable
  public String getAcquisitionId() {
    return acquisitionId;
  }

  public void setAcquisitionId(String acquisitionId) {
    this.acquisitionId = acquisitionId;
  }


  public PlanAcquisition acquisitionTime(OffsetDateTime acquisitionTime) {
    this.acquisitionTime = acquisitionTime;
    return this;
  }

  /**
   * Acquisition time.
   * @return acquisitionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAcquisitionTime() {
    return acquisitionTime;
  }

  public void setAcquisitionTime(OffsetDateTime acquisitionTime) {
    this.acquisitionTime = acquisitionTime;
  }


  public PlanAcquisition externalReferenceId(String externalReferenceId) {
    this.externalReferenceId = externalReferenceId;
    return this;
  }

  /**
   * External reference identifier.
   * @return externalReferenceId
   */
  @javax.annotation.Nullable
  public String getExternalReferenceId() {
    return externalReferenceId;
  }

  public void setExternalReferenceId(String externalReferenceId) {
    this.externalReferenceId = externalReferenceId;
  }


  public PlanAcquisition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier in the tenant subscription context.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PlanAcquisition planId(String planId) {
    this.planId = planId;
    return this;
  }

  /**
   * Plan identifier in the tenant subscription context.
   * @return planId
   */
  @javax.annotation.Nullable
  public String getPlanId() {
    return planId;
  }

  public void setPlanId(String planId) {
    this.planId = planId;
  }


  public PlanAcquisition provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanAcquisition planAcquisition = (PlanAcquisition) o;
    return Objects.equals(this.acquisitionId, planAcquisition.acquisitionId) &&
        Objects.equals(this.acquisitionTime, planAcquisition.acquisitionTime) &&
        Objects.equals(this.externalReferenceId, planAcquisition.externalReferenceId) &&
        Objects.equals(this.id, planAcquisition.id) &&
        Objects.equals(this.planId, planAcquisition.planId) &&
        Objects.equals(this.provisioningState, planAcquisition.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquisitionId, acquisitionTime, externalReferenceId, id, planId, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanAcquisition {\n");
    sb.append("    acquisitionId: ").append(toIndentedString(acquisitionId)).append("\n");
    sb.append("    acquisitionTime: ").append(toIndentedString(acquisitionTime)).append("\n");
    sb.append("    externalReferenceId: ").append(toIndentedString(externalReferenceId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquisitionId");
    openapiFields.add("acquisitionTime");
    openapiFields.add("externalReferenceId");
    openapiFields.add("id");
    openapiFields.add("planId");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlanAcquisition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlanAcquisition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlanAcquisition is not found in the empty JSON string", PlanAcquisition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlanAcquisition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlanAcquisition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acquisitionId") != null && !jsonObj.get("acquisitionId").isJsonNull()) && !jsonObj.get("acquisitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquisitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquisitionId").toString()));
      }
      if ((jsonObj.get("externalReferenceId") != null && !jsonObj.get("externalReferenceId").isJsonNull()) && !jsonObj.get("externalReferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalReferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalReferenceId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("planId") != null && !jsonObj.get("planId").isJsonNull()) && !jsonObj.get("planId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planId").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlanAcquisition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlanAcquisition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlanAcquisition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlanAcquisition.class));

       return (TypeAdapter<T>) new TypeAdapter<PlanAcquisition>() {
           @Override
           public void write(JsonWriter out, PlanAcquisition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlanAcquisition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlanAcquisition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlanAcquisition
   * @throws IOException if the JSON string is invalid with respect to PlanAcquisition
   */
  public static PlanAcquisition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlanAcquisition.class);
  }

  /**
   * Convert an instance of PlanAcquisition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

