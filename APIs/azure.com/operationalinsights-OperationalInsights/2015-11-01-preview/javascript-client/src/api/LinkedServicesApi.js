/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2015-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LinkedService from '../model/LinkedService';
import LinkedServiceListResult from '../model/LinkedServiceListResult';

/**
* LinkedServices service.
* @module api/LinkedServicesApi
* @version 2015-11-01-preview
*/
export default class LinkedServicesApi {

    /**
    * Constructs a new LinkedServicesApi. 
    * @alias module:api/LinkedServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the linkedServicesCreateOrUpdate operation.
     * @callback module:api/LinkedServicesApi~linkedServicesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a linked service.
     * @param {String} resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param {String} workspaceName Name of the Log Analytics Workspace that will contain the linkedServices resource
     * @param {String} linkedServiceName Name of the linkedServices resource
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/LinkedService} parameters The parameters required to create or update a linked service.
     * @param {module:api/LinkedServicesApi~linkedServicesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedService}
     */
    linkedServicesCreateOrUpdate(resourceGroupName, workspaceName, linkedServiceName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling linkedServicesCreateOrUpdate");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling linkedServicesCreateOrUpdate");
      }
      // verify the required parameter 'linkedServiceName' is set
      if (linkedServiceName === undefined || linkedServiceName === null) {
        throw new Error("Missing the required parameter 'linkedServiceName' when calling linkedServicesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling linkedServicesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling linkedServicesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling linkedServicesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'linkedServiceName': linkedServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkedService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkedServicesDelete operation.
     * @callback module:api/LinkedServicesApi~linkedServicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a linked service instance.
     * @param {String} resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param {String} workspaceName Name of the Log Analytics Workspace that contains the linkedServices resource
     * @param {String} linkedServiceName Name of the linked service.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/LinkedServicesApi~linkedServicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    linkedServicesDelete(resourceGroupName, workspaceName, linkedServiceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling linkedServicesDelete");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling linkedServicesDelete");
      }
      // verify the required parameter 'linkedServiceName' is set
      if (linkedServiceName === undefined || linkedServiceName === null) {
        throw new Error("Missing the required parameter 'linkedServiceName' when calling linkedServicesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling linkedServicesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling linkedServicesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'linkedServiceName': linkedServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkedServicesGet operation.
     * @callback module:api/LinkedServicesApi~linkedServicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a linked service instance.
     * @param {String} resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param {String} workspaceName Name of the Log Analytics Workspace that contains the linkedServices resource
     * @param {String} linkedServiceName Name of the linked service.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/LinkedServicesApi~linkedServicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedService}
     */
    linkedServicesGet(resourceGroupName, workspaceName, linkedServiceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling linkedServicesGet");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling linkedServicesGet");
      }
      // verify the required parameter 'linkedServiceName' is set
      if (linkedServiceName === undefined || linkedServiceName === null) {
        throw new Error("Missing the required parameter 'linkedServiceName' when calling linkedServicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling linkedServicesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling linkedServicesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'linkedServiceName': linkedServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkedService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkedServicesListByWorkspace operation.
     * @callback module:api/LinkedServicesApi~linkedServicesListByWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedServiceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the linked services instances in a workspace.
     * @param {String} resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param {String} workspaceName Name of the Log Analytics Workspace that contains the linked services.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/LinkedServicesApi~linkedServicesListByWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedServiceListResult}
     */
    linkedServicesListByWorkspace(resourceGroupName, workspaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling linkedServicesListByWorkspace");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling linkedServicesListByWorkspace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling linkedServicesListByWorkspace");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling linkedServicesListByWorkspace");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkedServiceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
