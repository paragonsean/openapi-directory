/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2015-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IntelligencePack from '../model/IntelligencePack';
import SharedKeys from '../model/SharedKeys';
import Workspace from '../model/Workspace';
import WorkspaceListManagementGroupsResult from '../model/WorkspaceListManagementGroupsResult';
import WorkspaceListResult from '../model/WorkspaceListResult';
import WorkspaceListUsagesResult from '../model/WorkspaceListUsagesResult';

/**
* Workspaces service.
* @module api/WorkspacesApi
* @version 2015-11-01-preview
*/
export default class WorkspacesApi {

    /**
    * Constructs a new WorkspacesApi. 
    * @alias module:api/WorkspacesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workspacesCreateOrUpdate operation.
     * @callback module:api/WorkspacesApi~workspacesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a workspace.
     * @param {String} resourceGroupName The resource group name of the workspace.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/Workspace} parameters The parameters required to create or update a workspace.
     * @param {module:api/WorkspacesApi~workspacesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workspace}
     */
    workspacesCreateOrUpdate(resourceGroupName, workspaceName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesCreateOrUpdate");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling workspacesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Workspace;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesDelete operation.
     * @callback module:api/WorkspacesApi~workspacesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a workspace instance.
     * @param {String} resourceGroupName The resource group name of the workspace.
     * @param {String} workspaceName Name of the Log Analytics Workspace.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/WorkspacesApi~workspacesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspacesDelete(resourceGroupName, workspaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesDelete");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesDisableIntelligencePack operation.
     * @callback module:api/WorkspacesApi~workspacesDisableIntelligencePackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables an intelligence pack for a given workspace.
     * @param {String} resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param {String} workspaceName Name of the Log Analytics Workspace.
     * @param {String} intelligencePackName The name of the intelligence pack to be disabled.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/WorkspacesApi~workspacesDisableIntelligencePackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspacesDisableIntelligencePack(resourceGroupName, workspaceName, intelligencePackName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesDisableIntelligencePack");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesDisableIntelligencePack");
      }
      // verify the required parameter 'intelligencePackName' is set
      if (intelligencePackName === undefined || intelligencePackName === null) {
        throw new Error("Missing the required parameter 'intelligencePackName' when calling workspacesDisableIntelligencePack");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesDisableIntelligencePack");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesDisableIntelligencePack");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'intelligencePackName': intelligencePackName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks/{intelligencePackName}/Disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesEnableIntelligencePack operation.
     * @callback module:api/WorkspacesApi~workspacesEnableIntelligencePackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables an intelligence pack for a given workspace.
     * @param {String} resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param {String} workspaceName Name of the Log Analytics Workspace.
     * @param {String} intelligencePackName The name of the intelligence pack to be enabled.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/WorkspacesApi~workspacesEnableIntelligencePackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspacesEnableIntelligencePack(resourceGroupName, workspaceName, intelligencePackName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesEnableIntelligencePack");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesEnableIntelligencePack");
      }
      // verify the required parameter 'intelligencePackName' is set
      if (intelligencePackName === undefined || intelligencePackName === null) {
        throw new Error("Missing the required parameter 'intelligencePackName' when calling workspacesEnableIntelligencePack");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesEnableIntelligencePack");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesEnableIntelligencePack");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'intelligencePackName': intelligencePackName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks/{intelligencePackName}/Enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesGet operation.
     * @callback module:api/WorkspacesApi~workspacesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a workspace instance.
     * @param {String} resourceGroupName The resource group name of the workspace.
     * @param {String} workspaceName Name of the Log Analytics Workspace.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/WorkspacesApi~workspacesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workspace}
     */
    workspacesGet(resourceGroupName, workspaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesGet");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Workspace;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesGetSharedKeys operation.
     * @callback module:api/WorkspacesApi~workspacesGetSharedKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the shared keys for a workspace.
     * @param {String} resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param {String} workspaceName Name of the Log Analytics Workspace.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/WorkspacesApi~workspacesGetSharedKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedKeys}
     */
    workspacesGetSharedKeys(resourceGroupName, workspaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesGetSharedKeys");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesGetSharedKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesGetSharedKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesGetSharedKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/sharedKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesList operation.
     * @callback module:api/WorkspacesApi~workspacesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the workspaces in a subscription.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/WorkspacesApi~workspacesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceListResult}
     */
    workspacesList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkspaceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/workspaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesListByResourceGroup operation.
     * @callback module:api/WorkspacesApi~workspacesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets workspaces in a resource group.
     * @param {String} resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/WorkspacesApi~workspacesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceListResult}
     */
    workspacesListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkspaceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesListIntelligencePacks operation.
     * @callback module:api/WorkspacesApi~workspacesListIntelligencePacksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IntelligencePack>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the intelligence packs possible and whether they are enabled or disabled for a given workspace.
     * @param {String} resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param {String} workspaceName Name of the Log Analytics Workspace.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/WorkspacesApi~workspacesListIntelligencePacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IntelligencePack>}
     */
    workspacesListIntelligencePacks(resourceGroupName, workspaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesListIntelligencePacks");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesListIntelligencePacks");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesListIntelligencePacks");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesListIntelligencePacks");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IntelligencePack];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesListManagementGroups operation.
     * @callback module:api/WorkspacesApi~workspacesListManagementGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceListManagementGroupsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of management groups connected to a workspace.
     * @param {String} resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/WorkspacesApi~workspacesListManagementGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceListManagementGroupsResult}
     */
    workspacesListManagementGroups(resourceGroupName, workspaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesListManagementGroups");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesListManagementGroups");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesListManagementGroups");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesListManagementGroups");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkspaceListManagementGroupsResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/managementGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesListUsages operation.
     * @callback module:api/WorkspacesApi~workspacesListUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceListUsagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of usage metrics for a workspace.
     * @param {String} resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/WorkspacesApi~workspacesListUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceListUsagesResult}
     */
    workspacesListUsages(resourceGroupName, workspaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesListUsages");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesListUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesListUsages");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesListUsages");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkspaceListUsagesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesUpdate operation.
     * @callback module:api/WorkspacesApi~workspacesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a workspace.
     * @param {String} resourceGroupName The resource group name of the workspace.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/Workspace} parameters The parameters required to patch a workspace.
     * @param {module:api/WorkspacesApi~workspacesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workspace}
     */
    workspacesUpdate(resourceGroupName, workspaceName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesUpdate");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling workspacesUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Workspace;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
