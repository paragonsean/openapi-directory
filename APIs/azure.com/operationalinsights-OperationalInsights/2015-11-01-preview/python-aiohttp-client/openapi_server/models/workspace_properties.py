# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sku import Sku
from openapi_server import util


class WorkspaceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_id: str=None, portal_url: str=None, provisioning_state: str=None, retention_in_days: int=None, sku: Sku=None, source: str=None):
        """WorkspaceProperties - a model defined in OpenAPI

        :param customer_id: The customer_id of this WorkspaceProperties.
        :param portal_url: The portal_url of this WorkspaceProperties.
        :param provisioning_state: The provisioning_state of this WorkspaceProperties.
        :param retention_in_days: The retention_in_days of this WorkspaceProperties.
        :param sku: The sku of this WorkspaceProperties.
        :param source: The source of this WorkspaceProperties.
        """
        self.openapi_types = {
            'customer_id': str,
            'portal_url': str,
            'provisioning_state': str,
            'retention_in_days': int,
            'sku': Sku,
            'source': str
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'portal_url': 'portalUrl',
            'provisioning_state': 'provisioningState',
            'retention_in_days': 'retentionInDays',
            'sku': 'sku',
            'source': 'source'
        }

        self._customer_id = customer_id
        self._portal_url = portal_url
        self._provisioning_state = provisioning_state
        self._retention_in_days = retention_in_days
        self._sku = sku
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceProperties of this WorkspaceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self):
        """Gets the customer_id of this WorkspaceProperties.

        This is a read-only property. Represents the ID associated with the workspace.

        :return: The customer_id of this WorkspaceProperties.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this WorkspaceProperties.

        This is a read-only property. Represents the ID associated with the workspace.

        :param customer_id: The customer_id of this WorkspaceProperties.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def portal_url(self):
        """Gets the portal_url of this WorkspaceProperties.

        This is a legacy property and is not used anymore. Kept here for backward compatibility.

        :return: The portal_url of this WorkspaceProperties.
        :rtype: str
        """
        return self._portal_url

    @portal_url.setter
    def portal_url(self, portal_url):
        """Sets the portal_url of this WorkspaceProperties.

        This is a legacy property and is not used anymore. Kept here for backward compatibility.

        :param portal_url: The portal_url of this WorkspaceProperties.
        :type portal_url: str
        """

        self._portal_url = portal_url

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this WorkspaceProperties.

        The provisioning state of the workspace.

        :return: The provisioning_state of this WorkspaceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this WorkspaceProperties.

        The provisioning state of the workspace.

        :param provisioning_state: The provisioning_state of this WorkspaceProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Succeeded", "Failed", "Canceled", "Deleting", "ProvisioningAccount"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def retention_in_days(self):
        """Gets the retention_in_days of this WorkspaceProperties.

        The workspace data retention in days. -1 means Unlimited retention for the Unlimited Sku. 730 days is the maximum allowed for all other Skus. 

        :return: The retention_in_days of this WorkspaceProperties.
        :rtype: int
        """
        return self._retention_in_days

    @retention_in_days.setter
    def retention_in_days(self, retention_in_days):
        """Sets the retention_in_days of this WorkspaceProperties.

        The workspace data retention in days. -1 means Unlimited retention for the Unlimited Sku. 730 days is the maximum allowed for all other Skus. 

        :param retention_in_days: The retention_in_days of this WorkspaceProperties.
        :type retention_in_days: int
        """
        if retention_in_days is not None and retention_in_days > 730:
            raise ValueError("Invalid value for `retention_in_days`, must be a value less than or equal to `730`")
        if retention_in_days is not None and retention_in_days < -1:
            raise ValueError("Invalid value for `retention_in_days`, must be a value greater than or equal to `-1`")

        self._retention_in_days = retention_in_days

    @property
    def sku(self):
        """Gets the sku of this WorkspaceProperties.


        :return: The sku of this WorkspaceProperties.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this WorkspaceProperties.


        :param sku: The sku of this WorkspaceProperties.
        :type sku: Sku
        """

        self._sku = sku

    @property
    def source(self):
        """Gets the source of this WorkspaceProperties.

        This is a read-only legacy property. It is always set to 'Azure' by the service. Kept here for backward compatibility.

        :return: The source of this WorkspaceProperties.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this WorkspaceProperties.

        This is a read-only legacy property. It is always set to 'Azure' by the service. Kept here for backward compatibility.

        :param source: The source of this WorkspaceProperties.
        :type source: str
        """

        self._source = source
