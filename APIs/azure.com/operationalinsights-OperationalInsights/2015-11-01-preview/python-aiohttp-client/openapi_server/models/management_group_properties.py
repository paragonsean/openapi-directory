# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManagementGroupProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, data_received: datetime=None, id: str=None, is_gateway: bool=None, name: str=None, server_count: int=None, sku: str=None, version: str=None):
        """ManagementGroupProperties - a model defined in OpenAPI

        :param created: The created of this ManagementGroupProperties.
        :param data_received: The data_received of this ManagementGroupProperties.
        :param id: The id of this ManagementGroupProperties.
        :param is_gateway: The is_gateway of this ManagementGroupProperties.
        :param name: The name of this ManagementGroupProperties.
        :param server_count: The server_count of this ManagementGroupProperties.
        :param sku: The sku of this ManagementGroupProperties.
        :param version: The version of this ManagementGroupProperties.
        """
        self.openapi_types = {
            'created': datetime,
            'data_received': datetime,
            'id': str,
            'is_gateway': bool,
            'name': str,
            'server_count': int,
            'sku': str,
            'version': str
        }

        self.attribute_map = {
            'created': 'created',
            'data_received': 'dataReceived',
            'id': 'id',
            'is_gateway': 'isGateway',
            'name': 'name',
            'server_count': 'serverCount',
            'sku': 'sku',
            'version': 'version'
        }

        self._created = created
        self._data_received = data_received
        self._id = id
        self._is_gateway = is_gateway
        self._name = name
        self._server_count = server_count
        self._sku = sku
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagementGroupProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagementGroupProperties of this ManagementGroupProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ManagementGroupProperties.

        The datetime that the management group was created.

        :return: The created of this ManagementGroupProperties.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ManagementGroupProperties.

        The datetime that the management group was created.

        :param created: The created of this ManagementGroupProperties.
        :type created: datetime
        """

        self._created = created

    @property
    def data_received(self):
        """Gets the data_received of this ManagementGroupProperties.

        The last datetime that the management group received data.

        :return: The data_received of this ManagementGroupProperties.
        :rtype: datetime
        """
        return self._data_received

    @data_received.setter
    def data_received(self, data_received):
        """Sets the data_received of this ManagementGroupProperties.

        The last datetime that the management group received data.

        :param data_received: The data_received of this ManagementGroupProperties.
        :type data_received: datetime
        """

        self._data_received = data_received

    @property
    def id(self):
        """Gets the id of this ManagementGroupProperties.

        The unique ID of the management group.

        :return: The id of this ManagementGroupProperties.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ManagementGroupProperties.

        The unique ID of the management group.

        :param id: The id of this ManagementGroupProperties.
        :type id: str
        """

        self._id = id

    @property
    def is_gateway(self):
        """Gets the is_gateway of this ManagementGroupProperties.

        Gets or sets a value indicating whether the management group is a gateway.

        :return: The is_gateway of this ManagementGroupProperties.
        :rtype: bool
        """
        return self._is_gateway

    @is_gateway.setter
    def is_gateway(self, is_gateway):
        """Sets the is_gateway of this ManagementGroupProperties.

        Gets or sets a value indicating whether the management group is a gateway.

        :param is_gateway: The is_gateway of this ManagementGroupProperties.
        :type is_gateway: bool
        """

        self._is_gateway = is_gateway

    @property
    def name(self):
        """Gets the name of this ManagementGroupProperties.

        The name of the management group.

        :return: The name of this ManagementGroupProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManagementGroupProperties.

        The name of the management group.

        :param name: The name of this ManagementGroupProperties.
        :type name: str
        """

        self._name = name

    @property
    def server_count(self):
        """Gets the server_count of this ManagementGroupProperties.

        The number of servers connected to the management group.

        :return: The server_count of this ManagementGroupProperties.
        :rtype: int
        """
        return self._server_count

    @server_count.setter
    def server_count(self, server_count):
        """Sets the server_count of this ManagementGroupProperties.

        The number of servers connected to the management group.

        :param server_count: The server_count of this ManagementGroupProperties.
        :type server_count: int
        """

        self._server_count = server_count

    @property
    def sku(self):
        """Gets the sku of this ManagementGroupProperties.

        The SKU of System Center that is managing the management group.

        :return: The sku of this ManagementGroupProperties.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ManagementGroupProperties.

        The SKU of System Center that is managing the management group.

        :param sku: The sku of this ManagementGroupProperties.
        :type sku: str
        """

        self._sku = sku

    @property
    def version(self):
        """Gets the version of this ManagementGroupProperties.

        The version of System Center that is managing the management group.

        :return: The version of this ManagementGroupProperties.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ManagementGroupProperties.

        The version of System Center that is managing the management group.

        :param version: The version of this ManagementGroupProperties.
        :type version: str
        """

        self._version = version
