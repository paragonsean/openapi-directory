/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2015-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagementGroupProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagementGroupProperties::OAIManagementGroupProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagementGroupProperties::OAIManagementGroupProperties() {
    this->initializeModel();
}

OAIManagementGroupProperties::~OAIManagementGroupProperties() {}

void OAIManagementGroupProperties::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_data_received_isSet = false;
    m_data_received_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_gateway_isSet = false;
    m_is_gateway_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_server_count_isSet = false;
    m_server_count_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIManagementGroupProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagementGroupProperties::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_data_received_isValid = ::OpenAPI::fromJsonValue(m_data_received, json[QString("dataReceived")]);
    m_data_received_isSet = !json[QString("dataReceived")].isNull() && m_data_received_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_gateway_isValid = ::OpenAPI::fromJsonValue(m_is_gateway, json[QString("isGateway")]);
    m_is_gateway_isSet = !json[QString("isGateway")].isNull() && m_is_gateway_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_server_count_isValid = ::OpenAPI::fromJsonValue(m_server_count, json[QString("serverCount")]);
    m_server_count_isSet = !json[QString("serverCount")].isNull() && m_server_count_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIManagementGroupProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagementGroupProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_data_received_isSet) {
        obj.insert(QString("dataReceived"), ::OpenAPI::toJsonValue(m_data_received));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_gateway_isSet) {
        obj.insert(QString("isGateway"), ::OpenAPI::toJsonValue(m_is_gateway));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_server_count_isSet) {
        obj.insert(QString("serverCount"), ::OpenAPI::toJsonValue(m_server_count));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QDateTime OAIManagementGroupProperties::getCreated() const {
    return m_created;
}
void OAIManagementGroupProperties::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIManagementGroupProperties::is_created_Set() const{
    return m_created_isSet;
}

bool OAIManagementGroupProperties::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAIManagementGroupProperties::getDataReceived() const {
    return m_data_received;
}
void OAIManagementGroupProperties::setDataReceived(const QDateTime &data_received) {
    m_data_received = data_received;
    m_data_received_isSet = true;
}

bool OAIManagementGroupProperties::is_data_received_Set() const{
    return m_data_received_isSet;
}

bool OAIManagementGroupProperties::is_data_received_Valid() const{
    return m_data_received_isValid;
}

QString OAIManagementGroupProperties::getId() const {
    return m_id;
}
void OAIManagementGroupProperties::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIManagementGroupProperties::is_id_Set() const{
    return m_id_isSet;
}

bool OAIManagementGroupProperties::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIManagementGroupProperties::isIsGateway() const {
    return m_is_gateway;
}
void OAIManagementGroupProperties::setIsGateway(const bool &is_gateway) {
    m_is_gateway = is_gateway;
    m_is_gateway_isSet = true;
}

bool OAIManagementGroupProperties::is_is_gateway_Set() const{
    return m_is_gateway_isSet;
}

bool OAIManagementGroupProperties::is_is_gateway_Valid() const{
    return m_is_gateway_isValid;
}

QString OAIManagementGroupProperties::getName() const {
    return m_name;
}
void OAIManagementGroupProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIManagementGroupProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAIManagementGroupProperties::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIManagementGroupProperties::getServerCount() const {
    return m_server_count;
}
void OAIManagementGroupProperties::setServerCount(const qint32 &server_count) {
    m_server_count = server_count;
    m_server_count_isSet = true;
}

bool OAIManagementGroupProperties::is_server_count_Set() const{
    return m_server_count_isSet;
}

bool OAIManagementGroupProperties::is_server_count_Valid() const{
    return m_server_count_isValid;
}

QString OAIManagementGroupProperties::getSku() const {
    return m_sku;
}
void OAIManagementGroupProperties::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIManagementGroupProperties::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIManagementGroupProperties::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIManagementGroupProperties::getVersion() const {
    return m_version;
}
void OAIManagementGroupProperties::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIManagementGroupProperties::is_version_Set() const{
    return m_version_isSet;
}

bool OAIManagementGroupProperties::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIManagementGroupProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagementGroupProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
