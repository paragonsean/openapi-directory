/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2015-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceKind.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceKind::OAIDataSourceKind(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceKind::OAIDataSourceKind() {
    this->initializeModel();
}

OAIDataSourceKind::~OAIDataSourceKind() {}

void OAIDataSourceKind::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataSourceKind::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataSourceKind::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AzureActivityLog", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::AZUREACTIVITYLOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChangeTrackingPath", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::CHANGETRACKINGPATH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChangeTrackingDefaultPath", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::CHANGETRACKINGDEFAULTPATH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChangeTrackingDefaultRegistry", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::CHANGETRACKINGDEFAULTREGISTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChangeTrackingCustomRegistry", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::CHANGETRACKINGCUSTOMREGISTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CustomLog", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::CUSTOMLOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CustomLogCollection", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::CUSTOMLOGCOLLECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GenericDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::GENERICDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IISLogs", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::IISLOGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LinuxPerformanceObject", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::LINUXPERFORMANCEOBJECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LinuxPerformanceCollection", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::LINUXPERFORMANCECOLLECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LinuxSyslog", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::LINUXSYSLOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LinuxSyslogCollection", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::LINUXSYSLOGCOLLECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WindowsEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::WINDOWSEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WindowsPerformanceCounter", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceKind::WINDOWSPERFORMANCECOUNTER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataSourceKind::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataSourceKind::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataSourceKind::AZUREACTIVITYLOG:
            val = "AzureActivityLog";
            break;
        case eOAIDataSourceKind::CHANGETRACKINGPATH:
            val = "ChangeTrackingPath";
            break;
        case eOAIDataSourceKind::CHANGETRACKINGDEFAULTPATH:
            val = "ChangeTrackingDefaultPath";
            break;
        case eOAIDataSourceKind::CHANGETRACKINGDEFAULTREGISTRY:
            val = "ChangeTrackingDefaultRegistry";
            break;
        case eOAIDataSourceKind::CHANGETRACKINGCUSTOMREGISTRY:
            val = "ChangeTrackingCustomRegistry";
            break;
        case eOAIDataSourceKind::CUSTOMLOG:
            val = "CustomLog";
            break;
        case eOAIDataSourceKind::CUSTOMLOGCOLLECTION:
            val = "CustomLogCollection";
            break;
        case eOAIDataSourceKind::GENERICDATASOURCE:
            val = "GenericDataSource";
            break;
        case eOAIDataSourceKind::IISLOGS:
            val = "IISLogs";
            break;
        case eOAIDataSourceKind::LINUXPERFORMANCEOBJECT:
            val = "LinuxPerformanceObject";
            break;
        case eOAIDataSourceKind::LINUXPERFORMANCECOLLECTION:
            val = "LinuxPerformanceCollection";
            break;
        case eOAIDataSourceKind::LINUXSYSLOG:
            val = "LinuxSyslog";
            break;
        case eOAIDataSourceKind::LINUXSYSLOGCOLLECTION:
            val = "LinuxSyslogCollection";
            break;
        case eOAIDataSourceKind::WINDOWSEVENT:
            val = "WindowsEvent";
            break;
        case eOAIDataSourceKind::WINDOWSPERFORMANCECOUNTER:
            val = "WindowsPerformanceCounter";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataSourceKind::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataSourceKind::eOAIDataSourceKind OAIDataSourceKind::getValue() const {
    return m_value;
}

void OAIDataSourceKind::setValue(const OAIDataSourceKind::eOAIDataSourceKind& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataSourceKind::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataSourceKind::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
