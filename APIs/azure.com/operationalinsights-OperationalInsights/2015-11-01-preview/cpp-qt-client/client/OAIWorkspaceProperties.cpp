/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2015-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceProperties::OAIWorkspaceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceProperties::OAIWorkspaceProperties() {
    this->initializeModel();
}

OAIWorkspaceProperties::~OAIWorkspaceProperties() {}

void OAIWorkspaceProperties::initializeModel() {

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_portal_url_isSet = false;
    m_portal_url_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_retention_in_days_isSet = false;
    m_retention_in_days_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIWorkspaceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceProperties::fromJsonObject(QJsonObject json) {

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_portal_url_isValid = ::OpenAPI::fromJsonValue(m_portal_url, json[QString("portalUrl")]);
    m_portal_url_isSet = !json[QString("portalUrl")].isNull() && m_portal_url_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_retention_in_days_isValid = ::OpenAPI::fromJsonValue(m_retention_in_days, json[QString("retentionInDays")]);
    m_retention_in_days_isSet = !json[QString("retentionInDays")].isNull() && m_retention_in_days_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIWorkspaceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_portal_url_isSet) {
        obj.insert(QString("portalUrl"), ::OpenAPI::toJsonValue(m_portal_url));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_retention_in_days_isSet) {
        obj.insert(QString("retentionInDays"), ::OpenAPI::toJsonValue(m_retention_in_days));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIWorkspaceProperties::getCustomerId() const {
    return m_customer_id;
}
void OAIWorkspaceProperties::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIWorkspaceProperties::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIWorkspaceProperties::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIWorkspaceProperties::getPortalUrl() const {
    return m_portal_url;
}
void OAIWorkspaceProperties::setPortalUrl(const QString &portal_url) {
    m_portal_url = portal_url;
    m_portal_url_isSet = true;
}

bool OAIWorkspaceProperties::is_portal_url_Set() const{
    return m_portal_url_isSet;
}

bool OAIWorkspaceProperties::is_portal_url_Valid() const{
    return m_portal_url_isValid;
}

QString OAIWorkspaceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIWorkspaceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIWorkspaceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIWorkspaceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

qint32 OAIWorkspaceProperties::getRetentionInDays() const {
    return m_retention_in_days;
}
void OAIWorkspaceProperties::setRetentionInDays(const qint32 &retention_in_days) {
    m_retention_in_days = retention_in_days;
    m_retention_in_days_isSet = true;
}

bool OAIWorkspaceProperties::is_retention_in_days_Set() const{
    return m_retention_in_days_isSet;
}

bool OAIWorkspaceProperties::is_retention_in_days_Valid() const{
    return m_retention_in_days_isValid;
}

OAISku OAIWorkspaceProperties::getSku() const {
    return m_sku;
}
void OAIWorkspaceProperties::setSku(const OAISku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIWorkspaceProperties::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIWorkspaceProperties::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIWorkspaceProperties::getSource() const {
    return m_source;
}
void OAIWorkspaceProperties::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIWorkspaceProperties::is_source_Set() const{
    return m_source_isSet;
}

bool OAIWorkspaceProperties::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIWorkspaceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portal_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
