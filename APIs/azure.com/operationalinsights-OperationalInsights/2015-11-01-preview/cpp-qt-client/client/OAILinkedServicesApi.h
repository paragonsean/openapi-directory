/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2015-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILinkedServicesApi_H
#define OAI_OAILinkedServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILinkedService.h"
#include "OAILinkedServiceListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILinkedServicesApi : public QObject {
    Q_OBJECT

public:
    OAILinkedServicesApi(const int timeOut = 0);
    ~OAILinkedServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  linked_service_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAILinkedService [required]
    */
    virtual void linkedServicesCreateOrUpdate(const QString &resource_group_name, const QString &workspace_name, const QString &linked_service_name, const QString &subscription_id, const QString &api_version, const OAILinkedService &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  linked_service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void linkedServicesDelete(const QString &resource_group_name, const QString &workspace_name, const QString &linked_service_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  linked_service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void linkedServicesGet(const QString &resource_group_name, const QString &workspace_name, const QString &linked_service_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void linkedServicesListByWorkspace(const QString &resource_group_name, const QString &workspace_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void linkedServicesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void linkedServicesDeleteCallback(OAIHttpRequestWorker *worker);
    void linkedServicesGetCallback(OAIHttpRequestWorker *worker);
    void linkedServicesListByWorkspaceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void linkedServicesCreateOrUpdateSignal(OAILinkedService summary);
    void linkedServicesDeleteSignal();
    void linkedServicesGetSignal(OAILinkedService summary);
    void linkedServicesListByWorkspaceSignal(OAILinkedServiceListResult summary);


    void linkedServicesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAILinkedService summary);
    void linkedServicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void linkedServicesGetSignalFull(OAIHttpRequestWorker *worker, OAILinkedService summary);
    void linkedServicesListByWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAILinkedServiceListResult summary);

    Q_DECL_DEPRECATED_X("Use linkedServicesCreateOrUpdateSignalError() instead")
    void linkedServicesCreateOrUpdateSignalE(OAILinkedService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServicesCreateOrUpdateSignalError(OAILinkedService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServicesDeleteSignalError() instead")
    void linkedServicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServicesGetSignalError() instead")
    void linkedServicesGetSignalE(OAILinkedService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServicesGetSignalError(OAILinkedService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServicesListByWorkspaceSignalError() instead")
    void linkedServicesListByWorkspaceSignalE(OAILinkedServiceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServicesListByWorkspaceSignalError(OAILinkedServiceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use linkedServicesCreateOrUpdateSignalErrorFull() instead")
    void linkedServicesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServicesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServicesDeleteSignalErrorFull() instead")
    void linkedServicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServicesGetSignalErrorFull() instead")
    void linkedServicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServicesListByWorkspaceSignalErrorFull() instead")
    void linkedServicesListByWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServicesListByWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
