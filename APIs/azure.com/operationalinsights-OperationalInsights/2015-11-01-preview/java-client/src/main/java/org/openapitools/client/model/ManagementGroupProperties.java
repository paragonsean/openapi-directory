/*
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2015-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Management group properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:05.541204-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagementGroupProperties {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DATA_RECEIVED = "dataReceived";
  @SerializedName(SERIALIZED_NAME_DATA_RECEIVED)
  private OffsetDateTime dataReceived;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_GATEWAY = "isGateway";
  @SerializedName(SERIALIZED_NAME_IS_GATEWAY)
  private Boolean isGateway;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVER_COUNT = "serverCount";
  @SerializedName(SERIALIZED_NAME_SERVER_COUNT)
  private Integer serverCount;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ManagementGroupProperties() {
  }

  public ManagementGroupProperties created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * The datetime that the management group was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ManagementGroupProperties dataReceived(OffsetDateTime dataReceived) {
    this.dataReceived = dataReceived;
    return this;
  }

  /**
   * The last datetime that the management group received data.
   * @return dataReceived
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDataReceived() {
    return dataReceived;
  }

  public void setDataReceived(OffsetDateTime dataReceived) {
    this.dataReceived = dataReceived;
  }


  public ManagementGroupProperties id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID of the management group.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ManagementGroupProperties isGateway(Boolean isGateway) {
    this.isGateway = isGateway;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the management group is a gateway.
   * @return isGateway
   */
  @javax.annotation.Nullable
  public Boolean getIsGateway() {
    return isGateway;
  }

  public void setIsGateway(Boolean isGateway) {
    this.isGateway = isGateway;
  }


  public ManagementGroupProperties name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the management group.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ManagementGroupProperties serverCount(Integer serverCount) {
    this.serverCount = serverCount;
    return this;
  }

  /**
   * The number of servers connected to the management group.
   * @return serverCount
   */
  @javax.annotation.Nullable
  public Integer getServerCount() {
    return serverCount;
  }

  public void setServerCount(Integer serverCount) {
    this.serverCount = serverCount;
  }


  public ManagementGroupProperties sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * The SKU of System Center that is managing the management group.
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public ManagementGroupProperties version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version of System Center that is managing the management group.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagementGroupProperties managementGroupProperties = (ManagementGroupProperties) o;
    return Objects.equals(this.created, managementGroupProperties.created) &&
        Objects.equals(this.dataReceived, managementGroupProperties.dataReceived) &&
        Objects.equals(this.id, managementGroupProperties.id) &&
        Objects.equals(this.isGateway, managementGroupProperties.isGateway) &&
        Objects.equals(this.name, managementGroupProperties.name) &&
        Objects.equals(this.serverCount, managementGroupProperties.serverCount) &&
        Objects.equals(this.sku, managementGroupProperties.sku) &&
        Objects.equals(this.version, managementGroupProperties.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, dataReceived, id, isGateway, name, serverCount, sku, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagementGroupProperties {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    dataReceived: ").append(toIndentedString(dataReceived)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isGateway: ").append(toIndentedString(isGateway)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serverCount: ").append(toIndentedString(serverCount)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("dataReceived");
    openapiFields.add("id");
    openapiFields.add("isGateway");
    openapiFields.add("name");
    openapiFields.add("serverCount");
    openapiFields.add("sku");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagementGroupProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagementGroupProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagementGroupProperties is not found in the empty JSON string", ManagementGroupProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagementGroupProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagementGroupProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagementGroupProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagementGroupProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagementGroupProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagementGroupProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagementGroupProperties>() {
           @Override
           public void write(JsonWriter out, ManagementGroupProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagementGroupProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagementGroupProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagementGroupProperties
   * @throws IOException if the JSON string is invalid with respect to ManagementGroupProperties
   */
  public static ManagementGroupProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagementGroupProperties.class);
  }

  /**
   * Convert an instance of ManagementGroupProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

