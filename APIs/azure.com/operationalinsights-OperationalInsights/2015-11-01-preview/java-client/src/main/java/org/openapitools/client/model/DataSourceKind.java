/*
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2015-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The kind of the DataSource.
 */
@JsonAdapter(DataSourceKind.Adapter.class)
public enum DataSourceKind {
  
  AZURE_ACTIVITY_LOG("AzureActivityLog"),
  
  CHANGE_TRACKING_PATH("ChangeTrackingPath"),
  
  CHANGE_TRACKING_DEFAULT_PATH("ChangeTrackingDefaultPath"),
  
  CHANGE_TRACKING_DEFAULT_REGISTRY("ChangeTrackingDefaultRegistry"),
  
  CHANGE_TRACKING_CUSTOM_REGISTRY("ChangeTrackingCustomRegistry"),
  
  CUSTOM_LOG("CustomLog"),
  
  CUSTOM_LOG_COLLECTION("CustomLogCollection"),
  
  GENERIC_DATA_SOURCE("GenericDataSource"),
  
  IIS_LOGS("IISLogs"),
  
  LINUX_PERFORMANCE_OBJECT("LinuxPerformanceObject"),
  
  LINUX_PERFORMANCE_COLLECTION("LinuxPerformanceCollection"),
  
  LINUX_SYSLOG("LinuxSyslog"),
  
  LINUX_SYSLOG_COLLECTION("LinuxSyslogCollection"),
  
  WINDOWS_EVENT("WindowsEvent"),
  
  WINDOWS_PERFORMANCE_COUNTER("WindowsPerformanceCounter");

  private String value;

  DataSourceKind(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DataSourceKind fromValue(String value) {
    for (DataSourceKind b : DataSourceKind.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DataSourceKind> {
    @Override
    public void write(final JsonWriter jsonWriter, final DataSourceKind enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DataSourceKind read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DataSourceKind.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DataSourceKind.fromValue(value);
  }
}

