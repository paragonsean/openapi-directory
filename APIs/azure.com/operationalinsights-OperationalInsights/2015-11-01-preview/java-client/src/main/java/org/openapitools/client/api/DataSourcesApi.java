/*
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2015-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataSource;
import org.openapitools.client.model.DataSourceListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataSourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataSourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataSourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dataSourcesCreateOrUpdate
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics Workspace that will contain the datasource (required)
     * @param dataSourceName The name of the datasource resource. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The parameters required to create or update a datasource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created response definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesCreateOrUpdateCall(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId, DataSource parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources/{dataSourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "dataSourceName" + "}", localVarApiClient.escapeString(dataSourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId, DataSource parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataSourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling dataSourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'dataSourceName' is set
        if (dataSourceName == null) {
            throw new ApiException("Missing the required parameter 'dataSourceName' when calling dataSourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataSourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling dataSourcesCreateOrUpdate(Async)");
        }

        return dataSourcesCreateOrUpdateCall(resourceGroupName, workspaceName, dataSourceName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Create or update a data source.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics Workspace that will contain the datasource (required)
     * @param dataSourceName The name of the datasource resource. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The parameters required to create or update a datasource. (required)
     * @return DataSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created response definition. </td><td>  -  </td></tr>
     </table>
     */
    public DataSource dataSourcesCreateOrUpdate(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId, DataSource parameters) throws ApiException {
        ApiResponse<DataSource> localVarResp = dataSourcesCreateOrUpdateWithHttpInfo(resourceGroupName, workspaceName, dataSourceName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a data source.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics Workspace that will contain the datasource (required)
     * @param dataSourceName The name of the datasource resource. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The parameters required to create or update a datasource. (required)
     * @return ApiResponse&lt;DataSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created response definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSource> dataSourcesCreateOrUpdateWithHttpInfo(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId, DataSource parameters) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesCreateOrUpdateValidateBeforeCall(resourceGroupName, workspaceName, dataSourceName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<DataSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a data source.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics Workspace that will contain the datasource (required)
     * @param dataSourceName The name of the datasource resource. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The parameters required to create or update a datasource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created response definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesCreateOrUpdateAsync(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId, DataSource parameters, final ApiCallback<DataSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesCreateOrUpdateValidateBeforeCall(resourceGroupName, workspaceName, dataSourceName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<DataSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesDelete
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics Workspace that contains the datasource. (required)
     * @param dataSourceName Name of the datasource. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent response definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesDeleteCall(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources/{dataSourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "dataSourceName" + "}", localVarApiClient.escapeString(dataSourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesDeleteValidateBeforeCall(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataSourcesDelete(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling dataSourcesDelete(Async)");
        }

        // verify the required parameter 'dataSourceName' is set
        if (dataSourceName == null) {
            throw new ApiException("Missing the required parameter 'dataSourceName' when calling dataSourcesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataSourcesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSourcesDelete(Async)");
        }

        return dataSourcesDeleteCall(resourceGroupName, workspaceName, dataSourceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a data source instance.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics Workspace that contains the datasource. (required)
     * @param dataSourceName Name of the datasource. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent response definition. </td><td>  -  </td></tr>
     </table>
     */
    public void dataSourcesDelete(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId) throws ApiException {
        dataSourcesDeleteWithHttpInfo(resourceGroupName, workspaceName, dataSourceName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a data source instance.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics Workspace that contains the datasource. (required)
     * @param dataSourceName Name of the datasource. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent response definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataSourcesDeleteWithHttpInfo(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesDeleteValidateBeforeCall(resourceGroupName, workspaceName, dataSourceName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a data source instance.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics Workspace that contains the datasource. (required)
     * @param dataSourceName Name of the datasource. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent response definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesDeleteAsync(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesDeleteValidateBeforeCall(resourceGroupName, workspaceName, dataSourceName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesGet
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics Workspace that contains the datasource. (required)
     * @param dataSourceName Name of the datasource (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesGetCall(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources/{dataSourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "dataSourceName" + "}", localVarApiClient.escapeString(dataSourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesGetValidateBeforeCall(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataSourcesGet(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling dataSourcesGet(Async)");
        }

        // verify the required parameter 'dataSourceName' is set
        if (dataSourceName == null) {
            throw new ApiException("Missing the required parameter 'dataSourceName' when calling dataSourcesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataSourcesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSourcesGet(Async)");
        }

        return dataSourcesGetCall(resourceGroupName, workspaceName, dataSourceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a datasource instance.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics Workspace that contains the datasource. (required)
     * @param dataSourceName Name of the datasource (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return DataSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public DataSource dataSourcesGet(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<DataSource> localVarResp = dataSourcesGetWithHttpInfo(resourceGroupName, workspaceName, dataSourceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a datasource instance.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics Workspace that contains the datasource. (required)
     * @param dataSourceName Name of the datasource (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;DataSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSource> dataSourcesGetWithHttpInfo(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesGetValidateBeforeCall(resourceGroupName, workspaceName, dataSourceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<DataSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a datasource instance.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics Workspace that contains the datasource. (required)
     * @param dataSourceName Name of the datasource (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesGetAsync(String resourceGroupName, String workspaceName, String dataSourceName, String apiVersion, String subscriptionId, final ApiCallback<DataSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesGetValidateBeforeCall(resourceGroupName, workspaceName, dataSourceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<DataSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesListByWorkspace
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName The workspace that contains the data sources. (required)
     * @param $filter The filter to apply on the operation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $skiptoken Starting point of the collection of data source instances. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesListByWorkspaceCall(String resourceGroupName, String workspaceName, String $filter, String apiVersion, String subscriptionId, String $skiptoken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($skiptoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skiptoken", $skiptoken));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesListByWorkspaceValidateBeforeCall(String resourceGroupName, String workspaceName, String $filter, String apiVersion, String subscriptionId, String $skiptoken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataSourcesListByWorkspace(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling dataSourcesListByWorkspace(Async)");
        }

        // verify the required parameter '$filter' is set
        if ($filter == null) {
            throw new ApiException("Missing the required parameter '$filter' when calling dataSourcesListByWorkspace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataSourcesListByWorkspace(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSourcesListByWorkspace(Async)");
        }

        return dataSourcesListByWorkspaceCall(resourceGroupName, workspaceName, $filter, apiVersion, subscriptionId, $skiptoken, _callback);

    }

    /**
     * 
     * Gets the first page of data source instances in a workspace with the link to the next page.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName The workspace that contains the data sources. (required)
     * @param $filter The filter to apply on the operation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $skiptoken Starting point of the collection of data source instances. (optional)
     * @return DataSourceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public DataSourceListResult dataSourcesListByWorkspace(String resourceGroupName, String workspaceName, String $filter, String apiVersion, String subscriptionId, String $skiptoken) throws ApiException {
        ApiResponse<DataSourceListResult> localVarResp = dataSourcesListByWorkspaceWithHttpInfo(resourceGroupName, workspaceName, $filter, apiVersion, subscriptionId, $skiptoken);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the first page of data source instances in a workspace with the link to the next page.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName The workspace that contains the data sources. (required)
     * @param $filter The filter to apply on the operation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $skiptoken Starting point of the collection of data source instances. (optional)
     * @return ApiResponse&lt;DataSourceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSourceListResult> dataSourcesListByWorkspaceWithHttpInfo(String resourceGroupName, String workspaceName, String $filter, String apiVersion, String subscriptionId, String $skiptoken) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesListByWorkspaceValidateBeforeCall(resourceGroupName, workspaceName, $filter, apiVersion, subscriptionId, $skiptoken, null);
        Type localVarReturnType = new TypeToken<DataSourceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the first page of data source instances in a workspace with the link to the next page.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName The workspace that contains the data sources. (required)
     * @param $filter The filter to apply on the operation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $skiptoken Starting point of the collection of data source instances. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesListByWorkspaceAsync(String resourceGroupName, String workspaceName, String $filter, String apiVersion, String subscriptionId, String $skiptoken, final ApiCallback<DataSourceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesListByWorkspaceValidateBeforeCall(resourceGroupName, workspaceName, $filter, apiVersion, subscriptionId, $skiptoken, _callback);
        Type localVarReturnType = new TypeToken<DataSourceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
