/*
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2015-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.IntelligencePack;
import org.openapitools.client.model.SharedKeys;
import org.openapitools.client.model.Workspace;
import org.openapitools.client.model.WorkspaceListManagementGroupsResult;
import org.openapitools.client.model.WorkspaceListResult;
import org.openapitools.client.model.WorkspaceListUsagesResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkspacesApi
 */
@Disabled
public class WorkspacesApiTest {

    private final WorkspacesApi api = new WorkspacesApi();

    /**
     * Create or update a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String workspaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Workspace parameters = null;
        Workspace response = api.workspacesCreateOrUpdate(resourceGroupName, workspaceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a workspace instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String workspaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.workspacesDelete(resourceGroupName, workspaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Disables an intelligence pack for a given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesDisableIntelligencePackTest() throws ApiException {
        String resourceGroupName = null;
        String workspaceName = null;
        String intelligencePackName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.workspacesDisableIntelligencePack(resourceGroupName, workspaceName, intelligencePackName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Enables an intelligence pack for a given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesEnableIntelligencePackTest() throws ApiException {
        String resourceGroupName = null;
        String workspaceName = null;
        String intelligencePackName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.workspacesEnableIntelligencePack(resourceGroupName, workspaceName, intelligencePackName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a workspace instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesGetTest() throws ApiException {
        String resourceGroupName = null;
        String workspaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Workspace response = api.workspacesGet(resourceGroupName, workspaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the shared keys for a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesGetSharedKeysTest() throws ApiException {
        String resourceGroupName = null;
        String workspaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedKeys response = api.workspacesGetSharedKeys(resourceGroupName, workspaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the workspaces in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        WorkspaceListResult response = api.workspacesList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets workspaces in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        WorkspaceListResult response = api.workspacesListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all the intelligence packs possible and whether they are enabled or disabled for a given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesListIntelligencePacksTest() throws ApiException {
        String resourceGroupName = null;
        String workspaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        List<IntelligencePack> response = api.workspacesListIntelligencePacks(resourceGroupName, workspaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a list of management groups connected to a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesListManagementGroupsTest() throws ApiException {
        String resourceGroupName = null;
        String workspaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        WorkspaceListManagementGroupsResult response = api.workspacesListManagementGroups(resourceGroupName, workspaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a list of usage metrics for a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesListUsagesTest() throws ApiException {
        String resourceGroupName = null;
        String workspaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        WorkspaceListUsagesResult response = api.workspacesListUsages(resourceGroupName, workspaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Updates a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String workspaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Workspace parameters = null;
        Workspace response = api.workspacesUpdate(resourceGroupName, workspaceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
