# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.storage_account import StorageAccount
from openapi_server.models.storage_insight_status import StorageInsightStatus
from openapi_server import util


class StorageInsightProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, containers: List[str]=None, status: StorageInsightStatus=None, storage_account: StorageAccount=None, tables: List[str]=None):
        """StorageInsightProperties - a model defined in OpenAPI

        :param containers: The containers of this StorageInsightProperties.
        :param status: The status of this StorageInsightProperties.
        :param storage_account: The storage_account of this StorageInsightProperties.
        :param tables: The tables of this StorageInsightProperties.
        """
        self.openapi_types = {
            'containers': List[str],
            'status': StorageInsightStatus,
            'storage_account': StorageAccount,
            'tables': List[str]
        }

        self.attribute_map = {
            'containers': 'containers',
            'status': 'status',
            'storage_account': 'storageAccount',
            'tables': 'tables'
        }

        self._containers = containers
        self._status = status
        self._storage_account = storage_account
        self._tables = tables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageInsightProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageInsightProperties of this StorageInsightProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def containers(self):
        """Gets the containers of this StorageInsightProperties.

        The names of the blob containers that the workspace should read

        :return: The containers of this StorageInsightProperties.
        :rtype: List[str]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this StorageInsightProperties.

        The names of the blob containers that the workspace should read

        :param containers: The containers of this StorageInsightProperties.
        :type containers: List[str]
        """

        self._containers = containers

    @property
    def status(self):
        """Gets the status of this StorageInsightProperties.


        :return: The status of this StorageInsightProperties.
        :rtype: StorageInsightStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StorageInsightProperties.


        :param status: The status of this StorageInsightProperties.
        :type status: StorageInsightStatus
        """

        self._status = status

    @property
    def storage_account(self):
        """Gets the storage_account of this StorageInsightProperties.


        :return: The storage_account of this StorageInsightProperties.
        :rtype: StorageAccount
        """
        return self._storage_account

    @storage_account.setter
    def storage_account(self, storage_account):
        """Sets the storage_account of this StorageInsightProperties.


        :param storage_account: The storage_account of this StorageInsightProperties.
        :type storage_account: StorageAccount
        """
        if storage_account is None:
            raise ValueError("Invalid value for `storage_account`, must not be `None`")

        self._storage_account = storage_account

    @property
    def tables(self):
        """Gets the tables of this StorageInsightProperties.

        The names of the Azure tables that the workspace should read

        :return: The tables of this StorageInsightProperties.
        :rtype: List[str]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this StorageInsightProperties.

        The names of the Azure tables that the workspace should read

        :param tables: The tables of this StorageInsightProperties.
        :type tables: List[str]
        """

        self._tables = tables
