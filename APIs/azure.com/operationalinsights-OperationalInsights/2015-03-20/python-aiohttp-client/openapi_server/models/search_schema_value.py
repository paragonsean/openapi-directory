# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchSchemaValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, facet: bool=None, indexed: bool=None, name: str=None, owner_type: List[str]=None, stored: bool=None, type: str=None):
        """SearchSchemaValue - a model defined in OpenAPI

        :param display_name: The display_name of this SearchSchemaValue.
        :param facet: The facet of this SearchSchemaValue.
        :param indexed: The indexed of this SearchSchemaValue.
        :param name: The name of this SearchSchemaValue.
        :param owner_type: The owner_type of this SearchSchemaValue.
        :param stored: The stored of this SearchSchemaValue.
        :param type: The type of this SearchSchemaValue.
        """
        self.openapi_types = {
            'display_name': str,
            'facet': bool,
            'indexed': bool,
            'name': str,
            'owner_type': List[str],
            'stored': bool,
            'type': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'facet': 'facet',
            'indexed': 'indexed',
            'name': 'name',
            'owner_type': 'ownerType',
            'stored': 'stored',
            'type': 'type'
        }

        self._display_name = display_name
        self._facet = facet
        self._indexed = indexed
        self._name = name
        self._owner_type = owner_type
        self._stored = stored
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchSchemaValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchSchemaValue of this SearchSchemaValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this SearchSchemaValue.

        The display name of the schema.

        :return: The display_name of this SearchSchemaValue.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SearchSchemaValue.

        The display name of the schema.

        :param display_name: The display_name of this SearchSchemaValue.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def facet(self):
        """Gets the facet of this SearchSchemaValue.

        The boolean that indicates whether or not the field is a facet.

        :return: The facet of this SearchSchemaValue.
        :rtype: bool
        """
        return self._facet

    @facet.setter
    def facet(self, facet):
        """Sets the facet of this SearchSchemaValue.

        The boolean that indicates whether or not the field is a facet.

        :param facet: The facet of this SearchSchemaValue.
        :type facet: bool
        """
        if facet is None:
            raise ValueError("Invalid value for `facet`, must not be `None`")

        self._facet = facet

    @property
    def indexed(self):
        """Gets the indexed of this SearchSchemaValue.

        The boolean that indicates the field is searchable as free text.

        :return: The indexed of this SearchSchemaValue.
        :rtype: bool
        """
        return self._indexed

    @indexed.setter
    def indexed(self, indexed):
        """Sets the indexed of this SearchSchemaValue.

        The boolean that indicates the field is searchable as free text.

        :param indexed: The indexed of this SearchSchemaValue.
        :type indexed: bool
        """
        if indexed is None:
            raise ValueError("Invalid value for `indexed`, must not be `None`")

        self._indexed = indexed

    @property
    def name(self):
        """Gets the name of this SearchSchemaValue.

        The name of the schema.

        :return: The name of this SearchSchemaValue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchSchemaValue.

        The name of the schema.

        :param name: The name of this SearchSchemaValue.
        :type name: str
        """

        self._name = name

    @property
    def owner_type(self):
        """Gets the owner_type of this SearchSchemaValue.

        The array of workflows containing the field.

        :return: The owner_type of this SearchSchemaValue.
        :rtype: List[str]
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type):
        """Sets the owner_type of this SearchSchemaValue.

        The array of workflows containing the field.

        :param owner_type: The owner_type of this SearchSchemaValue.
        :type owner_type: List[str]
        """

        self._owner_type = owner_type

    @property
    def stored(self):
        """Gets the stored of this SearchSchemaValue.

        The boolean that indicates whether or not the field is stored.

        :return: The stored of this SearchSchemaValue.
        :rtype: bool
        """
        return self._stored

    @stored.setter
    def stored(self, stored):
        """Sets the stored of this SearchSchemaValue.

        The boolean that indicates whether or not the field is stored.

        :param stored: The stored of this SearchSchemaValue.
        :type stored: bool
        """
        if stored is None:
            raise ValueError("Invalid value for `stored`, must not be `None`")

        self._stored = stored

    @property
    def type(self):
        """Gets the type of this SearchSchemaValue.

        The type.

        :return: The type of this SearchSchemaValue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchSchemaValue.

        The type.

        :param type: The type of this SearchSchemaValue.
        :type type: str
        """

        self._type = type
