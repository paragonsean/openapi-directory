# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchSort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, order: str=None):
        """SearchSort - a model defined in OpenAPI

        :param name: The name of this SearchSort.
        :param order: The order of this SearchSort.
        """
        self.openapi_types = {
            'name': str,
            'order': str
        }

        self.attribute_map = {
            'name': 'name',
            'order': 'order'
        }

        self._name = name
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchSort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchSort of this SearchSort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SearchSort.

        The name of the field the search query is sorted on.

        :return: The name of this SearchSort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchSort.

        The name of the field the search query is sorted on.

        :param name: The name of this SearchSort.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this SearchSort.

        The sort order of the search.

        :return: The order of this SearchSort.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SearchSort.

        The sort order of the search.

        :param order: The order of this SearchSort.
        :type order: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order
