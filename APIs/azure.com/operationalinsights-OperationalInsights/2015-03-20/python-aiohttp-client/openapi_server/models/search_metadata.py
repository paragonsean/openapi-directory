# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.core_summary import CoreSummary
from openapi_server.models.search_metadata_schema import SearchMetadataSchema
from openapi_server.models.search_sort import SearchSort
from openapi_server import util


class SearchMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregated_grouping_fields: str=None, aggregated_value_field: str=None, core_summaries: List[CoreSummary]=None, e_tag: str=None, id: str=None, last_updated: datetime=None, max: int=None, request_id: str=None, request_time: int=None, result_type: str=None, _schema: SearchMetadataSchema=None, sort: List[SearchSort]=None, start_time: datetime=None, status: str=None, sum: int=None, top: int=None, total: int=None):
        """SearchMetadata - a model defined in OpenAPI

        :param aggregated_grouping_fields: The aggregated_grouping_fields of this SearchMetadata.
        :param aggregated_value_field: The aggregated_value_field of this SearchMetadata.
        :param core_summaries: The core_summaries of this SearchMetadata.
        :param e_tag: The e_tag of this SearchMetadata.
        :param id: The id of this SearchMetadata.
        :param last_updated: The last_updated of this SearchMetadata.
        :param max: The max of this SearchMetadata.
        :param request_id: The request_id of this SearchMetadata.
        :param request_time: The request_time of this SearchMetadata.
        :param result_type: The result_type of this SearchMetadata.
        :param _schema: The _schema of this SearchMetadata.
        :param sort: The sort of this SearchMetadata.
        :param start_time: The start_time of this SearchMetadata.
        :param status: The status of this SearchMetadata.
        :param sum: The sum of this SearchMetadata.
        :param top: The top of this SearchMetadata.
        :param total: The total of this SearchMetadata.
        """
        self.openapi_types = {
            'aggregated_grouping_fields': str,
            'aggregated_value_field': str,
            'core_summaries': List[CoreSummary],
            'e_tag': str,
            'id': str,
            'last_updated': datetime,
            'max': int,
            'request_id': str,
            'request_time': int,
            'result_type': str,
            '_schema': SearchMetadataSchema,
            'sort': List[SearchSort],
            'start_time': datetime,
            'status': str,
            'sum': int,
            'top': int,
            'total': int
        }

        self.attribute_map = {
            'aggregated_grouping_fields': 'aggregatedGroupingFields',
            'aggregated_value_field': 'aggregatedValueField',
            'core_summaries': 'coreSummaries',
            'e_tag': 'eTag',
            'id': 'id',
            'last_updated': 'lastUpdated',
            'max': 'max',
            'request_id': 'requestId',
            'request_time': 'requestTime',
            'result_type': 'resultType',
            '_schema': 'schema',
            'sort': 'sort',
            'start_time': 'startTime',
            'status': 'status',
            'sum': 'sum',
            'top': 'top',
            'total': 'total'
        }

        self._aggregated_grouping_fields = aggregated_grouping_fields
        self._aggregated_value_field = aggregated_value_field
        self._core_summaries = core_summaries
        self._e_tag = e_tag
        self._id = id
        self._last_updated = last_updated
        self._max = max
        self._request_id = request_id
        self._request_time = request_time
        self._result_type = result_type
        self.__schema = _schema
        self._sort = sort
        self._start_time = start_time
        self._status = status
        self._sum = sum
        self._top = top
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchMetadata of this SearchMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregated_grouping_fields(self):
        """Gets the aggregated_grouping_fields of this SearchMetadata.

        The aggregated grouping fields.

        :return: The aggregated_grouping_fields of this SearchMetadata.
        :rtype: str
        """
        return self._aggregated_grouping_fields

    @aggregated_grouping_fields.setter
    def aggregated_grouping_fields(self, aggregated_grouping_fields):
        """Sets the aggregated_grouping_fields of this SearchMetadata.

        The aggregated grouping fields.

        :param aggregated_grouping_fields: The aggregated_grouping_fields of this SearchMetadata.
        :type aggregated_grouping_fields: str
        """

        self._aggregated_grouping_fields = aggregated_grouping_fields

    @property
    def aggregated_value_field(self):
        """Gets the aggregated_value_field of this SearchMetadata.

        The aggregated value field.

        :return: The aggregated_value_field of this SearchMetadata.
        :rtype: str
        """
        return self._aggregated_value_field

    @aggregated_value_field.setter
    def aggregated_value_field(self, aggregated_value_field):
        """Sets the aggregated_value_field of this SearchMetadata.

        The aggregated value field.

        :param aggregated_value_field: The aggregated_value_field of this SearchMetadata.
        :type aggregated_value_field: str
        """

        self._aggregated_value_field = aggregated_value_field

    @property
    def core_summaries(self):
        """Gets the core_summaries of this SearchMetadata.

        The core summaries.

        :return: The core_summaries of this SearchMetadata.
        :rtype: List[CoreSummary]
        """
        return self._core_summaries

    @core_summaries.setter
    def core_summaries(self, core_summaries):
        """Sets the core_summaries of this SearchMetadata.

        The core summaries.

        :param core_summaries: The core_summaries of this SearchMetadata.
        :type core_summaries: List[CoreSummary]
        """

        self._core_summaries = core_summaries

    @property
    def e_tag(self):
        """Gets the e_tag of this SearchMetadata.

        The ETag of the search results.

        :return: The e_tag of this SearchMetadata.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this SearchMetadata.

        The ETag of the search results.

        :param e_tag: The e_tag of this SearchMetadata.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def id(self):
        """Gets the id of this SearchMetadata.

        The id of the search results request.

        :return: The id of this SearchMetadata.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchMetadata.

        The id of the search results request.

        :param id: The id of this SearchMetadata.
        :type id: str
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this SearchMetadata.

        The time of last update.

        :return: The last_updated of this SearchMetadata.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this SearchMetadata.

        The time of last update.

        :param last_updated: The last_updated of this SearchMetadata.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def max(self):
        """Gets the max of this SearchMetadata.

        The max of all aggregates returned in the result set.

        :return: The max of this SearchMetadata.
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this SearchMetadata.

        The max of all aggregates returned in the result set.

        :param max: The max of this SearchMetadata.
        :type max: int
        """

        self._max = max

    @property
    def request_id(self):
        """Gets the request_id of this SearchMetadata.

        The request id of the search.

        :return: The request_id of this SearchMetadata.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this SearchMetadata.

        The request id of the search.

        :param request_id: The request_id of this SearchMetadata.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def request_time(self):
        """Gets the request_time of this SearchMetadata.

        The request time.

        :return: The request_time of this SearchMetadata.
        :rtype: int
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """Sets the request_time of this SearchMetadata.

        The request time.

        :param request_time: The request_time of this SearchMetadata.
        :type request_time: int
        """

        self._request_time = request_time

    @property
    def result_type(self):
        """Gets the result_type of this SearchMetadata.

        The search result type.

        :return: The result_type of this SearchMetadata.
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this SearchMetadata.

        The search result type.

        :param result_type: The result_type of this SearchMetadata.
        :type result_type: str
        """

        self._result_type = result_type

    @property
    def _schema(self):
        """Gets the _schema of this SearchMetadata.


        :return: The _schema of this SearchMetadata.
        :rtype: SearchMetadataSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this SearchMetadata.


        :param _schema: The _schema of this SearchMetadata.
        :type _schema: SearchMetadataSchema
        """

        self.__schema = _schema

    @property
    def sort(self):
        """Gets the sort of this SearchMetadata.

        How the results are sorted.

        :return: The sort of this SearchMetadata.
        :rtype: List[SearchSort]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SearchMetadata.

        How the results are sorted.

        :param sort: The sort of this SearchMetadata.
        :type sort: List[SearchSort]
        """

        self._sort = sort

    @property
    def start_time(self):
        """Gets the start_time of this SearchMetadata.

        The start time for the search.

        :return: The start_time of this SearchMetadata.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SearchMetadata.

        The start time for the search.

        :param start_time: The start_time of this SearchMetadata.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this SearchMetadata.

        The status of the search results.

        :return: The status of this SearchMetadata.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SearchMetadata.

        The status of the search results.

        :param status: The status of this SearchMetadata.
        :type status: str
        """

        self._status = status

    @property
    def sum(self):
        """Gets the sum of this SearchMetadata.

        The sum of all aggregates returned in the result set.

        :return: The sum of this SearchMetadata.
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this SearchMetadata.

        The sum of all aggregates returned in the result set.

        :param sum: The sum of this SearchMetadata.
        :type sum: int
        """

        self._sum = sum

    @property
    def top(self):
        """Gets the top of this SearchMetadata.

        The number of top search results.

        :return: The top of this SearchMetadata.
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this SearchMetadata.

        The number of top search results.

        :param top: The top of this SearchMetadata.
        :type top: int
        """

        self._top = top

    @property
    def total(self):
        """Gets the total of this SearchMetadata.

        The total number of search results.

        :return: The total of this SearchMetadata.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SearchMetadata.

        The total number of search results.

        :param total: The total of this SearchMetadata.
        :type total: int
        """

        self._total = total
