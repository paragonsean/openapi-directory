# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
from openapi_server import util


class SavedSearchProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, display_name: str=None, query: str=None, tags: List[Tag]=None, version: int=None):
        """SavedSearchProperties - a model defined in OpenAPI

        :param category: The category of this SavedSearchProperties.
        :param display_name: The display_name of this SavedSearchProperties.
        :param query: The query of this SavedSearchProperties.
        :param tags: The tags of this SavedSearchProperties.
        :param version: The version of this SavedSearchProperties.
        """
        self.openapi_types = {
            'category': str,
            'display_name': str,
            'query': str,
            'tags': List[Tag],
            'version': int
        }

        self.attribute_map = {
            'category': 'category',
            'display_name': 'displayName',
            'query': 'query',
            'tags': 'tags',
            'version': 'version'
        }

        self._category = category
        self._display_name = display_name
        self._query = query
        self._tags = tags
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SavedSearchProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SavedSearchProperties of this SavedSearchProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this SavedSearchProperties.

        The category of the saved search. This helps the user to find a saved search faster. 

        :return: The category of this SavedSearchProperties.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SavedSearchProperties.

        The category of the saved search. This helps the user to find a saved search faster. 

        :param category: The category of this SavedSearchProperties.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def display_name(self):
        """Gets the display_name of this SavedSearchProperties.

        Saved search display name.

        :return: The display_name of this SavedSearchProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SavedSearchProperties.

        Saved search display name.

        :param display_name: The display_name of this SavedSearchProperties.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def query(self):
        """Gets the query of this SavedSearchProperties.

        The query expression for the saved search. Please see https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-search-reference for reference.

        :return: The query of this SavedSearchProperties.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SavedSearchProperties.

        The query expression for the saved search. Please see https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-search-reference for reference.

        :param query: The query of this SavedSearchProperties.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def tags(self):
        """Gets the tags of this SavedSearchProperties.

        The tags attached to the saved search.

        :return: The tags of this SavedSearchProperties.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SavedSearchProperties.

        The tags attached to the saved search.

        :param tags: The tags of this SavedSearchProperties.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def version(self):
        """Gets the version of this SavedSearchProperties.

        The version number of the query language. The current version is 2 and is the default.

        :return: The version of this SavedSearchProperties.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SavedSearchProperties.

        The version number of the query language. The current version is 2 and is the default.

        :param version: The version of this SavedSearchProperties.
        :type version: int
        """
        if version is not None and version > 2:
            raise ValueError("Invalid value for `version`, must be a value less than or equal to `2`")
        if version is not None and version < 1:
            raise ValueError("Invalid value for `version`, must be a value greater than or equal to `1`")

        self._version = version
