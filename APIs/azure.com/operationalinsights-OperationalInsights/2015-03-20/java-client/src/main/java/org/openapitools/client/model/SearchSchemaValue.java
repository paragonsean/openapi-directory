/*
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Value object for schema results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:10.169736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchSchemaValue {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FACET = "facet";
  @SerializedName(SERIALIZED_NAME_FACET)
  private Boolean facet;

  public static final String SERIALIZED_NAME_INDEXED = "indexed";
  @SerializedName(SERIALIZED_NAME_INDEXED)
  private Boolean indexed;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER_TYPE = "ownerType";
  @SerializedName(SERIALIZED_NAME_OWNER_TYPE)
  private List<String> ownerType = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORED = "stored";
  @SerializedName(SERIALIZED_NAME_STORED)
  private Boolean stored;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public SearchSchemaValue() {
  }

  public SearchSchemaValue displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the schema.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public SearchSchemaValue facet(Boolean facet) {
    this.facet = facet;
    return this;
  }

  /**
   * The boolean that indicates whether or not the field is a facet.
   * @return facet
   */
  @javax.annotation.Nonnull
  public Boolean getFacet() {
    return facet;
  }

  public void setFacet(Boolean facet) {
    this.facet = facet;
  }


  public SearchSchemaValue indexed(Boolean indexed) {
    this.indexed = indexed;
    return this;
  }

  /**
   * The boolean that indicates the field is searchable as free text.
   * @return indexed
   */
  @javax.annotation.Nonnull
  public Boolean getIndexed() {
    return indexed;
  }

  public void setIndexed(Boolean indexed) {
    this.indexed = indexed;
  }


  public SearchSchemaValue name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the schema.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SearchSchemaValue ownerType(List<String> ownerType) {
    this.ownerType = ownerType;
    return this;
  }

  public SearchSchemaValue addOwnerTypeItem(String ownerTypeItem) {
    if (this.ownerType == null) {
      this.ownerType = new ArrayList<>();
    }
    this.ownerType.add(ownerTypeItem);
    return this;
  }

  /**
   * The array of workflows containing the field.
   * @return ownerType
   */
  @javax.annotation.Nullable
  public List<String> getOwnerType() {
    return ownerType;
  }

  public void setOwnerType(List<String> ownerType) {
    this.ownerType = ownerType;
  }


  public SearchSchemaValue stored(Boolean stored) {
    this.stored = stored;
    return this;
  }

  /**
   * The boolean that indicates whether or not the field is stored.
   * @return stored
   */
  @javax.annotation.Nonnull
  public Boolean getStored() {
    return stored;
  }

  public void setStored(Boolean stored) {
    this.stored = stored;
  }


  public SearchSchemaValue type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchSchemaValue searchSchemaValue = (SearchSchemaValue) o;
    return Objects.equals(this.displayName, searchSchemaValue.displayName) &&
        Objects.equals(this.facet, searchSchemaValue.facet) &&
        Objects.equals(this.indexed, searchSchemaValue.indexed) &&
        Objects.equals(this.name, searchSchemaValue.name) &&
        Objects.equals(this.ownerType, searchSchemaValue.ownerType) &&
        Objects.equals(this.stored, searchSchemaValue.stored) &&
        Objects.equals(this.type, searchSchemaValue.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, facet, indexed, name, ownerType, stored, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchSchemaValue {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    facet: ").append(toIndentedString(facet)).append("\n");
    sb.append("    indexed: ").append(toIndentedString(indexed)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerType: ").append(toIndentedString(ownerType)).append("\n");
    sb.append("    stored: ").append(toIndentedString(stored)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("facet");
    openapiFields.add("indexed");
    openapiFields.add("name");
    openapiFields.add("ownerType");
    openapiFields.add("stored");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("facet");
    openapiRequiredFields.add("indexed");
    openapiRequiredFields.add("stored");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchSchemaValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchSchemaValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchSchemaValue is not found in the empty JSON string", SearchSchemaValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchSchemaValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchSchemaValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchSchemaValue.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ownerType") != null && !jsonObj.get("ownerType").isJsonNull() && !jsonObj.get("ownerType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerType` to be an array in the JSON string but got `%s`", jsonObj.get("ownerType").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchSchemaValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchSchemaValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchSchemaValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchSchemaValue.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchSchemaValue>() {
           @Override
           public void write(JsonWriter out, SearchSchemaValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchSchemaValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchSchemaValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchSchemaValue
   * @throws IOException if the JSON string is invalid with respect to SearchSchemaValue
   */
  public static SearchSchemaValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchSchemaValue.class);
  }

  /**
   * Convert an instance of SearchSchemaValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

