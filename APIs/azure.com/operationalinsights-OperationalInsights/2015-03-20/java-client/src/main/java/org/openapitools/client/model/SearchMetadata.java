/*
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CoreSummary;
import org.openapitools.client.model.SearchMetadataSchema;
import org.openapitools.client.model.SearchSort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for search results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:10.169736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchMetadata {
  public static final String SERIALIZED_NAME_AGGREGATED_GROUPING_FIELDS = "aggregatedGroupingFields";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_GROUPING_FIELDS)
  private String aggregatedGroupingFields;

  public static final String SERIALIZED_NAME_AGGREGATED_VALUE_FIELD = "aggregatedValueField";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_VALUE_FIELD)
  private String aggregatedValueField;

  public static final String SERIALIZED_NAME_CORE_SUMMARIES = "coreSummaries";
  @SerializedName(SERIALIZED_NAME_CORE_SUMMARIES)
  private List<CoreSummary> coreSummaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_E_TAG = "eTag";
  @SerializedName(SERIALIZED_NAME_E_TAG)
  private String eTag;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Long max;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_REQUEST_TIME = "requestTime";
  @SerializedName(SERIALIZED_NAME_REQUEST_TIME)
  private Long requestTime;

  public static final String SERIALIZED_NAME_RESULT_TYPE = "resultType";
  @SerializedName(SERIALIZED_NAME_RESULT_TYPE)
  private String resultType;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private SearchMetadataSchema schema;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private List<SearchSort> sort = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUM = "sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private Long sum;

  public static final String SERIALIZED_NAME_TOP = "top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private Long top;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Long total;

  public SearchMetadata() {
  }

  public SearchMetadata aggregatedGroupingFields(String aggregatedGroupingFields) {
    this.aggregatedGroupingFields = aggregatedGroupingFields;
    return this;
  }

  /**
   * The aggregated grouping fields.
   * @return aggregatedGroupingFields
   */
  @javax.annotation.Nullable
  public String getAggregatedGroupingFields() {
    return aggregatedGroupingFields;
  }

  public void setAggregatedGroupingFields(String aggregatedGroupingFields) {
    this.aggregatedGroupingFields = aggregatedGroupingFields;
  }


  public SearchMetadata aggregatedValueField(String aggregatedValueField) {
    this.aggregatedValueField = aggregatedValueField;
    return this;
  }

  /**
   * The aggregated value field.
   * @return aggregatedValueField
   */
  @javax.annotation.Nullable
  public String getAggregatedValueField() {
    return aggregatedValueField;
  }

  public void setAggregatedValueField(String aggregatedValueField) {
    this.aggregatedValueField = aggregatedValueField;
  }


  public SearchMetadata coreSummaries(List<CoreSummary> coreSummaries) {
    this.coreSummaries = coreSummaries;
    return this;
  }

  public SearchMetadata addCoreSummariesItem(CoreSummary coreSummariesItem) {
    if (this.coreSummaries == null) {
      this.coreSummaries = new ArrayList<>();
    }
    this.coreSummaries.add(coreSummariesItem);
    return this;
  }

  /**
   * The core summaries.
   * @return coreSummaries
   */
  @javax.annotation.Nullable
  public List<CoreSummary> getCoreSummaries() {
    return coreSummaries;
  }

  public void setCoreSummaries(List<CoreSummary> coreSummaries) {
    this.coreSummaries = coreSummaries;
  }


  public SearchMetadata eTag(String eTag) {
    this.eTag = eTag;
    return this;
  }

  /**
   * The ETag of the search results.
   * @return eTag
   */
  @javax.annotation.Nullable
  public String geteTag() {
    return eTag;
  }

  public void seteTag(String eTag) {
    this.eTag = eTag;
  }


  public SearchMetadata id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of the search results request.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SearchMetadata lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The time of last update.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public SearchMetadata max(Long max) {
    this.max = max;
    return this;
  }

  /**
   * The max of all aggregates returned in the result set.
   * @return max
   */
  @javax.annotation.Nullable
  public Long getMax() {
    return max;
  }

  public void setMax(Long max) {
    this.max = max;
  }


  public SearchMetadata requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * The request id of the search.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public SearchMetadata requestTime(Long requestTime) {
    this.requestTime = requestTime;
    return this;
  }

  /**
   * The request time.
   * @return requestTime
   */
  @javax.annotation.Nullable
  public Long getRequestTime() {
    return requestTime;
  }

  public void setRequestTime(Long requestTime) {
    this.requestTime = requestTime;
  }


  public SearchMetadata resultType(String resultType) {
    this.resultType = resultType;
    return this;
  }

  /**
   * The search result type.
   * @return resultType
   */
  @javax.annotation.Nullable
  public String getResultType() {
    return resultType;
  }

  public void setResultType(String resultType) {
    this.resultType = resultType;
  }


  public SearchMetadata schema(SearchMetadataSchema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public SearchMetadataSchema getSchema() {
    return schema;
  }

  public void setSchema(SearchMetadataSchema schema) {
    this.schema = schema;
  }


  public SearchMetadata sort(List<SearchSort> sort) {
    this.sort = sort;
    return this;
  }

  public SearchMetadata addSortItem(SearchSort sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<>();
    }
    this.sort.add(sortItem);
    return this;
  }

  /**
   * How the results are sorted.
   * @return sort
   */
  @javax.annotation.Nullable
  public List<SearchSort> getSort() {
    return sort;
  }

  public void setSort(List<SearchSort> sort) {
    this.sort = sort;
  }


  public SearchMetadata startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time for the search.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public SearchMetadata status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the search results.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public SearchMetadata sum(Long sum) {
    this.sum = sum;
    return this;
  }

  /**
   * The sum of all aggregates returned in the result set.
   * @return sum
   */
  @javax.annotation.Nullable
  public Long getSum() {
    return sum;
  }

  public void setSum(Long sum) {
    this.sum = sum;
  }


  public SearchMetadata top(Long top) {
    this.top = top;
    return this;
  }

  /**
   * The number of top search results.
   * @return top
   */
  @javax.annotation.Nullable
  public Long getTop() {
    return top;
  }

  public void setTop(Long top) {
    this.top = top;
  }


  public SearchMetadata total(Long total) {
    this.total = total;
    return this;
  }

  /**
   * The total number of search results.
   * @return total
   */
  @javax.annotation.Nullable
  public Long getTotal() {
    return total;
  }

  public void setTotal(Long total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchMetadata searchMetadata = (SearchMetadata) o;
    return Objects.equals(this.aggregatedGroupingFields, searchMetadata.aggregatedGroupingFields) &&
        Objects.equals(this.aggregatedValueField, searchMetadata.aggregatedValueField) &&
        Objects.equals(this.coreSummaries, searchMetadata.coreSummaries) &&
        Objects.equals(this.eTag, searchMetadata.eTag) &&
        Objects.equals(this.id, searchMetadata.id) &&
        Objects.equals(this.lastUpdated, searchMetadata.lastUpdated) &&
        Objects.equals(this.max, searchMetadata.max) &&
        Objects.equals(this.requestId, searchMetadata.requestId) &&
        Objects.equals(this.requestTime, searchMetadata.requestTime) &&
        Objects.equals(this.resultType, searchMetadata.resultType) &&
        Objects.equals(this.schema, searchMetadata.schema) &&
        Objects.equals(this.sort, searchMetadata.sort) &&
        Objects.equals(this.startTime, searchMetadata.startTime) &&
        Objects.equals(this.status, searchMetadata.status) &&
        Objects.equals(this.sum, searchMetadata.sum) &&
        Objects.equals(this.top, searchMetadata.top) &&
        Objects.equals(this.total, searchMetadata.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregatedGroupingFields, aggregatedValueField, coreSummaries, eTag, id, lastUpdated, max, requestId, requestTime, resultType, schema, sort, startTime, status, sum, top, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchMetadata {\n");
    sb.append("    aggregatedGroupingFields: ").append(toIndentedString(aggregatedGroupingFields)).append("\n");
    sb.append("    aggregatedValueField: ").append(toIndentedString(aggregatedValueField)).append("\n");
    sb.append("    coreSummaries: ").append(toIndentedString(coreSummaries)).append("\n");
    sb.append("    eTag: ").append(toIndentedString(eTag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requestTime: ").append(toIndentedString(requestTime)).append("\n");
    sb.append("    resultType: ").append(toIndentedString(resultType)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregatedGroupingFields");
    openapiFields.add("aggregatedValueField");
    openapiFields.add("coreSummaries");
    openapiFields.add("eTag");
    openapiFields.add("id");
    openapiFields.add("lastUpdated");
    openapiFields.add("max");
    openapiFields.add("requestId");
    openapiFields.add("requestTime");
    openapiFields.add("resultType");
    openapiFields.add("schema");
    openapiFields.add("sort");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("sum");
    openapiFields.add("top");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchMetadata is not found in the empty JSON string", SearchMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregatedGroupingFields") != null && !jsonObj.get("aggregatedGroupingFields").isJsonNull()) && !jsonObj.get("aggregatedGroupingFields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregatedGroupingFields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregatedGroupingFields").toString()));
      }
      if ((jsonObj.get("aggregatedValueField") != null && !jsonObj.get("aggregatedValueField").isJsonNull()) && !jsonObj.get("aggregatedValueField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregatedValueField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregatedValueField").toString()));
      }
      if (jsonObj.get("coreSummaries") != null && !jsonObj.get("coreSummaries").isJsonNull()) {
        JsonArray jsonArraycoreSummaries = jsonObj.getAsJsonArray("coreSummaries");
        if (jsonArraycoreSummaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("coreSummaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `coreSummaries` to be an array in the JSON string but got `%s`", jsonObj.get("coreSummaries").toString()));
          }

          // validate the optional field `coreSummaries` (array)
          for (int i = 0; i < jsonArraycoreSummaries.size(); i++) {
            CoreSummary.validateJsonElement(jsonArraycoreSummaries.get(i));
          };
        }
      }
      if ((jsonObj.get("eTag") != null && !jsonObj.get("eTag").isJsonNull()) && !jsonObj.get("eTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eTag").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("resultType") != null && !jsonObj.get("resultType").isJsonNull()) && !jsonObj.get("resultType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultType").toString()));
      }
      // validate the optional field `schema`
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        SearchMetadataSchema.validateJsonElement(jsonObj.get("schema"));
      }
      if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) {
        JsonArray jsonArraysort = jsonObj.getAsJsonArray("sort");
        if (jsonArraysort != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sort").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sort` to be an array in the JSON string but got `%s`", jsonObj.get("sort").toString()));
          }

          // validate the optional field `sort` (array)
          for (int i = 0; i < jsonArraysort.size(); i++) {
            SearchSort.validateJsonElement(jsonArraysort.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchMetadata>() {
           @Override
           public void write(JsonWriter out, SearchMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchMetadata
   * @throws IOException if the JSON string is invalid with respect to SearchMetadata
   */
  public static SearchMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchMetadata.class);
  }

  /**
   * Convert an instance of SearchMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

