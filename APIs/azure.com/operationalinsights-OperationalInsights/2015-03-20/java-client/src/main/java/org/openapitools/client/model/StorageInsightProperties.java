/*
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StorageAccount;
import org.openapitools.client.model.StorageInsightStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Storage insight properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:10.169736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageInsightProperties {
  public static final String SERIALIZED_NAME_CONTAINERS = "containers";
  @SerializedName(SERIALIZED_NAME_CONTAINERS)
  private List<String> containers = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StorageInsightStatus status;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT = "storageAccount";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT)
  private StorageAccount storageAccount;

  public static final String SERIALIZED_NAME_TABLES = "tables";
  @SerializedName(SERIALIZED_NAME_TABLES)
  private List<String> tables = new ArrayList<>();

  public StorageInsightProperties() {
  }

  public StorageInsightProperties containers(List<String> containers) {
    this.containers = containers;
    return this;
  }

  public StorageInsightProperties addContainersItem(String containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<>();
    }
    this.containers.add(containersItem);
    return this;
  }

  /**
   * The names of the blob containers that the workspace should read
   * @return containers
   */
  @javax.annotation.Nullable
  public List<String> getContainers() {
    return containers;
  }

  public void setContainers(List<String> containers) {
    this.containers = containers;
  }


  public StorageInsightProperties status(StorageInsightStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StorageInsightStatus getStatus() {
    return status;
  }

  public void setStatus(StorageInsightStatus status) {
    this.status = status;
  }


  public StorageInsightProperties storageAccount(StorageAccount storageAccount) {
    this.storageAccount = storageAccount;
    return this;
  }

  /**
   * Get storageAccount
   * @return storageAccount
   */
  @javax.annotation.Nonnull
  public StorageAccount getStorageAccount() {
    return storageAccount;
  }

  public void setStorageAccount(StorageAccount storageAccount) {
    this.storageAccount = storageAccount;
  }


  public StorageInsightProperties tables(List<String> tables) {
    this.tables = tables;
    return this;
  }

  public StorageInsightProperties addTablesItem(String tablesItem) {
    if (this.tables == null) {
      this.tables = new ArrayList<>();
    }
    this.tables.add(tablesItem);
    return this;
  }

  /**
   * The names of the Azure tables that the workspace should read
   * @return tables
   */
  @javax.annotation.Nullable
  public List<String> getTables() {
    return tables;
  }

  public void setTables(List<String> tables) {
    this.tables = tables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageInsightProperties storageInsightProperties = (StorageInsightProperties) o;
    return Objects.equals(this.containers, storageInsightProperties.containers) &&
        Objects.equals(this.status, storageInsightProperties.status) &&
        Objects.equals(this.storageAccount, storageInsightProperties.storageAccount) &&
        Objects.equals(this.tables, storageInsightProperties.tables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containers, status, storageAccount, tables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageInsightProperties {\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    storageAccount: ").append(toIndentedString(storageAccount)).append("\n");
    sb.append("    tables: ").append(toIndentedString(tables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containers");
    openapiFields.add("status");
    openapiFields.add("storageAccount");
    openapiFields.add("tables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("storageAccount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageInsightProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageInsightProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageInsightProperties is not found in the empty JSON string", StorageInsightProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageInsightProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageInsightProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StorageInsightProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("containers") != null && !jsonObj.get("containers").isJsonNull() && !jsonObj.get("containers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `containers` to be an array in the JSON string but got `%s`", jsonObj.get("containers").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StorageInsightStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the required field `storageAccount`
      StorageAccount.validateJsonElement(jsonObj.get("storageAccount"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("tables") != null && !jsonObj.get("tables").isJsonNull() && !jsonObj.get("tables").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tables` to be an array in the JSON string but got `%s`", jsonObj.get("tables").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageInsightProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageInsightProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageInsightProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageInsightProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageInsightProperties>() {
           @Override
           public void write(JsonWriter out, StorageInsightProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageInsightProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageInsightProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageInsightProperties
   * @throws IOException if the JSON string is invalid with respect to StorageInsightProperties
   */
  public static StorageInsightProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageInsightProperties.class);
  }

  /**
   * Convert an instance of StorageInsightProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

