/*
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LinkTarget;
import org.openapitools.client.model.SearchGetSchemaResponse;
import org.openapitools.client.model.SharedKeys;
import org.openapitools.client.model.WorkspacePurgeBody;
import org.openapitools.client.model.WorkspacePurgeResponse;
import org.openapitools.client.model.WorkspacePurgeStatusResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkspacesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkspacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkspacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workspacesDeleteGateways
     * @param subscriptionId The Subscription ID. (required)
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param gatewayId The Log Analytics gateway Id. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified gateway was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesDeleteGatewaysCall(String subscriptionId, String resourceGroupName, String workspaceName, String gatewayId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/gateways/{gatewayId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "gatewayId" + "}", localVarApiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspacesDeleteGatewaysValidateBeforeCall(String subscriptionId, String resourceGroupName, String workspaceName, String gatewayId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workspacesDeleteGateways(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workspacesDeleteGateways(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling workspacesDeleteGateways(Async)");
        }

        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling workspacesDeleteGateways(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workspacesDeleteGateways(Async)");
        }

        return workspacesDeleteGatewaysCall(subscriptionId, resourceGroupName, workspaceName, gatewayId, apiVersion, _callback);

    }

    /**
     * 
     * Delete a Log Analytics gateway.
     * @param subscriptionId The Subscription ID. (required)
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param gatewayId The Log Analytics gateway Id. (required)
     * @param apiVersion The client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified gateway was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void workspacesDeleteGateways(String subscriptionId, String resourceGroupName, String workspaceName, String gatewayId, String apiVersion) throws ApiException {
        workspacesDeleteGatewaysWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, gatewayId, apiVersion);
    }

    /**
     * 
     * Delete a Log Analytics gateway.
     * @param subscriptionId The Subscription ID. (required)
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param gatewayId The Log Analytics gateway Id. (required)
     * @param apiVersion The client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified gateway was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspacesDeleteGatewaysWithHttpInfo(String subscriptionId, String resourceGroupName, String workspaceName, String gatewayId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workspacesDeleteGatewaysValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, gatewayId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a Log Analytics gateway.
     * @param subscriptionId The Subscription ID. (required)
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param gatewayId The Log Analytics gateway Id. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified gateway was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesDeleteGatewaysAsync(String subscriptionId, String resourceGroupName, String workspaceName, String gatewayId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspacesDeleteGatewaysValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, gatewayId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspacesGetPurgeStatus
     * @param resourceGroupName The Resource Group name. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param purgeId In a purge status request, this is the Id of the operation the status of which is returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status of purge operation in body of response. e.g.:  running, completed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesGetPurgeStatusCall(String resourceGroupName, String apiVersion, String subscriptionId, String workspaceName, String purgeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/operations/{purgeId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "purgeId" + "}", localVarApiClient.escapeString(purgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspacesGetPurgeStatusValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String workspaceName, String purgeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workspacesGetPurgeStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workspacesGetPurgeStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workspacesGetPurgeStatus(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling workspacesGetPurgeStatus(Async)");
        }

        // verify the required parameter 'purgeId' is set
        if (purgeId == null) {
            throw new ApiException("Missing the required parameter 'purgeId' when calling workspacesGetPurgeStatus(Async)");
        }

        return workspacesGetPurgeStatusCall(resourceGroupName, apiVersion, subscriptionId, workspaceName, purgeId, _callback);

    }

    /**
     * 
     * Gets status of an ongoing purge operation.
     * @param resourceGroupName The Resource Group name. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param purgeId In a purge status request, this is the Id of the operation the status of which is returned. (required)
     * @return WorkspacePurgeStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status of purge operation in body of response. e.g.:  running, completed. </td><td>  -  </td></tr>
     </table>
     */
    public WorkspacePurgeStatusResponse workspacesGetPurgeStatus(String resourceGroupName, String apiVersion, String subscriptionId, String workspaceName, String purgeId) throws ApiException {
        ApiResponse<WorkspacePurgeStatusResponse> localVarResp = workspacesGetPurgeStatusWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, workspaceName, purgeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets status of an ongoing purge operation.
     * @param resourceGroupName The Resource Group name. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param purgeId In a purge status request, this is the Id of the operation the status of which is returned. (required)
     * @return ApiResponse&lt;WorkspacePurgeStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status of purge operation in body of response. e.g.:  running, completed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkspacePurgeStatusResponse> workspacesGetPurgeStatusWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String workspaceName, String purgeId) throws ApiException {
        okhttp3.Call localVarCall = workspacesGetPurgeStatusValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, workspaceName, purgeId, null);
        Type localVarReturnType = new TypeToken<WorkspacePurgeStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets status of an ongoing purge operation.
     * @param resourceGroupName The Resource Group name. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param purgeId In a purge status request, this is the Id of the operation the status of which is returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status of purge operation in body of response. e.g.:  running, completed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesGetPurgeStatusAsync(String resourceGroupName, String apiVersion, String subscriptionId, String workspaceName, String purgeId, final ApiCallback<WorkspacePurgeStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspacesGetPurgeStatusValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, workspaceName, purgeId, _callback);
        Type localVarReturnType = new TypeToken<WorkspacePurgeStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspacesGetSchema
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesGetSchemaCall(String resourceGroupName, String workspaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/schema"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspacesGetSchemaValidateBeforeCall(String resourceGroupName, String workspaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workspacesGetSchema(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling workspacesGetSchema(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workspacesGetSchema(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workspacesGetSchema(Async)");
        }

        return workspacesGetSchemaCall(resourceGroupName, workspaceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the schema for a given workspace.
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @return SearchGetSchemaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public SearchGetSchemaResponse workspacesGetSchema(String resourceGroupName, String workspaceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SearchGetSchemaResponse> localVarResp = workspacesGetSchemaWithHttpInfo(resourceGroupName, workspaceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the schema for a given workspace.
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @return ApiResponse&lt;SearchGetSchemaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchGetSchemaResponse> workspacesGetSchemaWithHttpInfo(String resourceGroupName, String workspaceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = workspacesGetSchemaValidateBeforeCall(resourceGroupName, workspaceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SearchGetSchemaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the schema for a given workspace.
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesGetSchemaAsync(String resourceGroupName, String workspaceName, String apiVersion, String subscriptionId, final ApiCallback<SearchGetSchemaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspacesGetSchemaValidateBeforeCall(resourceGroupName, workspaceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SearchGetSchemaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspacesListKeys
     * @param subscriptionId The Subscription ID. (required)
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the shared keys associated with the Log Analytics Workspace. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesListKeysCall(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/listKeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspacesListKeysValidateBeforeCall(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workspacesListKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workspacesListKeys(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling workspacesListKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workspacesListKeys(Async)");
        }

        return workspacesListKeysCall(subscriptionId, resourceGroupName, workspaceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace.
     * @param subscriptionId The Subscription ID. (required)
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param apiVersion The client API version. (required)
     * @return SharedKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the shared keys associated with the Log Analytics Workspace. </td><td>  -  </td></tr>
     </table>
     */
    public SharedKeys workspacesListKeys(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion) throws ApiException {
        ApiResponse<SharedKeys> localVarResp = workspacesListKeysWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace.
     * @param subscriptionId The Subscription ID. (required)
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param apiVersion The client API version. (required)
     * @return ApiResponse&lt;SharedKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the shared keys associated with the Log Analytics Workspace. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedKeys> workspacesListKeysWithHttpInfo(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workspacesListKeysValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SharedKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace.
     * @param subscriptionId The Subscription ID. (required)
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the shared keys associated with the Log Analytics Workspace. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesListKeysAsync(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion, final ApiCallback<SharedKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspacesListKeysValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SharedKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspacesListLinkTargets
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesListLinkTargetsCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/linkTargets"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspacesListLinkTargetsValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workspacesListLinkTargets(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workspacesListLinkTargets(Async)");
        }

        return workspacesListLinkTargetsCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @return List&lt;LinkTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public List<LinkTarget> workspacesListLinkTargets(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<List<LinkTarget>> localVarResp = workspacesListLinkTargetsWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @return ApiResponse&lt;List&lt;LinkTarget&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LinkTarget>> workspacesListLinkTargetsWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = workspacesListLinkTargetsValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<List<LinkTarget>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesListLinkTargetsAsync(String apiVersion, String subscriptionId, final ApiCallback<List<LinkTarget>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspacesListLinkTargetsValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<List<LinkTarget>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspacesPurge
     * @param resourceGroupName The Resource Group name. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param body Describes the body of a request to purge data in a single table of an Log Analytics Workspace (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for purging an Log Analytics workspace. </td><td>  * x-ms-status-location - The location from which to request the operation status. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesPurgeCall(String resourceGroupName, String apiVersion, String subscriptionId, String workspaceName, WorkspacePurgeBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/purge"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspacesPurgeValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String workspaceName, WorkspacePurgeBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workspacesPurge(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workspacesPurge(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workspacesPurge(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling workspacesPurge(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling workspacesPurge(Async)");
        }

        return workspacesPurgeCall(resourceGroupName, apiVersion, subscriptionId, workspaceName, body, _callback);

    }

    /**
     * 
     * Purges data in an Log Analytics workspace by a set of user-defined filters.  In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
     * @param resourceGroupName The Resource Group name. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param body Describes the body of a request to purge data in a single table of an Log Analytics Workspace (required)
     * @return WorkspacePurgeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for purging an Log Analytics workspace. </td><td>  * x-ms-status-location - The location from which to request the operation status. <br>  </td></tr>
     </table>
     */
    public WorkspacePurgeResponse workspacesPurge(String resourceGroupName, String apiVersion, String subscriptionId, String workspaceName, WorkspacePurgeBody body) throws ApiException {
        ApiResponse<WorkspacePurgeResponse> localVarResp = workspacesPurgeWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, workspaceName, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Purges data in an Log Analytics workspace by a set of user-defined filters.  In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
     * @param resourceGroupName The Resource Group name. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param body Describes the body of a request to purge data in a single table of an Log Analytics Workspace (required)
     * @return ApiResponse&lt;WorkspacePurgeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for purging an Log Analytics workspace. </td><td>  * x-ms-status-location - The location from which to request the operation status. <br>  </td></tr>
     </table>
     */
    public ApiResponse<WorkspacePurgeResponse> workspacesPurgeWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String workspaceName, WorkspacePurgeBody body) throws ApiException {
        okhttp3.Call localVarCall = workspacesPurgeValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, workspaceName, body, null);
        Type localVarReturnType = new TypeToken<WorkspacePurgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Purges data in an Log Analytics workspace by a set of user-defined filters.  In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
     * @param resourceGroupName The Resource Group name. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Subscription ID. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param body Describes the body of a request to purge data in a single table of an Log Analytics Workspace (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for purging an Log Analytics workspace. </td><td>  * x-ms-status-location - The location from which to request the operation status. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesPurgeAsync(String resourceGroupName, String apiVersion, String subscriptionId, String workspaceName, WorkspacePurgeBody body, final ApiCallback<WorkspacePurgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspacesPurgeValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, workspaceName, body, _callback);
        Type localVarReturnType = new TypeToken<WorkspacePurgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspacesRegenerateSharedKeys
     * @param subscriptionId The Subscription ID. (required)
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the new shared keys associated with the Log Analytics Workspace. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesRegenerateSharedKeysCall(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/regenerateSharedKey"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspacesRegenerateSharedKeysValidateBeforeCall(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workspacesRegenerateSharedKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workspacesRegenerateSharedKeys(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling workspacesRegenerateSharedKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workspacesRegenerateSharedKeys(Async)");
        }

        return workspacesRegenerateSharedKeysCall(subscriptionId, resourceGroupName, workspaceName, apiVersion, _callback);

    }

    /**
     * 
     * Regenerates the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace.
     * @param subscriptionId The Subscription ID. (required)
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param apiVersion The client API version. (required)
     * @return SharedKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the new shared keys associated with the Log Analytics Workspace. </td><td>  -  </td></tr>
     </table>
     */
    public SharedKeys workspacesRegenerateSharedKeys(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion) throws ApiException {
        ApiResponse<SharedKeys> localVarResp = workspacesRegenerateSharedKeysWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerates the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace.
     * @param subscriptionId The Subscription ID. (required)
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param apiVersion The client API version. (required)
     * @return ApiResponse&lt;SharedKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the new shared keys associated with the Log Analytics Workspace. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedKeys> workspacesRegenerateSharedKeysWithHttpInfo(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workspacesRegenerateSharedKeysValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SharedKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace.
     * @param subscriptionId The Subscription ID. (required)
     * @param resourceGroupName The Resource Group name. (required)
     * @param workspaceName The Log Analytics Workspace name. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the new shared keys associated with the Log Analytics Workspace. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspacesRegenerateSharedKeysAsync(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion, final ApiCallback<SharedKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspacesRegenerateSharedKeysValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SharedKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
