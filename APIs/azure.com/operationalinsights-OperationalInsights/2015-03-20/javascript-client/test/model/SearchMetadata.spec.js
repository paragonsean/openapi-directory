/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AzureLogAnalytics);
  }
}(this, function(expect, AzureLogAnalytics) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AzureLogAnalytics.SearchMetadata();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SearchMetadata', function() {
    it('should create an instance of SearchMetadata', function() {
      // uncomment below and update the code to test SearchMetadata
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be.a(AzureLogAnalytics.SearchMetadata);
    });

    it('should have the property aggregatedGroupingFields (base name: "aggregatedGroupingFields")', function() {
      // uncomment below and update the code to test the property aggregatedGroupingFields
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property aggregatedValueField (base name: "aggregatedValueField")', function() {
      // uncomment below and update the code to test the property aggregatedValueField
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property coreSummaries (base name: "coreSummaries")', function() {
      // uncomment below and update the code to test the property coreSummaries
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property eTag (base name: "eTag")', function() {
      // uncomment below and update the code to test the property eTag
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property max (base name: "max")', function() {
      // uncomment below and update the code to test the property max
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property requestId (base name: "requestId")', function() {
      // uncomment below and update the code to test the property requestId
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property requestTime (base name: "requestTime")', function() {
      // uncomment below and update the code to test the property requestTime
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property resultType (base name: "resultType")', function() {
      // uncomment below and update the code to test the property resultType
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property schema (base name: "schema")', function() {
      // uncomment below and update the code to test the property schema
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property sort (base name: "sort")', function() {
      // uncomment below and update the code to test the property sort
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property sum (base name: "sum")', function() {
      // uncomment below and update the code to test the property sum
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property top (base name: "top")', function() {
      // uncomment below and update the code to test the property top
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new AzureLogAnalytics.SearchMetadata();
      //expect(instance).to.be();
    });

  });

}));
