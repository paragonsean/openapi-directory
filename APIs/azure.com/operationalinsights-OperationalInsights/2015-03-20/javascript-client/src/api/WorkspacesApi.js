/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LinkTarget from '../model/LinkTarget';
import SearchGetSchemaResponse from '../model/SearchGetSchemaResponse';
import SharedKeys from '../model/SharedKeys';
import WorkspacePurgeBody from '../model/WorkspacePurgeBody';
import WorkspacePurgeResponse from '../model/WorkspacePurgeResponse';
import WorkspacePurgeStatusResponse from '../model/WorkspacePurgeStatusResponse';

/**
* Workspaces service.
* @module api/WorkspacesApi
* @version 2015-03-20
*/
export default class WorkspacesApi {

    /**
    * Constructs a new WorkspacesApi. 
    * @alias module:api/WorkspacesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workspacesDeleteGateways operation.
     * @callback module:api/WorkspacesApi~workspacesDeleteGatewaysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Log Analytics gateway.
     * @param {String} subscriptionId The Subscription ID.
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} gatewayId The Log Analytics gateway Id.
     * @param {String} apiVersion The client API version.
     * @param {module:api/WorkspacesApi~workspacesDeleteGatewaysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspacesDeleteGateways(subscriptionId, resourceGroupName, workspaceName, gatewayId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesDeleteGateways");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesDeleteGateways");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesDeleteGateways");
      }
      // verify the required parameter 'gatewayId' is set
      if (gatewayId === undefined || gatewayId === null) {
        throw new Error("Missing the required parameter 'gatewayId' when calling workspacesDeleteGateways");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesDeleteGateways");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'gatewayId': gatewayId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/gateways/{gatewayId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesGetPurgeStatus operation.
     * @callback module:api/WorkspacesApi~workspacesGetPurgeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspacePurgeStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets status of an ongoing purge operation.
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId The Subscription ID.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} purgeId In a purge status request, this is the Id of the operation the status of which is returned.
     * @param {module:api/WorkspacesApi~workspacesGetPurgeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspacePurgeStatusResponse}
     */
    workspacesGetPurgeStatus(resourceGroupName, apiVersion, subscriptionId, workspaceName, purgeId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesGetPurgeStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesGetPurgeStatus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesGetPurgeStatus");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesGetPurgeStatus");
      }
      // verify the required parameter 'purgeId' is set
      if (purgeId === undefined || purgeId === null) {
        throw new Error("Missing the required parameter 'purgeId' when calling workspacesGetPurgeStatus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'workspaceName': workspaceName,
        'purgeId': purgeId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkspacePurgeStatusResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/operations/{purgeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesGetSchema operation.
     * @callback module:api/WorkspacesApi~workspacesGetSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchGetSchemaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the schema for a given workspace.
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId The Subscription ID.
     * @param {module:api/WorkspacesApi~workspacesGetSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchGetSchemaResponse}
     */
    workspacesGetSchema(resourceGroupName, workspaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesGetSchema");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesGetSchema");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesGetSchema");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesGetSchema");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchGetSchemaResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/schema', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesListKeys operation.
     * @callback module:api/WorkspacesApi~workspacesListKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace.
     * @param {String} subscriptionId The Subscription ID.
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} apiVersion The client API version.
     * @param {module:api/WorkspacesApi~workspacesListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedKeys}
     */
    workspacesListKeys(subscriptionId, resourceGroupName, workspaceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesListKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesListKeys");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesListKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesListKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/listKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesListLinkTargets operation.
     * @callback module:api/WorkspacesApi~workspacesListLinkTargetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LinkTarget>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId The Subscription ID.
     * @param {module:api/WorkspacesApi~workspacesListLinkTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LinkTarget>}
     */
    workspacesListLinkTargets(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesListLinkTargets");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesListLinkTargets");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LinkTarget];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/linkTargets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesPurge operation.
     * @callback module:api/WorkspacesApi~workspacesPurgeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspacePurgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purges data in an Log Analytics workspace by a set of user-defined filters.  In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId The Subscription ID.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {module:model/WorkspacePurgeBody} body Describes the body of a request to purge data in a single table of an Log Analytics Workspace
     * @param {module:api/WorkspacesApi~workspacesPurgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspacePurgeResponse}
     */
    workspacesPurge(resourceGroupName, apiVersion, subscriptionId, workspaceName, body, callback) {
      let postBody = body;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesPurge");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesPurge");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesPurge");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesPurge");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workspacesPurge");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'workspaceName': workspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkspacePurgeResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/purge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesRegenerateSharedKeys operation.
     * @callback module:api/WorkspacesApi~workspacesRegenerateSharedKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerates the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace.
     * @param {String} subscriptionId The Subscription ID.
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} apiVersion The client API version.
     * @param {module:api/WorkspacesApi~workspacesRegenerateSharedKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedKeys}
     */
    workspacesRegenerateSharedKeys(subscriptionId, resourceGroupName, workspaceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspacesRegenerateSharedKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workspacesRegenerateSharedKeys");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling workspacesRegenerateSharedKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspacesRegenerateSharedKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/regenerateSharedKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
