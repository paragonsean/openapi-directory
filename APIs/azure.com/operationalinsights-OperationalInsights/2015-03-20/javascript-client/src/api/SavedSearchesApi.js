/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SavedSearch from '../model/SavedSearch';
import SavedSearchesListResult from '../model/SavedSearchesListResult';

/**
* SavedSearches service.
* @module api/SavedSearchesApi
* @version 2015-03-20
*/
export default class SavedSearchesApi {

    /**
    * Constructs a new SavedSearchesApi. 
    * @alias module:api/SavedSearchesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the savedSearchesCreateOrUpdate operation.
     * @callback module:api/SavedSearchesApi~savedSearchesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavedSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a saved search for a given workspace.
     * @param {String} subscriptionId The Subscription ID.
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} savedSearchId The id of the saved search.
     * @param {String} apiVersion The client API version.
     * @param {module:model/SavedSearch} parameters The parameters required to save a search.
     * @param {module:api/SavedSearchesApi~savedSearchesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavedSearch}
     */
    savedSearchesCreateOrUpdate(subscriptionId, resourceGroupName, workspaceName, savedSearchId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling savedSearchesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling savedSearchesCreateOrUpdate");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling savedSearchesCreateOrUpdate");
      }
      // verify the required parameter 'savedSearchId' is set
      if (savedSearchId === undefined || savedSearchId === null) {
        throw new Error("Missing the required parameter 'savedSearchId' when calling savedSearchesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling savedSearchesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling savedSearchesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'savedSearchId': savedSearchId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SavedSearch;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedSearchesDelete operation.
     * @callback module:api/SavedSearchesApi~savedSearchesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified saved search in a given workspace.
     * @param {String} subscriptionId The Subscription ID.
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} savedSearchId The id of the saved search.
     * @param {String} apiVersion The client API version.
     * @param {module:api/SavedSearchesApi~savedSearchesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    savedSearchesDelete(subscriptionId, resourceGroupName, workspaceName, savedSearchId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling savedSearchesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling savedSearchesDelete");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling savedSearchesDelete");
      }
      // verify the required parameter 'savedSearchId' is set
      if (savedSearchId === undefined || savedSearchId === null) {
        throw new Error("Missing the required parameter 'savedSearchId' when calling savedSearchesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling savedSearchesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'savedSearchId': savedSearchId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedSearchesGet operation.
     * @callback module:api/SavedSearchesApi~savedSearchesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavedSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified saved search for a given workspace.
     * @param {String} subscriptionId The Subscription ID.
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} savedSearchId The id of the saved search.
     * @param {String} apiVersion The client API version.
     * @param {module:api/SavedSearchesApi~savedSearchesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavedSearch}
     */
    savedSearchesGet(subscriptionId, resourceGroupName, workspaceName, savedSearchId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling savedSearchesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling savedSearchesGet");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling savedSearchesGet");
      }
      // verify the required parameter 'savedSearchId' is set
      if (savedSearchId === undefined || savedSearchId === null) {
        throw new Error("Missing the required parameter 'savedSearchId' when calling savedSearchesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling savedSearchesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'savedSearchId': savedSearchId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SavedSearch;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the savedSearchesListByWorkspace operation.
     * @callback module:api/SavedSearchesApi~savedSearchesListByWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavedSearchesListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the saved searches for a given Log Analytics Workspace
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId The Subscription ID.
     * @param {module:api/SavedSearchesApi~savedSearchesListByWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavedSearchesListResult}
     */
    savedSearchesListByWorkspace(resourceGroupName, workspaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling savedSearchesListByWorkspace");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling savedSearchesListByWorkspace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling savedSearchesListByWorkspace");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling savedSearchesListByWorkspace");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SavedSearchesListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
