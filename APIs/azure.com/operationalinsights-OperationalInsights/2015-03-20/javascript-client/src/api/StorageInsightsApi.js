/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StorageInsight from '../model/StorageInsight';
import StorageInsightListResult from '../model/StorageInsightListResult';

/**
* StorageInsights service.
* @module api/StorageInsightsApi
* @version 2015-03-20
*/
export default class StorageInsightsApi {

    /**
    * Constructs a new StorageInsightsApi. 
    * @alias module:api/StorageInsightsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the storageInsightsCreateOrUpdate operation.
     * @callback module:api/StorageInsightsApi~storageInsightsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageInsight} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a storage insight.
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} storageInsightName Name of the storageInsightsConfigs resource
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId The Subscription ID.
     * @param {module:model/StorageInsight} parameters The parameters required to create or update a storage insight.
     * @param {module:api/StorageInsightsApi~storageInsightsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageInsight}
     */
    storageInsightsCreateOrUpdate(resourceGroupName, workspaceName, storageInsightName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling storageInsightsCreateOrUpdate");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling storageInsightsCreateOrUpdate");
      }
      // verify the required parameter 'storageInsightName' is set
      if (storageInsightName === undefined || storageInsightName === null) {
        throw new Error("Missing the required parameter 'storageInsightName' when calling storageInsightsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling storageInsightsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling storageInsightsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling storageInsightsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'storageInsightName': storageInsightName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageInsight;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs/{storageInsightName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageInsightsDelete operation.
     * @callback module:api/StorageInsightsApi~storageInsightsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a storageInsightsConfigs resource
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} storageInsightName Name of the storageInsightsConfigs resource
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId The Subscription ID.
     * @param {module:api/StorageInsightsApi~storageInsightsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageInsightsDelete(resourceGroupName, workspaceName, storageInsightName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling storageInsightsDelete");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling storageInsightsDelete");
      }
      // verify the required parameter 'storageInsightName' is set
      if (storageInsightName === undefined || storageInsightName === null) {
        throw new Error("Missing the required parameter 'storageInsightName' when calling storageInsightsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling storageInsightsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling storageInsightsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'storageInsightName': storageInsightName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs/{storageInsightName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageInsightsGet operation.
     * @callback module:api/StorageInsightsApi~storageInsightsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageInsight} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a storage insight instance.
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} storageInsightName Name of the storageInsightsConfigs resource
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId The Subscription ID.
     * @param {module:api/StorageInsightsApi~storageInsightsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageInsight}
     */
    storageInsightsGet(resourceGroupName, workspaceName, storageInsightName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling storageInsightsGet");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling storageInsightsGet");
      }
      // verify the required parameter 'storageInsightName' is set
      if (storageInsightName === undefined || storageInsightName === null) {
        throw new Error("Missing the required parameter 'storageInsightName' when calling storageInsightsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling storageInsightsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling storageInsightsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'storageInsightName': storageInsightName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageInsight;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs/{storageInsightName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageInsightsListByWorkspace operation.
     * @callback module:api/StorageInsightsApi~storageInsightsListByWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageInsightListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the storage insight instances within a workspace
     * @param {String} resourceGroupName The Resource Group name.
     * @param {String} workspaceName The Log Analytics Workspace name.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId The Subscription ID.
     * @param {module:api/StorageInsightsApi~storageInsightsListByWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageInsightListResult}
     */
    storageInsightsListByWorkspace(resourceGroupName, workspaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling storageInsightsListByWorkspace");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling storageInsightsListByWorkspace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling storageInsightsListByWorkspace");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling storageInsightsListByWorkspace");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageInsightListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
