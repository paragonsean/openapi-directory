/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchSchemaValue model module.
 * @module model/SearchSchemaValue
 * @version 2015-03-20
 */
class SearchSchemaValue {
    /**
     * Constructs a new <code>SearchSchemaValue</code>.
     * Value object for schema results.
     * @alias module:model/SearchSchemaValue
     * @param facet {Boolean} The boolean that indicates whether or not the field is a facet.
     * @param indexed {Boolean} The boolean that indicates the field is searchable as free text.
     * @param stored {Boolean} The boolean that indicates whether or not the field is stored.
     */
    constructor(facet, indexed, stored) { 
        
        SearchSchemaValue.initialize(this, facet, indexed, stored);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, facet, indexed, stored) { 
        obj['facet'] = facet;
        obj['indexed'] = indexed;
        obj['stored'] = stored;
    }

    /**
     * Constructs a <code>SearchSchemaValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchSchemaValue} obj Optional instance to populate.
     * @return {module:model/SearchSchemaValue} The populated <code>SearchSchemaValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchSchemaValue();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('facet')) {
                obj['facet'] = ApiClient.convertToType(data['facet'], 'Boolean');
            }
            if (data.hasOwnProperty('indexed')) {
                obj['indexed'] = ApiClient.convertToType(data['indexed'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerType')) {
                obj['ownerType'] = ApiClient.convertToType(data['ownerType'], ['String']);
            }
            if (data.hasOwnProperty('stored')) {
                obj['stored'] = ApiClient.convertToType(data['stored'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchSchemaValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchSchemaValue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchSchemaValue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ownerType'])) {
            throw new Error("Expected the field `ownerType` to be an array in the JSON data but got " + data['ownerType']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

SearchSchemaValue.RequiredProperties = ["facet", "indexed", "stored"];

/**
 * The display name of the schema.
 * @member {String} displayName
 */
SearchSchemaValue.prototype['displayName'] = undefined;

/**
 * The boolean that indicates whether or not the field is a facet.
 * @member {Boolean} facet
 */
SearchSchemaValue.prototype['facet'] = undefined;

/**
 * The boolean that indicates the field is searchable as free text.
 * @member {Boolean} indexed
 */
SearchSchemaValue.prototype['indexed'] = undefined;

/**
 * The name of the schema.
 * @member {String} name
 */
SearchSchemaValue.prototype['name'] = undefined;

/**
 * The array of workflows containing the field.
 * @member {Array.<String>} ownerType
 */
SearchSchemaValue.prototype['ownerType'] = undefined;

/**
 * The boolean that indicates whether or not the field is stored.
 * @member {Boolean} stored
 */
SearchSchemaValue.prototype['stored'] = undefined;

/**
 * The type.
 * @member {String} type
 */
SearchSchemaValue.prototype['type'] = undefined;






export default SearchSchemaValue;

