/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StorageInsightStatus model module.
 * @module model/StorageInsightStatus
 * @version 2015-03-20
 */
class StorageInsightStatus {
    /**
     * Constructs a new <code>StorageInsightStatus</code>.
     * The status of the storage insight.
     * @alias module:model/StorageInsightStatus
     * @param state {module:model/StorageInsightStatus.StateEnum} The state of the storage insight connection to the workspace
     */
    constructor(state) { 
        
        StorageInsightStatus.initialize(this, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, state) { 
        obj['state'] = state;
    }

    /**
     * Constructs a <code>StorageInsightStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StorageInsightStatus} obj Optional instance to populate.
     * @return {module:model/StorageInsightStatus} The populated <code>StorageInsightStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StorageInsightStatus();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StorageInsightStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StorageInsightStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StorageInsightStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

StorageInsightStatus.RequiredProperties = ["state"];

/**
 * Description of the state of the storage insight.
 * @member {String} description
 */
StorageInsightStatus.prototype['description'] = undefined;

/**
 * The state of the storage insight connection to the workspace
 * @member {module:model/StorageInsightStatus.StateEnum} state
 */
StorageInsightStatus.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
StorageInsightStatus['StateEnum'] = {

    /**
     * value: "OK"
     * @const
     */
    "OK": "OK",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default StorageInsightStatus;

