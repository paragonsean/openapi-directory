/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CoreSummary from './CoreSummary';
import SearchMetadataSchema from './SearchMetadataSchema';
import SearchSort from './SearchSort';

/**
 * The SearchMetadata model module.
 * @module model/SearchMetadata
 * @version 2015-03-20
 */
class SearchMetadata {
    /**
     * Constructs a new <code>SearchMetadata</code>.
     * Metadata for search results.
     * @alias module:model/SearchMetadata
     */
    constructor() { 
        
        SearchMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchMetadata} obj Optional instance to populate.
     * @return {module:model/SearchMetadata} The populated <code>SearchMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchMetadata();

            if (data.hasOwnProperty('aggregatedGroupingFields')) {
                obj['aggregatedGroupingFields'] = ApiClient.convertToType(data['aggregatedGroupingFields'], 'String');
            }
            if (data.hasOwnProperty('aggregatedValueField')) {
                obj['aggregatedValueField'] = ApiClient.convertToType(data['aggregatedValueField'], 'String');
            }
            if (data.hasOwnProperty('coreSummaries')) {
                obj['coreSummaries'] = ApiClient.convertToType(data['coreSummaries'], [CoreSummary]);
            }
            if (data.hasOwnProperty('eTag')) {
                obj['eTag'] = ApiClient.convertToType(data['eTag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('max')) {
                obj['max'] = ApiClient.convertToType(data['max'], 'Number');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('requestTime')) {
                obj['requestTime'] = ApiClient.convertToType(data['requestTime'], 'Number');
            }
            if (data.hasOwnProperty('resultType')) {
                obj['resultType'] = ApiClient.convertToType(data['resultType'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = SearchMetadataSchema.constructFromObject(data['schema']);
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], [SearchSort]);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('sum')) {
                obj['sum'] = ApiClient.convertToType(data['sum'], 'Number');
            }
            if (data.hasOwnProperty('top')) {
                obj['top'] = ApiClient.convertToType(data['top'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregatedGroupingFields'] && !(typeof data['aggregatedGroupingFields'] === 'string' || data['aggregatedGroupingFields'] instanceof String)) {
            throw new Error("Expected the field `aggregatedGroupingFields` to be a primitive type in the JSON string but got " + data['aggregatedGroupingFields']);
        }
        // ensure the json data is a string
        if (data['aggregatedValueField'] && !(typeof data['aggregatedValueField'] === 'string' || data['aggregatedValueField'] instanceof String)) {
            throw new Error("Expected the field `aggregatedValueField` to be a primitive type in the JSON string but got " + data['aggregatedValueField']);
        }
        if (data['coreSummaries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['coreSummaries'])) {
                throw new Error("Expected the field `coreSummaries` to be an array in the JSON data but got " + data['coreSummaries']);
            }
            // validate the optional field `coreSummaries` (array)
            for (const item of data['coreSummaries']) {
                CoreSummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['eTag'] && !(typeof data['eTag'] === 'string' || data['eTag'] instanceof String)) {
            throw new Error("Expected the field `eTag` to be a primitive type in the JSON string but got " + data['eTag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['resultType'] && !(typeof data['resultType'] === 'string' || data['resultType'] instanceof String)) {
            throw new Error("Expected the field `resultType` to be a primitive type in the JSON string but got " + data['resultType']);
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          SearchMetadataSchema.validateJSON(data['schema']);
        }
        if (data['sort']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sort'])) {
                throw new Error("Expected the field `sort` to be an array in the JSON data but got " + data['sort']);
            }
            // validate the optional field `sort` (array)
            for (const item of data['sort']) {
                SearchSort.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The aggregated grouping fields.
 * @member {String} aggregatedGroupingFields
 */
SearchMetadata.prototype['aggregatedGroupingFields'] = undefined;

/**
 * The aggregated value field.
 * @member {String} aggregatedValueField
 */
SearchMetadata.prototype['aggregatedValueField'] = undefined;

/**
 * The core summaries.
 * @member {Array.<module:model/CoreSummary>} coreSummaries
 */
SearchMetadata.prototype['coreSummaries'] = undefined;

/**
 * The ETag of the search results.
 * @member {String} eTag
 */
SearchMetadata.prototype['eTag'] = undefined;

/**
 * The id of the search results request.
 * @member {String} id
 */
SearchMetadata.prototype['id'] = undefined;

/**
 * The time of last update.
 * @member {Date} lastUpdated
 */
SearchMetadata.prototype['lastUpdated'] = undefined;

/**
 * The max of all aggregates returned in the result set.
 * @member {Number} max
 */
SearchMetadata.prototype['max'] = undefined;

/**
 * The request id of the search.
 * @member {String} requestId
 */
SearchMetadata.prototype['requestId'] = undefined;

/**
 * The request time.
 * @member {Number} requestTime
 */
SearchMetadata.prototype['requestTime'] = undefined;

/**
 * The search result type.
 * @member {String} resultType
 */
SearchMetadata.prototype['resultType'] = undefined;

/**
 * @member {module:model/SearchMetadataSchema} schema
 */
SearchMetadata.prototype['schema'] = undefined;

/**
 * How the results are sorted.
 * @member {Array.<module:model/SearchSort>} sort
 */
SearchMetadata.prototype['sort'] = undefined;

/**
 * The start time for the search.
 * @member {Date} startTime
 */
SearchMetadata.prototype['startTime'] = undefined;

/**
 * The status of the search results.
 * @member {String} status
 */
SearchMetadata.prototype['status'] = undefined;

/**
 * The sum of all aggregates returned in the result set.
 * @member {Number} sum
 */
SearchMetadata.prototype['sum'] = undefined;

/**
 * The number of top search results.
 * @member {Number} top
 */
SearchMetadata.prototype['top'] = undefined;

/**
 * The total number of search results.
 * @member {Number} total
 */
SearchMetadata.prototype['total'] = undefined;






export default SearchMetadata;

