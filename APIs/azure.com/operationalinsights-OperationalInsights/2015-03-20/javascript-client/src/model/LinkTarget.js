/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LinkTarget model module.
 * @module model/LinkTarget
 * @version 2015-03-20
 */
class LinkTarget {
    /**
     * Constructs a new <code>LinkTarget</code>.
     * Metadata for a workspace that isn&#39;t linked to an Azure subscription.
     * @alias module:model/LinkTarget
     */
    constructor() { 
        
        LinkTarget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinkTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkTarget} obj Optional instance to populate.
     * @return {module:model/LinkTarget} The populated <code>LinkTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkTarget();

            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('workspaceName')) {
                obj['workspaceName'] = ApiClient.convertToType(data['workspaceName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkTarget</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['workspaceName'] && !(typeof data['workspaceName'] === 'string' || data['workspaceName'] instanceof String)) {
            throw new Error("Expected the field `workspaceName` to be a primitive type in the JSON string but got " + data['workspaceName']);
        }

        return true;
    }


}



/**
 * The display name of the workspace.
 * @member {String} accountName
 */
LinkTarget.prototype['accountName'] = undefined;

/**
 * The GUID that uniquely identifies the workspace. 
 * @member {String} customerId
 */
LinkTarget.prototype['customerId'] = undefined;

/**
 * The location of the workspace.
 * @member {String} location
 */
LinkTarget.prototype['location'] = undefined;

/**
 * The DNS valid workspace name.
 * @member {String} workspaceName
 */
LinkTarget.prototype['workspaceName'] = undefined;






export default LinkTarget;

