/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkspacePurgeBodyFilters from './WorkspacePurgeBodyFilters';

/**
 * The WorkspacePurgeBody model module.
 * @module model/WorkspacePurgeBody
 * @version 2015-03-20
 */
class WorkspacePurgeBody {
    /**
     * Constructs a new <code>WorkspacePurgeBody</code>.
     * Describes the body of a purge request for an App Insights Workspace
     * @alias module:model/WorkspacePurgeBody
     * @param filters {Array.<module:model/WorkspacePurgeBodyFilters>} The set of columns and filters (queries) to run over them to purge the resulting data.
     * @param table {String} Table from which to purge data.
     */
    constructor(filters, table) { 
        
        WorkspacePurgeBody.initialize(this, filters, table);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, filters, table) { 
        obj['filters'] = filters;
        obj['table'] = table;
    }

    /**
     * Constructs a <code>WorkspacePurgeBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkspacePurgeBody} obj Optional instance to populate.
     * @return {module:model/WorkspacePurgeBody} The populated <code>WorkspacePurgeBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkspacePurgeBody();

            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [WorkspacePurgeBodyFilters]);
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = ApiClient.convertToType(data['table'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkspacePurgeBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkspacePurgeBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkspacePurgeBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                WorkspacePurgeBodyFilters.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['table'] && !(typeof data['table'] === 'string' || data['table'] instanceof String)) {
            throw new Error("Expected the field `table` to be a primitive type in the JSON string but got " + data['table']);
        }

        return true;
    }


}

WorkspacePurgeBody.RequiredProperties = ["filters", "table"];

/**
 * The set of columns and filters (queries) to run over them to purge the resulting data.
 * @member {Array.<module:model/WorkspacePurgeBodyFilters>} filters
 */
WorkspacePurgeBody.prototype['filters'] = undefined;

/**
 * Table from which to purge data.
 * @member {String} table
 */
WorkspacePurgeBody.prototype['table'] = undefined;






export default WorkspacePurgeBody;

