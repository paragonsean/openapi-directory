/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoreSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoreSummary::OAICoreSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoreSummary::OAICoreSummary() {
    this->initializeModel();
}

OAICoreSummary::~OAICoreSummary() {}

void OAICoreSummary::initializeModel() {

    m_number_of_documents_isSet = false;
    m_number_of_documents_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICoreSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoreSummary::fromJsonObject(QJsonObject json) {

    m_number_of_documents_isValid = ::OpenAPI::fromJsonValue(m_number_of_documents, json[QString("numberOfDocuments")]);
    m_number_of_documents_isSet = !json[QString("numberOfDocuments")].isNull() && m_number_of_documents_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICoreSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoreSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_number_of_documents_isSet) {
        obj.insert(QString("numberOfDocuments"), ::OpenAPI::toJsonValue(m_number_of_documents));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint64 OAICoreSummary::getNumberOfDocuments() const {
    return m_number_of_documents;
}
void OAICoreSummary::setNumberOfDocuments(const qint64 &number_of_documents) {
    m_number_of_documents = number_of_documents;
    m_number_of_documents_isSet = true;
}

bool OAICoreSummary::is_number_of_documents_Set() const{
    return m_number_of_documents_isSet;
}

bool OAICoreSummary::is_number_of_documents_Valid() const{
    return m_number_of_documents_isValid;
}

QString OAICoreSummary::getStatus() const {
    return m_status;
}
void OAICoreSummary::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICoreSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAICoreSummary::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICoreSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_of_documents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoreSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_number_of_documents_isValid && true;
}

} // namespace OpenAPI
