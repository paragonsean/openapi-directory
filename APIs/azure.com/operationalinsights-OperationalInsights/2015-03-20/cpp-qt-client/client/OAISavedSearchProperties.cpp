/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavedSearchProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavedSearchProperties::OAISavedSearchProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavedSearchProperties::OAISavedSearchProperties() {
    this->initializeModel();
}

OAISavedSearchProperties::~OAISavedSearchProperties() {}

void OAISavedSearchProperties::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISavedSearchProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavedSearchProperties::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISavedSearchProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavedSearchProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAISavedSearchProperties::getCategory() const {
    return m_category;
}
void OAISavedSearchProperties::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISavedSearchProperties::is_category_Set() const{
    return m_category_isSet;
}

bool OAISavedSearchProperties::is_category_Valid() const{
    return m_category_isValid;
}

QString OAISavedSearchProperties::getDisplayName() const {
    return m_display_name;
}
void OAISavedSearchProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISavedSearchProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISavedSearchProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAISavedSearchProperties::getQuery() const {
    return m_query;
}
void OAISavedSearchProperties::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISavedSearchProperties::is_query_Set() const{
    return m_query_isSet;
}

bool OAISavedSearchProperties::is_query_Valid() const{
    return m_query_isValid;
}

QList<OAITag> OAISavedSearchProperties::getTags() const {
    return m_tags;
}
void OAISavedSearchProperties::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISavedSearchProperties::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISavedSearchProperties::is_tags_Valid() const{
    return m_tags_isValid;
}

qint64 OAISavedSearchProperties::getVersion() const {
    return m_version;
}
void OAISavedSearchProperties::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISavedSearchProperties::is_version_Set() const{
    return m_version_isSet;
}

bool OAISavedSearchProperties::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISavedSearchProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavedSearchProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_isValid && m_display_name_isValid && m_query_isValid && true;
}

} // namespace OpenAPI
