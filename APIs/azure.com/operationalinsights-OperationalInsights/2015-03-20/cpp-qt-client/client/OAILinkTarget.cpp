/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkTarget::OAILinkTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkTarget::OAILinkTarget() {
    this->initializeModel();
}

OAILinkTarget::~OAILinkTarget() {}

void OAILinkTarget::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_workspace_name_isSet = false;
    m_workspace_name_isValid = false;
}

void OAILinkTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkTarget::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_workspace_name_isValid = ::OpenAPI::fromJsonValue(m_workspace_name, json[QString("workspaceName")]);
    m_workspace_name_isSet = !json[QString("workspaceName")].isNull() && m_workspace_name_isValid;
}

QString OAILinkTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_workspace_name_isSet) {
        obj.insert(QString("workspaceName"), ::OpenAPI::toJsonValue(m_workspace_name));
    }
    return obj;
}

QString OAILinkTarget::getAccountName() const {
    return m_account_name;
}
void OAILinkTarget::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAILinkTarget::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAILinkTarget::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAILinkTarget::getCustomerId() const {
    return m_customer_id;
}
void OAILinkTarget::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAILinkTarget::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAILinkTarget::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAILinkTarget::getLocation() const {
    return m_location;
}
void OAILinkTarget::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAILinkTarget::is_location_Set() const{
    return m_location_isSet;
}

bool OAILinkTarget::is_location_Valid() const{
    return m_location_isValid;
}

QString OAILinkTarget::getWorkspaceName() const {
    return m_workspace_name;
}
void OAILinkTarget::setWorkspaceName(const QString &workspace_name) {
    m_workspace_name = workspace_name;
    m_workspace_name_isSet = true;
}

bool OAILinkTarget::is_workspace_name_Set() const{
    return m_workspace_name_isSet;
}

bool OAILinkTarget::is_workspace_name_Valid() const{
    return m_workspace_name_isValid;
}

bool OAILinkTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
