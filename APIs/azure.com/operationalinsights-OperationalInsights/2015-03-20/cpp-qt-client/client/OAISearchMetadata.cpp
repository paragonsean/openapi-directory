/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchMetadata::OAISearchMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchMetadata::OAISearchMetadata() {
    this->initializeModel();
}

OAISearchMetadata::~OAISearchMetadata() {}

void OAISearchMetadata::initializeModel() {

    m_aggregated_grouping_fields_isSet = false;
    m_aggregated_grouping_fields_isValid = false;

    m_aggregated_value_field_isSet = false;
    m_aggregated_value_field_isValid = false;

    m_core_summaries_isSet = false;
    m_core_summaries_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_time_isSet = false;
    m_request_time_isValid = false;

    m_result_type_isSet = false;
    m_result_type_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAISearchMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchMetadata::fromJsonObject(QJsonObject json) {

    m_aggregated_grouping_fields_isValid = ::OpenAPI::fromJsonValue(m_aggregated_grouping_fields, json[QString("aggregatedGroupingFields")]);
    m_aggregated_grouping_fields_isSet = !json[QString("aggregatedGroupingFields")].isNull() && m_aggregated_grouping_fields_isValid;

    m_aggregated_value_field_isValid = ::OpenAPI::fromJsonValue(m_aggregated_value_field, json[QString("aggregatedValueField")]);
    m_aggregated_value_field_isSet = !json[QString("aggregatedValueField")].isNull() && m_aggregated_value_field_isValid;

    m_core_summaries_isValid = ::OpenAPI::fromJsonValue(m_core_summaries, json[QString("coreSummaries")]);
    m_core_summaries_isSet = !json[QString("coreSummaries")].isNull() && m_core_summaries_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("eTag")]);
    m_e_tag_isSet = !json[QString("eTag")].isNull() && m_e_tag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_request_time_isValid = ::OpenAPI::fromJsonValue(m_request_time, json[QString("requestTime")]);
    m_request_time_isSet = !json[QString("requestTime")].isNull() && m_request_time_isValid;

    m_result_type_isValid = ::OpenAPI::fromJsonValue(m_result_type, json[QString("resultType")]);
    m_result_type_isSet = !json[QString("resultType")].isNull() && m_result_type_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("sum")]);
    m_sum_isSet = !json[QString("sum")].isNull() && m_sum_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAISearchMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregated_grouping_fields_isSet) {
        obj.insert(QString("aggregatedGroupingFields"), ::OpenAPI::toJsonValue(m_aggregated_grouping_fields));
    }
    if (m_aggregated_value_field_isSet) {
        obj.insert(QString("aggregatedValueField"), ::OpenAPI::toJsonValue(m_aggregated_value_field));
    }
    if (m_core_summaries.size() > 0) {
        obj.insert(QString("coreSummaries"), ::OpenAPI::toJsonValue(m_core_summaries));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("eTag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_time_isSet) {
        obj.insert(QString("requestTime"), ::OpenAPI::toJsonValue(m_request_time));
    }
    if (m_result_type_isSet) {
        obj.insert(QString("resultType"), ::OpenAPI::toJsonValue(m_result_type));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_sort.size() > 0) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sum_isSet) {
        obj.insert(QString("sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QString OAISearchMetadata::getAggregatedGroupingFields() const {
    return m_aggregated_grouping_fields;
}
void OAISearchMetadata::setAggregatedGroupingFields(const QString &aggregated_grouping_fields) {
    m_aggregated_grouping_fields = aggregated_grouping_fields;
    m_aggregated_grouping_fields_isSet = true;
}

bool OAISearchMetadata::is_aggregated_grouping_fields_Set() const{
    return m_aggregated_grouping_fields_isSet;
}

bool OAISearchMetadata::is_aggregated_grouping_fields_Valid() const{
    return m_aggregated_grouping_fields_isValid;
}

QString OAISearchMetadata::getAggregatedValueField() const {
    return m_aggregated_value_field;
}
void OAISearchMetadata::setAggregatedValueField(const QString &aggregated_value_field) {
    m_aggregated_value_field = aggregated_value_field;
    m_aggregated_value_field_isSet = true;
}

bool OAISearchMetadata::is_aggregated_value_field_Set() const{
    return m_aggregated_value_field_isSet;
}

bool OAISearchMetadata::is_aggregated_value_field_Valid() const{
    return m_aggregated_value_field_isValid;
}

QList<OAICoreSummary> OAISearchMetadata::getCoreSummaries() const {
    return m_core_summaries;
}
void OAISearchMetadata::setCoreSummaries(const QList<OAICoreSummary> &core_summaries) {
    m_core_summaries = core_summaries;
    m_core_summaries_isSet = true;
}

bool OAISearchMetadata::is_core_summaries_Set() const{
    return m_core_summaries_isSet;
}

bool OAISearchMetadata::is_core_summaries_Valid() const{
    return m_core_summaries_isValid;
}

QString OAISearchMetadata::getETag() const {
    return m_e_tag;
}
void OAISearchMetadata::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAISearchMetadata::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAISearchMetadata::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

QString OAISearchMetadata::getId() const {
    return m_id;
}
void OAISearchMetadata::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISearchMetadata::is_id_Set() const{
    return m_id_isSet;
}

bool OAISearchMetadata::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAISearchMetadata::getLastUpdated() const {
    return m_last_updated;
}
void OAISearchMetadata::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAISearchMetadata::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAISearchMetadata::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint64 OAISearchMetadata::getMax() const {
    return m_max;
}
void OAISearchMetadata::setMax(const qint64 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAISearchMetadata::is_max_Set() const{
    return m_max_isSet;
}

bool OAISearchMetadata::is_max_Valid() const{
    return m_max_isValid;
}

QString OAISearchMetadata::getRequestId() const {
    return m_request_id;
}
void OAISearchMetadata::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAISearchMetadata::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAISearchMetadata::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint64 OAISearchMetadata::getRequestTime() const {
    return m_request_time;
}
void OAISearchMetadata::setRequestTime(const qint64 &request_time) {
    m_request_time = request_time;
    m_request_time_isSet = true;
}

bool OAISearchMetadata::is_request_time_Set() const{
    return m_request_time_isSet;
}

bool OAISearchMetadata::is_request_time_Valid() const{
    return m_request_time_isValid;
}

QString OAISearchMetadata::getResultType() const {
    return m_result_type;
}
void OAISearchMetadata::setResultType(const QString &result_type) {
    m_result_type = result_type;
    m_result_type_isSet = true;
}

bool OAISearchMetadata::is_result_type_Set() const{
    return m_result_type_isSet;
}

bool OAISearchMetadata::is_result_type_Valid() const{
    return m_result_type_isValid;
}

OAISearchMetadataSchema OAISearchMetadata::getSchema() const {
    return m_schema;
}
void OAISearchMetadata::setSchema(const OAISearchMetadataSchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAISearchMetadata::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAISearchMetadata::is_schema_Valid() const{
    return m_schema_isValid;
}

QList<OAISearchSort> OAISearchMetadata::getSort() const {
    return m_sort;
}
void OAISearchMetadata::setSort(const QList<OAISearchSort> &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAISearchMetadata::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAISearchMetadata::is_sort_Valid() const{
    return m_sort_isValid;
}

QDateTime OAISearchMetadata::getStartTime() const {
    return m_start_time;
}
void OAISearchMetadata::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAISearchMetadata::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAISearchMetadata::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAISearchMetadata::getStatus() const {
    return m_status;
}
void OAISearchMetadata::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISearchMetadata::is_status_Set() const{
    return m_status_isSet;
}

bool OAISearchMetadata::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAISearchMetadata::getSum() const {
    return m_sum;
}
void OAISearchMetadata::setSum(const qint64 &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAISearchMetadata::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAISearchMetadata::is_sum_Valid() const{
    return m_sum_isValid;
}

qint64 OAISearchMetadata::getTop() const {
    return m_top;
}
void OAISearchMetadata::setTop(const qint64 &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAISearchMetadata::is_top_Set() const{
    return m_top_isSet;
}

bool OAISearchMetadata::is_top_Valid() const{
    return m_top_isValid;
}

qint64 OAISearchMetadata::getTotal() const {
    return m_total;
}
void OAISearchMetadata::setTotal(const qint64 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAISearchMetadata::is_total_Set() const{
    return m_total_isSet;
}

bool OAISearchMetadata::is_total_Valid() const{
    return m_total_isValid;
}

bool OAISearchMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregated_grouping_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregated_value_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
