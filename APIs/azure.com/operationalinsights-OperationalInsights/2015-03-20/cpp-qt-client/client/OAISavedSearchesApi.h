/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISavedSearchesApi_H
#define OAI_OAISavedSearchesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISavedSearch.h"
#include "OAISavedSearchesListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISavedSearchesApi : public QObject {
    Q_OBJECT

public:
    OAISavedSearchesApi(const int timeOut = 0);
    ~OAISavedSearchesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  saved_search_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISavedSearch [required]
    */
    virtual void savedSearchesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &saved_search_id, const QString &api_version, const OAISavedSearch &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  saved_search_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void savedSearchesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &saved_search_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  saved_search_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void savedSearchesGet(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &saved_search_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void savedSearchesListByWorkspace(const QString &resource_group_name, const QString &workspace_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void savedSearchesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void savedSearchesDeleteCallback(OAIHttpRequestWorker *worker);
    void savedSearchesGetCallback(OAIHttpRequestWorker *worker);
    void savedSearchesListByWorkspaceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void savedSearchesCreateOrUpdateSignal(OAISavedSearch summary);
    void savedSearchesDeleteSignal();
    void savedSearchesGetSignal(OAISavedSearch summary);
    void savedSearchesListByWorkspaceSignal(OAISavedSearchesListResult summary);


    void savedSearchesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISavedSearch summary);
    void savedSearchesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void savedSearchesGetSignalFull(OAIHttpRequestWorker *worker, OAISavedSearch summary);
    void savedSearchesListByWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAISavedSearchesListResult summary);

    Q_DECL_DEPRECATED_X("Use savedSearchesCreateOrUpdateSignalError() instead")
    void savedSearchesCreateOrUpdateSignalE(OAISavedSearch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearchesCreateOrUpdateSignalError(OAISavedSearch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedSearchesDeleteSignalError() instead")
    void savedSearchesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearchesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedSearchesGetSignalError() instead")
    void savedSearchesGetSignalE(OAISavedSearch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearchesGetSignalError(OAISavedSearch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedSearchesListByWorkspaceSignalError() instead")
    void savedSearchesListByWorkspaceSignalE(OAISavedSearchesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearchesListByWorkspaceSignalError(OAISavedSearchesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use savedSearchesCreateOrUpdateSignalErrorFull() instead")
    void savedSearchesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearchesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedSearchesDeleteSignalErrorFull() instead")
    void savedSearchesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearchesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedSearchesGetSignalErrorFull() instead")
    void savedSearchesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearchesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedSearchesListByWorkspaceSignalErrorFull() instead")
    void savedSearchesListByWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearchesListByWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
