/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchSchemaValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchSchemaValue::OAISearchSchemaValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchSchemaValue::OAISearchSchemaValue() {
    this->initializeModel();
}

OAISearchSchemaValue::~OAISearchSchemaValue() {}

void OAISearchSchemaValue::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_facet_isSet = false;
    m_facet_isValid = false;

    m_indexed_isSet = false;
    m_indexed_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_type_isSet = false;
    m_owner_type_isValid = false;

    m_stored_isSet = false;
    m_stored_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISearchSchemaValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchSchemaValue::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_facet_isValid = ::OpenAPI::fromJsonValue(m_facet, json[QString("facet")]);
    m_facet_isSet = !json[QString("facet")].isNull() && m_facet_isValid;

    m_indexed_isValid = ::OpenAPI::fromJsonValue(m_indexed, json[QString("indexed")]);
    m_indexed_isSet = !json[QString("indexed")].isNull() && m_indexed_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_type_isValid = ::OpenAPI::fromJsonValue(m_owner_type, json[QString("ownerType")]);
    m_owner_type_isSet = !json[QString("ownerType")].isNull() && m_owner_type_isValid;

    m_stored_isValid = ::OpenAPI::fromJsonValue(m_stored, json[QString("stored")]);
    m_stored_isSet = !json[QString("stored")].isNull() && m_stored_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISearchSchemaValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchSchemaValue::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_facet_isSet) {
        obj.insert(QString("facet"), ::OpenAPI::toJsonValue(m_facet));
    }
    if (m_indexed_isSet) {
        obj.insert(QString("indexed"), ::OpenAPI::toJsonValue(m_indexed));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_type.size() > 0) {
        obj.insert(QString("ownerType"), ::OpenAPI::toJsonValue(m_owner_type));
    }
    if (m_stored_isSet) {
        obj.insert(QString("stored"), ::OpenAPI::toJsonValue(m_stored));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISearchSchemaValue::getDisplayName() const {
    return m_display_name;
}
void OAISearchSchemaValue::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISearchSchemaValue::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISearchSchemaValue::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAISearchSchemaValue::isFacet() const {
    return m_facet;
}
void OAISearchSchemaValue::setFacet(const bool &facet) {
    m_facet = facet;
    m_facet_isSet = true;
}

bool OAISearchSchemaValue::is_facet_Set() const{
    return m_facet_isSet;
}

bool OAISearchSchemaValue::is_facet_Valid() const{
    return m_facet_isValid;
}

bool OAISearchSchemaValue::isIndexed() const {
    return m_indexed;
}
void OAISearchSchemaValue::setIndexed(const bool &indexed) {
    m_indexed = indexed;
    m_indexed_isSet = true;
}

bool OAISearchSchemaValue::is_indexed_Set() const{
    return m_indexed_isSet;
}

bool OAISearchSchemaValue::is_indexed_Valid() const{
    return m_indexed_isValid;
}

QString OAISearchSchemaValue::getName() const {
    return m_name;
}
void OAISearchSchemaValue::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISearchSchemaValue::is_name_Set() const{
    return m_name_isSet;
}

bool OAISearchSchemaValue::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAISearchSchemaValue::getOwnerType() const {
    return m_owner_type;
}
void OAISearchSchemaValue::setOwnerType(const QList<QString> &owner_type) {
    m_owner_type = owner_type;
    m_owner_type_isSet = true;
}

bool OAISearchSchemaValue::is_owner_type_Set() const{
    return m_owner_type_isSet;
}

bool OAISearchSchemaValue::is_owner_type_Valid() const{
    return m_owner_type_isValid;
}

bool OAISearchSchemaValue::isStored() const {
    return m_stored;
}
void OAISearchSchemaValue::setStored(const bool &stored) {
    m_stored = stored;
    m_stored_isSet = true;
}

bool OAISearchSchemaValue::is_stored_Set() const{
    return m_stored_isSet;
}

bool OAISearchSchemaValue::is_stored_Valid() const{
    return m_stored_isValid;
}

QString OAISearchSchemaValue::getType() const {
    return m_type;
}
void OAISearchSchemaValue::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISearchSchemaValue::is_type_Set() const{
    return m_type_isSet;
}

bool OAISearchSchemaValue::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISearchSchemaValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchSchemaValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_facet_isValid && m_indexed_isValid && m_stored_isValid && true;
}

} // namespace OpenAPI
