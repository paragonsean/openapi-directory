/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspacePurgeBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspacePurgeBody::OAIWorkspacePurgeBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspacePurgeBody::OAIWorkspacePurgeBody() {
    this->initializeModel();
}

OAIWorkspacePurgeBody::~OAIWorkspacePurgeBody() {}

void OAIWorkspacePurgeBody::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;
}

void OAIWorkspacePurgeBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspacePurgeBody::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;
}

QString OAIWorkspacePurgeBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspacePurgeBody::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_table_isSet) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    return obj;
}

QList<OAIWorkspacePurgeBodyFilters> OAIWorkspacePurgeBody::getFilters() const {
    return m_filters;
}
void OAIWorkspacePurgeBody::setFilters(const QList<OAIWorkspacePurgeBodyFilters> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIWorkspacePurgeBody::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIWorkspacePurgeBody::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIWorkspacePurgeBody::getTable() const {
    return m_table;
}
void OAIWorkspacePurgeBody::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIWorkspacePurgeBody::is_table_Set() const{
    return m_table_isSet;
}

bool OAIWorkspacePurgeBody::is_table_Valid() const{
    return m_table_isValid;
}

bool OAIWorkspacePurgeBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspacePurgeBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filters_isValid && m_table_isValid && true;
}

} // namespace OpenAPI
