/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkspacesApi_H
#define OAI_OAIWorkspacesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILinkTarget.h"
#include "OAISearchGetSchemaResponse.h"
#include "OAISharedKeys.h"
#include "OAIWorkspacePurgeBody.h"
#include "OAIWorkspacePurgeResponse.h"
#include "OAIWorkspacePurgeStatusResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkspacesApi : public QObject {
    Q_OBJECT

public:
    OAIWorkspacesApi(const int timeOut = 0);
    ~OAIWorkspacesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  gateway_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workspacesDeleteGateways(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &gateway_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  purge_id QString [required]
    */
    virtual void workspacesGetPurgeStatus(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &workspace_name, const QString &purge_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void workspacesGetSchema(const QString &resource_group_name, const QString &workspace_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workspacesListKeys(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void workspacesListLinkTargets(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  body OAIWorkspacePurgeBody [required]
    */
    virtual void workspacesPurge(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &workspace_name, const OAIWorkspacePurgeBody &body);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workspacesRegenerateSharedKeys(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workspacesDeleteGatewaysCallback(OAIHttpRequestWorker *worker);
    void workspacesGetPurgeStatusCallback(OAIHttpRequestWorker *worker);
    void workspacesGetSchemaCallback(OAIHttpRequestWorker *worker);
    void workspacesListKeysCallback(OAIHttpRequestWorker *worker);
    void workspacesListLinkTargetsCallback(OAIHttpRequestWorker *worker);
    void workspacesPurgeCallback(OAIHttpRequestWorker *worker);
    void workspacesRegenerateSharedKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workspacesDeleteGatewaysSignal();
    void workspacesGetPurgeStatusSignal(OAIWorkspacePurgeStatusResponse summary);
    void workspacesGetSchemaSignal(OAISearchGetSchemaResponse summary);
    void workspacesListKeysSignal(OAISharedKeys summary);
    void workspacesListLinkTargetsSignal(QList<OAILinkTarget> summary);
    void workspacesPurgeSignal(OAIWorkspacePurgeResponse summary);
    void workspacesRegenerateSharedKeysSignal(OAISharedKeys summary);


    void workspacesDeleteGatewaysSignalFull(OAIHttpRequestWorker *worker);
    void workspacesGetPurgeStatusSignalFull(OAIHttpRequestWorker *worker, OAIWorkspacePurgeStatusResponse summary);
    void workspacesGetSchemaSignalFull(OAIHttpRequestWorker *worker, OAISearchGetSchemaResponse summary);
    void workspacesListKeysSignalFull(OAIHttpRequestWorker *worker, OAISharedKeys summary);
    void workspacesListLinkTargetsSignalFull(OAIHttpRequestWorker *worker, QList<OAILinkTarget> summary);
    void workspacesPurgeSignalFull(OAIHttpRequestWorker *worker, OAIWorkspacePurgeResponse summary);
    void workspacesRegenerateSharedKeysSignalFull(OAIHttpRequestWorker *worker, OAISharedKeys summary);

    Q_DECL_DEPRECATED_X("Use workspacesDeleteGatewaysSignalError() instead")
    void workspacesDeleteGatewaysSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesDeleteGatewaysSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesGetPurgeStatusSignalError() instead")
    void workspacesGetPurgeStatusSignalE(OAIWorkspacePurgeStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesGetPurgeStatusSignalError(OAIWorkspacePurgeStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesGetSchemaSignalError() instead")
    void workspacesGetSchemaSignalE(OAISearchGetSchemaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesGetSchemaSignalError(OAISearchGetSchemaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesListKeysSignalError() instead")
    void workspacesListKeysSignalE(OAISharedKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesListKeysSignalError(OAISharedKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesListLinkTargetsSignalError() instead")
    void workspacesListLinkTargetsSignalE(QList<OAILinkTarget> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesListLinkTargetsSignalError(QList<OAILinkTarget> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesPurgeSignalError() instead")
    void workspacesPurgeSignalE(OAIWorkspacePurgeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesPurgeSignalError(OAIWorkspacePurgeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesRegenerateSharedKeysSignalError() instead")
    void workspacesRegenerateSharedKeysSignalE(OAISharedKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesRegenerateSharedKeysSignalError(OAISharedKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workspacesDeleteGatewaysSignalErrorFull() instead")
    void workspacesDeleteGatewaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesDeleteGatewaysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesGetPurgeStatusSignalErrorFull() instead")
    void workspacesGetPurgeStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesGetPurgeStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesGetSchemaSignalErrorFull() instead")
    void workspacesGetSchemaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesGetSchemaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesListKeysSignalErrorFull() instead")
    void workspacesListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesListLinkTargetsSignalErrorFull() instead")
    void workspacesListLinkTargetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesListLinkTargetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesPurgeSignalErrorFull() instead")
    void workspacesPurgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesPurgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesRegenerateSharedKeysSignalErrorFull() instead")
    void workspacesRegenerateSharedKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesRegenerateSharedKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
