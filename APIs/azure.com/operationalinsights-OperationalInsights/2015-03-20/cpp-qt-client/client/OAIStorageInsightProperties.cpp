/**
 * Azure Log Analytics
 * Azure Log Analytics API reference.
 *
 * The version of the OpenAPI document: 2015-03-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageInsightProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageInsightProperties::OAIStorageInsightProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageInsightProperties::OAIStorageInsightProperties() {
    this->initializeModel();
}

OAIStorageInsightProperties::~OAIStorageInsightProperties() {}

void OAIStorageInsightProperties::initializeModel() {

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_storage_account_isSet = false;
    m_storage_account_isValid = false;

    m_tables_isSet = false;
    m_tables_isValid = false;
}

void OAIStorageInsightProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageInsightProperties::fromJsonObject(QJsonObject json) {

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("containers")]);
    m_containers_isSet = !json[QString("containers")].isNull() && m_containers_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_storage_account_isValid = ::OpenAPI::fromJsonValue(m_storage_account, json[QString("storageAccount")]);
    m_storage_account_isSet = !json[QString("storageAccount")].isNull() && m_storage_account_isValid;

    m_tables_isValid = ::OpenAPI::fromJsonValue(m_tables, json[QString("tables")]);
    m_tables_isSet = !json[QString("tables")].isNull() && m_tables_isValid;
}

QString OAIStorageInsightProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageInsightProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_containers.size() > 0) {
        obj.insert(QString("containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_storage_account.isSet()) {
        obj.insert(QString("storageAccount"), ::OpenAPI::toJsonValue(m_storage_account));
    }
    if (m_tables.size() > 0) {
        obj.insert(QString("tables"), ::OpenAPI::toJsonValue(m_tables));
    }
    return obj;
}

QList<QString> OAIStorageInsightProperties::getContainers() const {
    return m_containers;
}
void OAIStorageInsightProperties::setContainers(const QList<QString> &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAIStorageInsightProperties::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAIStorageInsightProperties::is_containers_Valid() const{
    return m_containers_isValid;
}

OAIStorageInsightStatus OAIStorageInsightProperties::getStatus() const {
    return m_status;
}
void OAIStorageInsightProperties::setStatus(const OAIStorageInsightStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStorageInsightProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStorageInsightProperties::is_status_Valid() const{
    return m_status_isValid;
}

OAIStorageAccount OAIStorageInsightProperties::getStorageAccount() const {
    return m_storage_account;
}
void OAIStorageInsightProperties::setStorageAccount(const OAIStorageAccount &storage_account) {
    m_storage_account = storage_account;
    m_storage_account_isSet = true;
}

bool OAIStorageInsightProperties::is_storage_account_Set() const{
    return m_storage_account_isSet;
}

bool OAIStorageInsightProperties::is_storage_account_Valid() const{
    return m_storage_account_isValid;
}

QList<QString> OAIStorageInsightProperties::getTables() const {
    return m_tables;
}
void OAIStorageInsightProperties::setTables(const QList<QString> &tables) {
    m_tables = tables;
    m_tables_isSet = true;
}

bool OAIStorageInsightProperties::is_tables_Set() const{
    return m_tables_isSet;
}

bool OAIStorageInsightProperties::is_tables_Valid() const{
    return m_tables_isValid;
}

bool OAIStorageInsightProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_containers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageInsightProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_storage_account_isValid && true;
}

} // namespace OpenAPI
