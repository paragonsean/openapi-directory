/*
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Destination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data Export properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:06.017031-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataExportProperties {
  public static final String SERIALIZED_NAME_ALL_TABLES = "allTables";
  @SerializedName(SERIALIZED_NAME_ALL_TABLES)
  private Boolean allTables;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_DATA_EXPORT_ID = "dataExportId";
  @SerializedName(SERIALIZED_NAME_DATA_EXPORT_ID)
  private String dataExportId;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private Destination destination;

  public static final String SERIALIZED_NAME_ENABLE = "enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  private Boolean enable;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "lastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private String lastModifiedDate;

  public static final String SERIALIZED_NAME_TABLE_NAMES = "tableNames";
  @SerializedName(SERIALIZED_NAME_TABLE_NAMES)
  private List<String> tableNames = new ArrayList<>();

  public DataExportProperties() {
  }

  public DataExportProperties allTables(Boolean allTables) {
    this.allTables = allTables;
    return this;
  }

  /**
   * When ‘true’, all workspace&#39;s tables are exported.
   * @return allTables
   */
  @javax.annotation.Nullable
  public Boolean getAllTables() {
    return allTables;
  }

  public void setAllTables(Boolean allTables) {
    this.allTables = allTables;
  }


  public DataExportProperties createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The latest data export rule modification time.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public DataExportProperties dataExportId(String dataExportId) {
    this.dataExportId = dataExportId;
    return this;
  }

  /**
   * The data export rule ID.
   * @return dataExportId
   */
  @javax.annotation.Nullable
  public String getDataExportId() {
    return dataExportId;
  }

  public void setDataExportId(String dataExportId) {
    this.dataExportId = dataExportId;
  }


  public DataExportProperties destination(Destination destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public Destination getDestination() {
    return destination;
  }

  public void setDestination(Destination destination) {
    this.destination = destination;
  }


  public DataExportProperties enable(Boolean enable) {
    this.enable = enable;
    return this;
  }

  /**
   * Active when enabled.
   * @return enable
   */
  @javax.annotation.Nullable
  public Boolean getEnable() {
    return enable;
  }

  public void setEnable(Boolean enable) {
    this.enable = enable;
  }


  public DataExportProperties lastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

  /**
   * Date and time when the export was last modified.
   * @return lastModifiedDate
   */
  @javax.annotation.Nullable
  public String getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public DataExportProperties tableNames(List<String> tableNames) {
    this.tableNames = tableNames;
    return this;
  }

  public DataExportProperties addTableNamesItem(String tableNamesItem) {
    if (this.tableNames == null) {
      this.tableNames = new ArrayList<>();
    }
    this.tableNames.add(tableNamesItem);
    return this;
  }

  /**
   * An array of tables to export, for example: [“Heartbeat, SecurityEvent”].
   * @return tableNames
   */
  @javax.annotation.Nullable
  public List<String> getTableNames() {
    return tableNames;
  }

  public void setTableNames(List<String> tableNames) {
    this.tableNames = tableNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataExportProperties dataExportProperties = (DataExportProperties) o;
    return Objects.equals(this.allTables, dataExportProperties.allTables) &&
        Objects.equals(this.createdDate, dataExportProperties.createdDate) &&
        Objects.equals(this.dataExportId, dataExportProperties.dataExportId) &&
        Objects.equals(this.destination, dataExportProperties.destination) &&
        Objects.equals(this.enable, dataExportProperties.enable) &&
        Objects.equals(this.lastModifiedDate, dataExportProperties.lastModifiedDate) &&
        Objects.equals(this.tableNames, dataExportProperties.tableNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allTables, createdDate, dataExportId, destination, enable, lastModifiedDate, tableNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataExportProperties {\n");
    sb.append("    allTables: ").append(toIndentedString(allTables)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    dataExportId: ").append(toIndentedString(dataExportId)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    tableNames: ").append(toIndentedString(tableNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allTables");
    openapiFields.add("createdDate");
    openapiFields.add("dataExportId");
    openapiFields.add("destination");
    openapiFields.add("enable");
    openapiFields.add("lastModifiedDate");
    openapiFields.add("tableNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataExportProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataExportProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataExportProperties is not found in the empty JSON string", DataExportProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataExportProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataExportProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      if ((jsonObj.get("dataExportId") != null && !jsonObj.get("dataExportId").isJsonNull()) && !jsonObj.get("dataExportId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataExportId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataExportId").toString()));
      }
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        Destination.validateJsonElement(jsonObj.get("destination"));
      }
      if ((jsonObj.get("lastModifiedDate") != null && !jsonObj.get("lastModifiedDate").isJsonNull()) && !jsonObj.get("lastModifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedDate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tableNames") != null && !jsonObj.get("tableNames").isJsonNull() && !jsonObj.get("tableNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableNames` to be an array in the JSON string but got `%s`", jsonObj.get("tableNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataExportProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataExportProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataExportProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataExportProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DataExportProperties>() {
           @Override
           public void write(JsonWriter out, DataExportProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataExportProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataExportProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataExportProperties
   * @throws IOException if the JSON string is invalid with respect to DataExportProperties
   */
  public static DataExportProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataExportProperties.class);
  }

  /**
   * Convert an instance of DataExportProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

