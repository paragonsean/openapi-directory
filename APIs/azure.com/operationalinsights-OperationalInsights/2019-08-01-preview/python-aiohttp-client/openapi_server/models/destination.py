# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_meta_data import DestinationMetaData
from openapi_server import util


class Destination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta_data: DestinationMetaData=None, resource_id: str=None, type: str=None):
        """Destination - a model defined in OpenAPI

        :param meta_data: The meta_data of this Destination.
        :param resource_id: The resource_id of this Destination.
        :param type: The type of this Destination.
        """
        self.openapi_types = {
            'meta_data': DestinationMetaData,
            'resource_id': str,
            'type': str
        }

        self.attribute_map = {
            'meta_data': 'metaData',
            'resource_id': 'resourceId',
            'type': 'type'
        }

        self._meta_data = meta_data
        self._resource_id = resource_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Destination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destination of this Destination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta_data(self):
        """Gets the meta_data of this Destination.


        :return: The meta_data of this Destination.
        :rtype: DestinationMetaData
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this Destination.


        :param meta_data: The meta_data of this Destination.
        :type meta_data: DestinationMetaData
        """

        self._meta_data = meta_data

    @property
    def resource_id(self):
        """Gets the resource_id of this Destination.

        The destination resource ID. This can be copied from the Properties entry of the destination resource in Azure.

        :return: The resource_id of this Destination.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this Destination.

        The destination resource ID. This can be copied from the Properties entry of the destination resource in Azure.

        :param resource_id: The resource_id of this Destination.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def type(self):
        """Gets the type of this Destination.

        The type of the destination resource

        :return: The type of this Destination.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Destination.

        The type of the destination resource

        :param type: The type of this Destination.
        :type type: str
        """
        allowed_values = ["StorageAccount", "EventHub"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
