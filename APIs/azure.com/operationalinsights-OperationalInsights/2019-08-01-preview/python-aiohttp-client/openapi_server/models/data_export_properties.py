# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination import Destination
from openapi_server import util


class DataExportProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_tables: bool=None, created_date: str=None, data_export_id: str=None, destination: Destination=None, enable: bool=None, last_modified_date: str=None, table_names: List[str]=None):
        """DataExportProperties - a model defined in OpenAPI

        :param all_tables: The all_tables of this DataExportProperties.
        :param created_date: The created_date of this DataExportProperties.
        :param data_export_id: The data_export_id of this DataExportProperties.
        :param destination: The destination of this DataExportProperties.
        :param enable: The enable of this DataExportProperties.
        :param last_modified_date: The last_modified_date of this DataExportProperties.
        :param table_names: The table_names of this DataExportProperties.
        """
        self.openapi_types = {
            'all_tables': bool,
            'created_date': str,
            'data_export_id': str,
            'destination': Destination,
            'enable': bool,
            'last_modified_date': str,
            'table_names': List[str]
        }

        self.attribute_map = {
            'all_tables': 'allTables',
            'created_date': 'createdDate',
            'data_export_id': 'dataExportId',
            'destination': 'destination',
            'enable': 'enable',
            'last_modified_date': 'lastModifiedDate',
            'table_names': 'tableNames'
        }

        self._all_tables = all_tables
        self._created_date = created_date
        self._data_export_id = data_export_id
        self._destination = destination
        self._enable = enable
        self._last_modified_date = last_modified_date
        self._table_names = table_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataExportProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataExportProperties of this DataExportProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_tables(self):
        """Gets the all_tables of this DataExportProperties.

        When ‘true’, all workspace's tables are exported.

        :return: The all_tables of this DataExportProperties.
        :rtype: bool
        """
        return self._all_tables

    @all_tables.setter
    def all_tables(self, all_tables):
        """Sets the all_tables of this DataExportProperties.

        When ‘true’, all workspace's tables are exported.

        :param all_tables: The all_tables of this DataExportProperties.
        :type all_tables: bool
        """

        self._all_tables = all_tables

    @property
    def created_date(self):
        """Gets the created_date of this DataExportProperties.

        The latest data export rule modification time.

        :return: The created_date of this DataExportProperties.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this DataExportProperties.

        The latest data export rule modification time.

        :param created_date: The created_date of this DataExportProperties.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def data_export_id(self):
        """Gets the data_export_id of this DataExportProperties.

        The data export rule ID.

        :return: The data_export_id of this DataExportProperties.
        :rtype: str
        """
        return self._data_export_id

    @data_export_id.setter
    def data_export_id(self, data_export_id):
        """Sets the data_export_id of this DataExportProperties.

        The data export rule ID.

        :param data_export_id: The data_export_id of this DataExportProperties.
        :type data_export_id: str
        """

        self._data_export_id = data_export_id

    @property
    def destination(self):
        """Gets the destination of this DataExportProperties.


        :return: The destination of this DataExportProperties.
        :rtype: Destination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this DataExportProperties.


        :param destination: The destination of this DataExportProperties.
        :type destination: Destination
        """

        self._destination = destination

    @property
    def enable(self):
        """Gets the enable of this DataExportProperties.

        Active when enabled.

        :return: The enable of this DataExportProperties.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this DataExportProperties.

        Active when enabled.

        :param enable: The enable of this DataExportProperties.
        :type enable: bool
        """

        self._enable = enable

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this DataExportProperties.

        Date and time when the export was last modified.

        :return: The last_modified_date of this DataExportProperties.
        :rtype: str
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this DataExportProperties.

        Date and time when the export was last modified.

        :param last_modified_date: The last_modified_date of this DataExportProperties.
        :type last_modified_date: str
        """

        self._last_modified_date = last_modified_date

    @property
    def table_names(self):
        """Gets the table_names of this DataExportProperties.

        An array of tables to export, for example: [“Heartbeat, SecurityEvent”].

        :return: The table_names of this DataExportProperties.
        :rtype: List[str]
        """
        return self._table_names

    @table_names.setter
    def table_names(self, table_names):
        """Sets the table_names of this DataExportProperties.

        An array of tables to export, for example: [“Heartbeat, SecurityEvent”].

        :param table_names: The table_names of this DataExportProperties.
        :type table_names: List[str]
        """

        self._table_names = table_names
