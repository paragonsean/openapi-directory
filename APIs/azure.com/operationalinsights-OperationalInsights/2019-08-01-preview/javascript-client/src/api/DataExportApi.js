/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataExport from '../model/DataExport';
import DataExportListResult from '../model/DataExportListResult';
import ErrorResponse from '../model/ErrorResponse';

/**
* DataExport service.
* @module api/DataExportApi
* @version 2019-08-01-preview
*/
export default class DataExportApi {

    /**
    * Constructs a new DataExportApi. 
    * @alias module:api/DataExportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dataExportCreateOrUpdate operation.
     * @callback module:api/DataExportApi~dataExportCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataExport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a data export.
     * @param {String} subscriptionId The workspace's resource subscription ID.
     * @param {String} resourceGroupName The workspace's resource group name.
     * @param {String} workspaceName The Log Analytics workspace name.
     * @param {String} dataExportName The data export rule name.
     * @param {String} apiVersion The client API version.
     * @param {module:model/DataExport} parameters The parameters required to create or update a data export.
     * @param {module:api/DataExportApi~dataExportCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataExport}
     */
    dataExportCreateOrUpdate(subscriptionId, resourceGroupName, workspaceName, dataExportName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataExportCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataExportCreateOrUpdate");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling dataExportCreateOrUpdate");
      }
      // verify the required parameter 'dataExportName' is set
      if (dataExportName === undefined || dataExportName === null) {
        throw new Error("Missing the required parameter 'dataExportName' when calling dataExportCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataExportCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling dataExportCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'dataExportName': dataExportName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataExport;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataExports/{dataExportName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataExportDelete operation.
     * @callback module:api/DataExportApi~dataExportDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified data export in a given workspace..
     * @param {String} subscriptionId The workspace's resource subscription ID.
     * @param {String} resourceGroupName The workspace's resource group name.
     * @param {String} workspaceName The Log Analytics workspace name.
     * @param {String} dataExportName The data export rule name.
     * @param {String} apiVersion The client API version.
     * @param {module:api/DataExportApi~dataExportDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dataExportDelete(subscriptionId, resourceGroupName, workspaceName, dataExportName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataExportDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataExportDelete");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling dataExportDelete");
      }
      // verify the required parameter 'dataExportName' is set
      if (dataExportName === undefined || dataExportName === null) {
        throw new Error("Missing the required parameter 'dataExportName' when calling dataExportDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataExportDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'dataExportName': dataExportName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataExports/{dataExportName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataExportGet operation.
     * @callback module:api/DataExportApi~dataExportGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataExport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a data export instance.
     * @param {String} subscriptionId The workspace's resource subscription ID.
     * @param {String} resourceGroupName The workspace's resource group name.
     * @param {String} workspaceName The Log Analytics workspace name.
     * @param {String} dataExportName The data export rule name.
     * @param {String} apiVersion The client API version.
     * @param {module:api/DataExportApi~dataExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataExport}
     */
    dataExportGet(subscriptionId, resourceGroupName, workspaceName, dataExportName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataExportGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataExportGet");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling dataExportGet");
      }
      // verify the required parameter 'dataExportName' is set
      if (dataExportName === undefined || dataExportName === null) {
        throw new Error("Missing the required parameter 'dataExportName' when calling dataExportGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataExportGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'dataExportName': dataExportName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataExport;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataExports/{dataExportName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataExportListByWorkspace operation.
     * @callback module:api/DataExportApi~dataExportListByWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataExportListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the data export instances within a workspace.
     * @param {String} subscriptionId The workspace's resource subscription ID.
     * @param {String} resourceGroupName The workspace's resource group name.
     * @param {String} workspaceName The Log Analytics workspace name.
     * @param {String} apiVersion The client API version.
     * @param {module:api/DataExportApi~dataExportListByWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataExportListResult}
     */
    dataExportListByWorkspace(subscriptionId, resourceGroupName, workspaceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataExportListByWorkspace");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataExportListByWorkspace");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling dataExportListByWorkspace");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataExportListByWorkspace");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataExportListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataExports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
