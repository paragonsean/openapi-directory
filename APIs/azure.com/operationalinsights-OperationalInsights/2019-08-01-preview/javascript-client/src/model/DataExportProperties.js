/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Destination from './Destination';

/**
 * The DataExportProperties model module.
 * @module model/DataExportProperties
 * @version 2019-08-01-preview
 */
class DataExportProperties {
    /**
     * Constructs a new <code>DataExportProperties</code>.
     * Data Export properties.
     * @alias module:model/DataExportProperties
     */
    constructor() { 
        
        DataExportProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataExportProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataExportProperties} obj Optional instance to populate.
     * @return {module:model/DataExportProperties} The populated <code>DataExportProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataExportProperties();

            if (data.hasOwnProperty('allTables')) {
                obj['allTables'] = ApiClient.convertToType(data['allTables'], 'Boolean');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'String');
            }
            if (data.hasOwnProperty('dataExportId')) {
                obj['dataExportId'] = ApiClient.convertToType(data['dataExportId'], 'String');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = Destination.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('enable')) {
                obj['enable'] = ApiClient.convertToType(data['enable'], 'Boolean');
            }
            if (data.hasOwnProperty('lastModifiedDate')) {
                obj['lastModifiedDate'] = ApiClient.convertToType(data['lastModifiedDate'], 'String');
            }
            if (data.hasOwnProperty('tableNames')) {
                obj['tableNames'] = ApiClient.convertToType(data['tableNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataExportProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataExportProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createdDate'] && !(typeof data['createdDate'] === 'string' || data['createdDate'] instanceof String)) {
            throw new Error("Expected the field `createdDate` to be a primitive type in the JSON string but got " + data['createdDate']);
        }
        // ensure the json data is a string
        if (data['dataExportId'] && !(typeof data['dataExportId'] === 'string' || data['dataExportId'] instanceof String)) {
            throw new Error("Expected the field `dataExportId` to be a primitive type in the JSON string but got " + data['dataExportId']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          Destination.validateJSON(data['destination']);
        }
        // ensure the json data is a string
        if (data['lastModifiedDate'] && !(typeof data['lastModifiedDate'] === 'string' || data['lastModifiedDate'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedDate` to be a primitive type in the JSON string but got " + data['lastModifiedDate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tableNames'])) {
            throw new Error("Expected the field `tableNames` to be an array in the JSON data but got " + data['tableNames']);
        }

        return true;
    }


}



/**
 * When ‘true’, all workspace's tables are exported.
 * @member {Boolean} allTables
 */
DataExportProperties.prototype['allTables'] = undefined;

/**
 * The latest data export rule modification time.
 * @member {String} createdDate
 */
DataExportProperties.prototype['createdDate'] = undefined;

/**
 * The data export rule ID.
 * @member {String} dataExportId
 */
DataExportProperties.prototype['dataExportId'] = undefined;

/**
 * @member {module:model/Destination} destination
 */
DataExportProperties.prototype['destination'] = undefined;

/**
 * Active when enabled.
 * @member {Boolean} enable
 */
DataExportProperties.prototype['enable'] = undefined;

/**
 * Date and time when the export was last modified.
 * @member {String} lastModifiedDate
 */
DataExportProperties.prototype['lastModifiedDate'] = undefined;

/**
 * An array of tables to export, for example: [“Heartbeat, SecurityEvent”].
 * @member {Array.<String>} tableNames
 */
DataExportProperties.prototype['tableNames'] = undefined;






export default DataExportProperties;

