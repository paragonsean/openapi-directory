/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinationMetaData from './DestinationMetaData';

/**
 * The Destination model module.
 * @module model/Destination
 * @version 2019-08-01-preview
 */
class Destination {
    /**
     * Constructs a new <code>Destination</code>.
     * Destination properties.
     * @alias module:model/Destination
     * @param resourceId {String} The destination resource ID. This can be copied from the Properties entry of the destination resource in Azure.
     */
    constructor(resourceId) { 
        
        Destination.initialize(this, resourceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, resourceId) { 
        obj['resourceId'] = resourceId;
    }

    /**
     * Constructs a <code>Destination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Destination} obj Optional instance to populate.
     * @return {module:model/Destination} The populated <code>Destination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Destination();

            if (data.hasOwnProperty('metaData')) {
                obj['metaData'] = DestinationMetaData.constructFromObject(data['metaData']);
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Destination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Destination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Destination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `metaData`
        if (data['metaData']) { // data not null
          DestinationMetaData.validateJSON(data['metaData']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Destination.RequiredProperties = ["resourceId"];

/**
 * @member {module:model/DestinationMetaData} metaData
 */
Destination.prototype['metaData'] = undefined;

/**
 * The destination resource ID. This can be copied from the Properties entry of the destination resource in Azure.
 * @member {String} resourceId
 */
Destination.prototype['resourceId'] = undefined;

/**
 * The type of the destination resource
 * @member {module:model/Destination.TypeEnum} type
 */
Destination.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Destination['TypeEnum'] = {

    /**
     * value: "StorageAccount"
     * @const
     */
    "StorageAccount": "StorageAccount",

    /**
     * value: "EventHub"
     * @const
     */
    "EventHub": "EventHub"
};



export default Destination;

