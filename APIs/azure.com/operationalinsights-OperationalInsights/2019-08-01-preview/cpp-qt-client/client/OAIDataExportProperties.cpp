/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExportProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExportProperties::OAIDataExportProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExportProperties::OAIDataExportProperties() {
    this->initializeModel();
}

OAIDataExportProperties::~OAIDataExportProperties() {}

void OAIDataExportProperties::initializeModel() {

    m_all_tables_isSet = false;
    m_all_tables_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_data_export_id_isSet = false;
    m_data_export_id_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_enable_isSet = false;
    m_enable_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_table_names_isSet = false;
    m_table_names_isValid = false;
}

void OAIDataExportProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExportProperties::fromJsonObject(QJsonObject json) {

    m_all_tables_isValid = ::OpenAPI::fromJsonValue(m_all_tables, json[QString("allTables")]);
    m_all_tables_isSet = !json[QString("allTables")].isNull() && m_all_tables_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_data_export_id_isValid = ::OpenAPI::fromJsonValue(m_data_export_id, json[QString("dataExportId")]);
    m_data_export_id_isSet = !json[QString("dataExportId")].isNull() && m_data_export_id_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_enable_isValid = ::OpenAPI::fromJsonValue(m_enable, json[QString("enable")]);
    m_enable_isSet = !json[QString("enable")].isNull() && m_enable_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("lastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("lastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_table_names_isValid = ::OpenAPI::fromJsonValue(m_table_names, json[QString("tableNames")]);
    m_table_names_isSet = !json[QString("tableNames")].isNull() && m_table_names_isValid;
}

QString OAIDataExportProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExportProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_all_tables_isSet) {
        obj.insert(QString("allTables"), ::OpenAPI::toJsonValue(m_all_tables));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_data_export_id_isSet) {
        obj.insert(QString("dataExportId"), ::OpenAPI::toJsonValue(m_data_export_id));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_enable_isSet) {
        obj.insert(QString("enable"), ::OpenAPI::toJsonValue(m_enable));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("lastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_table_names.size() > 0) {
        obj.insert(QString("tableNames"), ::OpenAPI::toJsonValue(m_table_names));
    }
    return obj;
}

bool OAIDataExportProperties::isAllTables() const {
    return m_all_tables;
}
void OAIDataExportProperties::setAllTables(const bool &all_tables) {
    m_all_tables = all_tables;
    m_all_tables_isSet = true;
}

bool OAIDataExportProperties::is_all_tables_Set() const{
    return m_all_tables_isSet;
}

bool OAIDataExportProperties::is_all_tables_Valid() const{
    return m_all_tables_isValid;
}

QString OAIDataExportProperties::getCreatedDate() const {
    return m_created_date;
}
void OAIDataExportProperties::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIDataExportProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIDataExportProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIDataExportProperties::getDataExportId() const {
    return m_data_export_id;
}
void OAIDataExportProperties::setDataExportId(const QString &data_export_id) {
    m_data_export_id = data_export_id;
    m_data_export_id_isSet = true;
}

bool OAIDataExportProperties::is_data_export_id_Set() const{
    return m_data_export_id_isSet;
}

bool OAIDataExportProperties::is_data_export_id_Valid() const{
    return m_data_export_id_isValid;
}

OAIDestination OAIDataExportProperties::getDestination() const {
    return m_destination;
}
void OAIDataExportProperties::setDestination(const OAIDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIDataExportProperties::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIDataExportProperties::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAIDataExportProperties::isEnable() const {
    return m_enable;
}
void OAIDataExportProperties::setEnable(const bool &enable) {
    m_enable = enable;
    m_enable_isSet = true;
}

bool OAIDataExportProperties::is_enable_Set() const{
    return m_enable_isSet;
}

bool OAIDataExportProperties::is_enable_Valid() const{
    return m_enable_isValid;
}

QString OAIDataExportProperties::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIDataExportProperties::setLastModifiedDate(const QString &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIDataExportProperties::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIDataExportProperties::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QList<QString> OAIDataExportProperties::getTableNames() const {
    return m_table_names;
}
void OAIDataExportProperties::setTableNames(const QList<QString> &table_names) {
    m_table_names = table_names;
    m_table_names_isSet = true;
}

bool OAIDataExportProperties::is_table_names_Set() const{
    return m_table_names_isSet;
}

bool OAIDataExportProperties::is_table_names_Valid() const{
    return m_table_names_isValid;
}

bool OAIDataExportProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_tables_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_export_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExportProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
