/**
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsvSerializationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsvSerializationProperties::OAICsvSerializationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsvSerializationProperties::OAICsvSerializationProperties() {
    this->initializeModel();
}

OAICsvSerializationProperties::~OAICsvSerializationProperties() {}

void OAICsvSerializationProperties::initializeModel() {

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_field_delimiter_isSet = false;
    m_field_delimiter_isValid = false;
}

void OAICsvSerializationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsvSerializationProperties::fromJsonObject(QJsonObject json) {

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_field_delimiter_isValid = ::OpenAPI::fromJsonValue(m_field_delimiter, json[QString("fieldDelimiter")]);
    m_field_delimiter_isSet = !json[QString("fieldDelimiter")].isNull() && m_field_delimiter_isValid;
}

QString OAICsvSerializationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsvSerializationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding.isSet()) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_field_delimiter_isSet) {
        obj.insert(QString("fieldDelimiter"), ::OpenAPI::toJsonValue(m_field_delimiter));
    }
    return obj;
}

OAIEncoding OAICsvSerializationProperties::getEncoding() const {
    return m_encoding;
}
void OAICsvSerializationProperties::setEncoding(const OAIEncoding &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAICsvSerializationProperties::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAICsvSerializationProperties::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAICsvSerializationProperties::getFieldDelimiter() const {
    return m_field_delimiter;
}
void OAICsvSerializationProperties::setFieldDelimiter(const QString &field_delimiter) {
    m_field_delimiter = field_delimiter;
    m_field_delimiter_isSet = true;
}

bool OAICsvSerializationProperties::is_field_delimiter_Set() const{
    return m_field_delimiter_isSet;
}

bool OAICsvSerializationProperties::is_field_delimiter_Valid() const{
    return m_field_delimiter_isValid;
}

bool OAICsvSerializationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsvSerializationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
