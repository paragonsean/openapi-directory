/**
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlobReferenceInputDataSourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlobReferenceInputDataSourceProperties::OAIBlobReferenceInputDataSourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlobReferenceInputDataSourceProperties::OAIBlobReferenceInputDataSourceProperties() {
    this->initializeModel();
}

OAIBlobReferenceInputDataSourceProperties::~OAIBlobReferenceInputDataSourceProperties() {}

void OAIBlobReferenceInputDataSourceProperties::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_date_format_isSet = false;
    m_date_format_isValid = false;

    m_path_pattern_isSet = false;
    m_path_pattern_isValid = false;

    m_storage_accounts_isSet = false;
    m_storage_accounts_isValid = false;

    m_time_format_isSet = false;
    m_time_format_isValid = false;
}

void OAIBlobReferenceInputDataSourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlobReferenceInputDataSourceProperties::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_date_format_isValid = ::OpenAPI::fromJsonValue(m_date_format, json[QString("dateFormat")]);
    m_date_format_isSet = !json[QString("dateFormat")].isNull() && m_date_format_isValid;

    m_path_pattern_isValid = ::OpenAPI::fromJsonValue(m_path_pattern, json[QString("pathPattern")]);
    m_path_pattern_isSet = !json[QString("pathPattern")].isNull() && m_path_pattern_isValid;

    m_storage_accounts_isValid = ::OpenAPI::fromJsonValue(m_storage_accounts, json[QString("storageAccounts")]);
    m_storage_accounts_isSet = !json[QString("storageAccounts")].isNull() && m_storage_accounts_isValid;

    m_time_format_isValid = ::OpenAPI::fromJsonValue(m_time_format, json[QString("timeFormat")]);
    m_time_format_isSet = !json[QString("timeFormat")].isNull() && m_time_format_isValid;
}

QString OAIBlobReferenceInputDataSourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlobReferenceInputDataSourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_date_format_isSet) {
        obj.insert(QString("dateFormat"), ::OpenAPI::toJsonValue(m_date_format));
    }
    if (m_path_pattern_isSet) {
        obj.insert(QString("pathPattern"), ::OpenAPI::toJsonValue(m_path_pattern));
    }
    if (m_storage_accounts.size() > 0) {
        obj.insert(QString("storageAccounts"), ::OpenAPI::toJsonValue(m_storage_accounts));
    }
    if (m_time_format_isSet) {
        obj.insert(QString("timeFormat"), ::OpenAPI::toJsonValue(m_time_format));
    }
    return obj;
}

QString OAIBlobReferenceInputDataSourceProperties::getContainer() const {
    return m_container;
}
void OAIBlobReferenceInputDataSourceProperties::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIBlobReferenceInputDataSourceProperties::is_container_Set() const{
    return m_container_isSet;
}

bool OAIBlobReferenceInputDataSourceProperties::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIBlobReferenceInputDataSourceProperties::getDateFormat() const {
    return m_date_format;
}
void OAIBlobReferenceInputDataSourceProperties::setDateFormat(const QString &date_format) {
    m_date_format = date_format;
    m_date_format_isSet = true;
}

bool OAIBlobReferenceInputDataSourceProperties::is_date_format_Set() const{
    return m_date_format_isSet;
}

bool OAIBlobReferenceInputDataSourceProperties::is_date_format_Valid() const{
    return m_date_format_isValid;
}

QString OAIBlobReferenceInputDataSourceProperties::getPathPattern() const {
    return m_path_pattern;
}
void OAIBlobReferenceInputDataSourceProperties::setPathPattern(const QString &path_pattern) {
    m_path_pattern = path_pattern;
    m_path_pattern_isSet = true;
}

bool OAIBlobReferenceInputDataSourceProperties::is_path_pattern_Set() const{
    return m_path_pattern_isSet;
}

bool OAIBlobReferenceInputDataSourceProperties::is_path_pattern_Valid() const{
    return m_path_pattern_isValid;
}

QList<OAIStorageAccount> OAIBlobReferenceInputDataSourceProperties::getStorageAccounts() const {
    return m_storage_accounts;
}
void OAIBlobReferenceInputDataSourceProperties::setStorageAccounts(const QList<OAIStorageAccount> &storage_accounts) {
    m_storage_accounts = storage_accounts;
    m_storage_accounts_isSet = true;
}

bool OAIBlobReferenceInputDataSourceProperties::is_storage_accounts_Set() const{
    return m_storage_accounts_isSet;
}

bool OAIBlobReferenceInputDataSourceProperties::is_storage_accounts_Valid() const{
    return m_storage_accounts_isValid;
}

QString OAIBlobReferenceInputDataSourceProperties::getTimeFormat() const {
    return m_time_format;
}
void OAIBlobReferenceInputDataSourceProperties::setTimeFormat(const QString &time_format) {
    m_time_format = time_format;
    m_time_format_isSet = true;
}

bool OAIBlobReferenceInputDataSourceProperties::is_time_format_Set() const{
    return m_time_format_isSet;
}

bool OAIBlobReferenceInputDataSourceProperties::is_time_format_Valid() const{
    return m_time_format_isValid;
}

bool OAIBlobReferenceInputDataSourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlobReferenceInputDataSourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
