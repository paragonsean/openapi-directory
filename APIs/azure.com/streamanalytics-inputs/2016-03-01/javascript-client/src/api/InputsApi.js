/**
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Input from '../model/Input';
import InputListResult from '../model/InputListResult';
import ResourceTestStatus from '../model/ResourceTestStatus';

/**
* Inputs service.
* @module api/InputsApi
* @version 2016-03-01
*/
export default class InputsApi {

    /**
    * Constructs a new InputsApi. 
    * @alias module:api/InputsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the inputsCreateOrReplace operation.
     * @callback module:api/InputsApi~inputsCreateOrReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Input} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an input or replaces an already existing input under an existing streaming job.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} inputName The name of the input.
     * @param {module:model/Input} input The definition of the input that will be used to create a new input or replace the existing one under the streaming job.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The ETag of the input. Omit this value to always overwrite the current input. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param {String} [ifNoneMatch] Set to '*' to allow a new input to be created, but to prevent updating an existing input. Other values will result in a 412 Pre-condition Failed response.
     * @param {module:api/InputsApi~inputsCreateOrReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Input}
     */
    inputsCreateOrReplace(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, opts, callback) {
      opts = opts || {};
      let postBody = input;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling inputsCreateOrReplace");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling inputsCreateOrReplace");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling inputsCreateOrReplace");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling inputsCreateOrReplace");
      }
      // verify the required parameter 'inputName' is set
      if (inputName === undefined || inputName === null) {
        throw new Error("Missing the required parameter 'inputName' when calling inputsCreateOrReplace");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling inputsCreateOrReplace");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'inputName': inputName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Input;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inputsDelete operation.
     * @callback module:api/InputsApi~inputsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an input from the streaming job.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} inputName The name of the input.
     * @param {module:api/InputsApi~inputsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    inputsDelete(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling inputsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling inputsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling inputsDelete");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling inputsDelete");
      }
      // verify the required parameter 'inputName' is set
      if (inputName === undefined || inputName === null) {
        throw new Error("Missing the required parameter 'inputName' when calling inputsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'inputName': inputName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inputsGet operation.
     * @callback module:api/InputsApi~inputsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Input} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about the specified input.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} inputName The name of the input.
     * @param {module:api/InputsApi~inputsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Input}
     */
    inputsGet(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling inputsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling inputsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling inputsGet");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling inputsGet");
      }
      // verify the required parameter 'inputName' is set
      if (inputName === undefined || inputName === null) {
        throw new Error("Missing the required parameter 'inputName' when calling inputsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'inputName': inputName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Input;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inputsListByStreamingJob operation.
     * @callback module:api/InputsApi~inputsListByStreamingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InputListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the inputs under the specified streaming job.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {Object} opts Optional parameters
     * @param {String} [select] The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or \"*\" to include all properties. By default, all properties are returned except diagnostics. Currently only accepts '*' as a valid value.
     * @param {module:api/InputsApi~inputsListByStreamingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InputListResult}
     */
    inputsListByStreamingJob(apiVersion, subscriptionId, resourceGroupName, jobName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling inputsListByStreamingJob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling inputsListByStreamingJob");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling inputsListByStreamingJob");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling inputsListByStreamingJob");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName
      };
      let queryParams = {
        '$select': opts['select'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InputListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inputsTest operation.
     * @callback module:api/InputsApi~inputsTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceTestStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} inputName The name of the input.
     * @param {Object} opts Optional parameters
     * @param {module:model/Input} [input] If the input specified does not already exist, this parameter must contain the full input definition intended to be tested. If the input specified already exists, this parameter can be left null to test the existing input as is or if specified, the properties specified will overwrite the corresponding properties in the existing input (exactly like a PATCH operation) and the resulting input will be tested.
     * @param {module:api/InputsApi~inputsTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceTestStatus}
     */
    inputsTest(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, opts, callback) {
      opts = opts || {};
      let postBody = opts['input'];
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling inputsTest");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling inputsTest");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling inputsTest");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling inputsTest");
      }
      // verify the required parameter 'inputName' is set
      if (inputName === undefined || inputName === null) {
        throw new Error("Missing the required parameter 'inputName' when calling inputsTest");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'inputName': inputName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceTestStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inputsUpdate operation.
     * @callback module:api/InputsApi~inputsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Input} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing input under an existing streaming job. This can be used to partially update (ie. update one or two properties) an input without affecting the rest the job or input definition.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} inputName The name of the input.
     * @param {module:model/Input} input An Input object. The properties specified here will overwrite the corresponding properties in the existing input (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing input will remain the same and not change as a result of this PATCH operation.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The ETag of the input. Omit this value to always overwrite the current input. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param {module:api/InputsApi~inputsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Input}
     */
    inputsUpdate(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, opts, callback) {
      opts = opts || {};
      let postBody = input;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling inputsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling inputsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling inputsUpdate");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling inputsUpdate");
      }
      // verify the required parameter 'inputName' is set
      if (inputName === undefined || inputName === null) {
        throw new Error("Missing the required parameter 'inputName' when calling inputsUpdate");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling inputsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'inputName': inputName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Input;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
