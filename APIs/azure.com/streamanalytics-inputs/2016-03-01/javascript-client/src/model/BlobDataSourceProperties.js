/**
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StorageAccount from './StorageAccount';

/**
 * The BlobDataSourceProperties model module.
 * @module model/BlobDataSourceProperties
 * @version 2016-03-01
 */
class BlobDataSourceProperties {
    /**
     * Constructs a new <code>BlobDataSourceProperties</code>.
     * The properties that are associated with a blob data source.
     * @alias module:model/BlobDataSourceProperties
     */
    constructor() { 
        
        BlobDataSourceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BlobDataSourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlobDataSourceProperties} obj Optional instance to populate.
     * @return {module:model/BlobDataSourceProperties} The populated <code>BlobDataSourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlobDataSourceProperties();

            if (data.hasOwnProperty('container')) {
                obj['container'] = ApiClient.convertToType(data['container'], 'String');
            }
            if (data.hasOwnProperty('dateFormat')) {
                obj['dateFormat'] = ApiClient.convertToType(data['dateFormat'], 'String');
            }
            if (data.hasOwnProperty('pathPattern')) {
                obj['pathPattern'] = ApiClient.convertToType(data['pathPattern'], 'String');
            }
            if (data.hasOwnProperty('storageAccounts')) {
                obj['storageAccounts'] = ApiClient.convertToType(data['storageAccounts'], [StorageAccount]);
            }
            if (data.hasOwnProperty('timeFormat')) {
                obj['timeFormat'] = ApiClient.convertToType(data['timeFormat'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlobDataSourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlobDataSourceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['container'] && !(typeof data['container'] === 'string' || data['container'] instanceof String)) {
            throw new Error("Expected the field `container` to be a primitive type in the JSON string but got " + data['container']);
        }
        // ensure the json data is a string
        if (data['dateFormat'] && !(typeof data['dateFormat'] === 'string' || data['dateFormat'] instanceof String)) {
            throw new Error("Expected the field `dateFormat` to be a primitive type in the JSON string but got " + data['dateFormat']);
        }
        // ensure the json data is a string
        if (data['pathPattern'] && !(typeof data['pathPattern'] === 'string' || data['pathPattern'] instanceof String)) {
            throw new Error("Expected the field `pathPattern` to be a primitive type in the JSON string but got " + data['pathPattern']);
        }
        if (data['storageAccounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['storageAccounts'])) {
                throw new Error("Expected the field `storageAccounts` to be an array in the JSON data but got " + data['storageAccounts']);
            }
            // validate the optional field `storageAccounts` (array)
            for (const item of data['storageAccounts']) {
                StorageAccount.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['timeFormat'] && !(typeof data['timeFormat'] === 'string' || data['timeFormat'] instanceof String)) {
            throw new Error("Expected the field `timeFormat` to be a primitive type in the JSON string but got " + data['timeFormat']);
        }

        return true;
    }


}



/**
 * The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
 * @member {String} container
 */
BlobDataSourceProperties.prototype['container'] = undefined;

/**
 * The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
 * @member {String} dateFormat
 */
BlobDataSourceProperties.prototype['dateFormat'] = undefined;

/**
 * The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
 * @member {String} pathPattern
 */
BlobDataSourceProperties.prototype['pathPattern'] = undefined;

/**
 * A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
 * @member {Array.<module:model/StorageAccount>} storageAccounts
 */
BlobDataSourceProperties.prototype['storageAccounts'] = undefined;

/**
 * The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
 * @member {String} timeFormat
 */
BlobDataSourceProperties.prototype['timeFormat'] = undefined;






export default BlobDataSourceProperties;

