/**
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventHubDataSourceProperties from './EventHubDataSourceProperties';

/**
 * The EventHubStreamInputDataSourceProperties model module.
 * @module model/EventHubStreamInputDataSourceProperties
 * @version 2016-03-01
 */
class EventHubStreamInputDataSourceProperties {
    /**
     * Constructs a new <code>EventHubStreamInputDataSourceProperties</code>.
     * The properties that are associated with a Event Hub input containing stream data.
     * @alias module:model/EventHubStreamInputDataSourceProperties
     * @implements module:model/EventHubDataSourceProperties
     */
    constructor() { 
        EventHubDataSourceProperties.initialize(this);
        EventHubStreamInputDataSourceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventHubStreamInputDataSourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventHubStreamInputDataSourceProperties} obj Optional instance to populate.
     * @return {module:model/EventHubStreamInputDataSourceProperties} The populated <code>EventHubStreamInputDataSourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventHubStreamInputDataSourceProperties();
            EventHubDataSourceProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('consumerGroupName')) {
                obj['consumerGroupName'] = ApiClient.convertToType(data['consumerGroupName'], 'String');
            }
            if (data.hasOwnProperty('eventHubName')) {
                obj['eventHubName'] = ApiClient.convertToType(data['eventHubName'], 'String');
            }
            if (data.hasOwnProperty('serviceBusNamespace')) {
                obj['serviceBusNamespace'] = ApiClient.convertToType(data['serviceBusNamespace'], 'String');
            }
            if (data.hasOwnProperty('sharedAccessPolicyKey')) {
                obj['sharedAccessPolicyKey'] = ApiClient.convertToType(data['sharedAccessPolicyKey'], 'String');
            }
            if (data.hasOwnProperty('sharedAccessPolicyName')) {
                obj['sharedAccessPolicyName'] = ApiClient.convertToType(data['sharedAccessPolicyName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventHubStreamInputDataSourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventHubStreamInputDataSourceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['consumerGroupName'] && !(typeof data['consumerGroupName'] === 'string' || data['consumerGroupName'] instanceof String)) {
            throw new Error("Expected the field `consumerGroupName` to be a primitive type in the JSON string but got " + data['consumerGroupName']);
        }
        // ensure the json data is a string
        if (data['eventHubName'] && !(typeof data['eventHubName'] === 'string' || data['eventHubName'] instanceof String)) {
            throw new Error("Expected the field `eventHubName` to be a primitive type in the JSON string but got " + data['eventHubName']);
        }
        // ensure the json data is a string
        if (data['serviceBusNamespace'] && !(typeof data['serviceBusNamespace'] === 'string' || data['serviceBusNamespace'] instanceof String)) {
            throw new Error("Expected the field `serviceBusNamespace` to be a primitive type in the JSON string but got " + data['serviceBusNamespace']);
        }
        // ensure the json data is a string
        if (data['sharedAccessPolicyKey'] && !(typeof data['sharedAccessPolicyKey'] === 'string' || data['sharedAccessPolicyKey'] instanceof String)) {
            throw new Error("Expected the field `sharedAccessPolicyKey` to be a primitive type in the JSON string but got " + data['sharedAccessPolicyKey']);
        }
        // ensure the json data is a string
        if (data['sharedAccessPolicyName'] && !(typeof data['sharedAccessPolicyName'] === 'string' || data['sharedAccessPolicyName'] instanceof String)) {
            throw new Error("Expected the field `sharedAccessPolicyName` to be a primitive type in the JSON string but got " + data['sharedAccessPolicyName']);
        }

        return true;
    }


}



/**
 * The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hubâ€™s default consumer group.
 * @member {String} consumerGroupName
 */
EventHubStreamInputDataSourceProperties.prototype['consumerGroupName'] = undefined;

/**
 * The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
 * @member {String} eventHubName
 */
EventHubStreamInputDataSourceProperties.prototype['eventHubName'] = undefined;

/**
 * The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
 * @member {String} serviceBusNamespace
 */
EventHubStreamInputDataSourceProperties.prototype['serviceBusNamespace'] = undefined;

/**
 * The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
 * @member {String} sharedAccessPolicyKey
 */
EventHubStreamInputDataSourceProperties.prototype['sharedAccessPolicyKey'] = undefined;

/**
 * The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
 * @member {String} sharedAccessPolicyName
 */
EventHubStreamInputDataSourceProperties.prototype['sharedAccessPolicyName'] = undefined;


// Implement EventHubDataSourceProperties interface:
/**
 * The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
 * @member {String} serviceBusNamespace
 */
EventHubDataSourceProperties.prototype['serviceBusNamespace'] = undefined;
/**
 * The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
 * @member {String} sharedAccessPolicyKey
 */
EventHubDataSourceProperties.prototype['sharedAccessPolicyKey'] = undefined;
/**
 * The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
 * @member {String} sharedAccessPolicyName
 */
EventHubDataSourceProperties.prototype['sharedAccessPolicyName'] = undefined;




export default EventHubStreamInputDataSourceProperties;

