/**
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Encoding from './Encoding';

/**
 * The CsvSerializationProperties model module.
 * @module model/CsvSerializationProperties
 * @version 2016-03-01
 */
class CsvSerializationProperties {
    /**
     * Constructs a new <code>CsvSerializationProperties</code>.
     * The properties that are associated with the CSV serialization type.
     * @alias module:model/CsvSerializationProperties
     */
    constructor() { 
        
        CsvSerializationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CsvSerializationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CsvSerializationProperties} obj Optional instance to populate.
     * @return {module:model/CsvSerializationProperties} The populated <code>CsvSerializationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CsvSerializationProperties();

            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = Encoding.constructFromObject(data['encoding']);
            }
            if (data.hasOwnProperty('fieldDelimiter')) {
                obj['fieldDelimiter'] = ApiClient.convertToType(data['fieldDelimiter'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CsvSerializationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CsvSerializationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fieldDelimiter'] && !(typeof data['fieldDelimiter'] === 'string' || data['fieldDelimiter'] instanceof String)) {
            throw new Error("Expected the field `fieldDelimiter` to be a primitive type in the JSON string but got " + data['fieldDelimiter']);
        }

        return true;
    }


}



/**
 * @member {module:model/Encoding} encoding
 */
CsvSerializationProperties.prototype['encoding'] = undefined;

/**
 * Specifies the delimiter that will be used to separate comma-separated value (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values. Required on PUT (CreateOrReplace) requests.
 * @member {String} fieldDelimiter
 */
CsvSerializationProperties.prototype['fieldDelimiter'] = undefined;






export default CsvSerializationProperties;

