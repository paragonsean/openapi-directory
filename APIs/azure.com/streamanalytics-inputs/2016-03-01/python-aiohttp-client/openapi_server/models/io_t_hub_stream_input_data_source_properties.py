# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IoTHubStreamInputDataSourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_group_name: str=None, endpoint: str=None, iot_hub_namespace: str=None, shared_access_policy_key: str=None, shared_access_policy_name: str=None):
        """IoTHubStreamInputDataSourceProperties - a model defined in OpenAPI

        :param consumer_group_name: The consumer_group_name of this IoTHubStreamInputDataSourceProperties.
        :param endpoint: The endpoint of this IoTHubStreamInputDataSourceProperties.
        :param iot_hub_namespace: The iot_hub_namespace of this IoTHubStreamInputDataSourceProperties.
        :param shared_access_policy_key: The shared_access_policy_key of this IoTHubStreamInputDataSourceProperties.
        :param shared_access_policy_name: The shared_access_policy_name of this IoTHubStreamInputDataSourceProperties.
        """
        self.openapi_types = {
            'consumer_group_name': str,
            'endpoint': str,
            'iot_hub_namespace': str,
            'shared_access_policy_key': str,
            'shared_access_policy_name': str
        }

        self.attribute_map = {
            'consumer_group_name': 'consumerGroupName',
            'endpoint': 'endpoint',
            'iot_hub_namespace': 'iotHubNamespace',
            'shared_access_policy_key': 'sharedAccessPolicyKey',
            'shared_access_policy_name': 'sharedAccessPolicyName'
        }

        self._consumer_group_name = consumer_group_name
        self._endpoint = endpoint
        self._iot_hub_namespace = iot_hub_namespace
        self._shared_access_policy_key = shared_access_policy_key
        self._shared_access_policy_name = shared_access_policy_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IoTHubStreamInputDataSourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IoTHubStreamInputDataSourceProperties of this IoTHubStreamInputDataSourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_group_name(self):
        """Gets the consumer_group_name of this IoTHubStreamInputDataSourceProperties.

        The name of an IoT Hub Consumer Group that should be used to read events from the IoT Hub. If not specified, the input uses the Iot Hub’s default consumer group.

        :return: The consumer_group_name of this IoTHubStreamInputDataSourceProperties.
        :rtype: str
        """
        return self._consumer_group_name

    @consumer_group_name.setter
    def consumer_group_name(self, consumer_group_name):
        """Sets the consumer_group_name of this IoTHubStreamInputDataSourceProperties.

        The name of an IoT Hub Consumer Group that should be used to read events from the IoT Hub. If not specified, the input uses the Iot Hub’s default consumer group.

        :param consumer_group_name: The consumer_group_name of this IoTHubStreamInputDataSourceProperties.
        :type consumer_group_name: str
        """

        self._consumer_group_name = consumer_group_name

    @property
    def endpoint(self):
        """Gets the endpoint of this IoTHubStreamInputDataSourceProperties.

        The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).

        :return: The endpoint of this IoTHubStreamInputDataSourceProperties.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this IoTHubStreamInputDataSourceProperties.

        The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).

        :param endpoint: The endpoint of this IoTHubStreamInputDataSourceProperties.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def iot_hub_namespace(self):
        """Gets the iot_hub_namespace of this IoTHubStreamInputDataSourceProperties.

        The name or the URI of the IoT Hub. Required on PUT (CreateOrReplace) requests.

        :return: The iot_hub_namespace of this IoTHubStreamInputDataSourceProperties.
        :rtype: str
        """
        return self._iot_hub_namespace

    @iot_hub_namespace.setter
    def iot_hub_namespace(self, iot_hub_namespace):
        """Sets the iot_hub_namespace of this IoTHubStreamInputDataSourceProperties.

        The name or the URI of the IoT Hub. Required on PUT (CreateOrReplace) requests.

        :param iot_hub_namespace: The iot_hub_namespace of this IoTHubStreamInputDataSourceProperties.
        :type iot_hub_namespace: str
        """

        self._iot_hub_namespace = iot_hub_namespace

    @property
    def shared_access_policy_key(self):
        """Gets the shared_access_policy_key of this IoTHubStreamInputDataSourceProperties.

        The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.

        :return: The shared_access_policy_key of this IoTHubStreamInputDataSourceProperties.
        :rtype: str
        """
        return self._shared_access_policy_key

    @shared_access_policy_key.setter
    def shared_access_policy_key(self, shared_access_policy_key):
        """Sets the shared_access_policy_key of this IoTHubStreamInputDataSourceProperties.

        The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.

        :param shared_access_policy_key: The shared_access_policy_key of this IoTHubStreamInputDataSourceProperties.
        :type shared_access_policy_key: str
        """

        self._shared_access_policy_key = shared_access_policy_key

    @property
    def shared_access_policy_name(self):
        """Gets the shared_access_policy_name of this IoTHubStreamInputDataSourceProperties.

        The shared access policy name for the IoT Hub. This policy must contain at least the Service connect permission. Required on PUT (CreateOrReplace) requests.

        :return: The shared_access_policy_name of this IoTHubStreamInputDataSourceProperties.
        :rtype: str
        """
        return self._shared_access_policy_name

    @shared_access_policy_name.setter
    def shared_access_policy_name(self, shared_access_policy_name):
        """Sets the shared_access_policy_name of this IoTHubStreamInputDataSourceProperties.

        The shared access policy name for the IoT Hub. This policy must contain at least the Service connect permission. Required on PUT (CreateOrReplace) requests.

        :param shared_access_policy_name: The shared_access_policy_name of this IoTHubStreamInputDataSourceProperties.
        :type shared_access_policy_name: str
        """

        self._shared_access_policy_name = shared_access_policy_name
