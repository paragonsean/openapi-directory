# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.diagnostics import Diagnostics
from openapi_server.models.input_properties import InputProperties
from openapi_server.models.serialization import Serialization
from openapi_server.models.stream_input_data_source import StreamInputDataSource
from openapi_server import util


class StreamInputProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datasource: StreamInputDataSource=None, diagnostics: Diagnostics=None, etag: str=None, serialization: Serialization=None, type: str=None):
        """StreamInputProperties - a model defined in OpenAPI

        :param datasource: The datasource of this StreamInputProperties.
        :param diagnostics: The diagnostics of this StreamInputProperties.
        :param etag: The etag of this StreamInputProperties.
        :param serialization: The serialization of this StreamInputProperties.
        :param type: The type of this StreamInputProperties.
        """
        self.openapi_types = {
            'datasource': StreamInputDataSource,
            'diagnostics': Diagnostics,
            'etag': str,
            'serialization': Serialization,
            'type': str
        }

        self.attribute_map = {
            'datasource': 'datasource',
            'diagnostics': 'diagnostics',
            'etag': 'etag',
            'serialization': 'serialization',
            'type': 'type'
        }

        self._datasource = datasource
        self._diagnostics = diagnostics
        self._etag = etag
        self._serialization = serialization
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamInputProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamInputProperties of this StreamInputProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datasource(self):
        """Gets the datasource of this StreamInputProperties.


        :return: The datasource of this StreamInputProperties.
        :rtype: StreamInputDataSource
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this StreamInputProperties.


        :param datasource: The datasource of this StreamInputProperties.
        :type datasource: StreamInputDataSource
        """

        self._datasource = datasource

    @property
    def diagnostics(self):
        """Gets the diagnostics of this StreamInputProperties.


        :return: The diagnostics of this StreamInputProperties.
        :rtype: Diagnostics
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this StreamInputProperties.


        :param diagnostics: The diagnostics of this StreamInputProperties.
        :type diagnostics: Diagnostics
        """

        self._diagnostics = diagnostics

    @property
    def etag(self):
        """Gets the etag of this StreamInputProperties.

        The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.

        :return: The etag of this StreamInputProperties.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this StreamInputProperties.

        The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.

        :param etag: The etag of this StreamInputProperties.
        :type etag: str
        """

        self._etag = etag

    @property
    def serialization(self):
        """Gets the serialization of this StreamInputProperties.


        :return: The serialization of this StreamInputProperties.
        :rtype: Serialization
        """
        return self._serialization

    @serialization.setter
    def serialization(self, serialization):
        """Sets the serialization of this StreamInputProperties.


        :param serialization: The serialization of this StreamInputProperties.
        :type serialization: Serialization
        """

        self._serialization = serialization

    @property
    def type(self):
        """Gets the type of this StreamInputProperties.

        Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.

        :return: The type of this StreamInputProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StreamInputProperties.

        Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.

        :param type: The type of this StreamInputProperties.
        :type type: str
        """

        self._type = type
