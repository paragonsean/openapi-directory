/*
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Input;
import org.openapitools.client.model.InputListResult;
import org.openapitools.client.model.ResourceTestStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InputsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InputsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InputsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for inputsCreateOrReplace
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param input The definition of the input that will be used to create a new input or replace the existing one under the streaming job. (required)
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new input to be created, but to prevent updating an existing input. Other values will result in a 412 Pre-condition Failed response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The input was successfully created or replaced. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
        <tr><td> 201 </td><td> The input was successfully created or replaced. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call inputsCreateOrReplaceCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "inputName" + "}", localVarApiClient.escapeString(inputName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inputsCreateOrReplaceValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling inputsCreateOrReplace(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling inputsCreateOrReplace(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling inputsCreateOrReplace(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling inputsCreateOrReplace(Async)");
        }

        // verify the required parameter 'inputName' is set
        if (inputName == null) {
            throw new ApiException("Missing the required parameter 'inputName' when calling inputsCreateOrReplace(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling inputsCreateOrReplace(Async)");
        }

        return inputsCreateOrReplaceCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, ifMatch, ifNoneMatch, _callback);

    }

    /**
     * 
     * Creates an input or replaces an already existing input under an existing streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param input The definition of the input that will be used to create a new input or replace the existing one under the streaming job. (required)
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new input to be created, but to prevent updating an existing input. Other values will result in a 412 Pre-condition Failed response. (optional)
     * @return Input
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The input was successfully created or replaced. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
        <tr><td> 201 </td><td> The input was successfully created or replaced. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public Input inputsCreateOrReplace(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, String ifMatch, String ifNoneMatch) throws ApiException {
        ApiResponse<Input> localVarResp = inputsCreateOrReplaceWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, ifMatch, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an input or replaces an already existing input under an existing streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param input The definition of the input that will be used to create a new input or replace the existing one under the streaming job. (required)
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new input to be created, but to prevent updating an existing input. Other values will result in a 412 Pre-condition Failed response. (optional)
     * @return ApiResponse&lt;Input&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The input was successfully created or replaced. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
        <tr><td> 201 </td><td> The input was successfully created or replaced. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Input> inputsCreateOrReplaceWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, String ifMatch, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = inputsCreateOrReplaceValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, ifMatch, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<Input>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an input or replaces an already existing input under an existing streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param input The definition of the input that will be used to create a new input or replace the existing one under the streaming job. (required)
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new input to be created, but to prevent updating an existing input. Other values will result in a 412 Pre-condition Failed response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The input was successfully created or replaced. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
        <tr><td> 201 </td><td> The input was successfully created or replaced. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call inputsCreateOrReplaceAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, String ifMatch, String ifNoneMatch, final ApiCallback<Input> _callback) throws ApiException {

        okhttp3.Call localVarCall = inputsCreateOrReplaceValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, ifMatch, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<Input>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inputsDelete
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The input was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The input does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inputsDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "inputName" + "}", localVarApiClient.escapeString(inputName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inputsDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling inputsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling inputsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling inputsDelete(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling inputsDelete(Async)");
        }

        // verify the required parameter 'inputName' is set
        if (inputName == null) {
            throw new ApiException("Missing the required parameter 'inputName' when calling inputsDelete(Async)");
        }

        return inputsDeleteCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, _callback);

    }

    /**
     * 
     * Deletes an input from the streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The input was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The input does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void inputsDelete(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName) throws ApiException {
        inputsDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, inputName);
    }

    /**
     * 
     * Deletes an input from the streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The input was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The input does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> inputsDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName) throws ApiException {
        okhttp3.Call localVarCall = inputsDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an input from the streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The input was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The input does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inputsDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = inputsDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for inputsGet
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified input. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call inputsGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "inputName" + "}", localVarApiClient.escapeString(inputName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inputsGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling inputsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling inputsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling inputsGet(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling inputsGet(Async)");
        }

        // verify the required parameter 'inputName' is set
        if (inputName == null) {
            throw new ApiException("Missing the required parameter 'inputName' when calling inputsGet(Async)");
        }

        return inputsGetCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, _callback);

    }

    /**
     * 
     * Gets details about the specified input.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @return Input
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified input. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public Input inputsGet(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName) throws ApiException {
        ApiResponse<Input> localVarResp = inputsGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, inputName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets details about the specified input.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @return ApiResponse&lt;Input&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified input. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Input> inputsGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName) throws ApiException {
        okhttp3.Call localVarCall = inputsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, null);
        Type localVarReturnType = new TypeToken<Input>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets details about the specified input.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified input. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call inputsGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, final ApiCallback<Input> _callback) throws ApiException {

        okhttp3.Call localVarCall = inputsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, _callback);
        Type localVarReturnType = new TypeToken<Input>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inputsListByStreamingJob
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param $select The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or \&quot;*\&quot; to include all properties. By default, all properties are returned except diagnostics. Currently only accepts &#39;*&#39; as a valid value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed the inputs under the specified streaming job. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inputsListByStreamingJobCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inputsListByStreamingJobValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling inputsListByStreamingJob(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling inputsListByStreamingJob(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling inputsListByStreamingJob(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling inputsListByStreamingJob(Async)");
        }

        return inputsListByStreamingJobCall(apiVersion, subscriptionId, resourceGroupName, jobName, $select, _callback);

    }

    /**
     * 
     * Lists all of the inputs under the specified streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param $select The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or \&quot;*\&quot; to include all properties. By default, all properties are returned except diagnostics. Currently only accepts &#39;*&#39; as a valid value. (optional)
     * @return InputListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed the inputs under the specified streaming job. </td><td>  -  </td></tr>
     </table>
     */
    public InputListResult inputsListByStreamingJob(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String $select) throws ApiException {
        ApiResponse<InputListResult> localVarResp = inputsListByStreamingJobWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the inputs under the specified streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param $select The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or \&quot;*\&quot; to include all properties. By default, all properties are returned except diagnostics. Currently only accepts &#39;*&#39; as a valid value. (optional)
     * @return ApiResponse&lt;InputListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed the inputs under the specified streaming job. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InputListResult> inputsListByStreamingJobWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String $select) throws ApiException {
        okhttp3.Call localVarCall = inputsListByStreamingJobValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, $select, null);
        Type localVarReturnType = new TypeToken<InputListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the inputs under the specified streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param $select The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or \&quot;*\&quot; to include all properties. By default, all properties are returned except diagnostics. Currently only accepts &#39;*&#39; as a valid value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed the inputs under the specified streaming job. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inputsListByStreamingJobAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String $select, final ApiCallback<InputListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = inputsListByStreamingJobValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, $select, _callback);
        Type localVarReturnType = new TypeToken<InputListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inputsTest
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param input If the input specified does not already exist, this parameter must contain the full input definition intended to be tested. If the input specified already exists, this parameter can be left null to test the existing input as is or if specified, the properties specified will overwrite the corresponding properties in the existing input (exactly like a PATCH operation) and the resulting input will be tested. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The test operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The test request was successfully initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inputsTestCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}/test"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "inputName" + "}", localVarApiClient.escapeString(inputName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inputsTestValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling inputsTest(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling inputsTest(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling inputsTest(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling inputsTest(Async)");
        }

        // verify the required parameter 'inputName' is set
        if (inputName == null) {
            throw new ApiException("Missing the required parameter 'inputName' when calling inputsTest(Async)");
        }

        return inputsTestCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, _callback);

    }

    /**
     * 
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param input If the input specified does not already exist, this parameter must contain the full input definition intended to be tested. If the input specified already exists, this parameter can be left null to test the existing input as is or if specified, the properties specified will overwrite the corresponding properties in the existing input (exactly like a PATCH operation) and the resulting input will be tested. (optional)
     * @return ResourceTestStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The test operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The test request was successfully initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceTestStatus inputsTest(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input) throws ApiException {
        ApiResponse<ResourceTestStatus> localVarResp = inputsTestWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input);
        return localVarResp.getData();
    }

    /**
     * 
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param input If the input specified does not already exist, this parameter must contain the full input definition intended to be tested. If the input specified already exists, this parameter can be left null to test the existing input as is or if specified, the properties specified will overwrite the corresponding properties in the existing input (exactly like a PATCH operation) and the resulting input will be tested. (optional)
     * @return ApiResponse&lt;ResourceTestStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The test operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The test request was successfully initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceTestStatus> inputsTestWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input) throws ApiException {
        okhttp3.Call localVarCall = inputsTestValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, null);
        Type localVarReturnType = new TypeToken<ResourceTestStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param input If the input specified does not already exist, this parameter must contain the full input definition intended to be tested. If the input specified already exists, this parameter can be left null to test the existing input as is or if specified, the properties specified will overwrite the corresponding properties in the existing input (exactly like a PATCH operation) and the resulting input will be tested. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The test operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The test request was successfully initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inputsTestAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, final ApiCallback<ResourceTestStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = inputsTestValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, _callback);
        Type localVarReturnType = new TypeToken<ResourceTestStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inputsUpdate
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param input An Input object. The properties specified here will overwrite the corresponding properties in the existing input (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing input will remain the same and not change as a result of this PATCH operation. (required)
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The input was successfully updated. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call inputsUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "inputName" + "}", localVarApiClient.escapeString(inputName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inputsUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling inputsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling inputsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling inputsUpdate(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling inputsUpdate(Async)");
        }

        // verify the required parameter 'inputName' is set
        if (inputName == null) {
            throw new ApiException("Missing the required parameter 'inputName' when calling inputsUpdate(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling inputsUpdate(Async)");
        }

        return inputsUpdateCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, ifMatch, _callback);

    }

    /**
     * 
     * Updates an existing input under an existing streaming job. This can be used to partially update (ie. update one or two properties) an input without affecting the rest the job or input definition.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param input An Input object. The properties specified here will overwrite the corresponding properties in the existing input (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing input will remain the same and not change as a result of this PATCH operation. (required)
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @return Input
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The input was successfully updated. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public Input inputsUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, String ifMatch) throws ApiException {
        ApiResponse<Input> localVarResp = inputsUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing input under an existing streaming job. This can be used to partially update (ie. update one or two properties) an input without affecting the rest the job or input definition.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param input An Input object. The properties specified here will overwrite the corresponding properties in the existing input (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing input will remain the same and not change as a result of this PATCH operation. (required)
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @return ApiResponse&lt;Input&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The input was successfully updated. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Input> inputsUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = inputsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, ifMatch, null);
        Type localVarReturnType = new TypeToken<Input>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing input under an existing streaming job. This can be used to partially update (ie. update one or two properties) an input without affecting the rest the job or input definition.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param inputName The name of the input. (required)
     * @param input An Input object. The properties specified here will overwrite the corresponding properties in the existing input (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing input will remain the same and not change as a result of this PATCH operation. (required)
     * @param ifMatch The ETag of the input. Omit this value to always overwrite the current input. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The input was successfully updated. </td><td>  * ETag - The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call inputsUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String inputName, Input input, String ifMatch, final ApiCallback<Input> _callback) throws ApiException {

        okhttp3.Call localVarCall = inputsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, inputName, input, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<Input>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
