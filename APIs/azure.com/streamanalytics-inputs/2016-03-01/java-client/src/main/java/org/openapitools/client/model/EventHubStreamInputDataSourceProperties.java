/*
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties that are associated with a Event Hub input containing stream data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:36.946238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventHubStreamInputDataSourceProperties {
  public static final String SERIALIZED_NAME_CONSUMER_GROUP_NAME = "consumerGroupName";
  @SerializedName(SERIALIZED_NAME_CONSUMER_GROUP_NAME)
  private String consumerGroupName;

  public static final String SERIALIZED_NAME_EVENT_HUB_NAME = "eventHubName";
  @SerializedName(SERIALIZED_NAME_EVENT_HUB_NAME)
  private String eventHubName;

  public static final String SERIALIZED_NAME_SERVICE_BUS_NAMESPACE = "serviceBusNamespace";
  @SerializedName(SERIALIZED_NAME_SERVICE_BUS_NAMESPACE)
  private String serviceBusNamespace;

  public static final String SERIALIZED_NAME_SHARED_ACCESS_POLICY_KEY = "sharedAccessPolicyKey";
  @SerializedName(SERIALIZED_NAME_SHARED_ACCESS_POLICY_KEY)
  private String sharedAccessPolicyKey;

  public static final String SERIALIZED_NAME_SHARED_ACCESS_POLICY_NAME = "sharedAccessPolicyName";
  @SerializedName(SERIALIZED_NAME_SHARED_ACCESS_POLICY_NAME)
  private String sharedAccessPolicyName;

  public EventHubStreamInputDataSourceProperties() {
  }

  public EventHubStreamInputDataSourceProperties consumerGroupName(String consumerGroupName) {
    this.consumerGroupName = consumerGroupName;
    return this;
  }

  /**
   * The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hubâ€™s default consumer group.
   * @return consumerGroupName
   */
  @javax.annotation.Nullable
  public String getConsumerGroupName() {
    return consumerGroupName;
  }

  public void setConsumerGroupName(String consumerGroupName) {
    this.consumerGroupName = consumerGroupName;
  }


  public EventHubStreamInputDataSourceProperties eventHubName(String eventHubName) {
    this.eventHubName = eventHubName;
    return this;
  }

  /**
   * The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
   * @return eventHubName
   */
  @javax.annotation.Nullable
  public String getEventHubName() {
    return eventHubName;
  }

  public void setEventHubName(String eventHubName) {
    this.eventHubName = eventHubName;
  }


  public EventHubStreamInputDataSourceProperties serviceBusNamespace(String serviceBusNamespace) {
    this.serviceBusNamespace = serviceBusNamespace;
    return this;
  }

  /**
   * The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
   * @return serviceBusNamespace
   */
  @javax.annotation.Nullable
  public String getServiceBusNamespace() {
    return serviceBusNamespace;
  }

  public void setServiceBusNamespace(String serviceBusNamespace) {
    this.serviceBusNamespace = serviceBusNamespace;
  }


  public EventHubStreamInputDataSourceProperties sharedAccessPolicyKey(String sharedAccessPolicyKey) {
    this.sharedAccessPolicyKey = sharedAccessPolicyKey;
    return this;
  }

  /**
   * The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
   * @return sharedAccessPolicyKey
   */
  @javax.annotation.Nullable
  public String getSharedAccessPolicyKey() {
    return sharedAccessPolicyKey;
  }

  public void setSharedAccessPolicyKey(String sharedAccessPolicyKey) {
    this.sharedAccessPolicyKey = sharedAccessPolicyKey;
  }


  public EventHubStreamInputDataSourceProperties sharedAccessPolicyName(String sharedAccessPolicyName) {
    this.sharedAccessPolicyName = sharedAccessPolicyName;
    return this;
  }

  /**
   * The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
   * @return sharedAccessPolicyName
   */
  @javax.annotation.Nullable
  public String getSharedAccessPolicyName() {
    return sharedAccessPolicyName;
  }

  public void setSharedAccessPolicyName(String sharedAccessPolicyName) {
    this.sharedAccessPolicyName = sharedAccessPolicyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventHubStreamInputDataSourceProperties eventHubStreamInputDataSourceProperties = (EventHubStreamInputDataSourceProperties) o;
    return Objects.equals(this.consumerGroupName, eventHubStreamInputDataSourceProperties.consumerGroupName) &&
        Objects.equals(this.eventHubName, eventHubStreamInputDataSourceProperties.eventHubName) &&
        Objects.equals(this.serviceBusNamespace, eventHubStreamInputDataSourceProperties.serviceBusNamespace) &&
        Objects.equals(this.sharedAccessPolicyKey, eventHubStreamInputDataSourceProperties.sharedAccessPolicyKey) &&
        Objects.equals(this.sharedAccessPolicyName, eventHubStreamInputDataSourceProperties.sharedAccessPolicyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerGroupName, eventHubName, serviceBusNamespace, sharedAccessPolicyKey, sharedAccessPolicyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventHubStreamInputDataSourceProperties {\n");
    sb.append("    consumerGroupName: ").append(toIndentedString(consumerGroupName)).append("\n");
    sb.append("    eventHubName: ").append(toIndentedString(eventHubName)).append("\n");
    sb.append("    serviceBusNamespace: ").append(toIndentedString(serviceBusNamespace)).append("\n");
    sb.append("    sharedAccessPolicyKey: ").append(toIndentedString(sharedAccessPolicyKey)).append("\n");
    sb.append("    sharedAccessPolicyName: ").append(toIndentedString(sharedAccessPolicyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventHubName");
    openapiFields.add("serviceBusNamespace");
    openapiFields.add("sharedAccessPolicyKey");
    openapiFields.add("sharedAccessPolicyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventHubStreamInputDataSourceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventHubStreamInputDataSourceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventHubStreamInputDataSourceProperties is not found in the empty JSON string", EventHubStreamInputDataSourceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventHubStreamInputDataSourceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventHubStreamInputDataSourceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consumerGroupName") != null && !jsonObj.get("consumerGroupName").isJsonNull()) && !jsonObj.get("consumerGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerGroupName").toString()));
      }
      if ((jsonObj.get("eventHubName") != null && !jsonObj.get("eventHubName").isJsonNull()) && !jsonObj.get("eventHubName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventHubName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventHubName").toString()));
      }
      if ((jsonObj.get("serviceBusNamespace") != null && !jsonObj.get("serviceBusNamespace").isJsonNull()) && !jsonObj.get("serviceBusNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceBusNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceBusNamespace").toString()));
      }
      if ((jsonObj.get("sharedAccessPolicyKey") != null && !jsonObj.get("sharedAccessPolicyKey").isJsonNull()) && !jsonObj.get("sharedAccessPolicyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedAccessPolicyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedAccessPolicyKey").toString()));
      }
      if ((jsonObj.get("sharedAccessPolicyName") != null && !jsonObj.get("sharedAccessPolicyName").isJsonNull()) && !jsonObj.get("sharedAccessPolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedAccessPolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedAccessPolicyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventHubStreamInputDataSourceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventHubStreamInputDataSourceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventHubStreamInputDataSourceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventHubStreamInputDataSourceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EventHubStreamInputDataSourceProperties>() {
           @Override
           public void write(JsonWriter out, EventHubStreamInputDataSourceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventHubStreamInputDataSourceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventHubStreamInputDataSourceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventHubStreamInputDataSourceProperties
   * @throws IOException if the JSON string is invalid with respect to EventHubStreamInputDataSourceProperties
   */
  public static EventHubStreamInputDataSourceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventHubStreamInputDataSourceProperties.class);
  }

  /**
   * Convert an instance of EventHubStreamInputDataSourceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

