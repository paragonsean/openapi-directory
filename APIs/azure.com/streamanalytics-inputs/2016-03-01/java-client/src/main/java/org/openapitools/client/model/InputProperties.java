/*
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Diagnostics;
import org.openapitools.client.model.Serialization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties that are associated with an input.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:36.946238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputProperties {
  public static final String SERIALIZED_NAME_DIAGNOSTICS = "diagnostics";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS)
  private Diagnostics diagnostics;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_SERIALIZATION = "serialization";
  @SerializedName(SERIALIZED_NAME_SERIALIZATION)
  private Serialization serialization;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected String type;

  public InputProperties() {
    this.type = this.getClass().getSimpleName();
  }

  public InputProperties(
     String etag
  ) {
    this();
    this.etag = etag;
  }

  public InputProperties diagnostics(Diagnostics diagnostics) {
    this.diagnostics = diagnostics;
    return this;
  }

  /**
   * Get diagnostics
   * @return diagnostics
   */
  @javax.annotation.Nullable
  public Diagnostics getDiagnostics() {
    return diagnostics;
  }

  public void setDiagnostics(Diagnostics diagnostics) {
    this.diagnostics = diagnostics;
  }


  /**
   * The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  public InputProperties serialization(Serialization serialization) {
    this.serialization = serialization;
    return this;
  }

  /**
   * Get serialization
   * @return serialization
   */
  @javax.annotation.Nullable
  public Serialization getSerialization() {
    return serialization;
  }

  public void setSerialization(Serialization serialization) {
    this.serialization = serialization;
  }


  public InputProperties type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputProperties inputProperties = (InputProperties) o;
    return Objects.equals(this.diagnostics, inputProperties.diagnostics) &&
        Objects.equals(this.etag, inputProperties.etag) &&
        Objects.equals(this.serialization, inputProperties.serialization) &&
        Objects.equals(this.type, inputProperties.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diagnostics, etag, serialization, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputProperties {\n");
    sb.append("    diagnostics: ").append(toIndentedString(diagnostics)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    serialization: ").append(toIndentedString(serialization)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diagnostics");
    openapiFields.add("etag");
    openapiFields.add("serialization");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputProperties is not found in the empty JSON string", InputProperties.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("type").getAsString();
      switch (discriminatorValue) {
        case "ReferenceInputProperties":
          ReferenceInputProperties.validateJsonElement(jsonElement);
          break;
        case "StreamInputProperties":
          StreamInputProperties.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of InputProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputProperties
   * @throws IOException if the JSON string is invalid with respect to InputProperties
   */
  public static InputProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputProperties.class);
  }

  /**
   * Convert an instance of InputProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

