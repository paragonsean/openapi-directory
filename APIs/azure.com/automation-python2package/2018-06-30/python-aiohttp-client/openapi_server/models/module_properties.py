# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_link import ContentLink
from openapi_server.models.module_error_info import ModuleErrorInfo
from openapi_server import util


class ModuleProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_count: int=None, content_link: ContentLink=None, creation_time: datetime=None, description: str=None, error: ModuleErrorInfo=None, is_composite: bool=None, is_global: bool=None, last_modified_time: datetime=None, provisioning_state: str=None, size_in_bytes: int=None, version: str=None):
        """ModuleProperties - a model defined in OpenAPI

        :param activity_count: The activity_count of this ModuleProperties.
        :param content_link: The content_link of this ModuleProperties.
        :param creation_time: The creation_time of this ModuleProperties.
        :param description: The description of this ModuleProperties.
        :param error: The error of this ModuleProperties.
        :param is_composite: The is_composite of this ModuleProperties.
        :param is_global: The is_global of this ModuleProperties.
        :param last_modified_time: The last_modified_time of this ModuleProperties.
        :param provisioning_state: The provisioning_state of this ModuleProperties.
        :param size_in_bytes: The size_in_bytes of this ModuleProperties.
        :param version: The version of this ModuleProperties.
        """
        self.openapi_types = {
            'activity_count': int,
            'content_link': ContentLink,
            'creation_time': datetime,
            'description': str,
            'error': ModuleErrorInfo,
            'is_composite': bool,
            'is_global': bool,
            'last_modified_time': datetime,
            'provisioning_state': str,
            'size_in_bytes': int,
            'version': str
        }

        self.attribute_map = {
            'activity_count': 'activityCount',
            'content_link': 'contentLink',
            'creation_time': 'creationTime',
            'description': 'description',
            'error': 'error',
            'is_composite': 'isComposite',
            'is_global': 'isGlobal',
            'last_modified_time': 'lastModifiedTime',
            'provisioning_state': 'provisioningState',
            'size_in_bytes': 'sizeInBytes',
            'version': 'version'
        }

        self._activity_count = activity_count
        self._content_link = content_link
        self._creation_time = creation_time
        self._description = description
        self._error = error
        self._is_composite = is_composite
        self._is_global = is_global
        self._last_modified_time = last_modified_time
        self._provisioning_state = provisioning_state
        self._size_in_bytes = size_in_bytes
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModuleProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModuleProperties of this ModuleProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_count(self):
        """Gets the activity_count of this ModuleProperties.

        Gets or sets the activity count of the module.

        :return: The activity_count of this ModuleProperties.
        :rtype: int
        """
        return self._activity_count

    @activity_count.setter
    def activity_count(self, activity_count):
        """Sets the activity_count of this ModuleProperties.

        Gets or sets the activity count of the module.

        :param activity_count: The activity_count of this ModuleProperties.
        :type activity_count: int
        """

        self._activity_count = activity_count

    @property
    def content_link(self):
        """Gets the content_link of this ModuleProperties.


        :return: The content_link of this ModuleProperties.
        :rtype: ContentLink
        """
        return self._content_link

    @content_link.setter
    def content_link(self, content_link):
        """Sets the content_link of this ModuleProperties.


        :param content_link: The content_link of this ModuleProperties.
        :type content_link: ContentLink
        """

        self._content_link = content_link

    @property
    def creation_time(self):
        """Gets the creation_time of this ModuleProperties.

        Gets or sets the creation time.

        :return: The creation_time of this ModuleProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ModuleProperties.

        Gets or sets the creation time.

        :param creation_time: The creation_time of this ModuleProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this ModuleProperties.

        Gets or sets the description.

        :return: The description of this ModuleProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModuleProperties.

        Gets or sets the description.

        :param description: The description of this ModuleProperties.
        :type description: str
        """

        self._description = description

    @property
    def error(self):
        """Gets the error of this ModuleProperties.


        :return: The error of this ModuleProperties.
        :rtype: ModuleErrorInfo
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ModuleProperties.


        :param error: The error of this ModuleProperties.
        :type error: ModuleErrorInfo
        """

        self._error = error

    @property
    def is_composite(self):
        """Gets the is_composite of this ModuleProperties.

        Gets or sets type of module, if its composite or not.

        :return: The is_composite of this ModuleProperties.
        :rtype: bool
        """
        return self._is_composite

    @is_composite.setter
    def is_composite(self, is_composite):
        """Sets the is_composite of this ModuleProperties.

        Gets or sets type of module, if its composite or not.

        :param is_composite: The is_composite of this ModuleProperties.
        :type is_composite: bool
        """

        self._is_composite = is_composite

    @property
    def is_global(self):
        """Gets the is_global of this ModuleProperties.

        Gets or sets the isGlobal flag of the module.

        :return: The is_global of this ModuleProperties.
        :rtype: bool
        """
        return self._is_global

    @is_global.setter
    def is_global(self, is_global):
        """Sets the is_global of this ModuleProperties.

        Gets or sets the isGlobal flag of the module.

        :param is_global: The is_global of this ModuleProperties.
        :type is_global: bool
        """

        self._is_global = is_global

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this ModuleProperties.

        Gets or sets the last modified time.

        :return: The last_modified_time of this ModuleProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this ModuleProperties.

        Gets or sets the last modified time.

        :param last_modified_time: The last_modified_time of this ModuleProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ModuleProperties.

        Gets or sets the provisioning state of the module.

        :return: The provisioning_state of this ModuleProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ModuleProperties.

        Gets or sets the provisioning state of the module.

        :param provisioning_state: The provisioning_state of this ModuleProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Created", "Creating", "StartingImportModuleRunbook", "RunningImportModuleRunbook", "ContentRetrieved", "ContentDownloaded", "ContentValidated", "ConnectionTypeImported", "ContentStored", "ModuleDataStored", "ActivitiesStored", "ModuleImportRunbookComplete", "Succeeded", "Failed", "Cancelled", "Updating"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this ModuleProperties.

        Gets or sets the size in bytes of the module.

        :return: The size_in_bytes of this ModuleProperties.
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this ModuleProperties.

        Gets or sets the size in bytes of the module.

        :param size_in_bytes: The size_in_bytes of this ModuleProperties.
        :type size_in_bytes: int
        """

        self._size_in_bytes = size_in_bytes

    @property
    def version(self):
        """Gets the version of this ModuleProperties.

        Gets or sets the version of the module.

        :return: The version of this ModuleProperties.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModuleProperties.

        Gets or sets the version of the module.

        :param version: The version of this ModuleProperties.
        :type version: str
        """

        self._version = version
