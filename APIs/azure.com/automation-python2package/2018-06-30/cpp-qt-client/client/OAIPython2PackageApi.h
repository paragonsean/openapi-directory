/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPython2PackageApi_H
#define OAI_OAIPython2PackageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIModule.h"
#include "OAIModuleListResult.h"
#include "OAIPython2Package_ListByAutomationAccount_default_response.h"
#include "OAIPythonPackageCreateParameters.h"
#include "OAIPythonPackageUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPython2PackageApi : public QObject {
    Q_OBJECT

public:
    OAIPython2PackageApi(const int timeOut = 0);
    ~OAIPython2PackageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  package_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIPythonPackageCreateParameters [required]
    */
    virtual void python2PackageCreateOrUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &package_name, const QString &subscription_id, const QString &api_version, const OAIPythonPackageCreateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  package_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void python2PackageDelete(const QString &resource_group_name, const QString &automation_account_name, const QString &package_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  package_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void python2PackageGet(const QString &resource_group_name, const QString &automation_account_name, const QString &package_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void python2PackageListByAutomationAccount(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  package_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIPythonPackageUpdateParameters [required]
    */
    virtual void python2PackageUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &package_name, const QString &subscription_id, const QString &api_version, const OAIPythonPackageUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void python2PackageCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void python2PackageDeleteCallback(OAIHttpRequestWorker *worker);
    void python2PackageGetCallback(OAIHttpRequestWorker *worker);
    void python2PackageListByAutomationAccountCallback(OAIHttpRequestWorker *worker);
    void python2PackageUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void python2PackageCreateOrUpdateSignal(OAIModule summary);
    void python2PackageDeleteSignal();
    void python2PackageGetSignal(OAIModule summary);
    void python2PackageListByAutomationAccountSignal(OAIModuleListResult summary);
    void python2PackageUpdateSignal(OAIModule summary);


    void python2PackageCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModule summary);
    void python2PackageDeleteSignalFull(OAIHttpRequestWorker *worker);
    void python2PackageGetSignalFull(OAIHttpRequestWorker *worker, OAIModule summary);
    void python2PackageListByAutomationAccountSignalFull(OAIHttpRequestWorker *worker, OAIModuleListResult summary);
    void python2PackageUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModule summary);

    Q_DECL_DEPRECATED_X("Use python2PackageCreateOrUpdateSignalError() instead")
    void python2PackageCreateOrUpdateSignalE(OAIModule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void python2PackageCreateOrUpdateSignalError(OAIModule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use python2PackageDeleteSignalError() instead")
    void python2PackageDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void python2PackageDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use python2PackageGetSignalError() instead")
    void python2PackageGetSignalE(OAIModule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void python2PackageGetSignalError(OAIModule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use python2PackageListByAutomationAccountSignalError() instead")
    void python2PackageListByAutomationAccountSignalE(OAIModuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void python2PackageListByAutomationAccountSignalError(OAIModuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use python2PackageUpdateSignalError() instead")
    void python2PackageUpdateSignalE(OAIModule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void python2PackageUpdateSignalError(OAIModule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use python2PackageCreateOrUpdateSignalErrorFull() instead")
    void python2PackageCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void python2PackageCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use python2PackageDeleteSignalErrorFull() instead")
    void python2PackageDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void python2PackageDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use python2PackageGetSignalErrorFull() instead")
    void python2PackageGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void python2PackageGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use python2PackageListByAutomationAccountSignalErrorFull() instead")
    void python2PackageListByAutomationAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void python2PackageListByAutomationAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use python2PackageUpdateSignalErrorFull() instead")
    void python2PackageUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void python2PackageUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
