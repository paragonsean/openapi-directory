/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-06-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ActivityParameterValidationSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of the activity parameter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:59.675976-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityParameter {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_DYNAMIC = "isDynamic";
  @SerializedName(SERIALIZED_NAME_IS_DYNAMIC)
  private Boolean isDynamic;

  public static final String SERIALIZED_NAME_IS_MANDATORY = "isMandatory";
  @SerializedName(SERIALIZED_NAME_IS_MANDATORY)
  private Boolean isMandatory;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Long position;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALIDATION_SET = "validationSet";
  @SerializedName(SERIALIZED_NAME_VALIDATION_SET)
  private List<ActivityParameterValidationSet> validationSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE_FROM_PIPELINE = "valueFromPipeline";
  @SerializedName(SERIALIZED_NAME_VALUE_FROM_PIPELINE)
  private Boolean valueFromPipeline;

  public static final String SERIALIZED_NAME_VALUE_FROM_PIPELINE_BY_PROPERTY_NAME = "valueFromPipelineByPropertyName";
  @SerializedName(SERIALIZED_NAME_VALUE_FROM_PIPELINE_BY_PROPERTY_NAME)
  private Boolean valueFromPipelineByPropertyName;

  public static final String SERIALIZED_NAME_VALUE_FROM_REMAINING_ARGUMENTS = "valueFromRemainingArguments";
  @SerializedName(SERIALIZED_NAME_VALUE_FROM_REMAINING_ARGUMENTS)
  private Boolean valueFromRemainingArguments;

  public ActivityParameter() {
  }

  public ActivityParameter description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Gets or sets the description of the activity parameter.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ActivityParameter isDynamic(Boolean isDynamic) {
    this.isDynamic = isDynamic;
    return this;
  }

  /**
   * Gets or sets a Boolean value that indicates true if the parameter is dynamic.
   * @return isDynamic
   */
  @javax.annotation.Nullable
  public Boolean getIsDynamic() {
    return isDynamic;
  }

  public void setIsDynamic(Boolean isDynamic) {
    this.isDynamic = isDynamic;
  }


  public ActivityParameter isMandatory(Boolean isMandatory) {
    this.isMandatory = isMandatory;
    return this;
  }

  /**
   * Gets or sets a Boolean value that indicates true if the parameter is required. If the value is false, the parameter is optional.
   * @return isMandatory
   */
  @javax.annotation.Nullable
  public Boolean getIsMandatory() {
    return isMandatory;
  }

  public void setIsMandatory(Boolean isMandatory) {
    this.isMandatory = isMandatory;
  }


  public ActivityParameter name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name of the activity parameter.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ActivityParameter position(Long position) {
    this.position = position;
    return this;
  }

  /**
   * Gets or sets the position of the activity parameter.
   * @return position
   */
  @javax.annotation.Nullable
  public Long getPosition() {
    return position;
  }

  public void setPosition(Long position) {
    this.position = position;
  }


  public ActivityParameter type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Gets or sets the type of the activity parameter.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ActivityParameter validationSet(List<ActivityParameterValidationSet> validationSet) {
    this.validationSet = validationSet;
    return this;
  }

  public ActivityParameter addValidationSetItem(ActivityParameterValidationSet validationSetItem) {
    if (this.validationSet == null) {
      this.validationSet = new ArrayList<>();
    }
    this.validationSet.add(validationSetItem);
    return this;
  }

  /**
   * Gets or sets the validation set of activity parameter.
   * @return validationSet
   */
  @javax.annotation.Nullable
  public List<ActivityParameterValidationSet> getValidationSet() {
    return validationSet;
  }

  public void setValidationSet(List<ActivityParameterValidationSet> validationSet) {
    this.validationSet = validationSet;
  }


  public ActivityParameter valueFromPipeline(Boolean valueFromPipeline) {
    this.valueFromPipeline = valueFromPipeline;
    return this;
  }

  /**
   * Gets or sets a Boolean value that indicates true if the parameter can take values from the incoming pipeline objects. This setting is used if the cmdlet must access the complete input object. false indicates that the parameter cannot take values from the complete input object.
   * @return valueFromPipeline
   */
  @javax.annotation.Nullable
  public Boolean getValueFromPipeline() {
    return valueFromPipeline;
  }

  public void setValueFromPipeline(Boolean valueFromPipeline) {
    this.valueFromPipeline = valueFromPipeline;
  }


  public ActivityParameter valueFromPipelineByPropertyName(Boolean valueFromPipelineByPropertyName) {
    this.valueFromPipelineByPropertyName = valueFromPipelineByPropertyName;
    return this;
  }

  /**
   * Gets or sets a Boolean value that indicates true if the parameter can be filled from a property of the incoming pipeline object that has the same name as this parameter. false indicates that the parameter cannot be filled from the incoming pipeline object property with the same name. 
   * @return valueFromPipelineByPropertyName
   */
  @javax.annotation.Nullable
  public Boolean getValueFromPipelineByPropertyName() {
    return valueFromPipelineByPropertyName;
  }

  public void setValueFromPipelineByPropertyName(Boolean valueFromPipelineByPropertyName) {
    this.valueFromPipelineByPropertyName = valueFromPipelineByPropertyName;
  }


  public ActivityParameter valueFromRemainingArguments(Boolean valueFromRemainingArguments) {
    this.valueFromRemainingArguments = valueFromRemainingArguments;
    return this;
  }

  /**
   * Gets or sets a Boolean value that indicates true if the cmdlet parameter accepts all the remaining command-line arguments that are associated with this parameter in the form of an array. false if the cmdlet parameter does not accept all the remaining argument values.
   * @return valueFromRemainingArguments
   */
  @javax.annotation.Nullable
  public Boolean getValueFromRemainingArguments() {
    return valueFromRemainingArguments;
  }

  public void setValueFromRemainingArguments(Boolean valueFromRemainingArguments) {
    this.valueFromRemainingArguments = valueFromRemainingArguments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityParameter activityParameter = (ActivityParameter) o;
    return Objects.equals(this.description, activityParameter.description) &&
        Objects.equals(this.isDynamic, activityParameter.isDynamic) &&
        Objects.equals(this.isMandatory, activityParameter.isMandatory) &&
        Objects.equals(this.name, activityParameter.name) &&
        Objects.equals(this.position, activityParameter.position) &&
        Objects.equals(this.type, activityParameter.type) &&
        Objects.equals(this.validationSet, activityParameter.validationSet) &&
        Objects.equals(this.valueFromPipeline, activityParameter.valueFromPipeline) &&
        Objects.equals(this.valueFromPipelineByPropertyName, activityParameter.valueFromPipelineByPropertyName) &&
        Objects.equals(this.valueFromRemainingArguments, activityParameter.valueFromRemainingArguments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, isDynamic, isMandatory, name, position, type, validationSet, valueFromPipeline, valueFromPipelineByPropertyName, valueFromRemainingArguments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityParameter {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isDynamic: ").append(toIndentedString(isDynamic)).append("\n");
    sb.append("    isMandatory: ").append(toIndentedString(isMandatory)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validationSet: ").append(toIndentedString(validationSet)).append("\n");
    sb.append("    valueFromPipeline: ").append(toIndentedString(valueFromPipeline)).append("\n");
    sb.append("    valueFromPipelineByPropertyName: ").append(toIndentedString(valueFromPipelineByPropertyName)).append("\n");
    sb.append("    valueFromRemainingArguments: ").append(toIndentedString(valueFromRemainingArguments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("isDynamic");
    openapiFields.add("isMandatory");
    openapiFields.add("name");
    openapiFields.add("position");
    openapiFields.add("type");
    openapiFields.add("validationSet");
    openapiFields.add("valueFromPipeline");
    openapiFields.add("valueFromPipelineByPropertyName");
    openapiFields.add("valueFromRemainingArguments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityParameter is not found in the empty JSON string", ActivityParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("validationSet") != null && !jsonObj.get("validationSet").isJsonNull()) {
        JsonArray jsonArrayvalidationSet = jsonObj.getAsJsonArray("validationSet");
        if (jsonArrayvalidationSet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validationSet").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validationSet` to be an array in the JSON string but got `%s`", jsonObj.get("validationSet").toString()));
          }

          // validate the optional field `validationSet` (array)
          for (int i = 0; i < jsonArrayvalidationSet.size(); i++) {
            ActivityParameterValidationSet.validateJsonElement(jsonArrayvalidationSet.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityParameter>() {
           @Override
           public void write(JsonWriter out, ActivityParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityParameter
   * @throws IOException if the JSON string is invalid with respect to ActivityParameter
   */
  public static ActivityParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityParameter.class);
  }

  /**
   * Convert an instance of ActivityParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

