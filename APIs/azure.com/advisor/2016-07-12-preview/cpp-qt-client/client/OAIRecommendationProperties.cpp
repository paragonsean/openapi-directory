/**
 * AdvisorManagementClient
 * REST APIs for Azure Advisor
 *
 * The version of the OpenAPI document: 2016-07-12-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationProperties::OAIRecommendationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationProperties::OAIRecommendationProperties() {
    this->initializeModel();
}

OAIRecommendationProperties::~OAIRecommendationProperties() {}

void OAIRecommendationProperties::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_impact_isSet = false;
    m_impact_isValid = false;

    m_impacted_field_isSet = false;
    m_impacted_field_isValid = false;

    m_impacted_value_isSet = false;
    m_impacted_value_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_recommendation_type_id_isSet = false;
    m_recommendation_type_id_isValid = false;

    m_risk_isSet = false;
    m_risk_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;
}

void OAIRecommendationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationProperties::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_impact_isValid = ::OpenAPI::fromJsonValue(m_impact, json[QString("impact")]);
    m_impact_isSet = !json[QString("impact")].isNull() && m_impact_isValid;

    m_impacted_field_isValid = ::OpenAPI::fromJsonValue(m_impacted_field, json[QString("impactedField")]);
    m_impacted_field_isSet = !json[QString("impactedField")].isNull() && m_impacted_field_isValid;

    m_impacted_value_isValid = ::OpenAPI::fromJsonValue(m_impacted_value, json[QString("impactedValue")]);
    m_impacted_value_isSet = !json[QString("impactedValue")].isNull() && m_impacted_value_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_recommendation_type_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_type_id, json[QString("recommendationTypeId")]);
    m_recommendation_type_id_isSet = !json[QString("recommendationTypeId")].isNull() && m_recommendation_type_id_isValid;

    m_risk_isValid = ::OpenAPI::fromJsonValue(m_risk, json[QString("risk")]);
    m_risk_isSet = !json[QString("risk")].isNull() && m_risk_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("shortDescription")]);
    m_short_description_isSet = !json[QString("shortDescription")].isNull() && m_short_description_isValid;
}

QString OAIRecommendationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_impact_isSet) {
        obj.insert(QString("impact"), ::OpenAPI::toJsonValue(m_impact));
    }
    if (m_impacted_field_isSet) {
        obj.insert(QString("impactedField"), ::OpenAPI::toJsonValue(m_impacted_field));
    }
    if (m_impacted_value_isSet) {
        obj.insert(QString("impactedValue"), ::OpenAPI::toJsonValue(m_impacted_value));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_recommendation_type_id_isSet) {
        obj.insert(QString("recommendationTypeId"), ::OpenAPI::toJsonValue(m_recommendation_type_id));
    }
    if (m_risk_isSet) {
        obj.insert(QString("risk"), ::OpenAPI::toJsonValue(m_risk));
    }
    if (m_short_description.isSet()) {
        obj.insert(QString("shortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    return obj;
}

QString OAIRecommendationProperties::getCategory() const {
    return m_category;
}
void OAIRecommendationProperties::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIRecommendationProperties::is_category_Set() const{
    return m_category_isSet;
}

bool OAIRecommendationProperties::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIRecommendationProperties::getImpact() const {
    return m_impact;
}
void OAIRecommendationProperties::setImpact(const QString &impact) {
    m_impact = impact;
    m_impact_isSet = true;
}

bool OAIRecommendationProperties::is_impact_Set() const{
    return m_impact_isSet;
}

bool OAIRecommendationProperties::is_impact_Valid() const{
    return m_impact_isValid;
}

QString OAIRecommendationProperties::getImpactedField() const {
    return m_impacted_field;
}
void OAIRecommendationProperties::setImpactedField(const QString &impacted_field) {
    m_impacted_field = impacted_field;
    m_impacted_field_isSet = true;
}

bool OAIRecommendationProperties::is_impacted_field_Set() const{
    return m_impacted_field_isSet;
}

bool OAIRecommendationProperties::is_impacted_field_Valid() const{
    return m_impacted_field_isValid;
}

QString OAIRecommendationProperties::getImpactedValue() const {
    return m_impacted_value;
}
void OAIRecommendationProperties::setImpactedValue(const QString &impacted_value) {
    m_impacted_value = impacted_value;
    m_impacted_value_isSet = true;
}

bool OAIRecommendationProperties::is_impacted_value_Set() const{
    return m_impacted_value_isSet;
}

bool OAIRecommendationProperties::is_impacted_value_Valid() const{
    return m_impacted_value_isValid;
}

QDateTime OAIRecommendationProperties::getLastUpdated() const {
    return m_last_updated;
}
void OAIRecommendationProperties::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIRecommendationProperties::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIRecommendationProperties::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QMap<QString, OAIObject> OAIRecommendationProperties::getMetadata() const {
    return m_metadata;
}
void OAIRecommendationProperties::setMetadata(const QMap<QString, OAIObject> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIRecommendationProperties::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIRecommendationProperties::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIRecommendationProperties::getRecommendationTypeId() const {
    return m_recommendation_type_id;
}
void OAIRecommendationProperties::setRecommendationTypeId(const QString &recommendation_type_id) {
    m_recommendation_type_id = recommendation_type_id;
    m_recommendation_type_id_isSet = true;
}

bool OAIRecommendationProperties::is_recommendation_type_id_Set() const{
    return m_recommendation_type_id_isSet;
}

bool OAIRecommendationProperties::is_recommendation_type_id_Valid() const{
    return m_recommendation_type_id_isValid;
}

QString OAIRecommendationProperties::getRisk() const {
    return m_risk;
}
void OAIRecommendationProperties::setRisk(const QString &risk) {
    m_risk = risk;
    m_risk_isSet = true;
}

bool OAIRecommendationProperties::is_risk_Set() const{
    return m_risk_isSet;
}

bool OAIRecommendationProperties::is_risk_Valid() const{
    return m_risk_isValid;
}

OAIShortDescription OAIRecommendationProperties::getShortDescription() const {
    return m_short_description;
}
void OAIRecommendationProperties::setShortDescription(const OAIShortDescription &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIRecommendationProperties::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIRecommendationProperties::is_short_description_Valid() const{
    return m_short_description_isValid;
}

bool OAIRecommendationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impacted_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impacted_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
