/**
 * AdvisorManagementClient
 * REST APIs for Azure Advisor
 *
 * The version of the OpenAPI document: 2016-07-12-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShortDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShortDescription::OAIShortDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShortDescription::OAIShortDescription() {
    this->initializeModel();
}

OAIShortDescription::~OAIShortDescription() {}

void OAIShortDescription::initializeModel() {

    m_problem_isSet = false;
    m_problem_isValid = false;

    m_solution_isSet = false;
    m_solution_isValid = false;
}

void OAIShortDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShortDescription::fromJsonObject(QJsonObject json) {

    m_problem_isValid = ::OpenAPI::fromJsonValue(m_problem, json[QString("problem")]);
    m_problem_isSet = !json[QString("problem")].isNull() && m_problem_isValid;

    m_solution_isValid = ::OpenAPI::fromJsonValue(m_solution, json[QString("solution")]);
    m_solution_isSet = !json[QString("solution")].isNull() && m_solution_isValid;
}

QString OAIShortDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShortDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_problem_isSet) {
        obj.insert(QString("problem"), ::OpenAPI::toJsonValue(m_problem));
    }
    if (m_solution_isSet) {
        obj.insert(QString("solution"), ::OpenAPI::toJsonValue(m_solution));
    }
    return obj;
}

QString OAIShortDescription::getProblem() const {
    return m_problem;
}
void OAIShortDescription::setProblem(const QString &problem) {
    m_problem = problem;
    m_problem_isSet = true;
}

bool OAIShortDescription::is_problem_Set() const{
    return m_problem_isSet;
}

bool OAIShortDescription::is_problem_Valid() const{
    return m_problem_isValid;
}

QString OAIShortDescription::getSolution() const {
    return m_solution;
}
void OAIShortDescription::setSolution(const QString &solution) {
    m_solution = solution;
    m_solution_isSet = true;
}

bool OAIShortDescription::is_solution_Set() const{
    return m_solution_isSet;
}

bool OAIShortDescription::is_solution_Valid() const{
    return m_solution_isValid;
}

bool OAIShortDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_problem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShortDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
