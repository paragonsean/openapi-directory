/**
 * AdvisorManagementClient
 * REST APIs for Azure Advisor
 *
 * The version of the OpenAPI document: 2016-07-12-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ShortDescription from './ShortDescription';

/**
 * The RecommendationProperties model module.
 * @module model/RecommendationProperties
 * @version 2016-07-12-preview
 */
class RecommendationProperties {
    /**
     * Constructs a new <code>RecommendationProperties</code>.
     * The properties of the recommendation.
     * @alias module:model/RecommendationProperties
     */
    constructor() { 
        
        RecommendationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecommendationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecommendationProperties} obj Optional instance to populate.
     * @return {module:model/RecommendationProperties} The populated <code>RecommendationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecommendationProperties();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('impact')) {
                obj['impact'] = ApiClient.convertToType(data['impact'], 'String');
            }
            if (data.hasOwnProperty('impactedField')) {
                obj['impactedField'] = ApiClient.convertToType(data['impactedField'], 'String');
            }
            if (data.hasOwnProperty('impactedValue')) {
                obj['impactedValue'] = ApiClient.convertToType(data['impactedValue'], 'String');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('recommendationTypeId')) {
                obj['recommendationTypeId'] = ApiClient.convertToType(data['recommendationTypeId'], 'String');
            }
            if (data.hasOwnProperty('risk')) {
                obj['risk'] = ApiClient.convertToType(data['risk'], 'String');
            }
            if (data.hasOwnProperty('shortDescription')) {
                obj['shortDescription'] = ShortDescription.constructFromObject(data['shortDescription']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecommendationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecommendationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['impact'] && !(typeof data['impact'] === 'string' || data['impact'] instanceof String)) {
            throw new Error("Expected the field `impact` to be a primitive type in the JSON string but got " + data['impact']);
        }
        // ensure the json data is a string
        if (data['impactedField'] && !(typeof data['impactedField'] === 'string' || data['impactedField'] instanceof String)) {
            throw new Error("Expected the field `impactedField` to be a primitive type in the JSON string but got " + data['impactedField']);
        }
        // ensure the json data is a string
        if (data['impactedValue'] && !(typeof data['impactedValue'] === 'string' || data['impactedValue'] instanceof String)) {
            throw new Error("Expected the field `impactedValue` to be a primitive type in the JSON string but got " + data['impactedValue']);
        }
        // ensure the json data is a string
        if (data['recommendationTypeId'] && !(typeof data['recommendationTypeId'] === 'string' || data['recommendationTypeId'] instanceof String)) {
            throw new Error("Expected the field `recommendationTypeId` to be a primitive type in the JSON string but got " + data['recommendationTypeId']);
        }
        // ensure the json data is a string
        if (data['risk'] && !(typeof data['risk'] === 'string' || data['risk'] instanceof String)) {
            throw new Error("Expected the field `risk` to be a primitive type in the JSON string but got " + data['risk']);
        }
        // validate the optional field `shortDescription`
        if (data['shortDescription']) { // data not null
          ShortDescription.validateJSON(data['shortDescription']);
        }

        return true;
    }


}



/**
 * The category of the recommendation.
 * @member {module:model/RecommendationProperties.CategoryEnum} category
 */
RecommendationProperties.prototype['category'] = undefined;

/**
 * The business impact of the recommendation.
 * @member {module:model/RecommendationProperties.ImpactEnum} impact
 */
RecommendationProperties.prototype['impact'] = undefined;

/**
 * The resource type identified by Advisor.
 * @member {String} impactedField
 */
RecommendationProperties.prototype['impactedField'] = undefined;

/**
 * The resource identified by Advisor.
 * @member {String} impactedValue
 */
RecommendationProperties.prototype['impactedValue'] = undefined;

/**
 * The most recent time that Advisor checked the validity of the recommendation.
 * @member {Date} lastUpdated
 */
RecommendationProperties.prototype['lastUpdated'] = undefined;

/**
 * The recommendation metadata.
 * @member {Object.<String, Object>} metadata
 */
RecommendationProperties.prototype['metadata'] = undefined;

/**
 * The recommendation-type GUID.
 * @member {String} recommendationTypeId
 */
RecommendationProperties.prototype['recommendationTypeId'] = undefined;

/**
 * The potential risk of not implementing the recommendation.
 * @member {module:model/RecommendationProperties.RiskEnum} risk
 */
RecommendationProperties.prototype['risk'] = undefined;

/**
 * @member {module:model/ShortDescription} shortDescription
 */
RecommendationProperties.prototype['shortDescription'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
RecommendationProperties['CategoryEnum'] = {

    /**
     * value: "HighAvailability"
     * @const
     */
    "HighAvailability": "HighAvailability",

    /**
     * value: "Security"
     * @const
     */
    "Security": "Security",

    /**
     * value: "Performance"
     * @const
     */
    "Performance": "Performance",

    /**
     * value: "Cost"
     * @const
     */
    "Cost": "Cost"
};


/**
 * Allowed values for the <code>impact</code> property.
 * @enum {String}
 * @readonly
 */
RecommendationProperties['ImpactEnum'] = {

    /**
     * value: "High"
     * @const
     */
    "High": "High",

    /**
     * value: "Medium"
     * @const
     */
    "Medium": "Medium",

    /**
     * value: "Low"
     * @const
     */
    "Low": "Low"
};


/**
 * Allowed values for the <code>risk</code> property.
 * @enum {String}
 * @readonly
 */
RecommendationProperties['RiskEnum'] = {

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};



export default RecommendationProperties;

