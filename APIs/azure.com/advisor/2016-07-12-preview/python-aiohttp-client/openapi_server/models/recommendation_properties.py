# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.short_description import ShortDescription
from openapi_server import util


class RecommendationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, impact: str=None, impacted_field: str=None, impacted_value: str=None, last_updated: datetime=None, metadata: Dict[str, object]=None, recommendation_type_id: str=None, risk: str=None, short_description: ShortDescription=None):
        """RecommendationProperties - a model defined in OpenAPI

        :param category: The category of this RecommendationProperties.
        :param impact: The impact of this RecommendationProperties.
        :param impacted_field: The impacted_field of this RecommendationProperties.
        :param impacted_value: The impacted_value of this RecommendationProperties.
        :param last_updated: The last_updated of this RecommendationProperties.
        :param metadata: The metadata of this RecommendationProperties.
        :param recommendation_type_id: The recommendation_type_id of this RecommendationProperties.
        :param risk: The risk of this RecommendationProperties.
        :param short_description: The short_description of this RecommendationProperties.
        """
        self.openapi_types = {
            'category': str,
            'impact': str,
            'impacted_field': str,
            'impacted_value': str,
            'last_updated': datetime,
            'metadata': Dict[str, object],
            'recommendation_type_id': str,
            'risk': str,
            'short_description': ShortDescription
        }

        self.attribute_map = {
            'category': 'category',
            'impact': 'impact',
            'impacted_field': 'impactedField',
            'impacted_value': 'impactedValue',
            'last_updated': 'lastUpdated',
            'metadata': 'metadata',
            'recommendation_type_id': 'recommendationTypeId',
            'risk': 'risk',
            'short_description': 'shortDescription'
        }

        self._category = category
        self._impact = impact
        self._impacted_field = impacted_field
        self._impacted_value = impacted_value
        self._last_updated = last_updated
        self._metadata = metadata
        self._recommendation_type_id = recommendation_type_id
        self._risk = risk
        self._short_description = short_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationProperties of this RecommendationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this RecommendationProperties.

        The category of the recommendation.

        :return: The category of this RecommendationProperties.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this RecommendationProperties.

        The category of the recommendation.

        :param category: The category of this RecommendationProperties.
        :type category: str
        """
        allowed_values = ["HighAvailability", "Security", "Performance", "Cost"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def impact(self):
        """Gets the impact of this RecommendationProperties.

        The business impact of the recommendation.

        :return: The impact of this RecommendationProperties.
        :rtype: str
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """Sets the impact of this RecommendationProperties.

        The business impact of the recommendation.

        :param impact: The impact of this RecommendationProperties.
        :type impact: str
        """
        allowed_values = ["High", "Medium", "Low"]  # noqa: E501
        if impact not in allowed_values:
            raise ValueError(
                "Invalid value for `impact` ({0}), must be one of {1}"
                .format(impact, allowed_values)
            )

        self._impact = impact

    @property
    def impacted_field(self):
        """Gets the impacted_field of this RecommendationProperties.

        The resource type identified by Advisor.

        :return: The impacted_field of this RecommendationProperties.
        :rtype: str
        """
        return self._impacted_field

    @impacted_field.setter
    def impacted_field(self, impacted_field):
        """Sets the impacted_field of this RecommendationProperties.

        The resource type identified by Advisor.

        :param impacted_field: The impacted_field of this RecommendationProperties.
        :type impacted_field: str
        """

        self._impacted_field = impacted_field

    @property
    def impacted_value(self):
        """Gets the impacted_value of this RecommendationProperties.

        The resource identified by Advisor.

        :return: The impacted_value of this RecommendationProperties.
        :rtype: str
        """
        return self._impacted_value

    @impacted_value.setter
    def impacted_value(self, impacted_value):
        """Sets the impacted_value of this RecommendationProperties.

        The resource identified by Advisor.

        :param impacted_value: The impacted_value of this RecommendationProperties.
        :type impacted_value: str
        """

        self._impacted_value = impacted_value

    @property
    def last_updated(self):
        """Gets the last_updated of this RecommendationProperties.

        The most recent time that Advisor checked the validity of the recommendation.

        :return: The last_updated of this RecommendationProperties.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this RecommendationProperties.

        The most recent time that Advisor checked the validity of the recommendation.

        :param last_updated: The last_updated of this RecommendationProperties.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def metadata(self):
        """Gets the metadata of this RecommendationProperties.

        The recommendation metadata.

        :return: The metadata of this RecommendationProperties.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this RecommendationProperties.

        The recommendation metadata.

        :param metadata: The metadata of this RecommendationProperties.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def recommendation_type_id(self):
        """Gets the recommendation_type_id of this RecommendationProperties.

        The recommendation-type GUID.

        :return: The recommendation_type_id of this RecommendationProperties.
        :rtype: str
        """
        return self._recommendation_type_id

    @recommendation_type_id.setter
    def recommendation_type_id(self, recommendation_type_id):
        """Sets the recommendation_type_id of this RecommendationProperties.

        The recommendation-type GUID.

        :param recommendation_type_id: The recommendation_type_id of this RecommendationProperties.
        :type recommendation_type_id: str
        """

        self._recommendation_type_id = recommendation_type_id

    @property
    def risk(self):
        """Gets the risk of this RecommendationProperties.

        The potential risk of not implementing the recommendation.

        :return: The risk of this RecommendationProperties.
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this RecommendationProperties.

        The potential risk of not implementing the recommendation.

        :param risk: The risk of this RecommendationProperties.
        :type risk: str
        """
        allowed_values = ["Error", "Warning", "None"]  # noqa: E501
        if risk not in allowed_values:
            raise ValueError(
                "Invalid value for `risk` ({0}), must be one of {1}"
                .format(risk, allowed_values)
            )

        self._risk = risk

    @property
    def short_description(self):
        """Gets the short_description of this RecommendationProperties.


        :return: The short_description of this RecommendationProperties.
        :rtype: ShortDescription
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this RecommendationProperties.


        :param short_description: The short_description of this RecommendationProperties.
        :type short_description: ShortDescription
        """

        self._short_description = short_description
