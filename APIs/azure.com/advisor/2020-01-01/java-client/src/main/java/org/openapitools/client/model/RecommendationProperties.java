/*
 * AdvisorManagementClient
 * REST APIs for Azure Advisor
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.ShortDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the recommendation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:21.411083-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationProperties {
  /**
   * The category of the recommendation.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    HIGH_AVAILABILITY("HighAvailability"),
    
    SECURITY("Security"),
    
    PERFORMANCE("Performance"),
    
    COST("Cost"),
    
    OPERATIONAL_EXCELLENCE("OperationalExcellence");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "extendedProperties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private Map<String, String> extendedProperties = new HashMap<>();

  /**
   * The business impact of the recommendation.
   */
  @JsonAdapter(ImpactEnum.Adapter.class)
  public enum ImpactEnum {
    HIGH("High"),
    
    MEDIUM("Medium"),
    
    LOW("Low");

    private String value;

    ImpactEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImpactEnum fromValue(String value) {
      for (ImpactEnum b : ImpactEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImpactEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImpactEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImpactEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImpactEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImpactEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMPACT = "impact";
  @SerializedName(SERIALIZED_NAME_IMPACT)
  private ImpactEnum impact;

  public static final String SERIALIZED_NAME_IMPACTED_FIELD = "impactedField";
  @SerializedName(SERIALIZED_NAME_IMPACTED_FIELD)
  private String impactedField;

  public static final String SERIALIZED_NAME_IMPACTED_VALUE = "impactedValue";
  @SerializedName(SERIALIZED_NAME_IMPACTED_VALUE)
  private String impactedValue;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, Object> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_RECOMMENDATION_TYPE_ID = "recommendationTypeId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_TYPE_ID)
  private String recommendationTypeId;

  /**
   * The potential risk of not implementing the recommendation.
   */
  @JsonAdapter(RiskEnum.Adapter.class)
  public enum RiskEnum {
    ERROR("Error"),
    
    WARNING("Warning"),
    
    NONE("None");

    private String value;

    RiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RiskEnum fromValue(String value) {
      for (RiskEnum b : RiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RISK = "risk";
  @SerializedName(SERIALIZED_NAME_RISK)
  private RiskEnum risk;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "shortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private ShortDescription shortDescription;

  public static final String SERIALIZED_NAME_SUPPRESSION_IDS = "suppressionIds";
  @SerializedName(SERIALIZED_NAME_SUPPRESSION_IDS)
  private List<UUID> suppressionIds = new ArrayList<>();

  public RecommendationProperties() {
  }

  public RecommendationProperties category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The category of the recommendation.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public RecommendationProperties extendedProperties(Map<String, String> extendedProperties) {
    this.extendedProperties = extendedProperties;
    return this;
  }

  public RecommendationProperties putExtendedPropertiesItem(String key, String extendedPropertiesItem) {
    if (this.extendedProperties == null) {
      this.extendedProperties = new HashMap<>();
    }
    this.extendedProperties.put(key, extendedPropertiesItem);
    return this;
  }

  /**
   * Extended properties
   * @return extendedProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getExtendedProperties() {
    return extendedProperties;
  }

  public void setExtendedProperties(Map<String, String> extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  public RecommendationProperties impact(ImpactEnum impact) {
    this.impact = impact;
    return this;
  }

  /**
   * The business impact of the recommendation.
   * @return impact
   */
  @javax.annotation.Nullable
  public ImpactEnum getImpact() {
    return impact;
  }

  public void setImpact(ImpactEnum impact) {
    this.impact = impact;
  }


  public RecommendationProperties impactedField(String impactedField) {
    this.impactedField = impactedField;
    return this;
  }

  /**
   * The resource type identified by Advisor.
   * @return impactedField
   */
  @javax.annotation.Nullable
  public String getImpactedField() {
    return impactedField;
  }

  public void setImpactedField(String impactedField) {
    this.impactedField = impactedField;
  }


  public RecommendationProperties impactedValue(String impactedValue) {
    this.impactedValue = impactedValue;
    return this;
  }

  /**
   * The resource identified by Advisor.
   * @return impactedValue
   */
  @javax.annotation.Nullable
  public String getImpactedValue() {
    return impactedValue;
  }

  public void setImpactedValue(String impactedValue) {
    this.impactedValue = impactedValue;
  }


  public RecommendationProperties lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The most recent time that Advisor checked the validity of the recommendation.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public RecommendationProperties metadata(Map<String, Object> metadata) {
    this.metadata = metadata;
    return this;
  }

  public RecommendationProperties putMetadataItem(String key, Object metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * The recommendation metadata.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, Object> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, Object> metadata) {
    this.metadata = metadata;
  }


  public RecommendationProperties recommendationTypeId(String recommendationTypeId) {
    this.recommendationTypeId = recommendationTypeId;
    return this;
  }

  /**
   * The recommendation-type GUID.
   * @return recommendationTypeId
   */
  @javax.annotation.Nullable
  public String getRecommendationTypeId() {
    return recommendationTypeId;
  }

  public void setRecommendationTypeId(String recommendationTypeId) {
    this.recommendationTypeId = recommendationTypeId;
  }


  public RecommendationProperties risk(RiskEnum risk) {
    this.risk = risk;
    return this;
  }

  /**
   * The potential risk of not implementing the recommendation.
   * @return risk
   */
  @javax.annotation.Nullable
  public RiskEnum getRisk() {
    return risk;
  }

  public void setRisk(RiskEnum risk) {
    this.risk = risk;
  }


  public RecommendationProperties shortDescription(ShortDescription shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * Get shortDescription
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public ShortDescription getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(ShortDescription shortDescription) {
    this.shortDescription = shortDescription;
  }


  public RecommendationProperties suppressionIds(List<UUID> suppressionIds) {
    this.suppressionIds = suppressionIds;
    return this;
  }

  public RecommendationProperties addSuppressionIdsItem(UUID suppressionIdsItem) {
    if (this.suppressionIds == null) {
      this.suppressionIds = new ArrayList<>();
    }
    this.suppressionIds.add(suppressionIdsItem);
    return this;
  }

  /**
   * The list of snoozed and dismissed rules for the recommendation.
   * @return suppressionIds
   */
  @javax.annotation.Nullable
  public List<UUID> getSuppressionIds() {
    return suppressionIds;
  }

  public void setSuppressionIds(List<UUID> suppressionIds) {
    this.suppressionIds = suppressionIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationProperties recommendationProperties = (RecommendationProperties) o;
    return Objects.equals(this.category, recommendationProperties.category) &&
        Objects.equals(this.extendedProperties, recommendationProperties.extendedProperties) &&
        Objects.equals(this.impact, recommendationProperties.impact) &&
        Objects.equals(this.impactedField, recommendationProperties.impactedField) &&
        Objects.equals(this.impactedValue, recommendationProperties.impactedValue) &&
        Objects.equals(this.lastUpdated, recommendationProperties.lastUpdated) &&
        Objects.equals(this.metadata, recommendationProperties.metadata) &&
        Objects.equals(this.recommendationTypeId, recommendationProperties.recommendationTypeId) &&
        Objects.equals(this.risk, recommendationProperties.risk) &&
        Objects.equals(this.shortDescription, recommendationProperties.shortDescription) &&
        Objects.equals(this.suppressionIds, recommendationProperties.suppressionIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, extendedProperties, impact, impactedField, impactedValue, lastUpdated, metadata, recommendationTypeId, risk, shortDescription, suppressionIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationProperties {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    impact: ").append(toIndentedString(impact)).append("\n");
    sb.append("    impactedField: ").append(toIndentedString(impactedField)).append("\n");
    sb.append("    impactedValue: ").append(toIndentedString(impactedValue)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    recommendationTypeId: ").append(toIndentedString(recommendationTypeId)).append("\n");
    sb.append("    risk: ").append(toIndentedString(risk)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    suppressionIds: ").append(toIndentedString(suppressionIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("extendedProperties");
    openapiFields.add("impact");
    openapiFields.add("impactedField");
    openapiFields.add("impactedValue");
    openapiFields.add("lastUpdated");
    openapiFields.add("metadata");
    openapiFields.add("recommendationTypeId");
    openapiFields.add("risk");
    openapiFields.add("shortDescription");
    openapiFields.add("suppressionIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationProperties is not found in the empty JSON string", RecommendationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("impact") != null && !jsonObj.get("impact").isJsonNull()) && !jsonObj.get("impact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impact").toString()));
      }
      // validate the optional field `impact`
      if (jsonObj.get("impact") != null && !jsonObj.get("impact").isJsonNull()) {
        ImpactEnum.validateJsonElement(jsonObj.get("impact"));
      }
      if ((jsonObj.get("impactedField") != null && !jsonObj.get("impactedField").isJsonNull()) && !jsonObj.get("impactedField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impactedField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impactedField").toString()));
      }
      if ((jsonObj.get("impactedValue") != null && !jsonObj.get("impactedValue").isJsonNull()) && !jsonObj.get("impactedValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impactedValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impactedValue").toString()));
      }
      if ((jsonObj.get("recommendationTypeId") != null && !jsonObj.get("recommendationTypeId").isJsonNull()) && !jsonObj.get("recommendationTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendationTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendationTypeId").toString()));
      }
      if ((jsonObj.get("risk") != null && !jsonObj.get("risk").isJsonNull()) && !jsonObj.get("risk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `risk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("risk").toString()));
      }
      // validate the optional field `risk`
      if (jsonObj.get("risk") != null && !jsonObj.get("risk").isJsonNull()) {
        RiskEnum.validateJsonElement(jsonObj.get("risk"));
      }
      // validate the optional field `shortDescription`
      if (jsonObj.get("shortDescription") != null && !jsonObj.get("shortDescription").isJsonNull()) {
        ShortDescription.validateJsonElement(jsonObj.get("shortDescription"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("suppressionIds") != null && !jsonObj.get("suppressionIds").isJsonNull() && !jsonObj.get("suppressionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suppressionIds` to be an array in the JSON string but got `%s`", jsonObj.get("suppressionIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationProperties>() {
           @Override
           public void write(JsonWriter out, RecommendationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationProperties
   * @throws IOException if the JSON string is invalid with respect to RecommendationProperties
   */
  public static RecommendationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationProperties.class);
  }

  /**
   * Convert an instance of RecommendationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

