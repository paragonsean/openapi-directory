/*
 * AdvisorManagementClient
 * REST APIs for Azure Advisor
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ArmErrorResponse;
import org.openapitools.client.model.ConfigData;
import org.openapitools.client.model.ConfigurationListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigurationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConfigurationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigurationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for configurationsCreateInResourceGroup
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param configurationName Advisor configuration name. Value must be &#39;default&#39; (required)
     * @param resourceGroup The name of the Azure resource group. (required)
     * @param configContract The Azure Advisor configuration data structure. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created/overwrote configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationsCreateInResourceGroupCall(String apiVersion, String subscriptionId, String configurationName, String resourceGroup, ConfigData configContract, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = configContract;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Advisor/configurations/{configurationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "configurationName" + "}", localVarApiClient.escapeString(configurationName.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationsCreateInResourceGroupValidateBeforeCall(String apiVersion, String subscriptionId, String configurationName, String resourceGroup, ConfigData configContract, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling configurationsCreateInResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling configurationsCreateInResourceGroup(Async)");
        }

        // verify the required parameter 'configurationName' is set
        if (configurationName == null) {
            throw new ApiException("Missing the required parameter 'configurationName' when calling configurationsCreateInResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling configurationsCreateInResourceGroup(Async)");
        }

        // verify the required parameter 'configContract' is set
        if (configContract == null) {
            throw new ApiException("Missing the required parameter 'configContract' when calling configurationsCreateInResourceGroup(Async)");
        }

        return configurationsCreateInResourceGroupCall(apiVersion, subscriptionId, configurationName, resourceGroup, configContract, _callback);

    }

    /**
     * Create/Overwrite Azure Advisor configuration.
     * 
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param configurationName Advisor configuration name. Value must be &#39;default&#39; (required)
     * @param resourceGroup The name of the Azure resource group. (required)
     * @param configContract The Azure Advisor configuration data structure. (required)
     * @return ConfigData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created/overwrote configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ConfigData configurationsCreateInResourceGroup(String apiVersion, String subscriptionId, String configurationName, String resourceGroup, ConfigData configContract) throws ApiException {
        ApiResponse<ConfigData> localVarResp = configurationsCreateInResourceGroupWithHttpInfo(apiVersion, subscriptionId, configurationName, resourceGroup, configContract);
        return localVarResp.getData();
    }

    /**
     * Create/Overwrite Azure Advisor configuration.
     * 
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param configurationName Advisor configuration name. Value must be &#39;default&#39; (required)
     * @param resourceGroup The name of the Azure resource group. (required)
     * @param configContract The Azure Advisor configuration data structure. (required)
     * @return ApiResponse&lt;ConfigData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created/overwrote configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigData> configurationsCreateInResourceGroupWithHttpInfo(String apiVersion, String subscriptionId, String configurationName, String resourceGroup, ConfigData configContract) throws ApiException {
        okhttp3.Call localVarCall = configurationsCreateInResourceGroupValidateBeforeCall(apiVersion, subscriptionId, configurationName, resourceGroup, configContract, null);
        Type localVarReturnType = new TypeToken<ConfigData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create/Overwrite Azure Advisor configuration. (asynchronously)
     * 
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param configurationName Advisor configuration name. Value must be &#39;default&#39; (required)
     * @param resourceGroup The name of the Azure resource group. (required)
     * @param configContract The Azure Advisor configuration data structure. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created/overwrote configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationsCreateInResourceGroupAsync(String apiVersion, String subscriptionId, String configurationName, String resourceGroup, ConfigData configContract, final ApiCallback<ConfigData> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationsCreateInResourceGroupValidateBeforeCall(apiVersion, subscriptionId, configurationName, resourceGroup, configContract, _callback);
        Type localVarReturnType = new TypeToken<ConfigData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationsCreateInSubscription
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param configurationName Advisor configuration name. Value must be &#39;default&#39; (required)
     * @param configContract The Azure Advisor configuration data structure. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created/overwrote configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationsCreateInSubscriptionCall(String apiVersion, String subscriptionId, String configurationName, ConfigData configContract, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = configContract;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/configurations/{configurationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "configurationName" + "}", localVarApiClient.escapeString(configurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationsCreateInSubscriptionValidateBeforeCall(String apiVersion, String subscriptionId, String configurationName, ConfigData configContract, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling configurationsCreateInSubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling configurationsCreateInSubscription(Async)");
        }

        // verify the required parameter 'configurationName' is set
        if (configurationName == null) {
            throw new ApiException("Missing the required parameter 'configurationName' when calling configurationsCreateInSubscription(Async)");
        }

        // verify the required parameter 'configContract' is set
        if (configContract == null) {
            throw new ApiException("Missing the required parameter 'configContract' when calling configurationsCreateInSubscription(Async)");
        }

        return configurationsCreateInSubscriptionCall(apiVersion, subscriptionId, configurationName, configContract, _callback);

    }

    /**
     * Create/Overwrite Azure Advisor configuration.
     * Create/Overwrite Azure Advisor configuration and also delete all configurations of contained resource groups.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param configurationName Advisor configuration name. Value must be &#39;default&#39; (required)
     * @param configContract The Azure Advisor configuration data structure. (required)
     * @return ConfigData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created/overwrote configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ConfigData configurationsCreateInSubscription(String apiVersion, String subscriptionId, String configurationName, ConfigData configContract) throws ApiException {
        ApiResponse<ConfigData> localVarResp = configurationsCreateInSubscriptionWithHttpInfo(apiVersion, subscriptionId, configurationName, configContract);
        return localVarResp.getData();
    }

    /**
     * Create/Overwrite Azure Advisor configuration.
     * Create/Overwrite Azure Advisor configuration and also delete all configurations of contained resource groups.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param configurationName Advisor configuration name. Value must be &#39;default&#39; (required)
     * @param configContract The Azure Advisor configuration data structure. (required)
     * @return ApiResponse&lt;ConfigData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created/overwrote configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigData> configurationsCreateInSubscriptionWithHttpInfo(String apiVersion, String subscriptionId, String configurationName, ConfigData configContract) throws ApiException {
        okhttp3.Call localVarCall = configurationsCreateInSubscriptionValidateBeforeCall(apiVersion, subscriptionId, configurationName, configContract, null);
        Type localVarReturnType = new TypeToken<ConfigData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create/Overwrite Azure Advisor configuration. (asynchronously)
     * Create/Overwrite Azure Advisor configuration and also delete all configurations of contained resource groups.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param configurationName Advisor configuration name. Value must be &#39;default&#39; (required)
     * @param configContract The Azure Advisor configuration data structure. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created/overwrote configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationsCreateInSubscriptionAsync(String apiVersion, String subscriptionId, String configurationName, ConfigData configContract, final ApiCallback<ConfigData> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationsCreateInSubscriptionValidateBeforeCall(apiVersion, subscriptionId, configurationName, configContract, _callback);
        Type localVarReturnType = new TypeToken<ConfigData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationsListByResourceGroup
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param resourceGroup The name of the Azure resource group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved zero or more configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationsListByResourceGroupCall(String apiVersion, String subscriptionId, String resourceGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Advisor/configurations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationsListByResourceGroupValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling configurationsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling configurationsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling configurationsListByResourceGroup(Async)");
        }

        return configurationsListByResourceGroupCall(apiVersion, subscriptionId, resourceGroup, _callback);

    }

    /**
     * Retrieve Azure Advisor configurations.
     * 
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param resourceGroup The name of the Azure resource group. (required)
     * @return ConfigurationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved zero or more configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationListResult configurationsListByResourceGroup(String apiVersion, String subscriptionId, String resourceGroup) throws ApiException {
        ApiResponse<ConfigurationListResult> localVarResp = configurationsListByResourceGroupWithHttpInfo(apiVersion, subscriptionId, resourceGroup);
        return localVarResp.getData();
    }

    /**
     * Retrieve Azure Advisor configurations.
     * 
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param resourceGroup The name of the Azure resource group. (required)
     * @return ApiResponse&lt;ConfigurationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved zero or more configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationListResult> configurationsListByResourceGroupWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroup) throws ApiException {
        okhttp3.Call localVarCall = configurationsListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroup, null);
        Type localVarReturnType = new TypeToken<ConfigurationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Azure Advisor configurations. (asynchronously)
     * 
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param resourceGroup The name of the Azure resource group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved zero or more configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationsListByResourceGroupAsync(String apiVersion, String subscriptionId, String resourceGroup, final ApiCallback<ConfigurationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationsListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroup, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationsListBySubscription
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved zero or more configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationsListBySubscriptionCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/configurations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationsListBySubscriptionValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling configurationsListBySubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling configurationsListBySubscription(Async)");
        }

        return configurationsListBySubscriptionCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * Retrieve Azure Advisor configurations.
     * Retrieve Azure Advisor configurations and also retrieve configurations of contained resource groups.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @return ConfigurationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved zero or more configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationListResult configurationsListBySubscription(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ConfigurationListResult> localVarResp = configurationsListBySubscriptionWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve Azure Advisor configurations.
     * Retrieve Azure Advisor configurations and also retrieve configurations of contained resource groups.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @return ApiResponse&lt;ConfigurationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved zero or more configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationListResult> configurationsListBySubscriptionWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = configurationsListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ConfigurationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Azure Advisor configurations. (asynchronously)
     * Retrieve Azure Advisor configurations and also retrieve configurations of contained resource groups.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved zero or more configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationsListBySubscriptionAsync(String apiVersion, String subscriptionId, final ApiCallback<ConfigurationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationsListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
