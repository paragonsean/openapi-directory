/**
 * AdvisorManagementClient
 * REST APIs for Azure Advisor
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDigestConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDigestConfig::OAIDigestConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDigestConfig::OAIDigestConfig() {
    this->initializeModel();
}

OAIDigestConfig::~OAIDigestConfig() {}

void OAIDigestConfig::initializeModel() {

    m_action_group_resource_id_isSet = false;
    m_action_group_resource_id_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDigestConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDigestConfig::fromJsonObject(QJsonObject json) {

    m_action_group_resource_id_isValid = ::OpenAPI::fromJsonValue(m_action_group_resource_id, json[QString("actionGroupResourceId")]);
    m_action_group_resource_id_isSet = !json[QString("actionGroupResourceId")].isNull() && m_action_group_resource_id_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIDigestConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDigestConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_action_group_resource_id_isSet) {
        obj.insert(QString("actionGroupResourceId"), ::OpenAPI::toJsonValue(m_action_group_resource_id));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIDigestConfig::getActionGroupResourceId() const {
    return m_action_group_resource_id;
}
void OAIDigestConfig::setActionGroupResourceId(const QString &action_group_resource_id) {
    m_action_group_resource_id = action_group_resource_id;
    m_action_group_resource_id_isSet = true;
}

bool OAIDigestConfig::is_action_group_resource_id_Set() const{
    return m_action_group_resource_id_isSet;
}

bool OAIDigestConfig::is_action_group_resource_id_Valid() const{
    return m_action_group_resource_id_isValid;
}

QList<QString> OAIDigestConfig::getCategories() const {
    return m_categories;
}
void OAIDigestConfig::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIDigestConfig::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIDigestConfig::is_categories_Valid() const{
    return m_categories_isValid;
}

qint32 OAIDigestConfig::getFrequency() const {
    return m_frequency;
}
void OAIDigestConfig::setFrequency(const qint32 &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIDigestConfig::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIDigestConfig::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIDigestConfig::getLanguage() const {
    return m_language;
}
void OAIDigestConfig::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIDigestConfig::is_language_Set() const{
    return m_language_isSet;
}

bool OAIDigestConfig::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIDigestConfig::getName() const {
    return m_name;
}
void OAIDigestConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDigestConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDigestConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDigestConfig::getState() const {
    return m_state;
}
void OAIDigestConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDigestConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDigestConfig::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDigestConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_group_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDigestConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
