/**
 * AdvisorManagementClient
 * REST APIs for Azure Advisor
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataEntityProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadataEntityProperties::OAIMetadataEntityProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadataEntityProperties::OAIMetadataEntityProperties() {
    this->initializeModel();
}

OAIMetadataEntityProperties::~OAIMetadataEntityProperties() {}

void OAIMetadataEntityProperties::initializeModel() {

    m_applicable_scenarios_isSet = false;
    m_applicable_scenarios_isValid = false;

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_supported_values_isSet = false;
    m_supported_values_isValid = false;
}

void OAIMetadataEntityProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadataEntityProperties::fromJsonObject(QJsonObject json) {

    m_applicable_scenarios_isValid = ::OpenAPI::fromJsonValue(m_applicable_scenarios, json[QString("applicableScenarios")]);
    m_applicable_scenarios_isSet = !json[QString("applicableScenarios")].isNull() && m_applicable_scenarios_isValid;

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("dependsOn")]);
    m_depends_on_isSet = !json[QString("dependsOn")].isNull() && m_depends_on_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_supported_values_isValid = ::OpenAPI::fromJsonValue(m_supported_values, json[QString("supportedValues")]);
    m_supported_values_isSet = !json[QString("supportedValues")].isNull() && m_supported_values_isValid;
}

QString OAIMetadataEntityProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadataEntityProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_applicable_scenarios.size() > 0) {
        obj.insert(QString("applicableScenarios"), ::OpenAPI::toJsonValue(m_applicable_scenarios));
    }
    if (m_depends_on.size() > 0) {
        obj.insert(QString("dependsOn"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_supported_values.size() > 0) {
        obj.insert(QString("supportedValues"), ::OpenAPI::toJsonValue(m_supported_values));
    }
    return obj;
}

QList<QString> OAIMetadataEntityProperties::getApplicableScenarios() const {
    return m_applicable_scenarios;
}
void OAIMetadataEntityProperties::setApplicableScenarios(const QList<QString> &applicable_scenarios) {
    m_applicable_scenarios = applicable_scenarios;
    m_applicable_scenarios_isSet = true;
}

bool OAIMetadataEntityProperties::is_applicable_scenarios_Set() const{
    return m_applicable_scenarios_isSet;
}

bool OAIMetadataEntityProperties::is_applicable_scenarios_Valid() const{
    return m_applicable_scenarios_isValid;
}

QList<QString> OAIMetadataEntityProperties::getDependsOn() const {
    return m_depends_on;
}
void OAIMetadataEntityProperties::setDependsOn(const QList<QString> &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAIMetadataEntityProperties::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAIMetadataEntityProperties::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

QString OAIMetadataEntityProperties::getDisplayName() const {
    return m_display_name;
}
void OAIMetadataEntityProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMetadataEntityProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMetadataEntityProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIMetadataSupportedValueDetail> OAIMetadataEntityProperties::getSupportedValues() const {
    return m_supported_values;
}
void OAIMetadataEntityProperties::setSupportedValues(const QList<OAIMetadataSupportedValueDetail> &supported_values) {
    m_supported_values = supported_values;
    m_supported_values_isSet = true;
}

bool OAIMetadataEntityProperties::is_supported_values_Set() const{
    return m_supported_values_isSet;
}

bool OAIMetadataEntityProperties::is_supported_values_Valid() const{
    return m_supported_values_isValid;
}

bool OAIMetadataEntityProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applicable_scenarios.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_depends_on.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadataEntityProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
