# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.digest_config import DigestConfig
from openapi_server import util


class ConfigDataProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digests: List[DigestConfig]=None, exclude: bool=None, low_cpu_threshold: str=None):
        """ConfigDataProperties - a model defined in OpenAPI

        :param digests: The digests of this ConfigDataProperties.
        :param exclude: The exclude of this ConfigDataProperties.
        :param low_cpu_threshold: The low_cpu_threshold of this ConfigDataProperties.
        """
        self.openapi_types = {
            'digests': List[DigestConfig],
            'exclude': bool,
            'low_cpu_threshold': str
        }

        self.attribute_map = {
            'digests': 'digests',
            'exclude': 'exclude',
            'low_cpu_threshold': 'lowCpuThreshold'
        }

        self._digests = digests
        self._exclude = exclude
        self._low_cpu_threshold = low_cpu_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigDataProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigDataProperties of this ConfigDataProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digests(self):
        """Gets the digests of this ConfigDataProperties.

        Advisor digest configuration. Valid only for subscriptions

        :return: The digests of this ConfigDataProperties.
        :rtype: List[DigestConfig]
        """
        return self._digests

    @digests.setter
    def digests(self, digests):
        """Sets the digests of this ConfigDataProperties.

        Advisor digest configuration. Valid only for subscriptions

        :param digests: The digests of this ConfigDataProperties.
        :type digests: List[DigestConfig]
        """

        self._digests = digests

    @property
    def exclude(self):
        """Gets the exclude of this ConfigDataProperties.

        Exclude the resource from Advisor evaluations. Valid values: False (default) or True.

        :return: The exclude of this ConfigDataProperties.
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this ConfigDataProperties.

        Exclude the resource from Advisor evaluations. Valid values: False (default) or True.

        :param exclude: The exclude of this ConfigDataProperties.
        :type exclude: bool
        """

        self._exclude = exclude

    @property
    def low_cpu_threshold(self):
        """Gets the low_cpu_threshold of this ConfigDataProperties.

        Minimum percentage threshold for Advisor low CPU utilization evaluation. Valid only for subscriptions. Valid values: 5 (default), 10, 15 or 20.

        :return: The low_cpu_threshold of this ConfigDataProperties.
        :rtype: str
        """
        return self._low_cpu_threshold

    @low_cpu_threshold.setter
    def low_cpu_threshold(self, low_cpu_threshold):
        """Sets the low_cpu_threshold of this ConfigDataProperties.

        Minimum percentage threshold for Advisor low CPU utilization evaluation. Valid only for subscriptions. Valid values: 5 (default), 10, 15 or 20.

        :param low_cpu_threshold: The low_cpu_threshold of this ConfigDataProperties.
        :type low_cpu_threshold: str
        """
        allowed_values = ["5", "10", "15", "20"]  # noqa: E501
        if low_cpu_threshold not in allowed_values:
            raise ValueError(
                "Invalid value for `low_cpu_threshold` ({0}), must be one of {1}"
                .format(low_cpu_threshold, allowed_values)
            )

        self._low_cpu_threshold = low_cpu_threshold
