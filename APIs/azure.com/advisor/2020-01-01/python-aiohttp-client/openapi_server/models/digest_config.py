# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DigestConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_group_resource_id: str=None, categories: List[str]=None, frequency: int=None, language: str=None, name: str=None, state: str=None):
        """DigestConfig - a model defined in OpenAPI

        :param action_group_resource_id: The action_group_resource_id of this DigestConfig.
        :param categories: The categories of this DigestConfig.
        :param frequency: The frequency of this DigestConfig.
        :param language: The language of this DigestConfig.
        :param name: The name of this DigestConfig.
        :param state: The state of this DigestConfig.
        """
        self.openapi_types = {
            'action_group_resource_id': str,
            'categories': List[str],
            'frequency': int,
            'language': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'action_group_resource_id': 'actionGroupResourceId',
            'categories': 'categories',
            'frequency': 'frequency',
            'language': 'language',
            'name': 'name',
            'state': 'state'
        }

        self._action_group_resource_id = action_group_resource_id
        self._categories = categories
        self._frequency = frequency
        self._language = language
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DigestConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DigestConfig of this DigestConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_group_resource_id(self):
        """Gets the action_group_resource_id of this DigestConfig.

        Action group resource id used by digest.

        :return: The action_group_resource_id of this DigestConfig.
        :rtype: str
        """
        return self._action_group_resource_id

    @action_group_resource_id.setter
    def action_group_resource_id(self, action_group_resource_id):
        """Sets the action_group_resource_id of this DigestConfig.

        Action group resource id used by digest.

        :param action_group_resource_id: The action_group_resource_id of this DigestConfig.
        :type action_group_resource_id: str
        """

        self._action_group_resource_id = action_group_resource_id

    @property
    def categories(self):
        """Gets the categories of this DigestConfig.

        Categories to send digest for. If categories are not provided, then digest will be sent for all categories.

        :return: The categories of this DigestConfig.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this DigestConfig.

        Categories to send digest for. If categories are not provided, then digest will be sent for all categories.

        :param categories: The categories of this DigestConfig.
        :type categories: List[str]
        """
        allowed_values = ["HighAvailability", "Security", "Performance", "Cost", "OperationalExcellence"]  # noqa: E501
        if not set(categories).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `categories` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(categories) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._categories = categories

    @property
    def frequency(self):
        """Gets the frequency of this DigestConfig.

        Frequency that digest will be triggered, in days. Value must be between 7 and 30 days inclusive.

        :return: The frequency of this DigestConfig.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this DigestConfig.

        Frequency that digest will be triggered, in days. Value must be between 7 and 30 days inclusive.

        :param frequency: The frequency of this DigestConfig.
        :type frequency: int
        """

        self._frequency = frequency

    @property
    def language(self):
        """Gets the language of this DigestConfig.

        Language for digest content body. Value must be ISO 639-1 code for one of Azure portal supported languages. Otherwise, it will be converted into one. Default value is English (en).

        :return: The language of this DigestConfig.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DigestConfig.

        Language for digest content body. Value must be ISO 639-1 code for one of Azure portal supported languages. Otherwise, it will be converted into one. Default value is English (en).

        :param language: The language of this DigestConfig.
        :type language: str
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this DigestConfig.

        Name of digest configuration. Value is case-insensitive and must be unique within a subscription.

        :return: The name of this DigestConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DigestConfig.

        Name of digest configuration. Value is case-insensitive and must be unique within a subscription.

        :param name: The name of this DigestConfig.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this DigestConfig.

        State of digest configuration.

        :return: The state of this DigestConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DigestConfig.

        State of digest configuration.

        :param state: The state of this DigestConfig.
        :type state: str
        """
        allowed_values = ["Active", "Disabled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
