/**
 * AdvisorManagementClient
 * REST APIs for Azure Advisor
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecommendationProperties from './RecommendationProperties';
import Resource from './Resource';

/**
 * The ResourceRecommendationBase model module.
 * @module model/ResourceRecommendationBase
 * @version 2020-01-01
 */
class ResourceRecommendationBase {
    /**
     * Constructs a new <code>ResourceRecommendationBase</code>.
     * Advisor Recommendation.
     * @alias module:model/ResourceRecommendationBase
     * @implements module:model/Resource
     */
    constructor() { 
        Resource.initialize(this);
        ResourceRecommendationBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceRecommendationBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceRecommendationBase} obj Optional instance to populate.
     * @return {module:model/ResourceRecommendationBase} The populated <code>ResourceRecommendationBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceRecommendationBase();
            Resource.constructFromObject(data, obj);

            if (data.hasOwnProperty('properties')) {
                obj['properties'] = RecommendationProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceRecommendationBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceRecommendationBase</code>.
     */
    static validateJSON(data) {
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          RecommendationProperties.validateJSON(data['properties']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/RecommendationProperties} properties
 */
ResourceRecommendationBase.prototype['properties'] = undefined;

/**
 * The resource ID.
 * @member {String} id
 */
ResourceRecommendationBase.prototype['id'] = undefined;

/**
 * The name of the resource.
 * @member {String} name
 */
ResourceRecommendationBase.prototype['name'] = undefined;

/**
 * The type of the resource.
 * @member {String} type
 */
ResourceRecommendationBase.prototype['type'] = undefined;


// Implement Resource interface:
/**
 * The resource ID.
 * @member {String} id
 */
Resource.prototype['id'] = undefined;
/**
 * The name of the resource.
 * @member {String} name
 */
Resource.prototype['name'] = undefined;
/**
 * The type of the resource.
 * @member {String} type
 */
Resource.prototype['type'] = undefined;




export default ResourceRecommendationBase;

