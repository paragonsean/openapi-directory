/**
 * AdvisorManagementClient
 * REST APIs for Azure Advisor
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DigestConfig model module.
 * @module model/DigestConfig
 * @version 2020-01-01
 */
class DigestConfig {
    /**
     * Constructs a new <code>DigestConfig</code>.
     * Advisor Digest configuration entity
     * @alias module:model/DigestConfig
     */
    constructor() { 
        
        DigestConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DigestConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DigestConfig} obj Optional instance to populate.
     * @return {module:model/DigestConfig} The populated <code>DigestConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DigestConfig();

            if (data.hasOwnProperty('actionGroupResourceId')) {
                obj['actionGroupResourceId'] = ApiClient.convertToType(data['actionGroupResourceId'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'Number');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DigestConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DigestConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actionGroupResourceId'] && !(typeof data['actionGroupResourceId'] === 'string' || data['actionGroupResourceId'] instanceof String)) {
            throw new Error("Expected the field `actionGroupResourceId` to be a primitive type in the JSON string but got " + data['actionGroupResourceId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Action group resource id used by digest.
 * @member {String} actionGroupResourceId
 */
DigestConfig.prototype['actionGroupResourceId'] = undefined;

/**
 * Categories to send digest for. If categories are not provided, then digest will be sent for all categories.
 * @member {Array.<module:model/DigestConfig.CategoriesEnum>} categories
 */
DigestConfig.prototype['categories'] = undefined;

/**
 * Frequency that digest will be triggered, in days. Value must be between 7 and 30 days inclusive.
 * @member {Number} frequency
 */
DigestConfig.prototype['frequency'] = undefined;

/**
 * Language for digest content body. Value must be ISO 639-1 code for one of Azure portal supported languages. Otherwise, it will be converted into one. Default value is English (en).
 * @member {String} language
 */
DigestConfig.prototype['language'] = undefined;

/**
 * Name of digest configuration. Value is case-insensitive and must be unique within a subscription.
 * @member {String} name
 */
DigestConfig.prototype['name'] = undefined;

/**
 * State of digest configuration.
 * @member {module:model/DigestConfig.StateEnum} state
 */
DigestConfig.prototype['state'] = undefined;





/**
 * Allowed values for the <code>categories</code> property.
 * @enum {String}
 * @readonly
 */
DigestConfig['CategoriesEnum'] = {

    /**
     * value: "HighAvailability"
     * @const
     */
    "HighAvailability": "HighAvailability",

    /**
     * value: "Security"
     * @const
     */
    "Security": "Security",

    /**
     * value: "Performance"
     * @const
     */
    "Performance": "Performance",

    /**
     * value: "Cost"
     * @const
     */
    "Cost": "Cost",

    /**
     * value: "OperationalExcellence"
     * @const
     */
    "OperationalExcellence": "OperationalExcellence"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DigestConfig['StateEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default DigestConfig;

