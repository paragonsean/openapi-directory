/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2016-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerServiceLinuxProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerServiceLinuxProfile::OAIContainerServiceLinuxProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerServiceLinuxProfile::OAIContainerServiceLinuxProfile() {
    this->initializeModel();
}

OAIContainerServiceLinuxProfile::~OAIContainerServiceLinuxProfile() {}

void OAIContainerServiceLinuxProfile::initializeModel() {

    m_admin_username_isSet = false;
    m_admin_username_isValid = false;

    m_ssh_isSet = false;
    m_ssh_isValid = false;
}

void OAIContainerServiceLinuxProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerServiceLinuxProfile::fromJsonObject(QJsonObject json) {

    m_admin_username_isValid = ::OpenAPI::fromJsonValue(m_admin_username, json[QString("adminUsername")]);
    m_admin_username_isSet = !json[QString("adminUsername")].isNull() && m_admin_username_isValid;

    m_ssh_isValid = ::OpenAPI::fromJsonValue(m_ssh, json[QString("ssh")]);
    m_ssh_isSet = !json[QString("ssh")].isNull() && m_ssh_isValid;
}

QString OAIContainerServiceLinuxProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerServiceLinuxProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_username_isSet) {
        obj.insert(QString("adminUsername"), ::OpenAPI::toJsonValue(m_admin_username));
    }
    if (m_ssh.isSet()) {
        obj.insert(QString("ssh"), ::OpenAPI::toJsonValue(m_ssh));
    }
    return obj;
}

QString OAIContainerServiceLinuxProfile::getAdminUsername() const {
    return m_admin_username;
}
void OAIContainerServiceLinuxProfile::setAdminUsername(const QString &admin_username) {
    m_admin_username = admin_username;
    m_admin_username_isSet = true;
}

bool OAIContainerServiceLinuxProfile::is_admin_username_Set() const{
    return m_admin_username_isSet;
}

bool OAIContainerServiceLinuxProfile::is_admin_username_Valid() const{
    return m_admin_username_isValid;
}

OAIContainerServiceSshConfiguration OAIContainerServiceLinuxProfile::getSsh() const {
    return m_ssh;
}
void OAIContainerServiceLinuxProfile::setSsh(const OAIContainerServiceSshConfiguration &ssh) {
    m_ssh = ssh;
    m_ssh_isSet = true;
}

bool OAIContainerServiceLinuxProfile::is_ssh_Set() const{
    return m_ssh_isSet;
}

bool OAIContainerServiceLinuxProfile::is_ssh_Valid() const{
    return m_ssh_isValid;
}

bool OAIContainerServiceLinuxProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerServiceLinuxProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_admin_username_isValid && m_ssh_isValid && true;
}

} // namespace OpenAPI
