# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_service_agent_pool_profile import ContainerServiceAgentPoolProfile
from openapi_server.models.container_service_diagnostics_profile import ContainerServiceDiagnosticsProfile
from openapi_server.models.container_service_linux_profile import ContainerServiceLinuxProfile
from openapi_server.models.container_service_master_profile import ContainerServiceMasterProfile
from openapi_server.models.container_service_orchestrator_profile import ContainerServiceOrchestratorProfile
from openapi_server.models.container_service_windows_profile import ContainerServiceWindowsProfile
from openapi_server import util


class ContainerServiceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_pool_profiles: List[ContainerServiceAgentPoolProfile]=None, diagnostics_profile: ContainerServiceDiagnosticsProfile=None, linux_profile: ContainerServiceLinuxProfile=None, master_profile: ContainerServiceMasterProfile=None, orchestrator_profile: ContainerServiceOrchestratorProfile=None, provisioning_state: str=None, windows_profile: ContainerServiceWindowsProfile=None):
        """ContainerServiceProperties - a model defined in OpenAPI

        :param agent_pool_profiles: The agent_pool_profiles of this ContainerServiceProperties.
        :param diagnostics_profile: The diagnostics_profile of this ContainerServiceProperties.
        :param linux_profile: The linux_profile of this ContainerServiceProperties.
        :param master_profile: The master_profile of this ContainerServiceProperties.
        :param orchestrator_profile: The orchestrator_profile of this ContainerServiceProperties.
        :param provisioning_state: The provisioning_state of this ContainerServiceProperties.
        :param windows_profile: The windows_profile of this ContainerServiceProperties.
        """
        self.openapi_types = {
            'agent_pool_profiles': List[ContainerServiceAgentPoolProfile],
            'diagnostics_profile': ContainerServiceDiagnosticsProfile,
            'linux_profile': ContainerServiceLinuxProfile,
            'master_profile': ContainerServiceMasterProfile,
            'orchestrator_profile': ContainerServiceOrchestratorProfile,
            'provisioning_state': str,
            'windows_profile': ContainerServiceWindowsProfile
        }

        self.attribute_map = {
            'agent_pool_profiles': 'agentPoolProfiles',
            'diagnostics_profile': 'diagnosticsProfile',
            'linux_profile': 'linuxProfile',
            'master_profile': 'masterProfile',
            'orchestrator_profile': 'orchestratorProfile',
            'provisioning_state': 'provisioningState',
            'windows_profile': 'windowsProfile'
        }

        self._agent_pool_profiles = agent_pool_profiles
        self._diagnostics_profile = diagnostics_profile
        self._linux_profile = linux_profile
        self._master_profile = master_profile
        self._orchestrator_profile = orchestrator_profile
        self._provisioning_state = provisioning_state
        self._windows_profile = windows_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerServiceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerServiceProperties of this ContainerServiceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_pool_profiles(self):
        """Gets the agent_pool_profiles of this ContainerServiceProperties.

        Properties of the agent pool.

        :return: The agent_pool_profiles of this ContainerServiceProperties.
        :rtype: List[ContainerServiceAgentPoolProfile]
        """
        return self._agent_pool_profiles

    @agent_pool_profiles.setter
    def agent_pool_profiles(self, agent_pool_profiles):
        """Sets the agent_pool_profiles of this ContainerServiceProperties.

        Properties of the agent pool.

        :param agent_pool_profiles: The agent_pool_profiles of this ContainerServiceProperties.
        :type agent_pool_profiles: List[ContainerServiceAgentPoolProfile]
        """
        if agent_pool_profiles is None:
            raise ValueError("Invalid value for `agent_pool_profiles`, must not be `None`")

        self._agent_pool_profiles = agent_pool_profiles

    @property
    def diagnostics_profile(self):
        """Gets the diagnostics_profile of this ContainerServiceProperties.


        :return: The diagnostics_profile of this ContainerServiceProperties.
        :rtype: ContainerServiceDiagnosticsProfile
        """
        return self._diagnostics_profile

    @diagnostics_profile.setter
    def diagnostics_profile(self, diagnostics_profile):
        """Sets the diagnostics_profile of this ContainerServiceProperties.


        :param diagnostics_profile: The diagnostics_profile of this ContainerServiceProperties.
        :type diagnostics_profile: ContainerServiceDiagnosticsProfile
        """

        self._diagnostics_profile = diagnostics_profile

    @property
    def linux_profile(self):
        """Gets the linux_profile of this ContainerServiceProperties.


        :return: The linux_profile of this ContainerServiceProperties.
        :rtype: ContainerServiceLinuxProfile
        """
        return self._linux_profile

    @linux_profile.setter
    def linux_profile(self, linux_profile):
        """Sets the linux_profile of this ContainerServiceProperties.


        :param linux_profile: The linux_profile of this ContainerServiceProperties.
        :type linux_profile: ContainerServiceLinuxProfile
        """
        if linux_profile is None:
            raise ValueError("Invalid value for `linux_profile`, must not be `None`")

        self._linux_profile = linux_profile

    @property
    def master_profile(self):
        """Gets the master_profile of this ContainerServiceProperties.


        :return: The master_profile of this ContainerServiceProperties.
        :rtype: ContainerServiceMasterProfile
        """
        return self._master_profile

    @master_profile.setter
    def master_profile(self, master_profile):
        """Sets the master_profile of this ContainerServiceProperties.


        :param master_profile: The master_profile of this ContainerServiceProperties.
        :type master_profile: ContainerServiceMasterProfile
        """
        if master_profile is None:
            raise ValueError("Invalid value for `master_profile`, must not be `None`")

        self._master_profile = master_profile

    @property
    def orchestrator_profile(self):
        """Gets the orchestrator_profile of this ContainerServiceProperties.


        :return: The orchestrator_profile of this ContainerServiceProperties.
        :rtype: ContainerServiceOrchestratorProfile
        """
        return self._orchestrator_profile

    @orchestrator_profile.setter
    def orchestrator_profile(self, orchestrator_profile):
        """Sets the orchestrator_profile of this ContainerServiceProperties.


        :param orchestrator_profile: The orchestrator_profile of this ContainerServiceProperties.
        :type orchestrator_profile: ContainerServiceOrchestratorProfile
        """

        self._orchestrator_profile = orchestrator_profile

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ContainerServiceProperties.

        the current deployment or provisioning state, which only appears in the response.

        :return: The provisioning_state of this ContainerServiceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ContainerServiceProperties.

        the current deployment or provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this ContainerServiceProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def windows_profile(self):
        """Gets the windows_profile of this ContainerServiceProperties.


        :return: The windows_profile of this ContainerServiceProperties.
        :rtype: ContainerServiceWindowsProfile
        """
        return self._windows_profile

    @windows_profile.setter
    def windows_profile(self, windows_profile):
        """Sets the windows_profile of this ContainerServiceProperties.


        :param windows_profile: The windows_profile of this ContainerServiceProperties.
        :type windows_profile: ContainerServiceWindowsProfile
        """

        self._windows_profile = windows_profile
