# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerServiceAgentPoolProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, dns_prefix: str=None, fqdn: str=None, name: str=None, vm_size: str=None):
        """ContainerServiceAgentPoolProfile - a model defined in OpenAPI

        :param count: The count of this ContainerServiceAgentPoolProfile.
        :param dns_prefix: The dns_prefix of this ContainerServiceAgentPoolProfile.
        :param fqdn: The fqdn of this ContainerServiceAgentPoolProfile.
        :param name: The name of this ContainerServiceAgentPoolProfile.
        :param vm_size: The vm_size of this ContainerServiceAgentPoolProfile.
        """
        self.openapi_types = {
            'count': int,
            'dns_prefix': str,
            'fqdn': str,
            'name': str,
            'vm_size': str
        }

        self.attribute_map = {
            'count': 'count',
            'dns_prefix': 'dnsPrefix',
            'fqdn': 'fqdn',
            'name': 'name',
            'vm_size': 'vmSize'
        }

        self._count = count
        self._dns_prefix = dns_prefix
        self._fqdn = fqdn
        self._name = name
        self._vm_size = vm_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerServiceAgentPoolProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerServiceAgentPoolProfile of this ContainerServiceAgentPoolProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ContainerServiceAgentPoolProfile.

        Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. 

        :return: The count of this ContainerServiceAgentPoolProfile.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ContainerServiceAgentPoolProfile.

        Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. 

        :param count: The count of this ContainerServiceAgentPoolProfile.
        :type count: int
        """
        if count is not None and count > 100:
            raise ValueError("Invalid value for `count`, must be a value less than or equal to `100`")
        if count is not None and count < 1:
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `1`")

        self._count = count

    @property
    def dns_prefix(self):
        """Gets the dns_prefix of this ContainerServiceAgentPoolProfile.

        DNS prefix to be used to create the FQDN for the agent pool.

        :return: The dns_prefix of this ContainerServiceAgentPoolProfile.
        :rtype: str
        """
        return self._dns_prefix

    @dns_prefix.setter
    def dns_prefix(self, dns_prefix):
        """Sets the dns_prefix of this ContainerServiceAgentPoolProfile.

        DNS prefix to be used to create the FQDN for the agent pool.

        :param dns_prefix: The dns_prefix of this ContainerServiceAgentPoolProfile.
        :type dns_prefix: str
        """
        if dns_prefix is None:
            raise ValueError("Invalid value for `dns_prefix`, must not be `None`")

        self._dns_prefix = dns_prefix

    @property
    def fqdn(self):
        """Gets the fqdn of this ContainerServiceAgentPoolProfile.

        FQDN for the agent pool.

        :return: The fqdn of this ContainerServiceAgentPoolProfile.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this ContainerServiceAgentPoolProfile.

        FQDN for the agent pool.

        :param fqdn: The fqdn of this ContainerServiceAgentPoolProfile.
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def name(self):
        """Gets the name of this ContainerServiceAgentPoolProfile.

        Unique name of the agent pool profile in the context of the subscription and resource group.

        :return: The name of this ContainerServiceAgentPoolProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContainerServiceAgentPoolProfile.

        Unique name of the agent pool profile in the context of the subscription and resource group.

        :param name: The name of this ContainerServiceAgentPoolProfile.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def vm_size(self):
        """Gets the vm_size of this ContainerServiceAgentPoolProfile.

        Size of agent VMs.

        :return: The vm_size of this ContainerServiceAgentPoolProfile.
        :rtype: str
        """
        return self._vm_size

    @vm_size.setter
    def vm_size(self, vm_size):
        """Sets the vm_size of this ContainerServiceAgentPoolProfile.

        Size of agent VMs.

        :param vm_size: The vm_size of this ContainerServiceAgentPoolProfile.
        :type vm_size: str
        """
        allowed_values = ["Standard_A0", "Standard_A1", "Standard_A2", "Standard_A3", "Standard_A4", "Standard_A5", "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11", "Standard_D1", "Standard_D2", "Standard_D3", "Standard_D4", "Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14", "Standard_D1_v2", "Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2", "Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2", "Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5", "Standard_DS1", "Standard_DS2", "Standard_DS3", "Standard_DS4", "Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14", "Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5"]  # noqa: E501
        if vm_size not in allowed_values:
            raise ValueError(
                "Invalid value for `vm_size` ({0}), must be one of {1}"
                .format(vm_size, allowed_values)
            )

        self._vm_size = vm_size
