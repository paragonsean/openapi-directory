/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2017-01-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContainerServiceMasterProfile model module.
 * @module model/ContainerServiceMasterProfile
 * @version 2017-01-31
 */
class ContainerServiceMasterProfile {
    /**
     * Constructs a new <code>ContainerServiceMasterProfile</code>.
     * Profile for the container service master.
     * @alias module:model/ContainerServiceMasterProfile
     * @param dnsPrefix {String} DNS prefix to be used to create the FQDN for master.
     */
    constructor(dnsPrefix) { 
        
        ContainerServiceMasterProfile.initialize(this, dnsPrefix);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dnsPrefix) { 
        obj['count'] = CountEnum.1;
        obj['dnsPrefix'] = dnsPrefix;
    }

    /**
     * Constructs a <code>ContainerServiceMasterProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerServiceMasterProfile} obj Optional instance to populate.
     * @return {module:model/ContainerServiceMasterProfile} The populated <code>ContainerServiceMasterProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerServiceMasterProfile();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('dnsPrefix')) {
                obj['dnsPrefix'] = ApiClient.convertToType(data['dnsPrefix'], 'String');
            }
            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerServiceMasterProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerServiceMasterProfile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContainerServiceMasterProfile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dnsPrefix'] && !(typeof data['dnsPrefix'] === 'string' || data['dnsPrefix'] instanceof String)) {
            throw new Error("Expected the field `dnsPrefix` to be a primitive type in the JSON string but got " + data['dnsPrefix']);
        }
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }

        return true;
    }


}

ContainerServiceMasterProfile.RequiredProperties = ["dnsPrefix"];

/**
 * Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The default value is 1.
 * @member {module:model/ContainerServiceMasterProfile.CountEnum} count
 * @default CountEnum.1
 */
ContainerServiceMasterProfile.prototype['count'] = CountEnum.1;

/**
 * DNS prefix to be used to create the FQDN for master.
 * @member {String} dnsPrefix
 */
ContainerServiceMasterProfile.prototype['dnsPrefix'] = undefined;

/**
 * FQDN for the master.
 * @member {String} fqdn
 */
ContainerServiceMasterProfile.prototype['fqdn'] = undefined;





/**
 * Allowed values for the <code>count</code> property.
 * @enum {Number}
 * @readonly
 */
ContainerServiceMasterProfile['CountEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 5
     * @const
     */
    "5": 5
};



export default ContainerServiceMasterProfile;

