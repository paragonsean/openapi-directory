/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2017-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeyVaultSecretRef model module.
 * @module model/KeyVaultSecretRef
 * @version 2017-07-01
 */
class KeyVaultSecretRef {
    /**
     * Constructs a new <code>KeyVaultSecretRef</code>.
     * Reference to a secret stored in Azure Key Vault.
     * @alias module:model/KeyVaultSecretRef
     * @param secretName {String} The secret name.
     * @param vaultID {String} Key vault identifier.
     */
    constructor(secretName, vaultID) { 
        
        KeyVaultSecretRef.initialize(this, secretName, vaultID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, secretName, vaultID) { 
        obj['secretName'] = secretName;
        obj['vaultID'] = vaultID;
    }

    /**
     * Constructs a <code>KeyVaultSecretRef</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyVaultSecretRef} obj Optional instance to populate.
     * @return {module:model/KeyVaultSecretRef} The populated <code>KeyVaultSecretRef</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyVaultSecretRef();

            if (data.hasOwnProperty('secretName')) {
                obj['secretName'] = ApiClient.convertToType(data['secretName'], 'String');
            }
            if (data.hasOwnProperty('vaultID')) {
                obj['vaultID'] = ApiClient.convertToType(data['vaultID'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyVaultSecretRef</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyVaultSecretRef</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KeyVaultSecretRef.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['secretName'] && !(typeof data['secretName'] === 'string' || data['secretName'] instanceof String)) {
            throw new Error("Expected the field `secretName` to be a primitive type in the JSON string but got " + data['secretName']);
        }
        // ensure the json data is a string
        if (data['vaultID'] && !(typeof data['vaultID'] === 'string' || data['vaultID'] instanceof String)) {
            throw new Error("Expected the field `vaultID` to be a primitive type in the JSON string but got " + data['vaultID']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

KeyVaultSecretRef.RequiredProperties = ["secretName", "vaultID"];

/**
 * The secret name.
 * @member {String} secretName
 */
KeyVaultSecretRef.prototype['secretName'] = undefined;

/**
 * Key vault identifier.
 * @member {String} vaultID
 */
KeyVaultSecretRef.prototype['vaultID'] = undefined;

/**
 * The secret version.
 * @member {String} version
 */
KeyVaultSecretRef.prototype['version'] = undefined;






export default KeyVaultSecretRef;

