# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_vault_secret_ref import KeyVaultSecretRef
from openapi_server import util


class ContainerServiceServicePrincipalProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, key_vault_secret_ref: KeyVaultSecretRef=None, secret: str=None):
        """ContainerServiceServicePrincipalProfile - a model defined in OpenAPI

        :param client_id: The client_id of this ContainerServiceServicePrincipalProfile.
        :param key_vault_secret_ref: The key_vault_secret_ref of this ContainerServiceServicePrincipalProfile.
        :param secret: The secret of this ContainerServiceServicePrincipalProfile.
        """
        self.openapi_types = {
            'client_id': str,
            'key_vault_secret_ref': KeyVaultSecretRef,
            'secret': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'key_vault_secret_ref': 'keyVaultSecretRef',
            'secret': 'secret'
        }

        self._client_id = client_id
        self._key_vault_secret_ref = key_vault_secret_ref
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerServiceServicePrincipalProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerServiceServicePrincipalProfile of this ContainerServiceServicePrincipalProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this ContainerServiceServicePrincipalProfile.

        The ID for the service principal.

        :return: The client_id of this ContainerServiceServicePrincipalProfile.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ContainerServiceServicePrincipalProfile.

        The ID for the service principal.

        :param client_id: The client_id of this ContainerServiceServicePrincipalProfile.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def key_vault_secret_ref(self):
        """Gets the key_vault_secret_ref of this ContainerServiceServicePrincipalProfile.


        :return: The key_vault_secret_ref of this ContainerServiceServicePrincipalProfile.
        :rtype: KeyVaultSecretRef
        """
        return self._key_vault_secret_ref

    @key_vault_secret_ref.setter
    def key_vault_secret_ref(self, key_vault_secret_ref):
        """Sets the key_vault_secret_ref of this ContainerServiceServicePrincipalProfile.


        :param key_vault_secret_ref: The key_vault_secret_ref of this ContainerServiceServicePrincipalProfile.
        :type key_vault_secret_ref: KeyVaultSecretRef
        """

        self._key_vault_secret_ref = key_vault_secret_ref

    @property
    def secret(self):
        """Gets the secret of this ContainerServiceServicePrincipalProfile.

        The secret password associated with the service principal in plain text.

        :return: The secret of this ContainerServiceServicePrincipalProfile.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ContainerServiceServicePrincipalProfile.

        The secret password associated with the service principal in plain text.

        :param secret: The secret of this ContainerServiceServicePrincipalProfile.
        :type secret: str
        """

        self._secret = secret
