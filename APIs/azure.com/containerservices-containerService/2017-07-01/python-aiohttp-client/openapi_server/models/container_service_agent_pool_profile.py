# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_service_storage_profile import ContainerServiceStorageProfile
from openapi_server.models.container_service_vm_size import ContainerServiceVMSize
from openapi_server.models.os_type import OSType
from openapi_server import util


class ContainerServiceAgentPoolProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=1, dns_prefix: str=None, fqdn: str=None, name: str=None, os_disk_size_gb: int=None, os_type: OSType=OSType.LINUX, ports: List[int]=None, storage_profile: ContainerServiceStorageProfile=None, vm_size: ContainerServiceVMSize=None, vnet_subnet_id: str=None):
        """ContainerServiceAgentPoolProfile - a model defined in OpenAPI

        :param count: The count of this ContainerServiceAgentPoolProfile.
        :param dns_prefix: The dns_prefix of this ContainerServiceAgentPoolProfile.
        :param fqdn: The fqdn of this ContainerServiceAgentPoolProfile.
        :param name: The name of this ContainerServiceAgentPoolProfile.
        :param os_disk_size_gb: The os_disk_size_gb of this ContainerServiceAgentPoolProfile.
        :param os_type: The os_type of this ContainerServiceAgentPoolProfile.
        :param ports: The ports of this ContainerServiceAgentPoolProfile.
        :param storage_profile: The storage_profile of this ContainerServiceAgentPoolProfile.
        :param vm_size: The vm_size of this ContainerServiceAgentPoolProfile.
        :param vnet_subnet_id: The vnet_subnet_id of this ContainerServiceAgentPoolProfile.
        """
        self.openapi_types = {
            'count': int,
            'dns_prefix': str,
            'fqdn': str,
            'name': str,
            'os_disk_size_gb': int,
            'os_type': OSType,
            'ports': List[int],
            'storage_profile': ContainerServiceStorageProfile,
            'vm_size': ContainerServiceVMSize,
            'vnet_subnet_id': str
        }

        self.attribute_map = {
            'count': 'count',
            'dns_prefix': 'dnsPrefix',
            'fqdn': 'fqdn',
            'name': 'name',
            'os_disk_size_gb': 'osDiskSizeGB',
            'os_type': 'osType',
            'ports': 'ports',
            'storage_profile': 'storageProfile',
            'vm_size': 'vmSize',
            'vnet_subnet_id': 'vnetSubnetID'
        }

        self._count = count
        self._dns_prefix = dns_prefix
        self._fqdn = fqdn
        self._name = name
        self._os_disk_size_gb = os_disk_size_gb
        self._os_type = os_type
        self._ports = ports
        self._storage_profile = storage_profile
        self._vm_size = vm_size
        self._vnet_subnet_id = vnet_subnet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerServiceAgentPoolProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerServiceAgentPoolProfile of this ContainerServiceAgentPoolProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ContainerServiceAgentPoolProfile.

        Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. 

        :return: The count of this ContainerServiceAgentPoolProfile.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ContainerServiceAgentPoolProfile.

        Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. 

        :param count: The count of this ContainerServiceAgentPoolProfile.
        :type count: int
        """
        if count is not None and count > 100:
            raise ValueError("Invalid value for `count`, must be a value less than or equal to `100`")
        if count is not None and count < 1:
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `1`")

        self._count = count

    @property
    def dns_prefix(self):
        """Gets the dns_prefix of this ContainerServiceAgentPoolProfile.

        DNS prefix to be used to create the FQDN for the agent pool.

        :return: The dns_prefix of this ContainerServiceAgentPoolProfile.
        :rtype: str
        """
        return self._dns_prefix

    @dns_prefix.setter
    def dns_prefix(self, dns_prefix):
        """Sets the dns_prefix of this ContainerServiceAgentPoolProfile.

        DNS prefix to be used to create the FQDN for the agent pool.

        :param dns_prefix: The dns_prefix of this ContainerServiceAgentPoolProfile.
        :type dns_prefix: str
        """

        self._dns_prefix = dns_prefix

    @property
    def fqdn(self):
        """Gets the fqdn of this ContainerServiceAgentPoolProfile.

        FQDN for the agent pool.

        :return: The fqdn of this ContainerServiceAgentPoolProfile.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this ContainerServiceAgentPoolProfile.

        FQDN for the agent pool.

        :param fqdn: The fqdn of this ContainerServiceAgentPoolProfile.
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def name(self):
        """Gets the name of this ContainerServiceAgentPoolProfile.

        Unique name of the agent pool profile in the context of the subscription and resource group.

        :return: The name of this ContainerServiceAgentPoolProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContainerServiceAgentPoolProfile.

        Unique name of the agent pool profile in the context of the subscription and resource group.

        :param name: The name of this ContainerServiceAgentPoolProfile.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def os_disk_size_gb(self):
        """Gets the os_disk_size_gb of this ContainerServiceAgentPoolProfile.

        OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.

        :return: The os_disk_size_gb of this ContainerServiceAgentPoolProfile.
        :rtype: int
        """
        return self._os_disk_size_gb

    @os_disk_size_gb.setter
    def os_disk_size_gb(self, os_disk_size_gb):
        """Sets the os_disk_size_gb of this ContainerServiceAgentPoolProfile.

        OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.

        :param os_disk_size_gb: The os_disk_size_gb of this ContainerServiceAgentPoolProfile.
        :type os_disk_size_gb: int
        """
        if os_disk_size_gb is not None and os_disk_size_gb > 1023:
            raise ValueError("Invalid value for `os_disk_size_gb`, must be a value less than or equal to `1023`")
        if os_disk_size_gb is not None and os_disk_size_gb < 0:
            raise ValueError("Invalid value for `os_disk_size_gb`, must be a value greater than or equal to `0`")

        self._os_disk_size_gb = os_disk_size_gb

    @property
    def os_type(self):
        """Gets the os_type of this ContainerServiceAgentPoolProfile.


        :return: The os_type of this ContainerServiceAgentPoolProfile.
        :rtype: OSType
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this ContainerServiceAgentPoolProfile.


        :param os_type: The os_type of this ContainerServiceAgentPoolProfile.
        :type os_type: OSType
        """

        self._os_type = os_type

    @property
    def ports(self):
        """Gets the ports of this ContainerServiceAgentPoolProfile.

        Ports number array used to expose on this agent pool. The default opened ports are different based on your choice of orchestrator.

        :return: The ports of this ContainerServiceAgentPoolProfile.
        :rtype: List[int]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ContainerServiceAgentPoolProfile.

        Ports number array used to expose on this agent pool. The default opened ports are different based on your choice of orchestrator.

        :param ports: The ports of this ContainerServiceAgentPoolProfile.
        :type ports: List[int]
        """

        self._ports = ports

    @property
    def storage_profile(self):
        """Gets the storage_profile of this ContainerServiceAgentPoolProfile.


        :return: The storage_profile of this ContainerServiceAgentPoolProfile.
        :rtype: ContainerServiceStorageProfile
        """
        return self._storage_profile

    @storage_profile.setter
    def storage_profile(self, storage_profile):
        """Sets the storage_profile of this ContainerServiceAgentPoolProfile.


        :param storage_profile: The storage_profile of this ContainerServiceAgentPoolProfile.
        :type storage_profile: ContainerServiceStorageProfile
        """

        self._storage_profile = storage_profile

    @property
    def vm_size(self):
        """Gets the vm_size of this ContainerServiceAgentPoolProfile.


        :return: The vm_size of this ContainerServiceAgentPoolProfile.
        :rtype: ContainerServiceVMSize
        """
        return self._vm_size

    @vm_size.setter
    def vm_size(self, vm_size):
        """Sets the vm_size of this ContainerServiceAgentPoolProfile.


        :param vm_size: The vm_size of this ContainerServiceAgentPoolProfile.
        :type vm_size: ContainerServiceVMSize
        """
        if vm_size is None:
            raise ValueError("Invalid value for `vm_size`, must not be `None`")

        self._vm_size = vm_size

    @property
    def vnet_subnet_id(self):
        """Gets the vnet_subnet_id of this ContainerServiceAgentPoolProfile.

        VNet SubnetID specifies the VNet's subnet identifier.

        :return: The vnet_subnet_id of this ContainerServiceAgentPoolProfile.
        :rtype: str
        """
        return self._vnet_subnet_id

    @vnet_subnet_id.setter
    def vnet_subnet_id(self, vnet_subnet_id):
        """Sets the vnet_subnet_id of this ContainerServiceAgentPoolProfile.

        VNet SubnetID specifies the VNet's subnet identifier.

        :param vnet_subnet_id: The vnet_subnet_id of this ContainerServiceAgentPoolProfile.
        :type vnet_subnet_id: str
        """

        self._vnet_subnet_id = vnet_subnet_id
