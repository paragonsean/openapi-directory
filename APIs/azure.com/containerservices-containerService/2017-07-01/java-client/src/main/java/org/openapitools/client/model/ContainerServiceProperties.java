/*
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2017-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContainerServiceAgentPoolProfile;
import org.openapitools.client.model.ContainerServiceCustomProfile;
import org.openapitools.client.model.ContainerServiceDiagnosticsProfile;
import org.openapitools.client.model.ContainerServiceLinuxProfile;
import org.openapitools.client.model.ContainerServiceMasterProfile;
import org.openapitools.client.model.ContainerServiceOrchestratorProfile;
import org.openapitools.client.model.ContainerServiceServicePrincipalProfile;
import org.openapitools.client.model.ContainerServiceWindowsProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the container service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:31.772419-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerServiceProperties {
  public static final String SERIALIZED_NAME_AGENT_POOL_PROFILES = "agentPoolProfiles";
  @SerializedName(SERIALIZED_NAME_AGENT_POOL_PROFILES)
  private List<ContainerServiceAgentPoolProfile> agentPoolProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_PROFILE = "customProfile";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PROFILE)
  private ContainerServiceCustomProfile customProfile;

  public static final String SERIALIZED_NAME_DIAGNOSTICS_PROFILE = "diagnosticsProfile";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS_PROFILE)
  private ContainerServiceDiagnosticsProfile diagnosticsProfile;

  public static final String SERIALIZED_NAME_LINUX_PROFILE = "linuxProfile";
  @SerializedName(SERIALIZED_NAME_LINUX_PROFILE)
  private ContainerServiceLinuxProfile linuxProfile;

  public static final String SERIALIZED_NAME_MASTER_PROFILE = "masterProfile";
  @SerializedName(SERIALIZED_NAME_MASTER_PROFILE)
  private ContainerServiceMasterProfile masterProfile;

  public static final String SERIALIZED_NAME_ORCHESTRATOR_PROFILE = "orchestratorProfile";
  @SerializedName(SERIALIZED_NAME_ORCHESTRATOR_PROFILE)
  private ContainerServiceOrchestratorProfile orchestratorProfile;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_SERVICE_PRINCIPAL_PROFILE = "servicePrincipalProfile";
  @SerializedName(SERIALIZED_NAME_SERVICE_PRINCIPAL_PROFILE)
  private ContainerServiceServicePrincipalProfile servicePrincipalProfile;

  public static final String SERIALIZED_NAME_WINDOWS_PROFILE = "windowsProfile";
  @SerializedName(SERIALIZED_NAME_WINDOWS_PROFILE)
  private ContainerServiceWindowsProfile windowsProfile;

  public ContainerServiceProperties() {
  }

  public ContainerServiceProperties(
     String provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public ContainerServiceProperties agentPoolProfiles(List<ContainerServiceAgentPoolProfile> agentPoolProfiles) {
    this.agentPoolProfiles = agentPoolProfiles;
    return this;
  }

  public ContainerServiceProperties addAgentPoolProfilesItem(ContainerServiceAgentPoolProfile agentPoolProfilesItem) {
    if (this.agentPoolProfiles == null) {
      this.agentPoolProfiles = new ArrayList<>();
    }
    this.agentPoolProfiles.add(agentPoolProfilesItem);
    return this;
  }

  /**
   * Properties of the agent pool.
   * @return agentPoolProfiles
   */
  @javax.annotation.Nullable
  public List<ContainerServiceAgentPoolProfile> getAgentPoolProfiles() {
    return agentPoolProfiles;
  }

  public void setAgentPoolProfiles(List<ContainerServiceAgentPoolProfile> agentPoolProfiles) {
    this.agentPoolProfiles = agentPoolProfiles;
  }


  public ContainerServiceProperties customProfile(ContainerServiceCustomProfile customProfile) {
    this.customProfile = customProfile;
    return this;
  }

  /**
   * Get customProfile
   * @return customProfile
   */
  @javax.annotation.Nullable
  public ContainerServiceCustomProfile getCustomProfile() {
    return customProfile;
  }

  public void setCustomProfile(ContainerServiceCustomProfile customProfile) {
    this.customProfile = customProfile;
  }


  public ContainerServiceProperties diagnosticsProfile(ContainerServiceDiagnosticsProfile diagnosticsProfile) {
    this.diagnosticsProfile = diagnosticsProfile;
    return this;
  }

  /**
   * Get diagnosticsProfile
   * @return diagnosticsProfile
   */
  @javax.annotation.Nullable
  public ContainerServiceDiagnosticsProfile getDiagnosticsProfile() {
    return diagnosticsProfile;
  }

  public void setDiagnosticsProfile(ContainerServiceDiagnosticsProfile diagnosticsProfile) {
    this.diagnosticsProfile = diagnosticsProfile;
  }


  public ContainerServiceProperties linuxProfile(ContainerServiceLinuxProfile linuxProfile) {
    this.linuxProfile = linuxProfile;
    return this;
  }

  /**
   * Get linuxProfile
   * @return linuxProfile
   */
  @javax.annotation.Nonnull
  public ContainerServiceLinuxProfile getLinuxProfile() {
    return linuxProfile;
  }

  public void setLinuxProfile(ContainerServiceLinuxProfile linuxProfile) {
    this.linuxProfile = linuxProfile;
  }


  public ContainerServiceProperties masterProfile(ContainerServiceMasterProfile masterProfile) {
    this.masterProfile = masterProfile;
    return this;
  }

  /**
   * Get masterProfile
   * @return masterProfile
   */
  @javax.annotation.Nonnull
  public ContainerServiceMasterProfile getMasterProfile() {
    return masterProfile;
  }

  public void setMasterProfile(ContainerServiceMasterProfile masterProfile) {
    this.masterProfile = masterProfile;
  }


  public ContainerServiceProperties orchestratorProfile(ContainerServiceOrchestratorProfile orchestratorProfile) {
    this.orchestratorProfile = orchestratorProfile;
    return this;
  }

  /**
   * Get orchestratorProfile
   * @return orchestratorProfile
   */
  @javax.annotation.Nonnull
  public ContainerServiceOrchestratorProfile getOrchestratorProfile() {
    return orchestratorProfile;
  }

  public void setOrchestratorProfile(ContainerServiceOrchestratorProfile orchestratorProfile) {
    this.orchestratorProfile = orchestratorProfile;
  }


  /**
   * The current deployment or provisioning state, which only appears in the response.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public ContainerServiceProperties servicePrincipalProfile(ContainerServiceServicePrincipalProfile servicePrincipalProfile) {
    this.servicePrincipalProfile = servicePrincipalProfile;
    return this;
  }

  /**
   * Get servicePrincipalProfile
   * @return servicePrincipalProfile
   */
  @javax.annotation.Nullable
  public ContainerServiceServicePrincipalProfile getServicePrincipalProfile() {
    return servicePrincipalProfile;
  }

  public void setServicePrincipalProfile(ContainerServiceServicePrincipalProfile servicePrincipalProfile) {
    this.servicePrincipalProfile = servicePrincipalProfile;
  }


  public ContainerServiceProperties windowsProfile(ContainerServiceWindowsProfile windowsProfile) {
    this.windowsProfile = windowsProfile;
    return this;
  }

  /**
   * Get windowsProfile
   * @return windowsProfile
   */
  @javax.annotation.Nullable
  public ContainerServiceWindowsProfile getWindowsProfile() {
    return windowsProfile;
  }

  public void setWindowsProfile(ContainerServiceWindowsProfile windowsProfile) {
    this.windowsProfile = windowsProfile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerServiceProperties containerServiceProperties = (ContainerServiceProperties) o;
    return Objects.equals(this.agentPoolProfiles, containerServiceProperties.agentPoolProfiles) &&
        Objects.equals(this.customProfile, containerServiceProperties.customProfile) &&
        Objects.equals(this.diagnosticsProfile, containerServiceProperties.diagnosticsProfile) &&
        Objects.equals(this.linuxProfile, containerServiceProperties.linuxProfile) &&
        Objects.equals(this.masterProfile, containerServiceProperties.masterProfile) &&
        Objects.equals(this.orchestratorProfile, containerServiceProperties.orchestratorProfile) &&
        Objects.equals(this.provisioningState, containerServiceProperties.provisioningState) &&
        Objects.equals(this.servicePrincipalProfile, containerServiceProperties.servicePrincipalProfile) &&
        Objects.equals(this.windowsProfile, containerServiceProperties.windowsProfile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentPoolProfiles, customProfile, diagnosticsProfile, linuxProfile, masterProfile, orchestratorProfile, provisioningState, servicePrincipalProfile, windowsProfile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerServiceProperties {\n");
    sb.append("    agentPoolProfiles: ").append(toIndentedString(agentPoolProfiles)).append("\n");
    sb.append("    customProfile: ").append(toIndentedString(customProfile)).append("\n");
    sb.append("    diagnosticsProfile: ").append(toIndentedString(diagnosticsProfile)).append("\n");
    sb.append("    linuxProfile: ").append(toIndentedString(linuxProfile)).append("\n");
    sb.append("    masterProfile: ").append(toIndentedString(masterProfile)).append("\n");
    sb.append("    orchestratorProfile: ").append(toIndentedString(orchestratorProfile)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    servicePrincipalProfile: ").append(toIndentedString(servicePrincipalProfile)).append("\n");
    sb.append("    windowsProfile: ").append(toIndentedString(windowsProfile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentPoolProfiles");
    openapiFields.add("customProfile");
    openapiFields.add("diagnosticsProfile");
    openapiFields.add("linuxProfile");
    openapiFields.add("masterProfile");
    openapiFields.add("orchestratorProfile");
    openapiFields.add("provisioningState");
    openapiFields.add("servicePrincipalProfile");
    openapiFields.add("windowsProfile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("linuxProfile");
    openapiRequiredFields.add("masterProfile");
    openapiRequiredFields.add("orchestratorProfile");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerServiceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerServiceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerServiceProperties is not found in the empty JSON string", ContainerServiceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerServiceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerServiceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContainerServiceProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("agentPoolProfiles") != null && !jsonObj.get("agentPoolProfiles").isJsonNull()) {
        JsonArray jsonArrayagentPoolProfiles = jsonObj.getAsJsonArray("agentPoolProfiles");
        if (jsonArrayagentPoolProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("agentPoolProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `agentPoolProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("agentPoolProfiles").toString()));
          }

          // validate the optional field `agentPoolProfiles` (array)
          for (int i = 0; i < jsonArrayagentPoolProfiles.size(); i++) {
            ContainerServiceAgentPoolProfile.validateJsonElement(jsonArrayagentPoolProfiles.get(i));
          };
        }
      }
      // validate the optional field `customProfile`
      if (jsonObj.get("customProfile") != null && !jsonObj.get("customProfile").isJsonNull()) {
        ContainerServiceCustomProfile.validateJsonElement(jsonObj.get("customProfile"));
      }
      // validate the optional field `diagnosticsProfile`
      if (jsonObj.get("diagnosticsProfile") != null && !jsonObj.get("diagnosticsProfile").isJsonNull()) {
        ContainerServiceDiagnosticsProfile.validateJsonElement(jsonObj.get("diagnosticsProfile"));
      }
      // validate the required field `linuxProfile`
      ContainerServiceLinuxProfile.validateJsonElement(jsonObj.get("linuxProfile"));
      // validate the required field `masterProfile`
      ContainerServiceMasterProfile.validateJsonElement(jsonObj.get("masterProfile"));
      // validate the required field `orchestratorProfile`
      ContainerServiceOrchestratorProfile.validateJsonElement(jsonObj.get("orchestratorProfile"));
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `servicePrincipalProfile`
      if (jsonObj.get("servicePrincipalProfile") != null && !jsonObj.get("servicePrincipalProfile").isJsonNull()) {
        ContainerServiceServicePrincipalProfile.validateJsonElement(jsonObj.get("servicePrincipalProfile"));
      }
      // validate the optional field `windowsProfile`
      if (jsonObj.get("windowsProfile") != null && !jsonObj.get("windowsProfile").isJsonNull()) {
        ContainerServiceWindowsProfile.validateJsonElement(jsonObj.get("windowsProfile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerServiceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerServiceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerServiceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerServiceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerServiceProperties>() {
           @Override
           public void write(JsonWriter out, ContainerServiceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerServiceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerServiceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerServiceProperties
   * @throws IOException if the JSON string is invalid with respect to ContainerServiceProperties
   */
  public static ContainerServiceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerServiceProperties.class);
  }

  /**
   * Convert an instance of ContainerServiceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

