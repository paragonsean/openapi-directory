# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_service_ssh_configuration import ContainerServiceSshConfiguration
import re
from openapi_server import util


class ContainerServiceLinuxProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_username: str=None, ssh: ContainerServiceSshConfiguration=None):
        """ContainerServiceLinuxProfile - a model defined in OpenAPI

        :param admin_username: The admin_username of this ContainerServiceLinuxProfile.
        :param ssh: The ssh of this ContainerServiceLinuxProfile.
        """
        self.openapi_types = {
            'admin_username': str,
            'ssh': ContainerServiceSshConfiguration
        }

        self.attribute_map = {
            'admin_username': 'adminUsername',
            'ssh': 'ssh'
        }

        self._admin_username = admin_username
        self._ssh = ssh

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerServiceLinuxProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerServiceLinuxProfile of this ContainerServiceLinuxProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_username(self):
        """Gets the admin_username of this ContainerServiceLinuxProfile.

        The administrator username to use for Linux VMs.

        :return: The admin_username of this ContainerServiceLinuxProfile.
        :rtype: str
        """
        return self._admin_username

    @admin_username.setter
    def admin_username(self, admin_username):
        """Sets the admin_username of this ContainerServiceLinuxProfile.

        The administrator username to use for Linux VMs.

        :param admin_username: The admin_username of this ContainerServiceLinuxProfile.
        :type admin_username: str
        """
        if admin_username is None:
            raise ValueError("Invalid value for `admin_username`, must not be `None`")
        if admin_username is not None and not re.search(r'^[a-z][a-z0-9_-]*$', admin_username):
            raise ValueError("Invalid value for `admin_username`, must be a follow pattern or equal to `/^[a-z][a-z0-9_-]*$/`")

        self._admin_username = admin_username

    @property
    def ssh(self):
        """Gets the ssh of this ContainerServiceLinuxProfile.


        :return: The ssh of this ContainerServiceLinuxProfile.
        :rtype: ContainerServiceSshConfiguration
        """
        return self._ssh

    @ssh.setter
    def ssh(self, ssh):
        """Sets the ssh of this ContainerServiceLinuxProfile.


        :param ssh: The ssh of this ContainerServiceLinuxProfile.
        :type ssh: ContainerServiceSshConfiguration
        """
        if ssh is None:
            raise ValueError("Invalid value for `ssh`, must not be `None`")

        self._ssh = ssh
