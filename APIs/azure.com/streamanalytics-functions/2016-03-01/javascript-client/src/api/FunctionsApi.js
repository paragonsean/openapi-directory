/**
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Function from '../model/Function';
import FunctionListResult from '../model/FunctionListResult';
import FunctionRetrieveDefaultDefinitionParameters from '../model/FunctionRetrieveDefaultDefinitionParameters';
import FunctionsTest200Response from '../model/FunctionsTest200Response';

/**
* Functions service.
* @module api/FunctionsApi
* @version 2016-03-01
*/
export default class FunctionsApi {

    /**
    * Constructs a new FunctionsApi. 
    * @alias module:api/FunctionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the functionsCreateOrReplace operation.
     * @callback module:api/FunctionsApi~functionsCreateOrReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Function} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a function or replaces an already existing function under an existing streaming job.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} functionName The name of the function.
     * @param {module:model/Function} _function The definition of the function that will be used to create a new function or replace the existing one under the streaming job.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The ETag of the function. Omit this value to always overwrite the current function. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param {String} [ifNoneMatch] Set to '*' to allow a new function to be created, but to prevent updating an existing function. Other values will result in a 412 Pre-condition Failed response.
     * @param {module:api/FunctionsApi~functionsCreateOrReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Function}
     */
    functionsCreateOrReplace(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, _function, opts, callback) {
      opts = opts || {};
      let postBody = _function;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling functionsCreateOrReplace");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling functionsCreateOrReplace");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling functionsCreateOrReplace");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling functionsCreateOrReplace");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling functionsCreateOrReplace");
      }
      // verify the required parameter '_function' is set
      if (_function === undefined || _function === null) {
        throw new Error("Missing the required parameter '_function' when calling functionsCreateOrReplace");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'functionName': functionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Function;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsDelete operation.
     * @callback module:api/FunctionsApi~functionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a function from the streaming job.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} functionName The name of the function.
     * @param {module:api/FunctionsApi~functionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    functionsDelete(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling functionsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling functionsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling functionsDelete");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling functionsDelete");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling functionsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'functionName': functionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsGet operation.
     * @callback module:api/FunctionsApi~functionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Function} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about the specified function.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} functionName The name of the function.
     * @param {module:api/FunctionsApi~functionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Function}
     */
    functionsGet(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling functionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling functionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling functionsGet");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling functionsGet");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling functionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'functionName': functionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Function;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsListByStreamingJob operation.
     * @callback module:api/FunctionsApi~functionsListByStreamingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the functions under the specified streaming job.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {Object} opts Optional parameters
     * @param {String} [select] The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or \"*\" to include all properties. By default, all properties are returned except diagnostics. Currently only accepts '*' as a valid value.
     * @param {module:api/FunctionsApi~functionsListByStreamingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionListResult}
     */
    functionsListByStreamingJob(apiVersion, subscriptionId, resourceGroupName, jobName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling functionsListByStreamingJob");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling functionsListByStreamingJob");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling functionsListByStreamingJob");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling functionsListByStreamingJob");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName
      };
      let queryParams = {
        '$select': opts['select'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FunctionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsRetrieveDefaultDefinition operation.
     * @callback module:api/FunctionsApi~functionsRetrieveDefaultDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Function} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the default definition of a function based on the parameters specified.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} functionName The name of the function.
     * @param {Object} opts Optional parameters
     * @param {module:model/FunctionRetrieveDefaultDefinitionParameters} [functionRetrieveDefaultDefinitionParameters] Parameters used to specify the type of function to retrieve the default definition for.
     * @param {module:api/FunctionsApi~functionsRetrieveDefaultDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Function}
     */
    functionsRetrieveDefaultDefinition(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, opts, callback) {
      opts = opts || {};
      let postBody = opts['functionRetrieveDefaultDefinitionParameters'];
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling functionsRetrieveDefaultDefinition");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling functionsRetrieveDefaultDefinition");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling functionsRetrieveDefaultDefinition");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling functionsRetrieveDefaultDefinition");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling functionsRetrieveDefaultDefinition");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'functionName': functionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Function;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}/RetrieveDefaultDefinition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsTest operation.
     * @callback module:api/FunctionsApi~functionsTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionsTest200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests if the information provided for a function is valid. This can range from testing the connection to the underlying web service behind the function or making sure the function code provided is syntactically correct.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} functionName The name of the function.
     * @param {Object} opts Optional parameters
     * @param {module:model/Function} [_function] If the function specified does not already exist, this parameter must contain the full function definition intended to be tested. If the function specified already exists, this parameter can be left null to test the existing function as is or if specified, the properties specified will overwrite the corresponding properties in the existing function (exactly like a PATCH operation) and the resulting function will be tested.
     * @param {module:api/FunctionsApi~functionsTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionsTest200Response}
     */
    functionsTest(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, opts, callback) {
      opts = opts || {};
      let postBody = opts['_function'];
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling functionsTest");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling functionsTest");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling functionsTest");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling functionsTest");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling functionsTest");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'functionName': functionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FunctionsTest200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsUpdate operation.
     * @callback module:api/FunctionsApi~functionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Function} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing function under an existing streaming job. This can be used to partially update (ie. update one or two properties) a function without affecting the rest the job or function definition.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} functionName The name of the function.
     * @param {module:model/Function} _function A function object. The properties specified here will overwrite the corresponding properties in the existing function (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing function will remain the same and not change as a result of this PATCH operation.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The ETag of the function. Omit this value to always overwrite the current function. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param {module:api/FunctionsApi~functionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Function}
     */
    functionsUpdate(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, _function, opts, callback) {
      opts = opts || {};
      let postBody = _function;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling functionsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling functionsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling functionsUpdate");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling functionsUpdate");
      }
      // verify the required parameter 'functionName' is set
      if (functionName === undefined || functionName === null) {
        throw new Error("Missing the required parameter 'functionName' when calling functionsUpdate");
      }
      // verify the required parameter '_function' is set
      if (_function === undefined || _function === null) {
        throw new Error("Missing the required parameter '_function' when calling functionsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'functionName': functionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Function;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
