/**
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FunctionProperties from './FunctionProperties';
import ScalarFunctionConfiguration from './ScalarFunctionConfiguration';

/**
 * The ScalarFunctionProperties model module.
 * @module model/ScalarFunctionProperties
 * @version 2016-03-01
 */
class ScalarFunctionProperties {
    /**
     * Constructs a new <code>ScalarFunctionProperties</code>.
     * The properties that are associated with a scalar function.
     * @alias module:model/ScalarFunctionProperties
     * @extends module:model/FunctionProperties
     * @implements module:model/FunctionProperties
     */
    constructor() { 
        FunctionProperties.initialize(this);
        ScalarFunctionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScalarFunctionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScalarFunctionProperties} obj Optional instance to populate.
     * @return {module:model/ScalarFunctionProperties} The populated <code>ScalarFunctionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScalarFunctionProperties();
            FunctionProperties.constructFromObject(data, obj);
            FunctionProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ScalarFunctionConfiguration.constructFromObject(data['properties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScalarFunctionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScalarFunctionProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          ScalarFunctionConfiguration.validateJSON(data['properties']);
        }

        return true;
    }


}



/**
 * @member {module:model/ScalarFunctionConfiguration} properties
 */
ScalarFunctionProperties.prototype['properties'] = undefined;


// Implement FunctionProperties interface:
/**
 * The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
 * @member {String} etag
 */
FunctionProperties.prototype['etag'] = undefined;
/**
 * Indicates the type of function.
 * @member {String} type
 */
FunctionProperties.prototype['type'] = undefined;




export default ScalarFunctionProperties;

