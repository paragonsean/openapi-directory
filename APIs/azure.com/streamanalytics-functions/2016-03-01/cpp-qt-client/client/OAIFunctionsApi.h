/**
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFunctionsApi_H
#define OAI_OAIFunctionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFunction.h"
#include "OAIFunctionListResult.h"
#include "OAIFunctionRetrieveDefaultDefinitionParameters.h"
#include "OAIFunctions_Test_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFunctionsApi : public QObject {
    Q_OBJECT

public:
    OAIFunctionsApi(const int timeOut = 0);
    ~OAIFunctionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  function_name QString [required]
    * @param[in]  function OAIFunction [required]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void functionsCreateOrReplace(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &function_name, const OAIFunction &function, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  function_name QString [required]
    */
    virtual void functionsDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &function_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  function_name QString [required]
    */
    virtual void functionsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &function_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  select QString [optional]
    */
    virtual void functionsListByStreamingJob(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  function_name QString [required]
    * @param[in]  function_retrieve_default_definition_parameters OAIFunctionRetrieveDefaultDefinitionParameters [optional]
    */
    virtual void functionsRetrieveDefaultDefinition(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &function_name, const ::OpenAPI::OptionalParam<OAIFunctionRetrieveDefaultDefinitionParameters> &function_retrieve_default_definition_parameters = ::OpenAPI::OptionalParam<OAIFunctionRetrieveDefaultDefinitionParameters>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  function_name QString [required]
    * @param[in]  function OAIFunction [optional]
    */
    virtual void functionsTest(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &function_name, const ::OpenAPI::OptionalParam<OAIFunction> &function = ::OpenAPI::OptionalParam<OAIFunction>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  function_name QString [required]
    * @param[in]  function OAIFunction [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void functionsUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &function_name, const OAIFunction &function, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void functionsCreateOrReplaceCallback(OAIHttpRequestWorker *worker);
    void functionsDeleteCallback(OAIHttpRequestWorker *worker);
    void functionsGetCallback(OAIHttpRequestWorker *worker);
    void functionsListByStreamingJobCallback(OAIHttpRequestWorker *worker);
    void functionsRetrieveDefaultDefinitionCallback(OAIHttpRequestWorker *worker);
    void functionsTestCallback(OAIHttpRequestWorker *worker);
    void functionsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void functionsCreateOrReplaceSignal(OAIFunction summary);
    void functionsDeleteSignal();
    void functionsGetSignal(OAIFunction summary);
    void functionsListByStreamingJobSignal(OAIFunctionListResult summary);
    void functionsRetrieveDefaultDefinitionSignal(OAIFunction summary);
    void functionsTestSignal(OAIFunctions_Test_200_response summary);
    void functionsUpdateSignal(OAIFunction summary);


    void functionsCreateOrReplaceSignalFull(OAIHttpRequestWorker *worker, OAIFunction summary);
    void functionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void functionsGetSignalFull(OAIHttpRequestWorker *worker, OAIFunction summary);
    void functionsListByStreamingJobSignalFull(OAIHttpRequestWorker *worker, OAIFunctionListResult summary);
    void functionsRetrieveDefaultDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIFunction summary);
    void functionsTestSignalFull(OAIHttpRequestWorker *worker, OAIFunctions_Test_200_response summary);
    void functionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFunction summary);

    Q_DECL_DEPRECATED_X("Use functionsCreateOrReplaceSignalError() instead")
    void functionsCreateOrReplaceSignalE(OAIFunction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsCreateOrReplaceSignalError(OAIFunction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsDeleteSignalError() instead")
    void functionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void functionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsGetSignalError() instead")
    void functionsGetSignalE(OAIFunction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsGetSignalError(OAIFunction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsListByStreamingJobSignalError() instead")
    void functionsListByStreamingJobSignalE(OAIFunctionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsListByStreamingJobSignalError(OAIFunctionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsRetrieveDefaultDefinitionSignalError() instead")
    void functionsRetrieveDefaultDefinitionSignalE(OAIFunction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsRetrieveDefaultDefinitionSignalError(OAIFunction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsTestSignalError() instead")
    void functionsTestSignalE(OAIFunctions_Test_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsTestSignalError(OAIFunctions_Test_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsUpdateSignalError() instead")
    void functionsUpdateSignalE(OAIFunction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsUpdateSignalError(OAIFunction summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use functionsCreateOrReplaceSignalErrorFull() instead")
    void functionsCreateOrReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsCreateOrReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsDeleteSignalErrorFull() instead")
    void functionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsGetSignalErrorFull() instead")
    void functionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsListByStreamingJobSignalErrorFull() instead")
    void functionsListByStreamingJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsListByStreamingJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsRetrieveDefaultDefinitionSignalErrorFull() instead")
    void functionsRetrieveDefaultDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsRetrieveDefaultDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsTestSignalErrorFull() instead")
    void functionsTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsUpdateSignalErrorFull() instead")
    void functionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
