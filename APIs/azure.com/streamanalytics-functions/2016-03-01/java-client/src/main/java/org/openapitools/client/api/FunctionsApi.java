/*
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Function;
import org.openapitools.client.model.FunctionListResult;
import org.openapitools.client.model.FunctionRetrieveDefaultDefinitionParameters;
import org.openapitools.client.model.FunctionsTest200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FunctionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FunctionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FunctionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for functionsCreateOrReplace
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param function The definition of the function that will be used to create a new function or replace the existing one under the streaming job. (required)
     * @param ifMatch The ETag of the function. Omit this value to always overwrite the current function. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new function to be created, but to prevent updating an existing function. Other values will result in a 412 Pre-condition Failed response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The function was successfully created or replaced. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
        <tr><td> 201 </td><td> The function was successfully created or replaced. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call functionsCreateOrReplaceCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = function;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionsCreateOrReplaceValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling functionsCreateOrReplace(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling functionsCreateOrReplace(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling functionsCreateOrReplace(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling functionsCreateOrReplace(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling functionsCreateOrReplace(Async)");
        }

        // verify the required parameter 'function' is set
        if (function == null) {
            throw new ApiException("Missing the required parameter 'function' when calling functionsCreateOrReplace(Async)");
        }

        return functionsCreateOrReplaceCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, function, ifMatch, ifNoneMatch, _callback);

    }

    /**
     * 
     * Creates a function or replaces an already existing function under an existing streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param function The definition of the function that will be used to create a new function or replace the existing one under the streaming job. (required)
     * @param ifMatch The ETag of the function. Omit this value to always overwrite the current function. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new function to be created, but to prevent updating an existing function. Other values will result in a 412 Pre-condition Failed response. (optional)
     * @return Function
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The function was successfully created or replaced. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
        <tr><td> 201 </td><td> The function was successfully created or replaced. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public Function functionsCreateOrReplace(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, String ifMatch, String ifNoneMatch) throws ApiException {
        ApiResponse<Function> localVarResp = functionsCreateOrReplaceWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, function, ifMatch, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a function or replaces an already existing function under an existing streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param function The definition of the function that will be used to create a new function or replace the existing one under the streaming job. (required)
     * @param ifMatch The ETag of the function. Omit this value to always overwrite the current function. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new function to be created, but to prevent updating an existing function. Other values will result in a 412 Pre-condition Failed response. (optional)
     * @return ApiResponse&lt;Function&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The function was successfully created or replaced. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
        <tr><td> 201 </td><td> The function was successfully created or replaced. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Function> functionsCreateOrReplaceWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, String ifMatch, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = functionsCreateOrReplaceValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, function, ifMatch, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<Function>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a function or replaces an already existing function under an existing streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param function The definition of the function that will be used to create a new function or replace the existing one under the streaming job. (required)
     * @param ifMatch The ETag of the function. Omit this value to always overwrite the current function. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new function to be created, but to prevent updating an existing function. Other values will result in a 412 Pre-condition Failed response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The function was successfully created or replaced. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
        <tr><td> 201 </td><td> The function was successfully created or replaced. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call functionsCreateOrReplaceAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, String ifMatch, String ifNoneMatch, final ApiCallback<Function> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionsCreateOrReplaceValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, function, ifMatch, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<Function>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionsDelete
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The function was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The function does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionsDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling functionsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling functionsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling functionsDelete(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling functionsDelete(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling functionsDelete(Async)");
        }

        return functionsDeleteCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, _callback);

    }

    /**
     * 
     * Deletes a function from the streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The function was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The function does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void functionsDelete(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName) throws ApiException {
        functionsDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, functionName);
    }

    /**
     * 
     * Deletes a function from the streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The function was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The function does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> functionsDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName) throws ApiException {
        okhttp3.Call localVarCall = functionsDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a function from the streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The function was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The function does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionsDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionsGet
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified function. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call functionsGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionsGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling functionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling functionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling functionsGet(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling functionsGet(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling functionsGet(Async)");
        }

        return functionsGetCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, _callback);

    }

    /**
     * 
     * Gets details about the specified function.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @return Function
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified function. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public Function functionsGet(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName) throws ApiException {
        ApiResponse<Function> localVarResp = functionsGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, functionName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets details about the specified function.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @return ApiResponse&lt;Function&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified function. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Function> functionsGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName) throws ApiException {
        okhttp3.Call localVarCall = functionsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, null);
        Type localVarReturnType = new TypeToken<Function>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets details about the specified function.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified function. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call functionsGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, final ApiCallback<Function> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, _callback);
        Type localVarReturnType = new TypeToken<Function>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionsListByStreamingJob
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param $select The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or \&quot;*\&quot; to include all properties. By default, all properties are returned except diagnostics. Currently only accepts &#39;*&#39; as a valid value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed the functions under the specified streaming job. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsListByStreamingJobCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionsListByStreamingJobValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling functionsListByStreamingJob(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling functionsListByStreamingJob(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling functionsListByStreamingJob(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling functionsListByStreamingJob(Async)");
        }

        return functionsListByStreamingJobCall(apiVersion, subscriptionId, resourceGroupName, jobName, $select, _callback);

    }

    /**
     * 
     * Lists all of the functions under the specified streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param $select The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or \&quot;*\&quot; to include all properties. By default, all properties are returned except diagnostics. Currently only accepts &#39;*&#39; as a valid value. (optional)
     * @return FunctionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed the functions under the specified streaming job. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionListResult functionsListByStreamingJob(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String $select) throws ApiException {
        ApiResponse<FunctionListResult> localVarResp = functionsListByStreamingJobWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, $select);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the functions under the specified streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param $select The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or \&quot;*\&quot; to include all properties. By default, all properties are returned except diagnostics. Currently only accepts &#39;*&#39; as a valid value. (optional)
     * @return ApiResponse&lt;FunctionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed the functions under the specified streaming job. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionListResult> functionsListByStreamingJobWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String $select) throws ApiException {
        okhttp3.Call localVarCall = functionsListByStreamingJobValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, $select, null);
        Type localVarReturnType = new TypeToken<FunctionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the functions under the specified streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param $select The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or \&quot;*\&quot; to include all properties. By default, all properties are returned except diagnostics. Currently only accepts &#39;*&#39; as a valid value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully listed the functions under the specified streaming job. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsListByStreamingJobAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String $select, final ApiCallback<FunctionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionsListByStreamingJobValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, $select, _callback);
        Type localVarReturnType = new TypeToken<FunctionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionsRetrieveDefaultDefinition
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param functionRetrieveDefaultDefinitionParameters Parameters used to specify the type of function to retrieve the default definition for. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the function&#39;s default definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsRetrieveDefaultDefinitionCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, FunctionRetrieveDefaultDefinitionParameters functionRetrieveDefaultDefinitionParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = functionRetrieveDefaultDefinitionParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}/RetrieveDefaultDefinition"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionsRetrieveDefaultDefinitionValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, FunctionRetrieveDefaultDefinitionParameters functionRetrieveDefaultDefinitionParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling functionsRetrieveDefaultDefinition(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling functionsRetrieveDefaultDefinition(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling functionsRetrieveDefaultDefinition(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling functionsRetrieveDefaultDefinition(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling functionsRetrieveDefaultDefinition(Async)");
        }

        return functionsRetrieveDefaultDefinitionCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, functionRetrieveDefaultDefinitionParameters, _callback);

    }

    /**
     * 
     * Retrieves the default definition of a function based on the parameters specified.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param functionRetrieveDefaultDefinitionParameters Parameters used to specify the type of function to retrieve the default definition for. (optional)
     * @return Function
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the function&#39;s default definition. </td><td>  -  </td></tr>
     </table>
     */
    public Function functionsRetrieveDefaultDefinition(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, FunctionRetrieveDefaultDefinitionParameters functionRetrieveDefaultDefinitionParameters) throws ApiException {
        ApiResponse<Function> localVarResp = functionsRetrieveDefaultDefinitionWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, functionRetrieveDefaultDefinitionParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the default definition of a function based on the parameters specified.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param functionRetrieveDefaultDefinitionParameters Parameters used to specify the type of function to retrieve the default definition for. (optional)
     * @return ApiResponse&lt;Function&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the function&#39;s default definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Function> functionsRetrieveDefaultDefinitionWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, FunctionRetrieveDefaultDefinitionParameters functionRetrieveDefaultDefinitionParameters) throws ApiException {
        okhttp3.Call localVarCall = functionsRetrieveDefaultDefinitionValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, functionRetrieveDefaultDefinitionParameters, null);
        Type localVarReturnType = new TypeToken<Function>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the default definition of a function based on the parameters specified.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param functionRetrieveDefaultDefinitionParameters Parameters used to specify the type of function to retrieve the default definition for. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the function&#39;s default definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsRetrieveDefaultDefinitionAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, FunctionRetrieveDefaultDefinitionParameters functionRetrieveDefaultDefinitionParameters, final ApiCallback<Function> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionsRetrieveDefaultDefinitionValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, functionRetrieveDefaultDefinitionParameters, _callback);
        Type localVarReturnType = new TypeToken<Function>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionsTest
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param function If the function specified does not already exist, this parameter must contain the full function definition intended to be tested. If the function specified already exists, this parameter can be left null to test the existing function as is or if specified, the properties specified will overwrite the corresponding properties in the existing function (exactly like a PATCH operation) and the resulting function will be tested. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The test operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The test request was successfully initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsTestCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = function;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}/test"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionsTestValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling functionsTest(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling functionsTest(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling functionsTest(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling functionsTest(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling functionsTest(Async)");
        }

        return functionsTestCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, function, _callback);

    }

    /**
     * 
     * Tests if the information provided for a function is valid. This can range from testing the connection to the underlying web service behind the function or making sure the function code provided is syntactically correct.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param function If the function specified does not already exist, this parameter must contain the full function definition intended to be tested. If the function specified already exists, this parameter can be left null to test the existing function as is or if specified, the properties specified will overwrite the corresponding properties in the existing function (exactly like a PATCH operation) and the resulting function will be tested. (optional)
     * @return FunctionsTest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The test operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The test request was successfully initiated. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionsTest200Response functionsTest(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function) throws ApiException {
        ApiResponse<FunctionsTest200Response> localVarResp = functionsTestWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, function);
        return localVarResp.getData();
    }

    /**
     * 
     * Tests if the information provided for a function is valid. This can range from testing the connection to the underlying web service behind the function or making sure the function code provided is syntactically correct.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param function If the function specified does not already exist, this parameter must contain the full function definition intended to be tested. If the function specified already exists, this parameter can be left null to test the existing function as is or if specified, the properties specified will overwrite the corresponding properties in the existing function (exactly like a PATCH operation) and the resulting function will be tested. (optional)
     * @return ApiResponse&lt;FunctionsTest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The test operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The test request was successfully initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionsTest200Response> functionsTestWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function) throws ApiException {
        okhttp3.Call localVarCall = functionsTestValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, function, null);
        Type localVarReturnType = new TypeToken<FunctionsTest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Tests if the information provided for a function is valid. This can range from testing the connection to the underlying web service behind the function or making sure the function code provided is syntactically correct.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param function If the function specified does not already exist, this parameter must contain the full function definition intended to be tested. If the function specified already exists, this parameter can be left null to test the existing function as is or if specified, the properties specified will overwrite the corresponding properties in the existing function (exactly like a PATCH operation) and the resulting function will be tested. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The test operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The test request was successfully initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsTestAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, final ApiCallback<FunctionsTest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionsTestValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, function, _callback);
        Type localVarReturnType = new TypeToken<FunctionsTest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionsUpdate
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param function A function object. The properties specified here will overwrite the corresponding properties in the existing function (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing function will remain the same and not change as a result of this PATCH operation. (required)
     * @param ifMatch The ETag of the function. Omit this value to always overwrite the current function. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The function was successfully updated. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call functionsUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = function;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/functions/{functionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "functionName" + "}", localVarApiClient.escapeString(functionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionsUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling functionsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling functionsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling functionsUpdate(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling functionsUpdate(Async)");
        }

        // verify the required parameter 'functionName' is set
        if (functionName == null) {
            throw new ApiException("Missing the required parameter 'functionName' when calling functionsUpdate(Async)");
        }

        // verify the required parameter 'function' is set
        if (function == null) {
            throw new ApiException("Missing the required parameter 'function' when calling functionsUpdate(Async)");
        }

        return functionsUpdateCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, function, ifMatch, _callback);

    }

    /**
     * 
     * Updates an existing function under an existing streaming job. This can be used to partially update (ie. update one or two properties) a function without affecting the rest the job or function definition.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param function A function object. The properties specified here will overwrite the corresponding properties in the existing function (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing function will remain the same and not change as a result of this PATCH operation. (required)
     * @param ifMatch The ETag of the function. Omit this value to always overwrite the current function. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @return Function
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The function was successfully updated. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public Function functionsUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, String ifMatch) throws ApiException {
        ApiResponse<Function> localVarResp = functionsUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, function, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing function under an existing streaming job. This can be used to partially update (ie. update one or two properties) a function without affecting the rest the job or function definition.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param function A function object. The properties specified here will overwrite the corresponding properties in the existing function (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing function will remain the same and not change as a result of this PATCH operation. (required)
     * @param ifMatch The ETag of the function. Omit this value to always overwrite the current function. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @return ApiResponse&lt;Function&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The function was successfully updated. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Function> functionsUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = functionsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, function, ifMatch, null);
        Type localVarReturnType = new TypeToken<Function>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing function under an existing streaming job. This can be used to partially update (ie. update one or two properties) a function without affecting the rest the job or function definition.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param functionName The name of the function. (required)
     * @param function A function object. The properties specified here will overwrite the corresponding properties in the existing function (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing function will remain the same and not change as a result of this PATCH operation. (required)
     * @param ifMatch The ETag of the function. Omit this value to always overwrite the current function. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The function was successfully updated. </td><td>  * ETag - The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call functionsUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String functionName, Function function, String ifMatch, final ApiCallback<Function> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, functionName, function, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<Function>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
