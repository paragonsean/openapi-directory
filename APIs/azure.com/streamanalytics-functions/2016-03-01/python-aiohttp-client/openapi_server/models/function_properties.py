# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FunctionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, type: str=None):
        """FunctionProperties - a model defined in OpenAPI

        :param etag: The etag of this FunctionProperties.
        :param type: The type of this FunctionProperties.
        """
        self.openapi_types = {
            'etag': str,
            'type': str
        }

        self.attribute_map = {
            'etag': 'etag',
            'type': 'type'
        }

        self._etag = etag
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FunctionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FunctionProperties of this FunctionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this FunctionProperties.

        The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.

        :return: The etag of this FunctionProperties.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this FunctionProperties.

        The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.

        :param etag: The etag of this FunctionProperties.
        :type etag: str
        """

        self._etag = etag

    @property
    def type(self):
        """Gets the type of this FunctionProperties.

        Indicates the type of function.

        :return: The type of this FunctionProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FunctionProperties.

        Indicates the type of function.

        :param type: The type of this FunctionProperties.
        :type type: str
        """

        self._type = type
