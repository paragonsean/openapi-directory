/*
 * MarketplaceOrdering.Agreements
 * REST API for MarketplaceOrdering Agreements.
 *
 * The version of the OpenAPI document: 2015-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AgreementTerms;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for marketplaceAgreementsCancel
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request was successfully processed and the terms were rejected. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.MarketplaceOrdering error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketplaceAgreementsCancelCall(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/cancel"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "publisherId" + "}", localVarApiClient.escapeString(publisherId.toString()))
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketplaceAgreementsCancelValidateBeforeCall(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling marketplaceAgreementsCancel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling marketplaceAgreementsCancel(Async)");
        }

        // verify the required parameter 'publisherId' is set
        if (publisherId == null) {
            throw new ApiException("Missing the required parameter 'publisherId' when calling marketplaceAgreementsCancel(Async)");
        }

        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling marketplaceAgreementsCancel(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling marketplaceAgreementsCancel(Async)");
        }

        return marketplaceAgreementsCancelCall(apiVersion, subscriptionId, publisherId, offerId, planId, _callback);

    }

    /**
     * 
     * Cancel marketplace terms.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @return AgreementTerms
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request was successfully processed and the terms were rejected. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.MarketplaceOrdering error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AgreementTerms marketplaceAgreementsCancel(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId) throws ApiException {
        ApiResponse<AgreementTerms> localVarResp = marketplaceAgreementsCancelWithHttpInfo(apiVersion, subscriptionId, publisherId, offerId, planId);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancel marketplace terms.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @return ApiResponse&lt;AgreementTerms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request was successfully processed and the terms were rejected. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.MarketplaceOrdering error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AgreementTerms> marketplaceAgreementsCancelWithHttpInfo(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId) throws ApiException {
        okhttp3.Call localVarCall = marketplaceAgreementsCancelValidateBeforeCall(apiVersion, subscriptionId, publisherId, offerId, planId, null);
        Type localVarReturnType = new TypeToken<AgreementTerms>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancel marketplace terms.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request was successfully processed and the terms were rejected. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.MarketplaceOrdering error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketplaceAgreementsCancelAsync(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId, final ApiCallback<AgreementTerms> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketplaceAgreementsCancelValidateBeforeCall(apiVersion, subscriptionId, publisherId, offerId, planId, _callback);
        Type localVarReturnType = new TypeToken<AgreementTerms>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketplaceAgreementsCreate
     * @param apiVersion The API version to use for the request. (required)
     * @param offerType Offer Type, currently only virtualmachine type is supported. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @param parameters Parameters supplied to the Create Marketplace Terms operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request was successfully processed and the terms were accepted or acceptance revoked as per the request body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.MarketplaceOrdering error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketplaceAgreementsCreateCall(String apiVersion, String offerType, String subscriptionId, String publisherId, String offerId, String planId, AgreementTerms parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current"
            .replace("{" + "offerType" + "}", localVarApiClient.escapeString(offerType.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "publisherId" + "}", localVarApiClient.escapeString(publisherId.toString()))
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketplaceAgreementsCreateValidateBeforeCall(String apiVersion, String offerType, String subscriptionId, String publisherId, String offerId, String planId, AgreementTerms parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling marketplaceAgreementsCreate(Async)");
        }

        // verify the required parameter 'offerType' is set
        if (offerType == null) {
            throw new ApiException("Missing the required parameter 'offerType' when calling marketplaceAgreementsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling marketplaceAgreementsCreate(Async)");
        }

        // verify the required parameter 'publisherId' is set
        if (publisherId == null) {
            throw new ApiException("Missing the required parameter 'publisherId' when calling marketplaceAgreementsCreate(Async)");
        }

        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling marketplaceAgreementsCreate(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling marketplaceAgreementsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling marketplaceAgreementsCreate(Async)");
        }

        return marketplaceAgreementsCreateCall(apiVersion, offerType, subscriptionId, publisherId, offerId, planId, parameters, _callback);

    }

    /**
     * 
     * Save marketplace terms.
     * @param apiVersion The API version to use for the request. (required)
     * @param offerType Offer Type, currently only virtualmachine type is supported. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @param parameters Parameters supplied to the Create Marketplace Terms operation. (required)
     * @return AgreementTerms
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request was successfully processed and the terms were accepted or acceptance revoked as per the request body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.MarketplaceOrdering error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AgreementTerms marketplaceAgreementsCreate(String apiVersion, String offerType, String subscriptionId, String publisherId, String offerId, String planId, AgreementTerms parameters) throws ApiException {
        ApiResponse<AgreementTerms> localVarResp = marketplaceAgreementsCreateWithHttpInfo(apiVersion, offerType, subscriptionId, publisherId, offerId, planId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Save marketplace terms.
     * @param apiVersion The API version to use for the request. (required)
     * @param offerType Offer Type, currently only virtualmachine type is supported. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @param parameters Parameters supplied to the Create Marketplace Terms operation. (required)
     * @return ApiResponse&lt;AgreementTerms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request was successfully processed and the terms were accepted or acceptance revoked as per the request body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.MarketplaceOrdering error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AgreementTerms> marketplaceAgreementsCreateWithHttpInfo(String apiVersion, String offerType, String subscriptionId, String publisherId, String offerId, String planId, AgreementTerms parameters) throws ApiException {
        okhttp3.Call localVarCall = marketplaceAgreementsCreateValidateBeforeCall(apiVersion, offerType, subscriptionId, publisherId, offerId, planId, parameters, null);
        Type localVarReturnType = new TypeToken<AgreementTerms>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Save marketplace terms.
     * @param apiVersion The API version to use for the request. (required)
     * @param offerType Offer Type, currently only virtualmachine type is supported. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @param parameters Parameters supplied to the Create Marketplace Terms operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request was successfully processed and the terms were accepted or acceptance revoked as per the request body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.MarketplaceOrdering error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketplaceAgreementsCreateAsync(String apiVersion, String offerType, String subscriptionId, String publisherId, String offerId, String planId, AgreementTerms parameters, final ApiCallback<AgreementTerms> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketplaceAgreementsCreateValidateBeforeCall(apiVersion, offerType, subscriptionId, publisherId, offerId, planId, parameters, _callback);
        Type localVarReturnType = new TypeToken<AgreementTerms>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketplaceAgreementsGet
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param offerType Offer Type, currently only virtualmachine type is supported. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terms returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketplaceAgreementsGetCall(String apiVersion, String subscriptionId, String offerType, String publisherId, String offerId, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "offerType" + "}", localVarApiClient.escapeString(offerType.toString()))
            .replace("{" + "publisherId" + "}", localVarApiClient.escapeString(publisherId.toString()))
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketplaceAgreementsGetValidateBeforeCall(String apiVersion, String subscriptionId, String offerType, String publisherId, String offerId, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling marketplaceAgreementsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling marketplaceAgreementsGet(Async)");
        }

        // verify the required parameter 'offerType' is set
        if (offerType == null) {
            throw new ApiException("Missing the required parameter 'offerType' when calling marketplaceAgreementsGet(Async)");
        }

        // verify the required parameter 'publisherId' is set
        if (publisherId == null) {
            throw new ApiException("Missing the required parameter 'publisherId' when calling marketplaceAgreementsGet(Async)");
        }

        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling marketplaceAgreementsGet(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling marketplaceAgreementsGet(Async)");
        }

        return marketplaceAgreementsGetCall(apiVersion, subscriptionId, offerType, publisherId, offerId, planId, _callback);

    }

    /**
     * 
     * Get marketplace terms.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param offerType Offer Type, currently only virtualmachine type is supported. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @return AgreementTerms
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terms returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public AgreementTerms marketplaceAgreementsGet(String apiVersion, String subscriptionId, String offerType, String publisherId, String offerId, String planId) throws ApiException {
        ApiResponse<AgreementTerms> localVarResp = marketplaceAgreementsGetWithHttpInfo(apiVersion, subscriptionId, offerType, publisherId, offerId, planId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get marketplace terms.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param offerType Offer Type, currently only virtualmachine type is supported. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @return ApiResponse&lt;AgreementTerms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terms returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AgreementTerms> marketplaceAgreementsGetWithHttpInfo(String apiVersion, String subscriptionId, String offerType, String publisherId, String offerId, String planId) throws ApiException {
        okhttp3.Call localVarCall = marketplaceAgreementsGetValidateBeforeCall(apiVersion, subscriptionId, offerType, publisherId, offerId, planId, null);
        Type localVarReturnType = new TypeToken<AgreementTerms>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get marketplace terms.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param offerType Offer Type, currently only virtualmachine type is supported. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terms returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketplaceAgreementsGetAsync(String apiVersion, String subscriptionId, String offerType, String publisherId, String offerId, String planId, final ApiCallback<AgreementTerms> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketplaceAgreementsGetValidateBeforeCall(apiVersion, subscriptionId, offerType, publisherId, offerId, planId, _callback);
        Type localVarReturnType = new TypeToken<AgreementTerms>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketplaceAgreementsGetAgreement
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terms returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketplaceAgreementsGetAgreementCall(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "publisherId" + "}", localVarApiClient.escapeString(publisherId.toString()))
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketplaceAgreementsGetAgreementValidateBeforeCall(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling marketplaceAgreementsGetAgreement(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling marketplaceAgreementsGetAgreement(Async)");
        }

        // verify the required parameter 'publisherId' is set
        if (publisherId == null) {
            throw new ApiException("Missing the required parameter 'publisherId' when calling marketplaceAgreementsGetAgreement(Async)");
        }

        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling marketplaceAgreementsGetAgreement(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling marketplaceAgreementsGetAgreement(Async)");
        }

        return marketplaceAgreementsGetAgreementCall(apiVersion, subscriptionId, publisherId, offerId, planId, _callback);

    }

    /**
     * 
     * Get marketplace agreement.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @return AgreementTerms
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terms returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public AgreementTerms marketplaceAgreementsGetAgreement(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId) throws ApiException {
        ApiResponse<AgreementTerms> localVarResp = marketplaceAgreementsGetAgreementWithHttpInfo(apiVersion, subscriptionId, publisherId, offerId, planId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get marketplace agreement.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @return ApiResponse&lt;AgreementTerms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terms returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AgreementTerms> marketplaceAgreementsGetAgreementWithHttpInfo(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId) throws ApiException {
        okhttp3.Call localVarCall = marketplaceAgreementsGetAgreementValidateBeforeCall(apiVersion, subscriptionId, publisherId, offerId, planId, null);
        Type localVarReturnType = new TypeToken<AgreementTerms>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get marketplace agreement.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terms returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketplaceAgreementsGetAgreementAsync(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId, final ApiCallback<AgreementTerms> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketplaceAgreementsGetAgreementValidateBeforeCall(apiVersion, subscriptionId, publisherId, offerId, planId, _callback);
        Type localVarReturnType = new TypeToken<AgreementTerms>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketplaceAgreementsList
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terms returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketplaceAgreementsListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketplaceAgreementsListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling marketplaceAgreementsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling marketplaceAgreementsList(Async)");
        }

        return marketplaceAgreementsListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * List marketplace agreements in the subscription.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @return List&lt;AgreementTerms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terms returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public List<AgreementTerms> marketplaceAgreementsList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<List<AgreementTerms>> localVarResp = marketplaceAgreementsListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * List marketplace agreements in the subscription.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @return ApiResponse&lt;List&lt;AgreementTerms&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terms returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AgreementTerms>> marketplaceAgreementsListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = marketplaceAgreementsListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<List<AgreementTerms>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List marketplace agreements in the subscription.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Terms returned successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketplaceAgreementsListAsync(String apiVersion, String subscriptionId, final ApiCallback<List<AgreementTerms>> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketplaceAgreementsListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<List<AgreementTerms>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marketplaceAgreementsSign
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request was successfully processed and the terms were accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.MarketplaceOrdering error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketplaceAgreementsSignCall(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/sign"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "publisherId" + "}", localVarApiClient.escapeString(publisherId.toString()))
            .replace("{" + "offerId" + "}", localVarApiClient.escapeString(offerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketplaceAgreementsSignValidateBeforeCall(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling marketplaceAgreementsSign(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling marketplaceAgreementsSign(Async)");
        }

        // verify the required parameter 'publisherId' is set
        if (publisherId == null) {
            throw new ApiException("Missing the required parameter 'publisherId' when calling marketplaceAgreementsSign(Async)");
        }

        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling marketplaceAgreementsSign(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling marketplaceAgreementsSign(Async)");
        }

        return marketplaceAgreementsSignCall(apiVersion, subscriptionId, publisherId, offerId, planId, _callback);

    }

    /**
     * 
     * Sign marketplace terms.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @return AgreementTerms
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request was successfully processed and the terms were accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.MarketplaceOrdering error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AgreementTerms marketplaceAgreementsSign(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId) throws ApiException {
        ApiResponse<AgreementTerms> localVarResp = marketplaceAgreementsSignWithHttpInfo(apiVersion, subscriptionId, publisherId, offerId, planId);
        return localVarResp.getData();
    }

    /**
     * 
     * Sign marketplace terms.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @return ApiResponse&lt;AgreementTerms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request was successfully processed and the terms were accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.MarketplaceOrdering error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AgreementTerms> marketplaceAgreementsSignWithHttpInfo(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId) throws ApiException {
        okhttp3.Call localVarCall = marketplaceAgreementsSignValidateBeforeCall(apiVersion, subscriptionId, publisherId, offerId, planId, null);
        Type localVarReturnType = new TypeToken<AgreementTerms>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sign marketplace terms.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param publisherId Publisher identifier string of image being deployed. (required)
     * @param offerId Offer identifier string of image being deployed. (required)
     * @param planId Plan identifier string of image being deployed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request was successfully processed and the terms were accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Microsoft.MarketplaceOrdering error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketplaceAgreementsSignAsync(String apiVersion, String subscriptionId, String publisherId, String offerId, String planId, final ApiCallback<AgreementTerms> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketplaceAgreementsSignValidateBeforeCall(apiVersion, subscriptionId, publisherId, offerId, planId, _callback);
        Type localVarReturnType = new TypeToken<AgreementTerms>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
