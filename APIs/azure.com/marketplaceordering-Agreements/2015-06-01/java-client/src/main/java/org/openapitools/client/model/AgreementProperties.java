/*
 * MarketplaceOrdering.Agreements
 * REST API for MarketplaceOrdering Agreements.
 *
 * The version of the OpenAPI document: 2015-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Agreement Terms definition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:13.221626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AgreementProperties {
  public static final String SERIALIZED_NAME_ACCEPTED = "accepted";
  @SerializedName(SERIALIZED_NAME_ACCEPTED)
  private Boolean accepted;

  public static final String SERIALIZED_NAME_LICENSE_TEXT_LINK = "licenseTextLink";
  @SerializedName(SERIALIZED_NAME_LICENSE_TEXT_LINK)
  private String licenseTextLink;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_PRIVACY_POLICY_LINK = "privacyPolicyLink";
  @SerializedName(SERIALIZED_NAME_PRIVACY_POLICY_LINK)
  private String privacyPolicyLink;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private String product;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_RETRIEVE_DATETIME = "retrieveDatetime";
  @SerializedName(SERIALIZED_NAME_RETRIEVE_DATETIME)
  private OffsetDateTime retrieveDatetime;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public AgreementProperties() {
  }

  public AgreementProperties accepted(Boolean accepted) {
    this.accepted = accepted;
    return this;
  }

  /**
   * If any version of the terms have been accepted, otherwise false.
   * @return accepted
   */
  @javax.annotation.Nullable
  public Boolean getAccepted() {
    return accepted;
  }

  public void setAccepted(Boolean accepted) {
    this.accepted = accepted;
  }


  public AgreementProperties licenseTextLink(String licenseTextLink) {
    this.licenseTextLink = licenseTextLink;
    return this;
  }

  /**
   * Link to HTML with Microsoft and Publisher terms.
   * @return licenseTextLink
   */
  @javax.annotation.Nullable
  public String getLicenseTextLink() {
    return licenseTextLink;
  }

  public void setLicenseTextLink(String licenseTextLink) {
    this.licenseTextLink = licenseTextLink;
  }


  public AgreementProperties plan(String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Plan identifier string of image being deployed.
   * @return plan
   */
  @javax.annotation.Nullable
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public AgreementProperties privacyPolicyLink(String privacyPolicyLink) {
    this.privacyPolicyLink = privacyPolicyLink;
    return this;
  }

  /**
   * Link to the privacy policy of the publisher.
   * @return privacyPolicyLink
   */
  @javax.annotation.Nullable
  public String getPrivacyPolicyLink() {
    return privacyPolicyLink;
  }

  public void setPrivacyPolicyLink(String privacyPolicyLink) {
    this.privacyPolicyLink = privacyPolicyLink;
  }


  public AgreementProperties product(String product) {
    this.product = product;
    return this;
  }

  /**
   * Offer identifier string of image being deployed.
   * @return product
   */
  @javax.annotation.Nullable
  public String getProduct() {
    return product;
  }

  public void setProduct(String product) {
    this.product = product;
  }


  public AgreementProperties publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * Publisher identifier string of image being deployed.
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public AgreementProperties retrieveDatetime(OffsetDateTime retrieveDatetime) {
    this.retrieveDatetime = retrieveDatetime;
    return this;
  }

  /**
   * Date and time in UTC of when the terms were accepted. This is empty if Accepted is false.
   * @return retrieveDatetime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRetrieveDatetime() {
    return retrieveDatetime;
  }

  public void setRetrieveDatetime(OffsetDateTime retrieveDatetime) {
    this.retrieveDatetime = retrieveDatetime;
  }


  public AgreementProperties signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Terms signature.
   * @return signature
   */
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgreementProperties agreementProperties = (AgreementProperties) o;
    return Objects.equals(this.accepted, agreementProperties.accepted) &&
        Objects.equals(this.licenseTextLink, agreementProperties.licenseTextLink) &&
        Objects.equals(this.plan, agreementProperties.plan) &&
        Objects.equals(this.privacyPolicyLink, agreementProperties.privacyPolicyLink) &&
        Objects.equals(this.product, agreementProperties.product) &&
        Objects.equals(this.publisher, agreementProperties.publisher) &&
        Objects.equals(this.retrieveDatetime, agreementProperties.retrieveDatetime) &&
        Objects.equals(this.signature, agreementProperties.signature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accepted, licenseTextLink, plan, privacyPolicyLink, product, publisher, retrieveDatetime, signature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgreementProperties {\n");
    sb.append("    accepted: ").append(toIndentedString(accepted)).append("\n");
    sb.append("    licenseTextLink: ").append(toIndentedString(licenseTextLink)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    privacyPolicyLink: ").append(toIndentedString(privacyPolicyLink)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    retrieveDatetime: ").append(toIndentedString(retrieveDatetime)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accepted");
    openapiFields.add("licenseTextLink");
    openapiFields.add("plan");
    openapiFields.add("privacyPolicyLink");
    openapiFields.add("product");
    openapiFields.add("publisher");
    openapiFields.add("retrieveDatetime");
    openapiFields.add("signature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgreementProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgreementProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgreementProperties is not found in the empty JSON string", AgreementProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgreementProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgreementProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("licenseTextLink") != null && !jsonObj.get("licenseTextLink").isJsonNull()) && !jsonObj.get("licenseTextLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseTextLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseTextLink").toString()));
      }
      if ((jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) && !jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      if ((jsonObj.get("privacyPolicyLink") != null && !jsonObj.get("privacyPolicyLink").isJsonNull()) && !jsonObj.get("privacyPolicyLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacyPolicyLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacyPolicyLink").toString()));
      }
      if ((jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) && !jsonObj.get("product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product").toString()));
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgreementProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgreementProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgreementProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgreementProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AgreementProperties>() {
           @Override
           public void write(JsonWriter out, AgreementProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgreementProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgreementProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgreementProperties
   * @throws IOException if the JSON string is invalid with respect to AgreementProperties
   */
  public static AgreementProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgreementProperties.class);
  }

  /**
   * Convert an instance of AgreementProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

