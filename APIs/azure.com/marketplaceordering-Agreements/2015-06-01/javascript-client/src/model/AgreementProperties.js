/**
 * MarketplaceOrdering.Agreements
 * REST API for MarketplaceOrdering Agreements.
 *
 * The version of the OpenAPI document: 2015-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AgreementProperties model module.
 * @module model/AgreementProperties
 * @version 2015-06-01
 */
class AgreementProperties {
    /**
     * Constructs a new <code>AgreementProperties</code>.
     * Agreement Terms definition
     * @alias module:model/AgreementProperties
     */
    constructor() { 
        
        AgreementProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AgreementProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AgreementProperties} obj Optional instance to populate.
     * @return {module:model/AgreementProperties} The populated <code>AgreementProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AgreementProperties();

            if (data.hasOwnProperty('accepted')) {
                obj['accepted'] = ApiClient.convertToType(data['accepted'], 'Boolean');
            }
            if (data.hasOwnProperty('licenseTextLink')) {
                obj['licenseTextLink'] = ApiClient.convertToType(data['licenseTextLink'], 'String');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = ApiClient.convertToType(data['plan'], 'String');
            }
            if (data.hasOwnProperty('privacyPolicyLink')) {
                obj['privacyPolicyLink'] = ApiClient.convertToType(data['privacyPolicyLink'], 'String');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], 'String');
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
            if (data.hasOwnProperty('retrieveDatetime')) {
                obj['retrieveDatetime'] = ApiClient.convertToType(data['retrieveDatetime'], 'Date');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AgreementProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AgreementProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['licenseTextLink'] && !(typeof data['licenseTextLink'] === 'string' || data['licenseTextLink'] instanceof String)) {
            throw new Error("Expected the field `licenseTextLink` to be a primitive type in the JSON string but got " + data['licenseTextLink']);
        }
        // ensure the json data is a string
        if (data['plan'] && !(typeof data['plan'] === 'string' || data['plan'] instanceof String)) {
            throw new Error("Expected the field `plan` to be a primitive type in the JSON string but got " + data['plan']);
        }
        // ensure the json data is a string
        if (data['privacyPolicyLink'] && !(typeof data['privacyPolicyLink'] === 'string' || data['privacyPolicyLink'] instanceof String)) {
            throw new Error("Expected the field `privacyPolicyLink` to be a primitive type in the JSON string but got " + data['privacyPolicyLink']);
        }
        // ensure the json data is a string
        if (data['product'] && !(typeof data['product'] === 'string' || data['product'] instanceof String)) {
            throw new Error("Expected the field `product` to be a primitive type in the JSON string but got " + data['product']);
        }
        // ensure the json data is a string
        if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
            throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }

        return true;
    }


}



/**
 * If any version of the terms have been accepted, otherwise false.
 * @member {Boolean} accepted
 */
AgreementProperties.prototype['accepted'] = undefined;

/**
 * Link to HTML with Microsoft and Publisher terms.
 * @member {String} licenseTextLink
 */
AgreementProperties.prototype['licenseTextLink'] = undefined;

/**
 * Plan identifier string of image being deployed.
 * @member {String} plan
 */
AgreementProperties.prototype['plan'] = undefined;

/**
 * Link to the privacy policy of the publisher.
 * @member {String} privacyPolicyLink
 */
AgreementProperties.prototype['privacyPolicyLink'] = undefined;

/**
 * Offer identifier string of image being deployed.
 * @member {String} product
 */
AgreementProperties.prototype['product'] = undefined;

/**
 * Publisher identifier string of image being deployed.
 * @member {String} publisher
 */
AgreementProperties.prototype['publisher'] = undefined;

/**
 * Date and time in UTC of when the terms were accepted. This is empty if Accepted is false.
 * @member {Date} retrieveDatetime
 */
AgreementProperties.prototype['retrieveDatetime'] = undefined;

/**
 * Terms signature.
 * @member {String} signature
 */
AgreementProperties.prototype['signature'] = undefined;






export default AgreementProperties;

