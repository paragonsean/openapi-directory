/**
 * MarketplaceOrdering.Agreements
 * REST API for MarketplaceOrdering Agreements.
 *
 * The version of the OpenAPI document: 2015-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AgreementTerms from '../model/AgreementTerms';
import ErrorResponse from '../model/ErrorResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2015-06-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the marketplaceAgreementsCancel operation.
     * @callback module:api/DefaultApi~marketplaceAgreementsCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgreementTerms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel marketplace terms.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} publisherId Publisher identifier string of image being deployed.
     * @param {String} offerId Offer identifier string of image being deployed.
     * @param {String} planId Plan identifier string of image being deployed.
     * @param {module:api/DefaultApi~marketplaceAgreementsCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgreementTerms}
     */
    marketplaceAgreementsCancel(apiVersion, subscriptionId, publisherId, offerId, planId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling marketplaceAgreementsCancel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling marketplaceAgreementsCancel");
      }
      // verify the required parameter 'publisherId' is set
      if (publisherId === undefined || publisherId === null) {
        throw new Error("Missing the required parameter 'publisherId' when calling marketplaceAgreementsCancel");
      }
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling marketplaceAgreementsCancel");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling marketplaceAgreementsCancel");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'publisherId': publisherId,
        'offerId': offerId,
        'planId': planId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgreementTerms;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketplaceAgreementsCreate operation.
     * @callback module:api/DefaultApi~marketplaceAgreementsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgreementTerms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save marketplace terms.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/String} offerType Offer Type, currently only virtualmachine type is supported.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} publisherId Publisher identifier string of image being deployed.
     * @param {String} offerId Offer identifier string of image being deployed.
     * @param {String} planId Plan identifier string of image being deployed.
     * @param {module:model/AgreementTerms} parameters Parameters supplied to the Create Marketplace Terms operation.
     * @param {module:api/DefaultApi~marketplaceAgreementsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgreementTerms}
     */
    marketplaceAgreementsCreate(apiVersion, offerType, subscriptionId, publisherId, offerId, planId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling marketplaceAgreementsCreate");
      }
      // verify the required parameter 'offerType' is set
      if (offerType === undefined || offerType === null) {
        throw new Error("Missing the required parameter 'offerType' when calling marketplaceAgreementsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling marketplaceAgreementsCreate");
      }
      // verify the required parameter 'publisherId' is set
      if (publisherId === undefined || publisherId === null) {
        throw new Error("Missing the required parameter 'publisherId' when calling marketplaceAgreementsCreate");
      }
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling marketplaceAgreementsCreate");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling marketplaceAgreementsCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling marketplaceAgreementsCreate");
      }

      let pathParams = {
        'offerType': offerType,
        'subscriptionId': subscriptionId,
        'publisherId': publisherId,
        'offerId': offerId,
        'planId': planId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AgreementTerms;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketplaceAgreementsGet operation.
     * @callback module:api/DefaultApi~marketplaceAgreementsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgreementTerms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get marketplace terms.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {module:model/String} offerType Offer Type, currently only virtualmachine type is supported.
     * @param {String} publisherId Publisher identifier string of image being deployed.
     * @param {String} offerId Offer identifier string of image being deployed.
     * @param {String} planId Plan identifier string of image being deployed.
     * @param {module:api/DefaultApi~marketplaceAgreementsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgreementTerms}
     */
    marketplaceAgreementsGet(apiVersion, subscriptionId, offerType, publisherId, offerId, planId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling marketplaceAgreementsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling marketplaceAgreementsGet");
      }
      // verify the required parameter 'offerType' is set
      if (offerType === undefined || offerType === null) {
        throw new Error("Missing the required parameter 'offerType' when calling marketplaceAgreementsGet");
      }
      // verify the required parameter 'publisherId' is set
      if (publisherId === undefined || publisherId === null) {
        throw new Error("Missing the required parameter 'publisherId' when calling marketplaceAgreementsGet");
      }
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling marketplaceAgreementsGet");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling marketplaceAgreementsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'offerType': offerType,
        'publisherId': publisherId,
        'offerId': offerId,
        'planId': planId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgreementTerms;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketplaceAgreementsGetAgreement operation.
     * @callback module:api/DefaultApi~marketplaceAgreementsGetAgreementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgreementTerms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get marketplace agreement.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} publisherId Publisher identifier string of image being deployed.
     * @param {String} offerId Offer identifier string of image being deployed.
     * @param {String} planId Plan identifier string of image being deployed.
     * @param {module:api/DefaultApi~marketplaceAgreementsGetAgreementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgreementTerms}
     */
    marketplaceAgreementsGetAgreement(apiVersion, subscriptionId, publisherId, offerId, planId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling marketplaceAgreementsGetAgreement");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling marketplaceAgreementsGetAgreement");
      }
      // verify the required parameter 'publisherId' is set
      if (publisherId === undefined || publisherId === null) {
        throw new Error("Missing the required parameter 'publisherId' when calling marketplaceAgreementsGetAgreement");
      }
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling marketplaceAgreementsGetAgreement");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling marketplaceAgreementsGetAgreement");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'publisherId': publisherId,
        'offerId': offerId,
        'planId': planId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgreementTerms;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketplaceAgreementsList operation.
     * @callback module:api/DefaultApi~marketplaceAgreementsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AgreementTerms>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List marketplace agreements in the subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {module:api/DefaultApi~marketplaceAgreementsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AgreementTerms>}
     */
    marketplaceAgreementsList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling marketplaceAgreementsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling marketplaceAgreementsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AgreementTerms];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketplaceAgreementsSign operation.
     * @callback module:api/DefaultApi~marketplaceAgreementsSignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AgreementTerms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign marketplace terms.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} publisherId Publisher identifier string of image being deployed.
     * @param {String} offerId Offer identifier string of image being deployed.
     * @param {String} planId Plan identifier string of image being deployed.
     * @param {module:api/DefaultApi~marketplaceAgreementsSignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AgreementTerms}
     */
    marketplaceAgreementsSign(apiVersion, subscriptionId, publisherId, offerId, planId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling marketplaceAgreementsSign");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling marketplaceAgreementsSign");
      }
      // verify the required parameter 'publisherId' is set
      if (publisherId === undefined || publisherId === null) {
        throw new Error("Missing the required parameter 'publisherId' when calling marketplaceAgreementsSign");
      }
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling marketplaceAgreementsSign");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling marketplaceAgreementsSign");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'publisherId': publisherId,
        'offerId': offerId,
        'planId': planId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgreementTerms;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/sign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
