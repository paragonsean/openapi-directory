# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AgreementProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted: bool=None, license_text_link: str=None, plan: str=None, privacy_policy_link: str=None, product: str=None, publisher: str=None, retrieve_datetime: datetime=None, signature: str=None):
        """AgreementProperties - a model defined in OpenAPI

        :param accepted: The accepted of this AgreementProperties.
        :param license_text_link: The license_text_link of this AgreementProperties.
        :param plan: The plan of this AgreementProperties.
        :param privacy_policy_link: The privacy_policy_link of this AgreementProperties.
        :param product: The product of this AgreementProperties.
        :param publisher: The publisher of this AgreementProperties.
        :param retrieve_datetime: The retrieve_datetime of this AgreementProperties.
        :param signature: The signature of this AgreementProperties.
        """
        self.openapi_types = {
            'accepted': bool,
            'license_text_link': str,
            'plan': str,
            'privacy_policy_link': str,
            'product': str,
            'publisher': str,
            'retrieve_datetime': datetime,
            'signature': str
        }

        self.attribute_map = {
            'accepted': 'accepted',
            'license_text_link': 'licenseTextLink',
            'plan': 'plan',
            'privacy_policy_link': 'privacyPolicyLink',
            'product': 'product',
            'publisher': 'publisher',
            'retrieve_datetime': 'retrieveDatetime',
            'signature': 'signature'
        }

        self._accepted = accepted
        self._license_text_link = license_text_link
        self._plan = plan
        self._privacy_policy_link = privacy_policy_link
        self._product = product
        self._publisher = publisher
        self._retrieve_datetime = retrieve_datetime
        self._signature = signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgreementProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgreementProperties of this AgreementProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted(self):
        """Gets the accepted of this AgreementProperties.

        If any version of the terms have been accepted, otherwise false.

        :return: The accepted of this AgreementProperties.
        :rtype: bool
        """
        return self._accepted

    @accepted.setter
    def accepted(self, accepted):
        """Sets the accepted of this AgreementProperties.

        If any version of the terms have been accepted, otherwise false.

        :param accepted: The accepted of this AgreementProperties.
        :type accepted: bool
        """

        self._accepted = accepted

    @property
    def license_text_link(self):
        """Gets the license_text_link of this AgreementProperties.

        Link to HTML with Microsoft and Publisher terms.

        :return: The license_text_link of this AgreementProperties.
        :rtype: str
        """
        return self._license_text_link

    @license_text_link.setter
    def license_text_link(self, license_text_link):
        """Sets the license_text_link of this AgreementProperties.

        Link to HTML with Microsoft and Publisher terms.

        :param license_text_link: The license_text_link of this AgreementProperties.
        :type license_text_link: str
        """

        self._license_text_link = license_text_link

    @property
    def plan(self):
        """Gets the plan of this AgreementProperties.

        Plan identifier string of image being deployed.

        :return: The plan of this AgreementProperties.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this AgreementProperties.

        Plan identifier string of image being deployed.

        :param plan: The plan of this AgreementProperties.
        :type plan: str
        """

        self._plan = plan

    @property
    def privacy_policy_link(self):
        """Gets the privacy_policy_link of this AgreementProperties.

        Link to the privacy policy of the publisher.

        :return: The privacy_policy_link of this AgreementProperties.
        :rtype: str
        """
        return self._privacy_policy_link

    @privacy_policy_link.setter
    def privacy_policy_link(self, privacy_policy_link):
        """Sets the privacy_policy_link of this AgreementProperties.

        Link to the privacy policy of the publisher.

        :param privacy_policy_link: The privacy_policy_link of this AgreementProperties.
        :type privacy_policy_link: str
        """

        self._privacy_policy_link = privacy_policy_link

    @property
    def product(self):
        """Gets the product of this AgreementProperties.

        Offer identifier string of image being deployed.

        :return: The product of this AgreementProperties.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this AgreementProperties.

        Offer identifier string of image being deployed.

        :param product: The product of this AgreementProperties.
        :type product: str
        """

        self._product = product

    @property
    def publisher(self):
        """Gets the publisher of this AgreementProperties.

        Publisher identifier string of image being deployed.

        :return: The publisher of this AgreementProperties.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this AgreementProperties.

        Publisher identifier string of image being deployed.

        :param publisher: The publisher of this AgreementProperties.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def retrieve_datetime(self):
        """Gets the retrieve_datetime of this AgreementProperties.

        Date and time in UTC of when the terms were accepted. This is empty if Accepted is false.

        :return: The retrieve_datetime of this AgreementProperties.
        :rtype: datetime
        """
        return self._retrieve_datetime

    @retrieve_datetime.setter
    def retrieve_datetime(self, retrieve_datetime):
        """Sets the retrieve_datetime of this AgreementProperties.

        Date and time in UTC of when the terms were accepted. This is empty if Accepted is false.

        :param retrieve_datetime: The retrieve_datetime of this AgreementProperties.
        :type retrieve_datetime: datetime
        """

        self._retrieve_datetime = retrieve_datetime

    @property
    def signature(self):
        """Gets the signature of this AgreementProperties.

        Terms signature.

        :return: The signature of this AgreementProperties.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this AgreementProperties.

        Terms signature.

        :param signature: The signature of this AgreementProperties.
        :type signature: str
        """

        self._signature = signature
