/**
 * MarketplaceOrdering.Agreements
 * REST API for MarketplaceOrdering Agreements.
 *
 * The version of the OpenAPI document: 2015-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgreementProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgreementProperties::OAIAgreementProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgreementProperties::OAIAgreementProperties() {
    this->initializeModel();
}

OAIAgreementProperties::~OAIAgreementProperties() {}

void OAIAgreementProperties::initializeModel() {

    m_accepted_isSet = false;
    m_accepted_isValid = false;

    m_license_text_link_isSet = false;
    m_license_text_link_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_privacy_policy_link_isSet = false;
    m_privacy_policy_link_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_retrieve_datetime_isSet = false;
    m_retrieve_datetime_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;
}

void OAIAgreementProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgreementProperties::fromJsonObject(QJsonObject json) {

    m_accepted_isValid = ::OpenAPI::fromJsonValue(m_accepted, json[QString("accepted")]);
    m_accepted_isSet = !json[QString("accepted")].isNull() && m_accepted_isValid;

    m_license_text_link_isValid = ::OpenAPI::fromJsonValue(m_license_text_link, json[QString("licenseTextLink")]);
    m_license_text_link_isSet = !json[QString("licenseTextLink")].isNull() && m_license_text_link_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_privacy_policy_link_isValid = ::OpenAPI::fromJsonValue(m_privacy_policy_link, json[QString("privacyPolicyLink")]);
    m_privacy_policy_link_isSet = !json[QString("privacyPolicyLink")].isNull() && m_privacy_policy_link_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_retrieve_datetime_isValid = ::OpenAPI::fromJsonValue(m_retrieve_datetime, json[QString("retrieveDatetime")]);
    m_retrieve_datetime_isSet = !json[QString("retrieveDatetime")].isNull() && m_retrieve_datetime_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;
}

QString OAIAgreementProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgreementProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_isSet) {
        obj.insert(QString("accepted"), ::OpenAPI::toJsonValue(m_accepted));
    }
    if (m_license_text_link_isSet) {
        obj.insert(QString("licenseTextLink"), ::OpenAPI::toJsonValue(m_license_text_link));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_privacy_policy_link_isSet) {
        obj.insert(QString("privacyPolicyLink"), ::OpenAPI::toJsonValue(m_privacy_policy_link));
    }
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_retrieve_datetime_isSet) {
        obj.insert(QString("retrieveDatetime"), ::OpenAPI::toJsonValue(m_retrieve_datetime));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    return obj;
}

bool OAIAgreementProperties::isAccepted() const {
    return m_accepted;
}
void OAIAgreementProperties::setAccepted(const bool &accepted) {
    m_accepted = accepted;
    m_accepted_isSet = true;
}

bool OAIAgreementProperties::is_accepted_Set() const{
    return m_accepted_isSet;
}

bool OAIAgreementProperties::is_accepted_Valid() const{
    return m_accepted_isValid;
}

QString OAIAgreementProperties::getLicenseTextLink() const {
    return m_license_text_link;
}
void OAIAgreementProperties::setLicenseTextLink(const QString &license_text_link) {
    m_license_text_link = license_text_link;
    m_license_text_link_isSet = true;
}

bool OAIAgreementProperties::is_license_text_link_Set() const{
    return m_license_text_link_isSet;
}

bool OAIAgreementProperties::is_license_text_link_Valid() const{
    return m_license_text_link_isValid;
}

QString OAIAgreementProperties::getPlan() const {
    return m_plan;
}
void OAIAgreementProperties::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIAgreementProperties::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIAgreementProperties::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAIAgreementProperties::getPrivacyPolicyLink() const {
    return m_privacy_policy_link;
}
void OAIAgreementProperties::setPrivacyPolicyLink(const QString &privacy_policy_link) {
    m_privacy_policy_link = privacy_policy_link;
    m_privacy_policy_link_isSet = true;
}

bool OAIAgreementProperties::is_privacy_policy_link_Set() const{
    return m_privacy_policy_link_isSet;
}

bool OAIAgreementProperties::is_privacy_policy_link_Valid() const{
    return m_privacy_policy_link_isValid;
}

QString OAIAgreementProperties::getProduct() const {
    return m_product;
}
void OAIAgreementProperties::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIAgreementProperties::is_product_Set() const{
    return m_product_isSet;
}

bool OAIAgreementProperties::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIAgreementProperties::getPublisher() const {
    return m_publisher;
}
void OAIAgreementProperties::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIAgreementProperties::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIAgreementProperties::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QDateTime OAIAgreementProperties::getRetrieveDatetime() const {
    return m_retrieve_datetime;
}
void OAIAgreementProperties::setRetrieveDatetime(const QDateTime &retrieve_datetime) {
    m_retrieve_datetime = retrieve_datetime;
    m_retrieve_datetime_isSet = true;
}

bool OAIAgreementProperties::is_retrieve_datetime_Set() const{
    return m_retrieve_datetime_isSet;
}

bool OAIAgreementProperties::is_retrieve_datetime_Valid() const{
    return m_retrieve_datetime_isValid;
}

QString OAIAgreementProperties::getSignature() const {
    return m_signature;
}
void OAIAgreementProperties::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIAgreementProperties::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIAgreementProperties::is_signature_Valid() const{
    return m_signature_isValid;
}

bool OAIAgreementProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_text_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_policy_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retrieve_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgreementProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
