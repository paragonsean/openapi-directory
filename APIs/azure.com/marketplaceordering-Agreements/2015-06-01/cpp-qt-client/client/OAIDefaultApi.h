/**
 * MarketplaceOrdering.Agreements
 * REST API for MarketplaceOrdering Agreements.
 *
 * The version of the OpenAPI document: 2015-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAgreementTerms.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  publisher_id QString [required]
    * @param[in]  offer_id QString [required]
    * @param[in]  plan_id QString [required]
    */
    virtual void marketplaceAgreementsCancel(const QString &api_version, const QString &subscription_id, const QString &publisher_id, const QString &offer_id, const QString &plan_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  offer_type QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  publisher_id QString [required]
    * @param[in]  offer_id QString [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  parameters OAIAgreementTerms [required]
    */
    virtual void marketplaceAgreementsCreate(const QString &api_version, const QString &offer_type, const QString &subscription_id, const QString &publisher_id, const QString &offer_id, const QString &plan_id, const OAIAgreementTerms &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  offer_type QString [required]
    * @param[in]  publisher_id QString [required]
    * @param[in]  offer_id QString [required]
    * @param[in]  plan_id QString [required]
    */
    virtual void marketplaceAgreementsGet(const QString &api_version, const QString &subscription_id, const QString &offer_type, const QString &publisher_id, const QString &offer_id, const QString &plan_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  publisher_id QString [required]
    * @param[in]  offer_id QString [required]
    * @param[in]  plan_id QString [required]
    */
    virtual void marketplaceAgreementsGetAgreement(const QString &api_version, const QString &subscription_id, const QString &publisher_id, const QString &offer_id, const QString &plan_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void marketplaceAgreementsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  publisher_id QString [required]
    * @param[in]  offer_id QString [required]
    * @param[in]  plan_id QString [required]
    */
    virtual void marketplaceAgreementsSign(const QString &api_version, const QString &subscription_id, const QString &publisher_id, const QString &offer_id, const QString &plan_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void marketplaceAgreementsCancelCallback(OAIHttpRequestWorker *worker);
    void marketplaceAgreementsCreateCallback(OAIHttpRequestWorker *worker);
    void marketplaceAgreementsGetCallback(OAIHttpRequestWorker *worker);
    void marketplaceAgreementsGetAgreementCallback(OAIHttpRequestWorker *worker);
    void marketplaceAgreementsListCallback(OAIHttpRequestWorker *worker);
    void marketplaceAgreementsSignCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void marketplaceAgreementsCancelSignal(OAIAgreementTerms summary);
    void marketplaceAgreementsCreateSignal(OAIAgreementTerms summary);
    void marketplaceAgreementsGetSignal(OAIAgreementTerms summary);
    void marketplaceAgreementsGetAgreementSignal(OAIAgreementTerms summary);
    void marketplaceAgreementsListSignal(QList<OAIAgreementTerms> summary);
    void marketplaceAgreementsSignSignal(OAIAgreementTerms summary);


    void marketplaceAgreementsCancelSignalFull(OAIHttpRequestWorker *worker, OAIAgreementTerms summary);
    void marketplaceAgreementsCreateSignalFull(OAIHttpRequestWorker *worker, OAIAgreementTerms summary);
    void marketplaceAgreementsGetSignalFull(OAIHttpRequestWorker *worker, OAIAgreementTerms summary);
    void marketplaceAgreementsGetAgreementSignalFull(OAIHttpRequestWorker *worker, OAIAgreementTerms summary);
    void marketplaceAgreementsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAgreementTerms> summary);
    void marketplaceAgreementsSignSignalFull(OAIHttpRequestWorker *worker, OAIAgreementTerms summary);

    Q_DECL_DEPRECATED_X("Use marketplaceAgreementsCancelSignalError() instead")
    void marketplaceAgreementsCancelSignalE(OAIAgreementTerms summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketplaceAgreementsCancelSignalError(OAIAgreementTerms summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketplaceAgreementsCreateSignalError() instead")
    void marketplaceAgreementsCreateSignalE(OAIAgreementTerms summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketplaceAgreementsCreateSignalError(OAIAgreementTerms summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketplaceAgreementsGetSignalError() instead")
    void marketplaceAgreementsGetSignalE(OAIAgreementTerms summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketplaceAgreementsGetSignalError(OAIAgreementTerms summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketplaceAgreementsGetAgreementSignalError() instead")
    void marketplaceAgreementsGetAgreementSignalE(OAIAgreementTerms summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketplaceAgreementsGetAgreementSignalError(OAIAgreementTerms summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketplaceAgreementsListSignalError() instead")
    void marketplaceAgreementsListSignalE(QList<OAIAgreementTerms> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketplaceAgreementsListSignalError(QList<OAIAgreementTerms> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketplaceAgreementsSignSignalError() instead")
    void marketplaceAgreementsSignSignalE(OAIAgreementTerms summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketplaceAgreementsSignSignalError(OAIAgreementTerms summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use marketplaceAgreementsCancelSignalErrorFull() instead")
    void marketplaceAgreementsCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketplaceAgreementsCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketplaceAgreementsCreateSignalErrorFull() instead")
    void marketplaceAgreementsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketplaceAgreementsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketplaceAgreementsGetSignalErrorFull() instead")
    void marketplaceAgreementsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketplaceAgreementsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketplaceAgreementsGetAgreementSignalErrorFull() instead")
    void marketplaceAgreementsGetAgreementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketplaceAgreementsGetAgreementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketplaceAgreementsListSignalErrorFull() instead")
    void marketplaceAgreementsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketplaceAgreementsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use marketplaceAgreementsSignSignalErrorFull() instead")
    void marketplaceAgreementsSignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketplaceAgreementsSignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
