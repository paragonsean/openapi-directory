/**
 * ResourceHealthMetadata API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourceHealthMetadataApi_H
#define OAI_OAIResourceHealthMetadataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIResourceHealthMetadata.h"
#include "OAIResourceHealthMetadataCollection.h"
#include "OAIResourceHealthMetadata_List_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourceHealthMetadataApi : public QObject {
    Q_OBJECT

public:
    OAIResourceHealthMetadataApi(const int timeOut = 0);
    ~OAIResourceHealthMetadataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void resourceHealthMetadataGetBySite(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void resourceHealthMetadataGetBySiteSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void resourceHealthMetadataList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void resourceHealthMetadataListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void resourceHealthMetadataListBySite(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void resourceHealthMetadataListBySiteSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void resourceHealthMetadataGetBySiteCallback(OAIHttpRequestWorker *worker);
    void resourceHealthMetadataGetBySiteSlotCallback(OAIHttpRequestWorker *worker);
    void resourceHealthMetadataListCallback(OAIHttpRequestWorker *worker);
    void resourceHealthMetadataListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void resourceHealthMetadataListBySiteCallback(OAIHttpRequestWorker *worker);
    void resourceHealthMetadataListBySiteSlotCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void resourceHealthMetadataGetBySiteSignal(OAIResourceHealthMetadata summary);
    void resourceHealthMetadataGetBySiteSlotSignal(OAIResourceHealthMetadata summary);
    void resourceHealthMetadataListSignal(OAIResourceHealthMetadataCollection summary);
    void resourceHealthMetadataListByResourceGroupSignal(OAIResourceHealthMetadataCollection summary);
    void resourceHealthMetadataListBySiteSignal(OAIResourceHealthMetadataCollection summary);
    void resourceHealthMetadataListBySiteSlotSignal(OAIResourceHealthMetadataCollection summary);


    void resourceHealthMetadataGetBySiteSignalFull(OAIHttpRequestWorker *worker, OAIResourceHealthMetadata summary);
    void resourceHealthMetadataGetBySiteSlotSignalFull(OAIHttpRequestWorker *worker, OAIResourceHealthMetadata summary);
    void resourceHealthMetadataListSignalFull(OAIHttpRequestWorker *worker, OAIResourceHealthMetadataCollection summary);
    void resourceHealthMetadataListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIResourceHealthMetadataCollection summary);
    void resourceHealthMetadataListBySiteSignalFull(OAIHttpRequestWorker *worker, OAIResourceHealthMetadataCollection summary);
    void resourceHealthMetadataListBySiteSlotSignalFull(OAIHttpRequestWorker *worker, OAIResourceHealthMetadataCollection summary);

    Q_DECL_DEPRECATED_X("Use resourceHealthMetadataGetBySiteSignalError() instead")
    void resourceHealthMetadataGetBySiteSignalE(OAIResourceHealthMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceHealthMetadataGetBySiteSignalError(OAIResourceHealthMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceHealthMetadataGetBySiteSlotSignalError() instead")
    void resourceHealthMetadataGetBySiteSlotSignalE(OAIResourceHealthMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceHealthMetadataGetBySiteSlotSignalError(OAIResourceHealthMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceHealthMetadataListSignalError() instead")
    void resourceHealthMetadataListSignalE(OAIResourceHealthMetadataCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceHealthMetadataListSignalError(OAIResourceHealthMetadataCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceHealthMetadataListByResourceGroupSignalError() instead")
    void resourceHealthMetadataListByResourceGroupSignalE(OAIResourceHealthMetadataCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceHealthMetadataListByResourceGroupSignalError(OAIResourceHealthMetadataCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceHealthMetadataListBySiteSignalError() instead")
    void resourceHealthMetadataListBySiteSignalE(OAIResourceHealthMetadataCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceHealthMetadataListBySiteSignalError(OAIResourceHealthMetadataCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceHealthMetadataListBySiteSlotSignalError() instead")
    void resourceHealthMetadataListBySiteSlotSignalE(OAIResourceHealthMetadataCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceHealthMetadataListBySiteSlotSignalError(OAIResourceHealthMetadataCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use resourceHealthMetadataGetBySiteSignalErrorFull() instead")
    void resourceHealthMetadataGetBySiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceHealthMetadataGetBySiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceHealthMetadataGetBySiteSlotSignalErrorFull() instead")
    void resourceHealthMetadataGetBySiteSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceHealthMetadataGetBySiteSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceHealthMetadataListSignalErrorFull() instead")
    void resourceHealthMetadataListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceHealthMetadataListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceHealthMetadataListByResourceGroupSignalErrorFull() instead")
    void resourceHealthMetadataListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceHealthMetadataListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceHealthMetadataListBySiteSignalErrorFull() instead")
    void resourceHealthMetadataListBySiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceHealthMetadataListBySiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceHealthMetadataListBySiteSlotSignalErrorFull() instead")
    void resourceHealthMetadataListBySiteSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceHealthMetadataListBySiteSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
