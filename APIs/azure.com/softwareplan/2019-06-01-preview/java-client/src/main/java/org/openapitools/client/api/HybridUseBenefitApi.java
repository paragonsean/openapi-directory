/*
 * Software Plan RP
 * Azure software plans let users create and manage licenses for various software used in Azure.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.HybridUseBenefitModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HybridUseBenefitApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HybridUseBenefitApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HybridUseBenefitApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for hybridUseBenefitCreate
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @param body Request body for creating a hybrid use benefit (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - returns the plan that is created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridUseBenefitCreateCall(String scope, String planId, String apiVersion, HybridUseBenefitModel body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridUseBenefitCreateValidateBeforeCall(String scope, String planId, String apiVersion, HybridUseBenefitModel body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling hybridUseBenefitCreate(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling hybridUseBenefitCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridUseBenefitCreate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling hybridUseBenefitCreate(Async)");
        }

        return hybridUseBenefitCreateCall(scope, planId, apiVersion, body, _callback);

    }

    /**
     * 
     * Create a new hybrid use benefit under a given scope
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @param body Request body for creating a hybrid use benefit (required)
     * @return HybridUseBenefitModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - returns the plan that is created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HybridUseBenefitModel hybridUseBenefitCreate(String scope, String planId, String apiVersion, HybridUseBenefitModel body) throws ApiException {
        ApiResponse<HybridUseBenefitModel> localVarResp = hybridUseBenefitCreateWithHttpInfo(scope, planId, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new hybrid use benefit under a given scope
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @param body Request body for creating a hybrid use benefit (required)
     * @return ApiResponse&lt;HybridUseBenefitModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - returns the plan that is created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HybridUseBenefitModel> hybridUseBenefitCreateWithHttpInfo(String scope, String planId, String apiVersion, HybridUseBenefitModel body) throws ApiException {
        okhttp3.Call localVarCall = hybridUseBenefitCreateValidateBeforeCall(scope, planId, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<HybridUseBenefitModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new hybrid use benefit under a given scope
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @param body Request body for creating a hybrid use benefit (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - returns the plan that is created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridUseBenefitCreateAsync(String scope, String planId, String apiVersion, HybridUseBenefitModel body, final ApiCallback<HybridUseBenefitModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridUseBenefitCreateValidateBeforeCall(scope, planId, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<HybridUseBenefitModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridUseBenefitDelete
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - successfully deleted the given plan </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> OK - there was no plan to delete </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridUseBenefitDeleteCall(String scope, String planId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridUseBenefitDeleteValidateBeforeCall(String scope, String planId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling hybridUseBenefitDelete(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling hybridUseBenefitDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridUseBenefitDelete(Async)");
        }

        return hybridUseBenefitDeleteCall(scope, planId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a given plan ID
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - successfully deleted the given plan </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> OK - there was no plan to delete </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void hybridUseBenefitDelete(String scope, String planId, String apiVersion) throws ApiException {
        hybridUseBenefitDeleteWithHttpInfo(scope, planId, apiVersion);
    }

    /**
     * 
     * Deletes a given plan ID
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - successfully deleted the given plan </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> OK - there was no plan to delete </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hybridUseBenefitDeleteWithHttpInfo(String scope, String planId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hybridUseBenefitDeleteValidateBeforeCall(scope, planId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a given plan ID
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - successfully deleted the given plan </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> OK - there was no plan to delete </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridUseBenefitDeleteAsync(String scope, String planId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridUseBenefitDeleteValidateBeforeCall(scope, planId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridUseBenefitGet
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - returns the plan that is created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridUseBenefitGetCall(String scope, String planId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridUseBenefitGetValidateBeforeCall(String scope, String planId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling hybridUseBenefitGet(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling hybridUseBenefitGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridUseBenefitGet(Async)");
        }

        return hybridUseBenefitGetCall(scope, planId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a given plan ID
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @return HybridUseBenefitModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - returns the plan that is created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HybridUseBenefitModel hybridUseBenefitGet(String scope, String planId, String apiVersion) throws ApiException {
        ApiResponse<HybridUseBenefitModel> localVarResp = hybridUseBenefitGetWithHttpInfo(scope, planId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a given plan ID
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @return ApiResponse&lt;HybridUseBenefitModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - returns the plan that is created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HybridUseBenefitModel> hybridUseBenefitGetWithHttpInfo(String scope, String planId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hybridUseBenefitGetValidateBeforeCall(scope, planId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HybridUseBenefitModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a given plan ID
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - returns the plan that is created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridUseBenefitGetAsync(String scope, String planId, String apiVersion, final ApiCallback<HybridUseBenefitModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridUseBenefitGetValidateBeforeCall(scope, planId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HybridUseBenefitModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridUseBenefitUpdate
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @param body Request body for creating a hybrid use benefit (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - successfully updated the given hybrid use benefit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridUseBenefitUpdateCall(String scope, String planId, String apiVersion, HybridUseBenefitModel body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridUseBenefitUpdateValidateBeforeCall(String scope, String planId, String apiVersion, HybridUseBenefitModel body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling hybridUseBenefitUpdate(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling hybridUseBenefitUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridUseBenefitUpdate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling hybridUseBenefitUpdate(Async)");
        }

        return hybridUseBenefitUpdateCall(scope, planId, apiVersion, body, _callback);

    }

    /**
     * 
     * Updates an existing hybrid use benefit
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @param body Request body for creating a hybrid use benefit (required)
     * @return HybridUseBenefitModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - successfully updated the given hybrid use benefit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HybridUseBenefitModel hybridUseBenefitUpdate(String scope, String planId, String apiVersion, HybridUseBenefitModel body) throws ApiException {
        ApiResponse<HybridUseBenefitModel> localVarResp = hybridUseBenefitUpdateWithHttpInfo(scope, planId, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing hybrid use benefit
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @param body Request body for creating a hybrid use benefit (required)
     * @return ApiResponse&lt;HybridUseBenefitModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - successfully updated the given hybrid use benefit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HybridUseBenefitModel> hybridUseBenefitUpdateWithHttpInfo(String scope, String planId, String apiVersion, HybridUseBenefitModel body) throws ApiException {
        okhttp3.Call localVarCall = hybridUseBenefitUpdateValidateBeforeCall(scope, planId, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<HybridUseBenefitModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing hybrid use benefit
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now (required)
     * @param planId This is a unique identifier for a plan. Should be a guid. (required)
     * @param apiVersion The api-version to be used by the service (required)
     * @param body Request body for creating a hybrid use benefit (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - successfully updated the given hybrid use benefit </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridUseBenefitUpdateAsync(String scope, String planId, String apiVersion, HybridUseBenefitModel body, final ApiCallback<HybridUseBenefitModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridUseBenefitUpdateValidateBeforeCall(scope, planId, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<HybridUseBenefitModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
