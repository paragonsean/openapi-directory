/**
 * Software Plan RP
 * Azure software plans let users create and manage licenses for various software used in Azure.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHybridUseBenefitProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHybridUseBenefitProperties::OAIHybridUseBenefitProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHybridUseBenefitProperties::OAIHybridUseBenefitProperties() {
    this->initializeModel();
}

OAIHybridUseBenefitProperties::~OAIHybridUseBenefitProperties() {}

void OAIHybridUseBenefitProperties::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_last_updated_date_isSet = false;
    m_last_updated_date_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIHybridUseBenefitProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHybridUseBenefitProperties::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_last_updated_date_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date, json[QString("lastUpdatedDate")]);
    m_last_updated_date_isSet = !json[QString("lastUpdatedDate")].isNull() && m_last_updated_date_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIHybridUseBenefitProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHybridUseBenefitProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_last_updated_date_isSet) {
        obj.insert(QString("lastUpdatedDate"), ::OpenAPI::toJsonValue(m_last_updated_date));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QDateTime OAIHybridUseBenefitProperties::getCreatedDate() const {
    return m_created_date;
}
void OAIHybridUseBenefitProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIHybridUseBenefitProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIHybridUseBenefitProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QDateTime OAIHybridUseBenefitProperties::getLastUpdatedDate() const {
    return m_last_updated_date;
}
void OAIHybridUseBenefitProperties::setLastUpdatedDate(const QDateTime &last_updated_date) {
    m_last_updated_date = last_updated_date;
    m_last_updated_date_isSet = true;
}

bool OAIHybridUseBenefitProperties::is_last_updated_date_Set() const{
    return m_last_updated_date_isSet;
}

bool OAIHybridUseBenefitProperties::is_last_updated_date_Valid() const{
    return m_last_updated_date_isValid;
}

OAIProvisioningState OAIHybridUseBenefitProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIHybridUseBenefitProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIHybridUseBenefitProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIHybridUseBenefitProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIHybridUseBenefitProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHybridUseBenefitProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
