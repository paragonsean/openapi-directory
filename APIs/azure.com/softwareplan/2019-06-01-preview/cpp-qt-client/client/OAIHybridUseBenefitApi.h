/**
 * Software Plan RP
 * Azure software plans let users create and manage licenses for various software used in Azure.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHybridUseBenefitApi_H
#define OAI_OAIHybridUseBenefitApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIHybridUseBenefitModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHybridUseBenefitApi : public QObject {
    Q_OBJECT

public:
    OAIHybridUseBenefitApi(const int timeOut = 0);
    ~OAIHybridUseBenefitApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIHybridUseBenefitModel [required]
    */
    virtual void hybridUseBenefitCreate(const QString &scope, const QString &plan_id, const QString &api_version, const OAIHybridUseBenefitModel &body);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hybridUseBenefitDelete(const QString &scope, const QString &plan_id, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hybridUseBenefitGet(const QString &scope, const QString &plan_id, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIHybridUseBenefitModel [required]
    */
    virtual void hybridUseBenefitUpdate(const QString &scope, const QString &plan_id, const QString &api_version, const OAIHybridUseBenefitModel &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void hybridUseBenefitCreateCallback(OAIHttpRequestWorker *worker);
    void hybridUseBenefitDeleteCallback(OAIHttpRequestWorker *worker);
    void hybridUseBenefitGetCallback(OAIHttpRequestWorker *worker);
    void hybridUseBenefitUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void hybridUseBenefitCreateSignal(OAIHybridUseBenefitModel summary);
    void hybridUseBenefitDeleteSignal();
    void hybridUseBenefitGetSignal(OAIHybridUseBenefitModel summary);
    void hybridUseBenefitUpdateSignal(OAIHybridUseBenefitModel summary);


    void hybridUseBenefitCreateSignalFull(OAIHttpRequestWorker *worker, OAIHybridUseBenefitModel summary);
    void hybridUseBenefitDeleteSignalFull(OAIHttpRequestWorker *worker);
    void hybridUseBenefitGetSignalFull(OAIHttpRequestWorker *worker, OAIHybridUseBenefitModel summary);
    void hybridUseBenefitUpdateSignalFull(OAIHttpRequestWorker *worker, OAIHybridUseBenefitModel summary);

    Q_DECL_DEPRECATED_X("Use hybridUseBenefitCreateSignalError() instead")
    void hybridUseBenefitCreateSignalE(OAIHybridUseBenefitModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridUseBenefitCreateSignalError(OAIHybridUseBenefitModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hybridUseBenefitDeleteSignalError() instead")
    void hybridUseBenefitDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hybridUseBenefitDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hybridUseBenefitGetSignalError() instead")
    void hybridUseBenefitGetSignalE(OAIHybridUseBenefitModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridUseBenefitGetSignalError(OAIHybridUseBenefitModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hybridUseBenefitUpdateSignalError() instead")
    void hybridUseBenefitUpdateSignalE(OAIHybridUseBenefitModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridUseBenefitUpdateSignalError(OAIHybridUseBenefitModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use hybridUseBenefitCreateSignalErrorFull() instead")
    void hybridUseBenefitCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridUseBenefitCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hybridUseBenefitDeleteSignalErrorFull() instead")
    void hybridUseBenefitDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridUseBenefitDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hybridUseBenefitGetSignalErrorFull() instead")
    void hybridUseBenefitGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridUseBenefitGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hybridUseBenefitUpdateSignalErrorFull() instead")
    void hybridUseBenefitUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridUseBenefitUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
