/*
 * ApiManagementClient
 * Use these REST APIs to get the analytics reports associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ReportsListByApi200Response;
import org.openapitools.client.model.ReportsListByRequest200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Disabled
public class ReportsApiTest {

    private final ReportsApi api = new ReportsApi();

    /**
     * Lists report records by API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsListByApiTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String $filter = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer $top = null;
        Integer $skip = null;
        ReportsListByApi200Response response = api.reportsListByApi(resourceGroupName, serviceName, $filter, apiVersion, subscriptionId, $top, $skip);
        // TODO: test validations
    }

    /**
     * Lists report records by geography.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsListByGeoTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        ReportsListByApi200Response response = api.reportsListByGeo(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Lists report records by API Operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsListByOperationTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String $filter = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer $top = null;
        Integer $skip = null;
        ReportsListByApi200Response response = api.reportsListByOperation(resourceGroupName, serviceName, $filter, apiVersion, subscriptionId, $top, $skip);
        // TODO: test validations
    }

    /**
     * Lists report records by Product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsListByProductTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String $filter = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer $top = null;
        Integer $skip = null;
        ReportsListByApi200Response response = api.reportsListByProduct(resourceGroupName, serviceName, $filter, apiVersion, subscriptionId, $top, $skip);
        // TODO: test validations
    }

    /**
     * Lists report records by Request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsListByRequestTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String $filter = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer $top = null;
        Integer $skip = null;
        ReportsListByRequest200Response response = api.reportsListByRequest(resourceGroupName, serviceName, $filter, apiVersion, subscriptionId, $top, $skip);
        // TODO: test validations
    }

    /**
     * Lists report records by subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsListBySubscriptionTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        ReportsListByApi200Response response = api.reportsListBySubscription(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Lists report records by Time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsListByTimeTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String interval = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        ReportsListByApi200Response response = api.reportsListByTime(resourceGroupName, serviceName, interval, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Lists report records by User.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsListByUserTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String $filter = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer $top = null;
        Integer $skip = null;
        ReportsListByApi200Response response = api.reportsListByUser(resourceGroupName, serviceName, $filter, apiVersion, subscriptionId, $top, $skip);
        // TODO: test validations
    }

}
