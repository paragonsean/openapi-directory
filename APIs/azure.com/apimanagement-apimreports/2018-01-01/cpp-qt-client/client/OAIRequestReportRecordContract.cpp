/**
 * ApiManagementClient
 * Use these REST APIs to get the analytics reports associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestReportRecordContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestReportRecordContract::OAIRequestReportRecordContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestReportRecordContract::OAIRequestReportRecordContract() {
    this->initializeModel();
}

OAIRequestReportRecordContract::~OAIRequestReportRecordContract() {}

void OAIRequestReportRecordContract::initializeModel() {

    m_api_id_isSet = false;
    m_api_id_isValid = false;

    m_api_region_isSet = false;
    m_api_region_isValid = false;

    m_api_time_isSet = false;
    m_api_time_isValid = false;

    m_backend_response_code_isSet = false;
    m_backend_response_code_isValid = false;

    m_cache_isSet = false;
    m_cache_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_size_isSet = false;
    m_request_size_isValid = false;

    m_response_code_isSet = false;
    m_response_code_isValid = false;

    m_response_size_isSet = false;
    m_response_size_isValid = false;

    m_service_time_isSet = false;
    m_service_time_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIRequestReportRecordContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestReportRecordContract::fromJsonObject(QJsonObject json) {

    m_api_id_isValid = ::OpenAPI::fromJsonValue(m_api_id, json[QString("apiId")]);
    m_api_id_isSet = !json[QString("apiId")].isNull() && m_api_id_isValid;

    m_api_region_isValid = ::OpenAPI::fromJsonValue(m_api_region, json[QString("apiRegion")]);
    m_api_region_isSet = !json[QString("apiRegion")].isNull() && m_api_region_isValid;

    m_api_time_isValid = ::OpenAPI::fromJsonValue(m_api_time, json[QString("apiTime")]);
    m_api_time_isSet = !json[QString("apiTime")].isNull() && m_api_time_isValid;

    m_backend_response_code_isValid = ::OpenAPI::fromJsonValue(m_backend_response_code, json[QString("backendResponseCode")]);
    m_backend_response_code_isSet = !json[QString("backendResponseCode")].isNull() && m_backend_response_code_isValid;

    m_cache_isValid = ::OpenAPI::fromJsonValue(m_cache, json[QString("cache")]);
    m_cache_isSet = !json[QString("cache")].isNull() && m_cache_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_request_size_isValid = ::OpenAPI::fromJsonValue(m_request_size, json[QString("requestSize")]);
    m_request_size_isSet = !json[QString("requestSize")].isNull() && m_request_size_isValid;

    m_response_code_isValid = ::OpenAPI::fromJsonValue(m_response_code, json[QString("responseCode")]);
    m_response_code_isSet = !json[QString("responseCode")].isNull() && m_response_code_isValid;

    m_response_size_isValid = ::OpenAPI::fromJsonValue(m_response_size, json[QString("responseSize")]);
    m_response_size_isSet = !json[QString("responseSize")].isNull() && m_response_size_isValid;

    m_service_time_isValid = ::OpenAPI::fromJsonValue(m_service_time, json[QString("serviceTime")]);
    m_service_time_isSet = !json[QString("serviceTime")].isNull() && m_service_time_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIRequestReportRecordContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestReportRecordContract::asJsonObject() const {
    QJsonObject obj;
    if (m_api_id_isSet) {
        obj.insert(QString("apiId"), ::OpenAPI::toJsonValue(m_api_id));
    }
    if (m_api_region_isSet) {
        obj.insert(QString("apiRegion"), ::OpenAPI::toJsonValue(m_api_region));
    }
    if (m_api_time_isSet) {
        obj.insert(QString("apiTime"), ::OpenAPI::toJsonValue(m_api_time));
    }
    if (m_backend_response_code_isSet) {
        obj.insert(QString("backendResponseCode"), ::OpenAPI::toJsonValue(m_backend_response_code));
    }
    if (m_cache_isSet) {
        obj.insert(QString("cache"), ::OpenAPI::toJsonValue(m_cache));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_size_isSet) {
        obj.insert(QString("requestSize"), ::OpenAPI::toJsonValue(m_request_size));
    }
    if (m_response_code_isSet) {
        obj.insert(QString("responseCode"), ::OpenAPI::toJsonValue(m_response_code));
    }
    if (m_response_size_isSet) {
        obj.insert(QString("responseSize"), ::OpenAPI::toJsonValue(m_response_size));
    }
    if (m_service_time_isSet) {
        obj.insert(QString("serviceTime"), ::OpenAPI::toJsonValue(m_service_time));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIRequestReportRecordContract::getApiId() const {
    return m_api_id;
}
void OAIRequestReportRecordContract::setApiId(const QString &api_id) {
    m_api_id = api_id;
    m_api_id_isSet = true;
}

bool OAIRequestReportRecordContract::is_api_id_Set() const{
    return m_api_id_isSet;
}

bool OAIRequestReportRecordContract::is_api_id_Valid() const{
    return m_api_id_isValid;
}

QString OAIRequestReportRecordContract::getApiRegion() const {
    return m_api_region;
}
void OAIRequestReportRecordContract::setApiRegion(const QString &api_region) {
    m_api_region = api_region;
    m_api_region_isSet = true;
}

bool OAIRequestReportRecordContract::is_api_region_Set() const{
    return m_api_region_isSet;
}

bool OAIRequestReportRecordContract::is_api_region_Valid() const{
    return m_api_region_isValid;
}

double OAIRequestReportRecordContract::getApiTime() const {
    return m_api_time;
}
void OAIRequestReportRecordContract::setApiTime(const double &api_time) {
    m_api_time = api_time;
    m_api_time_isSet = true;
}

bool OAIRequestReportRecordContract::is_api_time_Set() const{
    return m_api_time_isSet;
}

bool OAIRequestReportRecordContract::is_api_time_Valid() const{
    return m_api_time_isValid;
}

QString OAIRequestReportRecordContract::getBackendResponseCode() const {
    return m_backend_response_code;
}
void OAIRequestReportRecordContract::setBackendResponseCode(const QString &backend_response_code) {
    m_backend_response_code = backend_response_code;
    m_backend_response_code_isSet = true;
}

bool OAIRequestReportRecordContract::is_backend_response_code_Set() const{
    return m_backend_response_code_isSet;
}

bool OAIRequestReportRecordContract::is_backend_response_code_Valid() const{
    return m_backend_response_code_isValid;
}

QString OAIRequestReportRecordContract::getCache() const {
    return m_cache;
}
void OAIRequestReportRecordContract::setCache(const QString &cache) {
    m_cache = cache;
    m_cache_isSet = true;
}

bool OAIRequestReportRecordContract::is_cache_Set() const{
    return m_cache_isSet;
}

bool OAIRequestReportRecordContract::is_cache_Valid() const{
    return m_cache_isValid;
}

QString OAIRequestReportRecordContract::getIpAddress() const {
    return m_ip_address;
}
void OAIRequestReportRecordContract::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIRequestReportRecordContract::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIRequestReportRecordContract::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIRequestReportRecordContract::getMethod() const {
    return m_method;
}
void OAIRequestReportRecordContract::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIRequestReportRecordContract::is_method_Set() const{
    return m_method_isSet;
}

bool OAIRequestReportRecordContract::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIRequestReportRecordContract::getOperationId() const {
    return m_operation_id;
}
void OAIRequestReportRecordContract::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIRequestReportRecordContract::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIRequestReportRecordContract::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QString OAIRequestReportRecordContract::getProductId() const {
    return m_product_id;
}
void OAIRequestReportRecordContract::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIRequestReportRecordContract::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIRequestReportRecordContract::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIRequestReportRecordContract::getRequestId() const {
    return m_request_id;
}
void OAIRequestReportRecordContract::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIRequestReportRecordContract::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIRequestReportRecordContract::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIRequestReportRecordContract::getRequestSize() const {
    return m_request_size;
}
void OAIRequestReportRecordContract::setRequestSize(const qint32 &request_size) {
    m_request_size = request_size;
    m_request_size_isSet = true;
}

bool OAIRequestReportRecordContract::is_request_size_Set() const{
    return m_request_size_isSet;
}

bool OAIRequestReportRecordContract::is_request_size_Valid() const{
    return m_request_size_isValid;
}

qint32 OAIRequestReportRecordContract::getResponseCode() const {
    return m_response_code;
}
void OAIRequestReportRecordContract::setResponseCode(const qint32 &response_code) {
    m_response_code = response_code;
    m_response_code_isSet = true;
}

bool OAIRequestReportRecordContract::is_response_code_Set() const{
    return m_response_code_isSet;
}

bool OAIRequestReportRecordContract::is_response_code_Valid() const{
    return m_response_code_isValid;
}

qint32 OAIRequestReportRecordContract::getResponseSize() const {
    return m_response_size;
}
void OAIRequestReportRecordContract::setResponseSize(const qint32 &response_size) {
    m_response_size = response_size;
    m_response_size_isSet = true;
}

bool OAIRequestReportRecordContract::is_response_size_Set() const{
    return m_response_size_isSet;
}

bool OAIRequestReportRecordContract::is_response_size_Valid() const{
    return m_response_size_isValid;
}

double OAIRequestReportRecordContract::getServiceTime() const {
    return m_service_time;
}
void OAIRequestReportRecordContract::setServiceTime(const double &service_time) {
    m_service_time = service_time;
    m_service_time_isSet = true;
}

bool OAIRequestReportRecordContract::is_service_time_Set() const{
    return m_service_time_isSet;
}

bool OAIRequestReportRecordContract::is_service_time_Valid() const{
    return m_service_time_isValid;
}

QString OAIRequestReportRecordContract::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIRequestReportRecordContract::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIRequestReportRecordContract::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIRequestReportRecordContract::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QDateTime OAIRequestReportRecordContract::getTimestamp() const {
    return m_timestamp;
}
void OAIRequestReportRecordContract::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIRequestReportRecordContract::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIRequestReportRecordContract::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIRequestReportRecordContract::getUrl() const {
    return m_url;
}
void OAIRequestReportRecordContract::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRequestReportRecordContract::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRequestReportRecordContract::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIRequestReportRecordContract::getUserId() const {
    return m_user_id;
}
void OAIRequestReportRecordContract::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIRequestReportRecordContract::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIRequestReportRecordContract::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIRequestReportRecordContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestReportRecordContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
