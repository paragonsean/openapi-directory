/*
 * ApiManagementClient
 * Use these REST APIs to get the analytics reports associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Report data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:40.596181-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportRecordContract {
  public static final String SERIALIZED_NAME_API_ID = "apiId";
  @SerializedName(SERIALIZED_NAME_API_ID)
  private String apiId;

  public static final String SERIALIZED_NAME_API_REGION = "apiRegion";
  @SerializedName(SERIALIZED_NAME_API_REGION)
  private String apiRegion;

  public static final String SERIALIZED_NAME_API_TIME_AVG = "apiTimeAvg";
  @SerializedName(SERIALIZED_NAME_API_TIME_AVG)
  private Double apiTimeAvg;

  public static final String SERIALIZED_NAME_API_TIME_MAX = "apiTimeMax";
  @SerializedName(SERIALIZED_NAME_API_TIME_MAX)
  private Double apiTimeMax;

  public static final String SERIALIZED_NAME_API_TIME_MIN = "apiTimeMin";
  @SerializedName(SERIALIZED_NAME_API_TIME_MIN)
  private Double apiTimeMin;

  public static final String SERIALIZED_NAME_BANDWIDTH = "bandwidth";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH)
  private Long bandwidth;

  public static final String SERIALIZED_NAME_CACHE_HIT_COUNT = "cacheHitCount";
  @SerializedName(SERIALIZED_NAME_CACHE_HIT_COUNT)
  private Integer cacheHitCount;

  public static final String SERIALIZED_NAME_CACHE_MISS_COUNT = "cacheMissCount";
  @SerializedName(SERIALIZED_NAME_CACHE_MISS_COUNT)
  private Integer cacheMissCount;

  public static final String SERIALIZED_NAME_CALL_COUNT_BLOCKED = "callCountBlocked";
  @SerializedName(SERIALIZED_NAME_CALL_COUNT_BLOCKED)
  private Integer callCountBlocked;

  public static final String SERIALIZED_NAME_CALL_COUNT_FAILED = "callCountFailed";
  @SerializedName(SERIALIZED_NAME_CALL_COUNT_FAILED)
  private Integer callCountFailed;

  public static final String SERIALIZED_NAME_CALL_COUNT_OTHER = "callCountOther";
  @SerializedName(SERIALIZED_NAME_CALL_COUNT_OTHER)
  private Integer callCountOther;

  public static final String SERIALIZED_NAME_CALL_COUNT_SUCCESS = "callCountSuccess";
  @SerializedName(SERIALIZED_NAME_CALL_COUNT_SUCCESS)
  private Integer callCountSuccess;

  public static final String SERIALIZED_NAME_CALL_COUNT_TOTAL = "callCountTotal";
  @SerializedName(SERIALIZED_NAME_CALL_COUNT_TOTAL)
  private Integer callCountTotal;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Long interval;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SERVICE_TIME_AVG = "serviceTimeAvg";
  @SerializedName(SERIALIZED_NAME_SERVICE_TIME_AVG)
  private Double serviceTimeAvg;

  public static final String SERIALIZED_NAME_SERVICE_TIME_MAX = "serviceTimeMax";
  @SerializedName(SERIALIZED_NAME_SERVICE_TIME_MAX)
  private Double serviceTimeMax;

  public static final String SERIALIZED_NAME_SERVICE_TIME_MIN = "serviceTimeMin";
  @SerializedName(SERIALIZED_NAME_SERVICE_TIME_MIN)
  private Double serviceTimeMin;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public ReportRecordContract() {
  }

  public ReportRecordContract(
     String productId, 
     String userId
  ) {
    this();
    this.productId = productId;
    this.userId = userId;
  }

  public ReportRecordContract apiId(String apiId) {
    this.apiId = apiId;
    return this;
  }

  /**
   * API identifier path. /apis/{apiId}
   * @return apiId
   */
  @javax.annotation.Nullable
  public String getApiId() {
    return apiId;
  }

  public void setApiId(String apiId) {
    this.apiId = apiId;
  }


  public ReportRecordContract apiRegion(String apiRegion) {
    this.apiRegion = apiRegion;
    return this;
  }

  /**
   * API region identifier.
   * @return apiRegion
   */
  @javax.annotation.Nullable
  public String getApiRegion() {
    return apiRegion;
  }

  public void setApiRegion(String apiRegion) {
    this.apiRegion = apiRegion;
  }


  public ReportRecordContract apiTimeAvg(Double apiTimeAvg) {
    this.apiTimeAvg = apiTimeAvg;
    return this;
  }

  /**
   * Average time it took to process request.
   * @return apiTimeAvg
   */
  @javax.annotation.Nullable
  public Double getApiTimeAvg() {
    return apiTimeAvg;
  }

  public void setApiTimeAvg(Double apiTimeAvg) {
    this.apiTimeAvg = apiTimeAvg;
  }


  public ReportRecordContract apiTimeMax(Double apiTimeMax) {
    this.apiTimeMax = apiTimeMax;
    return this;
  }

  /**
   * Maximum time it took to process request.
   * @return apiTimeMax
   */
  @javax.annotation.Nullable
  public Double getApiTimeMax() {
    return apiTimeMax;
  }

  public void setApiTimeMax(Double apiTimeMax) {
    this.apiTimeMax = apiTimeMax;
  }


  public ReportRecordContract apiTimeMin(Double apiTimeMin) {
    this.apiTimeMin = apiTimeMin;
    return this;
  }

  /**
   * Minimum time it took to process request.
   * @return apiTimeMin
   */
  @javax.annotation.Nullable
  public Double getApiTimeMin() {
    return apiTimeMin;
  }

  public void setApiTimeMin(Double apiTimeMin) {
    this.apiTimeMin = apiTimeMin;
  }


  public ReportRecordContract bandwidth(Long bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

  /**
   * Bandwidth consumed.
   * @return bandwidth
   */
  @javax.annotation.Nullable
  public Long getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(Long bandwidth) {
    this.bandwidth = bandwidth;
  }


  public ReportRecordContract cacheHitCount(Integer cacheHitCount) {
    this.cacheHitCount = cacheHitCount;
    return this;
  }

  /**
   * Number of times when content was served from cache policy.
   * @return cacheHitCount
   */
  @javax.annotation.Nullable
  public Integer getCacheHitCount() {
    return cacheHitCount;
  }

  public void setCacheHitCount(Integer cacheHitCount) {
    this.cacheHitCount = cacheHitCount;
  }


  public ReportRecordContract cacheMissCount(Integer cacheMissCount) {
    this.cacheMissCount = cacheMissCount;
    return this;
  }

  /**
   * Number of times content was fetched from backend.
   * @return cacheMissCount
   */
  @javax.annotation.Nullable
  public Integer getCacheMissCount() {
    return cacheMissCount;
  }

  public void setCacheMissCount(Integer cacheMissCount) {
    this.cacheMissCount = cacheMissCount;
  }


  public ReportRecordContract callCountBlocked(Integer callCountBlocked) {
    this.callCountBlocked = callCountBlocked;
    return this;
  }

  /**
   * Number of calls blocked due to invalid credentials. This includes calls returning HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and HttpStatusCode.TooManyRequests
   * @return callCountBlocked
   */
  @javax.annotation.Nullable
  public Integer getCallCountBlocked() {
    return callCountBlocked;
  }

  public void setCallCountBlocked(Integer callCountBlocked) {
    this.callCountBlocked = callCountBlocked;
  }


  public ReportRecordContract callCountFailed(Integer callCountFailed) {
    this.callCountFailed = callCountFailed;
    return this;
  }

  /**
   * Number of calls failed due to proxy or backend errors. This includes calls returning HttpStatusCode.BadRequest(400) and any Code between HttpStatusCode.InternalServerError (500) and 600
   * @return callCountFailed
   */
  @javax.annotation.Nullable
  public Integer getCallCountFailed() {
    return callCountFailed;
  }

  public void setCallCountFailed(Integer callCountFailed) {
    this.callCountFailed = callCountFailed;
  }


  public ReportRecordContract callCountOther(Integer callCountOther) {
    this.callCountOther = callCountOther;
    return this;
  }

  /**
   * Number of other calls.
   * @return callCountOther
   */
  @javax.annotation.Nullable
  public Integer getCallCountOther() {
    return callCountOther;
  }

  public void setCallCountOther(Integer callCountOther) {
    this.callCountOther = callCountOther;
  }


  public ReportRecordContract callCountSuccess(Integer callCountSuccess) {
    this.callCountSuccess = callCountSuccess;
    return this;
  }

  /**
   * Number of successful calls. This includes calls returning HttpStatusCode &lt;&#x3D; 301 and HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect
   * @return callCountSuccess
   */
  @javax.annotation.Nullable
  public Integer getCallCountSuccess() {
    return callCountSuccess;
  }

  public void setCallCountSuccess(Integer callCountSuccess) {
    this.callCountSuccess = callCountSuccess;
  }


  public ReportRecordContract callCountTotal(Integer callCountTotal) {
    this.callCountTotal = callCountTotal;
    return this;
  }

  /**
   * Total number of calls.
   * @return callCountTotal
   */
  @javax.annotation.Nullable
  public Integer getCallCountTotal() {
    return callCountTotal;
  }

  public void setCallCountTotal(Integer callCountTotal) {
    this.callCountTotal = callCountTotal;
  }


  public ReportRecordContract country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country to which this record data is related.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ReportRecordContract interval(Long interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Length of aggregation period.
   * @return interval
   */
  @javax.annotation.Nullable
  public Long getInterval() {
    return interval;
  }

  public void setInterval(Long interval) {
    this.interval = interval;
  }


  public ReportRecordContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name depending on report endpoint specifies product, API, operation or developer name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReportRecordContract operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * Operation identifier path. /apis/{apiId}/operations/{operationId}
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  /**
   * Product identifier path. /products/{productId}
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }



  public ReportRecordContract region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Country region to which this record data is related.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public ReportRecordContract serviceTimeAvg(Double serviceTimeAvg) {
    this.serviceTimeAvg = serviceTimeAvg;
    return this;
  }

  /**
   * Average time it took to process request on backend.
   * @return serviceTimeAvg
   */
  @javax.annotation.Nullable
  public Double getServiceTimeAvg() {
    return serviceTimeAvg;
  }

  public void setServiceTimeAvg(Double serviceTimeAvg) {
    this.serviceTimeAvg = serviceTimeAvg;
  }


  public ReportRecordContract serviceTimeMax(Double serviceTimeMax) {
    this.serviceTimeMax = serviceTimeMax;
    return this;
  }

  /**
   * Maximum time it took to process request on backend.
   * @return serviceTimeMax
   */
  @javax.annotation.Nullable
  public Double getServiceTimeMax() {
    return serviceTimeMax;
  }

  public void setServiceTimeMax(Double serviceTimeMax) {
    this.serviceTimeMax = serviceTimeMax;
  }


  public ReportRecordContract serviceTimeMin(Double serviceTimeMin) {
    this.serviceTimeMin = serviceTimeMin;
    return this;
  }

  /**
   * Minimum time it took to process request on backend.
   * @return serviceTimeMin
   */
  @javax.annotation.Nullable
  public Double getServiceTimeMin() {
    return serviceTimeMin;
  }

  public void setServiceTimeMin(Double serviceTimeMin) {
    this.serviceTimeMin = serviceTimeMin;
  }


  public ReportRecordContract subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Subscription identifier path. /subscriptions/{subscriptionId}
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public ReportRecordContract timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Start of aggregation period. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  /**
   * User identifier path. /users/{userId}
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }



  public ReportRecordContract zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * Zip code to which this record data is related.
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportRecordContract reportRecordContract = (ReportRecordContract) o;
    return Objects.equals(this.apiId, reportRecordContract.apiId) &&
        Objects.equals(this.apiRegion, reportRecordContract.apiRegion) &&
        Objects.equals(this.apiTimeAvg, reportRecordContract.apiTimeAvg) &&
        Objects.equals(this.apiTimeMax, reportRecordContract.apiTimeMax) &&
        Objects.equals(this.apiTimeMin, reportRecordContract.apiTimeMin) &&
        Objects.equals(this.bandwidth, reportRecordContract.bandwidth) &&
        Objects.equals(this.cacheHitCount, reportRecordContract.cacheHitCount) &&
        Objects.equals(this.cacheMissCount, reportRecordContract.cacheMissCount) &&
        Objects.equals(this.callCountBlocked, reportRecordContract.callCountBlocked) &&
        Objects.equals(this.callCountFailed, reportRecordContract.callCountFailed) &&
        Objects.equals(this.callCountOther, reportRecordContract.callCountOther) &&
        Objects.equals(this.callCountSuccess, reportRecordContract.callCountSuccess) &&
        Objects.equals(this.callCountTotal, reportRecordContract.callCountTotal) &&
        Objects.equals(this.country, reportRecordContract.country) &&
        Objects.equals(this.interval, reportRecordContract.interval) &&
        Objects.equals(this.name, reportRecordContract.name) &&
        Objects.equals(this.operationId, reportRecordContract.operationId) &&
        Objects.equals(this.productId, reportRecordContract.productId) &&
        Objects.equals(this.region, reportRecordContract.region) &&
        Objects.equals(this.serviceTimeAvg, reportRecordContract.serviceTimeAvg) &&
        Objects.equals(this.serviceTimeMax, reportRecordContract.serviceTimeMax) &&
        Objects.equals(this.serviceTimeMin, reportRecordContract.serviceTimeMin) &&
        Objects.equals(this.subscriptionId, reportRecordContract.subscriptionId) &&
        Objects.equals(this.timestamp, reportRecordContract.timestamp) &&
        Objects.equals(this.userId, reportRecordContract.userId) &&
        Objects.equals(this.zip, reportRecordContract.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiId, apiRegion, apiTimeAvg, apiTimeMax, apiTimeMin, bandwidth, cacheHitCount, cacheMissCount, callCountBlocked, callCountFailed, callCountOther, callCountSuccess, callCountTotal, country, interval, name, operationId, productId, region, serviceTimeAvg, serviceTimeMax, serviceTimeMin, subscriptionId, timestamp, userId, zip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportRecordContract {\n");
    sb.append("    apiId: ").append(toIndentedString(apiId)).append("\n");
    sb.append("    apiRegion: ").append(toIndentedString(apiRegion)).append("\n");
    sb.append("    apiTimeAvg: ").append(toIndentedString(apiTimeAvg)).append("\n");
    sb.append("    apiTimeMax: ").append(toIndentedString(apiTimeMax)).append("\n");
    sb.append("    apiTimeMin: ").append(toIndentedString(apiTimeMin)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    cacheHitCount: ").append(toIndentedString(cacheHitCount)).append("\n");
    sb.append("    cacheMissCount: ").append(toIndentedString(cacheMissCount)).append("\n");
    sb.append("    callCountBlocked: ").append(toIndentedString(callCountBlocked)).append("\n");
    sb.append("    callCountFailed: ").append(toIndentedString(callCountFailed)).append("\n");
    sb.append("    callCountOther: ").append(toIndentedString(callCountOther)).append("\n");
    sb.append("    callCountSuccess: ").append(toIndentedString(callCountSuccess)).append("\n");
    sb.append("    callCountTotal: ").append(toIndentedString(callCountTotal)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    serviceTimeAvg: ").append(toIndentedString(serviceTimeAvg)).append("\n");
    sb.append("    serviceTimeMax: ").append(toIndentedString(serviceTimeMax)).append("\n");
    sb.append("    serviceTimeMin: ").append(toIndentedString(serviceTimeMin)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiId");
    openapiFields.add("apiRegion");
    openapiFields.add("apiTimeAvg");
    openapiFields.add("apiTimeMax");
    openapiFields.add("apiTimeMin");
    openapiFields.add("bandwidth");
    openapiFields.add("cacheHitCount");
    openapiFields.add("cacheMissCount");
    openapiFields.add("callCountBlocked");
    openapiFields.add("callCountFailed");
    openapiFields.add("callCountOther");
    openapiFields.add("callCountSuccess");
    openapiFields.add("callCountTotal");
    openapiFields.add("country");
    openapiFields.add("interval");
    openapiFields.add("name");
    openapiFields.add("operationId");
    openapiFields.add("productId");
    openapiFields.add("region");
    openapiFields.add("serviceTimeAvg");
    openapiFields.add("serviceTimeMax");
    openapiFields.add("serviceTimeMin");
    openapiFields.add("subscriptionId");
    openapiFields.add("timestamp");
    openapiFields.add("userId");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportRecordContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportRecordContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportRecordContract is not found in the empty JSON string", ReportRecordContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportRecordContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportRecordContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiId") != null && !jsonObj.get("apiId").isJsonNull()) && !jsonObj.get("apiId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiId").toString()));
      }
      if ((jsonObj.get("apiRegion") != null && !jsonObj.get("apiRegion").isJsonNull()) && !jsonObj.get("apiRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiRegion").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportRecordContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportRecordContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportRecordContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportRecordContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportRecordContract>() {
           @Override
           public void write(JsonWriter out, ReportRecordContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportRecordContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportRecordContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportRecordContract
   * @throws IOException if the JSON string is invalid with respect to ReportRecordContract
   */
  public static ReportRecordContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportRecordContract.class);
  }

  /**
   * Convert an instance of ReportRecordContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

