/**
 * ApiManagementClient
 * Use these REST APIs to get the analytics reports associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReportRecordContract.h
 *
 * Report data.
 */

#ifndef OAIReportRecordContract_H
#define OAIReportRecordContract_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReportRecordContract : public OAIObject {
public:
    OAIReportRecordContract();
    OAIReportRecordContract(QString json);
    ~OAIReportRecordContract() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApiId() const;
    void setApiId(const QString &api_id);
    bool is_api_id_Set() const;
    bool is_api_id_Valid() const;

    QString getApiRegion() const;
    void setApiRegion(const QString &api_region);
    bool is_api_region_Set() const;
    bool is_api_region_Valid() const;

    double getApiTimeAvg() const;
    void setApiTimeAvg(const double &api_time_avg);
    bool is_api_time_avg_Set() const;
    bool is_api_time_avg_Valid() const;

    double getApiTimeMax() const;
    void setApiTimeMax(const double &api_time_max);
    bool is_api_time_max_Set() const;
    bool is_api_time_max_Valid() const;

    double getApiTimeMin() const;
    void setApiTimeMin(const double &api_time_min);
    bool is_api_time_min_Set() const;
    bool is_api_time_min_Valid() const;

    qint64 getBandwidth() const;
    void setBandwidth(const qint64 &bandwidth);
    bool is_bandwidth_Set() const;
    bool is_bandwidth_Valid() const;

    qint32 getCacheHitCount() const;
    void setCacheHitCount(const qint32 &cache_hit_count);
    bool is_cache_hit_count_Set() const;
    bool is_cache_hit_count_Valid() const;

    qint32 getCacheMissCount() const;
    void setCacheMissCount(const qint32 &cache_miss_count);
    bool is_cache_miss_count_Set() const;
    bool is_cache_miss_count_Valid() const;

    qint32 getCallCountBlocked() const;
    void setCallCountBlocked(const qint32 &call_count_blocked);
    bool is_call_count_blocked_Set() const;
    bool is_call_count_blocked_Valid() const;

    qint32 getCallCountFailed() const;
    void setCallCountFailed(const qint32 &call_count_failed);
    bool is_call_count_failed_Set() const;
    bool is_call_count_failed_Valid() const;

    qint32 getCallCountOther() const;
    void setCallCountOther(const qint32 &call_count_other);
    bool is_call_count_other_Set() const;
    bool is_call_count_other_Valid() const;

    qint32 getCallCountSuccess() const;
    void setCallCountSuccess(const qint32 &call_count_success);
    bool is_call_count_success_Set() const;
    bool is_call_count_success_Valid() const;

    qint32 getCallCountTotal() const;
    void setCallCountTotal(const qint32 &call_count_total);
    bool is_call_count_total_Set() const;
    bool is_call_count_total_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    qint64 getInterval() const;
    void setInterval(const qint64 &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOperationId() const;
    void setOperationId(const QString &operation_id);
    bool is_operation_id_Set() const;
    bool is_operation_id_Valid() const;

    QString getProductId() const;
    void setProductId(const QString &product_id);
    bool is_product_id_Set() const;
    bool is_product_id_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    double getServiceTimeAvg() const;
    void setServiceTimeAvg(const double &service_time_avg);
    bool is_service_time_avg_Set() const;
    bool is_service_time_avg_Valid() const;

    double getServiceTimeMax() const;
    void setServiceTimeMax(const double &service_time_max);
    bool is_service_time_max_Set() const;
    bool is_service_time_max_Valid() const;

    double getServiceTimeMin() const;
    void setServiceTimeMin(const double &service_time_min);
    bool is_service_time_min_Set() const;
    bool is_service_time_min_Valid() const;

    QString getSubscriptionId() const;
    void setSubscriptionId(const QString &subscription_id);
    bool is_subscription_id_Set() const;
    bool is_subscription_id_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getZip() const;
    void setZip(const QString &zip);
    bool is_zip_Set() const;
    bool is_zip_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_api_id;
    bool m_api_id_isSet;
    bool m_api_id_isValid;

    QString m_api_region;
    bool m_api_region_isSet;
    bool m_api_region_isValid;

    double m_api_time_avg;
    bool m_api_time_avg_isSet;
    bool m_api_time_avg_isValid;

    double m_api_time_max;
    bool m_api_time_max_isSet;
    bool m_api_time_max_isValid;

    double m_api_time_min;
    bool m_api_time_min_isSet;
    bool m_api_time_min_isValid;

    qint64 m_bandwidth;
    bool m_bandwidth_isSet;
    bool m_bandwidth_isValid;

    qint32 m_cache_hit_count;
    bool m_cache_hit_count_isSet;
    bool m_cache_hit_count_isValid;

    qint32 m_cache_miss_count;
    bool m_cache_miss_count_isSet;
    bool m_cache_miss_count_isValid;

    qint32 m_call_count_blocked;
    bool m_call_count_blocked_isSet;
    bool m_call_count_blocked_isValid;

    qint32 m_call_count_failed;
    bool m_call_count_failed_isSet;
    bool m_call_count_failed_isValid;

    qint32 m_call_count_other;
    bool m_call_count_other_isSet;
    bool m_call_count_other_isValid;

    qint32 m_call_count_success;
    bool m_call_count_success_isSet;
    bool m_call_count_success_isValid;

    qint32 m_call_count_total;
    bool m_call_count_total_isSet;
    bool m_call_count_total_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    qint64 m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_operation_id;
    bool m_operation_id_isSet;
    bool m_operation_id_isValid;

    QString m_product_id;
    bool m_product_id_isSet;
    bool m_product_id_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    double m_service_time_avg;
    bool m_service_time_avg_isSet;
    bool m_service_time_avg_isValid;

    double m_service_time_max;
    bool m_service_time_max_isSet;
    bool m_service_time_max_isValid;

    double m_service_time_min;
    bool m_service_time_min_isSet;
    bool m_service_time_min_isValid;

    QString m_subscription_id;
    bool m_subscription_id_isSet;
    bool m_subscription_id_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_zip;
    bool m_zip_isSet;
    bool m_zip_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReportRecordContract)

#endif // OAIReportRecordContract_H
