/**
 * ApiManagementClient
 * Use these REST APIs to get the analytics reports associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReports_ListByApi_200_response_value_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReports_ListByApi_200_response_value_inner::OAIReports_ListByApi_200_response_value_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReports_ListByApi_200_response_value_inner::OAIReports_ListByApi_200_response_value_inner() {
    this->initializeModel();
}

OAIReports_ListByApi_200_response_value_inner::~OAIReports_ListByApi_200_response_value_inner() {}

void OAIReports_ListByApi_200_response_value_inner::initializeModel() {

    m_api_id_isSet = false;
    m_api_id_isValid = false;

    m_api_region_isSet = false;
    m_api_region_isValid = false;

    m_api_time_avg_isSet = false;
    m_api_time_avg_isValid = false;

    m_api_time_max_isSet = false;
    m_api_time_max_isValid = false;

    m_api_time_min_isSet = false;
    m_api_time_min_isValid = false;

    m_bandwidth_isSet = false;
    m_bandwidth_isValid = false;

    m_cache_hit_count_isSet = false;
    m_cache_hit_count_isValid = false;

    m_cache_miss_count_isSet = false;
    m_cache_miss_count_isValid = false;

    m_call_count_blocked_isSet = false;
    m_call_count_blocked_isValid = false;

    m_call_count_failed_isSet = false;
    m_call_count_failed_isValid = false;

    m_call_count_other_isSet = false;
    m_call_count_other_isValid = false;

    m_call_count_success_isSet = false;
    m_call_count_success_isValid = false;

    m_call_count_total_isSet = false;
    m_call_count_total_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_service_time_avg_isSet = false;
    m_service_time_avg_isValid = false;

    m_service_time_max_isSet = false;
    m_service_time_max_isValid = false;

    m_service_time_min_isSet = false;
    m_service_time_min_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIReports_ListByApi_200_response_value_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReports_ListByApi_200_response_value_inner::fromJsonObject(QJsonObject json) {

    m_api_id_isValid = ::OpenAPI::fromJsonValue(m_api_id, json[QString("apiId")]);
    m_api_id_isSet = !json[QString("apiId")].isNull() && m_api_id_isValid;

    m_api_region_isValid = ::OpenAPI::fromJsonValue(m_api_region, json[QString("apiRegion")]);
    m_api_region_isSet = !json[QString("apiRegion")].isNull() && m_api_region_isValid;

    m_api_time_avg_isValid = ::OpenAPI::fromJsonValue(m_api_time_avg, json[QString("apiTimeAvg")]);
    m_api_time_avg_isSet = !json[QString("apiTimeAvg")].isNull() && m_api_time_avg_isValid;

    m_api_time_max_isValid = ::OpenAPI::fromJsonValue(m_api_time_max, json[QString("apiTimeMax")]);
    m_api_time_max_isSet = !json[QString("apiTimeMax")].isNull() && m_api_time_max_isValid;

    m_api_time_min_isValid = ::OpenAPI::fromJsonValue(m_api_time_min, json[QString("apiTimeMin")]);
    m_api_time_min_isSet = !json[QString("apiTimeMin")].isNull() && m_api_time_min_isValid;

    m_bandwidth_isValid = ::OpenAPI::fromJsonValue(m_bandwidth, json[QString("bandwidth")]);
    m_bandwidth_isSet = !json[QString("bandwidth")].isNull() && m_bandwidth_isValid;

    m_cache_hit_count_isValid = ::OpenAPI::fromJsonValue(m_cache_hit_count, json[QString("cacheHitCount")]);
    m_cache_hit_count_isSet = !json[QString("cacheHitCount")].isNull() && m_cache_hit_count_isValid;

    m_cache_miss_count_isValid = ::OpenAPI::fromJsonValue(m_cache_miss_count, json[QString("cacheMissCount")]);
    m_cache_miss_count_isSet = !json[QString("cacheMissCount")].isNull() && m_cache_miss_count_isValid;

    m_call_count_blocked_isValid = ::OpenAPI::fromJsonValue(m_call_count_blocked, json[QString("callCountBlocked")]);
    m_call_count_blocked_isSet = !json[QString("callCountBlocked")].isNull() && m_call_count_blocked_isValid;

    m_call_count_failed_isValid = ::OpenAPI::fromJsonValue(m_call_count_failed, json[QString("callCountFailed")]);
    m_call_count_failed_isSet = !json[QString("callCountFailed")].isNull() && m_call_count_failed_isValid;

    m_call_count_other_isValid = ::OpenAPI::fromJsonValue(m_call_count_other, json[QString("callCountOther")]);
    m_call_count_other_isSet = !json[QString("callCountOther")].isNull() && m_call_count_other_isValid;

    m_call_count_success_isValid = ::OpenAPI::fromJsonValue(m_call_count_success, json[QString("callCountSuccess")]);
    m_call_count_success_isSet = !json[QString("callCountSuccess")].isNull() && m_call_count_success_isValid;

    m_call_count_total_isValid = ::OpenAPI::fromJsonValue(m_call_count_total, json[QString("callCountTotal")]);
    m_call_count_total_isSet = !json[QString("callCountTotal")].isNull() && m_call_count_total_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_service_time_avg_isValid = ::OpenAPI::fromJsonValue(m_service_time_avg, json[QString("serviceTimeAvg")]);
    m_service_time_avg_isSet = !json[QString("serviceTimeAvg")].isNull() && m_service_time_avg_isValid;

    m_service_time_max_isValid = ::OpenAPI::fromJsonValue(m_service_time_max, json[QString("serviceTimeMax")]);
    m_service_time_max_isSet = !json[QString("serviceTimeMax")].isNull() && m_service_time_max_isValid;

    m_service_time_min_isValid = ::OpenAPI::fromJsonValue(m_service_time_min, json[QString("serviceTimeMin")]);
    m_service_time_min_isSet = !json[QString("serviceTimeMin")].isNull() && m_service_time_min_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIReports_ListByApi_200_response_value_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReports_ListByApi_200_response_value_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_api_id_isSet) {
        obj.insert(QString("apiId"), ::OpenAPI::toJsonValue(m_api_id));
    }
    if (m_api_region_isSet) {
        obj.insert(QString("apiRegion"), ::OpenAPI::toJsonValue(m_api_region));
    }
    if (m_api_time_avg_isSet) {
        obj.insert(QString("apiTimeAvg"), ::OpenAPI::toJsonValue(m_api_time_avg));
    }
    if (m_api_time_max_isSet) {
        obj.insert(QString("apiTimeMax"), ::OpenAPI::toJsonValue(m_api_time_max));
    }
    if (m_api_time_min_isSet) {
        obj.insert(QString("apiTimeMin"), ::OpenAPI::toJsonValue(m_api_time_min));
    }
    if (m_bandwidth_isSet) {
        obj.insert(QString("bandwidth"), ::OpenAPI::toJsonValue(m_bandwidth));
    }
    if (m_cache_hit_count_isSet) {
        obj.insert(QString("cacheHitCount"), ::OpenAPI::toJsonValue(m_cache_hit_count));
    }
    if (m_cache_miss_count_isSet) {
        obj.insert(QString("cacheMissCount"), ::OpenAPI::toJsonValue(m_cache_miss_count));
    }
    if (m_call_count_blocked_isSet) {
        obj.insert(QString("callCountBlocked"), ::OpenAPI::toJsonValue(m_call_count_blocked));
    }
    if (m_call_count_failed_isSet) {
        obj.insert(QString("callCountFailed"), ::OpenAPI::toJsonValue(m_call_count_failed));
    }
    if (m_call_count_other_isSet) {
        obj.insert(QString("callCountOther"), ::OpenAPI::toJsonValue(m_call_count_other));
    }
    if (m_call_count_success_isSet) {
        obj.insert(QString("callCountSuccess"), ::OpenAPI::toJsonValue(m_call_count_success));
    }
    if (m_call_count_total_isSet) {
        obj.insert(QString("callCountTotal"), ::OpenAPI::toJsonValue(m_call_count_total));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_service_time_avg_isSet) {
        obj.insert(QString("serviceTimeAvg"), ::OpenAPI::toJsonValue(m_service_time_avg));
    }
    if (m_service_time_max_isSet) {
        obj.insert(QString("serviceTimeMax"), ::OpenAPI::toJsonValue(m_service_time_max));
    }
    if (m_service_time_min_isSet) {
        obj.insert(QString("serviceTimeMin"), ::OpenAPI::toJsonValue(m_service_time_min));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIReports_ListByApi_200_response_value_inner::getApiId() const {
    return m_api_id;
}
void OAIReports_ListByApi_200_response_value_inner::setApiId(const QString &api_id) {
    m_api_id = api_id;
    m_api_id_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_api_id_Set() const{
    return m_api_id_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_api_id_Valid() const{
    return m_api_id_isValid;
}

QString OAIReports_ListByApi_200_response_value_inner::getApiRegion() const {
    return m_api_region;
}
void OAIReports_ListByApi_200_response_value_inner::setApiRegion(const QString &api_region) {
    m_api_region = api_region;
    m_api_region_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_api_region_Set() const{
    return m_api_region_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_api_region_Valid() const{
    return m_api_region_isValid;
}

double OAIReports_ListByApi_200_response_value_inner::getApiTimeAvg() const {
    return m_api_time_avg;
}
void OAIReports_ListByApi_200_response_value_inner::setApiTimeAvg(const double &api_time_avg) {
    m_api_time_avg = api_time_avg;
    m_api_time_avg_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_api_time_avg_Set() const{
    return m_api_time_avg_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_api_time_avg_Valid() const{
    return m_api_time_avg_isValid;
}

double OAIReports_ListByApi_200_response_value_inner::getApiTimeMax() const {
    return m_api_time_max;
}
void OAIReports_ListByApi_200_response_value_inner::setApiTimeMax(const double &api_time_max) {
    m_api_time_max = api_time_max;
    m_api_time_max_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_api_time_max_Set() const{
    return m_api_time_max_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_api_time_max_Valid() const{
    return m_api_time_max_isValid;
}

double OAIReports_ListByApi_200_response_value_inner::getApiTimeMin() const {
    return m_api_time_min;
}
void OAIReports_ListByApi_200_response_value_inner::setApiTimeMin(const double &api_time_min) {
    m_api_time_min = api_time_min;
    m_api_time_min_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_api_time_min_Set() const{
    return m_api_time_min_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_api_time_min_Valid() const{
    return m_api_time_min_isValid;
}

qint64 OAIReports_ListByApi_200_response_value_inner::getBandwidth() const {
    return m_bandwidth;
}
void OAIReports_ListByApi_200_response_value_inner::setBandwidth(const qint64 &bandwidth) {
    m_bandwidth = bandwidth;
    m_bandwidth_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_bandwidth_Set() const{
    return m_bandwidth_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_bandwidth_Valid() const{
    return m_bandwidth_isValid;
}

qint32 OAIReports_ListByApi_200_response_value_inner::getCacheHitCount() const {
    return m_cache_hit_count;
}
void OAIReports_ListByApi_200_response_value_inner::setCacheHitCount(const qint32 &cache_hit_count) {
    m_cache_hit_count = cache_hit_count;
    m_cache_hit_count_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_cache_hit_count_Set() const{
    return m_cache_hit_count_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_cache_hit_count_Valid() const{
    return m_cache_hit_count_isValid;
}

qint32 OAIReports_ListByApi_200_response_value_inner::getCacheMissCount() const {
    return m_cache_miss_count;
}
void OAIReports_ListByApi_200_response_value_inner::setCacheMissCount(const qint32 &cache_miss_count) {
    m_cache_miss_count = cache_miss_count;
    m_cache_miss_count_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_cache_miss_count_Set() const{
    return m_cache_miss_count_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_cache_miss_count_Valid() const{
    return m_cache_miss_count_isValid;
}

qint32 OAIReports_ListByApi_200_response_value_inner::getCallCountBlocked() const {
    return m_call_count_blocked;
}
void OAIReports_ListByApi_200_response_value_inner::setCallCountBlocked(const qint32 &call_count_blocked) {
    m_call_count_blocked = call_count_blocked;
    m_call_count_blocked_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_call_count_blocked_Set() const{
    return m_call_count_blocked_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_call_count_blocked_Valid() const{
    return m_call_count_blocked_isValid;
}

qint32 OAIReports_ListByApi_200_response_value_inner::getCallCountFailed() const {
    return m_call_count_failed;
}
void OAIReports_ListByApi_200_response_value_inner::setCallCountFailed(const qint32 &call_count_failed) {
    m_call_count_failed = call_count_failed;
    m_call_count_failed_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_call_count_failed_Set() const{
    return m_call_count_failed_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_call_count_failed_Valid() const{
    return m_call_count_failed_isValid;
}

qint32 OAIReports_ListByApi_200_response_value_inner::getCallCountOther() const {
    return m_call_count_other;
}
void OAIReports_ListByApi_200_response_value_inner::setCallCountOther(const qint32 &call_count_other) {
    m_call_count_other = call_count_other;
    m_call_count_other_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_call_count_other_Set() const{
    return m_call_count_other_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_call_count_other_Valid() const{
    return m_call_count_other_isValid;
}

qint32 OAIReports_ListByApi_200_response_value_inner::getCallCountSuccess() const {
    return m_call_count_success;
}
void OAIReports_ListByApi_200_response_value_inner::setCallCountSuccess(const qint32 &call_count_success) {
    m_call_count_success = call_count_success;
    m_call_count_success_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_call_count_success_Set() const{
    return m_call_count_success_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_call_count_success_Valid() const{
    return m_call_count_success_isValid;
}

qint32 OAIReports_ListByApi_200_response_value_inner::getCallCountTotal() const {
    return m_call_count_total;
}
void OAIReports_ListByApi_200_response_value_inner::setCallCountTotal(const qint32 &call_count_total) {
    m_call_count_total = call_count_total;
    m_call_count_total_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_call_count_total_Set() const{
    return m_call_count_total_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_call_count_total_Valid() const{
    return m_call_count_total_isValid;
}

QString OAIReports_ListByApi_200_response_value_inner::getCountry() const {
    return m_country;
}
void OAIReports_ListByApi_200_response_value_inner::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_country_Set() const{
    return m_country_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIReports_ListByApi_200_response_value_inner::getInterval() const {
    return m_interval;
}
void OAIReports_ListByApi_200_response_value_inner::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAIReports_ListByApi_200_response_value_inner::getName() const {
    return m_name;
}
void OAIReports_ListByApi_200_response_value_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIReports_ListByApi_200_response_value_inner::getOperationId() const {
    return m_operation_id;
}
void OAIReports_ListByApi_200_response_value_inner::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QString OAIReports_ListByApi_200_response_value_inner::getProductId() const {
    return m_product_id;
}
void OAIReports_ListByApi_200_response_value_inner::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIReports_ListByApi_200_response_value_inner::getRegion() const {
    return m_region;
}
void OAIReports_ListByApi_200_response_value_inner::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_region_Set() const{
    return m_region_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_region_Valid() const{
    return m_region_isValid;
}

double OAIReports_ListByApi_200_response_value_inner::getServiceTimeAvg() const {
    return m_service_time_avg;
}
void OAIReports_ListByApi_200_response_value_inner::setServiceTimeAvg(const double &service_time_avg) {
    m_service_time_avg = service_time_avg;
    m_service_time_avg_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_service_time_avg_Set() const{
    return m_service_time_avg_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_service_time_avg_Valid() const{
    return m_service_time_avg_isValid;
}

double OAIReports_ListByApi_200_response_value_inner::getServiceTimeMax() const {
    return m_service_time_max;
}
void OAIReports_ListByApi_200_response_value_inner::setServiceTimeMax(const double &service_time_max) {
    m_service_time_max = service_time_max;
    m_service_time_max_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_service_time_max_Set() const{
    return m_service_time_max_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_service_time_max_Valid() const{
    return m_service_time_max_isValid;
}

double OAIReports_ListByApi_200_response_value_inner::getServiceTimeMin() const {
    return m_service_time_min;
}
void OAIReports_ListByApi_200_response_value_inner::setServiceTimeMin(const double &service_time_min) {
    m_service_time_min = service_time_min;
    m_service_time_min_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_service_time_min_Set() const{
    return m_service_time_min_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_service_time_min_Valid() const{
    return m_service_time_min_isValid;
}

QString OAIReports_ListByApi_200_response_value_inner::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIReports_ListByApi_200_response_value_inner::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QDateTime OAIReports_ListByApi_200_response_value_inner::getTimestamp() const {
    return m_timestamp;
}
void OAIReports_ListByApi_200_response_value_inner::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIReports_ListByApi_200_response_value_inner::getUserId() const {
    return m_user_id;
}
void OAIReports_ListByApi_200_response_value_inner::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIReports_ListByApi_200_response_value_inner::getZip() const {
    return m_zip;
}
void OAIReports_ListByApi_200_response_value_inner::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIReports_ListByApi_200_response_value_inner::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIReports_ListByApi_200_response_value_inner::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIReports_ListByApi_200_response_value_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_time_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_time_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_time_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bandwidth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_hit_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_miss_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_count_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_count_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_count_other_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_count_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_count_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_time_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_time_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_time_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReports_ListByApi_200_response_value_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
