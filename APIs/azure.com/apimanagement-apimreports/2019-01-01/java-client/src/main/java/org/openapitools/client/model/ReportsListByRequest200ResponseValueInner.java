/*
 * ApiManagementClient
 * Use these REST APIs to get the analytics reports associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request Report data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:35.514866-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportsListByRequest200ResponseValueInner {
  public static final String SERIALIZED_NAME_API_ID = "apiId";
  @SerializedName(SERIALIZED_NAME_API_ID)
  private String apiId;

  public static final String SERIALIZED_NAME_API_REGION = "apiRegion";
  @SerializedName(SERIALIZED_NAME_API_REGION)
  private String apiRegion;

  public static final String SERIALIZED_NAME_API_TIME = "apiTime";
  @SerializedName(SERIALIZED_NAME_API_TIME)
  private Double apiTime;

  public static final String SERIALIZED_NAME_BACKEND_RESPONSE_CODE = "backendResponseCode";
  @SerializedName(SERIALIZED_NAME_BACKEND_RESPONSE_CODE)
  private String backendResponseCode;

  public static final String SERIALIZED_NAME_CACHE = "cache";
  @SerializedName(SERIALIZED_NAME_CACHE)
  private String cache;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_REQUEST_SIZE = "requestSize";
  @SerializedName(SERIALIZED_NAME_REQUEST_SIZE)
  private Integer requestSize;

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "responseCode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private Integer responseCode;

  public static final String SERIALIZED_NAME_RESPONSE_SIZE = "responseSize";
  @SerializedName(SERIALIZED_NAME_RESPONSE_SIZE)
  private Integer responseSize;

  public static final String SERIALIZED_NAME_SERVICE_TIME = "serviceTime";
  @SerializedName(SERIALIZED_NAME_SERVICE_TIME)
  private Double serviceTime;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public ReportsListByRequest200ResponseValueInner() {
  }

  public ReportsListByRequest200ResponseValueInner(
     String productId, 
     String userId
  ) {
    this();
    this.productId = productId;
    this.userId = userId;
  }

  public ReportsListByRequest200ResponseValueInner apiId(String apiId) {
    this.apiId = apiId;
    return this;
  }

  /**
   * API identifier path. /apis/{apiId}
   * @return apiId
   */
  @javax.annotation.Nullable
  public String getApiId() {
    return apiId;
  }

  public void setApiId(String apiId) {
    this.apiId = apiId;
  }


  public ReportsListByRequest200ResponseValueInner apiRegion(String apiRegion) {
    this.apiRegion = apiRegion;
    return this;
  }

  /**
   * Azure region where the gateway that processed this request is located.
   * @return apiRegion
   */
  @javax.annotation.Nullable
  public String getApiRegion() {
    return apiRegion;
  }

  public void setApiRegion(String apiRegion) {
    this.apiRegion = apiRegion;
  }


  public ReportsListByRequest200ResponseValueInner apiTime(Double apiTime) {
    this.apiTime = apiTime;
    return this;
  }

  /**
   * The total time it took to process this request.
   * @return apiTime
   */
  @javax.annotation.Nullable
  public Double getApiTime() {
    return apiTime;
  }

  public void setApiTime(Double apiTime) {
    this.apiTime = apiTime;
  }


  public ReportsListByRequest200ResponseValueInner backendResponseCode(String backendResponseCode) {
    this.backendResponseCode = backendResponseCode;
    return this;
  }

  /**
   * The HTTP status code received by the gateway as a result of forwarding this request to the backend.
   * @return backendResponseCode
   */
  @javax.annotation.Nullable
  public String getBackendResponseCode() {
    return backendResponseCode;
  }

  public void setBackendResponseCode(String backendResponseCode) {
    this.backendResponseCode = backendResponseCode;
  }


  public ReportsListByRequest200ResponseValueInner cache(String cache) {
    this.cache = cache;
    return this;
  }

  /**
   * Specifies if response cache was involved in generating the response. If the value is none, the cache was not used. If the value is hit, cached response was returned. If the value is miss, the cache was used but lookup resulted in a miss and request was fulfilled by the backend.
   * @return cache
   */
  @javax.annotation.Nullable
  public String getCache() {
    return cache;
  }

  public void setCache(String cache) {
    this.cache = cache;
  }


  public ReportsListByRequest200ResponseValueInner ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * The client IP address associated with this request.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public ReportsListByRequest200ResponseValueInner method(String method) {
    this.method = method;
    return this;
  }

  /**
   * The HTTP method associated with this request..
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public ReportsListByRequest200ResponseValueInner operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * Operation identifier path. /apis/{apiId}/operations/{operationId}
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  /**
   * Product identifier path. /products/{productId}
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }



  public ReportsListByRequest200ResponseValueInner requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Request Identifier.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public ReportsListByRequest200ResponseValueInner requestSize(Integer requestSize) {
    this.requestSize = requestSize;
    return this;
  }

  /**
   * The size of this request..
   * @return requestSize
   */
  @javax.annotation.Nullable
  public Integer getRequestSize() {
    return requestSize;
  }

  public void setRequestSize(Integer requestSize) {
    this.requestSize = requestSize;
  }


  public ReportsListByRequest200ResponseValueInner responseCode(Integer responseCode) {
    this.responseCode = responseCode;
    return this;
  }

  /**
   * The HTTP status code returned by the gateway.
   * @return responseCode
   */
  @javax.annotation.Nullable
  public Integer getResponseCode() {
    return responseCode;
  }

  public void setResponseCode(Integer responseCode) {
    this.responseCode = responseCode;
  }


  public ReportsListByRequest200ResponseValueInner responseSize(Integer responseSize) {
    this.responseSize = responseSize;
    return this;
  }

  /**
   * The size of the response returned by the gateway.
   * @return responseSize
   */
  @javax.annotation.Nullable
  public Integer getResponseSize() {
    return responseSize;
  }

  public void setResponseSize(Integer responseSize) {
    this.responseSize = responseSize;
  }


  public ReportsListByRequest200ResponseValueInner serviceTime(Double serviceTime) {
    this.serviceTime = serviceTime;
    return this;
  }

  /**
   * he time it took to forward this request to the backend and get the response back.
   * @return serviceTime
   */
  @javax.annotation.Nullable
  public Double getServiceTime() {
    return serviceTime;
  }

  public void setServiceTime(Double serviceTime) {
    this.serviceTime = serviceTime;
  }


  public ReportsListByRequest200ResponseValueInner subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Subscription identifier path. /subscriptions/{subscriptionId}
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public ReportsListByRequest200ResponseValueInner timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * The date and time when this request was received by the gateway in ISO 8601 format.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public ReportsListByRequest200ResponseValueInner url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The full URL associated with this request.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  /**
   * User identifier path. /users/{userId}
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsListByRequest200ResponseValueInner reportsListByRequest200ResponseValueInner = (ReportsListByRequest200ResponseValueInner) o;
    return Objects.equals(this.apiId, reportsListByRequest200ResponseValueInner.apiId) &&
        Objects.equals(this.apiRegion, reportsListByRequest200ResponseValueInner.apiRegion) &&
        Objects.equals(this.apiTime, reportsListByRequest200ResponseValueInner.apiTime) &&
        Objects.equals(this.backendResponseCode, reportsListByRequest200ResponseValueInner.backendResponseCode) &&
        Objects.equals(this.cache, reportsListByRequest200ResponseValueInner.cache) &&
        Objects.equals(this.ipAddress, reportsListByRequest200ResponseValueInner.ipAddress) &&
        Objects.equals(this.method, reportsListByRequest200ResponseValueInner.method) &&
        Objects.equals(this.operationId, reportsListByRequest200ResponseValueInner.operationId) &&
        Objects.equals(this.productId, reportsListByRequest200ResponseValueInner.productId) &&
        Objects.equals(this.requestId, reportsListByRequest200ResponseValueInner.requestId) &&
        Objects.equals(this.requestSize, reportsListByRequest200ResponseValueInner.requestSize) &&
        Objects.equals(this.responseCode, reportsListByRequest200ResponseValueInner.responseCode) &&
        Objects.equals(this.responseSize, reportsListByRequest200ResponseValueInner.responseSize) &&
        Objects.equals(this.serviceTime, reportsListByRequest200ResponseValueInner.serviceTime) &&
        Objects.equals(this.subscriptionId, reportsListByRequest200ResponseValueInner.subscriptionId) &&
        Objects.equals(this.timestamp, reportsListByRequest200ResponseValueInner.timestamp) &&
        Objects.equals(this.url, reportsListByRequest200ResponseValueInner.url) &&
        Objects.equals(this.userId, reportsListByRequest200ResponseValueInner.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiId, apiRegion, apiTime, backendResponseCode, cache, ipAddress, method, operationId, productId, requestId, requestSize, responseCode, responseSize, serviceTime, subscriptionId, timestamp, url, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsListByRequest200ResponseValueInner {\n");
    sb.append("    apiId: ").append(toIndentedString(apiId)).append("\n");
    sb.append("    apiRegion: ").append(toIndentedString(apiRegion)).append("\n");
    sb.append("    apiTime: ").append(toIndentedString(apiTime)).append("\n");
    sb.append("    backendResponseCode: ").append(toIndentedString(backendResponseCode)).append("\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requestSize: ").append(toIndentedString(requestSize)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    responseSize: ").append(toIndentedString(responseSize)).append("\n");
    sb.append("    serviceTime: ").append(toIndentedString(serviceTime)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiId");
    openapiFields.add("apiRegion");
    openapiFields.add("apiTime");
    openapiFields.add("backendResponseCode");
    openapiFields.add("cache");
    openapiFields.add("ipAddress");
    openapiFields.add("method");
    openapiFields.add("operationId");
    openapiFields.add("productId");
    openapiFields.add("requestId");
    openapiFields.add("requestSize");
    openapiFields.add("responseCode");
    openapiFields.add("responseSize");
    openapiFields.add("serviceTime");
    openapiFields.add("subscriptionId");
    openapiFields.add("timestamp");
    openapiFields.add("url");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportsListByRequest200ResponseValueInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportsListByRequest200ResponseValueInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsListByRequest200ResponseValueInner is not found in the empty JSON string", ReportsListByRequest200ResponseValueInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportsListByRequest200ResponseValueInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportsListByRequest200ResponseValueInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiId") != null && !jsonObj.get("apiId").isJsonNull()) && !jsonObj.get("apiId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiId").toString()));
      }
      if ((jsonObj.get("apiRegion") != null && !jsonObj.get("apiRegion").isJsonNull()) && !jsonObj.get("apiRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiRegion").toString()));
      }
      if ((jsonObj.get("backendResponseCode") != null && !jsonObj.get("backendResponseCode").isJsonNull()) && !jsonObj.get("backendResponseCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendResponseCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendResponseCode").toString()));
      }
      if ((jsonObj.get("cache") != null && !jsonObj.get("cache").isJsonNull()) && !jsonObj.get("cache").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cache` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cache").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsListByRequest200ResponseValueInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsListByRequest200ResponseValueInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsListByRequest200ResponseValueInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsListByRequest200ResponseValueInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsListByRequest200ResponseValueInner>() {
           @Override
           public void write(JsonWriter out, ReportsListByRequest200ResponseValueInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsListByRequest200ResponseValueInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportsListByRequest200ResponseValueInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportsListByRequest200ResponseValueInner
   * @throws IOException if the JSON string is invalid with respect to ReportsListByRequest200ResponseValueInner
   */
  public static ReportsListByRequest200ResponseValueInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsListByRequest200ResponseValueInner.class);
  }

  /**
   * Convert an instance of ReportsListByRequest200ResponseValueInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

