/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAutoscaleSettingsApi_H
#define OAI_OAIAutoscaleSettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutoscaleSettingResource.h"
#include "OAIAutoscaleSettingResourceCollection.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAutoscaleSettingsApi : public QObject {
    Q_OBJECT

public:
    OAIAutoscaleSettingsApi(const int timeOut = 0);
    ~OAIAutoscaleSettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  autoscale_setting_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAutoscaleSettingResource [required]
    */
    virtual void autoscaleSettingsCreateOrUpdate(const QString &resource_group_name, const QString &autoscale_setting_name, const QString &api_version, const QString &subscription_id, const OAIAutoscaleSettingResource &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  autoscale_setting_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void autoscaleSettingsDelete(const QString &resource_group_name, const QString &autoscale_setting_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  autoscale_setting_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void autoscaleSettingsGet(const QString &resource_group_name, const QString &autoscale_setting_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void autoscaleSettingsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void autoscaleSettingsListBySubscription(const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void autoscaleSettingsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void autoscaleSettingsDeleteCallback(OAIHttpRequestWorker *worker);
    void autoscaleSettingsGetCallback(OAIHttpRequestWorker *worker);
    void autoscaleSettingsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void autoscaleSettingsListBySubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void autoscaleSettingsCreateOrUpdateSignal(OAIAutoscaleSettingResource summary);
    void autoscaleSettingsDeleteSignal();
    void autoscaleSettingsGetSignal(OAIAutoscaleSettingResource summary);
    void autoscaleSettingsListByResourceGroupSignal(OAIAutoscaleSettingResourceCollection summary);
    void autoscaleSettingsListBySubscriptionSignal(OAIAutoscaleSettingResourceCollection summary);


    void autoscaleSettingsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAutoscaleSettingResource summary);
    void autoscaleSettingsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void autoscaleSettingsGetSignalFull(OAIHttpRequestWorker *worker, OAIAutoscaleSettingResource summary);
    void autoscaleSettingsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAutoscaleSettingResourceCollection summary);
    void autoscaleSettingsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIAutoscaleSettingResourceCollection summary);

    Q_DECL_DEPRECATED_X("Use autoscaleSettingsCreateOrUpdateSignalError() instead")
    void autoscaleSettingsCreateOrUpdateSignalE(OAIAutoscaleSettingResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autoscaleSettingsCreateOrUpdateSignalError(OAIAutoscaleSettingResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoscaleSettingsDeleteSignalError() instead")
    void autoscaleSettingsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void autoscaleSettingsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoscaleSettingsGetSignalError() instead")
    void autoscaleSettingsGetSignalE(OAIAutoscaleSettingResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autoscaleSettingsGetSignalError(OAIAutoscaleSettingResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoscaleSettingsListByResourceGroupSignalError() instead")
    void autoscaleSettingsListByResourceGroupSignalE(OAIAutoscaleSettingResourceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autoscaleSettingsListByResourceGroupSignalError(OAIAutoscaleSettingResourceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoscaleSettingsListBySubscriptionSignalError() instead")
    void autoscaleSettingsListBySubscriptionSignalE(OAIAutoscaleSettingResourceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autoscaleSettingsListBySubscriptionSignalError(OAIAutoscaleSettingResourceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use autoscaleSettingsCreateOrUpdateSignalErrorFull() instead")
    void autoscaleSettingsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoscaleSettingsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoscaleSettingsDeleteSignalErrorFull() instead")
    void autoscaleSettingsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoscaleSettingsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoscaleSettingsGetSignalErrorFull() instead")
    void autoscaleSettingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoscaleSettingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoscaleSettingsListByResourceGroupSignalErrorFull() instead")
    void autoscaleSettingsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoscaleSettingsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autoscaleSettingsListBySubscriptionSignalErrorFull() instead")
    void autoscaleSettingsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoscaleSettingsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
