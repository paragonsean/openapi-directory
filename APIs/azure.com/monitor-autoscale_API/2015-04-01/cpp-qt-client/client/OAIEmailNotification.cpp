/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailNotification::OAIEmailNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailNotification::OAIEmailNotification() {
    this->initializeModel();
}

OAIEmailNotification::~OAIEmailNotification() {}

void OAIEmailNotification::initializeModel() {

    m_custom_emails_isSet = false;
    m_custom_emails_isValid = false;

    m_send_to_subscription_administrator_isSet = false;
    m_send_to_subscription_administrator_isValid = false;

    m_send_to_subscription_co_administrators_isSet = false;
    m_send_to_subscription_co_administrators_isValid = false;
}

void OAIEmailNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailNotification::fromJsonObject(QJsonObject json) {

    m_custom_emails_isValid = ::OpenAPI::fromJsonValue(m_custom_emails, json[QString("customEmails")]);
    m_custom_emails_isSet = !json[QString("customEmails")].isNull() && m_custom_emails_isValid;

    m_send_to_subscription_administrator_isValid = ::OpenAPI::fromJsonValue(m_send_to_subscription_administrator, json[QString("sendToSubscriptionAdministrator")]);
    m_send_to_subscription_administrator_isSet = !json[QString("sendToSubscriptionAdministrator")].isNull() && m_send_to_subscription_administrator_isValid;

    m_send_to_subscription_co_administrators_isValid = ::OpenAPI::fromJsonValue(m_send_to_subscription_co_administrators, json[QString("sendToSubscriptionCoAdministrators")]);
    m_send_to_subscription_co_administrators_isSet = !json[QString("sendToSubscriptionCoAdministrators")].isNull() && m_send_to_subscription_co_administrators_isValid;
}

QString OAIEmailNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_emails.size() > 0) {
        obj.insert(QString("customEmails"), ::OpenAPI::toJsonValue(m_custom_emails));
    }
    if (m_send_to_subscription_administrator_isSet) {
        obj.insert(QString("sendToSubscriptionAdministrator"), ::OpenAPI::toJsonValue(m_send_to_subscription_administrator));
    }
    if (m_send_to_subscription_co_administrators_isSet) {
        obj.insert(QString("sendToSubscriptionCoAdministrators"), ::OpenAPI::toJsonValue(m_send_to_subscription_co_administrators));
    }
    return obj;
}

QList<QString> OAIEmailNotification::getCustomEmails() const {
    return m_custom_emails;
}
void OAIEmailNotification::setCustomEmails(const QList<QString> &custom_emails) {
    m_custom_emails = custom_emails;
    m_custom_emails_isSet = true;
}

bool OAIEmailNotification::is_custom_emails_Set() const{
    return m_custom_emails_isSet;
}

bool OAIEmailNotification::is_custom_emails_Valid() const{
    return m_custom_emails_isValid;
}

bool OAIEmailNotification::isSendToSubscriptionAdministrator() const {
    return m_send_to_subscription_administrator;
}
void OAIEmailNotification::setSendToSubscriptionAdministrator(const bool &send_to_subscription_administrator) {
    m_send_to_subscription_administrator = send_to_subscription_administrator;
    m_send_to_subscription_administrator_isSet = true;
}

bool OAIEmailNotification::is_send_to_subscription_administrator_Set() const{
    return m_send_to_subscription_administrator_isSet;
}

bool OAIEmailNotification::is_send_to_subscription_administrator_Valid() const{
    return m_send_to_subscription_administrator_isValid;
}

bool OAIEmailNotification::isSendToSubscriptionCoAdministrators() const {
    return m_send_to_subscription_co_administrators;
}
void OAIEmailNotification::setSendToSubscriptionCoAdministrators(const bool &send_to_subscription_co_administrators) {
    m_send_to_subscription_co_administrators = send_to_subscription_co_administrators;
    m_send_to_subscription_co_administrators_isSet = true;
}

bool OAIEmailNotification::is_send_to_subscription_co_administrators_Set() const{
    return m_send_to_subscription_co_administrators_isSet;
}

bool OAIEmailNotification::is_send_to_subscription_co_administrators_Valid() const{
    return m_send_to_subscription_co_administrators_isValid;
}

bool OAIEmailNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_to_subscription_administrator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_to_subscription_co_administrators_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
