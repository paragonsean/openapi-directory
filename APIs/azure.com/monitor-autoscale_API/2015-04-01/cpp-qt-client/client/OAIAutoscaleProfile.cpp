/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoscaleProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoscaleProfile::OAIAutoscaleProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoscaleProfile::OAIAutoscaleProfile() {
    this->initializeModel();
}

OAIAutoscaleProfile::~OAIAutoscaleProfile() {}

void OAIAutoscaleProfile::initializeModel() {

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_fixed_date_isSet = false;
    m_fixed_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recurrence_isSet = false;
    m_recurrence_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAIAutoscaleProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoscaleProfile::fromJsonObject(QJsonObject json) {

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_fixed_date_isValid = ::OpenAPI::fromJsonValue(m_fixed_date, json[QString("fixedDate")]);
    m_fixed_date_isSet = !json[QString("fixedDate")].isNull() && m_fixed_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recurrence_isValid = ::OpenAPI::fromJsonValue(m_recurrence, json[QString("recurrence")]);
    m_recurrence_isSet = !json[QString("recurrence")].isNull() && m_recurrence_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;
}

QString OAIAutoscaleProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoscaleProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity.isSet()) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_fixed_date.isSet()) {
        obj.insert(QString("fixedDate"), ::OpenAPI::toJsonValue(m_fixed_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recurrence.isSet()) {
        obj.insert(QString("recurrence"), ::OpenAPI::toJsonValue(m_recurrence));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

OAIScaleCapacity OAIAutoscaleProfile::getCapacity() const {
    return m_capacity;
}
void OAIAutoscaleProfile::setCapacity(const OAIScaleCapacity &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIAutoscaleProfile::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIAutoscaleProfile::is_capacity_Valid() const{
    return m_capacity_isValid;
}

OAITimeWindow OAIAutoscaleProfile::getFixedDate() const {
    return m_fixed_date;
}
void OAIAutoscaleProfile::setFixedDate(const OAITimeWindow &fixed_date) {
    m_fixed_date = fixed_date;
    m_fixed_date_isSet = true;
}

bool OAIAutoscaleProfile::is_fixed_date_Set() const{
    return m_fixed_date_isSet;
}

bool OAIAutoscaleProfile::is_fixed_date_Valid() const{
    return m_fixed_date_isValid;
}

QString OAIAutoscaleProfile::getName() const {
    return m_name;
}
void OAIAutoscaleProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAutoscaleProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAutoscaleProfile::is_name_Valid() const{
    return m_name_isValid;
}

OAIRecurrence OAIAutoscaleProfile::getRecurrence() const {
    return m_recurrence;
}
void OAIAutoscaleProfile::setRecurrence(const OAIRecurrence &recurrence) {
    m_recurrence = recurrence;
    m_recurrence_isSet = true;
}

bool OAIAutoscaleProfile::is_recurrence_Set() const{
    return m_recurrence_isSet;
}

bool OAIAutoscaleProfile::is_recurrence_Valid() const{
    return m_recurrence_isValid;
}

QList<OAIScaleRule> OAIAutoscaleProfile::getRules() const {
    return m_rules;
}
void OAIAutoscaleProfile::setRules(const QList<OAIScaleRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIAutoscaleProfile::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIAutoscaleProfile::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAIAutoscaleProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoscaleProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_capacity_isValid && m_name_isValid && m_rules_isValid && true;
}

} // namespace OpenAPI
