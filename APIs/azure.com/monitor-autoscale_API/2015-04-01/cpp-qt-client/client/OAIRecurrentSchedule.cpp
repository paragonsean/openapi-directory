/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecurrentSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecurrentSchedule::OAIRecurrentSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecurrentSchedule::OAIRecurrentSchedule() {
    this->initializeModel();
}

OAIRecurrentSchedule::~OAIRecurrentSchedule() {}

void OAIRecurrentSchedule::initializeModel() {

    m_days_isSet = false;
    m_days_isValid = false;

    m_hours_isSet = false;
    m_hours_isValid = false;

    m_minutes_isSet = false;
    m_minutes_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIRecurrentSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecurrentSchedule::fromJsonObject(QJsonObject json) {

    m_days_isValid = ::OpenAPI::fromJsonValue(m_days, json[QString("days")]);
    m_days_isSet = !json[QString("days")].isNull() && m_days_isValid;

    m_hours_isValid = ::OpenAPI::fromJsonValue(m_hours, json[QString("hours")]);
    m_hours_isSet = !json[QString("hours")].isNull() && m_hours_isValid;

    m_minutes_isValid = ::OpenAPI::fromJsonValue(m_minutes, json[QString("minutes")]);
    m_minutes_isSet = !json[QString("minutes")].isNull() && m_minutes_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIRecurrentSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecurrentSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_days.size() > 0) {
        obj.insert(QString("days"), ::OpenAPI::toJsonValue(m_days));
    }
    if (m_hours.size() > 0) {
        obj.insert(QString("hours"), ::OpenAPI::toJsonValue(m_hours));
    }
    if (m_minutes.size() > 0) {
        obj.insert(QString("minutes"), ::OpenAPI::toJsonValue(m_minutes));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QList<QString> OAIRecurrentSchedule::getDays() const {
    return m_days;
}
void OAIRecurrentSchedule::setDays(const QList<QString> &days) {
    m_days = days;
    m_days_isSet = true;
}

bool OAIRecurrentSchedule::is_days_Set() const{
    return m_days_isSet;
}

bool OAIRecurrentSchedule::is_days_Valid() const{
    return m_days_isValid;
}

QList<qint32> OAIRecurrentSchedule::getHours() const {
    return m_hours;
}
void OAIRecurrentSchedule::setHours(const QList<qint32> &hours) {
    m_hours = hours;
    m_hours_isSet = true;
}

bool OAIRecurrentSchedule::is_hours_Set() const{
    return m_hours_isSet;
}

bool OAIRecurrentSchedule::is_hours_Valid() const{
    return m_hours_isValid;
}

QList<qint32> OAIRecurrentSchedule::getMinutes() const {
    return m_minutes;
}
void OAIRecurrentSchedule::setMinutes(const QList<qint32> &minutes) {
    m_minutes = minutes;
    m_minutes_isSet = true;
}

bool OAIRecurrentSchedule::is_minutes_Set() const{
    return m_minutes_isSet;
}

bool OAIRecurrentSchedule::is_minutes_Valid() const{
    return m_minutes_isValid;
}

QString OAIRecurrentSchedule::getTimeZone() const {
    return m_time_zone;
}
void OAIRecurrentSchedule::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIRecurrentSchedule::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIRecurrentSchedule::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIRecurrentSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecurrentSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_days_isValid && m_hours_isValid && m_minutes_isValid && m_time_zone_isValid && true;
}

} // namespace OpenAPI
