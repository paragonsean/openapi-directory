/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricTrigger.h
 *
 * The trigger that results in a scaling action.
 */

#ifndef OAIMetricTrigger_H
#define OAIMetricTrigger_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMetricTrigger : public OAIObject {
public:
    OAIMetricTrigger();
    OAIMetricTrigger(QString json);
    ~OAIMetricTrigger() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMetricName() const;
    void setMetricName(const QString &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    QString getMetricResourceUri() const;
    void setMetricResourceUri(const QString &metric_resource_uri);
    bool is_metric_resource_uri_Set() const;
    bool is_metric_resource_uri_Valid() const;

    QString getROperator() const;
    void setROperator(const QString &r_operator);
    bool is_r_operator_Set() const;
    bool is_r_operator_Valid() const;

    QString getStatistic() const;
    void setStatistic(const QString &statistic);
    bool is_statistic_Set() const;
    bool is_statistic_Valid() const;

    double getThreshold() const;
    void setThreshold(const double &threshold);
    bool is_threshold_Set() const;
    bool is_threshold_Valid() const;

    QString getTimeAggregation() const;
    void setTimeAggregation(const QString &time_aggregation);
    bool is_time_aggregation_Set() const;
    bool is_time_aggregation_Valid() const;

    QString getTimeGrain() const;
    void setTimeGrain(const QString &time_grain);
    bool is_time_grain_Set() const;
    bool is_time_grain_Valid() const;

    QString getTimeWindow() const;
    void setTimeWindow(const QString &time_window);
    bool is_time_window_Set() const;
    bool is_time_window_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    QString m_metric_resource_uri;
    bool m_metric_resource_uri_isSet;
    bool m_metric_resource_uri_isValid;

    QString m_r_operator;
    bool m_r_operator_isSet;
    bool m_r_operator_isValid;

    QString m_statistic;
    bool m_statistic_isSet;
    bool m_statistic_isValid;

    double m_threshold;
    bool m_threshold_isSet;
    bool m_threshold_isValid;

    QString m_time_aggregation;
    bool m_time_aggregation_isSet;
    bool m_time_aggregation_isValid;

    QString m_time_grain;
    bool m_time_grain_isSet;
    bool m_time_grain_isValid;

    QString m_time_window;
    bool m_time_window_isSet;
    bool m_time_window_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricTrigger)

#endif // OAIMetricTrigger_H
