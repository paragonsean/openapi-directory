/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricTrigger::OAIMetricTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricTrigger::OAIMetricTrigger() {
    this->initializeModel();
}

OAIMetricTrigger::~OAIMetricTrigger() {}

void OAIMetricTrigger::initializeModel() {

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_metric_resource_uri_isSet = false;
    m_metric_resource_uri_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_statistic_isSet = false;
    m_statistic_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_time_aggregation_isSet = false;
    m_time_aggregation_isValid = false;

    m_time_grain_isSet = false;
    m_time_grain_isValid = false;

    m_time_window_isSet = false;
    m_time_window_isValid = false;
}

void OAIMetricTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricTrigger::fromJsonObject(QJsonObject json) {

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metricName")]);
    m_metric_name_isSet = !json[QString("metricName")].isNull() && m_metric_name_isValid;

    m_metric_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_metric_resource_uri, json[QString("metricResourceUri")]);
    m_metric_resource_uri_isSet = !json[QString("metricResourceUri")].isNull() && m_metric_resource_uri_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_statistic_isValid = ::OpenAPI::fromJsonValue(m_statistic, json[QString("statistic")]);
    m_statistic_isSet = !json[QString("statistic")].isNull() && m_statistic_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;

    m_time_aggregation_isValid = ::OpenAPI::fromJsonValue(m_time_aggregation, json[QString("timeAggregation")]);
    m_time_aggregation_isSet = !json[QString("timeAggregation")].isNull() && m_time_aggregation_isValid;

    m_time_grain_isValid = ::OpenAPI::fromJsonValue(m_time_grain, json[QString("timeGrain")]);
    m_time_grain_isSet = !json[QString("timeGrain")].isNull() && m_time_grain_isValid;

    m_time_window_isValid = ::OpenAPI::fromJsonValue(m_time_window, json[QString("timeWindow")]);
    m_time_window_isSet = !json[QString("timeWindow")].isNull() && m_time_window_isValid;
}

QString OAIMetricTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_name_isSet) {
        obj.insert(QString("metricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_metric_resource_uri_isSet) {
        obj.insert(QString("metricResourceUri"), ::OpenAPI::toJsonValue(m_metric_resource_uri));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_statistic_isSet) {
        obj.insert(QString("statistic"), ::OpenAPI::toJsonValue(m_statistic));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_time_aggregation_isSet) {
        obj.insert(QString("timeAggregation"), ::OpenAPI::toJsonValue(m_time_aggregation));
    }
    if (m_time_grain_isSet) {
        obj.insert(QString("timeGrain"), ::OpenAPI::toJsonValue(m_time_grain));
    }
    if (m_time_window_isSet) {
        obj.insert(QString("timeWindow"), ::OpenAPI::toJsonValue(m_time_window));
    }
    return obj;
}

QString OAIMetricTrigger::getMetricName() const {
    return m_metric_name;
}
void OAIMetricTrigger::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIMetricTrigger::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIMetricTrigger::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QString OAIMetricTrigger::getMetricResourceUri() const {
    return m_metric_resource_uri;
}
void OAIMetricTrigger::setMetricResourceUri(const QString &metric_resource_uri) {
    m_metric_resource_uri = metric_resource_uri;
    m_metric_resource_uri_isSet = true;
}

bool OAIMetricTrigger::is_metric_resource_uri_Set() const{
    return m_metric_resource_uri_isSet;
}

bool OAIMetricTrigger::is_metric_resource_uri_Valid() const{
    return m_metric_resource_uri_isValid;
}

QString OAIMetricTrigger::getROperator() const {
    return m_r_operator;
}
void OAIMetricTrigger::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIMetricTrigger::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIMetricTrigger::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIMetricTrigger::getStatistic() const {
    return m_statistic;
}
void OAIMetricTrigger::setStatistic(const QString &statistic) {
    m_statistic = statistic;
    m_statistic_isSet = true;
}

bool OAIMetricTrigger::is_statistic_Set() const{
    return m_statistic_isSet;
}

bool OAIMetricTrigger::is_statistic_Valid() const{
    return m_statistic_isValid;
}

double OAIMetricTrigger::getThreshold() const {
    return m_threshold;
}
void OAIMetricTrigger::setThreshold(const double &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIMetricTrigger::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIMetricTrigger::is_threshold_Valid() const{
    return m_threshold_isValid;
}

QString OAIMetricTrigger::getTimeAggregation() const {
    return m_time_aggregation;
}
void OAIMetricTrigger::setTimeAggregation(const QString &time_aggregation) {
    m_time_aggregation = time_aggregation;
    m_time_aggregation_isSet = true;
}

bool OAIMetricTrigger::is_time_aggregation_Set() const{
    return m_time_aggregation_isSet;
}

bool OAIMetricTrigger::is_time_aggregation_Valid() const{
    return m_time_aggregation_isValid;
}

QString OAIMetricTrigger::getTimeGrain() const {
    return m_time_grain;
}
void OAIMetricTrigger::setTimeGrain(const QString &time_grain) {
    m_time_grain = time_grain;
    m_time_grain_isSet = true;
}

bool OAIMetricTrigger::is_time_grain_Set() const{
    return m_time_grain_isSet;
}

bool OAIMetricTrigger::is_time_grain_Valid() const{
    return m_time_grain_isValid;
}

QString OAIMetricTrigger::getTimeWindow() const {
    return m_time_window;
}
void OAIMetricTrigger::setTimeWindow(const QString &time_window) {
    m_time_window = time_window;
    m_time_window_isSet = true;
}

bool OAIMetricTrigger::is_time_window_Set() const{
    return m_time_window_isSet;
}

bool OAIMetricTrigger::is_time_window_Valid() const{
    return m_time_window_isValid;
}

bool OAIMetricTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_aggregation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_grain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_window_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_name_isValid && m_metric_resource_uri_isValid && m_r_operator_isValid && m_statistic_isValid && m_threshold_isValid && m_time_aggregation_isValid && m_time_grain_isValid && m_time_window_isValid && true;
}

} // namespace OpenAPI
