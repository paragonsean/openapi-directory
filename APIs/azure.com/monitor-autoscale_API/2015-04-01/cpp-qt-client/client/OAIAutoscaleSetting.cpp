/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoscaleSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoscaleSetting::OAIAutoscaleSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoscaleSetting::OAIAutoscaleSetting() {
    this->initializeModel();
}

OAIAutoscaleSetting::~OAIAutoscaleSetting() {}

void OAIAutoscaleSetting::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_profiles_isSet = false;
    m_profiles_isValid = false;

    m_target_resource_uri_isSet = false;
    m_target_resource_uri_isValid = false;
}

void OAIAutoscaleSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoscaleSetting::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_profiles_isValid = ::OpenAPI::fromJsonValue(m_profiles, json[QString("profiles")]);
    m_profiles_isSet = !json[QString("profiles")].isNull() && m_profiles_isValid;

    m_target_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_target_resource_uri, json[QString("targetResourceUri")]);
    m_target_resource_uri_isSet = !json[QString("targetResourceUri")].isNull() && m_target_resource_uri_isValid;
}

QString OAIAutoscaleSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoscaleSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notifications.size() > 0) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_profiles.size() > 0) {
        obj.insert(QString("profiles"), ::OpenAPI::toJsonValue(m_profiles));
    }
    if (m_target_resource_uri_isSet) {
        obj.insert(QString("targetResourceUri"), ::OpenAPI::toJsonValue(m_target_resource_uri));
    }
    return obj;
}

bool OAIAutoscaleSetting::isEnabled() const {
    return m_enabled;
}
void OAIAutoscaleSetting::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAutoscaleSetting::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAutoscaleSetting::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIAutoscaleSetting::getName() const {
    return m_name;
}
void OAIAutoscaleSetting::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAutoscaleSetting::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAutoscaleSetting::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIAutoscaleNotification> OAIAutoscaleSetting::getNotifications() const {
    return m_notifications;
}
void OAIAutoscaleSetting::setNotifications(const QList<OAIAutoscaleNotification> &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIAutoscaleSetting::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIAutoscaleSetting::is_notifications_Valid() const{
    return m_notifications_isValid;
}

QList<OAIAutoscaleProfile> OAIAutoscaleSetting::getProfiles() const {
    return m_profiles;
}
void OAIAutoscaleSetting::setProfiles(const QList<OAIAutoscaleProfile> &profiles) {
    m_profiles = profiles;
    m_profiles_isSet = true;
}

bool OAIAutoscaleSetting::is_profiles_Set() const{
    return m_profiles_isSet;
}

bool OAIAutoscaleSetting::is_profiles_Valid() const{
    return m_profiles_isValid;
}

QString OAIAutoscaleSetting::getTargetResourceUri() const {
    return m_target_resource_uri;
}
void OAIAutoscaleSetting::setTargetResourceUri(const QString &target_resource_uri) {
    m_target_resource_uri = target_resource_uri;
    m_target_resource_uri_isSet = true;
}

bool OAIAutoscaleSetting::is_target_resource_uri_Set() const{
    return m_target_resource_uri_isSet;
}

bool OAIAutoscaleSetting::is_target_resource_uri_Valid() const{
    return m_target_resource_uri_isValid;
}

bool OAIAutoscaleSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoscaleSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_profiles_isValid && true;
}

} // namespace OpenAPI
