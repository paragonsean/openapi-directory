# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmailNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_emails: List[str]=None, send_to_subscription_administrator: bool=None, send_to_subscription_co_administrators: bool=None):
        """EmailNotification - a model defined in OpenAPI

        :param custom_emails: The custom_emails of this EmailNotification.
        :param send_to_subscription_administrator: The send_to_subscription_administrator of this EmailNotification.
        :param send_to_subscription_co_administrators: The send_to_subscription_co_administrators of this EmailNotification.
        """
        self.openapi_types = {
            'custom_emails': List[str],
            'send_to_subscription_administrator': bool,
            'send_to_subscription_co_administrators': bool
        }

        self.attribute_map = {
            'custom_emails': 'customEmails',
            'send_to_subscription_administrator': 'sendToSubscriptionAdministrator',
            'send_to_subscription_co_administrators': 'sendToSubscriptionCoAdministrators'
        }

        self._custom_emails = custom_emails
        self._send_to_subscription_administrator = send_to_subscription_administrator
        self._send_to_subscription_co_administrators = send_to_subscription_co_administrators

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailNotification of this EmailNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_emails(self):
        """Gets the custom_emails of this EmailNotification.

        the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.

        :return: The custom_emails of this EmailNotification.
        :rtype: List[str]
        """
        return self._custom_emails

    @custom_emails.setter
    def custom_emails(self, custom_emails):
        """Sets the custom_emails of this EmailNotification.

        the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.

        :param custom_emails: The custom_emails of this EmailNotification.
        :type custom_emails: List[str]
        """

        self._custom_emails = custom_emails

    @property
    def send_to_subscription_administrator(self):
        """Gets the send_to_subscription_administrator of this EmailNotification.

        a value indicating whether to send email to subscription administrator.

        :return: The send_to_subscription_administrator of this EmailNotification.
        :rtype: bool
        """
        return self._send_to_subscription_administrator

    @send_to_subscription_administrator.setter
    def send_to_subscription_administrator(self, send_to_subscription_administrator):
        """Sets the send_to_subscription_administrator of this EmailNotification.

        a value indicating whether to send email to subscription administrator.

        :param send_to_subscription_administrator: The send_to_subscription_administrator of this EmailNotification.
        :type send_to_subscription_administrator: bool
        """

        self._send_to_subscription_administrator = send_to_subscription_administrator

    @property
    def send_to_subscription_co_administrators(self):
        """Gets the send_to_subscription_co_administrators of this EmailNotification.

        a value indicating whether to send email to subscription co-administrators.

        :return: The send_to_subscription_co_administrators of this EmailNotification.
        :rtype: bool
        """
        return self._send_to_subscription_co_administrators

    @send_to_subscription_co_administrators.setter
    def send_to_subscription_co_administrators(self, send_to_subscription_co_administrators):
        """Sets the send_to_subscription_co_administrators of this EmailNotification.

        a value indicating whether to send email to subscription co-administrators.

        :param send_to_subscription_co_administrators: The send_to_subscription_co_administrators of this EmailNotification.
        :type send_to_subscription_co_administrators: bool
        """

        self._send_to_subscription_co_administrators = send_to_subscription_co_administrators
