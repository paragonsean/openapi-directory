# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScaleCapacity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default: str=None, maximum: str=None, minimum: str=None):
        """ScaleCapacity - a model defined in OpenAPI

        :param default: The default of this ScaleCapacity.
        :param maximum: The maximum of this ScaleCapacity.
        :param minimum: The minimum of this ScaleCapacity.
        """
        self.openapi_types = {
            'default': str,
            'maximum': str,
            'minimum': str
        }

        self.attribute_map = {
            'default': 'default',
            'maximum': 'maximum',
            'minimum': 'minimum'
        }

        self._default = default
        self._maximum = maximum
        self._minimum = minimum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScaleCapacity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScaleCapacity of this ScaleCapacity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default(self):
        """Gets the default of this ScaleCapacity.

        the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.

        :return: The default of this ScaleCapacity.
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ScaleCapacity.

        the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.

        :param default: The default of this ScaleCapacity.
        :type default: str
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")

        self._default = default

    @property
    def maximum(self):
        """Gets the maximum of this ScaleCapacity.

        the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.

        :return: The maximum of this ScaleCapacity.
        :rtype: str
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this ScaleCapacity.

        the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.

        :param maximum: The maximum of this ScaleCapacity.
        :type maximum: str
        """
        if maximum is None:
            raise ValueError("Invalid value for `maximum`, must not be `None`")

        self._maximum = maximum

    @property
    def minimum(self):
        """Gets the minimum of this ScaleCapacity.

        the minimum number of instances for the resource.

        :return: The minimum of this ScaleCapacity.
        :rtype: str
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this ScaleCapacity.

        the minimum number of instances for the resource.

        :param minimum: The minimum of this ScaleCapacity.
        :type minimum: str
        """
        if minimum is None:
            raise ValueError("Invalid value for `minimum`, must not be `None`")

        self._minimum = minimum
