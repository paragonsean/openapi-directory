# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.autoscale_notification import AutoscaleNotification
from openapi_server.models.autoscale_profile import AutoscaleProfile
from openapi_server import util


class AutoscaleSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=True, name: str=None, notifications: List[AutoscaleNotification]=None, profiles: List[AutoscaleProfile]=None, target_resource_uri: str=None):
        """AutoscaleSetting - a model defined in OpenAPI

        :param enabled: The enabled of this AutoscaleSetting.
        :param name: The name of this AutoscaleSetting.
        :param notifications: The notifications of this AutoscaleSetting.
        :param profiles: The profiles of this AutoscaleSetting.
        :param target_resource_uri: The target_resource_uri of this AutoscaleSetting.
        """
        self.openapi_types = {
            'enabled': bool,
            'name': str,
            'notifications': List[AutoscaleNotification],
            'profiles': List[AutoscaleProfile],
            'target_resource_uri': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'name': 'name',
            'notifications': 'notifications',
            'profiles': 'profiles',
            'target_resource_uri': 'targetResourceUri'
        }

        self._enabled = enabled
        self._name = name
        self._notifications = notifications
        self._profiles = profiles
        self._target_resource_uri = target_resource_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoscaleSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoscaleSetting of this AutoscaleSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this AutoscaleSetting.

        the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'true'.

        :return: The enabled of this AutoscaleSetting.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AutoscaleSetting.

        the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'true'.

        :param enabled: The enabled of this AutoscaleSetting.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this AutoscaleSetting.

        the name of the autoscale setting.

        :return: The name of this AutoscaleSetting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutoscaleSetting.

        the name of the autoscale setting.

        :param name: The name of this AutoscaleSetting.
        :type name: str
        """

        self._name = name

    @property
    def notifications(self):
        """Gets the notifications of this AutoscaleSetting.

        the collection of notifications.

        :return: The notifications of this AutoscaleSetting.
        :rtype: List[AutoscaleNotification]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this AutoscaleSetting.

        the collection of notifications.

        :param notifications: The notifications of this AutoscaleSetting.
        :type notifications: List[AutoscaleNotification]
        """

        self._notifications = notifications

    @property
    def profiles(self):
        """Gets the profiles of this AutoscaleSetting.

        the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.

        :return: The profiles of this AutoscaleSetting.
        :rtype: List[AutoscaleProfile]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this AutoscaleSetting.

        the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.

        :param profiles: The profiles of this AutoscaleSetting.
        :type profiles: List[AutoscaleProfile]
        """
        if profiles is None:
            raise ValueError("Invalid value for `profiles`, must not be `None`")
        if profiles is not None and len(profiles) > 20:
            raise ValueError("Invalid value for `profiles`, number of items must be less than or equal to `20`")

        self._profiles = profiles

    @property
    def target_resource_uri(self):
        """Gets the target_resource_uri of this AutoscaleSetting.

        the resource identifier of the resource that the autoscale setting should be added to.

        :return: The target_resource_uri of this AutoscaleSetting.
        :rtype: str
        """
        return self._target_resource_uri

    @target_resource_uri.setter
    def target_resource_uri(self, target_resource_uri):
        """Sets the target_resource_uri of this AutoscaleSetting.

        the resource identifier of the resource that the autoscale setting should be added to.

        :param target_resource_uri: The target_resource_uri of this AutoscaleSetting.
        :type target_resource_uri: str
        """

        self._target_resource_uri = target_resource_uri
