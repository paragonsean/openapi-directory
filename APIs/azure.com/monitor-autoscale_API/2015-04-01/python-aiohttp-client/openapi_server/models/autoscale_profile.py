# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recurrence import Recurrence
from openapi_server.models.scale_capacity import ScaleCapacity
from openapi_server.models.scale_rule import ScaleRule
from openapi_server.models.time_window import TimeWindow
from openapi_server import util


class AutoscaleProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: ScaleCapacity=None, fixed_date: TimeWindow=None, name: str=None, recurrence: Recurrence=None, rules: List[ScaleRule]=None):
        """AutoscaleProfile - a model defined in OpenAPI

        :param capacity: The capacity of this AutoscaleProfile.
        :param fixed_date: The fixed_date of this AutoscaleProfile.
        :param name: The name of this AutoscaleProfile.
        :param recurrence: The recurrence of this AutoscaleProfile.
        :param rules: The rules of this AutoscaleProfile.
        """
        self.openapi_types = {
            'capacity': ScaleCapacity,
            'fixed_date': TimeWindow,
            'name': str,
            'recurrence': Recurrence,
            'rules': List[ScaleRule]
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'fixed_date': 'fixedDate',
            'name': 'name',
            'recurrence': 'recurrence',
            'rules': 'rules'
        }

        self._capacity = capacity
        self._fixed_date = fixed_date
        self._name = name
        self._recurrence = recurrence
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoscaleProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoscaleProfile of this AutoscaleProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this AutoscaleProfile.


        :return: The capacity of this AutoscaleProfile.
        :rtype: ScaleCapacity
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this AutoscaleProfile.


        :param capacity: The capacity of this AutoscaleProfile.
        :type capacity: ScaleCapacity
        """
        if capacity is None:
            raise ValueError("Invalid value for `capacity`, must not be `None`")

        self._capacity = capacity

    @property
    def fixed_date(self):
        """Gets the fixed_date of this AutoscaleProfile.


        :return: The fixed_date of this AutoscaleProfile.
        :rtype: TimeWindow
        """
        return self._fixed_date

    @fixed_date.setter
    def fixed_date(self, fixed_date):
        """Sets the fixed_date of this AutoscaleProfile.


        :param fixed_date: The fixed_date of this AutoscaleProfile.
        :type fixed_date: TimeWindow
        """

        self._fixed_date = fixed_date

    @property
    def name(self):
        """Gets the name of this AutoscaleProfile.

        the name of the profile.

        :return: The name of this AutoscaleProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutoscaleProfile.

        the name of the profile.

        :param name: The name of this AutoscaleProfile.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def recurrence(self):
        """Gets the recurrence of this AutoscaleProfile.


        :return: The recurrence of this AutoscaleProfile.
        :rtype: Recurrence
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this AutoscaleProfile.


        :param recurrence: The recurrence of this AutoscaleProfile.
        :type recurrence: Recurrence
        """

        self._recurrence = recurrence

    @property
    def rules(self):
        """Gets the rules of this AutoscaleProfile.

        the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.

        :return: The rules of this AutoscaleProfile.
        :rtype: List[ScaleRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this AutoscaleProfile.

        the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.

        :param rules: The rules of this AutoscaleProfile.
        :type rules: List[ScaleRule]
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules
