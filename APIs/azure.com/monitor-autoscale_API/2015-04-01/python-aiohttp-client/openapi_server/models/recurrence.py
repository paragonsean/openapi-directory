# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recurrent_schedule import RecurrentSchedule
from openapi_server import util


class Recurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency: str=None, schedule: RecurrentSchedule=None):
        """Recurrence - a model defined in OpenAPI

        :param frequency: The frequency of this Recurrence.
        :param schedule: The schedule of this Recurrence.
        """
        self.openapi_types = {
            'frequency': str,
            'schedule': RecurrentSchedule
        }

        self.attribute_map = {
            'frequency': 'frequency',
            'schedule': 'schedule'
        }

        self._frequency = frequency
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recurrence of this Recurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency(self):
        """Gets the frequency of this Recurrence.

        the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.

        :return: The frequency of this Recurrence.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Recurrence.

        the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.

        :param frequency: The frequency of this Recurrence.
        :type frequency: str
        """
        allowed_values = ["None", "Second", "Minute", "Hour", "Day", "Week", "Month", "Year"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def schedule(self):
        """Gets the schedule of this Recurrence.


        :return: The schedule of this Recurrence.
        :rtype: RecurrentSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Recurrence.


        :param schedule: The schedule of this Recurrence.
        :type schedule: RecurrentSchedule
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule
