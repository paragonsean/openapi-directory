# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_trigger import MetricTrigger
from openapi_server.models.scale_action import ScaleAction
from openapi_server import util


class ScaleRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_trigger: MetricTrigger=None, scale_action: ScaleAction=None):
        """ScaleRule - a model defined in OpenAPI

        :param metric_trigger: The metric_trigger of this ScaleRule.
        :param scale_action: The scale_action of this ScaleRule.
        """
        self.openapi_types = {
            'metric_trigger': MetricTrigger,
            'scale_action': ScaleAction
        }

        self.attribute_map = {
            'metric_trigger': 'metricTrigger',
            'scale_action': 'scaleAction'
        }

        self._metric_trigger = metric_trigger
        self._scale_action = scale_action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScaleRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScaleRule of this ScaleRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_trigger(self):
        """Gets the metric_trigger of this ScaleRule.


        :return: The metric_trigger of this ScaleRule.
        :rtype: MetricTrigger
        """
        return self._metric_trigger

    @metric_trigger.setter
    def metric_trigger(self, metric_trigger):
        """Sets the metric_trigger of this ScaleRule.


        :param metric_trigger: The metric_trigger of this ScaleRule.
        :type metric_trigger: MetricTrigger
        """
        if metric_trigger is None:
            raise ValueError("Invalid value for `metric_trigger`, must not be `None`")

        self._metric_trigger = metric_trigger

    @property
    def scale_action(self):
        """Gets the scale_action of this ScaleRule.


        :return: The scale_action of this ScaleRule.
        :rtype: ScaleAction
        """
        return self._scale_action

    @scale_action.setter
    def scale_action(self, scale_action):
        """Sets the scale_action of this ScaleRule.


        :param scale_action: The scale_action of this ScaleRule.
        :type scale_action: ScaleAction
        """
        if scale_action is None:
            raise ValueError("Invalid value for `scale_action`, must not be `None`")

        self._scale_action = scale_action
