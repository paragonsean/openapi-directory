# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetricTrigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_name: str=None, metric_resource_uri: str=None, operator: str=None, statistic: str=None, threshold: float=None, time_aggregation: str=None, time_grain: str=None, time_window: str=None):
        """MetricTrigger - a model defined in OpenAPI

        :param metric_name: The metric_name of this MetricTrigger.
        :param metric_resource_uri: The metric_resource_uri of this MetricTrigger.
        :param operator: The operator of this MetricTrigger.
        :param statistic: The statistic of this MetricTrigger.
        :param threshold: The threshold of this MetricTrigger.
        :param time_aggregation: The time_aggregation of this MetricTrigger.
        :param time_grain: The time_grain of this MetricTrigger.
        :param time_window: The time_window of this MetricTrigger.
        """
        self.openapi_types = {
            'metric_name': str,
            'metric_resource_uri': str,
            'operator': str,
            'statistic': str,
            'threshold': float,
            'time_aggregation': str,
            'time_grain': str,
            'time_window': str
        }

        self.attribute_map = {
            'metric_name': 'metricName',
            'metric_resource_uri': 'metricResourceUri',
            'operator': 'operator',
            'statistic': 'statistic',
            'threshold': 'threshold',
            'time_aggregation': 'timeAggregation',
            'time_grain': 'timeGrain',
            'time_window': 'timeWindow'
        }

        self._metric_name = metric_name
        self._metric_resource_uri = metric_resource_uri
        self._operator = operator
        self._statistic = statistic
        self._threshold = threshold
        self._time_aggregation = time_aggregation
        self._time_grain = time_grain
        self._time_window = time_window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricTrigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricTrigger of this MetricTrigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_name(self):
        """Gets the metric_name of this MetricTrigger.

        the name of the metric that defines what the rule monitors.

        :return: The metric_name of this MetricTrigger.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this MetricTrigger.

        the name of the metric that defines what the rule monitors.

        :param metric_name: The metric_name of this MetricTrigger.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def metric_resource_uri(self):
        """Gets the metric_resource_uri of this MetricTrigger.

        the resource identifier of the resource the rule monitors.

        :return: The metric_resource_uri of this MetricTrigger.
        :rtype: str
        """
        return self._metric_resource_uri

    @metric_resource_uri.setter
    def metric_resource_uri(self, metric_resource_uri):
        """Sets the metric_resource_uri of this MetricTrigger.

        the resource identifier of the resource the rule monitors.

        :param metric_resource_uri: The metric_resource_uri of this MetricTrigger.
        :type metric_resource_uri: str
        """
        if metric_resource_uri is None:
            raise ValueError("Invalid value for `metric_resource_uri`, must not be `None`")

        self._metric_resource_uri = metric_resource_uri

    @property
    def operator(self):
        """Gets the operator of this MetricTrigger.

        the operator that is used to compare the metric data and the threshold.

        :return: The operator of this MetricTrigger.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this MetricTrigger.

        the operator that is used to compare the metric data and the threshold.

        :param operator: The operator of this MetricTrigger.
        :type operator: str
        """
        allowed_values = ["Equals", "NotEquals", "GreaterThan", "GreaterThanOrEqual", "LessThan", "LessThanOrEqual"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def statistic(self):
        """Gets the statistic of this MetricTrigger.

        the metric statistic type. How the metrics from multiple instances are combined.

        :return: The statistic of this MetricTrigger.
        :rtype: str
        """
        return self._statistic

    @statistic.setter
    def statistic(self, statistic):
        """Sets the statistic of this MetricTrigger.

        the metric statistic type. How the metrics from multiple instances are combined.

        :param statistic: The statistic of this MetricTrigger.
        :type statistic: str
        """
        allowed_values = ["Average", "Min", "Max", "Sum"]  # noqa: E501
        if statistic not in allowed_values:
            raise ValueError(
                "Invalid value for `statistic` ({0}), must be one of {1}"
                .format(statistic, allowed_values)
            )

        self._statistic = statistic

    @property
    def threshold(self):
        """Gets the threshold of this MetricTrigger.

        the threshold of the metric that triggers the scale action.

        :return: The threshold of this MetricTrigger.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this MetricTrigger.

        the threshold of the metric that triggers the scale action.

        :param threshold: The threshold of this MetricTrigger.
        :type threshold: float
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")

        self._threshold = threshold

    @property
    def time_aggregation(self):
        """Gets the time_aggregation of this MetricTrigger.

        time aggregation type. How the data that is collected should be combined over time. The default value is Average.

        :return: The time_aggregation of this MetricTrigger.
        :rtype: str
        """
        return self._time_aggregation

    @time_aggregation.setter
    def time_aggregation(self, time_aggregation):
        """Sets the time_aggregation of this MetricTrigger.

        time aggregation type. How the data that is collected should be combined over time. The default value is Average.

        :param time_aggregation: The time_aggregation of this MetricTrigger.
        :type time_aggregation: str
        """
        allowed_values = ["Average", "Minimum", "Maximum", "Total", "Count", "Last"]  # noqa: E501
        if time_aggregation not in allowed_values:
            raise ValueError(
                "Invalid value for `time_aggregation` ({0}), must be one of {1}"
                .format(time_aggregation, allowed_values)
            )

        self._time_aggregation = time_aggregation

    @property
    def time_grain(self):
        """Gets the time_grain of this MetricTrigger.

        the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.

        :return: The time_grain of this MetricTrigger.
        :rtype: str
        """
        return self._time_grain

    @time_grain.setter
    def time_grain(self, time_grain):
        """Sets the time_grain of this MetricTrigger.

        the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.

        :param time_grain: The time_grain of this MetricTrigger.
        :type time_grain: str
        """
        if time_grain is None:
            raise ValueError("Invalid value for `time_grain`, must not be `None`")

        self._time_grain = time_grain

    @property
    def time_window(self):
        """Gets the time_window of this MetricTrigger.

        the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.

        :return: The time_window of this MetricTrigger.
        :rtype: str
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this MetricTrigger.

        the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.

        :param time_window: The time_window of this MetricTrigger.
        :type time_window: str
        """
        if time_window is None:
            raise ValueError("Invalid value for `time_window`, must not be `None`")

        self._time_window = time_window
