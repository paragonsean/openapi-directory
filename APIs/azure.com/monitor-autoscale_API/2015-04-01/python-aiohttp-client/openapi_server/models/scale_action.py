# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScaleAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cooldown: str=None, direction: str=None, type: str=None, value: str='1'):
        """ScaleAction - a model defined in OpenAPI

        :param cooldown: The cooldown of this ScaleAction.
        :param direction: The direction of this ScaleAction.
        :param type: The type of this ScaleAction.
        :param value: The value of this ScaleAction.
        """
        self.openapi_types = {
            'cooldown': str,
            'direction': str,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'cooldown': 'cooldown',
            'direction': 'direction',
            'type': 'type',
            'value': 'value'
        }

        self._cooldown = cooldown
        self._direction = direction
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScaleAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScaleAction of this ScaleAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cooldown(self):
        """Gets the cooldown of this ScaleAction.

        the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.

        :return: The cooldown of this ScaleAction.
        :rtype: str
        """
        return self._cooldown

    @cooldown.setter
    def cooldown(self, cooldown):
        """Sets the cooldown of this ScaleAction.

        the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.

        :param cooldown: The cooldown of this ScaleAction.
        :type cooldown: str
        """
        if cooldown is None:
            raise ValueError("Invalid value for `cooldown`, must not be `None`")

        self._cooldown = cooldown

    @property
    def direction(self):
        """Gets the direction of this ScaleAction.

        the scale direction. Whether the scaling action increases or decreases the number of instances.

        :return: The direction of this ScaleAction.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ScaleAction.

        the scale direction. Whether the scaling action increases or decreases the number of instances.

        :param direction: The direction of this ScaleAction.
        :type direction: str
        """
        allowed_values = ["None", "Increase", "Decrease"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def type(self):
        """Gets the type of this ScaleAction.

        the type of action that should occur when the scale rule fires.

        :return: The type of this ScaleAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScaleAction.

        the type of action that should occur when the scale rule fires.

        :param type: The type of this ScaleAction.
        :type type: str
        """
        allowed_values = ["ChangeCount", "PercentChangeCount", "ExactCount"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this ScaleAction.

        the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.

        :return: The value of this ScaleAction.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ScaleAction.

        the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.

        :param value: The value of this ScaleAction.
        :type value: str
        """

        self._value = value
