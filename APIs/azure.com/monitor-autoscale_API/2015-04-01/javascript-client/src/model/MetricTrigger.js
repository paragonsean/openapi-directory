/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetricTrigger model module.
 * @module model/MetricTrigger
 * @version 2015-04-01
 */
class MetricTrigger {
    /**
     * Constructs a new <code>MetricTrigger</code>.
     * The trigger that results in a scaling action.
     * @alias module:model/MetricTrigger
     * @param metricName {String} the name of the metric that defines what the rule monitors.
     * @param metricResourceUri {String} the resource identifier of the resource the rule monitors.
     * @param operator {module:model/MetricTrigger.OperatorEnum} the operator that is used to compare the metric data and the threshold.
     * @param statistic {module:model/MetricTrigger.StatisticEnum} the metric statistic type. How the metrics from multiple instances are combined.
     * @param threshold {Number} the threshold of the metric that triggers the scale action.
     * @param timeAggregation {module:model/MetricTrigger.TimeAggregationEnum} time aggregation type. How the data that is collected should be combined over time. The default value is Average.
     * @param timeGrain {String} the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
     * @param timeWindow {String} the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
     */
    constructor(metricName, metricResourceUri, operator, statistic, threshold, timeAggregation, timeGrain, timeWindow) { 
        
        MetricTrigger.initialize(this, metricName, metricResourceUri, operator, statistic, threshold, timeAggregation, timeGrain, timeWindow);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metricName, metricResourceUri, operator, statistic, threshold, timeAggregation, timeGrain, timeWindow) { 
        obj['metricName'] = metricName;
        obj['metricResourceUri'] = metricResourceUri;
        obj['operator'] = operator;
        obj['statistic'] = statistic;
        obj['threshold'] = threshold;
        obj['timeAggregation'] = timeAggregation;
        obj['timeGrain'] = timeGrain;
        obj['timeWindow'] = timeWindow;
    }

    /**
     * Constructs a <code>MetricTrigger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricTrigger} obj Optional instance to populate.
     * @return {module:model/MetricTrigger} The populated <code>MetricTrigger</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricTrigger();

            if (data.hasOwnProperty('metricName')) {
                obj['metricName'] = ApiClient.convertToType(data['metricName'], 'String');
            }
            if (data.hasOwnProperty('metricResourceUri')) {
                obj['metricResourceUri'] = ApiClient.convertToType(data['metricResourceUri'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('statistic')) {
                obj['statistic'] = ApiClient.convertToType(data['statistic'], 'String');
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
            if (data.hasOwnProperty('timeAggregation')) {
                obj['timeAggregation'] = ApiClient.convertToType(data['timeAggregation'], 'String');
            }
            if (data.hasOwnProperty('timeGrain')) {
                obj['timeGrain'] = ApiClient.convertToType(data['timeGrain'], 'String');
            }
            if (data.hasOwnProperty('timeWindow')) {
                obj['timeWindow'] = ApiClient.convertToType(data['timeWindow'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricTrigger</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricTrigger</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetricTrigger.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['metricName'] && !(typeof data['metricName'] === 'string' || data['metricName'] instanceof String)) {
            throw new Error("Expected the field `metricName` to be a primitive type in the JSON string but got " + data['metricName']);
        }
        // ensure the json data is a string
        if (data['metricResourceUri'] && !(typeof data['metricResourceUri'] === 'string' || data['metricResourceUri'] instanceof String)) {
            throw new Error("Expected the field `metricResourceUri` to be a primitive type in the JSON string but got " + data['metricResourceUri']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['statistic'] && !(typeof data['statistic'] === 'string' || data['statistic'] instanceof String)) {
            throw new Error("Expected the field `statistic` to be a primitive type in the JSON string but got " + data['statistic']);
        }
        // ensure the json data is a string
        if (data['timeAggregation'] && !(typeof data['timeAggregation'] === 'string' || data['timeAggregation'] instanceof String)) {
            throw new Error("Expected the field `timeAggregation` to be a primitive type in the JSON string but got " + data['timeAggregation']);
        }
        // ensure the json data is a string
        if (data['timeGrain'] && !(typeof data['timeGrain'] === 'string' || data['timeGrain'] instanceof String)) {
            throw new Error("Expected the field `timeGrain` to be a primitive type in the JSON string but got " + data['timeGrain']);
        }
        // ensure the json data is a string
        if (data['timeWindow'] && !(typeof data['timeWindow'] === 'string' || data['timeWindow'] instanceof String)) {
            throw new Error("Expected the field `timeWindow` to be a primitive type in the JSON string but got " + data['timeWindow']);
        }

        return true;
    }


}

MetricTrigger.RequiredProperties = ["metricName", "metricResourceUri", "operator", "statistic", "threshold", "timeAggregation", "timeGrain", "timeWindow"];

/**
 * the name of the metric that defines what the rule monitors.
 * @member {String} metricName
 */
MetricTrigger.prototype['metricName'] = undefined;

/**
 * the resource identifier of the resource the rule monitors.
 * @member {String} metricResourceUri
 */
MetricTrigger.prototype['metricResourceUri'] = undefined;

/**
 * the operator that is used to compare the metric data and the threshold.
 * @member {module:model/MetricTrigger.OperatorEnum} operator
 */
MetricTrigger.prototype['operator'] = undefined;

/**
 * the metric statistic type. How the metrics from multiple instances are combined.
 * @member {module:model/MetricTrigger.StatisticEnum} statistic
 */
MetricTrigger.prototype['statistic'] = undefined;

/**
 * the threshold of the metric that triggers the scale action.
 * @member {Number} threshold
 */
MetricTrigger.prototype['threshold'] = undefined;

/**
 * time aggregation type. How the data that is collected should be combined over time. The default value is Average.
 * @member {module:model/MetricTrigger.TimeAggregationEnum} timeAggregation
 */
MetricTrigger.prototype['timeAggregation'] = undefined;

/**
 * the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
 * @member {String} timeGrain
 */
MetricTrigger.prototype['timeGrain'] = undefined;

/**
 * the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
 * @member {String} timeWindow
 */
MetricTrigger.prototype['timeWindow'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
MetricTrigger['OperatorEnum'] = {

    /**
     * value: "Equals"
     * @const
     */
    "Equals": "Equals",

    /**
     * value: "NotEquals"
     * @const
     */
    "NotEquals": "NotEquals",

    /**
     * value: "GreaterThan"
     * @const
     */
    "GreaterThan": "GreaterThan",

    /**
     * value: "GreaterThanOrEqual"
     * @const
     */
    "GreaterThanOrEqual": "GreaterThanOrEqual",

    /**
     * value: "LessThan"
     * @const
     */
    "LessThan": "LessThan",

    /**
     * value: "LessThanOrEqual"
     * @const
     */
    "LessThanOrEqual": "LessThanOrEqual"
};


/**
 * Allowed values for the <code>statistic</code> property.
 * @enum {String}
 * @readonly
 */
MetricTrigger['StatisticEnum'] = {

    /**
     * value: "Average"
     * @const
     */
    "Average": "Average",

    /**
     * value: "Min"
     * @const
     */
    "Min": "Min",

    /**
     * value: "Max"
     * @const
     */
    "Max": "Max",

    /**
     * value: "Sum"
     * @const
     */
    "Sum": "Sum"
};


/**
 * Allowed values for the <code>timeAggregation</code> property.
 * @enum {String}
 * @readonly
 */
MetricTrigger['TimeAggregationEnum'] = {

    /**
     * value: "Average"
     * @const
     */
    "Average": "Average",

    /**
     * value: "Minimum"
     * @const
     */
    "Minimum": "Minimum",

    /**
     * value: "Maximum"
     * @const
     */
    "Maximum": "Maximum",

    /**
     * value: "Total"
     * @const
     */
    "Total": "Total",

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count",

    /**
     * value: "Last"
     * @const
     */
    "Last": "Last"
};



export default MetricTrigger;

