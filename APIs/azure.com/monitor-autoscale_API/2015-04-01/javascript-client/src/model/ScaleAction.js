/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScaleAction model module.
 * @module model/ScaleAction
 * @version 2015-04-01
 */
class ScaleAction {
    /**
     * Constructs a new <code>ScaleAction</code>.
     * The parameters for the scaling action.
     * @alias module:model/ScaleAction
     * @param cooldown {String} the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.
     * @param direction {module:model/ScaleAction.DirectionEnum} the scale direction. Whether the scaling action increases or decreases the number of instances.
     * @param type {module:model/ScaleAction.TypeEnum} the type of action that should occur when the scale rule fires.
     */
    constructor(cooldown, direction, type) { 
        
        ScaleAction.initialize(this, cooldown, direction, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cooldown, direction, type) { 
        obj['cooldown'] = cooldown;
        obj['direction'] = direction;
        obj['type'] = type;
        obj['value'] = '1';
    }

    /**
     * Constructs a <code>ScaleAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScaleAction} obj Optional instance to populate.
     * @return {module:model/ScaleAction} The populated <code>ScaleAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScaleAction();

            if (data.hasOwnProperty('cooldown')) {
                obj['cooldown'] = ApiClient.convertToType(data['cooldown'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScaleAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScaleAction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ScaleAction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cooldown'] && !(typeof data['cooldown'] === 'string' || data['cooldown'] instanceof String)) {
            throw new Error("Expected the field `cooldown` to be a primitive type in the JSON string but got " + data['cooldown']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

ScaleAction.RequiredProperties = ["cooldown", "direction", "type"];

/**
 * the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.
 * @member {String} cooldown
 */
ScaleAction.prototype['cooldown'] = undefined;

/**
 * the scale direction. Whether the scaling action increases or decreases the number of instances.
 * @member {module:model/ScaleAction.DirectionEnum} direction
 */
ScaleAction.prototype['direction'] = undefined;

/**
 * the type of action that should occur when the scale rule fires.
 * @member {module:model/ScaleAction.TypeEnum} type
 */
ScaleAction.prototype['type'] = undefined;

/**
 * the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.
 * @member {String} value
 * @default '1'
 */
ScaleAction.prototype['value'] = '1';





/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
ScaleAction['DirectionEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Increase"
     * @const
     */
    "Increase": "Increase",

    /**
     * value: "Decrease"
     * @const
     */
    "Decrease": "Decrease"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ScaleAction['TypeEnum'] = {

    /**
     * value: "ChangeCount"
     * @const
     */
    "ChangeCount": "ChangeCount",

    /**
     * value: "PercentChangeCount"
     * @const
     */
    "PercentChangeCount": "PercentChangeCount",

    /**
     * value: "ExactCount"
     * @const
     */
    "ExactCount": "ExactCount"
};



export default ScaleAction;

