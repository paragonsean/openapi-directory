/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecurrentSchedule from './RecurrentSchedule';

/**
 * The Recurrence model module.
 * @module model/Recurrence
 * @version 2015-04-01
 */
class Recurrence {
    /**
     * Constructs a new <code>Recurrence</code>.
     * The repeating times at which this profile begins. This element is not used if the FixedDate element is used.
     * @alias module:model/Recurrence
     * @param frequency {module:model/Recurrence.FrequencyEnum} the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
     * @param schedule {module:model/RecurrentSchedule} 
     */
    constructor(frequency, schedule) { 
        
        Recurrence.initialize(this, frequency, schedule);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, frequency, schedule) { 
        obj['frequency'] = frequency;
        obj['schedule'] = schedule;
    }

    /**
     * Constructs a <code>Recurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Recurrence} obj Optional instance to populate.
     * @return {module:model/Recurrence} The populated <code>Recurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Recurrence();

            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = RecurrentSchedule.constructFromObject(data['schedule']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Recurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Recurrence</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Recurrence.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // validate the optional field `schedule`
        if (data['schedule']) { // data not null
          RecurrentSchedule.validateJSON(data['schedule']);
        }

        return true;
    }


}

Recurrence.RequiredProperties = ["frequency", "schedule"];

/**
 * the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
 * @member {module:model/Recurrence.FrequencyEnum} frequency
 */
Recurrence.prototype['frequency'] = undefined;

/**
 * @member {module:model/RecurrentSchedule} schedule
 */
Recurrence.prototype['schedule'] = undefined;





/**
 * Allowed values for the <code>frequency</code> property.
 * @enum {String}
 * @readonly
 */
Recurrence['FrequencyEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Second"
     * @const
     */
    "Second": "Second",

    /**
     * value: "Minute"
     * @const
     */
    "Minute": "Minute",

    /**
     * value: "Hour"
     * @const
     */
    "Hour": "Hour",

    /**
     * value: "Day"
     * @const
     */
    "Day": "Day",

    /**
     * value: "Week"
     * @const
     */
    "Week": "Week",

    /**
     * value: "Month"
     * @const
     */
    "Month": "Month",

    /**
     * value: "Year"
     * @const
     */
    "Year": "Year"
};



export default Recurrence;

