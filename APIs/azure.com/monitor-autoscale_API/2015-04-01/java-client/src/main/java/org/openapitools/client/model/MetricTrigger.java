/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The trigger that results in a scaling action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:06.694662-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricTrigger {
  public static final String SERIALIZED_NAME_METRIC_NAME = "metricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_METRIC_RESOURCE_URI = "metricResourceUri";
  @SerializedName(SERIALIZED_NAME_METRIC_RESOURCE_URI)
  private String metricResourceUri;

  /**
   * the operator that is used to compare the metric data and the threshold.
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    EQUALS("Equals"),
    
    NOT_EQUALS("NotEquals"),
    
    GREATER_THAN("GreaterThan"),
    
    GREATER_THAN_OR_EQUAL("GreaterThanOrEqual"),
    
    LESS_THAN("LessThan"),
    
    LESS_THAN_OR_EQUAL("LessThanOrEqual");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String value) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private OperatorEnum operator;

  /**
   * the metric statistic type. How the metrics from multiple instances are combined.
   */
  @JsonAdapter(StatisticEnum.Adapter.class)
  public enum StatisticEnum {
    AVERAGE("Average"),
    
    MIN("Min"),
    
    MAX("Max"),
    
    SUM("Sum");

    private String value;

    StatisticEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatisticEnum fromValue(String value) {
      for (StatisticEnum b : StatisticEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatisticEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatisticEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatisticEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatisticEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatisticEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATISTIC = "statistic";
  @SerializedName(SERIALIZED_NAME_STATISTIC)
  private StatisticEnum statistic;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private Double threshold;

  /**
   * time aggregation type. How the data that is collected should be combined over time. The default value is Average.
   */
  @JsonAdapter(TimeAggregationEnum.Adapter.class)
  public enum TimeAggregationEnum {
    AVERAGE("Average"),
    
    MINIMUM("Minimum"),
    
    MAXIMUM("Maximum"),
    
    TOTAL("Total"),
    
    COUNT("Count"),
    
    LAST("Last");

    private String value;

    TimeAggregationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeAggregationEnum fromValue(String value) {
      for (TimeAggregationEnum b : TimeAggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeAggregationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeAggregationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeAggregationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeAggregationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeAggregationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_AGGREGATION = "timeAggregation";
  @SerializedName(SERIALIZED_NAME_TIME_AGGREGATION)
  private TimeAggregationEnum timeAggregation;

  public static final String SERIALIZED_NAME_TIME_GRAIN = "timeGrain";
  @SerializedName(SERIALIZED_NAME_TIME_GRAIN)
  private String timeGrain;

  public static final String SERIALIZED_NAME_TIME_WINDOW = "timeWindow";
  @SerializedName(SERIALIZED_NAME_TIME_WINDOW)
  private String timeWindow;

  public MetricTrigger() {
  }

  public MetricTrigger metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * the name of the metric that defines what the rule monitors.
   * @return metricName
   */
  @javax.annotation.Nonnull
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public MetricTrigger metricResourceUri(String metricResourceUri) {
    this.metricResourceUri = metricResourceUri;
    return this;
  }

  /**
   * the resource identifier of the resource the rule monitors.
   * @return metricResourceUri
   */
  @javax.annotation.Nonnull
  public String getMetricResourceUri() {
    return metricResourceUri;
  }

  public void setMetricResourceUri(String metricResourceUri) {
    this.metricResourceUri = metricResourceUri;
  }


  public MetricTrigger operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

  /**
   * the operator that is used to compare the metric data and the threshold.
   * @return operator
   */
  @javax.annotation.Nonnull
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }


  public MetricTrigger statistic(StatisticEnum statistic) {
    this.statistic = statistic;
    return this;
  }

  /**
   * the metric statistic type. How the metrics from multiple instances are combined.
   * @return statistic
   */
  @javax.annotation.Nonnull
  public StatisticEnum getStatistic() {
    return statistic;
  }

  public void setStatistic(StatisticEnum statistic) {
    this.statistic = statistic;
  }


  public MetricTrigger threshold(Double threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * the threshold of the metric that triggers the scale action.
   * @return threshold
   */
  @javax.annotation.Nonnull
  public Double getThreshold() {
    return threshold;
  }

  public void setThreshold(Double threshold) {
    this.threshold = threshold;
  }


  public MetricTrigger timeAggregation(TimeAggregationEnum timeAggregation) {
    this.timeAggregation = timeAggregation;
    return this;
  }

  /**
   * time aggregation type. How the data that is collected should be combined over time. The default value is Average.
   * @return timeAggregation
   */
  @javax.annotation.Nonnull
  public TimeAggregationEnum getTimeAggregation() {
    return timeAggregation;
  }

  public void setTimeAggregation(TimeAggregationEnum timeAggregation) {
    this.timeAggregation = timeAggregation;
  }


  public MetricTrigger timeGrain(String timeGrain) {
    this.timeGrain = timeGrain;
    return this;
  }

  /**
   * the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
   * @return timeGrain
   */
  @javax.annotation.Nonnull
  public String getTimeGrain() {
    return timeGrain;
  }

  public void setTimeGrain(String timeGrain) {
    this.timeGrain = timeGrain;
  }


  public MetricTrigger timeWindow(String timeWindow) {
    this.timeWindow = timeWindow;
    return this;
  }

  /**
   * the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
   * @return timeWindow
   */
  @javax.annotation.Nonnull
  public String getTimeWindow() {
    return timeWindow;
  }

  public void setTimeWindow(String timeWindow) {
    this.timeWindow = timeWindow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricTrigger metricTrigger = (MetricTrigger) o;
    return Objects.equals(this.metricName, metricTrigger.metricName) &&
        Objects.equals(this.metricResourceUri, metricTrigger.metricResourceUri) &&
        Objects.equals(this.operator, metricTrigger.operator) &&
        Objects.equals(this.statistic, metricTrigger.statistic) &&
        Objects.equals(this.threshold, metricTrigger.threshold) &&
        Objects.equals(this.timeAggregation, metricTrigger.timeAggregation) &&
        Objects.equals(this.timeGrain, metricTrigger.timeGrain) &&
        Objects.equals(this.timeWindow, metricTrigger.timeWindow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricName, metricResourceUri, operator, statistic, threshold, timeAggregation, timeGrain, timeWindow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricTrigger {\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    metricResourceUri: ").append(toIndentedString(metricResourceUri)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    statistic: ").append(toIndentedString(statistic)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    timeAggregation: ").append(toIndentedString(timeAggregation)).append("\n");
    sb.append("    timeGrain: ").append(toIndentedString(timeGrain)).append("\n");
    sb.append("    timeWindow: ").append(toIndentedString(timeWindow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metricName");
    openapiFields.add("metricResourceUri");
    openapiFields.add("operator");
    openapiFields.add("statistic");
    openapiFields.add("threshold");
    openapiFields.add("timeAggregation");
    openapiFields.add("timeGrain");
    openapiFields.add("timeWindow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("metricName");
    openapiRequiredFields.add("metricResourceUri");
    openapiRequiredFields.add("operator");
    openapiRequiredFields.add("statistic");
    openapiRequiredFields.add("threshold");
    openapiRequiredFields.add("timeAggregation");
    openapiRequiredFields.add("timeGrain");
    openapiRequiredFields.add("timeWindow");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricTrigger
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricTrigger.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricTrigger is not found in the empty JSON string", MetricTrigger.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricTrigger.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricTrigger` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetricTrigger.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("metricName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricName").toString()));
      }
      if (!jsonObj.get("metricResourceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricResourceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricResourceUri").toString()));
      }
      if (!jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      // validate the required field `operator`
      OperatorEnum.validateJsonElement(jsonObj.get("operator"));
      if (!jsonObj.get("statistic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statistic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statistic").toString()));
      }
      // validate the required field `statistic`
      StatisticEnum.validateJsonElement(jsonObj.get("statistic"));
      if (!jsonObj.get("timeAggregation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeAggregation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeAggregation").toString()));
      }
      // validate the required field `timeAggregation`
      TimeAggregationEnum.validateJsonElement(jsonObj.get("timeAggregation"));
      if (!jsonObj.get("timeGrain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeGrain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeGrain").toString()));
      }
      if (!jsonObj.get("timeWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeWindow").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricTrigger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricTrigger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricTrigger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricTrigger.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricTrigger>() {
           @Override
           public void write(JsonWriter out, MetricTrigger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricTrigger read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricTrigger given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricTrigger
   * @throws IOException if the JSON string is invalid with respect to MetricTrigger
   */
  public static MetricTrigger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricTrigger.class);
  }

  /**
   * Convert an instance of MetricTrigger to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

