/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoscaleNotification;
import org.openapitools.client.model.AutoscaleProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A setting that contains all of the configuration for the automatic scaling of a resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:06.694662-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoscaleSetting {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<AutoscaleNotification> notifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFILES = "profiles";
  @SerializedName(SERIALIZED_NAME_PROFILES)
  private List<AutoscaleProfile> profiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_URI = "targetResourceUri";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_URI)
  private String targetResourceUri;

  public AutoscaleSetting() {
  }

  public AutoscaleSetting enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is &#39;true&#39;.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public AutoscaleSetting name(String name) {
    this.name = name;
    return this;
  }

  /**
   * the name of the autoscale setting.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AutoscaleSetting notifications(List<AutoscaleNotification> notifications) {
    this.notifications = notifications;
    return this;
  }

  public AutoscaleSetting addNotificationsItem(AutoscaleNotification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * the collection of notifications.
   * @return notifications
   */
  @javax.annotation.Nullable
  public List<AutoscaleNotification> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<AutoscaleNotification> notifications) {
    this.notifications = notifications;
  }


  public AutoscaleSetting profiles(List<AutoscaleProfile> profiles) {
    this.profiles = profiles;
    return this;
  }

  public AutoscaleSetting addProfilesItem(AutoscaleProfile profilesItem) {
    if (this.profiles == null) {
      this.profiles = new ArrayList<>();
    }
    this.profiles.add(profilesItem);
    return this;
  }

  /**
   * the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.
   * @return profiles
   */
  @javax.annotation.Nonnull
  public List<AutoscaleProfile> getProfiles() {
    return profiles;
  }

  public void setProfiles(List<AutoscaleProfile> profiles) {
    this.profiles = profiles;
  }


  public AutoscaleSetting targetResourceUri(String targetResourceUri) {
    this.targetResourceUri = targetResourceUri;
    return this;
  }

  /**
   * the resource identifier of the resource that the autoscale setting should be added to.
   * @return targetResourceUri
   */
  @javax.annotation.Nullable
  public String getTargetResourceUri() {
    return targetResourceUri;
  }

  public void setTargetResourceUri(String targetResourceUri) {
    this.targetResourceUri = targetResourceUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoscaleSetting autoscaleSetting = (AutoscaleSetting) o;
    return Objects.equals(this.enabled, autoscaleSetting.enabled) &&
        Objects.equals(this.name, autoscaleSetting.name) &&
        Objects.equals(this.notifications, autoscaleSetting.notifications) &&
        Objects.equals(this.profiles, autoscaleSetting.profiles) &&
        Objects.equals(this.targetResourceUri, autoscaleSetting.targetResourceUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, name, notifications, profiles, targetResourceUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoscaleSetting {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("    targetResourceUri: ").append(toIndentedString(targetResourceUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("name");
    openapiFields.add("notifications");
    openapiFields.add("profiles");
    openapiFields.add("targetResourceUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("profiles");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoscaleSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoscaleSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoscaleSetting is not found in the empty JSON string", AutoscaleSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoscaleSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoscaleSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutoscaleSetting.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
        if (jsonArraynotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
          }

          // validate the optional field `notifications` (array)
          for (int i = 0; i < jsonArraynotifications.size(); i++) {
            AutoscaleNotification.validateJsonElement(jsonArraynotifications.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("profiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `profiles` to be an array in the JSON string but got `%s`", jsonObj.get("profiles").toString()));
      }

      JsonArray jsonArrayprofiles = jsonObj.getAsJsonArray("profiles");
      // validate the required field `profiles` (array)
      for (int i = 0; i < jsonArrayprofiles.size(); i++) {
        AutoscaleProfile.validateJsonElement(jsonArrayprofiles.get(i));
      };
      if ((jsonObj.get("targetResourceUri") != null && !jsonObj.get("targetResourceUri").isJsonNull()) && !jsonObj.get("targetResourceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoscaleSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoscaleSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoscaleSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoscaleSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoscaleSetting>() {
           @Override
           public void write(JsonWriter out, AutoscaleSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoscaleSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoscaleSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoscaleSetting
   * @throws IOException if the JSON string is invalid with respect to AutoscaleSetting
   */
  public static AutoscaleSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoscaleSetting.class);
  }

  /**
   * Convert an instance of AutoscaleSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

