/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Email notification of an autoscale event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:06.694662-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EmailNotification {
  public static final String SERIALIZED_NAME_CUSTOM_EMAILS = "customEmails";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EMAILS)
  private List<String> customEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEND_TO_SUBSCRIPTION_ADMINISTRATOR = "sendToSubscriptionAdministrator";
  @SerializedName(SERIALIZED_NAME_SEND_TO_SUBSCRIPTION_ADMINISTRATOR)
  private Boolean sendToSubscriptionAdministrator;

  public static final String SERIALIZED_NAME_SEND_TO_SUBSCRIPTION_CO_ADMINISTRATORS = "sendToSubscriptionCoAdministrators";
  @SerializedName(SERIALIZED_NAME_SEND_TO_SUBSCRIPTION_CO_ADMINISTRATORS)
  private Boolean sendToSubscriptionCoAdministrators;

  public EmailNotification() {
  }

  public EmailNotification customEmails(List<String> customEmails) {
    this.customEmails = customEmails;
    return this;
  }

  public EmailNotification addCustomEmailsItem(String customEmailsItem) {
    if (this.customEmails == null) {
      this.customEmails = new ArrayList<>();
    }
    this.customEmails.add(customEmailsItem);
    return this;
  }

  /**
   * the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
   * @return customEmails
   */
  @javax.annotation.Nullable
  public List<String> getCustomEmails() {
    return customEmails;
  }

  public void setCustomEmails(List<String> customEmails) {
    this.customEmails = customEmails;
  }


  public EmailNotification sendToSubscriptionAdministrator(Boolean sendToSubscriptionAdministrator) {
    this.sendToSubscriptionAdministrator = sendToSubscriptionAdministrator;
    return this;
  }

  /**
   * a value indicating whether to send email to subscription administrator.
   * @return sendToSubscriptionAdministrator
   */
  @javax.annotation.Nullable
  public Boolean getSendToSubscriptionAdministrator() {
    return sendToSubscriptionAdministrator;
  }

  public void setSendToSubscriptionAdministrator(Boolean sendToSubscriptionAdministrator) {
    this.sendToSubscriptionAdministrator = sendToSubscriptionAdministrator;
  }


  public EmailNotification sendToSubscriptionCoAdministrators(Boolean sendToSubscriptionCoAdministrators) {
    this.sendToSubscriptionCoAdministrators = sendToSubscriptionCoAdministrators;
    return this;
  }

  /**
   * a value indicating whether to send email to subscription co-administrators.
   * @return sendToSubscriptionCoAdministrators
   */
  @javax.annotation.Nullable
  public Boolean getSendToSubscriptionCoAdministrators() {
    return sendToSubscriptionCoAdministrators;
  }

  public void setSendToSubscriptionCoAdministrators(Boolean sendToSubscriptionCoAdministrators) {
    this.sendToSubscriptionCoAdministrators = sendToSubscriptionCoAdministrators;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailNotification emailNotification = (EmailNotification) o;
    return Objects.equals(this.customEmails, emailNotification.customEmails) &&
        Objects.equals(this.sendToSubscriptionAdministrator, emailNotification.sendToSubscriptionAdministrator) &&
        Objects.equals(this.sendToSubscriptionCoAdministrators, emailNotification.sendToSubscriptionCoAdministrators);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customEmails, sendToSubscriptionAdministrator, sendToSubscriptionCoAdministrators);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailNotification {\n");
    sb.append("    customEmails: ").append(toIndentedString(customEmails)).append("\n");
    sb.append("    sendToSubscriptionAdministrator: ").append(toIndentedString(sendToSubscriptionAdministrator)).append("\n");
    sb.append("    sendToSubscriptionCoAdministrators: ").append(toIndentedString(sendToSubscriptionCoAdministrators)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customEmails");
    openapiFields.add("sendToSubscriptionAdministrator");
    openapiFields.add("sendToSubscriptionCoAdministrators");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmailNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmailNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailNotification is not found in the empty JSON string", EmailNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("customEmails") != null && !jsonObj.get("customEmails").isJsonNull() && !jsonObj.get("customEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customEmails` to be an array in the JSON string but got `%s`", jsonObj.get("customEmails").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailNotification>() {
           @Override
           public void write(JsonWriter out, EmailNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmailNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmailNotification
   * @throws IOException if the JSON string is invalid with respect to EmailNotification
   */
  public static EmailNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailNotification.class);
  }

  /**
   * Convert an instance of EmailNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

