/**
 * IotCentralClient
 * Use this API to manage IoT Central Applications in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-07-01-privatepreview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppsApi_H
#define OAI_OAIAppsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApp.h"
#include "OAIAppListResult.h"
#include "OAIAppNameAvailabilityInfo.h"
#include "OAIAppPatch.h"
#include "OAIErrorDetails.h"
#include "OAIOperationInputs.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppsApi : public QObject {
    Q_OBJECT

public:
    OAIAppsApi(const int timeOut = 0);
    ~OAIAppsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  operation_inputs OAIOperationInputs [required]
    */
    virtual void appsCheckNameAvailability(const QString &api_version, const QString &subscription_id, const OAIOperationInputs &operation_inputs);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  app OAIApp [required]
    */
    virtual void appsCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const OAIApp &app);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void appsDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void appsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void appsListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void appsListBySubscription(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  app_patch OAIAppPatch [required]
    */
    virtual void appsUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const OAIAppPatch &app_patch);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appsCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void appsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void appsDeleteCallback(OAIHttpRequestWorker *worker);
    void appsGetCallback(OAIHttpRequestWorker *worker);
    void appsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void appsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void appsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appsCheckNameAvailabilitySignal(OAIAppNameAvailabilityInfo summary);
    void appsCreateOrUpdateSignal(OAIApp summary);
    void appsDeleteSignal();
    void appsGetSignal(OAIApp summary);
    void appsListByResourceGroupSignal(OAIAppListResult summary);
    void appsListBySubscriptionSignal(OAIAppListResult summary);
    void appsUpdateSignal(OAIApp summary);


    void appsCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAIAppNameAvailabilityInfo summary);
    void appsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApp summary);
    void appsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appsGetSignalFull(OAIHttpRequestWorker *worker, OAIApp summary);
    void appsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAppListResult summary);
    void appsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIAppListResult summary);
    void appsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApp summary);

    Q_DECL_DEPRECATED_X("Use appsCheckNameAvailabilitySignalError() instead")
    void appsCheckNameAvailabilitySignalE(OAIAppNameAvailabilityInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsCheckNameAvailabilitySignalError(OAIAppNameAvailabilityInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsCreateOrUpdateSignalError() instead")
    void appsCreateOrUpdateSignalE(OAIApp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsCreateOrUpdateSignalError(OAIApp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsDeleteSignalError() instead")
    void appsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetSignalError() instead")
    void appsGetSignalE(OAIApp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetSignalError(OAIApp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListByResourceGroupSignalError() instead")
    void appsListByResourceGroupSignalE(OAIAppListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListByResourceGroupSignalError(OAIAppListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListBySubscriptionSignalError() instead")
    void appsListBySubscriptionSignalE(OAIAppListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListBySubscriptionSignalError(OAIAppListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateSignalError() instead")
    void appsUpdateSignalE(OAIApp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateSignalError(OAIApp summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appsCheckNameAvailabilitySignalErrorFull() instead")
    void appsCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsCreateOrUpdateSignalErrorFull() instead")
    void appsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsDeleteSignalErrorFull() instead")
    void appsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetSignalErrorFull() instead")
    void appsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListByResourceGroupSignalErrorFull() instead")
    void appsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListBySubscriptionSignalErrorFull() instead")
    void appsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateSignalErrorFull() instead")
    void appsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
