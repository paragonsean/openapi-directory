/**
 * IotCentralClient
 * Use this API to manage IoT Central Applications in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-07-01-privatepreview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppProperties::OAIAppProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppProperties::OAIAppProperties() {
    this->initializeModel();
}

OAIAppProperties::~OAIAppProperties() {}

void OAIAppProperties::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_subdomain_isSet = false;
    m_subdomain_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;
}

void OAIAppProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppProperties::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_subdomain_isValid = ::OpenAPI::fromJsonValue(m_subdomain, json[QString("subdomain")]);
    m_subdomain_isSet = !json[QString("subdomain")].isNull() && m_subdomain_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;
}

QString OAIAppProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_subdomain_isSet) {
        obj.insert(QString("subdomain"), ::OpenAPI::toJsonValue(m_subdomain));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    return obj;
}

QString OAIAppProperties::getApplicationId() const {
    return m_application_id;
}
void OAIAppProperties::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIAppProperties::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIAppProperties::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIAppProperties::getDisplayName() const {
    return m_display_name;
}
void OAIAppProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAppProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAppProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAppProperties::getSubdomain() const {
    return m_subdomain;
}
void OAIAppProperties::setSubdomain(const QString &subdomain) {
    m_subdomain = subdomain;
    m_subdomain_isSet = true;
}

bool OAIAppProperties::is_subdomain_Set() const{
    return m_subdomain_isSet;
}

bool OAIAppProperties::is_subdomain_Valid() const{
    return m_subdomain_isValid;
}

QString OAIAppProperties::getRTemplate() const {
    return m_r_template;
}
void OAIAppProperties::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIAppProperties::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIAppProperties::is_r_template_Valid() const{
    return m_r_template_isValid;
}

bool OAIAppProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdomain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
