/**
 * IotCentralClient
 * Use this API to manage IoT Central Applications in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppTemplate model module.
 * @module model/AppTemplate
 * @version 2018-09-01
 */
class AppTemplate {
    /**
     * Constructs a new <code>AppTemplate</code>.
     * IoT Central Application Template.
     * @alias module:model/AppTemplate
     */
    constructor() { 
        
        AppTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppTemplate} obj Optional instance to populate.
     * @return {module:model/AppTemplate} The populated <code>AppTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppTemplate();

            if (data.hasOwnProperty('appTemplateName')) {
                obj['appTemplateName'] = ApiClient.convertToType(data['appTemplateName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('manifestId')) {
                obj['manifestId'] = ApiClient.convertToType(data['manifestId'], 'String');
            }
            if (data.hasOwnProperty('manifestVersion')) {
                obj['manifestVersion'] = ApiClient.convertToType(data['manifestVersion'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appTemplateName'] && !(typeof data['appTemplateName'] === 'string' || data['appTemplateName'] instanceof String)) {
            throw new Error("Expected the field `appTemplateName` to be a primitive type in the JSON string but got " + data['appTemplateName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['manifestId'] && !(typeof data['manifestId'] === 'string' || data['manifestId'] instanceof String)) {
            throw new Error("Expected the field `manifestId` to be a primitive type in the JSON string but got " + data['manifestId']);
        }
        // ensure the json data is a string
        if (data['manifestVersion'] && !(typeof data['manifestVersion'] === 'string' || data['manifestVersion'] instanceof String)) {
            throw new Error("Expected the field `manifestVersion` to be a primitive type in the JSON string but got " + data['manifestVersion']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The name of the template.
 * @member {String} appTemplateName
 */
AppTemplate.prototype['appTemplateName'] = undefined;

/**
 * The description of the template.
 * @member {String} description
 */
AppTemplate.prototype['description'] = undefined;

/**
 * The ID of the template.
 * @member {String} manifestId
 */
AppTemplate.prototype['manifestId'] = undefined;

/**
 * The version of the template.
 * @member {String} manifestVersion
 */
AppTemplate.prototype['manifestVersion'] = undefined;

/**
 * The order of the template in the templates list.
 * @member {Number} order
 */
AppTemplate.prototype['order'] = undefined;

/**
 * The title of the template.
 * @member {String} title
 */
AppTemplate.prototype['title'] = undefined;






export default AppTemplate;

