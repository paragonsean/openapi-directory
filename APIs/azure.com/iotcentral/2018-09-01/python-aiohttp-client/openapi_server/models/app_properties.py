# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AppProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, display_name: str=None, subdomain: str=None, template: str=None):
        """AppProperties - a model defined in OpenAPI

        :param application_id: The application_id of this AppProperties.
        :param display_name: The display_name of this AppProperties.
        :param subdomain: The subdomain of this AppProperties.
        :param template: The template of this AppProperties.
        """
        self.openapi_types = {
            'application_id': str,
            'display_name': str,
            'subdomain': str,
            'template': str
        }

        self.attribute_map = {
            'application_id': 'applicationId',
            'display_name': 'displayName',
            'subdomain': 'subdomain',
            'template': 'template'
        }

        self._application_id = application_id
        self._display_name = display_name
        self._subdomain = subdomain
        self._template = template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppProperties of this AppProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this AppProperties.

        The ID of the application.

        :return: The application_id of this AppProperties.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this AppProperties.

        The ID of the application.

        :param application_id: The application_id of this AppProperties.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def display_name(self):
        """Gets the display_name of this AppProperties.

        The display name of the application.

        :return: The display_name of this AppProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AppProperties.

        The display name of the application.

        :param display_name: The display_name of this AppProperties.
        :type display_name: str
        """
        if display_name is not None and not re.search(r'^.{1,200}$', display_name):
            raise ValueError("Invalid value for `display_name`, must be a follow pattern or equal to `/^.{1,200}$/`")

        self._display_name = display_name

    @property
    def subdomain(self):
        """Gets the subdomain of this AppProperties.

        The subdomain of the application.

        :return: The subdomain of this AppProperties.
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this AppProperties.

        The subdomain of the application.

        :param subdomain: The subdomain of this AppProperties.
        :type subdomain: str
        """
        if subdomain is not None and not re.search(r'^[a-z0-9-]{1,63}$', subdomain):
            raise ValueError("Invalid value for `subdomain`, must be a follow pattern or equal to `/^[a-z0-9-]{1,63}$/`")

        self._subdomain = subdomain

    @property
    def template(self):
        """Gets the template of this AppProperties.

        The ID of the application template, which is a blueprint that defines the characteristics and behaviors of an application. Optional; if not specified, defaults to a blank blueprint and allows the application to be defined from scratch.

        :return: The template of this AppProperties.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this AppProperties.

        The ID of the application template, which is a blueprint that defines the characteristics and behaviors of an application. Optional; if not specified, defaults to a blank blueprint and allows the application to be defined from scratch.

        :param template: The template of this AppProperties.
        :type template: str
        """

        self._template = template
