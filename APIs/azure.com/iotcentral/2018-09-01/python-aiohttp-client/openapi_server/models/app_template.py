# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_template_name: str=None, description: str=None, manifest_id: str=None, manifest_version: str=None, order: float=None, title: str=None):
        """AppTemplate - a model defined in OpenAPI

        :param app_template_name: The app_template_name of this AppTemplate.
        :param description: The description of this AppTemplate.
        :param manifest_id: The manifest_id of this AppTemplate.
        :param manifest_version: The manifest_version of this AppTemplate.
        :param order: The order of this AppTemplate.
        :param title: The title of this AppTemplate.
        """
        self.openapi_types = {
            'app_template_name': str,
            'description': str,
            'manifest_id': str,
            'manifest_version': str,
            'order': float,
            'title': str
        }

        self.attribute_map = {
            'app_template_name': 'appTemplateName',
            'description': 'description',
            'manifest_id': 'manifestId',
            'manifest_version': 'manifestVersion',
            'order': 'order',
            'title': 'title'
        }

        self._app_template_name = app_template_name
        self._description = description
        self._manifest_id = manifest_id
        self._manifest_version = manifest_version
        self._order = order
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppTemplate of this AppTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_template_name(self):
        """Gets the app_template_name of this AppTemplate.

        The name of the template.

        :return: The app_template_name of this AppTemplate.
        :rtype: str
        """
        return self._app_template_name

    @app_template_name.setter
    def app_template_name(self, app_template_name):
        """Sets the app_template_name of this AppTemplate.

        The name of the template.

        :param app_template_name: The app_template_name of this AppTemplate.
        :type app_template_name: str
        """

        self._app_template_name = app_template_name

    @property
    def description(self):
        """Gets the description of this AppTemplate.

        The description of the template.

        :return: The description of this AppTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppTemplate.

        The description of the template.

        :param description: The description of this AppTemplate.
        :type description: str
        """

        self._description = description

    @property
    def manifest_id(self):
        """Gets the manifest_id of this AppTemplate.

        The ID of the template.

        :return: The manifest_id of this AppTemplate.
        :rtype: str
        """
        return self._manifest_id

    @manifest_id.setter
    def manifest_id(self, manifest_id):
        """Sets the manifest_id of this AppTemplate.

        The ID of the template.

        :param manifest_id: The manifest_id of this AppTemplate.
        :type manifest_id: str
        """

        self._manifest_id = manifest_id

    @property
    def manifest_version(self):
        """Gets the manifest_version of this AppTemplate.

        The version of the template.

        :return: The manifest_version of this AppTemplate.
        :rtype: str
        """
        return self._manifest_version

    @manifest_version.setter
    def manifest_version(self, manifest_version):
        """Sets the manifest_version of this AppTemplate.

        The version of the template.

        :param manifest_version: The manifest_version of this AppTemplate.
        :type manifest_version: str
        """

        self._manifest_version = manifest_version

    @property
    def order(self):
        """Gets the order of this AppTemplate.

        The order of the template in the templates list.

        :return: The order of this AppTemplate.
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this AppTemplate.

        The order of the template in the templates list.

        :param order: The order of this AppTemplate.
        :type order: float
        """

        self._order = order

    @property
    def title(self):
        """Gets the title of this AppTemplate.

        The title of the template.

        :return: The title of this AppTemplate.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AppTemplate.

        The title of the template.

        :param title: The title of this AppTemplate.
        :type title: str
        """

        self._title = title
