/**
 * IotCentralClient
 * Use this API to manage IoT Central Applications in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppTemplate::OAIAppTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppTemplate::OAIAppTemplate() {
    this->initializeModel();
}

OAIAppTemplate::~OAIAppTemplate() {}

void OAIAppTemplate::initializeModel() {

    m_app_template_name_isSet = false;
    m_app_template_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_manifest_id_isSet = false;
    m_manifest_id_isValid = false;

    m_manifest_version_isSet = false;
    m_manifest_version_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAppTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppTemplate::fromJsonObject(QJsonObject json) {

    m_app_template_name_isValid = ::OpenAPI::fromJsonValue(m_app_template_name, json[QString("appTemplateName")]);
    m_app_template_name_isSet = !json[QString("appTemplateName")].isNull() && m_app_template_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_manifest_id_isValid = ::OpenAPI::fromJsonValue(m_manifest_id, json[QString("manifestId")]);
    m_manifest_id_isSet = !json[QString("manifestId")].isNull() && m_manifest_id_isValid;

    m_manifest_version_isValid = ::OpenAPI::fromJsonValue(m_manifest_version, json[QString("manifestVersion")]);
    m_manifest_version_isSet = !json[QString("manifestVersion")].isNull() && m_manifest_version_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAppTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_app_template_name_isSet) {
        obj.insert(QString("appTemplateName"), ::OpenAPI::toJsonValue(m_app_template_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_manifest_id_isSet) {
        obj.insert(QString("manifestId"), ::OpenAPI::toJsonValue(m_manifest_id));
    }
    if (m_manifest_version_isSet) {
        obj.insert(QString("manifestVersion"), ::OpenAPI::toJsonValue(m_manifest_version));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIAppTemplate::getAppTemplateName() const {
    return m_app_template_name;
}
void OAIAppTemplate::setAppTemplateName(const QString &app_template_name) {
    m_app_template_name = app_template_name;
    m_app_template_name_isSet = true;
}

bool OAIAppTemplate::is_app_template_name_Set() const{
    return m_app_template_name_isSet;
}

bool OAIAppTemplate::is_app_template_name_Valid() const{
    return m_app_template_name_isValid;
}

QString OAIAppTemplate::getDescription() const {
    return m_description;
}
void OAIAppTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAppTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAppTemplate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAppTemplate::getManifestId() const {
    return m_manifest_id;
}
void OAIAppTemplate::setManifestId(const QString &manifest_id) {
    m_manifest_id = manifest_id;
    m_manifest_id_isSet = true;
}

bool OAIAppTemplate::is_manifest_id_Set() const{
    return m_manifest_id_isSet;
}

bool OAIAppTemplate::is_manifest_id_Valid() const{
    return m_manifest_id_isValid;
}

QString OAIAppTemplate::getManifestVersion() const {
    return m_manifest_version;
}
void OAIAppTemplate::setManifestVersion(const QString &manifest_version) {
    m_manifest_version = manifest_version;
    m_manifest_version_isSet = true;
}

bool OAIAppTemplate::is_manifest_version_Set() const{
    return m_manifest_version_isSet;
}

bool OAIAppTemplate::is_manifest_version_Valid() const{
    return m_manifest_version_isValid;
}

double OAIAppTemplate::getOrder() const {
    return m_order;
}
void OAIAppTemplate::setOrder(const double &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIAppTemplate::is_order_Set() const{
    return m_order_isSet;
}

bool OAIAppTemplate::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIAppTemplate::getTitle() const {
    return m_title;
}
void OAIAppTemplate::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAppTemplate::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAppTemplate::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAppTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
