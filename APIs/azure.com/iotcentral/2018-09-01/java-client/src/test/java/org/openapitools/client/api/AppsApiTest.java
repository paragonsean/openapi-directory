/*
 * IotCentralClient
 * Use this API to manage IoT Central Applications in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.App;
import org.openapitools.client.model.AppAvailabilityInfo;
import org.openapitools.client.model.AppListResult;
import org.openapitools.client.model.AppPatch;
import org.openapitools.client.model.AppTemplatesResult;
import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.OperationInputs;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppsApi
 */
@Disabled
public class AppsApiTest {

    private final AppsApi api = new AppsApi();

    /**
     * Check if an IoT Central application name is available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsCheckNameAvailabilityTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        OperationInputs operationInputs = null;
        AppAvailabilityInfo response = api.appsCheckNameAvailability(apiVersion, subscriptionId, operationInputs);
        // TODO: test validations
    }

    /**
     * Check if an IoT Central application subdomain is available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsCheckSubdomainAvailabilityTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        OperationInputs operationInputs = null;
        AppAvailabilityInfo response = api.appsCheckSubdomainAvailability(apiVersion, subscriptionId, operationInputs);
        // TODO: test validations
    }

    /**
     * Create or update the metadata of an IoT Central application. The usual pattern to modify a property is to retrieve the IoT Central application metadata and security metadata, and then combine them with the modified values in a new body to update the IoT Central application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsCreateOrUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        App app = null;
        App response = api.appsCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, resourceName, app);
        // TODO: test validations
    }

    /**
     * Delete an IoT Central application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsDeleteTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        api.appsDelete(apiVersion, subscriptionId, resourceGroupName, resourceName);
        // TODO: test validations
    }

    /**
     * Get the metadata of an IoT Central application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        App response = api.appsGet(apiVersion, subscriptionId, resourceGroupName, resourceName);
        // TODO: test validations
    }

    /**
     * Get all the IoT Central Applications in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListByResourceGroupTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        AppListResult response = api.appsListByResourceGroup(apiVersion, subscriptionId, resourceGroupName);
        // TODO: test validations
    }

    /**
     * Get all IoT Central Applications in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListBySubscriptionTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        AppListResult response = api.appsListBySubscription(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Get all available application templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListTemplatesTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        AppTemplatesResult response = api.appsListTemplates(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Update the metadata of an IoT Central application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        AppPatch appPatch = null;
        App response = api.appsUpdate(apiVersion, subscriptionId, resourceGroupName, resourceName, appPatch);
        // TODO: test validations
    }

}
