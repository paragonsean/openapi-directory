/*
 * IotCentralClient
 * Use this API to manage IoT Central Applications in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoT Central Application Template.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:45.866006-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppTemplate {
  public static final String SERIALIZED_NAME_APP_TEMPLATE_NAME = "appTemplateName";
  @SerializedName(SERIALIZED_NAME_APP_TEMPLATE_NAME)
  private String appTemplateName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MANIFEST_ID = "manifestId";
  @SerializedName(SERIALIZED_NAME_MANIFEST_ID)
  private String manifestId;

  public static final String SERIALIZED_NAME_MANIFEST_VERSION = "manifestVersion";
  @SerializedName(SERIALIZED_NAME_MANIFEST_VERSION)
  private String manifestVersion;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private BigDecimal order;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public AppTemplate() {
  }

  public AppTemplate(
     String appTemplateName, 
     String description, 
     String manifestId, 
     String manifestVersion, 
     BigDecimal order, 
     String title
  ) {
    this();
    this.appTemplateName = appTemplateName;
    this.description = description;
    this.manifestId = manifestId;
    this.manifestVersion = manifestVersion;
    this.order = order;
    this.title = title;
  }

  /**
   * The name of the template.
   * @return appTemplateName
   */
  @javax.annotation.Nullable
  public String getAppTemplateName() {
    return appTemplateName;
  }



  /**
   * The description of the template.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * The ID of the template.
   * @return manifestId
   */
  @javax.annotation.Nullable
  public String getManifestId() {
    return manifestId;
  }



  /**
   * The version of the template.
   * @return manifestVersion
   */
  @javax.annotation.Nullable
  public String getManifestVersion() {
    return manifestVersion;
  }



  /**
   * The order of the template in the templates list.
   * @return order
   */
  @javax.annotation.Nullable
  public BigDecimal getOrder() {
    return order;
  }



  /**
   * The title of the template.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppTemplate appTemplate = (AppTemplate) o;
    return Objects.equals(this.appTemplateName, appTemplate.appTemplateName) &&
        Objects.equals(this.description, appTemplate.description) &&
        Objects.equals(this.manifestId, appTemplate.manifestId) &&
        Objects.equals(this.manifestVersion, appTemplate.manifestVersion) &&
        Objects.equals(this.order, appTemplate.order) &&
        Objects.equals(this.title, appTemplate.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appTemplateName, description, manifestId, manifestVersion, order, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppTemplate {\n");
    sb.append("    appTemplateName: ").append(toIndentedString(appTemplateName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    manifestId: ").append(toIndentedString(manifestId)).append("\n");
    sb.append("    manifestVersion: ").append(toIndentedString(manifestVersion)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appTemplateName");
    openapiFields.add("description");
    openapiFields.add("manifestId");
    openapiFields.add("manifestVersion");
    openapiFields.add("order");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppTemplate is not found in the empty JSON string", AppTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appTemplateName") != null && !jsonObj.get("appTemplateName").isJsonNull()) && !jsonObj.get("appTemplateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appTemplateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appTemplateName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("manifestId") != null && !jsonObj.get("manifestId").isJsonNull()) && !jsonObj.get("manifestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifestId").toString()));
      }
      if ((jsonObj.get("manifestVersion") != null && !jsonObj.get("manifestVersion").isJsonNull()) && !jsonObj.get("manifestVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifestVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifestVersion").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<AppTemplate>() {
           @Override
           public void write(JsonWriter out, AppTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppTemplate
   * @throws IOException if the JSON string is invalid with respect to AppTemplate
   */
  public static AppTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppTemplate.class);
  }

  /**
   * Convert an instance of AppTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

