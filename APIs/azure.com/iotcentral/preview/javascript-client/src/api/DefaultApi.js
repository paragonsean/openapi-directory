/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiToken from '../model/ApiToken';
import ApiTokenCollection from '../model/ApiTokenCollection';
import ContinuousDataExport from '../model/ContinuousDataExport';
import ContinuousDataExportCollection from '../model/ContinuousDataExportCollection';
import Device from '../model/Device';
import DeviceCollection from '../model/DeviceCollection';
import DeviceCommand from '../model/DeviceCommand';
import DeviceCommandCollection from '../model/DeviceCommandCollection';
import DeviceCredentials from '../model/DeviceCredentials';
import DeviceTemplate from '../model/DeviceTemplate';
import DeviceTemplateCollection from '../model/DeviceTemplateCollection';
import Role from '../model/Role';
import RoleCollection from '../model/RoleCollection';
import Value from '../model/Value';

/**
* Default service.
* @module api/DefaultApi
* @version preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTokensGet operation.
     * @callback module:api/DefaultApi~apiTokensGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an API token by ID.
     * @param {String} tokenId Unique ID for the API token.
     * @param {module:api/DefaultApi~apiTokensGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiToken}
     */
    apiTokensGet(tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling apiTokensGet");
      }

      let pathParams = {
        'token_id': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiToken;
      return this.apiClient.callApi(
        '/apiTokens/{token_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTokensList operation.
     * @callback module:api/DefaultApi~apiTokensListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiTokenCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of API tokens in an application.
     * @param {module:api/DefaultApi~apiTokensListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiTokenCollection}
     */
    apiTokensList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiTokenCollection;
      return this.apiClient.callApi(
        '/apiTokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTokensRemove operation.
     * @callback module:api/DefaultApi~apiTokensRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an API token.
     * @param {String} tokenId Unique ID for the API token.
     * @param {module:api/DefaultApi~apiTokensRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTokensRemove(tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling apiTokensRemove");
      }

      let pathParams = {
        'token_id': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apiTokens/{token_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTokensSet operation.
     * @callback module:api/DefaultApi~apiTokensSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new API token in the application.
     * @param {String} tokenId Unique ID for the API token.
     * @param {module:model/ApiToken} body API token body.
     * @param {module:api/DefaultApi~apiTokensSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiToken}
     */
    apiTokensSet(tokenId, body, callback) {
      let postBody = body;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling apiTokensSet");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiTokensSet");
      }

      let pathParams = {
        'token_id': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiToken;
      return this.apiClient.callApi(
        '/apiTokens/{token_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the continuousDataExportsGet operation.
     * @callback module:api/DefaultApi~continuousDataExportsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousDataExport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a continuous data export by ID.
     * @param {String} exportId Unique ID for the continuous data export.
     * @param {module:api/DefaultApi~continuousDataExportsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousDataExport}
     */
    continuousDataExportsGet(exportId, callback) {
      let postBody = null;
      // verify the required parameter 'exportId' is set
      if (exportId === undefined || exportId === null) {
        throw new Error("Missing the required parameter 'exportId' when calling continuousDataExportsGet");
      }

      let pathParams = {
        'export_id': exportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousDataExport;
      return this.apiClient.callApi(
        '/continuousDataExports/{export_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the continuousDataExportsList operation.
     * @callback module:api/DefaultApi~continuousDataExportsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousDataExportCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of continuous data exports in an application.
     * @param {module:api/DefaultApi~continuousDataExportsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousDataExportCollection}
     */
    continuousDataExportsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousDataExportCollection;
      return this.apiClient.callApi(
        '/continuousDataExports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the continuousDataExportsRemove operation.
     * @callback module:api/DefaultApi~continuousDataExportsRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a continuous data export.
     * @param {String} exportId Unique ID for the continuous data export.
     * @param {module:api/DefaultApi~continuousDataExportsRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    continuousDataExportsRemove(exportId, callback) {
      let postBody = null;
      // verify the required parameter 'exportId' is set
      if (exportId === undefined || exportId === null) {
        throw new Error("Missing the required parameter 'exportId' when calling continuousDataExportsRemove");
      }

      let pathParams = {
        'export_id': exportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/continuousDataExports/{export_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the continuousDataExportsSet operation.
     * @callback module:api/DefaultApi~continuousDataExportsSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousDataExport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new continuous data export or update an existing one by ID.
     * @param {String} exportId Unique ID for the continuous data export.
     * @param {module:model/ContinuousDataExport} body Data export body.
     * @param {module:api/DefaultApi~continuousDataExportsSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousDataExport}
     */
    continuousDataExportsSet(exportId, body, callback) {
      let postBody = body;
      // verify the required parameter 'exportId' is set
      if (exportId === undefined || exportId === null) {
        throw new Error("Missing the required parameter 'exportId' when calling continuousDataExportsSet");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling continuousDataExportsSet");
      }

      let pathParams = {
        'export_id': exportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContinuousDataExport;
      return this.apiClient.callApi(
        '/continuousDataExports/{export_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTemplatesGet operation.
     * @callback module:api/DefaultApi~deviceTemplatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a device template by ID
     * @param {String} deviceTemplateId Unique ID of the device template.
     * @param {module:api/DefaultApi~deviceTemplatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceTemplate}
     */
    deviceTemplatesGet(deviceTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceTemplateId' is set
      if (deviceTemplateId === undefined || deviceTemplateId === null) {
        throw new Error("Missing the required parameter 'deviceTemplateId' when calling deviceTemplatesGet");
      }

      let pathParams = {
        'device_template_id': deviceTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceTemplate;
      return this.apiClient.callApi(
        '/deviceTemplates/{device_template_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTemplatesGetMerged operation.
     * @callback module:api/DefaultApi~deviceTemplatesGetMergedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a merged device template by ID
     * @param {String} deviceTemplateId Unique ID of the device template.
     * @param {module:api/DefaultApi~deviceTemplatesGetMergedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceTemplate}
     */
    deviceTemplatesGetMerged(deviceTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceTemplateId' is set
      if (deviceTemplateId === undefined || deviceTemplateId === null) {
        throw new Error("Missing the required parameter 'deviceTemplateId' when calling deviceTemplatesGetMerged");
      }

      let pathParams = {
        'device_template_id': deviceTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceTemplate;
      return this.apiClient.callApi(
        '/deviceTemplates/{device_template_id}/merged', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTemplatesList operation.
     * @callback module:api/DefaultApi~deviceTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceTemplateCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of device templates in an application
     * @param {module:api/DefaultApi~deviceTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceTemplateCollection}
     */
    deviceTemplatesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceTemplateCollection;
      return this.apiClient.callApi(
        '/deviceTemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTemplatesListDevices operation.
     * @callback module:api/DefaultApi~deviceTemplatesListDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get devices for a template
     * @param {String} deviceTemplateId Unique ID of the device template.
     * @param {module:api/DefaultApi~deviceTemplatesListDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceCollection}
     */
    deviceTemplatesListDevices(deviceTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceTemplateId' is set
      if (deviceTemplateId === undefined || deviceTemplateId === null) {
        throw new Error("Missing the required parameter 'deviceTemplateId' when calling deviceTemplatesListDevices");
      }

      let pathParams = {
        'device_template_id': deviceTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceCollection;
      return this.apiClient.callApi(
        '/deviceTemplates/{device_template_id}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTemplatesRemove operation.
     * @callback module:api/DefaultApi~deviceTemplatesRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a device template
     * Delete an existing device template by device ID.
     * @param {String} deviceTemplateId Unique ID of the device template.
     * @param {module:api/DefaultApi~deviceTemplatesRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deviceTemplatesRemove(deviceTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceTemplateId' is set
      if (deviceTemplateId === undefined || deviceTemplateId === null) {
        throw new Error("Missing the required parameter 'deviceTemplateId' when calling deviceTemplatesRemove");
      }

      let pathParams = {
        'device_template_id': deviceTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/deviceTemplates/{device_template_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTemplatesSet operation.
     * @callback module:api/DefaultApi~deviceTemplatesSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a device template by ID
     * @param {String} deviceTemplateId Unique ID of the device template.
     * @param {module:model/DeviceTemplate} body Device template body.
     * @param {module:api/DefaultApi~deviceTemplatesSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceTemplate}
     */
    deviceTemplatesSet(deviceTemplateId, body, callback) {
      let postBody = body;
      // verify the required parameter 'deviceTemplateId' is set
      if (deviceTemplateId === undefined || deviceTemplateId === null) {
        throw new Error("Missing the required parameter 'deviceTemplateId' when calling deviceTemplatesSet");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deviceTemplatesSet");
      }

      let pathParams = {
        'device_template_id': deviceTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceTemplate;
      return this.apiClient.callApi(
        '/deviceTemplates/{device_template_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesExecuteCommand operation.
     * @callback module:api/DefaultApi~devicesExecuteCommandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceCommand} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a device command
     * Execute a command on a device.
     * @param {String} deviceId Unique ID of the device.
     * @param {String} componentName Name of the device component.
     * @param {String} commandName Name of this device command.
     * @param {module:model/DeviceCommand} body Device command body.
     * @param {module:api/DefaultApi~devicesExecuteCommandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceCommand}
     */
    devicesExecuteCommand(deviceId, componentName, commandName, body, callback) {
      let postBody = body;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesExecuteCommand");
      }
      // verify the required parameter 'componentName' is set
      if (componentName === undefined || componentName === null) {
        throw new Error("Missing the required parameter 'componentName' when calling devicesExecuteCommand");
      }
      // verify the required parameter 'commandName' is set
      if (commandName === undefined || commandName === null) {
        throw new Error("Missing the required parameter 'commandName' when calling devicesExecuteCommand");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling devicesExecuteCommand");
      }

      let pathParams = {
        'device_id': deviceId,
        'component_name': componentName,
        'command_name': commandName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceCommand;
      return this.apiClient.callApi(
        '/devices/{device_id}/components/{component_name}/commands/{command_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGet operation.
     * @callback module:api/DefaultApi~devicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a device by ID
     * Get details about an existing device by device ID.
     * @param {String} deviceId Unique ID of the device.
     * @param {module:api/DefaultApi~devicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    devicesGet(deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesGet");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/devices/{device_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetCloudProperties operation.
     * @callback module:api/DefaultApi~devicesGetCloudPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get device cloud properties
     * Get all cloud property values of a device by device ID.
     * @param {String} deviceId Unique ID of the device.
     * @param {module:api/DefaultApi~devicesGetCloudPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    devicesGetCloudProperties(deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesGetCloudProperties");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/devices/{device_id}/cloudProperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetCommandHistory operation.
     * @callback module:api/DefaultApi~devicesGetCommandHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceCommandCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get device command history
     * @param {String} deviceId Unique ID of the device.
     * @param {String} componentName Name of the device component.
     * @param {String} commandName Name of this device command.
     * @param {module:api/DefaultApi~devicesGetCommandHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceCommandCollection}
     */
    devicesGetCommandHistory(deviceId, componentName, commandName, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesGetCommandHistory");
      }
      // verify the required parameter 'componentName' is set
      if (componentName === undefined || componentName === null) {
        throw new Error("Missing the required parameter 'componentName' when calling devicesGetCommandHistory");
      }
      // verify the required parameter 'commandName' is set
      if (commandName === undefined || commandName === null) {
        throw new Error("Missing the required parameter 'commandName' when calling devicesGetCommandHistory");
      }

      let pathParams = {
        'device_id': deviceId,
        'component_name': componentName,
        'command_name': commandName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceCommandCollection;
      return this.apiClient.callApi(
        '/devices/{device_id}/components/{component_name}/commands/{command_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetComponentProperties operation.
     * @callback module:api/DefaultApi~devicesGetComponentPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get device properties for a specific component
     * @param {String} deviceId Unique ID of the device.
     * @param {String} componentName Name of the device component.
     * @param {module:api/DefaultApi~devicesGetComponentPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    devicesGetComponentProperties(deviceId, componentName, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesGetComponentProperties");
      }
      // verify the required parameter 'componentName' is set
      if (componentName === undefined || componentName === null) {
        throw new Error("Missing the required parameter 'componentName' when calling devicesGetComponentProperties");
      }

      let pathParams = {
        'device_id': deviceId,
        'component_name': componentName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/devices/{device_id}/components/{component_name}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetCredentials operation.
     * @callback module:api/DefaultApi~devicesGetCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get device credentials
     * @param {String} deviceId Unique ID of the device.
     * @param {module:api/DefaultApi~devicesGetCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceCredentials}
     */
    devicesGetCredentials(deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesGetCredentials");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceCredentials;
      return this.apiClient.callApi(
        '/devices/{device_id}/credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetProperties operation.
     * @callback module:api/DefaultApi~devicesGetPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get device properties
     * Get all property values of a device by device ID.
     * @param {String} deviceId Unique ID of the device.
     * @param {module:api/DefaultApi~devicesGetPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    devicesGetProperties(deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesGetProperties");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/devices/{device_id}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetTelemetryValue operation.
     * @callback module:api/DefaultApi~devicesGetTelemetryValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Value} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get device telemetry value
     * @param {String} deviceId Unique ID of the device.
     * @param {String} componentName Name of the device component.
     * @param {String} telemetryName Name of this device telemetry.
     * @param {module:api/DefaultApi~devicesGetTelemetryValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Value}
     */
    devicesGetTelemetryValue(deviceId, componentName, telemetryName, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesGetTelemetryValue");
      }
      // verify the required parameter 'componentName' is set
      if (componentName === undefined || componentName === null) {
        throw new Error("Missing the required parameter 'componentName' when calling devicesGetTelemetryValue");
      }
      // verify the required parameter 'telemetryName' is set
      if (telemetryName === undefined || telemetryName === null) {
        throw new Error("Missing the required parameter 'telemetryName' when calling devicesGetTelemetryValue");
      }

      let pathParams = {
        'device_id': deviceId,
        'component_name': componentName,
        'telemetry_name': telemetryName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Value;
      return this.apiClient.callApi(
        '/devices/{device_id}/components/{component_name}/telemetry/{telemetry_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesList operation.
     * @callback module:api/DefaultApi~devicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of devices in an application
     * @param {module:api/DefaultApi~devicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceCollection}
     */
    devicesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceCollection;
      return this.apiClient.callApi(
        '/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesRemove operation.
     * @callback module:api/DefaultApi~devicesRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a device
     * Delete an existing device by device ID.
     * @param {String} deviceId Unique ID of the device.
     * @param {module:api/DefaultApi~devicesRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesRemove(deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesRemove");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/devices/{device_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesSet operation.
     * @callback module:api/DefaultApi~devicesSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a device
     * Create a new device or update an existing one by device ID.
     * @param {String} deviceId Unique ID of the device.
     * @param {module:model/Device} body Device body.
     * @param {module:api/DefaultApi~devicesSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    devicesSet(deviceId, body, callback) {
      let postBody = body;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesSet");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling devicesSet");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/devices/{device_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesUpdateCloudProperties operation.
     * @callback module:api/DefaultApi~devicesUpdateCloudPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update device cloud properties
     * Update all cloud property values of a device by device ID.
     * @param {String} deviceId Unique ID of the device.
     * @param {Object.<String, {String: Object}>} body Device properties.
     * @param {module:api/DefaultApi~devicesUpdateCloudPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    devicesUpdateCloudProperties(deviceId, body, callback) {
      let postBody = body;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesUpdateCloudProperties");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling devicesUpdateCloudProperties");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/devices/{device_id}/cloudProperties', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesUpdateComponentProperties operation.
     * @callback module:api/DefaultApi~devicesUpdateComponentPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update device properties for a specific component
     * @param {String} deviceId Unique ID of the device.
     * @param {String} componentName Name of the device component.
     * @param {Object.<String, {String: Object}>} body Device properties.
     * @param {module:api/DefaultApi~devicesUpdateComponentPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    devicesUpdateComponentProperties(deviceId, componentName, body, callback) {
      let postBody = body;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesUpdateComponentProperties");
      }
      // verify the required parameter 'componentName' is set
      if (componentName === undefined || componentName === null) {
        throw new Error("Missing the required parameter 'componentName' when calling devicesUpdateComponentProperties");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling devicesUpdateComponentProperties");
      }

      let pathParams = {
        'device_id': deviceId,
        'component_name': componentName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/devices/{device_id}/components/{component_name}/properties', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesUpdateProperties operation.
     * @callback module:api/DefaultApi~devicesUpdatePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update device properties
     * Update all property values of a device by device ID.
     * @param {String} deviceId Unique ID of the device.
     * @param {Object.<String, {String: Object}>} body Device properties.
     * @param {module:api/DefaultApi~devicesUpdatePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    devicesUpdateProperties(deviceId, body, callback) {
      let postBody = body;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesUpdateProperties");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling devicesUpdateProperties");
      }

      let pathParams = {
        'device_id': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/devices/{device_id}/properties', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesGet operation.
     * @callback module:api/DefaultApi~rolesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a role by ID.
     * @param {String} roleId Unique ID for the role.
     * @param {module:api/DefaultApi~rolesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    rolesGet(roleId, callback) {
      let postBody = null;
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling rolesGet");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/roles/{role_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rolesList operation.
     * @callback module:api/DefaultApi~rolesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of roles in an application.
     * @param {module:api/DefaultApi~rolesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleCollection}
     */
    rolesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleCollection;
      return this.apiClient.callApi(
        '/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
