/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SymmetricKey from './SymmetricKey';

/**
 * The DeviceCredentials model module.
 * @module model/DeviceCredentials
 * @version preview
 */
class DeviceCredentials {
    /**
     * Constructs a new <code>DeviceCredentials</code>.
     * @alias module:model/DeviceCredentials
     * @param scopeId {String} Scope id for connecting to device provisioning service.
     * @param symmetricKey {module:model/SymmetricKey} 
     */
    constructor(scopeId, symmetricKey) { 
        
        DeviceCredentials.initialize(this, scopeId, symmetricKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, scopeId, symmetricKey) { 
        obj['scopeId'] = scopeId;
        obj['symmetricKey'] = symmetricKey;
    }

    /**
     * Constructs a <code>DeviceCredentials</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceCredentials} obj Optional instance to populate.
     * @return {module:model/DeviceCredentials} The populated <code>DeviceCredentials</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceCredentials();

            if (data.hasOwnProperty('scopeId')) {
                obj['scopeId'] = ApiClient.convertToType(data['scopeId'], 'String');
            }
            if (data.hasOwnProperty('symmetricKey')) {
                obj['symmetricKey'] = SymmetricKey.constructFromObject(data['symmetricKey']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceCredentials</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceCredentials</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceCredentials.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['scopeId'] && !(typeof data['scopeId'] === 'string' || data['scopeId'] instanceof String)) {
            throw new Error("Expected the field `scopeId` to be a primitive type in the JSON string but got " + data['scopeId']);
        }
        // validate the optional field `symmetricKey`
        if (data['symmetricKey']) { // data not null
          SymmetricKey.validateJSON(data['symmetricKey']);
        }

        return true;
    }


}

DeviceCredentials.RequiredProperties = ["scopeId", "symmetricKey"];

/**
 * Scope id for connecting to device provisioning service.
 * @member {String} scopeId
 */
DeviceCredentials.prototype['scopeId'] = undefined;

/**
 * @member {module:model/SymmetricKey} symmetricKey
 */
DeviceCredentials.prototype['symmetricKey'] = undefined;






export default DeviceCredentials;

