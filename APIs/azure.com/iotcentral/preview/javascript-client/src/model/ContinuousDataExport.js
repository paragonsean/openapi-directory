/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Endpoint from './Endpoint';

/**
 * The ContinuousDataExport model module.
 * @module model/ContinuousDataExport
 * @version preview
 */
class ContinuousDataExport {
    /**
     * Constructs a new <code>ContinuousDataExport</code>.
     * @alias module:model/ContinuousDataExport
     * @param enabled {Boolean} Boolean indicating whether the continuous data export should be running or not.
     * @param endpoint {module:model/Endpoint} 
     * @param sources {Array.<module:model/ContinuousDataExport.SourcesEnum>} Data sources to export to the endpoint.
     */
    constructor(enabled, endpoint, sources) { 
        
        ContinuousDataExport.initialize(this, enabled, endpoint, sources);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enabled, endpoint, sources) { 
        obj['enabled'] = enabled;
        obj['endpoint'] = endpoint;
        obj['sources'] = sources;
    }

    /**
     * Constructs a <code>ContinuousDataExport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContinuousDataExport} obj Optional instance to populate.
     * @return {module:model/ContinuousDataExport} The populated <code>ContinuousDataExport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContinuousDataExport();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = Endpoint.constructFromObject(data['endpoint']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContinuousDataExport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContinuousDataExport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContinuousDataExport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `endpoint`
        if (data['endpoint']) { // data not null
          Endpoint.validateJSON(data['endpoint']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

ContinuousDataExport.RequiredProperties = ["enabled", "endpoint", "sources"];

/**
 * Display name of the continuous data export.
 * @member {String} displayName
 */
ContinuousDataExport.prototype['displayName'] = undefined;

/**
 * Boolean indicating whether the continuous data export should be running or not.
 * @member {Boolean} enabled
 */
ContinuousDataExport.prototype['enabled'] = undefined;

/**
 * @member {module:model/Endpoint} endpoint
 */
ContinuousDataExport.prototype['endpoint'] = undefined;

/**
 * ETag used to prevent conflict in continuous data export updates.
 * @member {String} etag
 */
ContinuousDataExport.prototype['etag'] = undefined;

/**
 * Unique ID of the continuous data export.
 * @member {String} id
 */
ContinuousDataExport.prototype['id'] = undefined;

/**
 * Data sources to export to the endpoint.
 * @member {Array.<module:model/ContinuousDataExport.SourcesEnum>} sources
 */
ContinuousDataExport.prototype['sources'] = undefined;

/**
 * Indicates whether the continuous data export is starting, running, etc.
 * @member {String} status
 */
ContinuousDataExport.prototype['status'] = undefined;





/**
 * Allowed values for the <code>sources</code> property.
 * @enum {String}
 * @readonly
 */
ContinuousDataExport['SourcesEnum'] = {

    /**
     * value: "devices"
     * @const
     */
    "devices": "devices",

    /**
     * value: "deviceTemplates"
     * @const
     */
    "deviceTemplates": "deviceTemplates",

    /**
     * value: "telemetry"
     * @const
     */
    "telemetry": "telemetry"
};



export default ContinuousDataExport;

