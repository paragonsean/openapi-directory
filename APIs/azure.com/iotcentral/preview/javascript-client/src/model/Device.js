/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Device model module.
 * @module model/Device
 * @version preview
 */
class Device {
    /**
     * Constructs a new <code>Device</code>.
     * @alias module:model/Device
     * @param instanceOf {String} The model definition for the device.
     */
    constructor(instanceOf) { 
        
        Device.initialize(this, instanceOf);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, instanceOf) { 
        obj['instanceOf'] = instanceOf;
    }

    /**
     * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Device} obj Optional instance to populate.
     * @return {module:model/Device} The populated <code>Device</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Device();

            if (data.hasOwnProperty('approved')) {
                obj['approved'] = ApiClient.convertToType(data['approved'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instanceOf')) {
                obj['instanceOf'] = ApiClient.convertToType(data['instanceOf'], 'String');
            }
            if (data.hasOwnProperty('provisioned')) {
                obj['provisioned'] = ApiClient.convertToType(data['provisioned'], 'Boolean');
            }
            if (data.hasOwnProperty('simulated')) {
                obj['simulated'] = ApiClient.convertToType(data['simulated'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Device</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Device</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Device.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['instanceOf'] && !(typeof data['instanceOf'] === 'string' || data['instanceOf'] instanceof String)) {
            throw new Error("Expected the field `instanceOf` to be a primitive type in the JSON string but got " + data['instanceOf']);
        }

        return true;
    }


}

Device.RequiredProperties = ["instanceOf"];

/**
 * Whether the device has been approved to connect to IoT Central.
 * @member {Boolean} approved
 */
Device.prototype['approved'] = undefined;

/**
 * Detailed description of the device.
 * @member {String} description
 */
Device.prototype['description'] = undefined;

/**
 * Display name of the device.
 * @member {String} displayName
 */
Device.prototype['displayName'] = undefined;

/**
 * ETag used to prevent conflict in device updates.
 * @member {String} etag
 */
Device.prototype['etag'] = undefined;

/**
 * Unique ID of the device.
 * @member {String} id
 */
Device.prototype['id'] = undefined;

/**
 * The model definition for the device.
 * @member {String} instanceOf
 */
Device.prototype['instanceOf'] = undefined;

/**
 * Whether resources have been allocated for the device.
 * @member {Boolean} provisioned
 */
Device.prototype['provisioned'] = undefined;

/**
 * Whether the device is simulated.
 * @member {Boolean} simulated
 */
Device.prototype['simulated'] = undefined;






export default Device;

