/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Entity from './Entity';

/**
 * The NamedEntity model module.
 * @module model/NamedEntity
 * @version preview
 */
class NamedEntity {
    /**
     * Constructs a new <code>NamedEntity</code>.
     * @alias module:model/NamedEntity
     * @implements module:model/Entity
     * @param type {Array.<String>} Type of the entity.
     * @param name {String} The programmatic name of the named entity.
     */
    constructor(type, name) { 
        Entity.initialize(this, type);
        NamedEntity.initialize(this, type, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, name) { 
        obj['@type'] = type;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>NamedEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NamedEntity} obj Optional instance to populate.
     * @return {module:model/NamedEntity} The populated <code>NamedEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NamedEntity();
            Entity.constructFromObject(data, obj);

            if (data.hasOwnProperty('@context')) {
                obj['@context'] = ApiClient.convertToType(data['@context'], Object);
            }
            if (data.hasOwnProperty('@id')) {
                obj['@id'] = ApiClient.convertToType(data['@id'], 'String');
            }
            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], ['String']);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NamedEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NamedEntity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NamedEntity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['@id'] && !(typeof data['@id'] === 'string' || data['@id'] instanceof String)) {
            throw new Error("Expected the field `@id` to be a primitive type in the JSON string but got " + data['@id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['@type'])) {
            throw new Error("Expected the field `@type` to be an array in the JSON data but got " + data['@type']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

NamedEntity.RequiredProperties = ["@type", "name"];

/**
 * JSON-LD context for the entity.
 * @member {Object} @context
 */
NamedEntity.prototype['@context'] = undefined;

/**
 * Unique ID of the entity.
 * @member {String} @id
 */
NamedEntity.prototype['@id'] = undefined;

/**
 * Type of the entity.
 * @member {Array.<String>} @type
 */
NamedEntity.prototype['@type'] = undefined;

/**
 * Developer comment about the entity.
 * @member {String} comment
 */
NamedEntity.prototype['comment'] = undefined;

/**
 * Detailed description of the entity.
 * @member {String} description
 */
NamedEntity.prototype['description'] = undefined;

/**
 * Display name of the entity.
 * @member {String} displayName
 */
NamedEntity.prototype['displayName'] = undefined;

/**
 * The programmatic name of the named entity.
 * @member {String} name
 */
NamedEntity.prototype['name'] = undefined;


// Implement Entity interface:
/**
 * JSON-LD context for the entity.
 * @member {Object} @context
 */
Entity.prototype['@context'] = undefined;
/**
 * Unique ID of the entity.
 * @member {String} @id
 */
Entity.prototype['@id'] = undefined;
/**
 * Type of the entity.
 * @member {Array.<String>} @type
 */
Entity.prototype['@type'] = undefined;
/**
 * Developer comment about the entity.
 * @member {String} comment
 */
Entity.prototype['comment'] = undefined;
/**
 * Detailed description of the entity.
 * @member {String} description
 */
Entity.prototype['description'] = undefined;
/**
 * Display name of the entity.
 * @member {String} displayName
 */
Entity.prototype['displayName'] = undefined;




export default NamedEntity;

