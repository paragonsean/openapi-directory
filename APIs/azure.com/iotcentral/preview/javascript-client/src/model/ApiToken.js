/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Permission from './Permission';

/**
 * The ApiToken model module.
 * @module model/ApiToken
 * @version preview
 */
class ApiToken {
    /**
     * Constructs a new <code>ApiToken</code>.
     * @alias module:model/ApiToken
     * @implements module:model/Permission
     * @param roles {Array.<String>} Roles that the permission has been granted permission to.
     */
    constructor(roles) { 
        Permission.initialize(this, roles);
        ApiToken.initialize(this, roles);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, roles) { 
        obj['roles'] = roles;
    }

    /**
     * Constructs a <code>ApiToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiToken} obj Optional instance to populate.
     * @return {module:model/ApiToken} The populated <code>ApiToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiToken();
            Permission.constructFromObject(data, obj);

            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['String']);
            }
            if (data.hasOwnProperty('expiry')) {
                obj['expiry'] = ApiClient.convertToType(data['expiry'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiToken</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiToken.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roles'])) {
            throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}

ApiToken.RequiredProperties = ["roles"];

/**
 * Roles that the permission has been granted permission to.
 * @member {Array.<String>} roles
 */
ApiToken.prototype['roles'] = undefined;

/**
 * String-formatted date representing the time when the token expires
 * @member {Date} expiry
 */
ApiToken.prototype['expiry'] = undefined;

/**
 * Unique ID of the api token.
 * @member {String} id
 */
ApiToken.prototype['id'] = undefined;

/**
 * Value of the api token.
 * @member {String} token
 */
ApiToken.prototype['token'] = undefined;


// Implement Permission interface:
/**
 * Roles that the permission has been granted permission to.
 * @member {Array.<String>} roles
 */
Permission.prototype['roles'] = undefined;




export default ApiToken;

