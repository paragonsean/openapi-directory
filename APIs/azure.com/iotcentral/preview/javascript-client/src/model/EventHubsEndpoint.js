/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Endpoint from './Endpoint';

/**
 * The EventHubsEndpoint model module.
 * @module model/EventHubsEndpoint
 * @version preview
 */
class EventHubsEndpoint {
    /**
     * Constructs a new <code>EventHubsEndpoint</code>.
     * @alias module:model/EventHubsEndpoint
     * @extends module:model/Endpoint
     * @implements module:model/Endpoint
     * @param connectionString {String} Information for connecting to the endpoint.
     * @param name {String} Name of the entity to send data to.
     * @param type {String} Type of the endpoint.
     */
    constructor(connectionString, name, type) { 
        Endpoint.initialize(this, connectionString, name, type);
        EventHubsEndpoint.initialize(this, connectionString, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, connectionString, name, type) { 
    }

    /**
     * Constructs a <code>EventHubsEndpoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventHubsEndpoint} obj Optional instance to populate.
     * @return {module:model/EventHubsEndpoint} The populated <code>EventHubsEndpoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventHubsEndpoint();
            Endpoint.constructFromObject(data, obj);
            Endpoint.constructFromObject(data, obj);

        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventHubsEndpoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventHubsEndpoint</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventHubsEndpoint.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

EventHubsEndpoint.RequiredProperties = ["connectionString", "name", "type"];


// Implement Endpoint interface:
/**
 * Information for connecting to the endpoint.
 * @member {String} connectionString
 */
Endpoint.prototype['connectionString'] = undefined;
/**
 * Name of the entity to send data to.
 * @member {String} name
 */
Endpoint.prototype['name'] = undefined;
/**
 * Type of the endpoint.
 * @member {String} type
 */
Endpoint.prototype['type'] = undefined;




export default EventHubsEndpoint;

