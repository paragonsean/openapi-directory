/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CapabilityReference from './CapabilityReference';
import Entity from './Entity';
import ValueDetail from './ValueDetail';

/**
 * The Override model module.
 * @module model/Override
 * @version preview
 */
class Override {
    /**
     * Constructs a new <code>Override</code>.
     * @alias module:model/Override
     * @implements module:model/Entity
     * @param type {Array.<String>} Type of the entity.
     */
    constructor(type) { 
        Entity.initialize(this, type);
        Override.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['@type'] = type;
    }

    /**
     * Constructs a <code>Override</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Override} obj Optional instance to populate.
     * @return {module:model/Override} The populated <code>Override</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Override();
            Entity.constructFromObject(data, obj);

            if (data.hasOwnProperty('@context')) {
                obj['@context'] = ApiClient.convertToType(data['@context'], Object);
            }
            if (data.hasOwnProperty('@id')) {
                obj['@id'] = ApiClient.convertToType(data['@id'], 'String');
            }
            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], ['String']);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('capability')) {
                obj['capability'] = CapabilityReference.constructFromObject(data['capability']);
            }
            if (data.hasOwnProperty('displayUnit')) {
                obj['displayUnit'] = ApiClient.convertToType(data['displayUnit'], 'String');
            }
            if (data.hasOwnProperty('semanticType')) {
                obj['semanticType'] = ApiClient.convertToType(data['semanticType'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('valueDetail')) {
                obj['valueDetail'] = ValueDetail.constructFromObject(data['valueDetail']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Override</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Override</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Override.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['@id'] && !(typeof data['@id'] === 'string' || data['@id'] instanceof String)) {
            throw new Error("Expected the field `@id` to be a primitive type in the JSON string but got " + data['@id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['@type'])) {
            throw new Error("Expected the field `@type` to be an array in the JSON data but got " + data['@type']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `capability`
        if (data['capability']) { // data not null
          CapabilityReference.validateJSON(data['capability']);
        }
        // ensure the json data is a string
        if (data['displayUnit'] && !(typeof data['displayUnit'] === 'string' || data['displayUnit'] instanceof String)) {
            throw new Error("Expected the field `displayUnit` to be a primitive type in the JSON string but got " + data['displayUnit']);
        }
        // ensure the json data is a string
        if (data['semanticType'] && !(typeof data['semanticType'] === 'string' || data['semanticType'] instanceof String)) {
            throw new Error("Expected the field `semanticType` to be a primitive type in the JSON string but got " + data['semanticType']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }
        // validate the optional field `valueDetail`
        if (data['valueDetail']) { // data not null
          ValueDetail.validateJSON(data['valueDetail']);
        }

        return true;
    }


}

Override.RequiredProperties = ["@type"];

/**
 * JSON-LD context for the entity.
 * @member {Object} @context
 */
Override.prototype['@context'] = undefined;

/**
 * Unique ID of the entity.
 * @member {String} @id
 */
Override.prototype['@id'] = undefined;

/**
 * Type of the entity.
 * @member {Array.<String>} @type
 */
Override.prototype['@type'] = undefined;

/**
 * Developer comment about the entity.
 * @member {String} comment
 */
Override.prototype['comment'] = undefined;

/**
 * Detailed description of the entity.
 * @member {String} description
 */
Override.prototype['description'] = undefined;

/**
 * Display name of the entity.
 * @member {String} displayName
 */
Override.prototype['displayName'] = undefined;

/**
 * @member {module:model/CapabilityReference} capability
 */
Override.prototype['capability'] = undefined;

/**
 * The overridden display unit.
 * @member {String} displayUnit
 */
Override.prototype['displayUnit'] = undefined;

/**
 * The overridden semantic type.
 * @member {String} semanticType
 */
Override.prototype['semanticType'] = undefined;

/**
 * The overridden unit.
 * @member {String} unit
 */
Override.prototype['unit'] = undefined;

/**
 * @member {module:model/ValueDetail} valueDetail
 */
Override.prototype['valueDetail'] = undefined;


// Implement Entity interface:
/**
 * JSON-LD context for the entity.
 * @member {Object} @context
 */
Entity.prototype['@context'] = undefined;
/**
 * Unique ID of the entity.
 * @member {String} @id
 */
Entity.prototype['@id'] = undefined;
/**
 * Type of the entity.
 * @member {Array.<String>} @type
 */
Entity.prototype['@type'] = undefined;
/**
 * Developer comment about the entity.
 * @member {String} comment
 */
Entity.prototype['comment'] = undefined;
/**
 * Detailed description of the entity.
 * @member {String} description
 */
Entity.prototype['description'] = undefined;
/**
 * Display name of the entity.
 * @member {String} displayName
 */
Entity.prototype['displayName'] = undefined;




export default Override;

