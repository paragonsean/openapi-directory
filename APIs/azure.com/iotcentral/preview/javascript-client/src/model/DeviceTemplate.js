/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CapabilityModel from './CapabilityModel';
import SolutionModel from './SolutionModel';

/**
 * The DeviceTemplate model module.
 * @module model/DeviceTemplate
 * @version preview
 */
class DeviceTemplate {
    /**
     * Constructs a new <code>DeviceTemplate</code>.
     * @alias module:model/DeviceTemplate
     * @param capabilityModel {module:model/CapabilityModel} 
     * @param types {Array.<String>} The types of device to which this template applies.
     */
    constructor(capabilityModel, types) { 
        
        DeviceTemplate.initialize(this, capabilityModel, types);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, capabilityModel, types) { 
        obj['capabilityModel'] = capabilityModel;
        obj['types'] = types;
    }

    /**
     * Constructs a <code>DeviceTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceTemplate} obj Optional instance to populate.
     * @return {module:model/DeviceTemplate} The populated <code>DeviceTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceTemplate();

            if (data.hasOwnProperty('capabilityModel')) {
                obj['capabilityModel'] = CapabilityModel.constructFromObject(data['capabilityModel']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('solutionModel')) {
                obj['solutionModel'] = SolutionModel.constructFromObject(data['solutionModel']);
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `capabilityModel`
        if (data['capabilityModel']) { // data not null
          CapabilityModel.validateJSON(data['capabilityModel']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `solutionModel`
        if (data['solutionModel']) { // data not null
          SolutionModel.validateJSON(data['solutionModel']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }

        return true;
    }


}

DeviceTemplate.RequiredProperties = ["capabilityModel", "types"];

/**
 * @member {module:model/CapabilityModel} capabilityModel
 */
DeviceTemplate.prototype['capabilityModel'] = undefined;

/**
 * Detailed description of the device template.
 * @member {String} description
 */
DeviceTemplate.prototype['description'] = undefined;

/**
 * Display name of the device template.
 * @member {String} displayName
 */
DeviceTemplate.prototype['displayName'] = undefined;

/**
 * ETag used to prevent conflict in device template updates.
 * @member {String} etag
 */
DeviceTemplate.prototype['etag'] = undefined;

/**
 * Unique ID of the device template.
 * @member {String} id
 */
DeviceTemplate.prototype['id'] = undefined;

/**
 * @member {module:model/SolutionModel} solutionModel
 */
DeviceTemplate.prototype['solutionModel'] = undefined;

/**
 * The types of device to which this template applies.
 * @member {Array.<String>} types
 */
DeviceTemplate.prototype['types'] = undefined;






export default DeviceTemplate;

