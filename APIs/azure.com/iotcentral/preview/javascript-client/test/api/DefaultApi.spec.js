/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AzureIoTCentral);
  }
}(this, function(expect, AzureIoTCentral) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AzureIoTCentral.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('apiTokensGet', function() {
      it('should call apiTokensGet successfully', function(done) {
        //uncomment below and update the code to test apiTokensGet
        //instance.apiTokensGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTokensList', function() {
      it('should call apiTokensList successfully', function(done) {
        //uncomment below and update the code to test apiTokensList
        //instance.apiTokensList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTokensRemove', function() {
      it('should call apiTokensRemove successfully', function(done) {
        //uncomment below and update the code to test apiTokensRemove
        //instance.apiTokensRemove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTokensSet', function() {
      it('should call apiTokensSet successfully', function(done) {
        //uncomment below and update the code to test apiTokensSet
        //instance.apiTokensSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('continuousDataExportsGet', function() {
      it('should call continuousDataExportsGet successfully', function(done) {
        //uncomment below and update the code to test continuousDataExportsGet
        //instance.continuousDataExportsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('continuousDataExportsList', function() {
      it('should call continuousDataExportsList successfully', function(done) {
        //uncomment below and update the code to test continuousDataExportsList
        //instance.continuousDataExportsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('continuousDataExportsRemove', function() {
      it('should call continuousDataExportsRemove successfully', function(done) {
        //uncomment below and update the code to test continuousDataExportsRemove
        //instance.continuousDataExportsRemove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('continuousDataExportsSet', function() {
      it('should call continuousDataExportsSet successfully', function(done) {
        //uncomment below and update the code to test continuousDataExportsSet
        //instance.continuousDataExportsSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceTemplatesGet', function() {
      it('should call deviceTemplatesGet successfully', function(done) {
        //uncomment below and update the code to test deviceTemplatesGet
        //instance.deviceTemplatesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceTemplatesGetMerged', function() {
      it('should call deviceTemplatesGetMerged successfully', function(done) {
        //uncomment below and update the code to test deviceTemplatesGetMerged
        //instance.deviceTemplatesGetMerged(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceTemplatesList', function() {
      it('should call deviceTemplatesList successfully', function(done) {
        //uncomment below and update the code to test deviceTemplatesList
        //instance.deviceTemplatesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceTemplatesListDevices', function() {
      it('should call deviceTemplatesListDevices successfully', function(done) {
        //uncomment below and update the code to test deviceTemplatesListDevices
        //instance.deviceTemplatesListDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceTemplatesRemove', function() {
      it('should call deviceTemplatesRemove successfully', function(done) {
        //uncomment below and update the code to test deviceTemplatesRemove
        //instance.deviceTemplatesRemove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceTemplatesSet', function() {
      it('should call deviceTemplatesSet successfully', function(done) {
        //uncomment below and update the code to test deviceTemplatesSet
        //instance.deviceTemplatesSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesExecuteCommand', function() {
      it('should call devicesExecuteCommand successfully', function(done) {
        //uncomment below and update the code to test devicesExecuteCommand
        //instance.devicesExecuteCommand(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGet', function() {
      it('should call devicesGet successfully', function(done) {
        //uncomment below and update the code to test devicesGet
        //instance.devicesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGetCloudProperties', function() {
      it('should call devicesGetCloudProperties successfully', function(done) {
        //uncomment below and update the code to test devicesGetCloudProperties
        //instance.devicesGetCloudProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGetCommandHistory', function() {
      it('should call devicesGetCommandHistory successfully', function(done) {
        //uncomment below and update the code to test devicesGetCommandHistory
        //instance.devicesGetCommandHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGetComponentProperties', function() {
      it('should call devicesGetComponentProperties successfully', function(done) {
        //uncomment below and update the code to test devicesGetComponentProperties
        //instance.devicesGetComponentProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGetCredentials', function() {
      it('should call devicesGetCredentials successfully', function(done) {
        //uncomment below and update the code to test devicesGetCredentials
        //instance.devicesGetCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGetProperties', function() {
      it('should call devicesGetProperties successfully', function(done) {
        //uncomment below and update the code to test devicesGetProperties
        //instance.devicesGetProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesGetTelemetryValue', function() {
      it('should call devicesGetTelemetryValue successfully', function(done) {
        //uncomment below and update the code to test devicesGetTelemetryValue
        //instance.devicesGetTelemetryValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesList', function() {
      it('should call devicesList successfully', function(done) {
        //uncomment below and update the code to test devicesList
        //instance.devicesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesRemove', function() {
      it('should call devicesRemove successfully', function(done) {
        //uncomment below and update the code to test devicesRemove
        //instance.devicesRemove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesSet', function() {
      it('should call devicesSet successfully', function(done) {
        //uncomment below and update the code to test devicesSet
        //instance.devicesSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesUpdateCloudProperties', function() {
      it('should call devicesUpdateCloudProperties successfully', function(done) {
        //uncomment below and update the code to test devicesUpdateCloudProperties
        //instance.devicesUpdateCloudProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesUpdateComponentProperties', function() {
      it('should call devicesUpdateComponentProperties successfully', function(done) {
        //uncomment below and update the code to test devicesUpdateComponentProperties
        //instance.devicesUpdateComponentProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('devicesUpdateProperties', function() {
      it('should call devicesUpdateProperties successfully', function(done) {
        //uncomment below and update the code to test devicesUpdateProperties
        //instance.devicesUpdateProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rolesGet', function() {
      it('should call rolesGet successfully', function(done) {
        //uncomment below and update the code to test rolesGet
        //instance.rolesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rolesList', function() {
      it('should call rolesList successfully', function(done) {
        //uncomment below and update the code to test rolesList
        //instance.rolesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
