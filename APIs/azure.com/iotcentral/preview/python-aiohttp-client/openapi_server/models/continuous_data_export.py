# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint import Endpoint
from openapi_server import util


class ContinuousDataExport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, enabled: bool=None, endpoint: Endpoint=None, etag: str=None, id: str=None, sources: List[str]=None, status: str=None):
        """ContinuousDataExport - a model defined in OpenAPI

        :param display_name: The display_name of this ContinuousDataExport.
        :param enabled: The enabled of this ContinuousDataExport.
        :param endpoint: The endpoint of this ContinuousDataExport.
        :param etag: The etag of this ContinuousDataExport.
        :param id: The id of this ContinuousDataExport.
        :param sources: The sources of this ContinuousDataExport.
        :param status: The status of this ContinuousDataExport.
        """
        self.openapi_types = {
            'display_name': str,
            'enabled': bool,
            'endpoint': Endpoint,
            'etag': str,
            'id': str,
            'sources': List[str],
            'status': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'enabled': 'enabled',
            'endpoint': 'endpoint',
            'etag': 'etag',
            'id': 'id',
            'sources': 'sources',
            'status': 'status'
        }

        self._display_name = display_name
        self._enabled = enabled
        self._endpoint = endpoint
        self._etag = etag
        self._id = id
        self._sources = sources
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContinuousDataExport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContinuousDataExport of this ContinuousDataExport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ContinuousDataExport.

        Display name of the continuous data export.

        :return: The display_name of this ContinuousDataExport.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ContinuousDataExport.

        Display name of the continuous data export.

        :param display_name: The display_name of this ContinuousDataExport.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enabled(self):
        """Gets the enabled of this ContinuousDataExport.

        Boolean indicating whether the continuous data export should be running or not.

        :return: The enabled of this ContinuousDataExport.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ContinuousDataExport.

        Boolean indicating whether the continuous data export should be running or not.

        :param enabled: The enabled of this ContinuousDataExport.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def endpoint(self):
        """Gets the endpoint of this ContinuousDataExport.


        :return: The endpoint of this ContinuousDataExport.
        :rtype: Endpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ContinuousDataExport.


        :param endpoint: The endpoint of this ContinuousDataExport.
        :type endpoint: Endpoint
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")

        self._endpoint = endpoint

    @property
    def etag(self):
        """Gets the etag of this ContinuousDataExport.

        ETag used to prevent conflict in continuous data export updates.

        :return: The etag of this ContinuousDataExport.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ContinuousDataExport.

        ETag used to prevent conflict in continuous data export updates.

        :param etag: The etag of this ContinuousDataExport.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this ContinuousDataExport.

        Unique ID of the continuous data export.

        :return: The id of this ContinuousDataExport.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContinuousDataExport.

        Unique ID of the continuous data export.

        :param id: The id of this ContinuousDataExport.
        :type id: str
        """

        self._id = id

    @property
    def sources(self):
        """Gets the sources of this ContinuousDataExport.

        Data sources to export to the endpoint.

        :return: The sources of this ContinuousDataExport.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this ContinuousDataExport.

        Data sources to export to the endpoint.

        :param sources: The sources of this ContinuousDataExport.
        :type sources: List[str]
        """
        allowed_values = ["devices", "deviceTemplates", "telemetry"]  # noqa: E501
        if not set(sources).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sources` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(sources) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._sources = sources

    @property
    def status(self):
        """Gets the status of this ContinuousDataExport.

        Indicates whether the continuous data export is starting, running, etc.

        :return: The status of this ContinuousDataExport.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContinuousDataExport.

        Indicates whether the continuous data export is starting, running, etc.

        :param status: The status of this ContinuousDataExport.
        :type status: str
        """

        self._status = status
