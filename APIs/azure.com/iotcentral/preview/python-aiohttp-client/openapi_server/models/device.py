# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved: bool=None, description: str=None, display_name: str=None, etag: str=None, id: str=None, instance_of: str=None, provisioned: bool=None, simulated: bool=None):
        """Device - a model defined in OpenAPI

        :param approved: The approved of this Device.
        :param description: The description of this Device.
        :param display_name: The display_name of this Device.
        :param etag: The etag of this Device.
        :param id: The id of this Device.
        :param instance_of: The instance_of of this Device.
        :param provisioned: The provisioned of this Device.
        :param simulated: The simulated of this Device.
        """
        self.openapi_types = {
            'approved': bool,
            'description': str,
            'display_name': str,
            'etag': str,
            'id': str,
            'instance_of': str,
            'provisioned': bool,
            'simulated': bool
        }

        self.attribute_map = {
            'approved': 'approved',
            'description': 'description',
            'display_name': 'displayName',
            'etag': 'etag',
            'id': 'id',
            'instance_of': 'instanceOf',
            'provisioned': 'provisioned',
            'simulated': 'simulated'
        }

        self._approved = approved
        self._description = description
        self._display_name = display_name
        self._etag = etag
        self._id = id
        self._instance_of = instance_of
        self._provisioned = provisioned
        self._simulated = simulated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved(self):
        """Gets the approved of this Device.

        Whether the device has been approved to connect to IoT Central.

        :return: The approved of this Device.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this Device.

        Whether the device has been approved to connect to IoT Central.

        :param approved: The approved of this Device.
        :type approved: bool
        """

        self._approved = approved

    @property
    def description(self):
        """Gets the description of this Device.

        Detailed description of the device.

        :return: The description of this Device.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Device.

        Detailed description of the device.

        :param description: The description of this Device.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Device.

        Display name of the device.

        :return: The display_name of this Device.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Device.

        Display name of the device.

        :param display_name: The display_name of this Device.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this Device.

        ETag used to prevent conflict in device updates.

        :return: The etag of this Device.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Device.

        ETag used to prevent conflict in device updates.

        :param etag: The etag of this Device.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Device.

        Unique ID of the device.

        :return: The id of this Device.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.

        Unique ID of the device.

        :param id: The id of this Device.
        :type id: str
        """

        self._id = id

    @property
    def instance_of(self):
        """Gets the instance_of of this Device.

        The model definition for the device.

        :return: The instance_of of this Device.
        :rtype: str
        """
        return self._instance_of

    @instance_of.setter
    def instance_of(self, instance_of):
        """Sets the instance_of of this Device.

        The model definition for the device.

        :param instance_of: The instance_of of this Device.
        :type instance_of: str
        """
        if instance_of is None:
            raise ValueError("Invalid value for `instance_of`, must not be `None`")

        self._instance_of = instance_of

    @property
    def provisioned(self):
        """Gets the provisioned of this Device.

        Whether resources have been allocated for the device.

        :return: The provisioned of this Device.
        :rtype: bool
        """
        return self._provisioned

    @provisioned.setter
    def provisioned(self, provisioned):
        """Sets the provisioned of this Device.

        Whether resources have been allocated for the device.

        :param provisioned: The provisioned of this Device.
        :type provisioned: bool
        """

        self._provisioned = provisioned

    @property
    def simulated(self):
        """Gets the simulated of this Device.

        Whether the device is simulated.

        :return: The simulated of this Device.
        :rtype: bool
        """
        return self._simulated

    @simulated.setter
    def simulated(self, simulated):
        """Sets the simulated of this Device.

        Whether the device is simulated.

        :param simulated: The simulated of this Device.
        :type simulated: bool
        """

        self._simulated = simulated
