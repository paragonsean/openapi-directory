# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capability import Capability
from openapi_server.models.initial_value import InitialValue
from openapi_server.models.override import Override
from openapi_server import util


class SolutionModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: object=None, id: str=None, type: List[str]=None, comment: str=None, description: str=None, display_name: str=None, cloud_properties: List[Capability]=None, initial_values: List[InitialValue]=None, overrides: List[Override]=None):
        """SolutionModel - a model defined in OpenAPI

        :param context: The context of this SolutionModel.
        :param id: The id of this SolutionModel.
        :param type: The type of this SolutionModel.
        :param comment: The comment of this SolutionModel.
        :param description: The description of this SolutionModel.
        :param display_name: The display_name of this SolutionModel.
        :param cloud_properties: The cloud_properties of this SolutionModel.
        :param initial_values: The initial_values of this SolutionModel.
        :param overrides: The overrides of this SolutionModel.
        """
        self.openapi_types = {
            'context': object,
            'id': str,
            'type': List[str],
            'comment': str,
            'description': str,
            'display_name': str,
            'cloud_properties': List[Capability],
            'initial_values': List[InitialValue],
            'overrides': List[Override]
        }

        self.attribute_map = {
            'context': '@context',
            'id': '@id',
            'type': '@type',
            'comment': 'comment',
            'description': 'description',
            'display_name': 'displayName',
            'cloud_properties': 'cloudProperties',
            'initial_values': 'initialValues',
            'overrides': 'overrides'
        }

        self._context = context
        self._id = id
        self._type = type
        self._comment = comment
        self._description = description
        self._display_name = display_name
        self._cloud_properties = cloud_properties
        self._initial_values = initial_values
        self._overrides = overrides

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SolutionModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SolutionModel of this SolutionModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this SolutionModel.

        JSON-LD context for the entity.

        :return: The context of this SolutionModel.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this SolutionModel.

        JSON-LD context for the entity.

        :param context: The context of this SolutionModel.
        :type context: object
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this SolutionModel.

        Unique ID of the entity.

        :return: The id of this SolutionModel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SolutionModel.

        Unique ID of the entity.

        :param id: The id of this SolutionModel.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this SolutionModel.

        Type of the entity.

        :return: The type of this SolutionModel.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SolutionModel.

        Type of the entity.

        :param type: The type of this SolutionModel.
        :type type: List[str]
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, number of items must be greater than or equal to `1`")

        self._type = type

    @property
    def comment(self):
        """Gets the comment of this SolutionModel.

        Developer comment about the entity.

        :return: The comment of this SolutionModel.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SolutionModel.

        Developer comment about the entity.

        :param comment: The comment of this SolutionModel.
        :type comment: str
        """

        self._comment = comment

    @property
    def description(self):
        """Gets the description of this SolutionModel.

        Detailed description of the entity.

        :return: The description of this SolutionModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SolutionModel.

        Detailed description of the entity.

        :param description: The description of this SolutionModel.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this SolutionModel.

        Display name of the entity.

        :return: The display_name of this SolutionModel.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SolutionModel.

        Display name of the entity.

        :param display_name: The display_name of this SolutionModel.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def cloud_properties(self):
        """Gets the cloud_properties of this SolutionModel.

        The cloud properties defined by the solution model.

        :return: The cloud_properties of this SolutionModel.
        :rtype: List[Capability]
        """
        return self._cloud_properties

    @cloud_properties.setter
    def cloud_properties(self, cloud_properties):
        """Sets the cloud_properties of this SolutionModel.

        The cloud properties defined by the solution model.

        :param cloud_properties: The cloud_properties of this SolutionModel.
        :type cloud_properties: List[Capability]
        """

        self._cloud_properties = cloud_properties

    @property
    def initial_values(self):
        """Gets the initial_values of this SolutionModel.

        The initial values defined by the solution model.

        :return: The initial_values of this SolutionModel.
        :rtype: List[InitialValue]
        """
        return self._initial_values

    @initial_values.setter
    def initial_values(self, initial_values):
        """Sets the initial_values of this SolutionModel.

        The initial values defined by the solution model.

        :param initial_values: The initial_values of this SolutionModel.
        :type initial_values: List[InitialValue]
        """

        self._initial_values = initial_values

    @property
    def overrides(self):
        """Gets the overrides of this SolutionModel.

        The overrides defined by the solution model.

        :return: The overrides of this SolutionModel.
        :rtype: List[Override]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this SolutionModel.

        The overrides defined by the solution model.

        :param overrides: The overrides of this SolutionModel.
        :type overrides: List[Override]
        """

        self._overrides = overrides
