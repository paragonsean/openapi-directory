# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CapabilityReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: object=None, id: str=None, type: List[str]=None, comment: str=None, description: str=None, display_name: str=None, component: str=None, reference: str=None):
        """CapabilityReference - a model defined in OpenAPI

        :param context: The context of this CapabilityReference.
        :param id: The id of this CapabilityReference.
        :param type: The type of this CapabilityReference.
        :param comment: The comment of this CapabilityReference.
        :param description: The description of this CapabilityReference.
        :param display_name: The display_name of this CapabilityReference.
        :param component: The component of this CapabilityReference.
        :param reference: The reference of this CapabilityReference.
        """
        self.openapi_types = {
            'context': object,
            'id': str,
            'type': List[str],
            'comment': str,
            'description': str,
            'display_name': str,
            'component': str,
            'reference': str
        }

        self.attribute_map = {
            'context': '@context',
            'id': '@id',
            'type': '@type',
            'comment': 'comment',
            'description': 'description',
            'display_name': 'displayName',
            'component': 'component',
            'reference': 'reference'
        }

        self._context = context
        self._id = id
        self._type = type
        self._comment = comment
        self._description = description
        self._display_name = display_name
        self._component = component
        self._reference = reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CapabilityReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CapabilityReference of this CapabilityReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this CapabilityReference.

        JSON-LD context for the entity.

        :return: The context of this CapabilityReference.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this CapabilityReference.

        JSON-LD context for the entity.

        :param context: The context of this CapabilityReference.
        :type context: object
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this CapabilityReference.

        Unique ID of the entity.

        :return: The id of this CapabilityReference.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CapabilityReference.

        Unique ID of the entity.

        :param id: The id of this CapabilityReference.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this CapabilityReference.

        Type of the entity.

        :return: The type of this CapabilityReference.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CapabilityReference.

        Type of the entity.

        :param type: The type of this CapabilityReference.
        :type type: List[str]
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, number of items must be greater than or equal to `1`")

        self._type = type

    @property
    def comment(self):
        """Gets the comment of this CapabilityReference.

        Developer comment about the entity.

        :return: The comment of this CapabilityReference.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CapabilityReference.

        Developer comment about the entity.

        :param comment: The comment of this CapabilityReference.
        :type comment: str
        """

        self._comment = comment

    @property
    def description(self):
        """Gets the description of this CapabilityReference.

        Detailed description of the entity.

        :return: The description of this CapabilityReference.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CapabilityReference.

        Detailed description of the entity.

        :param description: The description of this CapabilityReference.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this CapabilityReference.

        Display name of the entity.

        :return: The display_name of this CapabilityReference.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CapabilityReference.

        Display name of the entity.

        :param display_name: The display_name of this CapabilityReference.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def component(self):
        """Gets the component of this CapabilityReference.

        The name of the component being referenced.

        :return: The component of this CapabilityReference.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this CapabilityReference.

        The name of the component being referenced.

        :param component: The component of this CapabilityReference.
        :type component: str
        """

        self._component = component

    @property
    def reference(self):
        """Gets the reference of this CapabilityReference.

        The name of the capability being referenced.

        :return: The reference of this CapabilityReference.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CapabilityReference.

        The name of the capability being referenced.

        :param reference: The reference of this CapabilityReference.
        :type reference: str
        """

        self._reference = reference
