# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceCommand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, request: object=None, response: object=None, response_code: float=None):
        """DeviceCommand - a model defined in OpenAPI

        :param id: The id of this DeviceCommand.
        :param request: The request of this DeviceCommand.
        :param response: The response of this DeviceCommand.
        :param response_code: The response_code of this DeviceCommand.
        """
        self.openapi_types = {
            'id': str,
            'request': object,
            'response': object,
            'response_code': float
        }

        self.attribute_map = {
            'id': 'id',
            'request': 'request',
            'response': 'response',
            'response_code': 'responseCode'
        }

        self._id = id
        self._request = request
        self._response = response
        self._response_code = response_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceCommand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceCommand of this DeviceCommand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DeviceCommand.

        The request ID of the device command execution.

        :return: The id of this DeviceCommand.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceCommand.

        The request ID of the device command execution.

        :param id: The id of this DeviceCommand.
        :type id: str
        """

        self._id = id

    @property
    def request(self):
        """Gets the request of this DeviceCommand.

        The payload for the device command.

        :return: The request of this DeviceCommand.
        :rtype: object
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this DeviceCommand.

        The payload for the device command.

        :param request: The request of this DeviceCommand.
        :type request: object
        """

        self._request = request

    @property
    def response(self):
        """Gets the response of this DeviceCommand.

        The payload of the device command response.

        :return: The response of this DeviceCommand.
        :rtype: object
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this DeviceCommand.

        The payload of the device command response.

        :param response: The response of this DeviceCommand.
        :type response: object
        """

        self._response = response

    @property
    def response_code(self):
        """Gets the response_code of this DeviceCommand.

        The status code of the device command response.

        :return: The response_code of this DeviceCommand.
        :rtype: float
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this DeviceCommand.

        The status code of the device command response.

        :param response_code: The response_code of this DeviceCommand.
        :type response_code: float
        """

        self._response_code = response_code
