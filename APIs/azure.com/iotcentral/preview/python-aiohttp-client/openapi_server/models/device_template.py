# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capability_model import CapabilityModel
from openapi_server.models.solution_model import SolutionModel
from openapi_server import util


class DeviceTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capability_model: CapabilityModel=None, description: str=None, display_name: str=None, etag: str=None, id: str=None, solution_model: SolutionModel=None, types: List[str]=None):
        """DeviceTemplate - a model defined in OpenAPI

        :param capability_model: The capability_model of this DeviceTemplate.
        :param description: The description of this DeviceTemplate.
        :param display_name: The display_name of this DeviceTemplate.
        :param etag: The etag of this DeviceTemplate.
        :param id: The id of this DeviceTemplate.
        :param solution_model: The solution_model of this DeviceTemplate.
        :param types: The types of this DeviceTemplate.
        """
        self.openapi_types = {
            'capability_model': CapabilityModel,
            'description': str,
            'display_name': str,
            'etag': str,
            'id': str,
            'solution_model': SolutionModel,
            'types': List[str]
        }

        self.attribute_map = {
            'capability_model': 'capabilityModel',
            'description': 'description',
            'display_name': 'displayName',
            'etag': 'etag',
            'id': 'id',
            'solution_model': 'solutionModel',
            'types': 'types'
        }

        self._capability_model = capability_model
        self._description = description
        self._display_name = display_name
        self._etag = etag
        self._id = id
        self._solution_model = solution_model
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceTemplate of this DeviceTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capability_model(self):
        """Gets the capability_model of this DeviceTemplate.


        :return: The capability_model of this DeviceTemplate.
        :rtype: CapabilityModel
        """
        return self._capability_model

    @capability_model.setter
    def capability_model(self, capability_model):
        """Sets the capability_model of this DeviceTemplate.


        :param capability_model: The capability_model of this DeviceTemplate.
        :type capability_model: CapabilityModel
        """
        if capability_model is None:
            raise ValueError("Invalid value for `capability_model`, must not be `None`")

        self._capability_model = capability_model

    @property
    def description(self):
        """Gets the description of this DeviceTemplate.

        Detailed description of the device template.

        :return: The description of this DeviceTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceTemplate.

        Detailed description of the device template.

        :param description: The description of this DeviceTemplate.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this DeviceTemplate.

        Display name of the device template.

        :return: The display_name of this DeviceTemplate.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DeviceTemplate.

        Display name of the device template.

        :param display_name: The display_name of this DeviceTemplate.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this DeviceTemplate.

        ETag used to prevent conflict in device template updates.

        :return: The etag of this DeviceTemplate.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this DeviceTemplate.

        ETag used to prevent conflict in device template updates.

        :param etag: The etag of this DeviceTemplate.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this DeviceTemplate.

        Unique ID of the device template.

        :return: The id of this DeviceTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceTemplate.

        Unique ID of the device template.

        :param id: The id of this DeviceTemplate.
        :type id: str
        """

        self._id = id

    @property
    def solution_model(self):
        """Gets the solution_model of this DeviceTemplate.


        :return: The solution_model of this DeviceTemplate.
        :rtype: SolutionModel
        """
        return self._solution_model

    @solution_model.setter
    def solution_model(self, solution_model):
        """Sets the solution_model of this DeviceTemplate.


        :param solution_model: The solution_model of this DeviceTemplate.
        :type solution_model: SolutionModel
        """

        self._solution_model = solution_model

    @property
    def types(self):
        """Gets the types of this DeviceTemplate.

        The types of device to which this template applies.

        :return: The types of this DeviceTemplate.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this DeviceTemplate.

        The types of device to which this template applies.

        :param types: The types of this DeviceTemplate.
        :type types: List[str]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")

        self._types = types
