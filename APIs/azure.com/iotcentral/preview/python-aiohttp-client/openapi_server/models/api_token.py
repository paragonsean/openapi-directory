# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, roles: List[str]=None, expiry: datetime=None, id: str=None, token: str=None):
        """ApiToken - a model defined in OpenAPI

        :param roles: The roles of this ApiToken.
        :param expiry: The expiry of this ApiToken.
        :param id: The id of this ApiToken.
        :param token: The token of this ApiToken.
        """
        self.openapi_types = {
            'roles': List[str],
            'expiry': datetime,
            'id': str,
            'token': str
        }

        self.attribute_map = {
            'roles': 'roles',
            'expiry': 'expiry',
            'id': 'id',
            'token': 'token'
        }

        self._roles = roles
        self._expiry = expiry
        self._id = id
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiToken of this ApiToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def roles(self):
        """Gets the roles of this ApiToken.

        Roles that the permission has been granted permission to.

        :return: The roles of this ApiToken.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ApiToken.

        Roles that the permission has been granted permission to.

        :param roles: The roles of this ApiToken.
        :type roles: List[str]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")
        if roles is not None and len(roles) > 1:
            raise ValueError("Invalid value for `roles`, number of items must be less than or equal to `1`")
        if roles is not None and len(roles) < 1:
            raise ValueError("Invalid value for `roles`, number of items must be greater than or equal to `1`")

        self._roles = roles

    @property
    def expiry(self):
        """Gets the expiry of this ApiToken.

        String-formatted date representing the time when the token expires

        :return: The expiry of this ApiToken.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this ApiToken.

        String-formatted date representing the time when the token expires

        :param expiry: The expiry of this ApiToken.
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def id(self):
        """Gets the id of this ApiToken.

        Unique ID of the api token.

        :return: The id of this ApiToken.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiToken.

        Unique ID of the api token.

        :param id: The id of this ApiToken.
        :type id: str
        """

        self._id = id

    @property
    def token(self):
        """Gets the token of this ApiToken.

        Value of the api token.

        :return: The token of this ApiToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ApiToken.

        Value of the api token.

        :param token: The token of this ApiToken.
        :type token: str
        """

        self._token = token
