# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.symmetric_key import SymmetricKey
from openapi_server import util


class DeviceCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope_id: str=None, symmetric_key: SymmetricKey=None):
        """DeviceCredentials - a model defined in OpenAPI

        :param scope_id: The scope_id of this DeviceCredentials.
        :param symmetric_key: The symmetric_key of this DeviceCredentials.
        """
        self.openapi_types = {
            'scope_id': str,
            'symmetric_key': SymmetricKey
        }

        self.attribute_map = {
            'scope_id': 'scopeId',
            'symmetric_key': 'symmetricKey'
        }

        self._scope_id = scope_id
        self._symmetric_key = symmetric_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceCredentials of this DeviceCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope_id(self):
        """Gets the scope_id of this DeviceCredentials.

        Scope id for connecting to device provisioning service.

        :return: The scope_id of this DeviceCredentials.
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this DeviceCredentials.

        Scope id for connecting to device provisioning service.

        :param scope_id: The scope_id of this DeviceCredentials.
        :type scope_id: str
        """
        if scope_id is None:
            raise ValueError("Invalid value for `scope_id`, must not be `None`")

        self._scope_id = scope_id

    @property
    def symmetric_key(self):
        """Gets the symmetric_key of this DeviceCredentials.


        :return: The symmetric_key of this DeviceCredentials.
        :rtype: SymmetricKey
        """
        return self._symmetric_key

    @symmetric_key.setter
    def symmetric_key(self, symmetric_key):
        """Sets the symmetric_key of this DeviceCredentials.


        :param symmetric_key: The symmetric_key of this DeviceCredentials.
        :type symmetric_key: SymmetricKey
        """
        if symmetric_key is None:
            raise ValueError("Invalid value for `symmetric_key`, must not be `None`")

        self._symmetric_key = symmetric_key
