/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceTemplate::OAIDeviceTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceTemplate::OAIDeviceTemplate() {
    this->initializeModel();
}

OAIDeviceTemplate::~OAIDeviceTemplate() {}

void OAIDeviceTemplate::initializeModel() {

    m_capability_model_isSet = false;
    m_capability_model_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_solution_model_isSet = false;
    m_solution_model_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIDeviceTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceTemplate::fromJsonObject(QJsonObject json) {

    m_capability_model_isValid = ::OpenAPI::fromJsonValue(m_capability_model, json[QString("capabilityModel")]);
    m_capability_model_isSet = !json[QString("capabilityModel")].isNull() && m_capability_model_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_solution_model_isValid = ::OpenAPI::fromJsonValue(m_solution_model, json[QString("solutionModel")]);
    m_solution_model_isSet = !json[QString("solutionModel")].isNull() && m_solution_model_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIDeviceTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_capability_model.isSet()) {
        obj.insert(QString("capabilityModel"), ::OpenAPI::toJsonValue(m_capability_model));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_solution_model.isSet()) {
        obj.insert(QString("solutionModel"), ::OpenAPI::toJsonValue(m_solution_model));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

OAICapabilityModel OAIDeviceTemplate::getCapabilityModel() const {
    return m_capability_model;
}
void OAIDeviceTemplate::setCapabilityModel(const OAICapabilityModel &capability_model) {
    m_capability_model = capability_model;
    m_capability_model_isSet = true;
}

bool OAIDeviceTemplate::is_capability_model_Set() const{
    return m_capability_model_isSet;
}

bool OAIDeviceTemplate::is_capability_model_Valid() const{
    return m_capability_model_isValid;
}

QString OAIDeviceTemplate::getDescription() const {
    return m_description;
}
void OAIDeviceTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeviceTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeviceTemplate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDeviceTemplate::getDisplayName() const {
    return m_display_name;
}
void OAIDeviceTemplate::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDeviceTemplate::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDeviceTemplate::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDeviceTemplate::getEtag() const {
    return m_etag;
}
void OAIDeviceTemplate::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIDeviceTemplate::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIDeviceTemplate::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIDeviceTemplate::getId() const {
    return m_id;
}
void OAIDeviceTemplate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceTemplate::is_id_Valid() const{
    return m_id_isValid;
}

OAISolutionModel OAIDeviceTemplate::getSolutionModel() const {
    return m_solution_model;
}
void OAIDeviceTemplate::setSolutionModel(const OAISolutionModel &solution_model) {
    m_solution_model = solution_model;
    m_solution_model_isSet = true;
}

bool OAIDeviceTemplate::is_solution_model_Set() const{
    return m_solution_model_isSet;
}

bool OAIDeviceTemplate::is_solution_model_Valid() const{
    return m_solution_model_isValid;
}

QList<QString> OAIDeviceTemplate::getTypes() const {
    return m_types;
}
void OAIDeviceTemplate::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIDeviceTemplate::is_types_Set() const{
    return m_types_isSet;
}

bool OAIDeviceTemplate::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIDeviceTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capability_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_capability_model_isValid && m_types_isValid && true;
}

} // namespace OpenAPI
