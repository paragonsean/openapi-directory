/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOverride::OAIOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOverride::OAIOverride() {
    this->initializeModel();
}

OAIOverride::~OAIOverride() {}

void OAIOverride::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_capability_isSet = false;
    m_capability_isValid = false;

    m_display_unit_isSet = false;
    m_display_unit_isValid = false;

    m_semantic_type_isSet = false;
    m_semantic_type_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_detail_isSet = false;
    m_value_detail_isValid = false;
}

void OAIOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOverride::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("@context")]);
    m_context_isSet = !json[QString("@context")].isNull() && m_context_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("@id")]);
    m_id_isSet = !json[QString("@id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("@type")]);
    m_type_isSet = !json[QString("@type")].isNull() && m_type_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_capability_isValid = ::OpenAPI::fromJsonValue(m_capability, json[QString("capability")]);
    m_capability_isSet = !json[QString("capability")].isNull() && m_capability_isValid;

    m_display_unit_isValid = ::OpenAPI::fromJsonValue(m_display_unit, json[QString("displayUnit")]);
    m_display_unit_isSet = !json[QString("displayUnit")].isNull() && m_display_unit_isValid;

    m_semantic_type_isValid = ::OpenAPI::fromJsonValue(m_semantic_type, json[QString("semanticType")]);
    m_semantic_type_isSet = !json[QString("semanticType")].isNull() && m_semantic_type_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_value_detail_isValid = ::OpenAPI::fromJsonValue(m_value_detail, json[QString("valueDetail")]);
    m_value_detail_isSet = !json[QString("valueDetail")].isNull() && m_value_detail_isValid;
}

QString OAIOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("@context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_id_isSet) {
        obj.insert(QString("@id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.size() > 0) {
        obj.insert(QString("@type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_capability.isSet()) {
        obj.insert(QString("capability"), ::OpenAPI::toJsonValue(m_capability));
    }
    if (m_display_unit_isSet) {
        obj.insert(QString("displayUnit"), ::OpenAPI::toJsonValue(m_display_unit));
    }
    if (m_semantic_type_isSet) {
        obj.insert(QString("semanticType"), ::OpenAPI::toJsonValue(m_semantic_type));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_detail.isSet()) {
        obj.insert(QString("valueDetail"), ::OpenAPI::toJsonValue(m_value_detail));
    }
    return obj;
}

OAIObject OAIOverride::getContext() const {
    return m_context;
}
void OAIOverride::setContext(const OAIObject &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIOverride::is_context_Set() const{
    return m_context_isSet;
}

bool OAIOverride::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIOverride::getId() const {
    return m_id;
}
void OAIOverride::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOverride::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOverride::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIOverride::getType() const {
    return m_type;
}
void OAIOverride::setType(const QList<QString> &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOverride::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOverride::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOverride::getComment() const {
    return m_comment;
}
void OAIOverride::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIOverride::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIOverride::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIOverride::getDescription() const {
    return m_description;
}
void OAIOverride::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOverride::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOverride::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOverride::getDisplayName() const {
    return m_display_name;
}
void OAIOverride::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIOverride::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIOverride::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAICapabilityReference OAIOverride::getCapability() const {
    return m_capability;
}
void OAIOverride::setCapability(const OAICapabilityReference &capability) {
    m_capability = capability;
    m_capability_isSet = true;
}

bool OAIOverride::is_capability_Set() const{
    return m_capability_isSet;
}

bool OAIOverride::is_capability_Valid() const{
    return m_capability_isValid;
}

QString OAIOverride::getDisplayUnit() const {
    return m_display_unit;
}
void OAIOverride::setDisplayUnit(const QString &display_unit) {
    m_display_unit = display_unit;
    m_display_unit_isSet = true;
}

bool OAIOverride::is_display_unit_Set() const{
    return m_display_unit_isSet;
}

bool OAIOverride::is_display_unit_Valid() const{
    return m_display_unit_isValid;
}

QString OAIOverride::getSemanticType() const {
    return m_semantic_type;
}
void OAIOverride::setSemanticType(const QString &semantic_type) {
    m_semantic_type = semantic_type;
    m_semantic_type_isSet = true;
}

bool OAIOverride::is_semantic_type_Set() const{
    return m_semantic_type_isSet;
}

bool OAIOverride::is_semantic_type_Valid() const{
    return m_semantic_type_isValid;
}

QString OAIOverride::getUnit() const {
    return m_unit;
}
void OAIOverride::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIOverride::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIOverride::is_unit_Valid() const{
    return m_unit_isValid;
}

OAIValueDetail OAIOverride::getValueDetail() const {
    return m_value_detail;
}
void OAIOverride::setValueDetail(const OAIValueDetail &value_detail) {
    m_value_detail = value_detail;
    m_value_detail_isSet = true;
}

bool OAIOverride::is_value_detail_Set() const{
    return m_value_detail_isSet;
}

bool OAIOverride::is_value_detail_Valid() const{
    return m_value_detail_isValid;
}

bool OAIOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_semantic_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
