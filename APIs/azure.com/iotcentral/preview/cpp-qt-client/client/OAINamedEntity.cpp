/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamedEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamedEntity::OAINamedEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamedEntity::OAINamedEntity() {
    this->initializeModel();
}

OAINamedEntity::~OAINamedEntity() {}

void OAINamedEntity::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAINamedEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamedEntity::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("@context")]);
    m_context_isSet = !json[QString("@context")].isNull() && m_context_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("@id")]);
    m_id_isSet = !json[QString("@id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("@type")]);
    m_type_isSet = !json[QString("@type")].isNull() && m_type_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAINamedEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamedEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("@context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_id_isSet) {
        obj.insert(QString("@id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.size() > 0) {
        obj.insert(QString("@type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIObject OAINamedEntity::getContext() const {
    return m_context;
}
void OAINamedEntity::setContext(const OAIObject &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAINamedEntity::is_context_Set() const{
    return m_context_isSet;
}

bool OAINamedEntity::is_context_Valid() const{
    return m_context_isValid;
}

QString OAINamedEntity::getId() const {
    return m_id;
}
void OAINamedEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINamedEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAINamedEntity::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAINamedEntity::getType() const {
    return m_type;
}
void OAINamedEntity::setType(const QList<QString> &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINamedEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAINamedEntity::is_type_Valid() const{
    return m_type_isValid;
}

QString OAINamedEntity::getComment() const {
    return m_comment;
}
void OAINamedEntity::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAINamedEntity::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAINamedEntity::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAINamedEntity::getDescription() const {
    return m_description;
}
void OAINamedEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINamedEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAINamedEntity::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINamedEntity::getDisplayName() const {
    return m_display_name;
}
void OAINamedEntity::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAINamedEntity::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAINamedEntity::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAINamedEntity::getName() const {
    return m_name;
}
void OAINamedEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINamedEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAINamedEntity::is_name_Valid() const{
    return m_name_isValid;
}

bool OAINamedEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamedEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
