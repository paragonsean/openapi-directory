/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiToken.h"
#include "OAIApiTokenCollection.h"
#include "OAIContinuousDataExport.h"
#include "OAIContinuousDataExportCollection.h"
#include "OAIDevice.h"
#include "OAIDeviceCollection.h"
#include "OAIDeviceCommand.h"
#include "OAIDeviceCommandCollection.h"
#include "OAIDeviceCredentials.h"
#include "OAIDeviceTemplate.h"
#include "OAIDeviceTemplateCollection.h"
#include "OAIRole.h"
#include "OAIRoleCollection.h"
#include "OAIValue.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token_id QString [required]
    */
    virtual void apiTokensGet(const QString &token_id);


    virtual void apiTokensList();

    /**
    * @param[in]  token_id QString [required]
    */
    virtual void apiTokensRemove(const QString &token_id);

    /**
    * @param[in]  token_id QString [required]
    * @param[in]  body OAIApiToken [required]
    */
    virtual void apiTokensSet(const QString &token_id, const OAIApiToken &body);

    /**
    * @param[in]  export_id QString [required]
    */
    virtual void continuousDataExportsGet(const QString &export_id);


    virtual void continuousDataExportsList();

    /**
    * @param[in]  export_id QString [required]
    */
    virtual void continuousDataExportsRemove(const QString &export_id);

    /**
    * @param[in]  export_id QString [required]
    * @param[in]  body OAIContinuousDataExport [required]
    */
    virtual void continuousDataExportsSet(const QString &export_id, const OAIContinuousDataExport &body);

    /**
    * @param[in]  device_template_id QString [required]
    */
    virtual void deviceTemplatesGet(const QString &device_template_id);

    /**
    * @param[in]  device_template_id QString [required]
    */
    virtual void deviceTemplatesGetMerged(const QString &device_template_id);


    virtual void deviceTemplatesList();

    /**
    * @param[in]  device_template_id QString [required]
    */
    virtual void deviceTemplatesListDevices(const QString &device_template_id);

    /**
    * @param[in]  device_template_id QString [required]
    */
    virtual void deviceTemplatesRemove(const QString &device_template_id);

    /**
    * @param[in]  device_template_id QString [required]
    * @param[in]  body OAIDeviceTemplate [required]
    */
    virtual void deviceTemplatesSet(const QString &device_template_id, const OAIDeviceTemplate &body);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  component_name QString [required]
    * @param[in]  command_name QString [required]
    * @param[in]  body OAIDeviceCommand [required]
    */
    virtual void devicesExecuteCommand(const QString &device_id, const QString &component_name, const QString &command_name, const OAIDeviceCommand &body);

    /**
    * @param[in]  device_id QString [required]
    */
    virtual void devicesGet(const QString &device_id);

    /**
    * @param[in]  device_id QString [required]
    */
    virtual void devicesGetCloudProperties(const QString &device_id);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  component_name QString [required]
    * @param[in]  command_name QString [required]
    */
    virtual void devicesGetCommandHistory(const QString &device_id, const QString &component_name, const QString &command_name);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  component_name QString [required]
    */
    virtual void devicesGetComponentProperties(const QString &device_id, const QString &component_name);

    /**
    * @param[in]  device_id QString [required]
    */
    virtual void devicesGetCredentials(const QString &device_id);

    /**
    * @param[in]  device_id QString [required]
    */
    virtual void devicesGetProperties(const QString &device_id);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  component_name QString [required]
    * @param[in]  telemetry_name QString [required]
    */
    virtual void devicesGetTelemetryValue(const QString &device_id, const QString &component_name, const QString &telemetry_name);


    virtual void devicesList();

    /**
    * @param[in]  device_id QString [required]
    */
    virtual void devicesRemove(const QString &device_id);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  body OAIDevice [required]
    */
    virtual void devicesSet(const QString &device_id, const OAIDevice &body);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  body QMap<QString, QJsonValue> [required]
    */
    virtual void devicesUpdateCloudProperties(const QString &device_id, const QMap<QString, QJsonValue> &body);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  component_name QString [required]
    * @param[in]  body QMap<QString, QJsonValue> [required]
    */
    virtual void devicesUpdateComponentProperties(const QString &device_id, const QString &component_name, const QMap<QString, QJsonValue> &body);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  body QMap<QString, QJsonValue> [required]
    */
    virtual void devicesUpdateProperties(const QString &device_id, const QMap<QString, QJsonValue> &body);

    /**
    * @param[in]  role_id QString [required]
    */
    virtual void rolesGet(const QString &role_id);


    virtual void rolesList();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTokensGetCallback(OAIHttpRequestWorker *worker);
    void apiTokensListCallback(OAIHttpRequestWorker *worker);
    void apiTokensRemoveCallback(OAIHttpRequestWorker *worker);
    void apiTokensSetCallback(OAIHttpRequestWorker *worker);
    void continuousDataExportsGetCallback(OAIHttpRequestWorker *worker);
    void continuousDataExportsListCallback(OAIHttpRequestWorker *worker);
    void continuousDataExportsRemoveCallback(OAIHttpRequestWorker *worker);
    void continuousDataExportsSetCallback(OAIHttpRequestWorker *worker);
    void deviceTemplatesGetCallback(OAIHttpRequestWorker *worker);
    void deviceTemplatesGetMergedCallback(OAIHttpRequestWorker *worker);
    void deviceTemplatesListCallback(OAIHttpRequestWorker *worker);
    void deviceTemplatesListDevicesCallback(OAIHttpRequestWorker *worker);
    void deviceTemplatesRemoveCallback(OAIHttpRequestWorker *worker);
    void deviceTemplatesSetCallback(OAIHttpRequestWorker *worker);
    void devicesExecuteCommandCallback(OAIHttpRequestWorker *worker);
    void devicesGetCallback(OAIHttpRequestWorker *worker);
    void devicesGetCloudPropertiesCallback(OAIHttpRequestWorker *worker);
    void devicesGetCommandHistoryCallback(OAIHttpRequestWorker *worker);
    void devicesGetComponentPropertiesCallback(OAIHttpRequestWorker *worker);
    void devicesGetCredentialsCallback(OAIHttpRequestWorker *worker);
    void devicesGetPropertiesCallback(OAIHttpRequestWorker *worker);
    void devicesGetTelemetryValueCallback(OAIHttpRequestWorker *worker);
    void devicesListCallback(OAIHttpRequestWorker *worker);
    void devicesRemoveCallback(OAIHttpRequestWorker *worker);
    void devicesSetCallback(OAIHttpRequestWorker *worker);
    void devicesUpdateCloudPropertiesCallback(OAIHttpRequestWorker *worker);
    void devicesUpdateComponentPropertiesCallback(OAIHttpRequestWorker *worker);
    void devicesUpdatePropertiesCallback(OAIHttpRequestWorker *worker);
    void rolesGetCallback(OAIHttpRequestWorker *worker);
    void rolesListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTokensGetSignal(OAIApiToken summary);
    void apiTokensListSignal(OAIApiTokenCollection summary);
    void apiTokensRemoveSignal();
    void apiTokensSetSignal(OAIApiToken summary);
    void continuousDataExportsGetSignal(OAIContinuousDataExport summary);
    void continuousDataExportsListSignal(OAIContinuousDataExportCollection summary);
    void continuousDataExportsRemoveSignal();
    void continuousDataExportsSetSignal(OAIContinuousDataExport summary);
    void deviceTemplatesGetSignal(OAIDeviceTemplate summary);
    void deviceTemplatesGetMergedSignal(OAIDeviceTemplate summary);
    void deviceTemplatesListSignal(OAIDeviceTemplateCollection summary);
    void deviceTemplatesListDevicesSignal(OAIDeviceCollection summary);
    void deviceTemplatesRemoveSignal();
    void deviceTemplatesSetSignal(OAIDeviceTemplate summary);
    void devicesExecuteCommandSignal(OAIDeviceCommand summary);
    void devicesGetSignal(OAIDevice summary);
    void devicesGetCloudPropertiesSignal(QMap<QString, QJsonValue> summary);
    void devicesGetCommandHistorySignal(OAIDeviceCommandCollection summary);
    void devicesGetComponentPropertiesSignal(QMap<QString, QJsonValue> summary);
    void devicesGetCredentialsSignal(OAIDeviceCredentials summary);
    void devicesGetPropertiesSignal(QMap<QString, QJsonValue> summary);
    void devicesGetTelemetryValueSignal(OAIValue summary);
    void devicesListSignal(OAIDeviceCollection summary);
    void devicesRemoveSignal();
    void devicesSetSignal(OAIDevice summary);
    void devicesUpdateCloudPropertiesSignal(QMap<QString, QJsonValue> summary);
    void devicesUpdateComponentPropertiesSignal(QMap<QString, QJsonValue> summary);
    void devicesUpdatePropertiesSignal(QMap<QString, QJsonValue> summary);
    void rolesGetSignal(OAIRole summary);
    void rolesListSignal(OAIRoleCollection summary);


    void apiTokensGetSignalFull(OAIHttpRequestWorker *worker, OAIApiToken summary);
    void apiTokensListSignalFull(OAIHttpRequestWorker *worker, OAIApiTokenCollection summary);
    void apiTokensRemoveSignalFull(OAIHttpRequestWorker *worker);
    void apiTokensSetSignalFull(OAIHttpRequestWorker *worker, OAIApiToken summary);
    void continuousDataExportsGetSignalFull(OAIHttpRequestWorker *worker, OAIContinuousDataExport summary);
    void continuousDataExportsListSignalFull(OAIHttpRequestWorker *worker, OAIContinuousDataExportCollection summary);
    void continuousDataExportsRemoveSignalFull(OAIHttpRequestWorker *worker);
    void continuousDataExportsSetSignalFull(OAIHttpRequestWorker *worker, OAIContinuousDataExport summary);
    void deviceTemplatesGetSignalFull(OAIHttpRequestWorker *worker, OAIDeviceTemplate summary);
    void deviceTemplatesGetMergedSignalFull(OAIHttpRequestWorker *worker, OAIDeviceTemplate summary);
    void deviceTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDeviceTemplateCollection summary);
    void deviceTemplatesListDevicesSignalFull(OAIHttpRequestWorker *worker, OAIDeviceCollection summary);
    void deviceTemplatesRemoveSignalFull(OAIHttpRequestWorker *worker);
    void deviceTemplatesSetSignalFull(OAIHttpRequestWorker *worker, OAIDeviceTemplate summary);
    void devicesExecuteCommandSignalFull(OAIHttpRequestWorker *worker, OAIDeviceCommand summary);
    void devicesGetSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void devicesGetCloudPropertiesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void devicesGetCommandHistorySignalFull(OAIHttpRequestWorker *worker, OAIDeviceCommandCollection summary);
    void devicesGetComponentPropertiesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void devicesGetCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIDeviceCredentials summary);
    void devicesGetPropertiesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void devicesGetTelemetryValueSignalFull(OAIHttpRequestWorker *worker, OAIValue summary);
    void devicesListSignalFull(OAIHttpRequestWorker *worker, OAIDeviceCollection summary);
    void devicesRemoveSignalFull(OAIHttpRequestWorker *worker);
    void devicesSetSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void devicesUpdateCloudPropertiesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void devicesUpdateComponentPropertiesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void devicesUpdatePropertiesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void rolesGetSignalFull(OAIHttpRequestWorker *worker, OAIRole summary);
    void rolesListSignalFull(OAIHttpRequestWorker *worker, OAIRoleCollection summary);

    Q_DECL_DEPRECATED_X("Use apiTokensGetSignalError() instead")
    void apiTokensGetSignalE(OAIApiToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTokensGetSignalError(OAIApiToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTokensListSignalError() instead")
    void apiTokensListSignalE(OAIApiTokenCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTokensListSignalError(OAIApiTokenCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTokensRemoveSignalError() instead")
    void apiTokensRemoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTokensRemoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTokensSetSignalError() instead")
    void apiTokensSetSignalE(OAIApiToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTokensSetSignalError(OAIApiToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use continuousDataExportsGetSignalError() instead")
    void continuousDataExportsGetSignalE(OAIContinuousDataExport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void continuousDataExportsGetSignalError(OAIContinuousDataExport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use continuousDataExportsListSignalError() instead")
    void continuousDataExportsListSignalE(OAIContinuousDataExportCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void continuousDataExportsListSignalError(OAIContinuousDataExportCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use continuousDataExportsRemoveSignalError() instead")
    void continuousDataExportsRemoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void continuousDataExportsRemoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use continuousDataExportsSetSignalError() instead")
    void continuousDataExportsSetSignalE(OAIContinuousDataExport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void continuousDataExportsSetSignalError(OAIContinuousDataExport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceTemplatesGetSignalError() instead")
    void deviceTemplatesGetSignalE(OAIDeviceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceTemplatesGetSignalError(OAIDeviceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceTemplatesGetMergedSignalError() instead")
    void deviceTemplatesGetMergedSignalE(OAIDeviceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceTemplatesGetMergedSignalError(OAIDeviceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceTemplatesListSignalError() instead")
    void deviceTemplatesListSignalE(OAIDeviceTemplateCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceTemplatesListSignalError(OAIDeviceTemplateCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceTemplatesListDevicesSignalError() instead")
    void deviceTemplatesListDevicesSignalE(OAIDeviceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceTemplatesListDevicesSignalError(OAIDeviceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceTemplatesRemoveSignalError() instead")
    void deviceTemplatesRemoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deviceTemplatesRemoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceTemplatesSetSignalError() instead")
    void deviceTemplatesSetSignalE(OAIDeviceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceTemplatesSetSignalError(OAIDeviceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesExecuteCommandSignalError() instead")
    void devicesExecuteCommandSignalE(OAIDeviceCommand summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesExecuteCommandSignalError(OAIDeviceCommand summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetSignalError() instead")
    void devicesGetSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetCloudPropertiesSignalError() instead")
    void devicesGetCloudPropertiesSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetCloudPropertiesSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetCommandHistorySignalError() instead")
    void devicesGetCommandHistorySignalE(OAIDeviceCommandCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetCommandHistorySignalError(OAIDeviceCommandCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetComponentPropertiesSignalError() instead")
    void devicesGetComponentPropertiesSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetComponentPropertiesSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetCredentialsSignalError() instead")
    void devicesGetCredentialsSignalE(OAIDeviceCredentials summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetCredentialsSignalError(OAIDeviceCredentials summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetPropertiesSignalError() instead")
    void devicesGetPropertiesSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetPropertiesSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetTelemetryValueSignalError() instead")
    void devicesGetTelemetryValueSignalE(OAIValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetTelemetryValueSignalError(OAIValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListSignalError() instead")
    void devicesListSignalE(OAIDeviceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListSignalError(OAIDeviceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesRemoveSignalError() instead")
    void devicesRemoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesRemoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesSetSignalError() instead")
    void devicesSetSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesSetSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUpdateCloudPropertiesSignalError() instead")
    void devicesUpdateCloudPropertiesSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUpdateCloudPropertiesSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUpdateComponentPropertiesSignalError() instead")
    void devicesUpdateComponentPropertiesSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUpdateComponentPropertiesSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUpdatePropertiesSignalError() instead")
    void devicesUpdatePropertiesSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUpdatePropertiesSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesGetSignalError() instead")
    void rolesGetSignalE(OAIRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesGetSignalError(OAIRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesListSignalError() instead")
    void rolesListSignalE(OAIRoleCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesListSignalError(OAIRoleCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTokensGetSignalErrorFull() instead")
    void apiTokensGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTokensGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTokensListSignalErrorFull() instead")
    void apiTokensListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTokensListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTokensRemoveSignalErrorFull() instead")
    void apiTokensRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTokensRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTokensSetSignalErrorFull() instead")
    void apiTokensSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTokensSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use continuousDataExportsGetSignalErrorFull() instead")
    void continuousDataExportsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void continuousDataExportsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use continuousDataExportsListSignalErrorFull() instead")
    void continuousDataExportsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void continuousDataExportsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use continuousDataExportsRemoveSignalErrorFull() instead")
    void continuousDataExportsRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void continuousDataExportsRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use continuousDataExportsSetSignalErrorFull() instead")
    void continuousDataExportsSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void continuousDataExportsSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceTemplatesGetSignalErrorFull() instead")
    void deviceTemplatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceTemplatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceTemplatesGetMergedSignalErrorFull() instead")
    void deviceTemplatesGetMergedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceTemplatesGetMergedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceTemplatesListSignalErrorFull() instead")
    void deviceTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceTemplatesListDevicesSignalErrorFull() instead")
    void deviceTemplatesListDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceTemplatesListDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceTemplatesRemoveSignalErrorFull() instead")
    void deviceTemplatesRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceTemplatesRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deviceTemplatesSetSignalErrorFull() instead")
    void deviceTemplatesSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deviceTemplatesSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesExecuteCommandSignalErrorFull() instead")
    void devicesExecuteCommandSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesExecuteCommandSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetSignalErrorFull() instead")
    void devicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetCloudPropertiesSignalErrorFull() instead")
    void devicesGetCloudPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetCloudPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetCommandHistorySignalErrorFull() instead")
    void devicesGetCommandHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetCommandHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetComponentPropertiesSignalErrorFull() instead")
    void devicesGetComponentPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetComponentPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetCredentialsSignalErrorFull() instead")
    void devicesGetCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetPropertiesSignalErrorFull() instead")
    void devicesGetPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetTelemetryValueSignalErrorFull() instead")
    void devicesGetTelemetryValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetTelemetryValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListSignalErrorFull() instead")
    void devicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesRemoveSignalErrorFull() instead")
    void devicesRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesSetSignalErrorFull() instead")
    void devicesSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUpdateCloudPropertiesSignalErrorFull() instead")
    void devicesUpdateCloudPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUpdateCloudPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUpdateComponentPropertiesSignalErrorFull() instead")
    void devicesUpdateComponentPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUpdateComponentPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUpdatePropertiesSignalErrorFull() instead")
    void devicesUpdatePropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUpdatePropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesGetSignalErrorFull() instead")
    void rolesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rolesListSignalErrorFull() instead")
    void rolesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rolesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
