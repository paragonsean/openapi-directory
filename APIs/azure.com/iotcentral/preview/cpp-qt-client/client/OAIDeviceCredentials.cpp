/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceCredentials::OAIDeviceCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceCredentials::OAIDeviceCredentials() {
    this->initializeModel();
}

OAIDeviceCredentials::~OAIDeviceCredentials() {}

void OAIDeviceCredentials::initializeModel() {

    m_scope_id_isSet = false;
    m_scope_id_isValid = false;

    m_symmetric_key_isSet = false;
    m_symmetric_key_isValid = false;
}

void OAIDeviceCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceCredentials::fromJsonObject(QJsonObject json) {

    m_scope_id_isValid = ::OpenAPI::fromJsonValue(m_scope_id, json[QString("scopeId")]);
    m_scope_id_isSet = !json[QString("scopeId")].isNull() && m_scope_id_isValid;

    m_symmetric_key_isValid = ::OpenAPI::fromJsonValue(m_symmetric_key, json[QString("symmetricKey")]);
    m_symmetric_key_isSet = !json[QString("symmetricKey")].isNull() && m_symmetric_key_isValid;
}

QString OAIDeviceCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_scope_id_isSet) {
        obj.insert(QString("scopeId"), ::OpenAPI::toJsonValue(m_scope_id));
    }
    if (m_symmetric_key.isSet()) {
        obj.insert(QString("symmetricKey"), ::OpenAPI::toJsonValue(m_symmetric_key));
    }
    return obj;
}

QString OAIDeviceCredentials::getScopeId() const {
    return m_scope_id;
}
void OAIDeviceCredentials::setScopeId(const QString &scope_id) {
    m_scope_id = scope_id;
    m_scope_id_isSet = true;
}

bool OAIDeviceCredentials::is_scope_id_Set() const{
    return m_scope_id_isSet;
}

bool OAIDeviceCredentials::is_scope_id_Valid() const{
    return m_scope_id_isValid;
}

OAISymmetricKey OAIDeviceCredentials::getSymmetricKey() const {
    return m_symmetric_key;
}
void OAIDeviceCredentials::setSymmetricKey(const OAISymmetricKey &symmetric_key) {
    m_symmetric_key = symmetric_key;
    m_symmetric_key_isSet = true;
}

bool OAIDeviceCredentials::is_symmetric_key_Set() const{
    return m_symmetric_key_isSet;
}

bool OAIDeviceCredentials::is_symmetric_key_Valid() const{
    return m_symmetric_key_isValid;
}

bool OAIDeviceCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scope_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symmetric_key.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_scope_id_isValid && m_symmetric_key_isValid && true;
}

} // namespace OpenAPI
