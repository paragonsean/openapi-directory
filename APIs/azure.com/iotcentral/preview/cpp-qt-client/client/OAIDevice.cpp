/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice::OAIDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice::OAIDevice() {
    this->initializeModel();
}

OAIDevice::~OAIDevice() {}

void OAIDevice::initializeModel() {

    m_approved_isSet = false;
    m_approved_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_of_isSet = false;
    m_instance_of_isValid = false;

    m_provisioned_isSet = false;
    m_provisioned_isValid = false;

    m_simulated_isSet = false;
    m_simulated_isValid = false;
}

void OAIDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice::fromJsonObject(QJsonObject json) {

    m_approved_isValid = ::OpenAPI::fromJsonValue(m_approved, json[QString("approved")]);
    m_approved_isSet = !json[QString("approved")].isNull() && m_approved_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instance_of_isValid = ::OpenAPI::fromJsonValue(m_instance_of, json[QString("instanceOf")]);
    m_instance_of_isSet = !json[QString("instanceOf")].isNull() && m_instance_of_isValid;

    m_provisioned_isValid = ::OpenAPI::fromJsonValue(m_provisioned, json[QString("provisioned")]);
    m_provisioned_isSet = !json[QString("provisioned")].isNull() && m_provisioned_isValid;

    m_simulated_isValid = ::OpenAPI::fromJsonValue(m_simulated, json[QString("simulated")]);
    m_simulated_isSet = !json[QString("simulated")].isNull() && m_simulated_isValid;
}

QString OAIDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_approved_isSet) {
        obj.insert(QString("approved"), ::OpenAPI::toJsonValue(m_approved));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_of_isSet) {
        obj.insert(QString("instanceOf"), ::OpenAPI::toJsonValue(m_instance_of));
    }
    if (m_provisioned_isSet) {
        obj.insert(QString("provisioned"), ::OpenAPI::toJsonValue(m_provisioned));
    }
    if (m_simulated_isSet) {
        obj.insert(QString("simulated"), ::OpenAPI::toJsonValue(m_simulated));
    }
    return obj;
}

bool OAIDevice::isApproved() const {
    return m_approved;
}
void OAIDevice::setApproved(const bool &approved) {
    m_approved = approved;
    m_approved_isSet = true;
}

bool OAIDevice::is_approved_Set() const{
    return m_approved_isSet;
}

bool OAIDevice::is_approved_Valid() const{
    return m_approved_isValid;
}

QString OAIDevice::getDescription() const {
    return m_description;
}
void OAIDevice::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDevice::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDevice::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDevice::getDisplayName() const {
    return m_display_name;
}
void OAIDevice::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDevice::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDevice::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDevice::getEtag() const {
    return m_etag;
}
void OAIDevice::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIDevice::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIDevice::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIDevice::getId() const {
    return m_id;
}
void OAIDevice::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDevice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDevice::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDevice::getInstanceOf() const {
    return m_instance_of;
}
void OAIDevice::setInstanceOf(const QString &instance_of) {
    m_instance_of = instance_of;
    m_instance_of_isSet = true;
}

bool OAIDevice::is_instance_of_Set() const{
    return m_instance_of_isSet;
}

bool OAIDevice::is_instance_of_Valid() const{
    return m_instance_of_isValid;
}

bool OAIDevice::isProvisioned() const {
    return m_provisioned;
}
void OAIDevice::setProvisioned(const bool &provisioned) {
    m_provisioned = provisioned;
    m_provisioned_isSet = true;
}

bool OAIDevice::is_provisioned_Set() const{
    return m_provisioned_isSet;
}

bool OAIDevice::is_provisioned_Valid() const{
    return m_provisioned_isValid;
}

bool OAIDevice::isSimulated() const {
    return m_simulated;
}
void OAIDevice::setSimulated(const bool &simulated) {
    m_simulated = simulated;
    m_simulated_isSet = true;
}

bool OAIDevice::is_simulated_Set() const{
    return m_simulated_isSet;
}

bool OAIDevice::is_simulated_Valid() const{
    return m_simulated_isValid;
}

bool OAIDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_of_isValid && true;
}

} // namespace OpenAPI
