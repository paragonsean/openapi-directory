/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceCommand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceCommand::OAIDeviceCommand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceCommand::OAIDeviceCommand() {
    this->initializeModel();
}

OAIDeviceCommand::~OAIDeviceCommand() {}

void OAIDeviceCommand::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_response_code_isSet = false;
    m_response_code_isValid = false;
}

void OAIDeviceCommand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceCommand::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_response_code_isValid = ::OpenAPI::fromJsonValue(m_response_code, json[QString("responseCode")]);
    m_response_code_isSet = !json[QString("responseCode")].isNull() && m_response_code_isValid;
}

QString OAIDeviceCommand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceCommand::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_request_isSet) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_response_isSet) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_response_code_isSet) {
        obj.insert(QString("responseCode"), ::OpenAPI::toJsonValue(m_response_code));
    }
    return obj;
}

QString OAIDeviceCommand::getId() const {
    return m_id;
}
void OAIDeviceCommand::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceCommand::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceCommand::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAIDeviceCommand::getRequest() const {
    return m_request;
}
void OAIDeviceCommand::setRequest(const OAIObject &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIDeviceCommand::is_request_Set() const{
    return m_request_isSet;
}

bool OAIDeviceCommand::is_request_Valid() const{
    return m_request_isValid;
}

OAIObject OAIDeviceCommand::getResponse() const {
    return m_response;
}
void OAIDeviceCommand::setResponse(const OAIObject &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIDeviceCommand::is_response_Set() const{
    return m_response_isSet;
}

bool OAIDeviceCommand::is_response_Valid() const{
    return m_response_isValid;
}

double OAIDeviceCommand::getResponseCode() const {
    return m_response_code;
}
void OAIDeviceCommand::setResponseCode(const double &response_code) {
    m_response_code = response_code;
    m_response_code_isSet = true;
}

bool OAIDeviceCommand::is_response_code_Set() const{
    return m_response_code_isSet;
}

bool OAIDeviceCommand::is_response_code_Valid() const{
    return m_response_code_isValid;
}

bool OAIDeviceCommand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceCommand::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
