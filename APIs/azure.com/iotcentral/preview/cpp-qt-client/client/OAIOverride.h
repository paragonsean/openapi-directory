/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOverride.h
 *
 * 
 */

#ifndef OAIOverride_H
#define OAIOverride_H

#include <QJsonObject>

#include "OAICapabilityReference.h"
#include "OAIObject.h"
#include "OAIValueDetail.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICapabilityReference;
class OAIValueDetail;

class OAIOverride : public OAIObject {
public:
    OAIOverride();
    OAIOverride(QString json);
    ~OAIOverride() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getContext() const;
    void setContext(const OAIObject &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<QString> getType() const;
    void setType(const QList<QString> &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    OAICapabilityReference getCapability() const;
    void setCapability(const OAICapabilityReference &capability);
    bool is_capability_Set() const;
    bool is_capability_Valid() const;

    QString getDisplayUnit() const;
    void setDisplayUnit(const QString &display_unit);
    bool is_display_unit_Set() const;
    bool is_display_unit_Valid() const;

    QString getSemanticType() const;
    void setSemanticType(const QString &semantic_type);
    bool is_semantic_type_Set() const;
    bool is_semantic_type_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    OAIValueDetail getValueDetail() const;
    void setValueDetail(const OAIValueDetail &value_detail);
    bool is_value_detail_Set() const;
    bool is_value_detail_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<QString> m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    OAICapabilityReference m_capability;
    bool m_capability_isSet;
    bool m_capability_isValid;

    QString m_display_unit;
    bool m_display_unit_isSet;
    bool m_display_unit_isValid;

    QString m_semantic_type;
    bool m_semantic_type_isSet;
    bool m_semantic_type_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    OAIValueDetail m_value_detail;
    bool m_value_detail_isSet;
    bool m_value_detail_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOverride)

#endif // OAIOverride_H
