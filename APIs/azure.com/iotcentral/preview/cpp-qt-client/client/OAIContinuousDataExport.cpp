/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContinuousDataExport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContinuousDataExport::OAIContinuousDataExport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContinuousDataExport::OAIContinuousDataExport() {
    this->initializeModel();
}

OAIContinuousDataExport::~OAIContinuousDataExport() {}

void OAIContinuousDataExport::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIContinuousDataExport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContinuousDataExport::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIContinuousDataExport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContinuousDataExport::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_endpoint.isSet()) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIContinuousDataExport::getDisplayName() const {
    return m_display_name;
}
void OAIContinuousDataExport::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIContinuousDataExport::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIContinuousDataExport::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIContinuousDataExport::isEnabled() const {
    return m_enabled;
}
void OAIContinuousDataExport::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIContinuousDataExport::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIContinuousDataExport::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIEndpoint OAIContinuousDataExport::getEndpoint() const {
    return m_endpoint;
}
void OAIContinuousDataExport::setEndpoint(const OAIEndpoint &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIContinuousDataExport::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIContinuousDataExport::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIContinuousDataExport::getEtag() const {
    return m_etag;
}
void OAIContinuousDataExport::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIContinuousDataExport::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIContinuousDataExport::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIContinuousDataExport::getId() const {
    return m_id;
}
void OAIContinuousDataExport::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContinuousDataExport::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContinuousDataExport::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIContinuousDataExport::getSources() const {
    return m_sources;
}
void OAIContinuousDataExport::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIContinuousDataExport::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIContinuousDataExport::is_sources_Valid() const{
    return m_sources_isValid;
}

QString OAIContinuousDataExport::getStatus() const {
    return m_status;
}
void OAIContinuousDataExport::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIContinuousDataExport::is_status_Set() const{
    return m_status_isSet;
}

bool OAIContinuousDataExport::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIContinuousDataExport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContinuousDataExport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && m_endpoint_isValid && m_sources_isValid && true;
}

} // namespace OpenAPI
