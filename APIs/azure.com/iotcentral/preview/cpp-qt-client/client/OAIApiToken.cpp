/**
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiToken::OAIApiToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiToken::OAIApiToken() {
    this->initializeModel();
}

OAIApiToken::~OAIApiToken() {}

void OAIApiToken::initializeModel() {

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIApiToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiToken::fromJsonObject(QJsonObject json) {

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIApiToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiToken::asJsonObject() const {
    QJsonObject obj;
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QList<QString> OAIApiToken::getRoles() const {
    return m_roles;
}
void OAIApiToken::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIApiToken::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIApiToken::is_roles_Valid() const{
    return m_roles_isValid;
}

QDateTime OAIApiToken::getExpiry() const {
    return m_expiry;
}
void OAIApiToken::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIApiToken::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIApiToken::is_expiry_Valid() const{
    return m_expiry_isValid;
}

QString OAIApiToken::getId() const {
    return m_id;
}
void OAIApiToken::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApiToken::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApiToken::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApiToken::getToken() const {
    return m_token;
}
void OAIApiToken::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIApiToken::is_token_Set() const{
    return m_token_isSet;
}

bool OAIApiToken::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIApiToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_roles_isValid && true;
}

} // namespace OpenAPI
