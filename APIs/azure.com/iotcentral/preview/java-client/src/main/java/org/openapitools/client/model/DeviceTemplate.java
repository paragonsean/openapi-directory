/*
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CapabilityModel;
import org.openapitools.client.model.SolutionModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:45.282844-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceTemplate {
  public static final String SERIALIZED_NAME_CAPABILITY_MODEL = "capabilityModel";
  @SerializedName(SERIALIZED_NAME_CAPABILITY_MODEL)
  private CapabilityModel capabilityModel;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SOLUTION_MODEL = "solutionModel";
  @SerializedName(SERIALIZED_NAME_SOLUTION_MODEL)
  private SolutionModel solutionModel;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = new ArrayList<>();

  public DeviceTemplate() {
  }

  public DeviceTemplate(
     String id
  ) {
    this();
    this.id = id;
  }

  public DeviceTemplate capabilityModel(CapabilityModel capabilityModel) {
    this.capabilityModel = capabilityModel;
    return this;
  }

  /**
   * Get capabilityModel
   * @return capabilityModel
   */
  @javax.annotation.Nonnull
  public CapabilityModel getCapabilityModel() {
    return capabilityModel;
  }

  public void setCapabilityModel(CapabilityModel capabilityModel) {
    this.capabilityModel = capabilityModel;
  }


  public DeviceTemplate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Detailed description of the device template.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DeviceTemplate displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name of the device template.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public DeviceTemplate etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * ETag used to prevent conflict in device template updates.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  /**
   * Unique ID of the device template.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public DeviceTemplate solutionModel(SolutionModel solutionModel) {
    this.solutionModel = solutionModel;
    return this;
  }

  /**
   * Get solutionModel
   * @return solutionModel
   */
  @javax.annotation.Nullable
  public SolutionModel getSolutionModel() {
    return solutionModel;
  }

  public void setSolutionModel(SolutionModel solutionModel) {
    this.solutionModel = solutionModel;
  }


  public DeviceTemplate types(List<String> types) {
    this.types = types;
    return this;
  }

  public DeviceTemplate addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * The types of device to which this template applies.
   * @return types
   */
  @javax.annotation.Nonnull
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceTemplate deviceTemplate = (DeviceTemplate) o;
    return Objects.equals(this.capabilityModel, deviceTemplate.capabilityModel) &&
        Objects.equals(this.description, deviceTemplate.description) &&
        Objects.equals(this.displayName, deviceTemplate.displayName) &&
        Objects.equals(this.etag, deviceTemplate.etag) &&
        Objects.equals(this.id, deviceTemplate.id) &&
        Objects.equals(this.solutionModel, deviceTemplate.solutionModel) &&
        Objects.equals(this.types, deviceTemplate.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilityModel, description, displayName, etag, id, solutionModel, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceTemplate {\n");
    sb.append("    capabilityModel: ").append(toIndentedString(capabilityModel)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    solutionModel: ").append(toIndentedString(solutionModel)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilityModel");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("etag");
    openapiFields.add("id");
    openapiFields.add("solutionModel");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("capabilityModel");
    openapiRequiredFields.add("types");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceTemplate is not found in the empty JSON string", DeviceTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeviceTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `capabilityModel`
      CapabilityModel.validateJsonElement(jsonObj.get("capabilityModel"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `solutionModel`
      if (jsonObj.get("solutionModel") != null && !jsonObj.get("solutionModel").isJsonNull()) {
        SolutionModel.validateJsonElement(jsonObj.get("solutionModel"));
      }
      // ensure the required json array is present
      if (jsonObj.get("types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceTemplate>() {
           @Override
           public void write(JsonWriter out, DeviceTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceTemplate
   * @throws IOException if the JSON string is invalid with respect to DeviceTemplate
   */
  public static DeviceTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceTemplate.class);
  }

  /**
   * Convert an instance of DeviceTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

