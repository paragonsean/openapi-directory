/*
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiToken;
import org.openapitools.client.model.ApiTokenCollection;
import org.openapitools.client.model.ContinuousDataExport;
import org.openapitools.client.model.ContinuousDataExportCollection;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceCollection;
import org.openapitools.client.model.DeviceCommand;
import org.openapitools.client.model.DeviceCommandCollection;
import org.openapitools.client.model.DeviceCredentials;
import org.openapitools.client.model.DeviceTemplate;
import org.openapitools.client.model.DeviceTemplateCollection;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.RoleCollection;
import org.openapitools.client.model.Value;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiTokensGet
     * @param tokenId Unique ID for the API token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTokensGetCall(String tokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apiTokens/{token_id}"
            .replace("{" + "token_id" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTokensGetValidateBeforeCall(String tokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling apiTokensGet(Async)");
        }

        return apiTokensGetCall(tokenId, _callback);

    }

    /**
     * Get an API token by ID.
     * 
     * @param tokenId Unique ID for the API token. (required)
     * @return ApiToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiToken apiTokensGet(String tokenId) throws ApiException {
        ApiResponse<ApiToken> localVarResp = apiTokensGetWithHttpInfo(tokenId);
        return localVarResp.getData();
    }

    /**
     * Get an API token by ID.
     * 
     * @param tokenId Unique ID for the API token. (required)
     * @return ApiResponse&lt;ApiToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiToken> apiTokensGetWithHttpInfo(String tokenId) throws ApiException {
        okhttp3.Call localVarCall = apiTokensGetValidateBeforeCall(tokenId, null);
        Type localVarReturnType = new TypeToken<ApiToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an API token by ID. (asynchronously)
     * 
     * @param tokenId Unique ID for the API token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTokensGetAsync(String tokenId, final ApiCallback<ApiToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTokensGetValidateBeforeCall(tokenId, _callback);
        Type localVarReturnType = new TypeToken<ApiToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTokensList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTokensListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apiTokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTokensListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiTokensListCall(_callback);

    }

    /**
     * Get the list of API tokens in an application.
     * 
     * @return ApiTokenCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiTokenCollection apiTokensList() throws ApiException {
        ApiResponse<ApiTokenCollection> localVarResp = apiTokensListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of API tokens in an application.
     * 
     * @return ApiResponse&lt;ApiTokenCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiTokenCollection> apiTokensListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiTokensListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ApiTokenCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of API tokens in an application. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTokensListAsync(final ApiCallback<ApiTokenCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTokensListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ApiTokenCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTokensRemove
     * @param tokenId Unique ID for the API token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTokensRemoveCall(String tokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apiTokens/{token_id}"
            .replace("{" + "token_id" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTokensRemoveValidateBeforeCall(String tokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling apiTokensRemove(Async)");
        }

        return apiTokensRemoveCall(tokenId, _callback);

    }

    /**
     * Delete an API token.
     * 
     * @param tokenId Unique ID for the API token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiTokensRemove(String tokenId) throws ApiException {
        apiTokensRemoveWithHttpInfo(tokenId);
    }

    /**
     * Delete an API token.
     * 
     * @param tokenId Unique ID for the API token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTokensRemoveWithHttpInfo(String tokenId) throws ApiException {
        okhttp3.Call localVarCall = apiTokensRemoveValidateBeforeCall(tokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an API token. (asynchronously)
     * 
     * @param tokenId Unique ID for the API token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTokensRemoveAsync(String tokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTokensRemoveValidateBeforeCall(tokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTokensSet
     * @param tokenId Unique ID for the API token. (required)
     * @param body API token body. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTokensSetCall(String tokenId, ApiToken body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apiTokens/{token_id}"
            .replace("{" + "token_id" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTokensSetValidateBeforeCall(String tokenId, ApiToken body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling apiTokensSet(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiTokensSet(Async)");
        }

        return apiTokensSetCall(tokenId, body, _callback);

    }

    /**
     * Create a new API token in the application.
     * 
     * @param tokenId Unique ID for the API token. (required)
     * @param body API token body. (required)
     * @return ApiToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiToken apiTokensSet(String tokenId, ApiToken body) throws ApiException {
        ApiResponse<ApiToken> localVarResp = apiTokensSetWithHttpInfo(tokenId, body);
        return localVarResp.getData();
    }

    /**
     * Create a new API token in the application.
     * 
     * @param tokenId Unique ID for the API token. (required)
     * @param body API token body. (required)
     * @return ApiResponse&lt;ApiToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiToken> apiTokensSetWithHttpInfo(String tokenId, ApiToken body) throws ApiException {
        okhttp3.Call localVarCall = apiTokensSetValidateBeforeCall(tokenId, body, null);
        Type localVarReturnType = new TypeToken<ApiToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new API token in the application. (asynchronously)
     * 
     * @param tokenId Unique ID for the API token. (required)
     * @param body API token body. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTokensSetAsync(String tokenId, ApiToken body, final ApiCallback<ApiToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTokensSetValidateBeforeCall(tokenId, body, _callback);
        Type localVarReturnType = new TypeToken<ApiToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for continuousDataExportsGet
     * @param exportId Unique ID for the continuous data export. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call continuousDataExportsGetCall(String exportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuousDataExports/{export_id}"
            .replace("{" + "export_id" + "}", localVarApiClient.escapeString(exportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call continuousDataExportsGetValidateBeforeCall(String exportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportId' is set
        if (exportId == null) {
            throw new ApiException("Missing the required parameter 'exportId' when calling continuousDataExportsGet(Async)");
        }

        return continuousDataExportsGetCall(exportId, _callback);

    }

    /**
     * Get a continuous data export by ID.
     * 
     * @param exportId Unique ID for the continuous data export. (required)
     * @return ContinuousDataExport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousDataExport continuousDataExportsGet(String exportId) throws ApiException {
        ApiResponse<ContinuousDataExport> localVarResp = continuousDataExportsGetWithHttpInfo(exportId);
        return localVarResp.getData();
    }

    /**
     * Get a continuous data export by ID.
     * 
     * @param exportId Unique ID for the continuous data export. (required)
     * @return ApiResponse&lt;ContinuousDataExport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousDataExport> continuousDataExportsGetWithHttpInfo(String exportId) throws ApiException {
        okhttp3.Call localVarCall = continuousDataExportsGetValidateBeforeCall(exportId, null);
        Type localVarReturnType = new TypeToken<ContinuousDataExport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a continuous data export by ID. (asynchronously)
     * 
     * @param exportId Unique ID for the continuous data export. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call continuousDataExportsGetAsync(String exportId, final ApiCallback<ContinuousDataExport> _callback) throws ApiException {

        okhttp3.Call localVarCall = continuousDataExportsGetValidateBeforeCall(exportId, _callback);
        Type localVarReturnType = new TypeToken<ContinuousDataExport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for continuousDataExportsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call continuousDataExportsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuousDataExports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call continuousDataExportsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return continuousDataExportsListCall(_callback);

    }

    /**
     * Get the list of continuous data exports in an application.
     * 
     * @return ContinuousDataExportCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousDataExportCollection continuousDataExportsList() throws ApiException {
        ApiResponse<ContinuousDataExportCollection> localVarResp = continuousDataExportsListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of continuous data exports in an application.
     * 
     * @return ApiResponse&lt;ContinuousDataExportCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousDataExportCollection> continuousDataExportsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = continuousDataExportsListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContinuousDataExportCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of continuous data exports in an application. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call continuousDataExportsListAsync(final ApiCallback<ContinuousDataExportCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = continuousDataExportsListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContinuousDataExportCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for continuousDataExportsRemove
     * @param exportId Unique ID for the continuous data export. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call continuousDataExportsRemoveCall(String exportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuousDataExports/{export_id}"
            .replace("{" + "export_id" + "}", localVarApiClient.escapeString(exportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call continuousDataExportsRemoveValidateBeforeCall(String exportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportId' is set
        if (exportId == null) {
            throw new ApiException("Missing the required parameter 'exportId' when calling continuousDataExportsRemove(Async)");
        }

        return continuousDataExportsRemoveCall(exportId, _callback);

    }

    /**
     * Delete a continuous data export.
     * 
     * @param exportId Unique ID for the continuous data export. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void continuousDataExportsRemove(String exportId) throws ApiException {
        continuousDataExportsRemoveWithHttpInfo(exportId);
    }

    /**
     * Delete a continuous data export.
     * 
     * @param exportId Unique ID for the continuous data export. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> continuousDataExportsRemoveWithHttpInfo(String exportId) throws ApiException {
        okhttp3.Call localVarCall = continuousDataExportsRemoveValidateBeforeCall(exportId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a continuous data export. (asynchronously)
     * 
     * @param exportId Unique ID for the continuous data export. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call continuousDataExportsRemoveAsync(String exportId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = continuousDataExportsRemoveValidateBeforeCall(exportId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for continuousDataExportsSet
     * @param exportId Unique ID for the continuous data export. (required)
     * @param body Data export body. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call continuousDataExportsSetCall(String exportId, ContinuousDataExport body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/continuousDataExports/{export_id}"
            .replace("{" + "export_id" + "}", localVarApiClient.escapeString(exportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call continuousDataExportsSetValidateBeforeCall(String exportId, ContinuousDataExport body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportId' is set
        if (exportId == null) {
            throw new ApiException("Missing the required parameter 'exportId' when calling continuousDataExportsSet(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling continuousDataExportsSet(Async)");
        }

        return continuousDataExportsSetCall(exportId, body, _callback);

    }

    /**
     * Create a new continuous data export or update an existing one by ID.
     * 
     * @param exportId Unique ID for the continuous data export. (required)
     * @param body Data export body. (required)
     * @return ContinuousDataExport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousDataExport continuousDataExportsSet(String exportId, ContinuousDataExport body) throws ApiException {
        ApiResponse<ContinuousDataExport> localVarResp = continuousDataExportsSetWithHttpInfo(exportId, body);
        return localVarResp.getData();
    }

    /**
     * Create a new continuous data export or update an existing one by ID.
     * 
     * @param exportId Unique ID for the continuous data export. (required)
     * @param body Data export body. (required)
     * @return ApiResponse&lt;ContinuousDataExport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousDataExport> continuousDataExportsSetWithHttpInfo(String exportId, ContinuousDataExport body) throws ApiException {
        okhttp3.Call localVarCall = continuousDataExportsSetValidateBeforeCall(exportId, body, null);
        Type localVarReturnType = new TypeToken<ContinuousDataExport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new continuous data export or update an existing one by ID. (asynchronously)
     * 
     * @param exportId Unique ID for the continuous data export. (required)
     * @param body Data export body. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call continuousDataExportsSetAsync(String exportId, ContinuousDataExport body, final ApiCallback<ContinuousDataExport> _callback) throws ApiException {

        okhttp3.Call localVarCall = continuousDataExportsSetValidateBeforeCall(exportId, body, _callback);
        Type localVarReturnType = new TypeToken<ContinuousDataExport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deviceTemplatesGet
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceTemplatesGetCall(String deviceTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deviceTemplates/{device_template_id}"
            .replace("{" + "device_template_id" + "}", localVarApiClient.escapeString(deviceTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceTemplatesGetValidateBeforeCall(String deviceTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceTemplateId' is set
        if (deviceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'deviceTemplateId' when calling deviceTemplatesGet(Async)");
        }

        return deviceTemplatesGetCall(deviceTemplateId, _callback);

    }

    /**
     * Get a device template by ID
     * 
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @return DeviceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeviceTemplate deviceTemplatesGet(String deviceTemplateId) throws ApiException {
        ApiResponse<DeviceTemplate> localVarResp = deviceTemplatesGetWithHttpInfo(deviceTemplateId);
        return localVarResp.getData();
    }

    /**
     * Get a device template by ID
     * 
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @return ApiResponse&lt;DeviceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceTemplate> deviceTemplatesGetWithHttpInfo(String deviceTemplateId) throws ApiException {
        okhttp3.Call localVarCall = deviceTemplatesGetValidateBeforeCall(deviceTemplateId, null);
        Type localVarReturnType = new TypeToken<DeviceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a device template by ID (asynchronously)
     * 
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceTemplatesGetAsync(String deviceTemplateId, final ApiCallback<DeviceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceTemplatesGetValidateBeforeCall(deviceTemplateId, _callback);
        Type localVarReturnType = new TypeToken<DeviceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deviceTemplatesGetMerged
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceTemplatesGetMergedCall(String deviceTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deviceTemplates/{device_template_id}/merged"
            .replace("{" + "device_template_id" + "}", localVarApiClient.escapeString(deviceTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceTemplatesGetMergedValidateBeforeCall(String deviceTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceTemplateId' is set
        if (deviceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'deviceTemplateId' when calling deviceTemplatesGetMerged(Async)");
        }

        return deviceTemplatesGetMergedCall(deviceTemplateId, _callback);

    }

    /**
     * Get a merged device template by ID
     * 
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @return DeviceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeviceTemplate deviceTemplatesGetMerged(String deviceTemplateId) throws ApiException {
        ApiResponse<DeviceTemplate> localVarResp = deviceTemplatesGetMergedWithHttpInfo(deviceTemplateId);
        return localVarResp.getData();
    }

    /**
     * Get a merged device template by ID
     * 
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @return ApiResponse&lt;DeviceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceTemplate> deviceTemplatesGetMergedWithHttpInfo(String deviceTemplateId) throws ApiException {
        okhttp3.Call localVarCall = deviceTemplatesGetMergedValidateBeforeCall(deviceTemplateId, null);
        Type localVarReturnType = new TypeToken<DeviceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a merged device template by ID (asynchronously)
     * 
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceTemplatesGetMergedAsync(String deviceTemplateId, final ApiCallback<DeviceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceTemplatesGetMergedValidateBeforeCall(deviceTemplateId, _callback);
        Type localVarReturnType = new TypeToken<DeviceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deviceTemplatesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceTemplatesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deviceTemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceTemplatesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deviceTemplatesListCall(_callback);

    }

    /**
     * Get the list of device templates in an application
     * 
     * @return DeviceTemplateCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeviceTemplateCollection deviceTemplatesList() throws ApiException {
        ApiResponse<DeviceTemplateCollection> localVarResp = deviceTemplatesListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of device templates in an application
     * 
     * @return ApiResponse&lt;DeviceTemplateCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceTemplateCollection> deviceTemplatesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deviceTemplatesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DeviceTemplateCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of device templates in an application (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceTemplatesListAsync(final ApiCallback<DeviceTemplateCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceTemplatesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DeviceTemplateCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deviceTemplatesListDevices
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceTemplatesListDevicesCall(String deviceTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deviceTemplates/{device_template_id}/devices"
            .replace("{" + "device_template_id" + "}", localVarApiClient.escapeString(deviceTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceTemplatesListDevicesValidateBeforeCall(String deviceTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceTemplateId' is set
        if (deviceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'deviceTemplateId' when calling deviceTemplatesListDevices(Async)");
        }

        return deviceTemplatesListDevicesCall(deviceTemplateId, _callback);

    }

    /**
     * Get devices for a template
     * 
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @return DeviceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeviceCollection deviceTemplatesListDevices(String deviceTemplateId) throws ApiException {
        ApiResponse<DeviceCollection> localVarResp = deviceTemplatesListDevicesWithHttpInfo(deviceTemplateId);
        return localVarResp.getData();
    }

    /**
     * Get devices for a template
     * 
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @return ApiResponse&lt;DeviceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceCollection> deviceTemplatesListDevicesWithHttpInfo(String deviceTemplateId) throws ApiException {
        okhttp3.Call localVarCall = deviceTemplatesListDevicesValidateBeforeCall(deviceTemplateId, null);
        Type localVarReturnType = new TypeToken<DeviceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get devices for a template (asynchronously)
     * 
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceTemplatesListDevicesAsync(String deviceTemplateId, final ApiCallback<DeviceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceTemplatesListDevicesValidateBeforeCall(deviceTemplateId, _callback);
        Type localVarReturnType = new TypeToken<DeviceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deviceTemplatesRemove
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceTemplatesRemoveCall(String deviceTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deviceTemplates/{device_template_id}"
            .replace("{" + "device_template_id" + "}", localVarApiClient.escapeString(deviceTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceTemplatesRemoveValidateBeforeCall(String deviceTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceTemplateId' is set
        if (deviceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'deviceTemplateId' when calling deviceTemplatesRemove(Async)");
        }

        return deviceTemplatesRemoveCall(deviceTemplateId, _callback);

    }

    /**
     * Delete a device template
     * Delete an existing device template by device ID.
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deviceTemplatesRemove(String deviceTemplateId) throws ApiException {
        deviceTemplatesRemoveWithHttpInfo(deviceTemplateId);
    }

    /**
     * Delete a device template
     * Delete an existing device template by device ID.
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deviceTemplatesRemoveWithHttpInfo(String deviceTemplateId) throws ApiException {
        okhttp3.Call localVarCall = deviceTemplatesRemoveValidateBeforeCall(deviceTemplateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a device template (asynchronously)
     * Delete an existing device template by device ID.
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceTemplatesRemoveAsync(String deviceTemplateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceTemplatesRemoveValidateBeforeCall(deviceTemplateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deviceTemplatesSet
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @param body Device template body. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceTemplatesSetCall(String deviceTemplateId, DeviceTemplate body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deviceTemplates/{device_template_id}"
            .replace("{" + "device_template_id" + "}", localVarApiClient.escapeString(deviceTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceTemplatesSetValidateBeforeCall(String deviceTemplateId, DeviceTemplate body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceTemplateId' is set
        if (deviceTemplateId == null) {
            throw new ApiException("Missing the required parameter 'deviceTemplateId' when calling deviceTemplatesSet(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deviceTemplatesSet(Async)");
        }

        return deviceTemplatesSetCall(deviceTemplateId, body, _callback);

    }

    /**
     * Create or update a device template by ID
     * 
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @param body Device template body. (required)
     * @return DeviceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeviceTemplate deviceTemplatesSet(String deviceTemplateId, DeviceTemplate body) throws ApiException {
        ApiResponse<DeviceTemplate> localVarResp = deviceTemplatesSetWithHttpInfo(deviceTemplateId, body);
        return localVarResp.getData();
    }

    /**
     * Create or update a device template by ID
     * 
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @param body Device template body. (required)
     * @return ApiResponse&lt;DeviceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceTemplate> deviceTemplatesSetWithHttpInfo(String deviceTemplateId, DeviceTemplate body) throws ApiException {
        okhttp3.Call localVarCall = deviceTemplatesSetValidateBeforeCall(deviceTemplateId, body, null);
        Type localVarReturnType = new TypeToken<DeviceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a device template by ID (asynchronously)
     * 
     * @param deviceTemplateId Unique ID of the device template. (required)
     * @param body Device template body. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceTemplatesSetAsync(String deviceTemplateId, DeviceTemplate body, final ApiCallback<DeviceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceTemplatesSetValidateBeforeCall(deviceTemplateId, body, _callback);
        Type localVarReturnType = new TypeToken<DeviceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesExecuteCommand
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param commandName Name of this device command. (required)
     * @param body Device command body. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesExecuteCommandCall(String deviceId, String componentName, String commandName, DeviceCommand body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/devices/{device_id}/components/{component_name}/commands/{command_name}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()))
            .replace("{" + "component_name" + "}", localVarApiClient.escapeString(componentName.toString()))
            .replace("{" + "command_name" + "}", localVarApiClient.escapeString(commandName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesExecuteCommandValidateBeforeCall(String deviceId, String componentName, String commandName, DeviceCommand body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesExecuteCommand(Async)");
        }

        // verify the required parameter 'componentName' is set
        if (componentName == null) {
            throw new ApiException("Missing the required parameter 'componentName' when calling devicesExecuteCommand(Async)");
        }

        // verify the required parameter 'commandName' is set
        if (commandName == null) {
            throw new ApiException("Missing the required parameter 'commandName' when calling devicesExecuteCommand(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling devicesExecuteCommand(Async)");
        }

        return devicesExecuteCommandCall(deviceId, componentName, commandName, body, _callback);

    }

    /**
     * Execute a device command
     * Execute a command on a device.
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param commandName Name of this device command. (required)
     * @param body Device command body. (required)
     * @return DeviceCommand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeviceCommand devicesExecuteCommand(String deviceId, String componentName, String commandName, DeviceCommand body) throws ApiException {
        ApiResponse<DeviceCommand> localVarResp = devicesExecuteCommandWithHttpInfo(deviceId, componentName, commandName, body);
        return localVarResp.getData();
    }

    /**
     * Execute a device command
     * Execute a command on a device.
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param commandName Name of this device command. (required)
     * @param body Device command body. (required)
     * @return ApiResponse&lt;DeviceCommand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceCommand> devicesExecuteCommandWithHttpInfo(String deviceId, String componentName, String commandName, DeviceCommand body) throws ApiException {
        okhttp3.Call localVarCall = devicesExecuteCommandValidateBeforeCall(deviceId, componentName, commandName, body, null);
        Type localVarReturnType = new TypeToken<DeviceCommand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute a device command (asynchronously)
     * Execute a command on a device.
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param commandName Name of this device command. (required)
     * @param body Device command body. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesExecuteCommandAsync(String deviceId, String componentName, String commandName, DeviceCommand body, final ApiCallback<DeviceCommand> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesExecuteCommandValidateBeforeCall(deviceId, componentName, commandName, body, _callback);
        Type localVarReturnType = new TypeToken<DeviceCommand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGet
     * @param deviceId Unique ID of the device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesGet(Async)");
        }

        return devicesGetCall(deviceId, _callback);

    }

    /**
     * Get a device by ID
     * Get details about an existing device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Device devicesGet(String deviceId) throws ApiException {
        ApiResponse<Device> localVarResp = devicesGetWithHttpInfo(deviceId);
        return localVarResp.getData();
    }

    /**
     * Get a device by ID
     * Get details about an existing device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> devicesGetWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = devicesGetValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a device by ID (asynchronously)
     * Get details about an existing device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetAsync(String deviceId, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetCloudProperties
     * @param deviceId Unique ID of the device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetCloudPropertiesCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{device_id}/cloudProperties"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetCloudPropertiesValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesGetCloudProperties(Async)");
        }

        return devicesGetCloudPropertiesCall(deviceId, _callback);

    }

    /**
     * Get device cloud properties
     * Get all cloud property values of a device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> devicesGetCloudProperties(String deviceId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = devicesGetCloudPropertiesWithHttpInfo(deviceId);
        return localVarResp.getData();
    }

    /**
     * Get device cloud properties
     * Get all cloud property values of a device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> devicesGetCloudPropertiesWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = devicesGetCloudPropertiesValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get device cloud properties (asynchronously)
     * Get all cloud property values of a device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetCloudPropertiesAsync(String deviceId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetCloudPropertiesValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetCommandHistory
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param commandName Name of this device command. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetCommandHistoryCall(String deviceId, String componentName, String commandName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{device_id}/components/{component_name}/commands/{command_name}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()))
            .replace("{" + "component_name" + "}", localVarApiClient.escapeString(componentName.toString()))
            .replace("{" + "command_name" + "}", localVarApiClient.escapeString(commandName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetCommandHistoryValidateBeforeCall(String deviceId, String componentName, String commandName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesGetCommandHistory(Async)");
        }

        // verify the required parameter 'componentName' is set
        if (componentName == null) {
            throw new ApiException("Missing the required parameter 'componentName' when calling devicesGetCommandHistory(Async)");
        }

        // verify the required parameter 'commandName' is set
        if (commandName == null) {
            throw new ApiException("Missing the required parameter 'commandName' when calling devicesGetCommandHistory(Async)");
        }

        return devicesGetCommandHistoryCall(deviceId, componentName, commandName, _callback);

    }

    /**
     * Get device command history
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param commandName Name of this device command. (required)
     * @return DeviceCommandCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeviceCommandCollection devicesGetCommandHistory(String deviceId, String componentName, String commandName) throws ApiException {
        ApiResponse<DeviceCommandCollection> localVarResp = devicesGetCommandHistoryWithHttpInfo(deviceId, componentName, commandName);
        return localVarResp.getData();
    }

    /**
     * Get device command history
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param commandName Name of this device command. (required)
     * @return ApiResponse&lt;DeviceCommandCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceCommandCollection> devicesGetCommandHistoryWithHttpInfo(String deviceId, String componentName, String commandName) throws ApiException {
        okhttp3.Call localVarCall = devicesGetCommandHistoryValidateBeforeCall(deviceId, componentName, commandName, null);
        Type localVarReturnType = new TypeToken<DeviceCommandCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get device command history (asynchronously)
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param commandName Name of this device command. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetCommandHistoryAsync(String deviceId, String componentName, String commandName, final ApiCallback<DeviceCommandCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetCommandHistoryValidateBeforeCall(deviceId, componentName, commandName, _callback);
        Type localVarReturnType = new TypeToken<DeviceCommandCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetComponentProperties
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetComponentPropertiesCall(String deviceId, String componentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{device_id}/components/{component_name}/properties"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()))
            .replace("{" + "component_name" + "}", localVarApiClient.escapeString(componentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetComponentPropertiesValidateBeforeCall(String deviceId, String componentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesGetComponentProperties(Async)");
        }

        // verify the required parameter 'componentName' is set
        if (componentName == null) {
            throw new ApiException("Missing the required parameter 'componentName' when calling devicesGetComponentProperties(Async)");
        }

        return devicesGetComponentPropertiesCall(deviceId, componentName, _callback);

    }

    /**
     * Get device properties for a specific component
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> devicesGetComponentProperties(String deviceId, String componentName) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = devicesGetComponentPropertiesWithHttpInfo(deviceId, componentName);
        return localVarResp.getData();
    }

    /**
     * Get device properties for a specific component
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> devicesGetComponentPropertiesWithHttpInfo(String deviceId, String componentName) throws ApiException {
        okhttp3.Call localVarCall = devicesGetComponentPropertiesValidateBeforeCall(deviceId, componentName, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get device properties for a specific component (asynchronously)
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetComponentPropertiesAsync(String deviceId, String componentName, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetComponentPropertiesValidateBeforeCall(deviceId, componentName, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetCredentials
     * @param deviceId Unique ID of the device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetCredentialsCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{device_id}/credentials"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetCredentialsValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesGetCredentials(Async)");
        }

        return devicesGetCredentialsCall(deviceId, _callback);

    }

    /**
     * Get device credentials
     * 
     * @param deviceId Unique ID of the device. (required)
     * @return DeviceCredentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeviceCredentials devicesGetCredentials(String deviceId) throws ApiException {
        ApiResponse<DeviceCredentials> localVarResp = devicesGetCredentialsWithHttpInfo(deviceId);
        return localVarResp.getData();
    }

    /**
     * Get device credentials
     * 
     * @param deviceId Unique ID of the device. (required)
     * @return ApiResponse&lt;DeviceCredentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceCredentials> devicesGetCredentialsWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = devicesGetCredentialsValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<DeviceCredentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get device credentials (asynchronously)
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetCredentialsAsync(String deviceId, final ApiCallback<DeviceCredentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetCredentialsValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<DeviceCredentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetProperties
     * @param deviceId Unique ID of the device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetPropertiesCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{device_id}/properties"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetPropertiesValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesGetProperties(Async)");
        }

        return devicesGetPropertiesCall(deviceId, _callback);

    }

    /**
     * Get device properties
     * Get all property values of a device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> devicesGetProperties(String deviceId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = devicesGetPropertiesWithHttpInfo(deviceId);
        return localVarResp.getData();
    }

    /**
     * Get device properties
     * Get all property values of a device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> devicesGetPropertiesWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = devicesGetPropertiesValidateBeforeCall(deviceId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get device properties (asynchronously)
     * Get all property values of a device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetPropertiesAsync(String deviceId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetPropertiesValidateBeforeCall(deviceId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesGetTelemetryValue
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param telemetryName Name of this device telemetry. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetTelemetryValueCall(String deviceId, String componentName, String telemetryName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{device_id}/components/{component_name}/telemetry/{telemetry_name}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()))
            .replace("{" + "component_name" + "}", localVarApiClient.escapeString(componentName.toString()))
            .replace("{" + "telemetry_name" + "}", localVarApiClient.escapeString(telemetryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesGetTelemetryValueValidateBeforeCall(String deviceId, String componentName, String telemetryName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesGetTelemetryValue(Async)");
        }

        // verify the required parameter 'componentName' is set
        if (componentName == null) {
            throw new ApiException("Missing the required parameter 'componentName' when calling devicesGetTelemetryValue(Async)");
        }

        // verify the required parameter 'telemetryName' is set
        if (telemetryName == null) {
            throw new ApiException("Missing the required parameter 'telemetryName' when calling devicesGetTelemetryValue(Async)");
        }

        return devicesGetTelemetryValueCall(deviceId, componentName, telemetryName, _callback);

    }

    /**
     * Get device telemetry value
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param telemetryName Name of this device telemetry. (required)
     * @return Value
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Value devicesGetTelemetryValue(String deviceId, String componentName, String telemetryName) throws ApiException {
        ApiResponse<Value> localVarResp = devicesGetTelemetryValueWithHttpInfo(deviceId, componentName, telemetryName);
        return localVarResp.getData();
    }

    /**
     * Get device telemetry value
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param telemetryName Name of this device telemetry. (required)
     * @return ApiResponse&lt;Value&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Value> devicesGetTelemetryValueWithHttpInfo(String deviceId, String componentName, String telemetryName) throws ApiException {
        okhttp3.Call localVarCall = devicesGetTelemetryValueValidateBeforeCall(deviceId, componentName, telemetryName, null);
        Type localVarReturnType = new TypeToken<Value>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get device telemetry value (asynchronously)
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param telemetryName Name of this device telemetry. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesGetTelemetryValueAsync(String deviceId, String componentName, String telemetryName, final ApiCallback<Value> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesGetTelemetryValueValidateBeforeCall(deviceId, componentName, telemetryName, _callback);
        Type localVarReturnType = new TypeToken<Value>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return devicesListCall(_callback);

    }

    /**
     * Get the list of devices in an application
     * 
     * @return DeviceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeviceCollection devicesList() throws ApiException {
        ApiResponse<DeviceCollection> localVarResp = devicesListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of devices in an application
     * 
     * @return ApiResponse&lt;DeviceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceCollection> devicesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = devicesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DeviceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of devices in an application (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesListAsync(final ApiCallback<DeviceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DeviceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesRemove
     * @param deviceId Unique ID of the device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesRemoveCall(String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/devices/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesRemoveValidateBeforeCall(String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesRemove(Async)");
        }

        return devicesRemoveCall(deviceId, _callback);

    }

    /**
     * Delete a device
     * Delete an existing device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void devicesRemove(String deviceId) throws ApiException {
        devicesRemoveWithHttpInfo(deviceId);
    }

    /**
     * Delete a device
     * Delete an existing device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> devicesRemoveWithHttpInfo(String deviceId) throws ApiException {
        okhttp3.Call localVarCall = devicesRemoveValidateBeforeCall(deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a device (asynchronously)
     * Delete an existing device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesRemoveAsync(String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesRemoveValidateBeforeCall(deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesSet
     * @param deviceId Unique ID of the device. (required)
     * @param body Device body. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetCall(String deviceId, Device body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/devices/{device_id}"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesSetValidateBeforeCall(String deviceId, Device body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesSet(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling devicesSet(Async)");
        }

        return devicesSetCall(deviceId, body, _callback);

    }

    /**
     * Create or update a device
     * Create a new device or update an existing one by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param body Device body. (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Device devicesSet(String deviceId, Device body) throws ApiException {
        ApiResponse<Device> localVarResp = devicesSetWithHttpInfo(deviceId, body);
        return localVarResp.getData();
    }

    /**
     * Create or update a device
     * Create a new device or update an existing one by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param body Device body. (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> devicesSetWithHttpInfo(String deviceId, Device body) throws ApiException {
        okhttp3.Call localVarCall = devicesSetValidateBeforeCall(deviceId, body, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a device (asynchronously)
     * Create a new device or update an existing one by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param body Device body. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesSetAsync(String deviceId, Device body, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesSetValidateBeforeCall(deviceId, body, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesUpdateCloudProperties
     * @param deviceId Unique ID of the device. (required)
     * @param body Device properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUpdateCloudPropertiesCall(String deviceId, Map<String, Object> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/devices/{device_id}/cloudProperties"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesUpdateCloudPropertiesValidateBeforeCall(String deviceId, Map<String, Object> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesUpdateCloudProperties(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling devicesUpdateCloudProperties(Async)");
        }

        return devicesUpdateCloudPropertiesCall(deviceId, body, _callback);

    }

    /**
     * Update device cloud properties
     * Update all cloud property values of a device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param body Device properties. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> devicesUpdateCloudProperties(String deviceId, Map<String, Object> body) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = devicesUpdateCloudPropertiesWithHttpInfo(deviceId, body);
        return localVarResp.getData();
    }

    /**
     * Update device cloud properties
     * Update all cloud property values of a device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param body Device properties. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> devicesUpdateCloudPropertiesWithHttpInfo(String deviceId, Map<String, Object> body) throws ApiException {
        okhttp3.Call localVarCall = devicesUpdateCloudPropertiesValidateBeforeCall(deviceId, body, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update device cloud properties (asynchronously)
     * Update all cloud property values of a device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param body Device properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUpdateCloudPropertiesAsync(String deviceId, Map<String, Object> body, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesUpdateCloudPropertiesValidateBeforeCall(deviceId, body, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesUpdateComponentProperties
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param body Device properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUpdateComponentPropertiesCall(String deviceId, String componentName, Map<String, Object> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/devices/{device_id}/components/{component_name}/properties"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()))
            .replace("{" + "component_name" + "}", localVarApiClient.escapeString(componentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesUpdateComponentPropertiesValidateBeforeCall(String deviceId, String componentName, Map<String, Object> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesUpdateComponentProperties(Async)");
        }

        // verify the required parameter 'componentName' is set
        if (componentName == null) {
            throw new ApiException("Missing the required parameter 'componentName' when calling devicesUpdateComponentProperties(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling devicesUpdateComponentProperties(Async)");
        }

        return devicesUpdateComponentPropertiesCall(deviceId, componentName, body, _callback);

    }

    /**
     * Update device properties for a specific component
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param body Device properties. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> devicesUpdateComponentProperties(String deviceId, String componentName, Map<String, Object> body) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = devicesUpdateComponentPropertiesWithHttpInfo(deviceId, componentName, body);
        return localVarResp.getData();
    }

    /**
     * Update device properties for a specific component
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param body Device properties. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> devicesUpdateComponentPropertiesWithHttpInfo(String deviceId, String componentName, Map<String, Object> body) throws ApiException {
        okhttp3.Call localVarCall = devicesUpdateComponentPropertiesValidateBeforeCall(deviceId, componentName, body, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update device properties for a specific component (asynchronously)
     * 
     * @param deviceId Unique ID of the device. (required)
     * @param componentName Name of the device component. (required)
     * @param body Device properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUpdateComponentPropertiesAsync(String deviceId, String componentName, Map<String, Object> body, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesUpdateComponentPropertiesValidateBeforeCall(deviceId, componentName, body, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesUpdateProperties
     * @param deviceId Unique ID of the device. (required)
     * @param body Device properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUpdatePropertiesCall(String deviceId, Map<String, Object> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/devices/{device_id}/properties"
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesUpdatePropertiesValidateBeforeCall(String deviceId, Map<String, Object> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling devicesUpdateProperties(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling devicesUpdateProperties(Async)");
        }

        return devicesUpdatePropertiesCall(deviceId, body, _callback);

    }

    /**
     * Update device properties
     * Update all property values of a device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param body Device properties. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> devicesUpdateProperties(String deviceId, Map<String, Object> body) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = devicesUpdatePropertiesWithHttpInfo(deviceId, body);
        return localVarResp.getData();
    }

    /**
     * Update device properties
     * Update all property values of a device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param body Device properties. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> devicesUpdatePropertiesWithHttpInfo(String deviceId, Map<String, Object> body) throws ApiException {
        okhttp3.Call localVarCall = devicesUpdatePropertiesValidateBeforeCall(deviceId, body, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update device properties (asynchronously)
     * Update all property values of a device by device ID.
     * @param deviceId Unique ID of the device. (required)
     * @param body Device properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesUpdatePropertiesAsync(String deviceId, Map<String, Object> body, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesUpdatePropertiesValidateBeforeCall(deviceId, body, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesGet
     * @param roleId Unique ID for the role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesGetCall(String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles/{role_id}"
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesGetValidateBeforeCall(String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling rolesGet(Async)");
        }

        return rolesGetCall(roleId, _callback);

    }

    /**
     * Get a role by ID.
     * 
     * @param roleId Unique ID for the role. (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Role rolesGet(String roleId) throws ApiException {
        ApiResponse<Role> localVarResp = rolesGetWithHttpInfo(roleId);
        return localVarResp.getData();
    }

    /**
     * Get a role by ID.
     * 
     * @param roleId Unique ID for the role. (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> rolesGetWithHttpInfo(String roleId) throws ApiException {
        okhttp3.Call localVarCall = rolesGetValidateBeforeCall(roleId, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a role by ID. (asynchronously)
     * 
     * @param roleId Unique ID for the role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesGetAsync(String roleId, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesGetValidateBeforeCall(roleId, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return rolesListCall(_callback);

    }

    /**
     * Get the list of roles in an application.
     * 
     * @return RoleCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RoleCollection rolesList() throws ApiException {
        ApiResponse<RoleCollection> localVarResp = rolesListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of roles in an application.
     * 
     * @return ApiResponse&lt;RoleCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleCollection> rolesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = rolesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RoleCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of roles in an application. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesListAsync(final ApiCallback<RoleCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RoleCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
