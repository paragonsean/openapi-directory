/*
 * Azure IoT Central
 * Azure IoT Central is a service that makes it easy to connect, monitor, and manage your IoT devices at scale.
 *
 * The version of the OpenAPI document: preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiToken;
import org.openapitools.client.model.ApiTokenCollection;
import org.openapitools.client.model.ContinuousDataExport;
import org.openapitools.client.model.ContinuousDataExportCollection;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceCollection;
import org.openapitools.client.model.DeviceCommand;
import org.openapitools.client.model.DeviceCommandCollection;
import org.openapitools.client.model.DeviceCredentials;
import org.openapitools.client.model.DeviceTemplate;
import org.openapitools.client.model.DeviceTemplateCollection;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.RoleCollection;
import org.openapitools.client.model.Value;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get an API token by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTokensGetTest() throws ApiException {
        String tokenId = null;
        ApiToken response = api.apiTokensGet(tokenId);
        // TODO: test validations
    }

    /**
     * Get the list of API tokens in an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTokensListTest() throws ApiException {
        ApiTokenCollection response = api.apiTokensList();
        // TODO: test validations
    }

    /**
     * Delete an API token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTokensRemoveTest() throws ApiException {
        String tokenId = null;
        api.apiTokensRemove(tokenId);
        // TODO: test validations
    }

    /**
     * Create a new API token in the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiTokensSetTest() throws ApiException {
        String tokenId = null;
        ApiToken body = null;
        ApiToken response = api.apiTokensSet(tokenId, body);
        // TODO: test validations
    }

    /**
     * Get a continuous data export by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void continuousDataExportsGetTest() throws ApiException {
        String exportId = null;
        ContinuousDataExport response = api.continuousDataExportsGet(exportId);
        // TODO: test validations
    }

    /**
     * Get the list of continuous data exports in an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void continuousDataExportsListTest() throws ApiException {
        ContinuousDataExportCollection response = api.continuousDataExportsList();
        // TODO: test validations
    }

    /**
     * Delete a continuous data export.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void continuousDataExportsRemoveTest() throws ApiException {
        String exportId = null;
        api.continuousDataExportsRemove(exportId);
        // TODO: test validations
    }

    /**
     * Create a new continuous data export or update an existing one by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void continuousDataExportsSetTest() throws ApiException {
        String exportId = null;
        ContinuousDataExport body = null;
        ContinuousDataExport response = api.continuousDataExportsSet(exportId, body);
        // TODO: test validations
    }

    /**
     * Get a device template by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deviceTemplatesGetTest() throws ApiException {
        String deviceTemplateId = null;
        DeviceTemplate response = api.deviceTemplatesGet(deviceTemplateId);
        // TODO: test validations
    }

    /**
     * Get a merged device template by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deviceTemplatesGetMergedTest() throws ApiException {
        String deviceTemplateId = null;
        DeviceTemplate response = api.deviceTemplatesGetMerged(deviceTemplateId);
        // TODO: test validations
    }

    /**
     * Get the list of device templates in an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deviceTemplatesListTest() throws ApiException {
        DeviceTemplateCollection response = api.deviceTemplatesList();
        // TODO: test validations
    }

    /**
     * Get devices for a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deviceTemplatesListDevicesTest() throws ApiException {
        String deviceTemplateId = null;
        DeviceCollection response = api.deviceTemplatesListDevices(deviceTemplateId);
        // TODO: test validations
    }

    /**
     * Delete a device template
     *
     * Delete an existing device template by device ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deviceTemplatesRemoveTest() throws ApiException {
        String deviceTemplateId = null;
        api.deviceTemplatesRemove(deviceTemplateId);
        // TODO: test validations
    }

    /**
     * Create or update a device template by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deviceTemplatesSetTest() throws ApiException {
        String deviceTemplateId = null;
        DeviceTemplate body = null;
        DeviceTemplate response = api.deviceTemplatesSet(deviceTemplateId, body);
        // TODO: test validations
    }

    /**
     * Execute a device command
     *
     * Execute a command on a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesExecuteCommandTest() throws ApiException {
        String deviceId = null;
        String componentName = null;
        String commandName = null;
        DeviceCommand body = null;
        DeviceCommand response = api.devicesExecuteCommand(deviceId, componentName, commandName, body);
        // TODO: test validations
    }

    /**
     * Get a device by ID
     *
     * Get details about an existing device by device ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetTest() throws ApiException {
        String deviceId = null;
        Device response = api.devicesGet(deviceId);
        // TODO: test validations
    }

    /**
     * Get device cloud properties
     *
     * Get all cloud property values of a device by device ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetCloudPropertiesTest() throws ApiException {
        String deviceId = null;
        Map<String, Object> response = api.devicesGetCloudProperties(deviceId);
        // TODO: test validations
    }

    /**
     * Get device command history
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetCommandHistoryTest() throws ApiException {
        String deviceId = null;
        String componentName = null;
        String commandName = null;
        DeviceCommandCollection response = api.devicesGetCommandHistory(deviceId, componentName, commandName);
        // TODO: test validations
    }

    /**
     * Get device properties for a specific component
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetComponentPropertiesTest() throws ApiException {
        String deviceId = null;
        String componentName = null;
        Map<String, Object> response = api.devicesGetComponentProperties(deviceId, componentName);
        // TODO: test validations
    }

    /**
     * Get device credentials
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetCredentialsTest() throws ApiException {
        String deviceId = null;
        DeviceCredentials response = api.devicesGetCredentials(deviceId);
        // TODO: test validations
    }

    /**
     * Get device properties
     *
     * Get all property values of a device by device ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetPropertiesTest() throws ApiException {
        String deviceId = null;
        Map<String, Object> response = api.devicesGetProperties(deviceId);
        // TODO: test validations
    }

    /**
     * Get device telemetry value
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetTelemetryValueTest() throws ApiException {
        String deviceId = null;
        String componentName = null;
        String telemetryName = null;
        Value response = api.devicesGetTelemetryValue(deviceId, componentName, telemetryName);
        // TODO: test validations
    }

    /**
     * Get the list of devices in an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListTest() throws ApiException {
        DeviceCollection response = api.devicesList();
        // TODO: test validations
    }

    /**
     * Delete a device
     *
     * Delete an existing device by device ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesRemoveTest() throws ApiException {
        String deviceId = null;
        api.devicesRemove(deviceId);
        // TODO: test validations
    }

    /**
     * Create or update a device
     *
     * Create a new device or update an existing one by device ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesSetTest() throws ApiException {
        String deviceId = null;
        Device body = null;
        Device response = api.devicesSet(deviceId, body);
        // TODO: test validations
    }

    /**
     * Update device cloud properties
     *
     * Update all cloud property values of a device by device ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesUpdateCloudPropertiesTest() throws ApiException {
        String deviceId = null;
        Map<String, Object> body = null;
        Map<String, Object> response = api.devicesUpdateCloudProperties(deviceId, body);
        // TODO: test validations
    }

    /**
     * Update device properties for a specific component
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesUpdateComponentPropertiesTest() throws ApiException {
        String deviceId = null;
        String componentName = null;
        Map<String, Object> body = null;
        Map<String, Object> response = api.devicesUpdateComponentProperties(deviceId, componentName, body);
        // TODO: test validations
    }

    /**
     * Update device properties
     *
     * Update all property values of a device by device ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesUpdatePropertiesTest() throws ApiException {
        String deviceId = null;
        Map<String, Object> body = null;
        Map<String, Object> response = api.devicesUpdateProperties(deviceId, body);
        // TODO: test validations
    }

    /**
     * Get a role by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rolesGetTest() throws ApiException {
        String roleId = null;
        Role response = api.rolesGet(roleId);
        // TODO: test validations
    }

    /**
     * Get the list of roles in an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rolesListTest() throws ApiException {
        RoleCollection response = api.rolesList();
        // TODO: test validations
    }

}
