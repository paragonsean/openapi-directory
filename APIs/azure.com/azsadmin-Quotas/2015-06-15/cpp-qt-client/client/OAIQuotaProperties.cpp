/**
 * NetworkAdminManagementClient
 * Quota admin operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2015-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuotaProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuotaProperties::OAIQuotaProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuotaProperties::OAIQuotaProperties() {
    this->initializeModel();
}

OAIQuotaProperties::~OAIQuotaProperties() {}

void OAIQuotaProperties::initializeModel() {

    m_max_load_balancers_per_subscription_isSet = false;
    m_max_load_balancers_per_subscription_isValid = false;

    m_max_nics_per_subscription_isSet = false;
    m_max_nics_per_subscription_isValid = false;

    m_max_public_ips_per_subscription_isSet = false;
    m_max_public_ips_per_subscription_isValid = false;

    m_max_security_groups_per_subscription_isSet = false;
    m_max_security_groups_per_subscription_isValid = false;

    m_max_virtual_network_gateway_connections_per_subscription_isSet = false;
    m_max_virtual_network_gateway_connections_per_subscription_isValid = false;

    m_max_virtual_network_gateways_per_subscription_isSet = false;
    m_max_virtual_network_gateways_per_subscription_isValid = false;

    m_max_vnets_per_subscription_isSet = false;
    m_max_vnets_per_subscription_isValid = false;

    m_migration_phase_isSet = false;
    m_migration_phase_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIQuotaProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuotaProperties::fromJsonObject(QJsonObject json) {

    m_max_load_balancers_per_subscription_isValid = ::OpenAPI::fromJsonValue(m_max_load_balancers_per_subscription, json[QString("maxLoadBalancersPerSubscription")]);
    m_max_load_balancers_per_subscription_isSet = !json[QString("maxLoadBalancersPerSubscription")].isNull() && m_max_load_balancers_per_subscription_isValid;

    m_max_nics_per_subscription_isValid = ::OpenAPI::fromJsonValue(m_max_nics_per_subscription, json[QString("maxNicsPerSubscription")]);
    m_max_nics_per_subscription_isSet = !json[QString("maxNicsPerSubscription")].isNull() && m_max_nics_per_subscription_isValid;

    m_max_public_ips_per_subscription_isValid = ::OpenAPI::fromJsonValue(m_max_public_ips_per_subscription, json[QString("maxPublicIpsPerSubscription")]);
    m_max_public_ips_per_subscription_isSet = !json[QString("maxPublicIpsPerSubscription")].isNull() && m_max_public_ips_per_subscription_isValid;

    m_max_security_groups_per_subscription_isValid = ::OpenAPI::fromJsonValue(m_max_security_groups_per_subscription, json[QString("maxSecurityGroupsPerSubscription")]);
    m_max_security_groups_per_subscription_isSet = !json[QString("maxSecurityGroupsPerSubscription")].isNull() && m_max_security_groups_per_subscription_isValid;

    m_max_virtual_network_gateway_connections_per_subscription_isValid = ::OpenAPI::fromJsonValue(m_max_virtual_network_gateway_connections_per_subscription, json[QString("maxVirtualNetworkGatewayConnectionsPerSubscription")]);
    m_max_virtual_network_gateway_connections_per_subscription_isSet = !json[QString("maxVirtualNetworkGatewayConnectionsPerSubscription")].isNull() && m_max_virtual_network_gateway_connections_per_subscription_isValid;

    m_max_virtual_network_gateways_per_subscription_isValid = ::OpenAPI::fromJsonValue(m_max_virtual_network_gateways_per_subscription, json[QString("maxVirtualNetworkGatewaysPerSubscription")]);
    m_max_virtual_network_gateways_per_subscription_isSet = !json[QString("maxVirtualNetworkGatewaysPerSubscription")].isNull() && m_max_virtual_network_gateways_per_subscription_isValid;

    m_max_vnets_per_subscription_isValid = ::OpenAPI::fromJsonValue(m_max_vnets_per_subscription, json[QString("maxVnetsPerSubscription")]);
    m_max_vnets_per_subscription_isSet = !json[QString("maxVnetsPerSubscription")].isNull() && m_max_vnets_per_subscription_isValid;

    m_migration_phase_isValid = ::OpenAPI::fromJsonValue(m_migration_phase, json[QString("migrationPhase")]);
    m_migration_phase_isSet = !json[QString("migrationPhase")].isNull() && m_migration_phase_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIQuotaProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuotaProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_max_load_balancers_per_subscription_isSet) {
        obj.insert(QString("maxLoadBalancersPerSubscription"), ::OpenAPI::toJsonValue(m_max_load_balancers_per_subscription));
    }
    if (m_max_nics_per_subscription_isSet) {
        obj.insert(QString("maxNicsPerSubscription"), ::OpenAPI::toJsonValue(m_max_nics_per_subscription));
    }
    if (m_max_public_ips_per_subscription_isSet) {
        obj.insert(QString("maxPublicIpsPerSubscription"), ::OpenAPI::toJsonValue(m_max_public_ips_per_subscription));
    }
    if (m_max_security_groups_per_subscription_isSet) {
        obj.insert(QString("maxSecurityGroupsPerSubscription"), ::OpenAPI::toJsonValue(m_max_security_groups_per_subscription));
    }
    if (m_max_virtual_network_gateway_connections_per_subscription_isSet) {
        obj.insert(QString("maxVirtualNetworkGatewayConnectionsPerSubscription"), ::OpenAPI::toJsonValue(m_max_virtual_network_gateway_connections_per_subscription));
    }
    if (m_max_virtual_network_gateways_per_subscription_isSet) {
        obj.insert(QString("maxVirtualNetworkGatewaysPerSubscription"), ::OpenAPI::toJsonValue(m_max_virtual_network_gateways_per_subscription));
    }
    if (m_max_vnets_per_subscription_isSet) {
        obj.insert(QString("maxVnetsPerSubscription"), ::OpenAPI::toJsonValue(m_max_vnets_per_subscription));
    }
    if (m_migration_phase.isSet()) {
        obj.insert(QString("migrationPhase"), ::OpenAPI::toJsonValue(m_migration_phase));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

qint64 OAIQuotaProperties::getMaxLoadBalancersPerSubscription() const {
    return m_max_load_balancers_per_subscription;
}
void OAIQuotaProperties::setMaxLoadBalancersPerSubscription(const qint64 &max_load_balancers_per_subscription) {
    m_max_load_balancers_per_subscription = max_load_balancers_per_subscription;
    m_max_load_balancers_per_subscription_isSet = true;
}

bool OAIQuotaProperties::is_max_load_balancers_per_subscription_Set() const{
    return m_max_load_balancers_per_subscription_isSet;
}

bool OAIQuotaProperties::is_max_load_balancers_per_subscription_Valid() const{
    return m_max_load_balancers_per_subscription_isValid;
}

qint64 OAIQuotaProperties::getMaxNicsPerSubscription() const {
    return m_max_nics_per_subscription;
}
void OAIQuotaProperties::setMaxNicsPerSubscription(const qint64 &max_nics_per_subscription) {
    m_max_nics_per_subscription = max_nics_per_subscription;
    m_max_nics_per_subscription_isSet = true;
}

bool OAIQuotaProperties::is_max_nics_per_subscription_Set() const{
    return m_max_nics_per_subscription_isSet;
}

bool OAIQuotaProperties::is_max_nics_per_subscription_Valid() const{
    return m_max_nics_per_subscription_isValid;
}

qint64 OAIQuotaProperties::getMaxPublicIpsPerSubscription() const {
    return m_max_public_ips_per_subscription;
}
void OAIQuotaProperties::setMaxPublicIpsPerSubscription(const qint64 &max_public_ips_per_subscription) {
    m_max_public_ips_per_subscription = max_public_ips_per_subscription;
    m_max_public_ips_per_subscription_isSet = true;
}

bool OAIQuotaProperties::is_max_public_ips_per_subscription_Set() const{
    return m_max_public_ips_per_subscription_isSet;
}

bool OAIQuotaProperties::is_max_public_ips_per_subscription_Valid() const{
    return m_max_public_ips_per_subscription_isValid;
}

qint64 OAIQuotaProperties::getMaxSecurityGroupsPerSubscription() const {
    return m_max_security_groups_per_subscription;
}
void OAIQuotaProperties::setMaxSecurityGroupsPerSubscription(const qint64 &max_security_groups_per_subscription) {
    m_max_security_groups_per_subscription = max_security_groups_per_subscription;
    m_max_security_groups_per_subscription_isSet = true;
}

bool OAIQuotaProperties::is_max_security_groups_per_subscription_Set() const{
    return m_max_security_groups_per_subscription_isSet;
}

bool OAIQuotaProperties::is_max_security_groups_per_subscription_Valid() const{
    return m_max_security_groups_per_subscription_isValid;
}

qint64 OAIQuotaProperties::getMaxVirtualNetworkGatewayConnectionsPerSubscription() const {
    return m_max_virtual_network_gateway_connections_per_subscription;
}
void OAIQuotaProperties::setMaxVirtualNetworkGatewayConnectionsPerSubscription(const qint64 &max_virtual_network_gateway_connections_per_subscription) {
    m_max_virtual_network_gateway_connections_per_subscription = max_virtual_network_gateway_connections_per_subscription;
    m_max_virtual_network_gateway_connections_per_subscription_isSet = true;
}

bool OAIQuotaProperties::is_max_virtual_network_gateway_connections_per_subscription_Set() const{
    return m_max_virtual_network_gateway_connections_per_subscription_isSet;
}

bool OAIQuotaProperties::is_max_virtual_network_gateway_connections_per_subscription_Valid() const{
    return m_max_virtual_network_gateway_connections_per_subscription_isValid;
}

qint64 OAIQuotaProperties::getMaxVirtualNetworkGatewaysPerSubscription() const {
    return m_max_virtual_network_gateways_per_subscription;
}
void OAIQuotaProperties::setMaxVirtualNetworkGatewaysPerSubscription(const qint64 &max_virtual_network_gateways_per_subscription) {
    m_max_virtual_network_gateways_per_subscription = max_virtual_network_gateways_per_subscription;
    m_max_virtual_network_gateways_per_subscription_isSet = true;
}

bool OAIQuotaProperties::is_max_virtual_network_gateways_per_subscription_Set() const{
    return m_max_virtual_network_gateways_per_subscription_isSet;
}

bool OAIQuotaProperties::is_max_virtual_network_gateways_per_subscription_Valid() const{
    return m_max_virtual_network_gateways_per_subscription_isValid;
}

qint64 OAIQuotaProperties::getMaxVnetsPerSubscription() const {
    return m_max_vnets_per_subscription;
}
void OAIQuotaProperties::setMaxVnetsPerSubscription(const qint64 &max_vnets_per_subscription) {
    m_max_vnets_per_subscription = max_vnets_per_subscription;
    m_max_vnets_per_subscription_isSet = true;
}

bool OAIQuotaProperties::is_max_vnets_per_subscription_Set() const{
    return m_max_vnets_per_subscription_isSet;
}

bool OAIQuotaProperties::is_max_vnets_per_subscription_Valid() const{
    return m_max_vnets_per_subscription_isValid;
}

OAIMigrationPhase OAIQuotaProperties::getMigrationPhase() const {
    return m_migration_phase;
}
void OAIQuotaProperties::setMigrationPhase(const OAIMigrationPhase &migration_phase) {
    m_migration_phase = migration_phase;
    m_migration_phase_isSet = true;
}

bool OAIQuotaProperties::is_migration_phase_Set() const{
    return m_migration_phase_isSet;
}

bool OAIQuotaProperties::is_migration_phase_Valid() const{
    return m_migration_phase_isValid;
}

QString OAIQuotaProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIQuotaProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIQuotaProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIQuotaProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIQuotaProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_load_balancers_per_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_nics_per_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_public_ips_per_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_security_groups_per_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_virtual_network_gateway_connections_per_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_virtual_network_gateways_per_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_vnets_per_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuotaProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
