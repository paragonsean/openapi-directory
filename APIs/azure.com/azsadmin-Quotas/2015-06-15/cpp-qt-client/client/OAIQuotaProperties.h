/**
 * NetworkAdminManagementClient
 * Quota admin operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2015-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQuotaProperties.h
 *
 * Properties of a quota.
 */

#ifndef OAIQuotaProperties_H
#define OAIQuotaProperties_H

#include <QJsonObject>

#include "OAIMigrationPhase.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIQuotaProperties : public OAIObject {
public:
    OAIQuotaProperties();
    OAIQuotaProperties(QString json);
    ~OAIQuotaProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getMaxLoadBalancersPerSubscription() const;
    void setMaxLoadBalancersPerSubscription(const qint64 &max_load_balancers_per_subscription);
    bool is_max_load_balancers_per_subscription_Set() const;
    bool is_max_load_balancers_per_subscription_Valid() const;

    qint64 getMaxNicsPerSubscription() const;
    void setMaxNicsPerSubscription(const qint64 &max_nics_per_subscription);
    bool is_max_nics_per_subscription_Set() const;
    bool is_max_nics_per_subscription_Valid() const;

    qint64 getMaxPublicIpsPerSubscription() const;
    void setMaxPublicIpsPerSubscription(const qint64 &max_public_ips_per_subscription);
    bool is_max_public_ips_per_subscription_Set() const;
    bool is_max_public_ips_per_subscription_Valid() const;

    qint64 getMaxSecurityGroupsPerSubscription() const;
    void setMaxSecurityGroupsPerSubscription(const qint64 &max_security_groups_per_subscription);
    bool is_max_security_groups_per_subscription_Set() const;
    bool is_max_security_groups_per_subscription_Valid() const;

    qint64 getMaxVirtualNetworkGatewayConnectionsPerSubscription() const;
    void setMaxVirtualNetworkGatewayConnectionsPerSubscription(const qint64 &max_virtual_network_gateway_connections_per_subscription);
    bool is_max_virtual_network_gateway_connections_per_subscription_Set() const;
    bool is_max_virtual_network_gateway_connections_per_subscription_Valid() const;

    qint64 getMaxVirtualNetworkGatewaysPerSubscription() const;
    void setMaxVirtualNetworkGatewaysPerSubscription(const qint64 &max_virtual_network_gateways_per_subscription);
    bool is_max_virtual_network_gateways_per_subscription_Set() const;
    bool is_max_virtual_network_gateways_per_subscription_Valid() const;

    qint64 getMaxVnetsPerSubscription() const;
    void setMaxVnetsPerSubscription(const qint64 &max_vnets_per_subscription);
    bool is_max_vnets_per_subscription_Set() const;
    bool is_max_vnets_per_subscription_Valid() const;

    OAIMigrationPhase getMigrationPhase() const;
    void setMigrationPhase(const OAIMigrationPhase &migration_phase);
    bool is_migration_phase_Set() const;
    bool is_migration_phase_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_max_load_balancers_per_subscription;
    bool m_max_load_balancers_per_subscription_isSet;
    bool m_max_load_balancers_per_subscription_isValid;

    qint64 m_max_nics_per_subscription;
    bool m_max_nics_per_subscription_isSet;
    bool m_max_nics_per_subscription_isValid;

    qint64 m_max_public_ips_per_subscription;
    bool m_max_public_ips_per_subscription_isSet;
    bool m_max_public_ips_per_subscription_isValid;

    qint64 m_max_security_groups_per_subscription;
    bool m_max_security_groups_per_subscription_isSet;
    bool m_max_security_groups_per_subscription_isValid;

    qint64 m_max_virtual_network_gateway_connections_per_subscription;
    bool m_max_virtual_network_gateway_connections_per_subscription_isSet;
    bool m_max_virtual_network_gateway_connections_per_subscription_isValid;

    qint64 m_max_virtual_network_gateways_per_subscription;
    bool m_max_virtual_network_gateways_per_subscription_isSet;
    bool m_max_virtual_network_gateways_per_subscription_isValid;

    qint64 m_max_vnets_per_subscription;
    bool m_max_vnets_per_subscription_isSet;
    bool m_max_vnets_per_subscription_isValid;

    OAIMigrationPhase m_migration_phase;
    bool m_migration_phase_isSet;
    bool m_migration_phase_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQuotaProperties)

#endif // OAIQuotaProperties_H
