/**
 * Compute Admin Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-09
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQuotas_List_200_response_value_inner_properties.h
 *
 * Properties for a Compute Quota
 */

#ifndef OAIQuotas_List_200_response_value_inner_properties_H
#define OAIQuotas_List_200_response_value_inner_properties_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIQuotas_List_200_response_value_inner_properties : public OAIObject {
public:
    OAIQuotas_List_200_response_value_inner_properties();
    OAIQuotas_List_200_response_value_inner_properties(QString json);
    ~OAIQuotas_List_200_response_value_inner_properties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAvailabilitySetCount() const;
    void setAvailabilitySetCount(const qint32 &availability_set_count);
    bool is_availability_set_count_Set() const;
    bool is_availability_set_count_Valid() const;

    qint32 getCoresLimit() const;
    void setCoresLimit(const qint32 &cores_limit);
    bool is_cores_limit_Set() const;
    bool is_cores_limit_Valid() const;

    qint32 getMaxAllocationPremiumManagedDisksAndSnapshots() const;
    void setMaxAllocationPremiumManagedDisksAndSnapshots(const qint32 &max_allocation_premium_managed_disks_and_snapshots);
    bool is_max_allocation_premium_managed_disks_and_snapshots_Set() const;
    bool is_max_allocation_premium_managed_disks_and_snapshots_Valid() const;

    qint32 getMaxAllocationStandardManagedDisksAndSnapshots() const;
    void setMaxAllocationStandardManagedDisksAndSnapshots(const qint32 &max_allocation_standard_managed_disks_and_snapshots);
    bool is_max_allocation_standard_managed_disks_and_snapshots_Set() const;
    bool is_max_allocation_standard_managed_disks_and_snapshots_Valid() const;

    qint32 getVirtualMachineCount() const;
    void setVirtualMachineCount(const qint32 &virtual_machine_count);
    bool is_virtual_machine_count_Set() const;
    bool is_virtual_machine_count_Valid() const;

    qint32 getVmScaleSetCount() const;
    void setVmScaleSetCount(const qint32 &vm_scale_set_count);
    bool is_vm_scale_set_count_Set() const;
    bool is_vm_scale_set_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_availability_set_count;
    bool m_availability_set_count_isSet;
    bool m_availability_set_count_isValid;

    qint32 m_cores_limit;
    bool m_cores_limit_isSet;
    bool m_cores_limit_isValid;

    qint32 m_max_allocation_premium_managed_disks_and_snapshots;
    bool m_max_allocation_premium_managed_disks_and_snapshots_isSet;
    bool m_max_allocation_premium_managed_disks_and_snapshots_isValid;

    qint32 m_max_allocation_standard_managed_disks_and_snapshots;
    bool m_max_allocation_standard_managed_disks_and_snapshots_isSet;
    bool m_max_allocation_standard_managed_disks_and_snapshots_isValid;

    qint32 m_virtual_machine_count;
    bool m_virtual_machine_count_isSet;
    bool m_virtual_machine_count_isValid;

    qint32 m_vm_scale_set_count;
    bool m_vm_scale_set_count_isSet;
    bool m_vm_scale_set_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQuotas_List_200_response_value_inner_properties)

#endif // OAIQuotas_List_200_response_value_inner_properties_H
