# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QuotaProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_set_count: int=None, cores_limit: int=None, virtual_machine_count: int=None, vm_scale_set_count: int=None):
        """QuotaProperties - a model defined in OpenAPI

        :param availability_set_count: The availability_set_count of this QuotaProperties.
        :param cores_limit: The cores_limit of this QuotaProperties.
        :param virtual_machine_count: The virtual_machine_count of this QuotaProperties.
        :param vm_scale_set_count: The vm_scale_set_count of this QuotaProperties.
        """
        self.openapi_types = {
            'availability_set_count': int,
            'cores_limit': int,
            'virtual_machine_count': int,
            'vm_scale_set_count': int
        }

        self.attribute_map = {
            'availability_set_count': 'availabilitySetCount',
            'cores_limit': 'coresLimit',
            'virtual_machine_count': 'virtualMachineCount',
            'vm_scale_set_count': 'vmScaleSetCount'
        }

        self._availability_set_count = availability_set_count
        self._cores_limit = cores_limit
        self._virtual_machine_count = virtual_machine_count
        self._vm_scale_set_count = vm_scale_set_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuotaProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuotaProperties of this QuotaProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_set_count(self):
        """Gets the availability_set_count of this QuotaProperties.

        Maximum number of availability sets allowed.

        :return: The availability_set_count of this QuotaProperties.
        :rtype: int
        """
        return self._availability_set_count

    @availability_set_count.setter
    def availability_set_count(self, availability_set_count):
        """Sets the availability_set_count of this QuotaProperties.

        Maximum number of availability sets allowed.

        :param availability_set_count: The availability_set_count of this QuotaProperties.
        :type availability_set_count: int
        """
        if availability_set_count is not None and availability_set_count < 0:
            raise ValueError("Invalid value for `availability_set_count`, must be a value greater than or equal to `0`")

        self._availability_set_count = availability_set_count

    @property
    def cores_limit(self):
        """Gets the cores_limit of this QuotaProperties.

        Maximum number of core allowed.

        :return: The cores_limit of this QuotaProperties.
        :rtype: int
        """
        return self._cores_limit

    @cores_limit.setter
    def cores_limit(self, cores_limit):
        """Sets the cores_limit of this QuotaProperties.

        Maximum number of core allowed.

        :param cores_limit: The cores_limit of this QuotaProperties.
        :type cores_limit: int
        """
        if cores_limit is not None and cores_limit < 0:
            raise ValueError("Invalid value for `cores_limit`, must be a value greater than or equal to `0`")

        self._cores_limit = cores_limit

    @property
    def virtual_machine_count(self):
        """Gets the virtual_machine_count of this QuotaProperties.

        Maximum number of virtual machines allowed.

        :return: The virtual_machine_count of this QuotaProperties.
        :rtype: int
        """
        return self._virtual_machine_count

    @virtual_machine_count.setter
    def virtual_machine_count(self, virtual_machine_count):
        """Sets the virtual_machine_count of this QuotaProperties.

        Maximum number of virtual machines allowed.

        :param virtual_machine_count: The virtual_machine_count of this QuotaProperties.
        :type virtual_machine_count: int
        """
        if virtual_machine_count is not None and virtual_machine_count < 0:
            raise ValueError("Invalid value for `virtual_machine_count`, must be a value greater than or equal to `0`")

        self._virtual_machine_count = virtual_machine_count

    @property
    def vm_scale_set_count(self):
        """Gets the vm_scale_set_count of this QuotaProperties.

        Maximum number of scale sets allowed.

        :return: The vm_scale_set_count of this QuotaProperties.
        :rtype: int
        """
        return self._vm_scale_set_count

    @vm_scale_set_count.setter
    def vm_scale_set_count(self, vm_scale_set_count):
        """Sets the vm_scale_set_count of this QuotaProperties.

        Maximum number of scale sets allowed.

        :param vm_scale_set_count: The vm_scale_set_count of this QuotaProperties.
        :type vm_scale_set_count: int
        """
        if vm_scale_set_count is not None and vm_scale_set_count < 0:
            raise ValueError("Invalid value for `vm_scale_set_count`, must be a value greater than or equal to `0`")

        self._vm_scale_set_count = vm_scale_set_count
