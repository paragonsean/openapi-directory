/**
 * Compute Admin Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuotaProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuotaProperties::OAIQuotaProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuotaProperties::OAIQuotaProperties() {
    this->initializeModel();
}

OAIQuotaProperties::~OAIQuotaProperties() {}

void OAIQuotaProperties::initializeModel() {

    m_availability_set_count_isSet = false;
    m_availability_set_count_isValid = false;

    m_cores_limit_isSet = false;
    m_cores_limit_isValid = false;

    m_virtual_machine_count_isSet = false;
    m_virtual_machine_count_isValid = false;

    m_vm_scale_set_count_isSet = false;
    m_vm_scale_set_count_isValid = false;
}

void OAIQuotaProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuotaProperties::fromJsonObject(QJsonObject json) {

    m_availability_set_count_isValid = ::OpenAPI::fromJsonValue(m_availability_set_count, json[QString("availabilitySetCount")]);
    m_availability_set_count_isSet = !json[QString("availabilitySetCount")].isNull() && m_availability_set_count_isValid;

    m_cores_limit_isValid = ::OpenAPI::fromJsonValue(m_cores_limit, json[QString("coresLimit")]);
    m_cores_limit_isSet = !json[QString("coresLimit")].isNull() && m_cores_limit_isValid;

    m_virtual_machine_count_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_count, json[QString("virtualMachineCount")]);
    m_virtual_machine_count_isSet = !json[QString("virtualMachineCount")].isNull() && m_virtual_machine_count_isValid;

    m_vm_scale_set_count_isValid = ::OpenAPI::fromJsonValue(m_vm_scale_set_count, json[QString("vmScaleSetCount")]);
    m_vm_scale_set_count_isSet = !json[QString("vmScaleSetCount")].isNull() && m_vm_scale_set_count_isValid;
}

QString OAIQuotaProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuotaProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_set_count_isSet) {
        obj.insert(QString("availabilitySetCount"), ::OpenAPI::toJsonValue(m_availability_set_count));
    }
    if (m_cores_limit_isSet) {
        obj.insert(QString("coresLimit"), ::OpenAPI::toJsonValue(m_cores_limit));
    }
    if (m_virtual_machine_count_isSet) {
        obj.insert(QString("virtualMachineCount"), ::OpenAPI::toJsonValue(m_virtual_machine_count));
    }
    if (m_vm_scale_set_count_isSet) {
        obj.insert(QString("vmScaleSetCount"), ::OpenAPI::toJsonValue(m_vm_scale_set_count));
    }
    return obj;
}

qint32 OAIQuotaProperties::getAvailabilitySetCount() const {
    return m_availability_set_count;
}
void OAIQuotaProperties::setAvailabilitySetCount(const qint32 &availability_set_count) {
    m_availability_set_count = availability_set_count;
    m_availability_set_count_isSet = true;
}

bool OAIQuotaProperties::is_availability_set_count_Set() const{
    return m_availability_set_count_isSet;
}

bool OAIQuotaProperties::is_availability_set_count_Valid() const{
    return m_availability_set_count_isValid;
}

qint32 OAIQuotaProperties::getCoresLimit() const {
    return m_cores_limit;
}
void OAIQuotaProperties::setCoresLimit(const qint32 &cores_limit) {
    m_cores_limit = cores_limit;
    m_cores_limit_isSet = true;
}

bool OAIQuotaProperties::is_cores_limit_Set() const{
    return m_cores_limit_isSet;
}

bool OAIQuotaProperties::is_cores_limit_Valid() const{
    return m_cores_limit_isValid;
}

qint32 OAIQuotaProperties::getVirtualMachineCount() const {
    return m_virtual_machine_count;
}
void OAIQuotaProperties::setVirtualMachineCount(const qint32 &virtual_machine_count) {
    m_virtual_machine_count = virtual_machine_count;
    m_virtual_machine_count_isSet = true;
}

bool OAIQuotaProperties::is_virtual_machine_count_Set() const{
    return m_virtual_machine_count_isSet;
}

bool OAIQuotaProperties::is_virtual_machine_count_Valid() const{
    return m_virtual_machine_count_isValid;
}

qint32 OAIQuotaProperties::getVmScaleSetCount() const {
    return m_vm_scale_set_count;
}
void OAIQuotaProperties::setVmScaleSetCount(const qint32 &vm_scale_set_count) {
    m_vm_scale_set_count = vm_scale_set_count;
    m_vm_scale_set_count_isSet = true;
}

bool OAIQuotaProperties::is_vm_scale_set_count_Set() const{
    return m_vm_scale_set_count_isSet;
}

bool OAIQuotaProperties::is_vm_scale_set_count_Valid() const{
    return m_vm_scale_set_count_isValid;
}

bool OAIQuotaProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_set_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cores_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_scale_set_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuotaProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
