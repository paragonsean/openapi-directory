/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DiscoveredSecuritySolution from '../model/DiscoveredSecuritySolution';
import DiscoveredSecuritySolutionList from '../model/DiscoveredSecuritySolutionList';
import DiscoveredSecuritySolutionsListDefaultResponse from '../model/DiscoveredSecuritySolutionsListDefaultResponse';

/**
* DiscoveredSecuritySolutions service.
* @module api/DiscoveredSecuritySolutionsApi
* @version 2015-06-01-preview
*/
export default class DiscoveredSecuritySolutionsApi {

    /**
    * Constructs a new DiscoveredSecuritySolutionsApi. 
    * @alias module:api/DiscoveredSecuritySolutionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the discoveredSecuritySolutionsGet operation.
     * @callback module:api/DiscoveredSecuritySolutionsApi~discoveredSecuritySolutionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscoveredSecuritySolution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific discovered Security Solution.
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} discoveredSecuritySolutionName Name of a discovered security solution.
     * @param {String} apiVersion API version for the operation
     * @param {module:api/DiscoveredSecuritySolutionsApi~discoveredSecuritySolutionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscoveredSecuritySolution}
     */
    discoveredSecuritySolutionsGet(subscriptionId, resourceGroupName, ascLocation, discoveredSecuritySolutionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling discoveredSecuritySolutionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling discoveredSecuritySolutionsGet");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling discoveredSecuritySolutionsGet");
      }
      // verify the required parameter 'discoveredSecuritySolutionName' is set
      if (discoveredSecuritySolutionName === undefined || discoveredSecuritySolutionName === null) {
        throw new Error("Missing the required parameter 'discoveredSecuritySolutionName' when calling discoveredSecuritySolutionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling discoveredSecuritySolutionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ascLocation': ascLocation,
        'discoveredSecuritySolutionName': discoveredSecuritySolutionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiscoveredSecuritySolution;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/discoveredSecuritySolutions/{discoveredSecuritySolutionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discoveredSecuritySolutionsList operation.
     * @callback module:api/DiscoveredSecuritySolutionsApi~discoveredSecuritySolutionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscoveredSecuritySolutionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of discovered Security Solutions for the subscription.
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} apiVersion API version for the operation
     * @param {module:api/DiscoveredSecuritySolutionsApi~discoveredSecuritySolutionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscoveredSecuritySolutionList}
     */
    discoveredSecuritySolutionsList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling discoveredSecuritySolutionsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling discoveredSecuritySolutionsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiscoveredSecuritySolutionList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/discoveredSecuritySolutions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discoveredSecuritySolutionsListByHomeRegion operation.
     * @callback module:api/DiscoveredSecuritySolutionsApi~discoveredSecuritySolutionsListByHomeRegionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscoveredSecuritySolutionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of discovered Security Solutions for the subscription and location.
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} apiVersion API version for the operation
     * @param {module:api/DiscoveredSecuritySolutionsApi~discoveredSecuritySolutionsListByHomeRegionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscoveredSecuritySolutionList}
     */
    discoveredSecuritySolutionsListByHomeRegion(subscriptionId, ascLocation, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling discoveredSecuritySolutionsListByHomeRegion");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling discoveredSecuritySolutionsListByHomeRegion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling discoveredSecuritySolutionsListByHomeRegion");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiscoveredSecuritySolutionList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/discoveredSecuritySolutions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
