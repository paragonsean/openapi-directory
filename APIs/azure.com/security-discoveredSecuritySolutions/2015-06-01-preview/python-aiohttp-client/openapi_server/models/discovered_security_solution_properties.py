# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiscoveredSecuritySolutionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer: str=None, publisher: str=None, security_family: str=None, sku: str=None):
        """DiscoveredSecuritySolutionProperties - a model defined in OpenAPI

        :param offer: The offer of this DiscoveredSecuritySolutionProperties.
        :param publisher: The publisher of this DiscoveredSecuritySolutionProperties.
        :param security_family: The security_family of this DiscoveredSecuritySolutionProperties.
        :param sku: The sku of this DiscoveredSecuritySolutionProperties.
        """
        self.openapi_types = {
            'offer': str,
            'publisher': str,
            'security_family': str,
            'sku': str
        }

        self.attribute_map = {
            'offer': 'offer',
            'publisher': 'publisher',
            'security_family': 'securityFamily',
            'sku': 'sku'
        }

        self._offer = offer
        self._publisher = publisher
        self._security_family = security_family
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscoveredSecuritySolutionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscoveredSecuritySolutionProperties of this DiscoveredSecuritySolutionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer(self):
        """Gets the offer of this DiscoveredSecuritySolutionProperties.

        The security solutions' image offer

        :return: The offer of this DiscoveredSecuritySolutionProperties.
        :rtype: str
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """Sets the offer of this DiscoveredSecuritySolutionProperties.

        The security solutions' image offer

        :param offer: The offer of this DiscoveredSecuritySolutionProperties.
        :type offer: str
        """
        if offer is None:
            raise ValueError("Invalid value for `offer`, must not be `None`")

        self._offer = offer

    @property
    def publisher(self):
        """Gets the publisher of this DiscoveredSecuritySolutionProperties.

        The security solutions' image publisher

        :return: The publisher of this DiscoveredSecuritySolutionProperties.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this DiscoveredSecuritySolutionProperties.

        The security solutions' image publisher

        :param publisher: The publisher of this DiscoveredSecuritySolutionProperties.
        :type publisher: str
        """
        if publisher is None:
            raise ValueError("Invalid value for `publisher`, must not be `None`")

        self._publisher = publisher

    @property
    def security_family(self):
        """Gets the security_family of this DiscoveredSecuritySolutionProperties.

        The security family of the discovered solution

        :return: The security_family of this DiscoveredSecuritySolutionProperties.
        :rtype: str
        """
        return self._security_family

    @security_family.setter
    def security_family(self, security_family):
        """Sets the security_family of this DiscoveredSecuritySolutionProperties.

        The security family of the discovered solution

        :param security_family: The security_family of this DiscoveredSecuritySolutionProperties.
        :type security_family: str
        """
        allowed_values = ["Waf", "Ngfw", "SaasWaf", "Va"]  # noqa: E501
        if security_family not in allowed_values:
            raise ValueError(
                "Invalid value for `security_family` ({0}), must be one of {1}"
                .format(security_family, allowed_values)
            )

        self._security_family = security_family

    @property
    def sku(self):
        """Gets the sku of this DiscoveredSecuritySolutionProperties.

        The security solutions' image sku

        :return: The sku of this DiscoveredSecuritySolutionProperties.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this DiscoveredSecuritySolutionProperties.

        The security solutions' image sku

        :param sku: The sku of this DiscoveredSecuritySolutionProperties.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku
