/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentKeyPolicyPlayReadyContentKeyLocation from './ContentKeyPolicyPlayReadyContentKeyLocation';
import ContentKeyPolicyPlayReadyPlayRight from './ContentKeyPolicyPlayReadyPlayRight';

/**
 * The ContentKeyPolicyPlayReadyLicense model module.
 * @module model/ContentKeyPolicyPlayReadyLicense
 * @version 2018-07-01
 */
class ContentKeyPolicyPlayReadyLicense {
    /**
     * Constructs a new <code>ContentKeyPolicyPlayReadyLicense</code>.
     * The PlayReady license
     * @alias module:model/ContentKeyPolicyPlayReadyLicense
     * @param allowTestDevices {Boolean} A flag indicating whether test devices can use the license.
     * @param contentKeyLocation {module:model/ContentKeyPolicyPlayReadyContentKeyLocation} 
     * @param contentType {module:model/ContentKeyPolicyPlayReadyLicense.ContentTypeEnum} The PlayReady content type.
     * @param licenseType {module:model/ContentKeyPolicyPlayReadyLicense.LicenseTypeEnum} The license type.
     */
    constructor(allowTestDevices, contentKeyLocation, contentType, licenseType) { 
        
        ContentKeyPolicyPlayReadyLicense.initialize(this, allowTestDevices, contentKeyLocation, contentType, licenseType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowTestDevices, contentKeyLocation, contentType, licenseType) { 
        obj['allowTestDevices'] = allowTestDevices;
        obj['contentKeyLocation'] = contentKeyLocation;
        obj['contentType'] = contentType;
        obj['licenseType'] = licenseType;
    }

    /**
     * Constructs a <code>ContentKeyPolicyPlayReadyLicense</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentKeyPolicyPlayReadyLicense} obj Optional instance to populate.
     * @return {module:model/ContentKeyPolicyPlayReadyLicense} The populated <code>ContentKeyPolicyPlayReadyLicense</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentKeyPolicyPlayReadyLicense();

            if (data.hasOwnProperty('allowTestDevices')) {
                obj['allowTestDevices'] = ApiClient.convertToType(data['allowTestDevices'], 'Boolean');
            }
            if (data.hasOwnProperty('beginDate')) {
                obj['beginDate'] = ApiClient.convertToType(data['beginDate'], 'Date');
            }
            if (data.hasOwnProperty('contentKeyLocation')) {
                obj['contentKeyLocation'] = ContentKeyPolicyPlayReadyContentKeyLocation.constructFromObject(data['contentKeyLocation']);
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('gracePeriod')) {
                obj['gracePeriod'] = ApiClient.convertToType(data['gracePeriod'], 'String');
            }
            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], 'String');
            }
            if (data.hasOwnProperty('playRight')) {
                obj['playRight'] = ContentKeyPolicyPlayReadyPlayRight.constructFromObject(data['playRight']);
            }
            if (data.hasOwnProperty('relativeBeginDate')) {
                obj['relativeBeginDate'] = ApiClient.convertToType(data['relativeBeginDate'], 'String');
            }
            if (data.hasOwnProperty('relativeExpirationDate')) {
                obj['relativeExpirationDate'] = ApiClient.convertToType(data['relativeExpirationDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentKeyPolicyPlayReadyLicense</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentKeyPolicyPlayReadyLicense</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContentKeyPolicyPlayReadyLicense.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `contentKeyLocation`
        if (data['contentKeyLocation']) { // data not null
          ContentKeyPolicyPlayReadyContentKeyLocation.validateJSON(data['contentKeyLocation']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['gracePeriod'] && !(typeof data['gracePeriod'] === 'string' || data['gracePeriod'] instanceof String)) {
            throw new Error("Expected the field `gracePeriod` to be a primitive type in the JSON string but got " + data['gracePeriod']);
        }
        // ensure the json data is a string
        if (data['licenseType'] && !(typeof data['licenseType'] === 'string' || data['licenseType'] instanceof String)) {
            throw new Error("Expected the field `licenseType` to be a primitive type in the JSON string but got " + data['licenseType']);
        }
        // validate the optional field `playRight`
        if (data['playRight']) { // data not null
          ContentKeyPolicyPlayReadyPlayRight.validateJSON(data['playRight']);
        }
        // ensure the json data is a string
        if (data['relativeBeginDate'] && !(typeof data['relativeBeginDate'] === 'string' || data['relativeBeginDate'] instanceof String)) {
            throw new Error("Expected the field `relativeBeginDate` to be a primitive type in the JSON string but got " + data['relativeBeginDate']);
        }
        // ensure the json data is a string
        if (data['relativeExpirationDate'] && !(typeof data['relativeExpirationDate'] === 'string' || data['relativeExpirationDate'] instanceof String)) {
            throw new Error("Expected the field `relativeExpirationDate` to be a primitive type in the JSON string but got " + data['relativeExpirationDate']);
        }

        return true;
    }


}

ContentKeyPolicyPlayReadyLicense.RequiredProperties = ["allowTestDevices", "contentKeyLocation", "contentType", "licenseType"];

/**
 * A flag indicating whether test devices can use the license.
 * @member {Boolean} allowTestDevices
 */
ContentKeyPolicyPlayReadyLicense.prototype['allowTestDevices'] = undefined;

/**
 * The begin date of license
 * @member {Date} beginDate
 */
ContentKeyPolicyPlayReadyLicense.prototype['beginDate'] = undefined;

/**
 * @member {module:model/ContentKeyPolicyPlayReadyContentKeyLocation} contentKeyLocation
 */
ContentKeyPolicyPlayReadyLicense.prototype['contentKeyLocation'] = undefined;

/**
 * The PlayReady content type.
 * @member {module:model/ContentKeyPolicyPlayReadyLicense.ContentTypeEnum} contentType
 */
ContentKeyPolicyPlayReadyLicense.prototype['contentType'] = undefined;

/**
 * The expiration date of license.
 * @member {Date} expirationDate
 */
ContentKeyPolicyPlayReadyLicense.prototype['expirationDate'] = undefined;

/**
 * The grace period of license.
 * @member {String} gracePeriod
 */
ContentKeyPolicyPlayReadyLicense.prototype['gracePeriod'] = undefined;

/**
 * The license type.
 * @member {module:model/ContentKeyPolicyPlayReadyLicense.LicenseTypeEnum} licenseType
 */
ContentKeyPolicyPlayReadyLicense.prototype['licenseType'] = undefined;

/**
 * @member {module:model/ContentKeyPolicyPlayReadyPlayRight} playRight
 */
ContentKeyPolicyPlayReadyLicense.prototype['playRight'] = undefined;

/**
 * The relative begin date of license.
 * @member {String} relativeBeginDate
 */
ContentKeyPolicyPlayReadyLicense.prototype['relativeBeginDate'] = undefined;

/**
 * The relative expiration date of license.
 * @member {String} relativeExpirationDate
 */
ContentKeyPolicyPlayReadyLicense.prototype['relativeExpirationDate'] = undefined;





/**
 * Allowed values for the <code>contentType</code> property.
 * @enum {String}
 * @readonly
 */
ContentKeyPolicyPlayReadyLicense['ContentTypeEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Unspecified"
     * @const
     */
    "Unspecified": "Unspecified",

    /**
     * value: "UltraVioletDownload"
     * @const
     */
    "UltraVioletDownload": "UltraVioletDownload",

    /**
     * value: "UltraVioletStreaming"
     * @const
     */
    "UltraVioletStreaming": "UltraVioletStreaming"
};


/**
 * Allowed values for the <code>licenseType</code> property.
 * @enum {String}
 * @readonly
 */
ContentKeyPolicyPlayReadyLicense['LicenseTypeEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "NonPersistent"
     * @const
     */
    "NonPersistent": "NonPersistent",

    /**
     * value: "Persistent"
     * @const
     */
    "Persistent": "Persistent"
};



export default ContentKeyPolicyPlayReadyLicense;

