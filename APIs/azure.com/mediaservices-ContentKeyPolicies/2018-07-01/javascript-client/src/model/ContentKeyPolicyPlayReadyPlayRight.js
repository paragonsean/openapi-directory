/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction from './ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction';

/**
 * The ContentKeyPolicyPlayReadyPlayRight model module.
 * @module model/ContentKeyPolicyPlayReadyPlayRight
 * @version 2018-07-01
 */
class ContentKeyPolicyPlayReadyPlayRight {
    /**
     * Constructs a new <code>ContentKeyPolicyPlayReadyPlayRight</code>.
     * Configures the Play Right in the PlayReady license.
     * @alias module:model/ContentKeyPolicyPlayReadyPlayRight
     * @param allowPassingVideoContentToUnknownOutput {module:model/ContentKeyPolicyPlayReadyPlayRight.AllowPassingVideoContentToUnknownOutputEnum} Configures Unknown output handling settings of the license.
     * @param digitalVideoOnlyContentRestriction {Boolean} Enables the Image Constraint For Analog Component Video Restriction in the license.
     * @param imageConstraintForAnalogComponentVideoRestriction {Boolean} Enables the Image Constraint For Analog Component Video Restriction in the license.
     * @param imageConstraintForAnalogComputerMonitorRestriction {Boolean} Enables the Image Constraint For Analog Component Video Restriction in the license.
     */
    constructor(allowPassingVideoContentToUnknownOutput, digitalVideoOnlyContentRestriction, imageConstraintForAnalogComponentVideoRestriction, imageConstraintForAnalogComputerMonitorRestriction) { 
        
        ContentKeyPolicyPlayReadyPlayRight.initialize(this, allowPassingVideoContentToUnknownOutput, digitalVideoOnlyContentRestriction, imageConstraintForAnalogComponentVideoRestriction, imageConstraintForAnalogComputerMonitorRestriction);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowPassingVideoContentToUnknownOutput, digitalVideoOnlyContentRestriction, imageConstraintForAnalogComponentVideoRestriction, imageConstraintForAnalogComputerMonitorRestriction) { 
        obj['allowPassingVideoContentToUnknownOutput'] = allowPassingVideoContentToUnknownOutput;
        obj['digitalVideoOnlyContentRestriction'] = digitalVideoOnlyContentRestriction;
        obj['imageConstraintForAnalogComponentVideoRestriction'] = imageConstraintForAnalogComponentVideoRestriction;
        obj['imageConstraintForAnalogComputerMonitorRestriction'] = imageConstraintForAnalogComputerMonitorRestriction;
    }

    /**
     * Constructs a <code>ContentKeyPolicyPlayReadyPlayRight</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentKeyPolicyPlayReadyPlayRight} obj Optional instance to populate.
     * @return {module:model/ContentKeyPolicyPlayReadyPlayRight} The populated <code>ContentKeyPolicyPlayReadyPlayRight</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentKeyPolicyPlayReadyPlayRight();

            if (data.hasOwnProperty('agcAndColorStripeRestriction')) {
                obj['agcAndColorStripeRestriction'] = ApiClient.convertToType(data['agcAndColorStripeRestriction'], 'Number');
            }
            if (data.hasOwnProperty('allowPassingVideoContentToUnknownOutput')) {
                obj['allowPassingVideoContentToUnknownOutput'] = ApiClient.convertToType(data['allowPassingVideoContentToUnknownOutput'], 'String');
            }
            if (data.hasOwnProperty('analogVideoOpl')) {
                obj['analogVideoOpl'] = ApiClient.convertToType(data['analogVideoOpl'], 'Number');
            }
            if (data.hasOwnProperty('compressedDigitalAudioOpl')) {
                obj['compressedDigitalAudioOpl'] = ApiClient.convertToType(data['compressedDigitalAudioOpl'], 'Number');
            }
            if (data.hasOwnProperty('compressedDigitalVideoOpl')) {
                obj['compressedDigitalVideoOpl'] = ApiClient.convertToType(data['compressedDigitalVideoOpl'], 'Number');
            }
            if (data.hasOwnProperty('digitalVideoOnlyContentRestriction')) {
                obj['digitalVideoOnlyContentRestriction'] = ApiClient.convertToType(data['digitalVideoOnlyContentRestriction'], 'Boolean');
            }
            if (data.hasOwnProperty('explicitAnalogTelevisionOutputRestriction')) {
                obj['explicitAnalogTelevisionOutputRestriction'] = ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.constructFromObject(data['explicitAnalogTelevisionOutputRestriction']);
            }
            if (data.hasOwnProperty('firstPlayExpiration')) {
                obj['firstPlayExpiration'] = ApiClient.convertToType(data['firstPlayExpiration'], 'String');
            }
            if (data.hasOwnProperty('imageConstraintForAnalogComponentVideoRestriction')) {
                obj['imageConstraintForAnalogComponentVideoRestriction'] = ApiClient.convertToType(data['imageConstraintForAnalogComponentVideoRestriction'], 'Boolean');
            }
            if (data.hasOwnProperty('imageConstraintForAnalogComputerMonitorRestriction')) {
                obj['imageConstraintForAnalogComputerMonitorRestriction'] = ApiClient.convertToType(data['imageConstraintForAnalogComputerMonitorRestriction'], 'Boolean');
            }
            if (data.hasOwnProperty('scmsRestriction')) {
                obj['scmsRestriction'] = ApiClient.convertToType(data['scmsRestriction'], 'Number');
            }
            if (data.hasOwnProperty('uncompressedDigitalAudioOpl')) {
                obj['uncompressedDigitalAudioOpl'] = ApiClient.convertToType(data['uncompressedDigitalAudioOpl'], 'Number');
            }
            if (data.hasOwnProperty('uncompressedDigitalVideoOpl')) {
                obj['uncompressedDigitalVideoOpl'] = ApiClient.convertToType(data['uncompressedDigitalVideoOpl'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentKeyPolicyPlayReadyPlayRight</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentKeyPolicyPlayReadyPlayRight</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContentKeyPolicyPlayReadyPlayRight.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['allowPassingVideoContentToUnknownOutput'] && !(typeof data['allowPassingVideoContentToUnknownOutput'] === 'string' || data['allowPassingVideoContentToUnknownOutput'] instanceof String)) {
            throw new Error("Expected the field `allowPassingVideoContentToUnknownOutput` to be a primitive type in the JSON string but got " + data['allowPassingVideoContentToUnknownOutput']);
        }
        // validate the optional field `explicitAnalogTelevisionOutputRestriction`
        if (data['explicitAnalogTelevisionOutputRestriction']) { // data not null
          ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.validateJSON(data['explicitAnalogTelevisionOutputRestriction']);
        }
        // ensure the json data is a string
        if (data['firstPlayExpiration'] && !(typeof data['firstPlayExpiration'] === 'string' || data['firstPlayExpiration'] instanceof String)) {
            throw new Error("Expected the field `firstPlayExpiration` to be a primitive type in the JSON string but got " + data['firstPlayExpiration']);
        }

        return true;
    }


}

ContentKeyPolicyPlayReadyPlayRight.RequiredProperties = ["allowPassingVideoContentToUnknownOutput", "digitalVideoOnlyContentRestriction", "imageConstraintForAnalogComponentVideoRestriction", "imageConstraintForAnalogComputerMonitorRestriction"];

/**
 * Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
 * @member {Number} agcAndColorStripeRestriction
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['agcAndColorStripeRestriction'] = undefined;

/**
 * Configures Unknown output handling settings of the license.
 * @member {module:model/ContentKeyPolicyPlayReadyPlayRight.AllowPassingVideoContentToUnknownOutputEnum} allowPassingVideoContentToUnknownOutput
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['allowPassingVideoContentToUnknownOutput'] = undefined;

/**
 * Specifies the output protection level for compressed digital audio.
 * @member {Number} analogVideoOpl
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['analogVideoOpl'] = undefined;

/**
 * Specifies the output protection level for compressed digital audio.
 * @member {Number} compressedDigitalAudioOpl
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['compressedDigitalAudioOpl'] = undefined;

/**
 * Specifies the output protection level for compressed digital video.
 * @member {Number} compressedDigitalVideoOpl
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['compressedDigitalVideoOpl'] = undefined;

/**
 * Enables the Image Constraint For Analog Component Video Restriction in the license.
 * @member {Boolean} digitalVideoOnlyContentRestriction
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['digitalVideoOnlyContentRestriction'] = undefined;

/**
 * @member {module:model/ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction} explicitAnalogTelevisionOutputRestriction
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['explicitAnalogTelevisionOutputRestriction'] = undefined;

/**
 * The amount of time that the license is valid after the license is first used to play content.
 * @member {String} firstPlayExpiration
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['firstPlayExpiration'] = undefined;

/**
 * Enables the Image Constraint For Analog Component Video Restriction in the license.
 * @member {Boolean} imageConstraintForAnalogComponentVideoRestriction
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['imageConstraintForAnalogComponentVideoRestriction'] = undefined;

/**
 * Enables the Image Constraint For Analog Component Video Restriction in the license.
 * @member {Boolean} imageConstraintForAnalogComputerMonitorRestriction
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['imageConstraintForAnalogComputerMonitorRestriction'] = undefined;

/**
 * Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
 * @member {Number} scmsRestriction
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['scmsRestriction'] = undefined;

/**
 * Specifies the output protection level for uncompressed digital audio.
 * @member {Number} uncompressedDigitalAudioOpl
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['uncompressedDigitalAudioOpl'] = undefined;

/**
 * Specifies the output protection level for uncompressed digital video.
 * @member {Number} uncompressedDigitalVideoOpl
 */
ContentKeyPolicyPlayReadyPlayRight.prototype['uncompressedDigitalVideoOpl'] = undefined;





/**
 * Allowed values for the <code>allowPassingVideoContentToUnknownOutput</code> property.
 * @enum {String}
 * @readonly
 */
ContentKeyPolicyPlayReadyPlayRight['AllowPassingVideoContentToUnknownOutputEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "NotAllowed"
     * @const
     */
    "NotAllowed": "NotAllowed",

    /**
     * value: "Allowed"
     * @const
     */
    "Allowed": "Allowed",

    /**
     * value: "AllowedWithVideoConstriction"
     * @const
     */
    "AllowedWithVideoConstriction": "AllowedWithVideoConstriction"
};



export default ContentKeyPolicyPlayReadyPlayRight;

