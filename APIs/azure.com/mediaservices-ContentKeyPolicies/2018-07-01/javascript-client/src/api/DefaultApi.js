/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import ContentKeyPolicy from '../model/ContentKeyPolicy';
import ContentKeyPolicyCollection from '../model/ContentKeyPolicyCollection';
import ContentKeyPolicyProperties from '../model/ContentKeyPolicyProperties';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-07-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentKeyPoliciesCreateOrUpdate operation.
     * @callback module:api/DefaultApi~contentKeyPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentKeyPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an Content Key Policy
     * Create or update a Content Key Policy in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} contentKeyPolicyName The Content Key Policy name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/ContentKeyPolicy} parameters The request parameters
     * @param {module:api/DefaultApi~contentKeyPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentKeyPolicy}
     */
    contentKeyPoliciesCreateOrUpdate(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling contentKeyPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling contentKeyPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling contentKeyPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'contentKeyPolicyName' is set
      if (contentKeyPolicyName === undefined || contentKeyPolicyName === null) {
        throw new Error("Missing the required parameter 'contentKeyPolicyName' when calling contentKeyPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling contentKeyPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling contentKeyPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'contentKeyPolicyName': contentKeyPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContentKeyPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentKeyPoliciesDelete operation.
     * @callback module:api/DefaultApi~contentKeyPoliciesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Content Key Policy
     * Deletes a Content Key Policy in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} contentKeyPolicyName The Content Key Policy name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~contentKeyPoliciesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contentKeyPoliciesDelete(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling contentKeyPoliciesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling contentKeyPoliciesDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling contentKeyPoliciesDelete");
      }
      // verify the required parameter 'contentKeyPolicyName' is set
      if (contentKeyPolicyName === undefined || contentKeyPolicyName === null) {
        throw new Error("Missing the required parameter 'contentKeyPolicyName' when calling contentKeyPoliciesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling contentKeyPoliciesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'contentKeyPolicyName': contentKeyPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentKeyPoliciesGet operation.
     * @callback module:api/DefaultApi~contentKeyPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentKeyPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Content Key Policy
     * Get the details of a Content Key Policy in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} contentKeyPolicyName The Content Key Policy name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~contentKeyPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentKeyPolicy}
     */
    contentKeyPoliciesGet(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling contentKeyPoliciesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling contentKeyPoliciesGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling contentKeyPoliciesGet");
      }
      // verify the required parameter 'contentKeyPolicyName' is set
      if (contentKeyPolicyName === undefined || contentKeyPolicyName === null) {
        throw new Error("Missing the required parameter 'contentKeyPolicyName' when calling contentKeyPoliciesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling contentKeyPoliciesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'contentKeyPolicyName': contentKeyPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentKeyPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentKeyPoliciesGetPolicyPropertiesWithSecrets operation.
     * @callback module:api/DefaultApi~contentKeyPoliciesGetPolicyPropertiesWithSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentKeyPolicyProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Content Key Policy with secrets
     * Get a Content Key Policy including secret values
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} contentKeyPolicyName The Content Key Policy name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~contentKeyPoliciesGetPolicyPropertiesWithSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentKeyPolicyProperties}
     */
    contentKeyPoliciesGetPolicyPropertiesWithSecrets(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling contentKeyPoliciesGetPolicyPropertiesWithSecrets");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling contentKeyPoliciesGetPolicyPropertiesWithSecrets");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling contentKeyPoliciesGetPolicyPropertiesWithSecrets");
      }
      // verify the required parameter 'contentKeyPolicyName' is set
      if (contentKeyPolicyName === undefined || contentKeyPolicyName === null) {
        throw new Error("Missing the required parameter 'contentKeyPolicyName' when calling contentKeyPoliciesGetPolicyPropertiesWithSecrets");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling contentKeyPoliciesGetPolicyPropertiesWithSecrets");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'contentKeyPolicyName': contentKeyPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentKeyPolicyProperties;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}/getPolicyPropertiesWithSecrets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentKeyPoliciesList operation.
     * @callback module:api/DefaultApi~contentKeyPoliciesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentKeyPolicyCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Content Key Policies
     * Lists the Content Key Policies in the account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Restricts the set of items returned.
     * @param {Number} [top] Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
     * @param {String} [orderby] Specifies the key by which the result collection should be ordered.
     * @param {module:api/DefaultApi~contentKeyPoliciesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentKeyPolicyCollection}
     */
    contentKeyPoliciesList(subscriptionId, resourceGroupName, accountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling contentKeyPoliciesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling contentKeyPoliciesList");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling contentKeyPoliciesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling contentKeyPoliciesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$orderby': opts['orderby']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentKeyPolicyCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentKeyPoliciesUpdate operation.
     * @callback module:api/DefaultApi~contentKeyPoliciesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentKeyPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Content Key Policy
     * Updates an existing Content Key Policy in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} contentKeyPolicyName The Content Key Policy name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/ContentKeyPolicy} parameters The request parameters
     * @param {module:api/DefaultApi~contentKeyPoliciesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentKeyPolicy}
     */
    contentKeyPoliciesUpdate(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling contentKeyPoliciesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling contentKeyPoliciesUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling contentKeyPoliciesUpdate");
      }
      // verify the required parameter 'contentKeyPolicyName' is set
      if (contentKeyPolicyName === undefined || contentKeyPolicyName === null) {
        throw new Error("Missing the required parameter 'contentKeyPolicyName' when calling contentKeyPoliciesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling contentKeyPoliciesUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling contentKeyPoliciesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'contentKeyPolicyName': contentKeyPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContentKeyPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
