# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, best_effort: bool=None, configuration_data: int=None):
        """ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction - a model defined in OpenAPI

        :param best_effort: The best_effort of this ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.
        :param configuration_data: The configuration_data of this ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.
        """
        self.openapi_types = {
            'best_effort': bool,
            'configuration_data': int
        }

        self.attribute_map = {
            'best_effort': 'bestEffort',
            'configuration_data': 'configurationData'
        }

        self._best_effort = best_effort
        self._configuration_data = configuration_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction of this ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def best_effort(self):
        """Gets the best_effort of this ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.

        Indicates whether this restriction is enforced on a Best Effort basis.

        :return: The best_effort of this ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.
        :rtype: bool
        """
        return self._best_effort

    @best_effort.setter
    def best_effort(self, best_effort):
        """Sets the best_effort of this ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.

        Indicates whether this restriction is enforced on a Best Effort basis.

        :param best_effort: The best_effort of this ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.
        :type best_effort: bool
        """
        if best_effort is None:
            raise ValueError("Invalid value for `best_effort`, must not be `None`")

        self._best_effort = best_effort

    @property
    def configuration_data(self):
        """Gets the configuration_data of this ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.

        Configures the restriction control bits. Must be between 0 and 3 inclusive.

        :return: The configuration_data of this ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.
        :rtype: int
        """
        return self._configuration_data

    @configuration_data.setter
    def configuration_data(self, configuration_data):
        """Sets the configuration_data of this ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.

        Configures the restriction control bits. Must be between 0 and 3 inclusive.

        :param configuration_data: The configuration_data of this ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.
        :type configuration_data: int
        """
        if configuration_data is None:
            raise ValueError("Invalid value for `configuration_data`, must not be `None`")

        self._configuration_data = configuration_data
