# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_key_policy_restriction_token_key import ContentKeyPolicyRestrictionTokenKey
import re
from openapi_server import util


class ContentKeyPolicyRsaTokenKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exponent: str=None, modulus: str=None, odata_type: str=None):
        """ContentKeyPolicyRsaTokenKey - a model defined in OpenAPI

        :param exponent: The exponent of this ContentKeyPolicyRsaTokenKey.
        :param modulus: The modulus of this ContentKeyPolicyRsaTokenKey.
        :param odata_type: The odata_type of this ContentKeyPolicyRsaTokenKey.
        """
        self.openapi_types = {
            'exponent': str,
            'modulus': str,
            'odata_type': str
        }

        self.attribute_map = {
            'exponent': 'exponent',
            'modulus': 'modulus',
            'odata_type': '@odata.type'
        }

        self._exponent = exponent
        self._modulus = modulus
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentKeyPolicyRsaTokenKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentKeyPolicyRsaTokenKey of this ContentKeyPolicyRsaTokenKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exponent(self):
        """Gets the exponent of this ContentKeyPolicyRsaTokenKey.

        The RSA Parameter exponent

        :return: The exponent of this ContentKeyPolicyRsaTokenKey.
        :rtype: str
        """
        return self._exponent

    @exponent.setter
    def exponent(self, exponent):
        """Sets the exponent of this ContentKeyPolicyRsaTokenKey.

        The RSA Parameter exponent

        :param exponent: The exponent of this ContentKeyPolicyRsaTokenKey.
        :type exponent: str
        """
        if exponent is None:
            raise ValueError("Invalid value for `exponent`, must not be `None`")
        if exponent is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', exponent):
            raise ValueError("Invalid value for `exponent`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._exponent = exponent

    @property
    def modulus(self):
        """Gets the modulus of this ContentKeyPolicyRsaTokenKey.

        The RSA Parameter modulus

        :return: The modulus of this ContentKeyPolicyRsaTokenKey.
        :rtype: str
        """
        return self._modulus

    @modulus.setter
    def modulus(self, modulus):
        """Sets the modulus of this ContentKeyPolicyRsaTokenKey.

        The RSA Parameter modulus

        :param modulus: The modulus of this ContentKeyPolicyRsaTokenKey.
        :type modulus: str
        """
        if modulus is None:
            raise ValueError("Invalid value for `modulus`, must not be `None`")
        if modulus is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', modulus):
            raise ValueError("Invalid value for `modulus`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._modulus = modulus

    @property
    def odata_type(self):
        """Gets the odata_type of this ContentKeyPolicyRsaTokenKey.

        The discriminator for derived types.

        :return: The odata_type of this ContentKeyPolicyRsaTokenKey.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this ContentKeyPolicyRsaTokenKey.

        The discriminator for derived types.

        :param odata_type: The odata_type of this ContentKeyPolicyRsaTokenKey.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
