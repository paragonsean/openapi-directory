# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_key_policy_configuration import ContentKeyPolicyConfiguration
import re
from openapi_server import util


class ContentKeyPolicyFairPlayConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ask: str=None, fair_play_pfx: str=None, fair_play_pfx_password: str=None, rental_and_lease_key_type: str=None, rental_duration: int=None, odata_type: str=None):
        """ContentKeyPolicyFairPlayConfiguration - a model defined in OpenAPI

        :param ask: The ask of this ContentKeyPolicyFairPlayConfiguration.
        :param fair_play_pfx: The fair_play_pfx of this ContentKeyPolicyFairPlayConfiguration.
        :param fair_play_pfx_password: The fair_play_pfx_password of this ContentKeyPolicyFairPlayConfiguration.
        :param rental_and_lease_key_type: The rental_and_lease_key_type of this ContentKeyPolicyFairPlayConfiguration.
        :param rental_duration: The rental_duration of this ContentKeyPolicyFairPlayConfiguration.
        :param odata_type: The odata_type of this ContentKeyPolicyFairPlayConfiguration.
        """
        self.openapi_types = {
            'ask': str,
            'fair_play_pfx': str,
            'fair_play_pfx_password': str,
            'rental_and_lease_key_type': str,
            'rental_duration': int,
            'odata_type': str
        }

        self.attribute_map = {
            'ask': 'ask',
            'fair_play_pfx': 'fairPlayPfx',
            'fair_play_pfx_password': 'fairPlayPfxPassword',
            'rental_and_lease_key_type': 'rentalAndLeaseKeyType',
            'rental_duration': 'rentalDuration',
            'odata_type': '@odata.type'
        }

        self._ask = ask
        self._fair_play_pfx = fair_play_pfx
        self._fair_play_pfx_password = fair_play_pfx_password
        self._rental_and_lease_key_type = rental_and_lease_key_type
        self._rental_duration = rental_duration
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentKeyPolicyFairPlayConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentKeyPolicyFairPlayConfiguration of this ContentKeyPolicyFairPlayConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ask(self):
        """Gets the ask of this ContentKeyPolicyFairPlayConfiguration.

        The key that must be used as FairPlay Application Secret key.

        :return: The ask of this ContentKeyPolicyFairPlayConfiguration.
        :rtype: str
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this ContentKeyPolicyFairPlayConfiguration.

        The key that must be used as FairPlay Application Secret key.

        :param ask: The ask of this ContentKeyPolicyFairPlayConfiguration.
        :type ask: str
        """
        if ask is None:
            raise ValueError("Invalid value for `ask`, must not be `None`")
        if ask is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', ask):
            raise ValueError("Invalid value for `ask`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._ask = ask

    @property
    def fair_play_pfx(self):
        """Gets the fair_play_pfx of this ContentKeyPolicyFairPlayConfiguration.

        The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).

        :return: The fair_play_pfx of this ContentKeyPolicyFairPlayConfiguration.
        :rtype: str
        """
        return self._fair_play_pfx

    @fair_play_pfx.setter
    def fair_play_pfx(self, fair_play_pfx):
        """Sets the fair_play_pfx of this ContentKeyPolicyFairPlayConfiguration.

        The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).

        :param fair_play_pfx: The fair_play_pfx of this ContentKeyPolicyFairPlayConfiguration.
        :type fair_play_pfx: str
        """
        if fair_play_pfx is None:
            raise ValueError("Invalid value for `fair_play_pfx`, must not be `None`")

        self._fair_play_pfx = fair_play_pfx

    @property
    def fair_play_pfx_password(self):
        """Gets the fair_play_pfx_password of this ContentKeyPolicyFairPlayConfiguration.

        The password encrypting FairPlay certificate in PKCS 12 (pfx) format.

        :return: The fair_play_pfx_password of this ContentKeyPolicyFairPlayConfiguration.
        :rtype: str
        """
        return self._fair_play_pfx_password

    @fair_play_pfx_password.setter
    def fair_play_pfx_password(self, fair_play_pfx_password):
        """Sets the fair_play_pfx_password of this ContentKeyPolicyFairPlayConfiguration.

        The password encrypting FairPlay certificate in PKCS 12 (pfx) format.

        :param fair_play_pfx_password: The fair_play_pfx_password of this ContentKeyPolicyFairPlayConfiguration.
        :type fair_play_pfx_password: str
        """
        if fair_play_pfx_password is None:
            raise ValueError("Invalid value for `fair_play_pfx_password`, must not be `None`")

        self._fair_play_pfx_password = fair_play_pfx_password

    @property
    def rental_and_lease_key_type(self):
        """Gets the rental_and_lease_key_type of this ContentKeyPolicyFairPlayConfiguration.

        The rental and lease key type.

        :return: The rental_and_lease_key_type of this ContentKeyPolicyFairPlayConfiguration.
        :rtype: str
        """
        return self._rental_and_lease_key_type

    @rental_and_lease_key_type.setter
    def rental_and_lease_key_type(self, rental_and_lease_key_type):
        """Sets the rental_and_lease_key_type of this ContentKeyPolicyFairPlayConfiguration.

        The rental and lease key type.

        :param rental_and_lease_key_type: The rental_and_lease_key_type of this ContentKeyPolicyFairPlayConfiguration.
        :type rental_and_lease_key_type: str
        """
        allowed_values = ["Unknown", "Undefined", "PersistentUnlimited", "PersistentLimited"]  # noqa: E501
        if rental_and_lease_key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rental_and_lease_key_type` ({0}), must be one of {1}"
                .format(rental_and_lease_key_type, allowed_values)
            )

        self._rental_and_lease_key_type = rental_and_lease_key_type

    @property
    def rental_duration(self):
        """Gets the rental_duration of this ContentKeyPolicyFairPlayConfiguration.

        The rental duration. Must be greater than or equal to 0.

        :return: The rental_duration of this ContentKeyPolicyFairPlayConfiguration.
        :rtype: int
        """
        return self._rental_duration

    @rental_duration.setter
    def rental_duration(self, rental_duration):
        """Sets the rental_duration of this ContentKeyPolicyFairPlayConfiguration.

        The rental duration. Must be greater than or equal to 0.

        :param rental_duration: The rental_duration of this ContentKeyPolicyFairPlayConfiguration.
        :type rental_duration: int
        """
        if rental_duration is None:
            raise ValueError("Invalid value for `rental_duration`, must not be `None`")

        self._rental_duration = rental_duration

    @property
    def odata_type(self):
        """Gets the odata_type of this ContentKeyPolicyFairPlayConfiguration.

        The discriminator for derived types.

        :return: The odata_type of this ContentKeyPolicyFairPlayConfiguration.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this ContentKeyPolicyFairPlayConfiguration.

        The discriminator for derived types.

        :param odata_type: The odata_type of this ContentKeyPolicyFairPlayConfiguration.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
