/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContentKeyPolicyFairPlayConfiguration.h
 *
 * Specifies a configuration for FairPlay licenses.
 */

#ifndef OAIContentKeyPolicyFairPlayConfiguration_H
#define OAIContentKeyPolicyFairPlayConfiguration_H

#include <QJsonObject>

#include "OAIContentKeyPolicyConfiguration.h"
#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIContentKeyPolicyFairPlayConfiguration : public OAIObject {
public:
    OAIContentKeyPolicyFairPlayConfiguration();
    OAIContentKeyPolicyFairPlayConfiguration(QString json);
    ~OAIContentKeyPolicyFairPlayConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QByteArray getAsk() const;
    void setAsk(const QByteArray &ask);
    bool is_ask_Set() const;
    bool is_ask_Valid() const;

    QString getFairPlayPfx() const;
    void setFairPlayPfx(const QString &fair_play_pfx);
    bool is_fair_play_pfx_Set() const;
    bool is_fair_play_pfx_Valid() const;

    QString getFairPlayPfxPassword() const;
    void setFairPlayPfxPassword(const QString &fair_play_pfx_password);
    bool is_fair_play_pfx_password_Set() const;
    bool is_fair_play_pfx_password_Valid() const;

    QString getRentalAndLeaseKeyType() const;
    void setRentalAndLeaseKeyType(const QString &rental_and_lease_key_type);
    bool is_rental_and_lease_key_type_Set() const;
    bool is_rental_and_lease_key_type_Valid() const;

    qint64 getRentalDuration() const;
    void setRentalDuration(const qint64 &rental_duration);
    bool is_rental_duration_Set() const;
    bool is_rental_duration_Valid() const;

    QString getOdataType() const;
    void setOdataType(const QString &odata_type);
    bool is_odata_type_Set() const;
    bool is_odata_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QByteArray m_ask;
    bool m_ask_isSet;
    bool m_ask_isValid;

    QString m_fair_play_pfx;
    bool m_fair_play_pfx_isSet;
    bool m_fair_play_pfx_isValid;

    QString m_fair_play_pfx_password;
    bool m_fair_play_pfx_password_isSet;
    bool m_fair_play_pfx_password_isValid;

    QString m_rental_and_lease_key_type;
    bool m_rental_and_lease_key_type_isSet;
    bool m_rental_and_lease_key_type_isValid;

    qint64 m_rental_duration;
    bool m_rental_duration_isSet;
    bool m_rental_duration_isValid;

    QString m_odata_type;
    bool m_odata_type_isSet;
    bool m_odata_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContentKeyPolicyFairPlayConfiguration)

#endif // OAIContentKeyPolicyFairPlayConfiguration_H
