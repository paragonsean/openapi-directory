/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentKeyPolicyPlayReadyLicense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentKeyPolicyPlayReadyLicense::OAIContentKeyPolicyPlayReadyLicense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentKeyPolicyPlayReadyLicense::OAIContentKeyPolicyPlayReadyLicense() {
    this->initializeModel();
}

OAIContentKeyPolicyPlayReadyLicense::~OAIContentKeyPolicyPlayReadyLicense() {}

void OAIContentKeyPolicyPlayReadyLicense::initializeModel() {

    m_allow_test_devices_isSet = false;
    m_allow_test_devices_isValid = false;

    m_begin_date_isSet = false;
    m_begin_date_isValid = false;

    m_content_key_location_isSet = false;
    m_content_key_location_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_grace_period_isSet = false;
    m_grace_period_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_play_right_isSet = false;
    m_play_right_isValid = false;

    m_relative_begin_date_isSet = false;
    m_relative_begin_date_isValid = false;

    m_relative_expiration_date_isSet = false;
    m_relative_expiration_date_isValid = false;
}

void OAIContentKeyPolicyPlayReadyLicense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentKeyPolicyPlayReadyLicense::fromJsonObject(QJsonObject json) {

    m_allow_test_devices_isValid = ::OpenAPI::fromJsonValue(m_allow_test_devices, json[QString("allowTestDevices")]);
    m_allow_test_devices_isSet = !json[QString("allowTestDevices")].isNull() && m_allow_test_devices_isValid;

    m_begin_date_isValid = ::OpenAPI::fromJsonValue(m_begin_date, json[QString("beginDate")]);
    m_begin_date_isSet = !json[QString("beginDate")].isNull() && m_begin_date_isValid;

    m_content_key_location_isValid = ::OpenAPI::fromJsonValue(m_content_key_location, json[QString("contentKeyLocation")]);
    m_content_key_location_isSet = !json[QString("contentKeyLocation")].isNull() && m_content_key_location_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_grace_period_isValid = ::OpenAPI::fromJsonValue(m_grace_period, json[QString("gracePeriod")]);
    m_grace_period_isSet = !json[QString("gracePeriod")].isNull() && m_grace_period_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_play_right_isValid = ::OpenAPI::fromJsonValue(m_play_right, json[QString("playRight")]);
    m_play_right_isSet = !json[QString("playRight")].isNull() && m_play_right_isValid;

    m_relative_begin_date_isValid = ::OpenAPI::fromJsonValue(m_relative_begin_date, json[QString("relativeBeginDate")]);
    m_relative_begin_date_isSet = !json[QString("relativeBeginDate")].isNull() && m_relative_begin_date_isValid;

    m_relative_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_relative_expiration_date, json[QString("relativeExpirationDate")]);
    m_relative_expiration_date_isSet = !json[QString("relativeExpirationDate")].isNull() && m_relative_expiration_date_isValid;
}

QString OAIContentKeyPolicyPlayReadyLicense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentKeyPolicyPlayReadyLicense::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_test_devices_isSet) {
        obj.insert(QString("allowTestDevices"), ::OpenAPI::toJsonValue(m_allow_test_devices));
    }
    if (m_begin_date_isSet) {
        obj.insert(QString("beginDate"), ::OpenAPI::toJsonValue(m_begin_date));
    }
    if (m_content_key_location.isSet()) {
        obj.insert(QString("contentKeyLocation"), ::OpenAPI::toJsonValue(m_content_key_location));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_grace_period_isSet) {
        obj.insert(QString("gracePeriod"), ::OpenAPI::toJsonValue(m_grace_period));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_play_right.isSet()) {
        obj.insert(QString("playRight"), ::OpenAPI::toJsonValue(m_play_right));
    }
    if (m_relative_begin_date_isSet) {
        obj.insert(QString("relativeBeginDate"), ::OpenAPI::toJsonValue(m_relative_begin_date));
    }
    if (m_relative_expiration_date_isSet) {
        obj.insert(QString("relativeExpirationDate"), ::OpenAPI::toJsonValue(m_relative_expiration_date));
    }
    return obj;
}

bool OAIContentKeyPolicyPlayReadyLicense::isAllowTestDevices() const {
    return m_allow_test_devices;
}
void OAIContentKeyPolicyPlayReadyLicense::setAllowTestDevices(const bool &allow_test_devices) {
    m_allow_test_devices = allow_test_devices;
    m_allow_test_devices_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_allow_test_devices_Set() const{
    return m_allow_test_devices_isSet;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_allow_test_devices_Valid() const{
    return m_allow_test_devices_isValid;
}

QDateTime OAIContentKeyPolicyPlayReadyLicense::getBeginDate() const {
    return m_begin_date;
}
void OAIContentKeyPolicyPlayReadyLicense::setBeginDate(const QDateTime &begin_date) {
    m_begin_date = begin_date;
    m_begin_date_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_begin_date_Set() const{
    return m_begin_date_isSet;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_begin_date_Valid() const{
    return m_begin_date_isValid;
}

OAIContentKeyPolicyPlayReadyContentKeyLocation OAIContentKeyPolicyPlayReadyLicense::getContentKeyLocation() const {
    return m_content_key_location;
}
void OAIContentKeyPolicyPlayReadyLicense::setContentKeyLocation(const OAIContentKeyPolicyPlayReadyContentKeyLocation &content_key_location) {
    m_content_key_location = content_key_location;
    m_content_key_location_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_content_key_location_Set() const{
    return m_content_key_location_isSet;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_content_key_location_Valid() const{
    return m_content_key_location_isValid;
}

QString OAIContentKeyPolicyPlayReadyLicense::getContentType() const {
    return m_content_type;
}
void OAIContentKeyPolicyPlayReadyLicense::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QDateTime OAIContentKeyPolicyPlayReadyLicense::getExpirationDate() const {
    return m_expiration_date;
}
void OAIContentKeyPolicyPlayReadyLicense::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIContentKeyPolicyPlayReadyLicense::getGracePeriod() const {
    return m_grace_period;
}
void OAIContentKeyPolicyPlayReadyLicense::setGracePeriod(const QString &grace_period) {
    m_grace_period = grace_period;
    m_grace_period_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_grace_period_Set() const{
    return m_grace_period_isSet;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_grace_period_Valid() const{
    return m_grace_period_isValid;
}

QString OAIContentKeyPolicyPlayReadyLicense::getLicenseType() const {
    return m_license_type;
}
void OAIContentKeyPolicyPlayReadyLicense::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_license_type_Valid() const{
    return m_license_type_isValid;
}

OAIContentKeyPolicyPlayReadyPlayRight OAIContentKeyPolicyPlayReadyLicense::getPlayRight() const {
    return m_play_right;
}
void OAIContentKeyPolicyPlayReadyLicense::setPlayRight(const OAIContentKeyPolicyPlayReadyPlayRight &play_right) {
    m_play_right = play_right;
    m_play_right_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_play_right_Set() const{
    return m_play_right_isSet;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_play_right_Valid() const{
    return m_play_right_isValid;
}

QString OAIContentKeyPolicyPlayReadyLicense::getRelativeBeginDate() const {
    return m_relative_begin_date;
}
void OAIContentKeyPolicyPlayReadyLicense::setRelativeBeginDate(const QString &relative_begin_date) {
    m_relative_begin_date = relative_begin_date;
    m_relative_begin_date_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_relative_begin_date_Set() const{
    return m_relative_begin_date_isSet;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_relative_begin_date_Valid() const{
    return m_relative_begin_date_isValid;
}

QString OAIContentKeyPolicyPlayReadyLicense::getRelativeExpirationDate() const {
    return m_relative_expiration_date;
}
void OAIContentKeyPolicyPlayReadyLicense::setRelativeExpirationDate(const QString &relative_expiration_date) {
    m_relative_expiration_date = relative_expiration_date;
    m_relative_expiration_date_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_relative_expiration_date_Set() const{
    return m_relative_expiration_date_isSet;
}

bool OAIContentKeyPolicyPlayReadyLicense::is_relative_expiration_date_Valid() const{
    return m_relative_expiration_date_isValid;
}

bool OAIContentKeyPolicyPlayReadyLicense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_test_devices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_begin_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_key_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grace_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_begin_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentKeyPolicyPlayReadyLicense::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_test_devices_isValid && m_content_key_location_isValid && m_content_type_isValid && m_license_type_isValid && true;
}

} // namespace OpenAPI
