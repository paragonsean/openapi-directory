/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentKeyPolicyFairPlayConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentKeyPolicyFairPlayConfiguration::OAIContentKeyPolicyFairPlayConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentKeyPolicyFairPlayConfiguration::OAIContentKeyPolicyFairPlayConfiguration() {
    this->initializeModel();
}

OAIContentKeyPolicyFairPlayConfiguration::~OAIContentKeyPolicyFairPlayConfiguration() {}

void OAIContentKeyPolicyFairPlayConfiguration::initializeModel() {

    m_ask_isSet = false;
    m_ask_isValid = false;

    m_fair_play_pfx_isSet = false;
    m_fair_play_pfx_isValid = false;

    m_fair_play_pfx_password_isSet = false;
    m_fair_play_pfx_password_isValid = false;

    m_rental_and_lease_key_type_isSet = false;
    m_rental_and_lease_key_type_isValid = false;

    m_rental_duration_isSet = false;
    m_rental_duration_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;
}

void OAIContentKeyPolicyFairPlayConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentKeyPolicyFairPlayConfiguration::fromJsonObject(QJsonObject json) {

    m_ask_isValid = ::OpenAPI::fromJsonValue(m_ask, json[QString("ask")]);
    m_ask_isSet = !json[QString("ask")].isNull() && m_ask_isValid;

    m_fair_play_pfx_isValid = ::OpenAPI::fromJsonValue(m_fair_play_pfx, json[QString("fairPlayPfx")]);
    m_fair_play_pfx_isSet = !json[QString("fairPlayPfx")].isNull() && m_fair_play_pfx_isValid;

    m_fair_play_pfx_password_isValid = ::OpenAPI::fromJsonValue(m_fair_play_pfx_password, json[QString("fairPlayPfxPassword")]);
    m_fair_play_pfx_password_isSet = !json[QString("fairPlayPfxPassword")].isNull() && m_fair_play_pfx_password_isValid;

    m_rental_and_lease_key_type_isValid = ::OpenAPI::fromJsonValue(m_rental_and_lease_key_type, json[QString("rentalAndLeaseKeyType")]);
    m_rental_and_lease_key_type_isSet = !json[QString("rentalAndLeaseKeyType")].isNull() && m_rental_and_lease_key_type_isValid;

    m_rental_duration_isValid = ::OpenAPI::fromJsonValue(m_rental_duration, json[QString("rentalDuration")]);
    m_rental_duration_isSet = !json[QString("rentalDuration")].isNull() && m_rental_duration_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;
}

QString OAIContentKeyPolicyFairPlayConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentKeyPolicyFairPlayConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_ask_isSet) {
        obj.insert(QString("ask"), ::OpenAPI::toJsonValue(m_ask));
    }
    if (m_fair_play_pfx_isSet) {
        obj.insert(QString("fairPlayPfx"), ::OpenAPI::toJsonValue(m_fair_play_pfx));
    }
    if (m_fair_play_pfx_password_isSet) {
        obj.insert(QString("fairPlayPfxPassword"), ::OpenAPI::toJsonValue(m_fair_play_pfx_password));
    }
    if (m_rental_and_lease_key_type_isSet) {
        obj.insert(QString("rentalAndLeaseKeyType"), ::OpenAPI::toJsonValue(m_rental_and_lease_key_type));
    }
    if (m_rental_duration_isSet) {
        obj.insert(QString("rentalDuration"), ::OpenAPI::toJsonValue(m_rental_duration));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    return obj;
}

QByteArray OAIContentKeyPolicyFairPlayConfiguration::getAsk() const {
    return m_ask;
}
void OAIContentKeyPolicyFairPlayConfiguration::setAsk(const QByteArray &ask) {
    m_ask = ask;
    m_ask_isSet = true;
}

bool OAIContentKeyPolicyFairPlayConfiguration::is_ask_Set() const{
    return m_ask_isSet;
}

bool OAIContentKeyPolicyFairPlayConfiguration::is_ask_Valid() const{
    return m_ask_isValid;
}

QString OAIContentKeyPolicyFairPlayConfiguration::getFairPlayPfx() const {
    return m_fair_play_pfx;
}
void OAIContentKeyPolicyFairPlayConfiguration::setFairPlayPfx(const QString &fair_play_pfx) {
    m_fair_play_pfx = fair_play_pfx;
    m_fair_play_pfx_isSet = true;
}

bool OAIContentKeyPolicyFairPlayConfiguration::is_fair_play_pfx_Set() const{
    return m_fair_play_pfx_isSet;
}

bool OAIContentKeyPolicyFairPlayConfiguration::is_fair_play_pfx_Valid() const{
    return m_fair_play_pfx_isValid;
}

QString OAIContentKeyPolicyFairPlayConfiguration::getFairPlayPfxPassword() const {
    return m_fair_play_pfx_password;
}
void OAIContentKeyPolicyFairPlayConfiguration::setFairPlayPfxPassword(const QString &fair_play_pfx_password) {
    m_fair_play_pfx_password = fair_play_pfx_password;
    m_fair_play_pfx_password_isSet = true;
}

bool OAIContentKeyPolicyFairPlayConfiguration::is_fair_play_pfx_password_Set() const{
    return m_fair_play_pfx_password_isSet;
}

bool OAIContentKeyPolicyFairPlayConfiguration::is_fair_play_pfx_password_Valid() const{
    return m_fair_play_pfx_password_isValid;
}

QString OAIContentKeyPolicyFairPlayConfiguration::getRentalAndLeaseKeyType() const {
    return m_rental_and_lease_key_type;
}
void OAIContentKeyPolicyFairPlayConfiguration::setRentalAndLeaseKeyType(const QString &rental_and_lease_key_type) {
    m_rental_and_lease_key_type = rental_and_lease_key_type;
    m_rental_and_lease_key_type_isSet = true;
}

bool OAIContentKeyPolicyFairPlayConfiguration::is_rental_and_lease_key_type_Set() const{
    return m_rental_and_lease_key_type_isSet;
}

bool OAIContentKeyPolicyFairPlayConfiguration::is_rental_and_lease_key_type_Valid() const{
    return m_rental_and_lease_key_type_isValid;
}

qint64 OAIContentKeyPolicyFairPlayConfiguration::getRentalDuration() const {
    return m_rental_duration;
}
void OAIContentKeyPolicyFairPlayConfiguration::setRentalDuration(const qint64 &rental_duration) {
    m_rental_duration = rental_duration;
    m_rental_duration_isSet = true;
}

bool OAIContentKeyPolicyFairPlayConfiguration::is_rental_duration_Set() const{
    return m_rental_duration_isSet;
}

bool OAIContentKeyPolicyFairPlayConfiguration::is_rental_duration_Valid() const{
    return m_rental_duration_isValid;
}

QString OAIContentKeyPolicyFairPlayConfiguration::getOdataType() const {
    return m_odata_type;
}
void OAIContentKeyPolicyFairPlayConfiguration::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIContentKeyPolicyFairPlayConfiguration::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIContentKeyPolicyFairPlayConfiguration::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

bool OAIContentKeyPolicyFairPlayConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fair_play_pfx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fair_play_pfx_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rental_and_lease_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rental_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentKeyPolicyFairPlayConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ask_isValid && m_fair_play_pfx_isValid && m_fair_play_pfx_password_isValid && m_rental_and_lease_key_type_isValid && m_rental_duration_isValid && m_odata_type_isValid && true;
}

} // namespace OpenAPI
