/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContentKeyPolicyPlayReadyLicense.h
 *
 * The PlayReady license
 */

#ifndef OAIContentKeyPolicyPlayReadyLicense_H
#define OAIContentKeyPolicyPlayReadyLicense_H

#include <QJsonObject>

#include "OAIContentKeyPolicyPlayReadyContentKeyLocation.h"
#include "OAIContentKeyPolicyPlayReadyPlayRight.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContentKeyPolicyPlayReadyContentKeyLocation;
class OAIContentKeyPolicyPlayReadyPlayRight;

class OAIContentKeyPolicyPlayReadyLicense : public OAIObject {
public:
    OAIContentKeyPolicyPlayReadyLicense();
    OAIContentKeyPolicyPlayReadyLicense(QString json);
    ~OAIContentKeyPolicyPlayReadyLicense() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowTestDevices() const;
    void setAllowTestDevices(const bool &allow_test_devices);
    bool is_allow_test_devices_Set() const;
    bool is_allow_test_devices_Valid() const;

    QDateTime getBeginDate() const;
    void setBeginDate(const QDateTime &begin_date);
    bool is_begin_date_Set() const;
    bool is_begin_date_Valid() const;

    OAIContentKeyPolicyPlayReadyContentKeyLocation getContentKeyLocation() const;
    void setContentKeyLocation(const OAIContentKeyPolicyPlayReadyContentKeyLocation &content_key_location);
    bool is_content_key_location_Set() const;
    bool is_content_key_location_Valid() const;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    QDateTime getExpirationDate() const;
    void setExpirationDate(const QDateTime &expiration_date);
    bool is_expiration_date_Set() const;
    bool is_expiration_date_Valid() const;

    QString getGracePeriod() const;
    void setGracePeriod(const QString &grace_period);
    bool is_grace_period_Set() const;
    bool is_grace_period_Valid() const;

    QString getLicenseType() const;
    void setLicenseType(const QString &license_type);
    bool is_license_type_Set() const;
    bool is_license_type_Valid() const;

    OAIContentKeyPolicyPlayReadyPlayRight getPlayRight() const;
    void setPlayRight(const OAIContentKeyPolicyPlayReadyPlayRight &play_right);
    bool is_play_right_Set() const;
    bool is_play_right_Valid() const;

    QString getRelativeBeginDate() const;
    void setRelativeBeginDate(const QString &relative_begin_date);
    bool is_relative_begin_date_Set() const;
    bool is_relative_begin_date_Valid() const;

    QString getRelativeExpirationDate() const;
    void setRelativeExpirationDate(const QString &relative_expiration_date);
    bool is_relative_expiration_date_Set() const;
    bool is_relative_expiration_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_test_devices;
    bool m_allow_test_devices_isSet;
    bool m_allow_test_devices_isValid;

    QDateTime m_begin_date;
    bool m_begin_date_isSet;
    bool m_begin_date_isValid;

    OAIContentKeyPolicyPlayReadyContentKeyLocation m_content_key_location;
    bool m_content_key_location_isSet;
    bool m_content_key_location_isValid;

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    QDateTime m_expiration_date;
    bool m_expiration_date_isSet;
    bool m_expiration_date_isValid;

    QString m_grace_period;
    bool m_grace_period_isSet;
    bool m_grace_period_isValid;

    QString m_license_type;
    bool m_license_type_isSet;
    bool m_license_type_isValid;

    OAIContentKeyPolicyPlayReadyPlayRight m_play_right;
    bool m_play_right_isSet;
    bool m_play_right_isValid;

    QString m_relative_begin_date;
    bool m_relative_begin_date_isSet;
    bool m_relative_begin_date_isValid;

    QString m_relative_expiration_date;
    bool m_relative_expiration_date_isSet;
    bool m_relative_expiration_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContentKeyPolicyPlayReadyLicense)

#endif // OAIContentKeyPolicyPlayReadyLicense_H
