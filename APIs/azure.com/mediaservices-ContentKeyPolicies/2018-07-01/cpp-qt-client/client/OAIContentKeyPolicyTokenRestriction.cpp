/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentKeyPolicyTokenRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentKeyPolicyTokenRestriction::OAIContentKeyPolicyTokenRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentKeyPolicyTokenRestriction::OAIContentKeyPolicyTokenRestriction() {
    this->initializeModel();
}

OAIContentKeyPolicyTokenRestriction::~OAIContentKeyPolicyTokenRestriction() {}

void OAIContentKeyPolicyTokenRestriction::initializeModel() {

    m_alternate_verification_keys_isSet = false;
    m_alternate_verification_keys_isValid = false;

    m_audience_isSet = false;
    m_audience_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_open_id_connect_discovery_document_isSet = false;
    m_open_id_connect_discovery_document_isValid = false;

    m_primary_verification_key_isSet = false;
    m_primary_verification_key_isValid = false;

    m_required_claims_isSet = false;
    m_required_claims_isValid = false;

    m_restriction_token_type_isSet = false;
    m_restriction_token_type_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;
}

void OAIContentKeyPolicyTokenRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentKeyPolicyTokenRestriction::fromJsonObject(QJsonObject json) {

    m_alternate_verification_keys_isValid = ::OpenAPI::fromJsonValue(m_alternate_verification_keys, json[QString("alternateVerificationKeys")]);
    m_alternate_verification_keys_isSet = !json[QString("alternateVerificationKeys")].isNull() && m_alternate_verification_keys_isValid;

    m_audience_isValid = ::OpenAPI::fromJsonValue(m_audience, json[QString("audience")]);
    m_audience_isSet = !json[QString("audience")].isNull() && m_audience_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_open_id_connect_discovery_document_isValid = ::OpenAPI::fromJsonValue(m_open_id_connect_discovery_document, json[QString("openIdConnectDiscoveryDocument")]);
    m_open_id_connect_discovery_document_isSet = !json[QString("openIdConnectDiscoveryDocument")].isNull() && m_open_id_connect_discovery_document_isValid;

    m_primary_verification_key_isValid = ::OpenAPI::fromJsonValue(m_primary_verification_key, json[QString("primaryVerificationKey")]);
    m_primary_verification_key_isSet = !json[QString("primaryVerificationKey")].isNull() && m_primary_verification_key_isValid;

    m_required_claims_isValid = ::OpenAPI::fromJsonValue(m_required_claims, json[QString("requiredClaims")]);
    m_required_claims_isSet = !json[QString("requiredClaims")].isNull() && m_required_claims_isValid;

    m_restriction_token_type_isValid = ::OpenAPI::fromJsonValue(m_restriction_token_type, json[QString("restrictionTokenType")]);
    m_restriction_token_type_isSet = !json[QString("restrictionTokenType")].isNull() && m_restriction_token_type_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;
}

QString OAIContentKeyPolicyTokenRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentKeyPolicyTokenRestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_verification_keys.size() > 0) {
        obj.insert(QString("alternateVerificationKeys"), ::OpenAPI::toJsonValue(m_alternate_verification_keys));
    }
    if (m_audience_isSet) {
        obj.insert(QString("audience"), ::OpenAPI::toJsonValue(m_audience));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_open_id_connect_discovery_document_isSet) {
        obj.insert(QString("openIdConnectDiscoveryDocument"), ::OpenAPI::toJsonValue(m_open_id_connect_discovery_document));
    }
    if (m_primary_verification_key.isSet()) {
        obj.insert(QString("primaryVerificationKey"), ::OpenAPI::toJsonValue(m_primary_verification_key));
    }
    if (m_required_claims.size() > 0) {
        obj.insert(QString("requiredClaims"), ::OpenAPI::toJsonValue(m_required_claims));
    }
    if (m_restriction_token_type_isSet) {
        obj.insert(QString("restrictionTokenType"), ::OpenAPI::toJsonValue(m_restriction_token_type));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    return obj;
}

QList<OAIContentKeyPolicyRestrictionTokenKey> OAIContentKeyPolicyTokenRestriction::getAlternateVerificationKeys() const {
    return m_alternate_verification_keys;
}
void OAIContentKeyPolicyTokenRestriction::setAlternateVerificationKeys(const QList<OAIContentKeyPolicyRestrictionTokenKey> &alternate_verification_keys) {
    m_alternate_verification_keys = alternate_verification_keys;
    m_alternate_verification_keys_isSet = true;
}

bool OAIContentKeyPolicyTokenRestriction::is_alternate_verification_keys_Set() const{
    return m_alternate_verification_keys_isSet;
}

bool OAIContentKeyPolicyTokenRestriction::is_alternate_verification_keys_Valid() const{
    return m_alternate_verification_keys_isValid;
}

QString OAIContentKeyPolicyTokenRestriction::getAudience() const {
    return m_audience;
}
void OAIContentKeyPolicyTokenRestriction::setAudience(const QString &audience) {
    m_audience = audience;
    m_audience_isSet = true;
}

bool OAIContentKeyPolicyTokenRestriction::is_audience_Set() const{
    return m_audience_isSet;
}

bool OAIContentKeyPolicyTokenRestriction::is_audience_Valid() const{
    return m_audience_isValid;
}

QString OAIContentKeyPolicyTokenRestriction::getIssuer() const {
    return m_issuer;
}
void OAIContentKeyPolicyTokenRestriction::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIContentKeyPolicyTokenRestriction::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIContentKeyPolicyTokenRestriction::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIContentKeyPolicyTokenRestriction::getOpenIdConnectDiscoveryDocument() const {
    return m_open_id_connect_discovery_document;
}
void OAIContentKeyPolicyTokenRestriction::setOpenIdConnectDiscoveryDocument(const QString &open_id_connect_discovery_document) {
    m_open_id_connect_discovery_document = open_id_connect_discovery_document;
    m_open_id_connect_discovery_document_isSet = true;
}

bool OAIContentKeyPolicyTokenRestriction::is_open_id_connect_discovery_document_Set() const{
    return m_open_id_connect_discovery_document_isSet;
}

bool OAIContentKeyPolicyTokenRestriction::is_open_id_connect_discovery_document_Valid() const{
    return m_open_id_connect_discovery_document_isValid;
}

OAIContentKeyPolicyRestrictionTokenKey OAIContentKeyPolicyTokenRestriction::getPrimaryVerificationKey() const {
    return m_primary_verification_key;
}
void OAIContentKeyPolicyTokenRestriction::setPrimaryVerificationKey(const OAIContentKeyPolicyRestrictionTokenKey &primary_verification_key) {
    m_primary_verification_key = primary_verification_key;
    m_primary_verification_key_isSet = true;
}

bool OAIContentKeyPolicyTokenRestriction::is_primary_verification_key_Set() const{
    return m_primary_verification_key_isSet;
}

bool OAIContentKeyPolicyTokenRestriction::is_primary_verification_key_Valid() const{
    return m_primary_verification_key_isValid;
}

QList<OAIContentKeyPolicyTokenClaim> OAIContentKeyPolicyTokenRestriction::getRequiredClaims() const {
    return m_required_claims;
}
void OAIContentKeyPolicyTokenRestriction::setRequiredClaims(const QList<OAIContentKeyPolicyTokenClaim> &required_claims) {
    m_required_claims = required_claims;
    m_required_claims_isSet = true;
}

bool OAIContentKeyPolicyTokenRestriction::is_required_claims_Set() const{
    return m_required_claims_isSet;
}

bool OAIContentKeyPolicyTokenRestriction::is_required_claims_Valid() const{
    return m_required_claims_isValid;
}

QString OAIContentKeyPolicyTokenRestriction::getRestrictionTokenType() const {
    return m_restriction_token_type;
}
void OAIContentKeyPolicyTokenRestriction::setRestrictionTokenType(const QString &restriction_token_type) {
    m_restriction_token_type = restriction_token_type;
    m_restriction_token_type_isSet = true;
}

bool OAIContentKeyPolicyTokenRestriction::is_restriction_token_type_Set() const{
    return m_restriction_token_type_isSet;
}

bool OAIContentKeyPolicyTokenRestriction::is_restriction_token_type_Valid() const{
    return m_restriction_token_type_isValid;
}

QString OAIContentKeyPolicyTokenRestriction::getOdataType() const {
    return m_odata_type;
}
void OAIContentKeyPolicyTokenRestriction::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIContentKeyPolicyTokenRestriction::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIContentKeyPolicyTokenRestriction::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

bool OAIContentKeyPolicyTokenRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_verification_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_id_connect_discovery_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_verification_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_claims.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_restriction_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentKeyPolicyTokenRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audience_isValid && m_issuer_isValid && m_primary_verification_key_isValid && m_restriction_token_type_isValid && m_odata_type_isValid && true;
}

} // namespace OpenAPI
