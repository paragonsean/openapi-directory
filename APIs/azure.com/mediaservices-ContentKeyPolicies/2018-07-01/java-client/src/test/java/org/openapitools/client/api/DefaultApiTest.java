/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.ContentKeyPolicy;
import org.openapitools.client.model.ContentKeyPolicyCollection;
import org.openapitools.client.model.ContentKeyPolicyProperties;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create or update an Content Key Policy
     *
     * Create or update a Content Key Policy in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentKeyPoliciesCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String contentKeyPolicyName = null;
        String apiVersion = null;
        ContentKeyPolicy parameters = null;
        ContentKeyPolicy response = api.contentKeyPoliciesCreateOrUpdate(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Delete a Content Key Policy
     *
     * Deletes a Content Key Policy in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentKeyPoliciesDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String contentKeyPolicyName = null;
        String apiVersion = null;
        api.contentKeyPoliciesDelete(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a Content Key Policy
     *
     * Get the details of a Content Key Policy in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentKeyPoliciesGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String contentKeyPolicyName = null;
        String apiVersion = null;
        ContentKeyPolicy response = api.contentKeyPoliciesGet(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a Content Key Policy with secrets
     *
     * Get a Content Key Policy including secret values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentKeyPoliciesGetPolicyPropertiesWithSecretsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String contentKeyPolicyName = null;
        String apiVersion = null;
        ContentKeyPolicyProperties response = api.contentKeyPoliciesGetPolicyPropertiesWithSecrets(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion);
        // TODO: test validations
    }

    /**
     * List Content Key Policies
     *
     * Lists the Content Key Policies in the account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentKeyPoliciesListTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $orderby = null;
        ContentKeyPolicyCollection response = api.contentKeyPoliciesList(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, $top, $orderby);
        // TODO: test validations
    }

    /**
     * Update a Content Key Policy
     *
     * Updates an existing Content Key Policy in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentKeyPoliciesUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String contentKeyPolicyName = null;
        String apiVersion = null;
        ContentKeyPolicy parameters = null;
        ContentKeyPolicy response = api.contentKeyPoliciesUpdate(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, parameters);
        // TODO: test validations
    }

}
