/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.ContentKeyPolicy;
import org.openapitools.client.model.ContentKeyPolicyCollection;
import org.openapitools.client.model.ContentKeyPolicyProperties;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for contentKeyPoliciesCreateOrUpdate
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentKeyPoliciesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, ContentKeyPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "contentKeyPolicyName" + "}", localVarApiClient.escapeString(contentKeyPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentKeyPoliciesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, ContentKeyPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling contentKeyPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling contentKeyPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling contentKeyPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'contentKeyPolicyName' is set
        if (contentKeyPolicyName == null) {
            throw new ApiException("Missing the required parameter 'contentKeyPolicyName' when calling contentKeyPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling contentKeyPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling contentKeyPoliciesCreateOrUpdate(Async)");
        }

        return contentKeyPoliciesCreateOrUpdateCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, parameters, _callback);

    }

    /**
     * Create or update an Content Key Policy
     * Create or update a Content Key Policy in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @return ContentKeyPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ContentKeyPolicy contentKeyPoliciesCreateOrUpdate(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, ContentKeyPolicy parameters) throws ApiException {
        ApiResponse<ContentKeyPolicy> localVarResp = contentKeyPoliciesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or update an Content Key Policy
     * Create or update a Content Key Policy in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @return ApiResponse&lt;ContentKeyPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentKeyPolicy> contentKeyPoliciesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, ContentKeyPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = contentKeyPoliciesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ContentKeyPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update an Content Key Policy (asynchronously)
     * Create or update a Content Key Policy in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentKeyPoliciesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, ContentKeyPolicy parameters, final ApiCallback<ContentKeyPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentKeyPoliciesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ContentKeyPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentKeyPoliciesDelete
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentKeyPoliciesDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "contentKeyPolicyName" + "}", localVarApiClient.escapeString(contentKeyPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentKeyPoliciesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling contentKeyPoliciesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling contentKeyPoliciesDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling contentKeyPoliciesDelete(Async)");
        }

        // verify the required parameter 'contentKeyPolicyName' is set
        if (contentKeyPolicyName == null) {
            throw new ApiException("Missing the required parameter 'contentKeyPolicyName' when calling contentKeyPoliciesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling contentKeyPoliciesDelete(Async)");
        }

        return contentKeyPoliciesDeleteCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, _callback);

    }

    /**
     * Delete a Content Key Policy
     * Deletes a Content Key Policy in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public void contentKeyPoliciesDelete(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion) throws ApiException {
        contentKeyPoliciesDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion);
    }

    /**
     * Delete a Content Key Policy
     * Deletes a Content Key Policy in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contentKeyPoliciesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = contentKeyPoliciesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Content Key Policy (asynchronously)
     * Deletes a Content Key Policy in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentKeyPoliciesDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentKeyPoliciesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentKeyPoliciesGet
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentKeyPoliciesGetCall(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "contentKeyPolicyName" + "}", localVarApiClient.escapeString(contentKeyPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentKeyPoliciesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling contentKeyPoliciesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling contentKeyPoliciesGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling contentKeyPoliciesGet(Async)");
        }

        // verify the required parameter 'contentKeyPolicyName' is set
        if (contentKeyPolicyName == null) {
            throw new ApiException("Missing the required parameter 'contentKeyPolicyName' when calling contentKeyPoliciesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling contentKeyPoliciesGet(Async)");
        }

        return contentKeyPoliciesGetCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, _callback);

    }

    /**
     * Get a Content Key Policy
     * Get the details of a Content Key Policy in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ContentKeyPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ContentKeyPolicy contentKeyPoliciesGet(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion) throws ApiException {
        ApiResponse<ContentKeyPolicy> localVarResp = contentKeyPoliciesGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a Content Key Policy
     * Get the details of a Content Key Policy in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ContentKeyPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentKeyPolicy> contentKeyPoliciesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = contentKeyPoliciesGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ContentKeyPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Content Key Policy (asynchronously)
     * Get the details of a Content Key Policy in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentKeyPoliciesGetAsync(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, final ApiCallback<ContentKeyPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentKeyPoliciesGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ContentKeyPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentKeyPoliciesGetPolicyPropertiesWithSecrets
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentKeyPoliciesGetPolicyPropertiesWithSecretsCall(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}/getPolicyPropertiesWithSecrets"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "contentKeyPolicyName" + "}", localVarApiClient.escapeString(contentKeyPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentKeyPoliciesGetPolicyPropertiesWithSecretsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling contentKeyPoliciesGetPolicyPropertiesWithSecrets(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling contentKeyPoliciesGetPolicyPropertiesWithSecrets(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling contentKeyPoliciesGetPolicyPropertiesWithSecrets(Async)");
        }

        // verify the required parameter 'contentKeyPolicyName' is set
        if (contentKeyPolicyName == null) {
            throw new ApiException("Missing the required parameter 'contentKeyPolicyName' when calling contentKeyPoliciesGetPolicyPropertiesWithSecrets(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling contentKeyPoliciesGetPolicyPropertiesWithSecrets(Async)");
        }

        return contentKeyPoliciesGetPolicyPropertiesWithSecretsCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, _callback);

    }

    /**
     * Get a Content Key Policy with secrets
     * Get a Content Key Policy including secret values
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ContentKeyPolicyProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ContentKeyPolicyProperties contentKeyPoliciesGetPolicyPropertiesWithSecrets(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion) throws ApiException {
        ApiResponse<ContentKeyPolicyProperties> localVarResp = contentKeyPoliciesGetPolicyPropertiesWithSecretsWithHttpInfo(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a Content Key Policy with secrets
     * Get a Content Key Policy including secret values
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ContentKeyPolicyProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentKeyPolicyProperties> contentKeyPoliciesGetPolicyPropertiesWithSecretsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = contentKeyPoliciesGetPolicyPropertiesWithSecretsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ContentKeyPolicyProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Content Key Policy with secrets (asynchronously)
     * Get a Content Key Policy including secret values
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentKeyPoliciesGetPolicyPropertiesWithSecretsAsync(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, final ApiCallback<ContentKeyPolicyProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentKeyPoliciesGetPolicyPropertiesWithSecretsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ContentKeyPolicyProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentKeyPoliciesList
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $filter Restricts the set of items returned. (optional)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param $orderby Specifies the key by which the result collection should be ordered. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentKeyPoliciesListCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, Integer $top, String $orderby, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentKeyPoliciesListValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, Integer $top, String $orderby, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling contentKeyPoliciesList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling contentKeyPoliciesList(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling contentKeyPoliciesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling contentKeyPoliciesList(Async)");
        }

        return contentKeyPoliciesListCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, $top, $orderby, _callback);

    }

    /**
     * List Content Key Policies
     * Lists the Content Key Policies in the account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $filter Restricts the set of items returned. (optional)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param $orderby Specifies the key by which the result collection should be ordered. (optional)
     * @return ContentKeyPolicyCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ContentKeyPolicyCollection contentKeyPoliciesList(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, Integer $top, String $orderby) throws ApiException {
        ApiResponse<ContentKeyPolicyCollection> localVarResp = contentKeyPoliciesListWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, $top, $orderby);
        return localVarResp.getData();
    }

    /**
     * List Content Key Policies
     * Lists the Content Key Policies in the account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $filter Restricts the set of items returned. (optional)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param $orderby Specifies the key by which the result collection should be ordered. (optional)
     * @return ApiResponse&lt;ContentKeyPolicyCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentKeyPolicyCollection> contentKeyPoliciesListWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, Integer $top, String $orderby) throws ApiException {
        okhttp3.Call localVarCall = contentKeyPoliciesListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, $top, $orderby, null);
        Type localVarReturnType = new TypeToken<ContentKeyPolicyCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Content Key Policies (asynchronously)
     * Lists the Content Key Policies in the account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $filter Restricts the set of items returned. (optional)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param $orderby Specifies the key by which the result collection should be ordered. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentKeyPoliciesListAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $filter, Integer $top, String $orderby, final ApiCallback<ContentKeyPolicyCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentKeyPoliciesListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, $top, $orderby, _callback);
        Type localVarReturnType = new TypeToken<ContentKeyPolicyCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentKeyPoliciesUpdate
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentKeyPoliciesUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, ContentKeyPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "contentKeyPolicyName" + "}", localVarApiClient.escapeString(contentKeyPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentKeyPoliciesUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, ContentKeyPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling contentKeyPoliciesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling contentKeyPoliciesUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling contentKeyPoliciesUpdate(Async)");
        }

        // verify the required parameter 'contentKeyPolicyName' is set
        if (contentKeyPolicyName == null) {
            throw new ApiException("Missing the required parameter 'contentKeyPolicyName' when calling contentKeyPoliciesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling contentKeyPoliciesUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling contentKeyPoliciesUpdate(Async)");
        }

        return contentKeyPoliciesUpdateCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, parameters, _callback);

    }

    /**
     * Update a Content Key Policy
     * Updates an existing Content Key Policy in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @return ContentKeyPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ContentKeyPolicy contentKeyPoliciesUpdate(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, ContentKeyPolicy parameters) throws ApiException {
        ApiResponse<ContentKeyPolicy> localVarResp = contentKeyPoliciesUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Update a Content Key Policy
     * Updates an existing Content Key Policy in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @return ApiResponse&lt;ContentKeyPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentKeyPolicy> contentKeyPoliciesUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, ContentKeyPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = contentKeyPoliciesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ContentKeyPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Content Key Policy (asynchronously)
     * Updates an existing Content Key Policy in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param contentKeyPolicyName The Content Key Policy name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentKeyPoliciesUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String contentKeyPolicyName, String apiVersion, ContentKeyPolicy parameters, final ApiCallback<ContentKeyPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentKeyPoliciesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, contentKeyPolicyName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ContentKeyPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
