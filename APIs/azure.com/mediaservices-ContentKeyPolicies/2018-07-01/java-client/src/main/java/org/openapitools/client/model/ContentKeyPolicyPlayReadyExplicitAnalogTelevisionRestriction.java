/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures the Explicit Analog Television Output Restriction control bits. For further details see the PlayReady Compliance Rules.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:48.386410-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction {
  public static final String SERIALIZED_NAME_BEST_EFFORT = "bestEffort";
  @SerializedName(SERIALIZED_NAME_BEST_EFFORT)
  private Boolean bestEffort;

  public static final String SERIALIZED_NAME_CONFIGURATION_DATA = "configurationData";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_DATA)
  private Integer configurationData;

  public ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction() {
  }

  public ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction bestEffort(Boolean bestEffort) {
    this.bestEffort = bestEffort;
    return this;
  }

  /**
   * Indicates whether this restriction is enforced on a Best Effort basis.
   * @return bestEffort
   */
  @javax.annotation.Nonnull
  public Boolean getBestEffort() {
    return bestEffort;
  }

  public void setBestEffort(Boolean bestEffort) {
    this.bestEffort = bestEffort;
  }


  public ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction configurationData(Integer configurationData) {
    this.configurationData = configurationData;
    return this;
  }

  /**
   * Configures the restriction control bits. Must be between 0 and 3 inclusive.
   * @return configurationData
   */
  @javax.annotation.Nonnull
  public Integer getConfigurationData() {
    return configurationData;
  }

  public void setConfigurationData(Integer configurationData) {
    this.configurationData = configurationData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction = (ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction) o;
    return Objects.equals(this.bestEffort, contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.bestEffort) &&
        Objects.equals(this.configurationData, contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.configurationData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestEffort, configurationData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction {\n");
    sb.append("    bestEffort: ").append(toIndentedString(bestEffort)).append("\n");
    sb.append("    configurationData: ").append(toIndentedString(configurationData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bestEffort");
    openapiFields.add("configurationData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bestEffort");
    openapiRequiredFields.add("configurationData");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction is not found in the empty JSON string", ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction>() {
           @Override
           public void write(JsonWriter out, ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction
   * @throws IOException if the JSON string is invalid with respect to ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction
   */
  public static ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.class);
  }

  /**
   * Convert an instance of ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

