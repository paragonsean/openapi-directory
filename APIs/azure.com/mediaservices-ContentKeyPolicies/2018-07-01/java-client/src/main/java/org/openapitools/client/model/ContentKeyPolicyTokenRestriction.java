/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContentKeyPolicyRestriction;
import org.openapitools.client.model.ContentKeyPolicyRestrictionTokenKey;
import org.openapitools.client.model.ContentKeyPolicyTokenClaim;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a token restriction. Provided token must match these requirements for successful license or key delivery.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:48.386410-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentKeyPolicyTokenRestriction extends ContentKeyPolicyRestriction {
  public static final String SERIALIZED_NAME_ALTERNATE_VERIFICATION_KEYS = "alternateVerificationKeys";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_VERIFICATION_KEYS)
  private List<ContentKeyPolicyRestrictionTokenKey> alternateVerificationKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUDIENCE = "audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  private String audience;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_OPEN_ID_CONNECT_DISCOVERY_DOCUMENT = "openIdConnectDiscoveryDocument";
  @SerializedName(SERIALIZED_NAME_OPEN_ID_CONNECT_DISCOVERY_DOCUMENT)
  private String openIdConnectDiscoveryDocument;

  public static final String SERIALIZED_NAME_PRIMARY_VERIFICATION_KEY = "primaryVerificationKey";
  @SerializedName(SERIALIZED_NAME_PRIMARY_VERIFICATION_KEY)
  private ContentKeyPolicyRestrictionTokenKey primaryVerificationKey;

  public static final String SERIALIZED_NAME_REQUIRED_CLAIMS = "requiredClaims";
  @SerializedName(SERIALIZED_NAME_REQUIRED_CLAIMS)
  private List<ContentKeyPolicyTokenClaim> requiredClaims = new ArrayList<>();

  /**
   * The type of token.
   */
  @JsonAdapter(RestrictionTokenTypeEnum.Adapter.class)
  public enum RestrictionTokenTypeEnum {
    UNKNOWN("Unknown"),
    
    SWT("Swt"),
    
    JWT("Jwt");

    private String value;

    RestrictionTokenTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestrictionTokenTypeEnum fromValue(String value) {
      for (RestrictionTokenTypeEnum b : RestrictionTokenTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestrictionTokenTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestrictionTokenTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestrictionTokenTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestrictionTokenTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestrictionTokenTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTRICTION_TOKEN_TYPE = "restrictionTokenType";
  @SerializedName(SERIALIZED_NAME_RESTRICTION_TOKEN_TYPE)
  private RestrictionTokenTypeEnum restrictionTokenType;

  public ContentKeyPolicyTokenRestriction() {
    this.atOdataType = this.getClass().getSimpleName();
  }

  public ContentKeyPolicyTokenRestriction alternateVerificationKeys(List<ContentKeyPolicyRestrictionTokenKey> alternateVerificationKeys) {
    this.alternateVerificationKeys = alternateVerificationKeys;
    return this;
  }

  public ContentKeyPolicyTokenRestriction addAlternateVerificationKeysItem(ContentKeyPolicyRestrictionTokenKey alternateVerificationKeysItem) {
    if (this.alternateVerificationKeys == null) {
      this.alternateVerificationKeys = new ArrayList<>();
    }
    this.alternateVerificationKeys.add(alternateVerificationKeysItem);
    return this;
  }

  /**
   * A list of alternative verification keys.
   * @return alternateVerificationKeys
   */
  @javax.annotation.Nullable
  public List<ContentKeyPolicyRestrictionTokenKey> getAlternateVerificationKeys() {
    return alternateVerificationKeys;
  }

  public void setAlternateVerificationKeys(List<ContentKeyPolicyRestrictionTokenKey> alternateVerificationKeys) {
    this.alternateVerificationKeys = alternateVerificationKeys;
  }


  public ContentKeyPolicyTokenRestriction audience(String audience) {
    this.audience = audience;
    return this;
  }

  /**
   * The audience for the token.
   * @return audience
   */
  @javax.annotation.Nonnull
  public String getAudience() {
    return audience;
  }

  public void setAudience(String audience) {
    this.audience = audience;
  }


  public ContentKeyPolicyTokenRestriction issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * The token issuer.
   * @return issuer
   */
  @javax.annotation.Nonnull
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public ContentKeyPolicyTokenRestriction openIdConnectDiscoveryDocument(String openIdConnectDiscoveryDocument) {
    this.openIdConnectDiscoveryDocument = openIdConnectDiscoveryDocument;
    return this;
  }

  /**
   * The OpenID connect discovery document.
   * @return openIdConnectDiscoveryDocument
   */
  @javax.annotation.Nullable
  public String getOpenIdConnectDiscoveryDocument() {
    return openIdConnectDiscoveryDocument;
  }

  public void setOpenIdConnectDiscoveryDocument(String openIdConnectDiscoveryDocument) {
    this.openIdConnectDiscoveryDocument = openIdConnectDiscoveryDocument;
  }


  public ContentKeyPolicyTokenRestriction primaryVerificationKey(ContentKeyPolicyRestrictionTokenKey primaryVerificationKey) {
    this.primaryVerificationKey = primaryVerificationKey;
    return this;
  }

  /**
   * Get primaryVerificationKey
   * @return primaryVerificationKey
   */
  @javax.annotation.Nonnull
  public ContentKeyPolicyRestrictionTokenKey getPrimaryVerificationKey() {
    return primaryVerificationKey;
  }

  public void setPrimaryVerificationKey(ContentKeyPolicyRestrictionTokenKey primaryVerificationKey) {
    this.primaryVerificationKey = primaryVerificationKey;
  }


  public ContentKeyPolicyTokenRestriction requiredClaims(List<ContentKeyPolicyTokenClaim> requiredClaims) {
    this.requiredClaims = requiredClaims;
    return this;
  }

  public ContentKeyPolicyTokenRestriction addRequiredClaimsItem(ContentKeyPolicyTokenClaim requiredClaimsItem) {
    if (this.requiredClaims == null) {
      this.requiredClaims = new ArrayList<>();
    }
    this.requiredClaims.add(requiredClaimsItem);
    return this;
  }

  /**
   * A list of required token claims.
   * @return requiredClaims
   */
  @javax.annotation.Nullable
  public List<ContentKeyPolicyTokenClaim> getRequiredClaims() {
    return requiredClaims;
  }

  public void setRequiredClaims(List<ContentKeyPolicyTokenClaim> requiredClaims) {
    this.requiredClaims = requiredClaims;
  }


  public ContentKeyPolicyTokenRestriction restrictionTokenType(RestrictionTokenTypeEnum restrictionTokenType) {
    this.restrictionTokenType = restrictionTokenType;
    return this;
  }

  /**
   * The type of token.
   * @return restrictionTokenType
   */
  @javax.annotation.Nonnull
  public RestrictionTokenTypeEnum getRestrictionTokenType() {
    return restrictionTokenType;
  }

  public void setRestrictionTokenType(RestrictionTokenTypeEnum restrictionTokenType) {
    this.restrictionTokenType = restrictionTokenType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentKeyPolicyTokenRestriction contentKeyPolicyTokenRestriction = (ContentKeyPolicyTokenRestriction) o;
    return Objects.equals(this.alternateVerificationKeys, contentKeyPolicyTokenRestriction.alternateVerificationKeys) &&
        Objects.equals(this.audience, contentKeyPolicyTokenRestriction.audience) &&
        Objects.equals(this.issuer, contentKeyPolicyTokenRestriction.issuer) &&
        Objects.equals(this.openIdConnectDiscoveryDocument, contentKeyPolicyTokenRestriction.openIdConnectDiscoveryDocument) &&
        Objects.equals(this.primaryVerificationKey, contentKeyPolicyTokenRestriction.primaryVerificationKey) &&
        Objects.equals(this.requiredClaims, contentKeyPolicyTokenRestriction.requiredClaims) &&
        Objects.equals(this.restrictionTokenType, contentKeyPolicyTokenRestriction.restrictionTokenType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateVerificationKeys, audience, issuer, openIdConnectDiscoveryDocument, primaryVerificationKey, requiredClaims, restrictionTokenType, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentKeyPolicyTokenRestriction {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    alternateVerificationKeys: ").append(toIndentedString(alternateVerificationKeys)).append("\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    openIdConnectDiscoveryDocument: ").append(toIndentedString(openIdConnectDiscoveryDocument)).append("\n");
    sb.append("    primaryVerificationKey: ").append(toIndentedString(primaryVerificationKey)).append("\n");
    sb.append("    requiredClaims: ").append(toIndentedString(requiredClaims)).append("\n");
    sb.append("    restrictionTokenType: ").append(toIndentedString(restrictionTokenType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("audience");
    openapiRequiredFields.add("issuer");
    openapiRequiredFields.add("primaryVerificationKey");
    openapiRequiredFields.add("restrictionTokenType");
    openapiRequiredFields.add("@odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentKeyPolicyTokenRestriction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentKeyPolicyTokenRestriction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentKeyPolicyTokenRestriction is not found in the empty JSON string", ContentKeyPolicyTokenRestriction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentKeyPolicyTokenRestriction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentKeyPolicyTokenRestriction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContentKeyPolicyTokenRestriction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentKeyPolicyTokenRestriction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentKeyPolicyTokenRestriction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentKeyPolicyTokenRestriction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentKeyPolicyTokenRestriction.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentKeyPolicyTokenRestriction>() {
           @Override
           public void write(JsonWriter out, ContentKeyPolicyTokenRestriction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentKeyPolicyTokenRestriction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentKeyPolicyTokenRestriction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentKeyPolicyTokenRestriction
   * @throws IOException if the JSON string is invalid with respect to ContentKeyPolicyTokenRestriction
   */
  public static ContentKeyPolicyTokenRestriction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentKeyPolicyTokenRestriction.class);
  }

  /**
   * Convert an instance of ContentKeyPolicyTokenRestriction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

