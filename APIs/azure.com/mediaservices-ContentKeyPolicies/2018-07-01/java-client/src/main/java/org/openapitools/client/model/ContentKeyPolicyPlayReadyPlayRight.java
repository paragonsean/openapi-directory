/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures the Play Right in the PlayReady license.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:48.386410-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentKeyPolicyPlayReadyPlayRight {
  public static final String SERIALIZED_NAME_AGC_AND_COLOR_STRIPE_RESTRICTION = "agcAndColorStripeRestriction";
  @SerializedName(SERIALIZED_NAME_AGC_AND_COLOR_STRIPE_RESTRICTION)
  private Integer agcAndColorStripeRestriction;

  /**
   * Configures Unknown output handling settings of the license.
   */
  @JsonAdapter(AllowPassingVideoContentToUnknownOutputEnum.Adapter.class)
  public enum AllowPassingVideoContentToUnknownOutputEnum {
    UNKNOWN("Unknown"),
    
    NOT_ALLOWED("NotAllowed"),
    
    ALLOWED("Allowed"),
    
    ALLOWED_WITH_VIDEO_CONSTRICTION("AllowedWithVideoConstriction");

    private String value;

    AllowPassingVideoContentToUnknownOutputEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowPassingVideoContentToUnknownOutputEnum fromValue(String value) {
      for (AllowPassingVideoContentToUnknownOutputEnum b : AllowPassingVideoContentToUnknownOutputEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowPassingVideoContentToUnknownOutputEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowPassingVideoContentToUnknownOutputEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowPassingVideoContentToUnknownOutputEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowPassingVideoContentToUnknownOutputEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllowPassingVideoContentToUnknownOutputEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOW_PASSING_VIDEO_CONTENT_TO_UNKNOWN_OUTPUT = "allowPassingVideoContentToUnknownOutput";
  @SerializedName(SERIALIZED_NAME_ALLOW_PASSING_VIDEO_CONTENT_TO_UNKNOWN_OUTPUT)
  private AllowPassingVideoContentToUnknownOutputEnum allowPassingVideoContentToUnknownOutput;

  public static final String SERIALIZED_NAME_ANALOG_VIDEO_OPL = "analogVideoOpl";
  @SerializedName(SERIALIZED_NAME_ANALOG_VIDEO_OPL)
  private Integer analogVideoOpl;

  public static final String SERIALIZED_NAME_COMPRESSED_DIGITAL_AUDIO_OPL = "compressedDigitalAudioOpl";
  @SerializedName(SERIALIZED_NAME_COMPRESSED_DIGITAL_AUDIO_OPL)
  private Integer compressedDigitalAudioOpl;

  public static final String SERIALIZED_NAME_COMPRESSED_DIGITAL_VIDEO_OPL = "compressedDigitalVideoOpl";
  @SerializedName(SERIALIZED_NAME_COMPRESSED_DIGITAL_VIDEO_OPL)
  private Integer compressedDigitalVideoOpl;

  public static final String SERIALIZED_NAME_DIGITAL_VIDEO_ONLY_CONTENT_RESTRICTION = "digitalVideoOnlyContentRestriction";
  @SerializedName(SERIALIZED_NAME_DIGITAL_VIDEO_ONLY_CONTENT_RESTRICTION)
  private Boolean digitalVideoOnlyContentRestriction;

  public static final String SERIALIZED_NAME_EXPLICIT_ANALOG_TELEVISION_OUTPUT_RESTRICTION = "explicitAnalogTelevisionOutputRestriction";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_ANALOG_TELEVISION_OUTPUT_RESTRICTION)
  private ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction explicitAnalogTelevisionOutputRestriction;

  public static final String SERIALIZED_NAME_FIRST_PLAY_EXPIRATION = "firstPlayExpiration";
  @SerializedName(SERIALIZED_NAME_FIRST_PLAY_EXPIRATION)
  private String firstPlayExpiration;

  public static final String SERIALIZED_NAME_IMAGE_CONSTRAINT_FOR_ANALOG_COMPONENT_VIDEO_RESTRICTION = "imageConstraintForAnalogComponentVideoRestriction";
  @SerializedName(SERIALIZED_NAME_IMAGE_CONSTRAINT_FOR_ANALOG_COMPONENT_VIDEO_RESTRICTION)
  private Boolean imageConstraintForAnalogComponentVideoRestriction;

  public static final String SERIALIZED_NAME_IMAGE_CONSTRAINT_FOR_ANALOG_COMPUTER_MONITOR_RESTRICTION = "imageConstraintForAnalogComputerMonitorRestriction";
  @SerializedName(SERIALIZED_NAME_IMAGE_CONSTRAINT_FOR_ANALOG_COMPUTER_MONITOR_RESTRICTION)
  private Boolean imageConstraintForAnalogComputerMonitorRestriction;

  public static final String SERIALIZED_NAME_SCMS_RESTRICTION = "scmsRestriction";
  @SerializedName(SERIALIZED_NAME_SCMS_RESTRICTION)
  private Integer scmsRestriction;

  public static final String SERIALIZED_NAME_UNCOMPRESSED_DIGITAL_AUDIO_OPL = "uncompressedDigitalAudioOpl";
  @SerializedName(SERIALIZED_NAME_UNCOMPRESSED_DIGITAL_AUDIO_OPL)
  private Integer uncompressedDigitalAudioOpl;

  public static final String SERIALIZED_NAME_UNCOMPRESSED_DIGITAL_VIDEO_OPL = "uncompressedDigitalVideoOpl";
  @SerializedName(SERIALIZED_NAME_UNCOMPRESSED_DIGITAL_VIDEO_OPL)
  private Integer uncompressedDigitalVideoOpl;

  public ContentKeyPolicyPlayReadyPlayRight() {
  }

  public ContentKeyPolicyPlayReadyPlayRight agcAndColorStripeRestriction(Integer agcAndColorStripeRestriction) {
    this.agcAndColorStripeRestriction = agcAndColorStripeRestriction;
    return this;
  }

  /**
   * Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
   * @return agcAndColorStripeRestriction
   */
  @javax.annotation.Nullable
  public Integer getAgcAndColorStripeRestriction() {
    return agcAndColorStripeRestriction;
  }

  public void setAgcAndColorStripeRestriction(Integer agcAndColorStripeRestriction) {
    this.agcAndColorStripeRestriction = agcAndColorStripeRestriction;
  }


  public ContentKeyPolicyPlayReadyPlayRight allowPassingVideoContentToUnknownOutput(AllowPassingVideoContentToUnknownOutputEnum allowPassingVideoContentToUnknownOutput) {
    this.allowPassingVideoContentToUnknownOutput = allowPassingVideoContentToUnknownOutput;
    return this;
  }

  /**
   * Configures Unknown output handling settings of the license.
   * @return allowPassingVideoContentToUnknownOutput
   */
  @javax.annotation.Nonnull
  public AllowPassingVideoContentToUnknownOutputEnum getAllowPassingVideoContentToUnknownOutput() {
    return allowPassingVideoContentToUnknownOutput;
  }

  public void setAllowPassingVideoContentToUnknownOutput(AllowPassingVideoContentToUnknownOutputEnum allowPassingVideoContentToUnknownOutput) {
    this.allowPassingVideoContentToUnknownOutput = allowPassingVideoContentToUnknownOutput;
  }


  public ContentKeyPolicyPlayReadyPlayRight analogVideoOpl(Integer analogVideoOpl) {
    this.analogVideoOpl = analogVideoOpl;
    return this;
  }

  /**
   * Specifies the output protection level for compressed digital audio.
   * @return analogVideoOpl
   */
  @javax.annotation.Nullable
  public Integer getAnalogVideoOpl() {
    return analogVideoOpl;
  }

  public void setAnalogVideoOpl(Integer analogVideoOpl) {
    this.analogVideoOpl = analogVideoOpl;
  }


  public ContentKeyPolicyPlayReadyPlayRight compressedDigitalAudioOpl(Integer compressedDigitalAudioOpl) {
    this.compressedDigitalAudioOpl = compressedDigitalAudioOpl;
    return this;
  }

  /**
   * Specifies the output protection level for compressed digital audio.
   * @return compressedDigitalAudioOpl
   */
  @javax.annotation.Nullable
  public Integer getCompressedDigitalAudioOpl() {
    return compressedDigitalAudioOpl;
  }

  public void setCompressedDigitalAudioOpl(Integer compressedDigitalAudioOpl) {
    this.compressedDigitalAudioOpl = compressedDigitalAudioOpl;
  }


  public ContentKeyPolicyPlayReadyPlayRight compressedDigitalVideoOpl(Integer compressedDigitalVideoOpl) {
    this.compressedDigitalVideoOpl = compressedDigitalVideoOpl;
    return this;
  }

  /**
   * Specifies the output protection level for compressed digital video.
   * @return compressedDigitalVideoOpl
   */
  @javax.annotation.Nullable
  public Integer getCompressedDigitalVideoOpl() {
    return compressedDigitalVideoOpl;
  }

  public void setCompressedDigitalVideoOpl(Integer compressedDigitalVideoOpl) {
    this.compressedDigitalVideoOpl = compressedDigitalVideoOpl;
  }


  public ContentKeyPolicyPlayReadyPlayRight digitalVideoOnlyContentRestriction(Boolean digitalVideoOnlyContentRestriction) {
    this.digitalVideoOnlyContentRestriction = digitalVideoOnlyContentRestriction;
    return this;
  }

  /**
   * Enables the Image Constraint For Analog Component Video Restriction in the license.
   * @return digitalVideoOnlyContentRestriction
   */
  @javax.annotation.Nonnull
  public Boolean getDigitalVideoOnlyContentRestriction() {
    return digitalVideoOnlyContentRestriction;
  }

  public void setDigitalVideoOnlyContentRestriction(Boolean digitalVideoOnlyContentRestriction) {
    this.digitalVideoOnlyContentRestriction = digitalVideoOnlyContentRestriction;
  }


  public ContentKeyPolicyPlayReadyPlayRight explicitAnalogTelevisionOutputRestriction(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction explicitAnalogTelevisionOutputRestriction) {
    this.explicitAnalogTelevisionOutputRestriction = explicitAnalogTelevisionOutputRestriction;
    return this;
  }

  /**
   * Get explicitAnalogTelevisionOutputRestriction
   * @return explicitAnalogTelevisionOutputRestriction
   */
  @javax.annotation.Nullable
  public ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction getExplicitAnalogTelevisionOutputRestriction() {
    return explicitAnalogTelevisionOutputRestriction;
  }

  public void setExplicitAnalogTelevisionOutputRestriction(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction explicitAnalogTelevisionOutputRestriction) {
    this.explicitAnalogTelevisionOutputRestriction = explicitAnalogTelevisionOutputRestriction;
  }


  public ContentKeyPolicyPlayReadyPlayRight firstPlayExpiration(String firstPlayExpiration) {
    this.firstPlayExpiration = firstPlayExpiration;
    return this;
  }

  /**
   * The amount of time that the license is valid after the license is first used to play content.
   * @return firstPlayExpiration
   */
  @javax.annotation.Nullable
  public String getFirstPlayExpiration() {
    return firstPlayExpiration;
  }

  public void setFirstPlayExpiration(String firstPlayExpiration) {
    this.firstPlayExpiration = firstPlayExpiration;
  }


  public ContentKeyPolicyPlayReadyPlayRight imageConstraintForAnalogComponentVideoRestriction(Boolean imageConstraintForAnalogComponentVideoRestriction) {
    this.imageConstraintForAnalogComponentVideoRestriction = imageConstraintForAnalogComponentVideoRestriction;
    return this;
  }

  /**
   * Enables the Image Constraint For Analog Component Video Restriction in the license.
   * @return imageConstraintForAnalogComponentVideoRestriction
   */
  @javax.annotation.Nonnull
  public Boolean getImageConstraintForAnalogComponentVideoRestriction() {
    return imageConstraintForAnalogComponentVideoRestriction;
  }

  public void setImageConstraintForAnalogComponentVideoRestriction(Boolean imageConstraintForAnalogComponentVideoRestriction) {
    this.imageConstraintForAnalogComponentVideoRestriction = imageConstraintForAnalogComponentVideoRestriction;
  }


  public ContentKeyPolicyPlayReadyPlayRight imageConstraintForAnalogComputerMonitorRestriction(Boolean imageConstraintForAnalogComputerMonitorRestriction) {
    this.imageConstraintForAnalogComputerMonitorRestriction = imageConstraintForAnalogComputerMonitorRestriction;
    return this;
  }

  /**
   * Enables the Image Constraint For Analog Component Video Restriction in the license.
   * @return imageConstraintForAnalogComputerMonitorRestriction
   */
  @javax.annotation.Nonnull
  public Boolean getImageConstraintForAnalogComputerMonitorRestriction() {
    return imageConstraintForAnalogComputerMonitorRestriction;
  }

  public void setImageConstraintForAnalogComputerMonitorRestriction(Boolean imageConstraintForAnalogComputerMonitorRestriction) {
    this.imageConstraintForAnalogComputerMonitorRestriction = imageConstraintForAnalogComputerMonitorRestriction;
  }


  public ContentKeyPolicyPlayReadyPlayRight scmsRestriction(Integer scmsRestriction) {
    this.scmsRestriction = scmsRestriction;
    return this;
  }

  /**
   * Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
   * @return scmsRestriction
   */
  @javax.annotation.Nullable
  public Integer getScmsRestriction() {
    return scmsRestriction;
  }

  public void setScmsRestriction(Integer scmsRestriction) {
    this.scmsRestriction = scmsRestriction;
  }


  public ContentKeyPolicyPlayReadyPlayRight uncompressedDigitalAudioOpl(Integer uncompressedDigitalAudioOpl) {
    this.uncompressedDigitalAudioOpl = uncompressedDigitalAudioOpl;
    return this;
  }

  /**
   * Specifies the output protection level for uncompressed digital audio.
   * @return uncompressedDigitalAudioOpl
   */
  @javax.annotation.Nullable
  public Integer getUncompressedDigitalAudioOpl() {
    return uncompressedDigitalAudioOpl;
  }

  public void setUncompressedDigitalAudioOpl(Integer uncompressedDigitalAudioOpl) {
    this.uncompressedDigitalAudioOpl = uncompressedDigitalAudioOpl;
  }


  public ContentKeyPolicyPlayReadyPlayRight uncompressedDigitalVideoOpl(Integer uncompressedDigitalVideoOpl) {
    this.uncompressedDigitalVideoOpl = uncompressedDigitalVideoOpl;
    return this;
  }

  /**
   * Specifies the output protection level for uncompressed digital video.
   * @return uncompressedDigitalVideoOpl
   */
  @javax.annotation.Nullable
  public Integer getUncompressedDigitalVideoOpl() {
    return uncompressedDigitalVideoOpl;
  }

  public void setUncompressedDigitalVideoOpl(Integer uncompressedDigitalVideoOpl) {
    this.uncompressedDigitalVideoOpl = uncompressedDigitalVideoOpl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentKeyPolicyPlayReadyPlayRight contentKeyPolicyPlayReadyPlayRight = (ContentKeyPolicyPlayReadyPlayRight) o;
    return Objects.equals(this.agcAndColorStripeRestriction, contentKeyPolicyPlayReadyPlayRight.agcAndColorStripeRestriction) &&
        Objects.equals(this.allowPassingVideoContentToUnknownOutput, contentKeyPolicyPlayReadyPlayRight.allowPassingVideoContentToUnknownOutput) &&
        Objects.equals(this.analogVideoOpl, contentKeyPolicyPlayReadyPlayRight.analogVideoOpl) &&
        Objects.equals(this.compressedDigitalAudioOpl, contentKeyPolicyPlayReadyPlayRight.compressedDigitalAudioOpl) &&
        Objects.equals(this.compressedDigitalVideoOpl, contentKeyPolicyPlayReadyPlayRight.compressedDigitalVideoOpl) &&
        Objects.equals(this.digitalVideoOnlyContentRestriction, contentKeyPolicyPlayReadyPlayRight.digitalVideoOnlyContentRestriction) &&
        Objects.equals(this.explicitAnalogTelevisionOutputRestriction, contentKeyPolicyPlayReadyPlayRight.explicitAnalogTelevisionOutputRestriction) &&
        Objects.equals(this.firstPlayExpiration, contentKeyPolicyPlayReadyPlayRight.firstPlayExpiration) &&
        Objects.equals(this.imageConstraintForAnalogComponentVideoRestriction, contentKeyPolicyPlayReadyPlayRight.imageConstraintForAnalogComponentVideoRestriction) &&
        Objects.equals(this.imageConstraintForAnalogComputerMonitorRestriction, contentKeyPolicyPlayReadyPlayRight.imageConstraintForAnalogComputerMonitorRestriction) &&
        Objects.equals(this.scmsRestriction, contentKeyPolicyPlayReadyPlayRight.scmsRestriction) &&
        Objects.equals(this.uncompressedDigitalAudioOpl, contentKeyPolicyPlayReadyPlayRight.uncompressedDigitalAudioOpl) &&
        Objects.equals(this.uncompressedDigitalVideoOpl, contentKeyPolicyPlayReadyPlayRight.uncompressedDigitalVideoOpl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agcAndColorStripeRestriction, allowPassingVideoContentToUnknownOutput, analogVideoOpl, compressedDigitalAudioOpl, compressedDigitalVideoOpl, digitalVideoOnlyContentRestriction, explicitAnalogTelevisionOutputRestriction, firstPlayExpiration, imageConstraintForAnalogComponentVideoRestriction, imageConstraintForAnalogComputerMonitorRestriction, scmsRestriction, uncompressedDigitalAudioOpl, uncompressedDigitalVideoOpl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentKeyPolicyPlayReadyPlayRight {\n");
    sb.append("    agcAndColorStripeRestriction: ").append(toIndentedString(agcAndColorStripeRestriction)).append("\n");
    sb.append("    allowPassingVideoContentToUnknownOutput: ").append(toIndentedString(allowPassingVideoContentToUnknownOutput)).append("\n");
    sb.append("    analogVideoOpl: ").append(toIndentedString(analogVideoOpl)).append("\n");
    sb.append("    compressedDigitalAudioOpl: ").append(toIndentedString(compressedDigitalAudioOpl)).append("\n");
    sb.append("    compressedDigitalVideoOpl: ").append(toIndentedString(compressedDigitalVideoOpl)).append("\n");
    sb.append("    digitalVideoOnlyContentRestriction: ").append(toIndentedString(digitalVideoOnlyContentRestriction)).append("\n");
    sb.append("    explicitAnalogTelevisionOutputRestriction: ").append(toIndentedString(explicitAnalogTelevisionOutputRestriction)).append("\n");
    sb.append("    firstPlayExpiration: ").append(toIndentedString(firstPlayExpiration)).append("\n");
    sb.append("    imageConstraintForAnalogComponentVideoRestriction: ").append(toIndentedString(imageConstraintForAnalogComponentVideoRestriction)).append("\n");
    sb.append("    imageConstraintForAnalogComputerMonitorRestriction: ").append(toIndentedString(imageConstraintForAnalogComputerMonitorRestriction)).append("\n");
    sb.append("    scmsRestriction: ").append(toIndentedString(scmsRestriction)).append("\n");
    sb.append("    uncompressedDigitalAudioOpl: ").append(toIndentedString(uncompressedDigitalAudioOpl)).append("\n");
    sb.append("    uncompressedDigitalVideoOpl: ").append(toIndentedString(uncompressedDigitalVideoOpl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agcAndColorStripeRestriction");
    openapiFields.add("allowPassingVideoContentToUnknownOutput");
    openapiFields.add("analogVideoOpl");
    openapiFields.add("compressedDigitalAudioOpl");
    openapiFields.add("compressedDigitalVideoOpl");
    openapiFields.add("digitalVideoOnlyContentRestriction");
    openapiFields.add("explicitAnalogTelevisionOutputRestriction");
    openapiFields.add("firstPlayExpiration");
    openapiFields.add("imageConstraintForAnalogComponentVideoRestriction");
    openapiFields.add("imageConstraintForAnalogComputerMonitorRestriction");
    openapiFields.add("scmsRestriction");
    openapiFields.add("uncompressedDigitalAudioOpl");
    openapiFields.add("uncompressedDigitalVideoOpl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowPassingVideoContentToUnknownOutput");
    openapiRequiredFields.add("digitalVideoOnlyContentRestriction");
    openapiRequiredFields.add("imageConstraintForAnalogComponentVideoRestriction");
    openapiRequiredFields.add("imageConstraintForAnalogComputerMonitorRestriction");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentKeyPolicyPlayReadyPlayRight
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentKeyPolicyPlayReadyPlayRight.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentKeyPolicyPlayReadyPlayRight is not found in the empty JSON string", ContentKeyPolicyPlayReadyPlayRight.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentKeyPolicyPlayReadyPlayRight.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentKeyPolicyPlayReadyPlayRight` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContentKeyPolicyPlayReadyPlayRight.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("allowPassingVideoContentToUnknownOutput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowPassingVideoContentToUnknownOutput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowPassingVideoContentToUnknownOutput").toString()));
      }
      // validate the required field `allowPassingVideoContentToUnknownOutput`
      AllowPassingVideoContentToUnknownOutputEnum.validateJsonElement(jsonObj.get("allowPassingVideoContentToUnknownOutput"));
      // validate the optional field `explicitAnalogTelevisionOutputRestriction`
      if (jsonObj.get("explicitAnalogTelevisionOutputRestriction") != null && !jsonObj.get("explicitAnalogTelevisionOutputRestriction").isJsonNull()) {
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction.validateJsonElement(jsonObj.get("explicitAnalogTelevisionOutputRestriction"));
      }
      if ((jsonObj.get("firstPlayExpiration") != null && !jsonObj.get("firstPlayExpiration").isJsonNull()) && !jsonObj.get("firstPlayExpiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstPlayExpiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstPlayExpiration").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentKeyPolicyPlayReadyPlayRight.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentKeyPolicyPlayReadyPlayRight' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentKeyPolicyPlayReadyPlayRight> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentKeyPolicyPlayReadyPlayRight.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentKeyPolicyPlayReadyPlayRight>() {
           @Override
           public void write(JsonWriter out, ContentKeyPolicyPlayReadyPlayRight value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentKeyPolicyPlayReadyPlayRight read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentKeyPolicyPlayReadyPlayRight given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentKeyPolicyPlayReadyPlayRight
   * @throws IOException if the JSON string is invalid with respect to ContentKeyPolicyPlayReadyPlayRight
   */
  public static ContentKeyPolicyPlayReadyPlayRight fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentKeyPolicyPlayReadyPlayRight.class);
  }

  /**
   * Convert an instance of ContentKeyPolicyPlayReadyPlayRight to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

