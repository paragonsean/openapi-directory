/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentKeyPolicyX509CertificateTokenKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentKeyPolicyX509CertificateTokenKey::OAIContentKeyPolicyX509CertificateTokenKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentKeyPolicyX509CertificateTokenKey::OAIContentKeyPolicyX509CertificateTokenKey() {
    this->initializeModel();
}

OAIContentKeyPolicyX509CertificateTokenKey::~OAIContentKeyPolicyX509CertificateTokenKey() {}

void OAIContentKeyPolicyX509CertificateTokenKey::initializeModel() {

    m_raw_body_isSet = false;
    m_raw_body_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;
}

void OAIContentKeyPolicyX509CertificateTokenKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentKeyPolicyX509CertificateTokenKey::fromJsonObject(QJsonObject json) {

    m_raw_body_isValid = ::OpenAPI::fromJsonValue(m_raw_body, json[QString("rawBody")]);
    m_raw_body_isSet = !json[QString("rawBody")].isNull() && m_raw_body_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;
}

QString OAIContentKeyPolicyX509CertificateTokenKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentKeyPolicyX509CertificateTokenKey::asJsonObject() const {
    QJsonObject obj;
    if (m_raw_body_isSet) {
        obj.insert(QString("rawBody"), ::OpenAPI::toJsonValue(m_raw_body));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    return obj;
}

QByteArray OAIContentKeyPolicyX509CertificateTokenKey::getRawBody() const {
    return m_raw_body;
}
void OAIContentKeyPolicyX509CertificateTokenKey::setRawBody(const QByteArray &raw_body) {
    m_raw_body = raw_body;
    m_raw_body_isSet = true;
}

bool OAIContentKeyPolicyX509CertificateTokenKey::is_raw_body_Set() const{
    return m_raw_body_isSet;
}

bool OAIContentKeyPolicyX509CertificateTokenKey::is_raw_body_Valid() const{
    return m_raw_body_isValid;
}

QString OAIContentKeyPolicyX509CertificateTokenKey::getOdataType() const {
    return m_odata_type;
}
void OAIContentKeyPolicyX509CertificateTokenKey::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIContentKeyPolicyX509CertificateTokenKey::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIContentKeyPolicyX509CertificateTokenKey::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

bool OAIContentKeyPolicyX509CertificateTokenKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_raw_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentKeyPolicyX509CertificateTokenKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_raw_body_isValid && m_odata_type_isValid && true;
}

} // namespace OpenAPI
