/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentKeyPolicyTokenClaim.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentKeyPolicyTokenClaim::OAIContentKeyPolicyTokenClaim(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentKeyPolicyTokenClaim::OAIContentKeyPolicyTokenClaim() {
    this->initializeModel();
}

OAIContentKeyPolicyTokenClaim::~OAIContentKeyPolicyTokenClaim() {}

void OAIContentKeyPolicyTokenClaim::initializeModel() {

    m_claim_type_isSet = false;
    m_claim_type_isValid = false;

    m_claim_value_isSet = false;
    m_claim_value_isValid = false;
}

void OAIContentKeyPolicyTokenClaim::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentKeyPolicyTokenClaim::fromJsonObject(QJsonObject json) {

    m_claim_type_isValid = ::OpenAPI::fromJsonValue(m_claim_type, json[QString("claimType")]);
    m_claim_type_isSet = !json[QString("claimType")].isNull() && m_claim_type_isValid;

    m_claim_value_isValid = ::OpenAPI::fromJsonValue(m_claim_value, json[QString("claimValue")]);
    m_claim_value_isSet = !json[QString("claimValue")].isNull() && m_claim_value_isValid;
}

QString OAIContentKeyPolicyTokenClaim::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentKeyPolicyTokenClaim::asJsonObject() const {
    QJsonObject obj;
    if (m_claim_type_isSet) {
        obj.insert(QString("claimType"), ::OpenAPI::toJsonValue(m_claim_type));
    }
    if (m_claim_value_isSet) {
        obj.insert(QString("claimValue"), ::OpenAPI::toJsonValue(m_claim_value));
    }
    return obj;
}

QString OAIContentKeyPolicyTokenClaim::getClaimType() const {
    return m_claim_type;
}
void OAIContentKeyPolicyTokenClaim::setClaimType(const QString &claim_type) {
    m_claim_type = claim_type;
    m_claim_type_isSet = true;
}

bool OAIContentKeyPolicyTokenClaim::is_claim_type_Set() const{
    return m_claim_type_isSet;
}

bool OAIContentKeyPolicyTokenClaim::is_claim_type_Valid() const{
    return m_claim_type_isValid;
}

QString OAIContentKeyPolicyTokenClaim::getClaimValue() const {
    return m_claim_value;
}
void OAIContentKeyPolicyTokenClaim::setClaimValue(const QString &claim_value) {
    m_claim_value = claim_value;
    m_claim_value_isSet = true;
}

bool OAIContentKeyPolicyTokenClaim::is_claim_value_Set() const{
    return m_claim_value_isSet;
}

bool OAIContentKeyPolicyTokenClaim::is_claim_value_Valid() const{
    return m_claim_value_isValid;
}

bool OAIContentKeyPolicyTokenClaim::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claim_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentKeyPolicyTokenClaim::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
