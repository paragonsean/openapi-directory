/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentKeyPolicyPlayReadyPlayRight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentKeyPolicyPlayReadyPlayRight::OAIContentKeyPolicyPlayReadyPlayRight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentKeyPolicyPlayReadyPlayRight::OAIContentKeyPolicyPlayReadyPlayRight() {
    this->initializeModel();
}

OAIContentKeyPolicyPlayReadyPlayRight::~OAIContentKeyPolicyPlayReadyPlayRight() {}

void OAIContentKeyPolicyPlayReadyPlayRight::initializeModel() {

    m_agc_and_color_stripe_restriction_isSet = false;
    m_agc_and_color_stripe_restriction_isValid = false;

    m_allow_passing_video_content_to_unknown_output_isSet = false;
    m_allow_passing_video_content_to_unknown_output_isValid = false;

    m_analog_video_opl_isSet = false;
    m_analog_video_opl_isValid = false;

    m_compressed_digital_audio_opl_isSet = false;
    m_compressed_digital_audio_opl_isValid = false;

    m_compressed_digital_video_opl_isSet = false;
    m_compressed_digital_video_opl_isValid = false;

    m_digital_video_only_content_restriction_isSet = false;
    m_digital_video_only_content_restriction_isValid = false;

    m_explicit_analog_television_output_restriction_isSet = false;
    m_explicit_analog_television_output_restriction_isValid = false;

    m_first_play_expiration_isSet = false;
    m_first_play_expiration_isValid = false;

    m_image_constraint_for_analog_component_video_restriction_isSet = false;
    m_image_constraint_for_analog_component_video_restriction_isValid = false;

    m_image_constraint_for_analog_computer_monitor_restriction_isSet = false;
    m_image_constraint_for_analog_computer_monitor_restriction_isValid = false;

    m_scms_restriction_isSet = false;
    m_scms_restriction_isValid = false;

    m_uncompressed_digital_audio_opl_isSet = false;
    m_uncompressed_digital_audio_opl_isValid = false;

    m_uncompressed_digital_video_opl_isSet = false;
    m_uncompressed_digital_video_opl_isValid = false;
}

void OAIContentKeyPolicyPlayReadyPlayRight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentKeyPolicyPlayReadyPlayRight::fromJsonObject(QJsonObject json) {

    m_agc_and_color_stripe_restriction_isValid = ::OpenAPI::fromJsonValue(m_agc_and_color_stripe_restriction, json[QString("agcAndColorStripeRestriction")]);
    m_agc_and_color_stripe_restriction_isSet = !json[QString("agcAndColorStripeRestriction")].isNull() && m_agc_and_color_stripe_restriction_isValid;

    m_allow_passing_video_content_to_unknown_output_isValid = ::OpenAPI::fromJsonValue(m_allow_passing_video_content_to_unknown_output, json[QString("allowPassingVideoContentToUnknownOutput")]);
    m_allow_passing_video_content_to_unknown_output_isSet = !json[QString("allowPassingVideoContentToUnknownOutput")].isNull() && m_allow_passing_video_content_to_unknown_output_isValid;

    m_analog_video_opl_isValid = ::OpenAPI::fromJsonValue(m_analog_video_opl, json[QString("analogVideoOpl")]);
    m_analog_video_opl_isSet = !json[QString("analogVideoOpl")].isNull() && m_analog_video_opl_isValid;

    m_compressed_digital_audio_opl_isValid = ::OpenAPI::fromJsonValue(m_compressed_digital_audio_opl, json[QString("compressedDigitalAudioOpl")]);
    m_compressed_digital_audio_opl_isSet = !json[QString("compressedDigitalAudioOpl")].isNull() && m_compressed_digital_audio_opl_isValid;

    m_compressed_digital_video_opl_isValid = ::OpenAPI::fromJsonValue(m_compressed_digital_video_opl, json[QString("compressedDigitalVideoOpl")]);
    m_compressed_digital_video_opl_isSet = !json[QString("compressedDigitalVideoOpl")].isNull() && m_compressed_digital_video_opl_isValid;

    m_digital_video_only_content_restriction_isValid = ::OpenAPI::fromJsonValue(m_digital_video_only_content_restriction, json[QString("digitalVideoOnlyContentRestriction")]);
    m_digital_video_only_content_restriction_isSet = !json[QString("digitalVideoOnlyContentRestriction")].isNull() && m_digital_video_only_content_restriction_isValid;

    m_explicit_analog_television_output_restriction_isValid = ::OpenAPI::fromJsonValue(m_explicit_analog_television_output_restriction, json[QString("explicitAnalogTelevisionOutputRestriction")]);
    m_explicit_analog_television_output_restriction_isSet = !json[QString("explicitAnalogTelevisionOutputRestriction")].isNull() && m_explicit_analog_television_output_restriction_isValid;

    m_first_play_expiration_isValid = ::OpenAPI::fromJsonValue(m_first_play_expiration, json[QString("firstPlayExpiration")]);
    m_first_play_expiration_isSet = !json[QString("firstPlayExpiration")].isNull() && m_first_play_expiration_isValid;

    m_image_constraint_for_analog_component_video_restriction_isValid = ::OpenAPI::fromJsonValue(m_image_constraint_for_analog_component_video_restriction, json[QString("imageConstraintForAnalogComponentVideoRestriction")]);
    m_image_constraint_for_analog_component_video_restriction_isSet = !json[QString("imageConstraintForAnalogComponentVideoRestriction")].isNull() && m_image_constraint_for_analog_component_video_restriction_isValid;

    m_image_constraint_for_analog_computer_monitor_restriction_isValid = ::OpenAPI::fromJsonValue(m_image_constraint_for_analog_computer_monitor_restriction, json[QString("imageConstraintForAnalogComputerMonitorRestriction")]);
    m_image_constraint_for_analog_computer_monitor_restriction_isSet = !json[QString("imageConstraintForAnalogComputerMonitorRestriction")].isNull() && m_image_constraint_for_analog_computer_monitor_restriction_isValid;

    m_scms_restriction_isValid = ::OpenAPI::fromJsonValue(m_scms_restriction, json[QString("scmsRestriction")]);
    m_scms_restriction_isSet = !json[QString("scmsRestriction")].isNull() && m_scms_restriction_isValid;

    m_uncompressed_digital_audio_opl_isValid = ::OpenAPI::fromJsonValue(m_uncompressed_digital_audio_opl, json[QString("uncompressedDigitalAudioOpl")]);
    m_uncompressed_digital_audio_opl_isSet = !json[QString("uncompressedDigitalAudioOpl")].isNull() && m_uncompressed_digital_audio_opl_isValid;

    m_uncompressed_digital_video_opl_isValid = ::OpenAPI::fromJsonValue(m_uncompressed_digital_video_opl, json[QString("uncompressedDigitalVideoOpl")]);
    m_uncompressed_digital_video_opl_isSet = !json[QString("uncompressedDigitalVideoOpl")].isNull() && m_uncompressed_digital_video_opl_isValid;
}

QString OAIContentKeyPolicyPlayReadyPlayRight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentKeyPolicyPlayReadyPlayRight::asJsonObject() const {
    QJsonObject obj;
    if (m_agc_and_color_stripe_restriction_isSet) {
        obj.insert(QString("agcAndColorStripeRestriction"), ::OpenAPI::toJsonValue(m_agc_and_color_stripe_restriction));
    }
    if (m_allow_passing_video_content_to_unknown_output_isSet) {
        obj.insert(QString("allowPassingVideoContentToUnknownOutput"), ::OpenAPI::toJsonValue(m_allow_passing_video_content_to_unknown_output));
    }
    if (m_analog_video_opl_isSet) {
        obj.insert(QString("analogVideoOpl"), ::OpenAPI::toJsonValue(m_analog_video_opl));
    }
    if (m_compressed_digital_audio_opl_isSet) {
        obj.insert(QString("compressedDigitalAudioOpl"), ::OpenAPI::toJsonValue(m_compressed_digital_audio_opl));
    }
    if (m_compressed_digital_video_opl_isSet) {
        obj.insert(QString("compressedDigitalVideoOpl"), ::OpenAPI::toJsonValue(m_compressed_digital_video_opl));
    }
    if (m_digital_video_only_content_restriction_isSet) {
        obj.insert(QString("digitalVideoOnlyContentRestriction"), ::OpenAPI::toJsonValue(m_digital_video_only_content_restriction));
    }
    if (m_explicit_analog_television_output_restriction.isSet()) {
        obj.insert(QString("explicitAnalogTelevisionOutputRestriction"), ::OpenAPI::toJsonValue(m_explicit_analog_television_output_restriction));
    }
    if (m_first_play_expiration_isSet) {
        obj.insert(QString("firstPlayExpiration"), ::OpenAPI::toJsonValue(m_first_play_expiration));
    }
    if (m_image_constraint_for_analog_component_video_restriction_isSet) {
        obj.insert(QString("imageConstraintForAnalogComponentVideoRestriction"), ::OpenAPI::toJsonValue(m_image_constraint_for_analog_component_video_restriction));
    }
    if (m_image_constraint_for_analog_computer_monitor_restriction_isSet) {
        obj.insert(QString("imageConstraintForAnalogComputerMonitorRestriction"), ::OpenAPI::toJsonValue(m_image_constraint_for_analog_computer_monitor_restriction));
    }
    if (m_scms_restriction_isSet) {
        obj.insert(QString("scmsRestriction"), ::OpenAPI::toJsonValue(m_scms_restriction));
    }
    if (m_uncompressed_digital_audio_opl_isSet) {
        obj.insert(QString("uncompressedDigitalAudioOpl"), ::OpenAPI::toJsonValue(m_uncompressed_digital_audio_opl));
    }
    if (m_uncompressed_digital_video_opl_isSet) {
        obj.insert(QString("uncompressedDigitalVideoOpl"), ::OpenAPI::toJsonValue(m_uncompressed_digital_video_opl));
    }
    return obj;
}

qint32 OAIContentKeyPolicyPlayReadyPlayRight::getAgcAndColorStripeRestriction() const {
    return m_agc_and_color_stripe_restriction;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setAgcAndColorStripeRestriction(const qint32 &agc_and_color_stripe_restriction) {
    m_agc_and_color_stripe_restriction = agc_and_color_stripe_restriction;
    m_agc_and_color_stripe_restriction_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_agc_and_color_stripe_restriction_Set() const{
    return m_agc_and_color_stripe_restriction_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_agc_and_color_stripe_restriction_Valid() const{
    return m_agc_and_color_stripe_restriction_isValid;
}

QString OAIContentKeyPolicyPlayReadyPlayRight::getAllowPassingVideoContentToUnknownOutput() const {
    return m_allow_passing_video_content_to_unknown_output;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setAllowPassingVideoContentToUnknownOutput(const QString &allow_passing_video_content_to_unknown_output) {
    m_allow_passing_video_content_to_unknown_output = allow_passing_video_content_to_unknown_output;
    m_allow_passing_video_content_to_unknown_output_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_allow_passing_video_content_to_unknown_output_Set() const{
    return m_allow_passing_video_content_to_unknown_output_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_allow_passing_video_content_to_unknown_output_Valid() const{
    return m_allow_passing_video_content_to_unknown_output_isValid;
}

qint32 OAIContentKeyPolicyPlayReadyPlayRight::getAnalogVideoOpl() const {
    return m_analog_video_opl;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setAnalogVideoOpl(const qint32 &analog_video_opl) {
    m_analog_video_opl = analog_video_opl;
    m_analog_video_opl_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_analog_video_opl_Set() const{
    return m_analog_video_opl_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_analog_video_opl_Valid() const{
    return m_analog_video_opl_isValid;
}

qint32 OAIContentKeyPolicyPlayReadyPlayRight::getCompressedDigitalAudioOpl() const {
    return m_compressed_digital_audio_opl;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setCompressedDigitalAudioOpl(const qint32 &compressed_digital_audio_opl) {
    m_compressed_digital_audio_opl = compressed_digital_audio_opl;
    m_compressed_digital_audio_opl_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_compressed_digital_audio_opl_Set() const{
    return m_compressed_digital_audio_opl_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_compressed_digital_audio_opl_Valid() const{
    return m_compressed_digital_audio_opl_isValid;
}

qint32 OAIContentKeyPolicyPlayReadyPlayRight::getCompressedDigitalVideoOpl() const {
    return m_compressed_digital_video_opl;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setCompressedDigitalVideoOpl(const qint32 &compressed_digital_video_opl) {
    m_compressed_digital_video_opl = compressed_digital_video_opl;
    m_compressed_digital_video_opl_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_compressed_digital_video_opl_Set() const{
    return m_compressed_digital_video_opl_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_compressed_digital_video_opl_Valid() const{
    return m_compressed_digital_video_opl_isValid;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::isDigitalVideoOnlyContentRestriction() const {
    return m_digital_video_only_content_restriction;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setDigitalVideoOnlyContentRestriction(const bool &digital_video_only_content_restriction) {
    m_digital_video_only_content_restriction = digital_video_only_content_restriction;
    m_digital_video_only_content_restriction_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_digital_video_only_content_restriction_Set() const{
    return m_digital_video_only_content_restriction_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_digital_video_only_content_restriction_Valid() const{
    return m_digital_video_only_content_restriction_isValid;
}

OAIContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction OAIContentKeyPolicyPlayReadyPlayRight::getExplicitAnalogTelevisionOutputRestriction() const {
    return m_explicit_analog_television_output_restriction;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setExplicitAnalogTelevisionOutputRestriction(const OAIContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction &explicit_analog_television_output_restriction) {
    m_explicit_analog_television_output_restriction = explicit_analog_television_output_restriction;
    m_explicit_analog_television_output_restriction_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_explicit_analog_television_output_restriction_Set() const{
    return m_explicit_analog_television_output_restriction_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_explicit_analog_television_output_restriction_Valid() const{
    return m_explicit_analog_television_output_restriction_isValid;
}

QString OAIContentKeyPolicyPlayReadyPlayRight::getFirstPlayExpiration() const {
    return m_first_play_expiration;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setFirstPlayExpiration(const QString &first_play_expiration) {
    m_first_play_expiration = first_play_expiration;
    m_first_play_expiration_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_first_play_expiration_Set() const{
    return m_first_play_expiration_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_first_play_expiration_Valid() const{
    return m_first_play_expiration_isValid;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::isImageConstraintForAnalogComponentVideoRestriction() const {
    return m_image_constraint_for_analog_component_video_restriction;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setImageConstraintForAnalogComponentVideoRestriction(const bool &image_constraint_for_analog_component_video_restriction) {
    m_image_constraint_for_analog_component_video_restriction = image_constraint_for_analog_component_video_restriction;
    m_image_constraint_for_analog_component_video_restriction_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_image_constraint_for_analog_component_video_restriction_Set() const{
    return m_image_constraint_for_analog_component_video_restriction_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_image_constraint_for_analog_component_video_restriction_Valid() const{
    return m_image_constraint_for_analog_component_video_restriction_isValid;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::isImageConstraintForAnalogComputerMonitorRestriction() const {
    return m_image_constraint_for_analog_computer_monitor_restriction;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setImageConstraintForAnalogComputerMonitorRestriction(const bool &image_constraint_for_analog_computer_monitor_restriction) {
    m_image_constraint_for_analog_computer_monitor_restriction = image_constraint_for_analog_computer_monitor_restriction;
    m_image_constraint_for_analog_computer_monitor_restriction_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_image_constraint_for_analog_computer_monitor_restriction_Set() const{
    return m_image_constraint_for_analog_computer_monitor_restriction_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_image_constraint_for_analog_computer_monitor_restriction_Valid() const{
    return m_image_constraint_for_analog_computer_monitor_restriction_isValid;
}

qint32 OAIContentKeyPolicyPlayReadyPlayRight::getScmsRestriction() const {
    return m_scms_restriction;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setScmsRestriction(const qint32 &scms_restriction) {
    m_scms_restriction = scms_restriction;
    m_scms_restriction_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_scms_restriction_Set() const{
    return m_scms_restriction_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_scms_restriction_Valid() const{
    return m_scms_restriction_isValid;
}

qint32 OAIContentKeyPolicyPlayReadyPlayRight::getUncompressedDigitalAudioOpl() const {
    return m_uncompressed_digital_audio_opl;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setUncompressedDigitalAudioOpl(const qint32 &uncompressed_digital_audio_opl) {
    m_uncompressed_digital_audio_opl = uncompressed_digital_audio_opl;
    m_uncompressed_digital_audio_opl_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_uncompressed_digital_audio_opl_Set() const{
    return m_uncompressed_digital_audio_opl_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_uncompressed_digital_audio_opl_Valid() const{
    return m_uncompressed_digital_audio_opl_isValid;
}

qint32 OAIContentKeyPolicyPlayReadyPlayRight::getUncompressedDigitalVideoOpl() const {
    return m_uncompressed_digital_video_opl;
}
void OAIContentKeyPolicyPlayReadyPlayRight::setUncompressedDigitalVideoOpl(const qint32 &uncompressed_digital_video_opl) {
    m_uncompressed_digital_video_opl = uncompressed_digital_video_opl;
    m_uncompressed_digital_video_opl_isSet = true;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_uncompressed_digital_video_opl_Set() const{
    return m_uncompressed_digital_video_opl_isSet;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::is_uncompressed_digital_video_opl_Valid() const{
    return m_uncompressed_digital_video_opl_isValid;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agc_and_color_stripe_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_passing_video_content_to_unknown_output_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analog_video_opl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compressed_digital_audio_opl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compressed_digital_video_opl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_video_only_content_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explicit_analog_television_output_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_play_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_constraint_for_analog_component_video_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_constraint_for_analog_computer_monitor_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scms_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uncompressed_digital_audio_opl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uncompressed_digital_video_opl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentKeyPolicyPlayReadyPlayRight::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_passing_video_content_to_unknown_output_isValid && m_digital_video_only_content_restriction_isValid && m_image_constraint_for_analog_component_video_restriction_isValid && m_image_constraint_for_analog_computer_monitor_restriction_isValid && true;
}

} // namespace OpenAPI
