/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIContentKeyPolicy.h"
#include "OAIContentKeyPolicyCollection.h"
#include "OAIContentKeyPolicyProperties.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  content_key_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIContentKeyPolicy [required]
    */
    virtual void contentKeyPoliciesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &content_key_policy_name, const QString &api_version, const OAIContentKeyPolicy &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  content_key_policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void contentKeyPoliciesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &content_key_policy_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  content_key_policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void contentKeyPoliciesGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &content_key_policy_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  content_key_policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void contentKeyPoliciesGetPolicyPropertiesWithSecrets(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &content_key_policy_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void contentKeyPoliciesList(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  content_key_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIContentKeyPolicy [required]
    */
    virtual void contentKeyPoliciesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &content_key_policy_name, const QString &api_version, const OAIContentKeyPolicy &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void contentKeyPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void contentKeyPoliciesDeleteCallback(OAIHttpRequestWorker *worker);
    void contentKeyPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void contentKeyPoliciesGetPolicyPropertiesWithSecretsCallback(OAIHttpRequestWorker *worker);
    void contentKeyPoliciesListCallback(OAIHttpRequestWorker *worker);
    void contentKeyPoliciesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void contentKeyPoliciesCreateOrUpdateSignal(OAIContentKeyPolicy summary);
    void contentKeyPoliciesDeleteSignal();
    void contentKeyPoliciesGetSignal(OAIContentKeyPolicy summary);
    void contentKeyPoliciesGetPolicyPropertiesWithSecretsSignal(OAIContentKeyPolicyProperties summary);
    void contentKeyPoliciesListSignal(OAIContentKeyPolicyCollection summary);
    void contentKeyPoliciesUpdateSignal(OAIContentKeyPolicy summary);


    void contentKeyPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContentKeyPolicy summary);
    void contentKeyPoliciesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void contentKeyPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIContentKeyPolicy summary);
    void contentKeyPoliciesGetPolicyPropertiesWithSecretsSignalFull(OAIHttpRequestWorker *worker, OAIContentKeyPolicyProperties summary);
    void contentKeyPoliciesListSignalFull(OAIHttpRequestWorker *worker, OAIContentKeyPolicyCollection summary);
    void contentKeyPoliciesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContentKeyPolicy summary);

    Q_DECL_DEPRECATED_X("Use contentKeyPoliciesCreateOrUpdateSignalError() instead")
    void contentKeyPoliciesCreateOrUpdateSignalE(OAIContentKeyPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentKeyPoliciesCreateOrUpdateSignalError(OAIContentKeyPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentKeyPoliciesDeleteSignalError() instead")
    void contentKeyPoliciesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void contentKeyPoliciesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentKeyPoliciesGetSignalError() instead")
    void contentKeyPoliciesGetSignalE(OAIContentKeyPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentKeyPoliciesGetSignalError(OAIContentKeyPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentKeyPoliciesGetPolicyPropertiesWithSecretsSignalError() instead")
    void contentKeyPoliciesGetPolicyPropertiesWithSecretsSignalE(OAIContentKeyPolicyProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentKeyPoliciesGetPolicyPropertiesWithSecretsSignalError(OAIContentKeyPolicyProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentKeyPoliciesListSignalError() instead")
    void contentKeyPoliciesListSignalE(OAIContentKeyPolicyCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentKeyPoliciesListSignalError(OAIContentKeyPolicyCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentKeyPoliciesUpdateSignalError() instead")
    void contentKeyPoliciesUpdateSignalE(OAIContentKeyPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contentKeyPoliciesUpdateSignalError(OAIContentKeyPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use contentKeyPoliciesCreateOrUpdateSignalErrorFull() instead")
    void contentKeyPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentKeyPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentKeyPoliciesDeleteSignalErrorFull() instead")
    void contentKeyPoliciesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentKeyPoliciesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentKeyPoliciesGetSignalErrorFull() instead")
    void contentKeyPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentKeyPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentKeyPoliciesGetPolicyPropertiesWithSecretsSignalErrorFull() instead")
    void contentKeyPoliciesGetPolicyPropertiesWithSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentKeyPoliciesGetPolicyPropertiesWithSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentKeyPoliciesListSignalErrorFull() instead")
    void contentKeyPoliciesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentKeyPoliciesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contentKeyPoliciesUpdateSignalErrorFull() instead")
    void contentKeyPoliciesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contentKeyPoliciesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
