# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_key_policy_play_ready_content_key_location import ContentKeyPolicyPlayReadyContentKeyLocation
from openapi_server.models.content_key_policy_play_ready_play_right import ContentKeyPolicyPlayReadyPlayRight
from openapi_server import util


class ContentKeyPolicyPlayReadyLicense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_test_devices: bool=None, begin_date: datetime=None, content_key_location: ContentKeyPolicyPlayReadyContentKeyLocation=None, content_type: str=None, expiration_date: datetime=None, grace_period: str=None, license_type: str=None, play_right: ContentKeyPolicyPlayReadyPlayRight=None, relative_begin_date: str=None, relative_expiration_date: str=None):
        """ContentKeyPolicyPlayReadyLicense - a model defined in OpenAPI

        :param allow_test_devices: The allow_test_devices of this ContentKeyPolicyPlayReadyLicense.
        :param begin_date: The begin_date of this ContentKeyPolicyPlayReadyLicense.
        :param content_key_location: The content_key_location of this ContentKeyPolicyPlayReadyLicense.
        :param content_type: The content_type of this ContentKeyPolicyPlayReadyLicense.
        :param expiration_date: The expiration_date of this ContentKeyPolicyPlayReadyLicense.
        :param grace_period: The grace_period of this ContentKeyPolicyPlayReadyLicense.
        :param license_type: The license_type of this ContentKeyPolicyPlayReadyLicense.
        :param play_right: The play_right of this ContentKeyPolicyPlayReadyLicense.
        :param relative_begin_date: The relative_begin_date of this ContentKeyPolicyPlayReadyLicense.
        :param relative_expiration_date: The relative_expiration_date of this ContentKeyPolicyPlayReadyLicense.
        """
        self.openapi_types = {
            'allow_test_devices': bool,
            'begin_date': datetime,
            'content_key_location': ContentKeyPolicyPlayReadyContentKeyLocation,
            'content_type': str,
            'expiration_date': datetime,
            'grace_period': str,
            'license_type': str,
            'play_right': ContentKeyPolicyPlayReadyPlayRight,
            'relative_begin_date': str,
            'relative_expiration_date': str
        }

        self.attribute_map = {
            'allow_test_devices': 'allowTestDevices',
            'begin_date': 'beginDate',
            'content_key_location': 'contentKeyLocation',
            'content_type': 'contentType',
            'expiration_date': 'expirationDate',
            'grace_period': 'gracePeriod',
            'license_type': 'licenseType',
            'play_right': 'playRight',
            'relative_begin_date': 'relativeBeginDate',
            'relative_expiration_date': 'relativeExpirationDate'
        }

        self._allow_test_devices = allow_test_devices
        self._begin_date = begin_date
        self._content_key_location = content_key_location
        self._content_type = content_type
        self._expiration_date = expiration_date
        self._grace_period = grace_period
        self._license_type = license_type
        self._play_right = play_right
        self._relative_begin_date = relative_begin_date
        self._relative_expiration_date = relative_expiration_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentKeyPolicyPlayReadyLicense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentKeyPolicyPlayReadyLicense of this ContentKeyPolicyPlayReadyLicense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_test_devices(self):
        """Gets the allow_test_devices of this ContentKeyPolicyPlayReadyLicense.

        A flag indicating whether test devices can use the license.

        :return: The allow_test_devices of this ContentKeyPolicyPlayReadyLicense.
        :rtype: bool
        """
        return self._allow_test_devices

    @allow_test_devices.setter
    def allow_test_devices(self, allow_test_devices):
        """Sets the allow_test_devices of this ContentKeyPolicyPlayReadyLicense.

        A flag indicating whether test devices can use the license.

        :param allow_test_devices: The allow_test_devices of this ContentKeyPolicyPlayReadyLicense.
        :type allow_test_devices: bool
        """
        if allow_test_devices is None:
            raise ValueError("Invalid value for `allow_test_devices`, must not be `None`")

        self._allow_test_devices = allow_test_devices

    @property
    def begin_date(self):
        """Gets the begin_date of this ContentKeyPolicyPlayReadyLicense.

        The begin date of license

        :return: The begin_date of this ContentKeyPolicyPlayReadyLicense.
        :rtype: datetime
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this ContentKeyPolicyPlayReadyLicense.

        The begin date of license

        :param begin_date: The begin_date of this ContentKeyPolicyPlayReadyLicense.
        :type begin_date: datetime
        """

        self._begin_date = begin_date

    @property
    def content_key_location(self):
        """Gets the content_key_location of this ContentKeyPolicyPlayReadyLicense.


        :return: The content_key_location of this ContentKeyPolicyPlayReadyLicense.
        :rtype: ContentKeyPolicyPlayReadyContentKeyLocation
        """
        return self._content_key_location

    @content_key_location.setter
    def content_key_location(self, content_key_location):
        """Sets the content_key_location of this ContentKeyPolicyPlayReadyLicense.


        :param content_key_location: The content_key_location of this ContentKeyPolicyPlayReadyLicense.
        :type content_key_location: ContentKeyPolicyPlayReadyContentKeyLocation
        """
        if content_key_location is None:
            raise ValueError("Invalid value for `content_key_location`, must not be `None`")

        self._content_key_location = content_key_location

    @property
    def content_type(self):
        """Gets the content_type of this ContentKeyPolicyPlayReadyLicense.

        The PlayReady content type.

        :return: The content_type of this ContentKeyPolicyPlayReadyLicense.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ContentKeyPolicyPlayReadyLicense.

        The PlayReady content type.

        :param content_type: The content_type of this ContentKeyPolicyPlayReadyLicense.
        :type content_type: str
        """
        allowed_values = ["Unknown", "Unspecified", "UltraVioletDownload", "UltraVioletStreaming"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def expiration_date(self):
        """Gets the expiration_date of this ContentKeyPolicyPlayReadyLicense.

        The expiration date of license.

        :return: The expiration_date of this ContentKeyPolicyPlayReadyLicense.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this ContentKeyPolicyPlayReadyLicense.

        The expiration date of license.

        :param expiration_date: The expiration_date of this ContentKeyPolicyPlayReadyLicense.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def grace_period(self):
        """Gets the grace_period of this ContentKeyPolicyPlayReadyLicense.

        The grace period of license.

        :return: The grace_period of this ContentKeyPolicyPlayReadyLicense.
        :rtype: str
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this ContentKeyPolicyPlayReadyLicense.

        The grace period of license.

        :param grace_period: The grace_period of this ContentKeyPolicyPlayReadyLicense.
        :type grace_period: str
        """

        self._grace_period = grace_period

    @property
    def license_type(self):
        """Gets the license_type of this ContentKeyPolicyPlayReadyLicense.

        The license type.

        :return: The license_type of this ContentKeyPolicyPlayReadyLicense.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this ContentKeyPolicyPlayReadyLicense.

        The license type.

        :param license_type: The license_type of this ContentKeyPolicyPlayReadyLicense.
        :type license_type: str
        """
        allowed_values = ["Unknown", "NonPersistent", "Persistent"]  # noqa: E501
        if license_type not in allowed_values:
            raise ValueError(
                "Invalid value for `license_type` ({0}), must be one of {1}"
                .format(license_type, allowed_values)
            )

        self._license_type = license_type

    @property
    def play_right(self):
        """Gets the play_right of this ContentKeyPolicyPlayReadyLicense.


        :return: The play_right of this ContentKeyPolicyPlayReadyLicense.
        :rtype: ContentKeyPolicyPlayReadyPlayRight
        """
        return self._play_right

    @play_right.setter
    def play_right(self, play_right):
        """Sets the play_right of this ContentKeyPolicyPlayReadyLicense.


        :param play_right: The play_right of this ContentKeyPolicyPlayReadyLicense.
        :type play_right: ContentKeyPolicyPlayReadyPlayRight
        """

        self._play_right = play_right

    @property
    def relative_begin_date(self):
        """Gets the relative_begin_date of this ContentKeyPolicyPlayReadyLicense.

        The relative begin date of license.

        :return: The relative_begin_date of this ContentKeyPolicyPlayReadyLicense.
        :rtype: str
        """
        return self._relative_begin_date

    @relative_begin_date.setter
    def relative_begin_date(self, relative_begin_date):
        """Sets the relative_begin_date of this ContentKeyPolicyPlayReadyLicense.

        The relative begin date of license.

        :param relative_begin_date: The relative_begin_date of this ContentKeyPolicyPlayReadyLicense.
        :type relative_begin_date: str
        """

        self._relative_begin_date = relative_begin_date

    @property
    def relative_expiration_date(self):
        """Gets the relative_expiration_date of this ContentKeyPolicyPlayReadyLicense.

        The relative expiration date of license.

        :return: The relative_expiration_date of this ContentKeyPolicyPlayReadyLicense.
        :rtype: str
        """
        return self._relative_expiration_date

    @relative_expiration_date.setter
    def relative_expiration_date(self, relative_expiration_date):
        """Sets the relative_expiration_date of this ContentKeyPolicyPlayReadyLicense.

        The relative expiration date of license.

        :param relative_expiration_date: The relative_expiration_date of this ContentKeyPolicyPlayReadyLicense.
        :type relative_expiration_date: str
        """

        self._relative_expiration_date = relative_expiration_date
