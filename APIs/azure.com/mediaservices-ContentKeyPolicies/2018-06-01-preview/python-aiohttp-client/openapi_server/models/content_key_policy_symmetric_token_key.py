# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_key_policy_restriction_token_key import ContentKeyPolicyRestrictionTokenKey
import re
from openapi_server import util


class ContentKeyPolicySymmetricTokenKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_value: str=None, odata_type: str=None):
        """ContentKeyPolicySymmetricTokenKey - a model defined in OpenAPI

        :param key_value: The key_value of this ContentKeyPolicySymmetricTokenKey.
        :param odata_type: The odata_type of this ContentKeyPolicySymmetricTokenKey.
        """
        self.openapi_types = {
            'key_value': str,
            'odata_type': str
        }

        self.attribute_map = {
            'key_value': 'keyValue',
            'odata_type': '@odata.type'
        }

        self._key_value = key_value
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentKeyPolicySymmetricTokenKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentKeyPolicySymmetricTokenKey of this ContentKeyPolicySymmetricTokenKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_value(self):
        """Gets the key_value of this ContentKeyPolicySymmetricTokenKey.

        The key value of the key

        :return: The key_value of this ContentKeyPolicySymmetricTokenKey.
        :rtype: str
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this ContentKeyPolicySymmetricTokenKey.

        The key value of the key

        :param key_value: The key_value of this ContentKeyPolicySymmetricTokenKey.
        :type key_value: str
        """
        if key_value is None:
            raise ValueError("Invalid value for `key_value`, must not be `None`")
        if key_value is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', key_value):
            raise ValueError("Invalid value for `key_value`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._key_value = key_value

    @property
    def odata_type(self):
        """Gets the odata_type of this ContentKeyPolicySymmetricTokenKey.

        The discriminator for derived types.

        :return: The odata_type of this ContentKeyPolicySymmetricTokenKey.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this ContentKeyPolicySymmetricTokenKey.

        The discriminator for derived types.

        :param odata_type: The odata_type of this ContentKeyPolicySymmetricTokenKey.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
