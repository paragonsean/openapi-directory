# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_key_policy_play_ready_explicit_analog_television_restriction import ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction
from openapi_server import util


class ContentKeyPolicyPlayReadyPlayRight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agc_and_color_stripe_restriction: int=None, allow_passing_video_content_to_unknown_output: str=None, analog_video_opl: int=None, compressed_digital_audio_opl: int=None, compressed_digital_video_opl: int=None, digital_video_only_content_restriction: bool=None, explicit_analog_television_output_restriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction=None, first_play_expiration: str=None, image_constraint_for_analog_component_video_restriction: bool=None, image_constraint_for_analog_computer_monitor_restriction: bool=None, scms_restriction: int=None, uncompressed_digital_audio_opl: int=None, uncompressed_digital_video_opl: int=None):
        """ContentKeyPolicyPlayReadyPlayRight - a model defined in OpenAPI

        :param agc_and_color_stripe_restriction: The agc_and_color_stripe_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :param allow_passing_video_content_to_unknown_output: The allow_passing_video_content_to_unknown_output of this ContentKeyPolicyPlayReadyPlayRight.
        :param analog_video_opl: The analog_video_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :param compressed_digital_audio_opl: The compressed_digital_audio_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :param compressed_digital_video_opl: The compressed_digital_video_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :param digital_video_only_content_restriction: The digital_video_only_content_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :param explicit_analog_television_output_restriction: The explicit_analog_television_output_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :param first_play_expiration: The first_play_expiration of this ContentKeyPolicyPlayReadyPlayRight.
        :param image_constraint_for_analog_component_video_restriction: The image_constraint_for_analog_component_video_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :param image_constraint_for_analog_computer_monitor_restriction: The image_constraint_for_analog_computer_monitor_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :param scms_restriction: The scms_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :param uncompressed_digital_audio_opl: The uncompressed_digital_audio_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :param uncompressed_digital_video_opl: The uncompressed_digital_video_opl of this ContentKeyPolicyPlayReadyPlayRight.
        """
        self.openapi_types = {
            'agc_and_color_stripe_restriction': int,
            'allow_passing_video_content_to_unknown_output': str,
            'analog_video_opl': int,
            'compressed_digital_audio_opl': int,
            'compressed_digital_video_opl': int,
            'digital_video_only_content_restriction': bool,
            'explicit_analog_television_output_restriction': ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
            'first_play_expiration': str,
            'image_constraint_for_analog_component_video_restriction': bool,
            'image_constraint_for_analog_computer_monitor_restriction': bool,
            'scms_restriction': int,
            'uncompressed_digital_audio_opl': int,
            'uncompressed_digital_video_opl': int
        }

        self.attribute_map = {
            'agc_and_color_stripe_restriction': 'agcAndColorStripeRestriction',
            'allow_passing_video_content_to_unknown_output': 'allowPassingVideoContentToUnknownOutput',
            'analog_video_opl': 'analogVideoOpl',
            'compressed_digital_audio_opl': 'compressedDigitalAudioOpl',
            'compressed_digital_video_opl': 'compressedDigitalVideoOpl',
            'digital_video_only_content_restriction': 'digitalVideoOnlyContentRestriction',
            'explicit_analog_television_output_restriction': 'explicitAnalogTelevisionOutputRestriction',
            'first_play_expiration': 'firstPlayExpiration',
            'image_constraint_for_analog_component_video_restriction': 'imageConstraintForAnalogComponentVideoRestriction',
            'image_constraint_for_analog_computer_monitor_restriction': 'imageConstraintForAnalogComputerMonitorRestriction',
            'scms_restriction': 'scmsRestriction',
            'uncompressed_digital_audio_opl': 'uncompressedDigitalAudioOpl',
            'uncompressed_digital_video_opl': 'uncompressedDigitalVideoOpl'
        }

        self._agc_and_color_stripe_restriction = agc_and_color_stripe_restriction
        self._allow_passing_video_content_to_unknown_output = allow_passing_video_content_to_unknown_output
        self._analog_video_opl = analog_video_opl
        self._compressed_digital_audio_opl = compressed_digital_audio_opl
        self._compressed_digital_video_opl = compressed_digital_video_opl
        self._digital_video_only_content_restriction = digital_video_only_content_restriction
        self._explicit_analog_television_output_restriction = explicit_analog_television_output_restriction
        self._first_play_expiration = first_play_expiration
        self._image_constraint_for_analog_component_video_restriction = image_constraint_for_analog_component_video_restriction
        self._image_constraint_for_analog_computer_monitor_restriction = image_constraint_for_analog_computer_monitor_restriction
        self._scms_restriction = scms_restriction
        self._uncompressed_digital_audio_opl = uncompressed_digital_audio_opl
        self._uncompressed_digital_video_opl = uncompressed_digital_video_opl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentKeyPolicyPlayReadyPlayRight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentKeyPolicyPlayReadyPlayRight of this ContentKeyPolicyPlayReadyPlayRight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agc_and_color_stripe_restriction(self):
        """Gets the agc_and_color_stripe_restriction of this ContentKeyPolicyPlayReadyPlayRight.

        Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.

        :return: The agc_and_color_stripe_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: int
        """
        return self._agc_and_color_stripe_restriction

    @agc_and_color_stripe_restriction.setter
    def agc_and_color_stripe_restriction(self, agc_and_color_stripe_restriction):
        """Sets the agc_and_color_stripe_restriction of this ContentKeyPolicyPlayReadyPlayRight.

        Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.

        :param agc_and_color_stripe_restriction: The agc_and_color_stripe_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :type agc_and_color_stripe_restriction: int
        """

        self._agc_and_color_stripe_restriction = agc_and_color_stripe_restriction

    @property
    def allow_passing_video_content_to_unknown_output(self):
        """Gets the allow_passing_video_content_to_unknown_output of this ContentKeyPolicyPlayReadyPlayRight.

        Configures Unknown output handling settings of the license.

        :return: The allow_passing_video_content_to_unknown_output of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: str
        """
        return self._allow_passing_video_content_to_unknown_output

    @allow_passing_video_content_to_unknown_output.setter
    def allow_passing_video_content_to_unknown_output(self, allow_passing_video_content_to_unknown_output):
        """Sets the allow_passing_video_content_to_unknown_output of this ContentKeyPolicyPlayReadyPlayRight.

        Configures Unknown output handling settings of the license.

        :param allow_passing_video_content_to_unknown_output: The allow_passing_video_content_to_unknown_output of this ContentKeyPolicyPlayReadyPlayRight.
        :type allow_passing_video_content_to_unknown_output: str
        """
        allowed_values = ["Unknown", "NotAllowed", "Allowed", "AllowedWithVideoConstriction"]  # noqa: E501
        if allow_passing_video_content_to_unknown_output not in allowed_values:
            raise ValueError(
                "Invalid value for `allow_passing_video_content_to_unknown_output` ({0}), must be one of {1}"
                .format(allow_passing_video_content_to_unknown_output, allowed_values)
            )

        self._allow_passing_video_content_to_unknown_output = allow_passing_video_content_to_unknown_output

    @property
    def analog_video_opl(self):
        """Gets the analog_video_opl of this ContentKeyPolicyPlayReadyPlayRight.

        Specifies the output protection level for compressed digital audio.

        :return: The analog_video_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: int
        """
        return self._analog_video_opl

    @analog_video_opl.setter
    def analog_video_opl(self, analog_video_opl):
        """Sets the analog_video_opl of this ContentKeyPolicyPlayReadyPlayRight.

        Specifies the output protection level for compressed digital audio.

        :param analog_video_opl: The analog_video_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :type analog_video_opl: int
        """

        self._analog_video_opl = analog_video_opl

    @property
    def compressed_digital_audio_opl(self):
        """Gets the compressed_digital_audio_opl of this ContentKeyPolicyPlayReadyPlayRight.

        Specifies the output protection level for compressed digital audio.

        :return: The compressed_digital_audio_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: int
        """
        return self._compressed_digital_audio_opl

    @compressed_digital_audio_opl.setter
    def compressed_digital_audio_opl(self, compressed_digital_audio_opl):
        """Sets the compressed_digital_audio_opl of this ContentKeyPolicyPlayReadyPlayRight.

        Specifies the output protection level for compressed digital audio.

        :param compressed_digital_audio_opl: The compressed_digital_audio_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :type compressed_digital_audio_opl: int
        """

        self._compressed_digital_audio_opl = compressed_digital_audio_opl

    @property
    def compressed_digital_video_opl(self):
        """Gets the compressed_digital_video_opl of this ContentKeyPolicyPlayReadyPlayRight.

        Specifies the output protection level for compressed digital video.

        :return: The compressed_digital_video_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: int
        """
        return self._compressed_digital_video_opl

    @compressed_digital_video_opl.setter
    def compressed_digital_video_opl(self, compressed_digital_video_opl):
        """Sets the compressed_digital_video_opl of this ContentKeyPolicyPlayReadyPlayRight.

        Specifies the output protection level for compressed digital video.

        :param compressed_digital_video_opl: The compressed_digital_video_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :type compressed_digital_video_opl: int
        """

        self._compressed_digital_video_opl = compressed_digital_video_opl

    @property
    def digital_video_only_content_restriction(self):
        """Gets the digital_video_only_content_restriction of this ContentKeyPolicyPlayReadyPlayRight.

        Enables the Image Constraint For Analog Component Video Restriction in the license.

        :return: The digital_video_only_content_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: bool
        """
        return self._digital_video_only_content_restriction

    @digital_video_only_content_restriction.setter
    def digital_video_only_content_restriction(self, digital_video_only_content_restriction):
        """Sets the digital_video_only_content_restriction of this ContentKeyPolicyPlayReadyPlayRight.

        Enables the Image Constraint For Analog Component Video Restriction in the license.

        :param digital_video_only_content_restriction: The digital_video_only_content_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :type digital_video_only_content_restriction: bool
        """
        if digital_video_only_content_restriction is None:
            raise ValueError("Invalid value for `digital_video_only_content_restriction`, must not be `None`")

        self._digital_video_only_content_restriction = digital_video_only_content_restriction

    @property
    def explicit_analog_television_output_restriction(self):
        """Gets the explicit_analog_television_output_restriction of this ContentKeyPolicyPlayReadyPlayRight.


        :return: The explicit_analog_television_output_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction
        """
        return self._explicit_analog_television_output_restriction

    @explicit_analog_television_output_restriction.setter
    def explicit_analog_television_output_restriction(self, explicit_analog_television_output_restriction):
        """Sets the explicit_analog_television_output_restriction of this ContentKeyPolicyPlayReadyPlayRight.


        :param explicit_analog_television_output_restriction: The explicit_analog_television_output_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :type explicit_analog_television_output_restriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction
        """

        self._explicit_analog_television_output_restriction = explicit_analog_television_output_restriction

    @property
    def first_play_expiration(self):
        """Gets the first_play_expiration of this ContentKeyPolicyPlayReadyPlayRight.

        The amount of time that the license is valid after the license is first used to play content.

        :return: The first_play_expiration of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: str
        """
        return self._first_play_expiration

    @first_play_expiration.setter
    def first_play_expiration(self, first_play_expiration):
        """Sets the first_play_expiration of this ContentKeyPolicyPlayReadyPlayRight.

        The amount of time that the license is valid after the license is first used to play content.

        :param first_play_expiration: The first_play_expiration of this ContentKeyPolicyPlayReadyPlayRight.
        :type first_play_expiration: str
        """

        self._first_play_expiration = first_play_expiration

    @property
    def image_constraint_for_analog_component_video_restriction(self):
        """Gets the image_constraint_for_analog_component_video_restriction of this ContentKeyPolicyPlayReadyPlayRight.

        Enables the Image Constraint For Analog Component Video Restriction in the license.

        :return: The image_constraint_for_analog_component_video_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: bool
        """
        return self._image_constraint_for_analog_component_video_restriction

    @image_constraint_for_analog_component_video_restriction.setter
    def image_constraint_for_analog_component_video_restriction(self, image_constraint_for_analog_component_video_restriction):
        """Sets the image_constraint_for_analog_component_video_restriction of this ContentKeyPolicyPlayReadyPlayRight.

        Enables the Image Constraint For Analog Component Video Restriction in the license.

        :param image_constraint_for_analog_component_video_restriction: The image_constraint_for_analog_component_video_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :type image_constraint_for_analog_component_video_restriction: bool
        """
        if image_constraint_for_analog_component_video_restriction is None:
            raise ValueError("Invalid value for `image_constraint_for_analog_component_video_restriction`, must not be `None`")

        self._image_constraint_for_analog_component_video_restriction = image_constraint_for_analog_component_video_restriction

    @property
    def image_constraint_for_analog_computer_monitor_restriction(self):
        """Gets the image_constraint_for_analog_computer_monitor_restriction of this ContentKeyPolicyPlayReadyPlayRight.

        Enables the Image Constraint For Analog Component Video Restriction in the license.

        :return: The image_constraint_for_analog_computer_monitor_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: bool
        """
        return self._image_constraint_for_analog_computer_monitor_restriction

    @image_constraint_for_analog_computer_monitor_restriction.setter
    def image_constraint_for_analog_computer_monitor_restriction(self, image_constraint_for_analog_computer_monitor_restriction):
        """Sets the image_constraint_for_analog_computer_monitor_restriction of this ContentKeyPolicyPlayReadyPlayRight.

        Enables the Image Constraint For Analog Component Video Restriction in the license.

        :param image_constraint_for_analog_computer_monitor_restriction: The image_constraint_for_analog_computer_monitor_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :type image_constraint_for_analog_computer_monitor_restriction: bool
        """
        if image_constraint_for_analog_computer_monitor_restriction is None:
            raise ValueError("Invalid value for `image_constraint_for_analog_computer_monitor_restriction`, must not be `None`")

        self._image_constraint_for_analog_computer_monitor_restriction = image_constraint_for_analog_computer_monitor_restriction

    @property
    def scms_restriction(self):
        """Gets the scms_restriction of this ContentKeyPolicyPlayReadyPlayRight.

        Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.

        :return: The scms_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: int
        """
        return self._scms_restriction

    @scms_restriction.setter
    def scms_restriction(self, scms_restriction):
        """Sets the scms_restriction of this ContentKeyPolicyPlayReadyPlayRight.

        Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.

        :param scms_restriction: The scms_restriction of this ContentKeyPolicyPlayReadyPlayRight.
        :type scms_restriction: int
        """

        self._scms_restriction = scms_restriction

    @property
    def uncompressed_digital_audio_opl(self):
        """Gets the uncompressed_digital_audio_opl of this ContentKeyPolicyPlayReadyPlayRight.

        Specifies the output protection level for uncompressed digital audio.

        :return: The uncompressed_digital_audio_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: int
        """
        return self._uncompressed_digital_audio_opl

    @uncompressed_digital_audio_opl.setter
    def uncompressed_digital_audio_opl(self, uncompressed_digital_audio_opl):
        """Sets the uncompressed_digital_audio_opl of this ContentKeyPolicyPlayReadyPlayRight.

        Specifies the output protection level for uncompressed digital audio.

        :param uncompressed_digital_audio_opl: The uncompressed_digital_audio_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :type uncompressed_digital_audio_opl: int
        """

        self._uncompressed_digital_audio_opl = uncompressed_digital_audio_opl

    @property
    def uncompressed_digital_video_opl(self):
        """Gets the uncompressed_digital_video_opl of this ContentKeyPolicyPlayReadyPlayRight.

        Specifies the output protection level for uncompressed digital video.

        :return: The uncompressed_digital_video_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :rtype: int
        """
        return self._uncompressed_digital_video_opl

    @uncompressed_digital_video_opl.setter
    def uncompressed_digital_video_opl(self, uncompressed_digital_video_opl):
        """Sets the uncompressed_digital_video_opl of this ContentKeyPolicyPlayReadyPlayRight.

        Specifies the output protection level for uncompressed digital video.

        :param uncompressed_digital_video_opl: The uncompressed_digital_video_opl of this ContentKeyPolicyPlayReadyPlayRight.
        :type uncompressed_digital_video_opl: int
        """

        self._uncompressed_digital_video_opl = uncompressed_digital_video_opl
