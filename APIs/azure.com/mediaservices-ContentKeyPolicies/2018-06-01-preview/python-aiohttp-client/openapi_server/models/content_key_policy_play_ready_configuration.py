# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_key_policy_configuration import ContentKeyPolicyConfiguration
from openapi_server.models.content_key_policy_play_ready_license import ContentKeyPolicyPlayReadyLicense
from openapi_server import util


class ContentKeyPolicyPlayReadyConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, licenses: List[ContentKeyPolicyPlayReadyLicense]=None, response_custom_data: str=None, odata_type: str=None):
        """ContentKeyPolicyPlayReadyConfiguration - a model defined in OpenAPI

        :param licenses: The licenses of this ContentKeyPolicyPlayReadyConfiguration.
        :param response_custom_data: The response_custom_data of this ContentKeyPolicyPlayReadyConfiguration.
        :param odata_type: The odata_type of this ContentKeyPolicyPlayReadyConfiguration.
        """
        self.openapi_types = {
            'licenses': List[ContentKeyPolicyPlayReadyLicense],
            'response_custom_data': str,
            'odata_type': str
        }

        self.attribute_map = {
            'licenses': 'licenses',
            'response_custom_data': 'responseCustomData',
            'odata_type': '@odata.type'
        }

        self._licenses = licenses
        self._response_custom_data = response_custom_data
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentKeyPolicyPlayReadyConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentKeyPolicyPlayReadyConfiguration of this ContentKeyPolicyPlayReadyConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def licenses(self):
        """Gets the licenses of this ContentKeyPolicyPlayReadyConfiguration.

        The PlayReady licenses.

        :return: The licenses of this ContentKeyPolicyPlayReadyConfiguration.
        :rtype: List[ContentKeyPolicyPlayReadyLicense]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this ContentKeyPolicyPlayReadyConfiguration.

        The PlayReady licenses.

        :param licenses: The licenses of this ContentKeyPolicyPlayReadyConfiguration.
        :type licenses: List[ContentKeyPolicyPlayReadyLicense]
        """
        if licenses is None:
            raise ValueError("Invalid value for `licenses`, must not be `None`")

        self._licenses = licenses

    @property
    def response_custom_data(self):
        """Gets the response_custom_data of this ContentKeyPolicyPlayReadyConfiguration.

        The custom response data.

        :return: The response_custom_data of this ContentKeyPolicyPlayReadyConfiguration.
        :rtype: str
        """
        return self._response_custom_data

    @response_custom_data.setter
    def response_custom_data(self, response_custom_data):
        """Sets the response_custom_data of this ContentKeyPolicyPlayReadyConfiguration.

        The custom response data.

        :param response_custom_data: The response_custom_data of this ContentKeyPolicyPlayReadyConfiguration.
        :type response_custom_data: str
        """

        self._response_custom_data = response_custom_data

    @property
    def odata_type(self):
        """Gets the odata_type of this ContentKeyPolicyPlayReadyConfiguration.

        The discriminator for derived types.

        :return: The odata_type of this ContentKeyPolicyPlayReadyConfiguration.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this ContentKeyPolicyPlayReadyConfiguration.

        The discriminator for derived types.

        :param odata_type: The odata_type of this ContentKeyPolicyPlayReadyConfiguration.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
