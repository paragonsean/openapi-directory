/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ContentKeyPolicyPlayReadyContentKeyLocation;
import org.openapitools.client.model.ContentKeyPolicyPlayReadyPlayRight;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The PlayReady license
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:46.002292-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentKeyPolicyPlayReadyLicense {
  public static final String SERIALIZED_NAME_ALLOW_TEST_DEVICES = "allowTestDevices";
  @SerializedName(SERIALIZED_NAME_ALLOW_TEST_DEVICES)
  private Boolean allowTestDevices;

  public static final String SERIALIZED_NAME_BEGIN_DATE = "beginDate";
  @SerializedName(SERIALIZED_NAME_BEGIN_DATE)
  private OffsetDateTime beginDate;

  public static final String SERIALIZED_NAME_CONTENT_KEY_LOCATION = "contentKeyLocation";
  @SerializedName(SERIALIZED_NAME_CONTENT_KEY_LOCATION)
  private ContentKeyPolicyPlayReadyContentKeyLocation contentKeyLocation;

  /**
   * The PlayReady content type.
   */
  @JsonAdapter(ContentTypeEnum.Adapter.class)
  public enum ContentTypeEnum {
    UNKNOWN("Unknown"),
    
    UNSPECIFIED("Unspecified"),
    
    ULTRA_VIOLET_DOWNLOAD("UltraVioletDownload"),
    
    ULTRA_VIOLET_STREAMING("UltraVioletStreaming");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private ContentTypeEnum contentType;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_GRACE_PERIOD = "gracePeriod";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD)
  private String gracePeriod;

  /**
   * The license type.
   */
  @JsonAdapter(LicenseTypeEnum.Adapter.class)
  public enum LicenseTypeEnum {
    UNKNOWN("Unknown"),
    
    NON_PERSISTENT("NonPersistent"),
    
    PERSISTENT("Persistent");

    private String value;

    LicenseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseTypeEnum fromValue(String value) {
      for (LicenseTypeEnum b : LicenseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LicenseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private LicenseTypeEnum licenseType;

  public static final String SERIALIZED_NAME_PLAY_RIGHT = "playRight";
  @SerializedName(SERIALIZED_NAME_PLAY_RIGHT)
  private ContentKeyPolicyPlayReadyPlayRight playRight;

  public static final String SERIALIZED_NAME_RELATIVE_BEGIN_DATE = "relativeBeginDate";
  @SerializedName(SERIALIZED_NAME_RELATIVE_BEGIN_DATE)
  private String relativeBeginDate;

  public static final String SERIALIZED_NAME_RELATIVE_EXPIRATION_DATE = "relativeExpirationDate";
  @SerializedName(SERIALIZED_NAME_RELATIVE_EXPIRATION_DATE)
  private String relativeExpirationDate;

  public ContentKeyPolicyPlayReadyLicense() {
  }

  public ContentKeyPolicyPlayReadyLicense allowTestDevices(Boolean allowTestDevices) {
    this.allowTestDevices = allowTestDevices;
    return this;
  }

  /**
   * A flag indicating whether test devices can use the license.
   * @return allowTestDevices
   */
  @javax.annotation.Nonnull
  public Boolean getAllowTestDevices() {
    return allowTestDevices;
  }

  public void setAllowTestDevices(Boolean allowTestDevices) {
    this.allowTestDevices = allowTestDevices;
  }


  public ContentKeyPolicyPlayReadyLicense beginDate(OffsetDateTime beginDate) {
    this.beginDate = beginDate;
    return this;
  }

  /**
   * The begin date of license
   * @return beginDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBeginDate() {
    return beginDate;
  }

  public void setBeginDate(OffsetDateTime beginDate) {
    this.beginDate = beginDate;
  }


  public ContentKeyPolicyPlayReadyLicense contentKeyLocation(ContentKeyPolicyPlayReadyContentKeyLocation contentKeyLocation) {
    this.contentKeyLocation = contentKeyLocation;
    return this;
  }

  /**
   * Get contentKeyLocation
   * @return contentKeyLocation
   */
  @javax.annotation.Nonnull
  public ContentKeyPolicyPlayReadyContentKeyLocation getContentKeyLocation() {
    return contentKeyLocation;
  }

  public void setContentKeyLocation(ContentKeyPolicyPlayReadyContentKeyLocation contentKeyLocation) {
    this.contentKeyLocation = contentKeyLocation;
  }


  public ContentKeyPolicyPlayReadyLicense contentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The PlayReady content type.
   * @return contentType
   */
  @javax.annotation.Nonnull
  public ContentTypeEnum getContentType() {
    return contentType;
  }

  public void setContentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
  }


  public ContentKeyPolicyPlayReadyLicense expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * The expiration date of license.
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public ContentKeyPolicyPlayReadyLicense gracePeriod(String gracePeriod) {
    this.gracePeriod = gracePeriod;
    return this;
  }

  /**
   * The grace period of license.
   * @return gracePeriod
   */
  @javax.annotation.Nullable
  public String getGracePeriod() {
    return gracePeriod;
  }

  public void setGracePeriod(String gracePeriod) {
    this.gracePeriod = gracePeriod;
  }


  public ContentKeyPolicyPlayReadyLicense licenseType(LicenseTypeEnum licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * The license type.
   * @return licenseType
   */
  @javax.annotation.Nonnull
  public LicenseTypeEnum getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(LicenseTypeEnum licenseType) {
    this.licenseType = licenseType;
  }


  public ContentKeyPolicyPlayReadyLicense playRight(ContentKeyPolicyPlayReadyPlayRight playRight) {
    this.playRight = playRight;
    return this;
  }

  /**
   * Get playRight
   * @return playRight
   */
  @javax.annotation.Nullable
  public ContentKeyPolicyPlayReadyPlayRight getPlayRight() {
    return playRight;
  }

  public void setPlayRight(ContentKeyPolicyPlayReadyPlayRight playRight) {
    this.playRight = playRight;
  }


  public ContentKeyPolicyPlayReadyLicense relativeBeginDate(String relativeBeginDate) {
    this.relativeBeginDate = relativeBeginDate;
    return this;
  }

  /**
   * The relative begin date of license.
   * @return relativeBeginDate
   */
  @javax.annotation.Nullable
  public String getRelativeBeginDate() {
    return relativeBeginDate;
  }

  public void setRelativeBeginDate(String relativeBeginDate) {
    this.relativeBeginDate = relativeBeginDate;
  }


  public ContentKeyPolicyPlayReadyLicense relativeExpirationDate(String relativeExpirationDate) {
    this.relativeExpirationDate = relativeExpirationDate;
    return this;
  }

  /**
   * The relative expiration date of license.
   * @return relativeExpirationDate
   */
  @javax.annotation.Nullable
  public String getRelativeExpirationDate() {
    return relativeExpirationDate;
  }

  public void setRelativeExpirationDate(String relativeExpirationDate) {
    this.relativeExpirationDate = relativeExpirationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentKeyPolicyPlayReadyLicense contentKeyPolicyPlayReadyLicense = (ContentKeyPolicyPlayReadyLicense) o;
    return Objects.equals(this.allowTestDevices, contentKeyPolicyPlayReadyLicense.allowTestDevices) &&
        Objects.equals(this.beginDate, contentKeyPolicyPlayReadyLicense.beginDate) &&
        Objects.equals(this.contentKeyLocation, contentKeyPolicyPlayReadyLicense.contentKeyLocation) &&
        Objects.equals(this.contentType, contentKeyPolicyPlayReadyLicense.contentType) &&
        Objects.equals(this.expirationDate, contentKeyPolicyPlayReadyLicense.expirationDate) &&
        Objects.equals(this.gracePeriod, contentKeyPolicyPlayReadyLicense.gracePeriod) &&
        Objects.equals(this.licenseType, contentKeyPolicyPlayReadyLicense.licenseType) &&
        Objects.equals(this.playRight, contentKeyPolicyPlayReadyLicense.playRight) &&
        Objects.equals(this.relativeBeginDate, contentKeyPolicyPlayReadyLicense.relativeBeginDate) &&
        Objects.equals(this.relativeExpirationDate, contentKeyPolicyPlayReadyLicense.relativeExpirationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowTestDevices, beginDate, contentKeyLocation, contentType, expirationDate, gracePeriod, licenseType, playRight, relativeBeginDate, relativeExpirationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentKeyPolicyPlayReadyLicense {\n");
    sb.append("    allowTestDevices: ").append(toIndentedString(allowTestDevices)).append("\n");
    sb.append("    beginDate: ").append(toIndentedString(beginDate)).append("\n");
    sb.append("    contentKeyLocation: ").append(toIndentedString(contentKeyLocation)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    gracePeriod: ").append(toIndentedString(gracePeriod)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    playRight: ").append(toIndentedString(playRight)).append("\n");
    sb.append("    relativeBeginDate: ").append(toIndentedString(relativeBeginDate)).append("\n");
    sb.append("    relativeExpirationDate: ").append(toIndentedString(relativeExpirationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowTestDevices");
    openapiFields.add("beginDate");
    openapiFields.add("contentKeyLocation");
    openapiFields.add("contentType");
    openapiFields.add("expirationDate");
    openapiFields.add("gracePeriod");
    openapiFields.add("licenseType");
    openapiFields.add("playRight");
    openapiFields.add("relativeBeginDate");
    openapiFields.add("relativeExpirationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowTestDevices");
    openapiRequiredFields.add("contentKeyLocation");
    openapiRequiredFields.add("contentType");
    openapiRequiredFields.add("licenseType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentKeyPolicyPlayReadyLicense
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentKeyPolicyPlayReadyLicense.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentKeyPolicyPlayReadyLicense is not found in the empty JSON string", ContentKeyPolicyPlayReadyLicense.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentKeyPolicyPlayReadyLicense.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentKeyPolicyPlayReadyLicense` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContentKeyPolicyPlayReadyLicense.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `contentKeyLocation`
      ContentKeyPolicyPlayReadyContentKeyLocation.validateJsonElement(jsonObj.get("contentKeyLocation"));
      if (!jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      // validate the required field `contentType`
      ContentTypeEnum.validateJsonElement(jsonObj.get("contentType"));
      if ((jsonObj.get("gracePeriod") != null && !jsonObj.get("gracePeriod").isJsonNull()) && !jsonObj.get("gracePeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gracePeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gracePeriod").toString()));
      }
      if (!jsonObj.get("licenseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseType").toString()));
      }
      // validate the required field `licenseType`
      LicenseTypeEnum.validateJsonElement(jsonObj.get("licenseType"));
      // validate the optional field `playRight`
      if (jsonObj.get("playRight") != null && !jsonObj.get("playRight").isJsonNull()) {
        ContentKeyPolicyPlayReadyPlayRight.validateJsonElement(jsonObj.get("playRight"));
      }
      if ((jsonObj.get("relativeBeginDate") != null && !jsonObj.get("relativeBeginDate").isJsonNull()) && !jsonObj.get("relativeBeginDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativeBeginDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativeBeginDate").toString()));
      }
      if ((jsonObj.get("relativeExpirationDate") != null && !jsonObj.get("relativeExpirationDate").isJsonNull()) && !jsonObj.get("relativeExpirationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativeExpirationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativeExpirationDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentKeyPolicyPlayReadyLicense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentKeyPolicyPlayReadyLicense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentKeyPolicyPlayReadyLicense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentKeyPolicyPlayReadyLicense.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentKeyPolicyPlayReadyLicense>() {
           @Override
           public void write(JsonWriter out, ContentKeyPolicyPlayReadyLicense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentKeyPolicyPlayReadyLicense read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentKeyPolicyPlayReadyLicense given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentKeyPolicyPlayReadyLicense
   * @throws IOException if the JSON string is invalid with respect to ContentKeyPolicyPlayReadyLicense
   */
  public static ContentKeyPolicyPlayReadyLicense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentKeyPolicyPlayReadyLicense.class);
  }

  /**
   * Convert an instance of ContentKeyPolicyPlayReadyLicense to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

