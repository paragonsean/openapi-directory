/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentKeyPolicyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentKeyPolicyProperties::OAIContentKeyPolicyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentKeyPolicyProperties::OAIContentKeyPolicyProperties() {
    this->initializeModel();
}

OAIContentKeyPolicyProperties::~OAIContentKeyPolicyProperties() {}

void OAIContentKeyPolicyProperties::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_policy_id_isSet = false;
    m_policy_id_isValid = false;
}

void OAIContentKeyPolicyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentKeyPolicyProperties::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_policy_id_isValid = ::OpenAPI::fromJsonValue(m_policy_id, json[QString("policyId")]);
    m_policy_id_isSet = !json[QString("policyId")].isNull() && m_policy_id_isValid;
}

QString OAIContentKeyPolicyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentKeyPolicyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_policy_id_isSet) {
        obj.insert(QString("policyId"), ::OpenAPI::toJsonValue(m_policy_id));
    }
    return obj;
}

QDateTime OAIContentKeyPolicyProperties::getCreated() const {
    return m_created;
}
void OAIContentKeyPolicyProperties::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIContentKeyPolicyProperties::is_created_Set() const{
    return m_created_isSet;
}

bool OAIContentKeyPolicyProperties::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIContentKeyPolicyProperties::getDescription() const {
    return m_description;
}
void OAIContentKeyPolicyProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIContentKeyPolicyProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIContentKeyPolicyProperties::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIContentKeyPolicyProperties::getLastModified() const {
    return m_last_modified;
}
void OAIContentKeyPolicyProperties::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIContentKeyPolicyProperties::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIContentKeyPolicyProperties::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QList<OAIContentKeyPolicyOption> OAIContentKeyPolicyProperties::getOptions() const {
    return m_options;
}
void OAIContentKeyPolicyProperties::setOptions(const QList<OAIContentKeyPolicyOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIContentKeyPolicyProperties::is_options_Set() const{
    return m_options_isSet;
}

bool OAIContentKeyPolicyProperties::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIContentKeyPolicyProperties::getPolicyId() const {
    return m_policy_id;
}
void OAIContentKeyPolicyProperties::setPolicyId(const QString &policy_id) {
    m_policy_id = policy_id;
    m_policy_id_isSet = true;
}

bool OAIContentKeyPolicyProperties::is_policy_id_Set() const{
    return m_policy_id_isSet;
}

bool OAIContentKeyPolicyProperties::is_policy_id_Valid() const{
    return m_policy_id_isValid;
}

bool OAIContentKeyPolicyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentKeyPolicyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_options_isValid && true;
}

} // namespace OpenAPI
