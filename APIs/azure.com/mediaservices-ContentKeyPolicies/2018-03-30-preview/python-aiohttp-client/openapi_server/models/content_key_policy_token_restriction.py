# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_key_policy_restriction import ContentKeyPolicyRestriction
from openapi_server.models.content_key_policy_restriction_token_key import ContentKeyPolicyRestrictionTokenKey
from openapi_server.models.content_key_policy_token_claim import ContentKeyPolicyTokenClaim
from openapi_server import util


class ContentKeyPolicyTokenRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_verification_keys: List[ContentKeyPolicyRestrictionTokenKey]=None, audience: str=None, issuer: str=None, open_id_connect_discovery_document: str=None, primary_verification_key: ContentKeyPolicyRestrictionTokenKey=None, required_claims: List[ContentKeyPolicyTokenClaim]=None, restriction_token_type: str=None, odata_type: str=None):
        """ContentKeyPolicyTokenRestriction - a model defined in OpenAPI

        :param alternate_verification_keys: The alternate_verification_keys of this ContentKeyPolicyTokenRestriction.
        :param audience: The audience of this ContentKeyPolicyTokenRestriction.
        :param issuer: The issuer of this ContentKeyPolicyTokenRestriction.
        :param open_id_connect_discovery_document: The open_id_connect_discovery_document of this ContentKeyPolicyTokenRestriction.
        :param primary_verification_key: The primary_verification_key of this ContentKeyPolicyTokenRestriction.
        :param required_claims: The required_claims of this ContentKeyPolicyTokenRestriction.
        :param restriction_token_type: The restriction_token_type of this ContentKeyPolicyTokenRestriction.
        :param odata_type: The odata_type of this ContentKeyPolicyTokenRestriction.
        """
        self.openapi_types = {
            'alternate_verification_keys': List[ContentKeyPolicyRestrictionTokenKey],
            'audience': str,
            'issuer': str,
            'open_id_connect_discovery_document': str,
            'primary_verification_key': ContentKeyPolicyRestrictionTokenKey,
            'required_claims': List[ContentKeyPolicyTokenClaim],
            'restriction_token_type': str,
            'odata_type': str
        }

        self.attribute_map = {
            'alternate_verification_keys': 'alternateVerificationKeys',
            'audience': 'audience',
            'issuer': 'issuer',
            'open_id_connect_discovery_document': 'openIdConnectDiscoveryDocument',
            'primary_verification_key': 'primaryVerificationKey',
            'required_claims': 'requiredClaims',
            'restriction_token_type': 'restrictionTokenType',
            'odata_type': '@odata.type'
        }

        self._alternate_verification_keys = alternate_verification_keys
        self._audience = audience
        self._issuer = issuer
        self._open_id_connect_discovery_document = open_id_connect_discovery_document
        self._primary_verification_key = primary_verification_key
        self._required_claims = required_claims
        self._restriction_token_type = restriction_token_type
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentKeyPolicyTokenRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentKeyPolicyTokenRestriction of this ContentKeyPolicyTokenRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_verification_keys(self):
        """Gets the alternate_verification_keys of this ContentKeyPolicyTokenRestriction.

        A list of alternative verification keys.

        :return: The alternate_verification_keys of this ContentKeyPolicyTokenRestriction.
        :rtype: List[ContentKeyPolicyRestrictionTokenKey]
        """
        return self._alternate_verification_keys

    @alternate_verification_keys.setter
    def alternate_verification_keys(self, alternate_verification_keys):
        """Sets the alternate_verification_keys of this ContentKeyPolicyTokenRestriction.

        A list of alternative verification keys.

        :param alternate_verification_keys: The alternate_verification_keys of this ContentKeyPolicyTokenRestriction.
        :type alternate_verification_keys: List[ContentKeyPolicyRestrictionTokenKey]
        """

        self._alternate_verification_keys = alternate_verification_keys

    @property
    def audience(self):
        """Gets the audience of this ContentKeyPolicyTokenRestriction.

        The audience for the token.

        :return: The audience of this ContentKeyPolicyTokenRestriction.
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this ContentKeyPolicyTokenRestriction.

        The audience for the token.

        :param audience: The audience of this ContentKeyPolicyTokenRestriction.
        :type audience: str
        """
        if audience is None:
            raise ValueError("Invalid value for `audience`, must not be `None`")

        self._audience = audience

    @property
    def issuer(self):
        """Gets the issuer of this ContentKeyPolicyTokenRestriction.

        The token issuer.

        :return: The issuer of this ContentKeyPolicyTokenRestriction.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this ContentKeyPolicyTokenRestriction.

        The token issuer.

        :param issuer: The issuer of this ContentKeyPolicyTokenRestriction.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def open_id_connect_discovery_document(self):
        """Gets the open_id_connect_discovery_document of this ContentKeyPolicyTokenRestriction.

        The OpenID connect discovery document.

        :return: The open_id_connect_discovery_document of this ContentKeyPolicyTokenRestriction.
        :rtype: str
        """
        return self._open_id_connect_discovery_document

    @open_id_connect_discovery_document.setter
    def open_id_connect_discovery_document(self, open_id_connect_discovery_document):
        """Sets the open_id_connect_discovery_document of this ContentKeyPolicyTokenRestriction.

        The OpenID connect discovery document.

        :param open_id_connect_discovery_document: The open_id_connect_discovery_document of this ContentKeyPolicyTokenRestriction.
        :type open_id_connect_discovery_document: str
        """

        self._open_id_connect_discovery_document = open_id_connect_discovery_document

    @property
    def primary_verification_key(self):
        """Gets the primary_verification_key of this ContentKeyPolicyTokenRestriction.


        :return: The primary_verification_key of this ContentKeyPolicyTokenRestriction.
        :rtype: ContentKeyPolicyRestrictionTokenKey
        """
        return self._primary_verification_key

    @primary_verification_key.setter
    def primary_verification_key(self, primary_verification_key):
        """Sets the primary_verification_key of this ContentKeyPolicyTokenRestriction.


        :param primary_verification_key: The primary_verification_key of this ContentKeyPolicyTokenRestriction.
        :type primary_verification_key: ContentKeyPolicyRestrictionTokenKey
        """
        if primary_verification_key is None:
            raise ValueError("Invalid value for `primary_verification_key`, must not be `None`")

        self._primary_verification_key = primary_verification_key

    @property
    def required_claims(self):
        """Gets the required_claims of this ContentKeyPolicyTokenRestriction.

        A list of required token claims.

        :return: The required_claims of this ContentKeyPolicyTokenRestriction.
        :rtype: List[ContentKeyPolicyTokenClaim]
        """
        return self._required_claims

    @required_claims.setter
    def required_claims(self, required_claims):
        """Sets the required_claims of this ContentKeyPolicyTokenRestriction.

        A list of required token claims.

        :param required_claims: The required_claims of this ContentKeyPolicyTokenRestriction.
        :type required_claims: List[ContentKeyPolicyTokenClaim]
        """

        self._required_claims = required_claims

    @property
    def restriction_token_type(self):
        """Gets the restriction_token_type of this ContentKeyPolicyTokenRestriction.

        The type of token.

        :return: The restriction_token_type of this ContentKeyPolicyTokenRestriction.
        :rtype: str
        """
        return self._restriction_token_type

    @restriction_token_type.setter
    def restriction_token_type(self, restriction_token_type):
        """Sets the restriction_token_type of this ContentKeyPolicyTokenRestriction.

        The type of token.

        :param restriction_token_type: The restriction_token_type of this ContentKeyPolicyTokenRestriction.
        :type restriction_token_type: str
        """
        allowed_values = ["Unknown", "Swt", "Jwt"]  # noqa: E501
        if restriction_token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction_token_type` ({0}), must be one of {1}"
                .format(restriction_token_type, allowed_values)
            )

        self._restriction_token_type = restriction_token_type

    @property
    def odata_type(self):
        """Gets the odata_type of this ContentKeyPolicyTokenRestriction.

        The discriminator for derived types.

        :return: The odata_type of this ContentKeyPolicyTokenRestriction.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this ContentKeyPolicyTokenRestriction.

        The discriminator for derived types.

        :param odata_type: The odata_type of this ContentKeyPolicyTokenRestriction.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
