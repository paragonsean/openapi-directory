# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_key_policy_configuration import ContentKeyPolicyConfiguration
from openapi_server.models.content_key_policy_restriction import ContentKeyPolicyRestriction
from openapi_server import util


class ContentKeyPolicyOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: ContentKeyPolicyConfiguration=None, name: str=None, policy_option_id: str=None, restriction: ContentKeyPolicyRestriction=None):
        """ContentKeyPolicyOption - a model defined in OpenAPI

        :param configuration: The configuration of this ContentKeyPolicyOption.
        :param name: The name of this ContentKeyPolicyOption.
        :param policy_option_id: The policy_option_id of this ContentKeyPolicyOption.
        :param restriction: The restriction of this ContentKeyPolicyOption.
        """
        self.openapi_types = {
            'configuration': ContentKeyPolicyConfiguration,
            'name': str,
            'policy_option_id': str,
            'restriction': ContentKeyPolicyRestriction
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'name': 'name',
            'policy_option_id': 'policyOptionId',
            'restriction': 'restriction'
        }

        self._configuration = configuration
        self._name = name
        self._policy_option_id = policy_option_id
        self._restriction = restriction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentKeyPolicyOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentKeyPolicyOption of this ContentKeyPolicyOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this ContentKeyPolicyOption.


        :return: The configuration of this ContentKeyPolicyOption.
        :rtype: ContentKeyPolicyConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ContentKeyPolicyOption.


        :param configuration: The configuration of this ContentKeyPolicyOption.
        :type configuration: ContentKeyPolicyConfiguration
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def name(self):
        """Gets the name of this ContentKeyPolicyOption.

        The Policy Option description.

        :return: The name of this ContentKeyPolicyOption.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentKeyPolicyOption.

        The Policy Option description.

        :param name: The name of this ContentKeyPolicyOption.
        :type name: str
        """

        self._name = name

    @property
    def policy_option_id(self):
        """Gets the policy_option_id of this ContentKeyPolicyOption.

        The legacy Policy Option ID.

        :return: The policy_option_id of this ContentKeyPolicyOption.
        :rtype: str
        """
        return self._policy_option_id

    @policy_option_id.setter
    def policy_option_id(self, policy_option_id):
        """Sets the policy_option_id of this ContentKeyPolicyOption.

        The legacy Policy Option ID.

        :param policy_option_id: The policy_option_id of this ContentKeyPolicyOption.
        :type policy_option_id: str
        """

        self._policy_option_id = policy_option_id

    @property
    def restriction(self):
        """Gets the restriction of this ContentKeyPolicyOption.


        :return: The restriction of this ContentKeyPolicyOption.
        :rtype: ContentKeyPolicyRestriction
        """
        return self._restriction

    @restriction.setter
    def restriction(self, restriction):
        """Sets the restriction of this ContentKeyPolicyOption.


        :param restriction: The restriction of this ContentKeyPolicyOption.
        :type restriction: ContentKeyPolicyRestriction
        """
        if restriction is None:
            raise ValueError("Invalid value for `restriction`, must not be `None`")

        self._restriction = restriction
