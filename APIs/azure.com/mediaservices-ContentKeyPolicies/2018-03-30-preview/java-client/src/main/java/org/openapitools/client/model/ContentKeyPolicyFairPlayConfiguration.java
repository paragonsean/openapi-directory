/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContentKeyPolicyConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies a configuration for FairPlay licenses.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:49.367980-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentKeyPolicyFairPlayConfiguration extends ContentKeyPolicyConfiguration {
  public static final String SERIALIZED_NAME_ASK = "ask";
  @SerializedName(SERIALIZED_NAME_ASK)
  private byte[] ask;

  public static final String SERIALIZED_NAME_FAIR_PLAY_PFX = "fairPlayPfx";
  @SerializedName(SERIALIZED_NAME_FAIR_PLAY_PFX)
  private String fairPlayPfx;

  public static final String SERIALIZED_NAME_FAIR_PLAY_PFX_PASSWORD = "fairPlayPfxPassword";
  @SerializedName(SERIALIZED_NAME_FAIR_PLAY_PFX_PASSWORD)
  private String fairPlayPfxPassword;

  /**
   * The rental and lease key type.
   */
  @JsonAdapter(RentalAndLeaseKeyTypeEnum.Adapter.class)
  public enum RentalAndLeaseKeyTypeEnum {
    UNKNOWN("Unknown"),
    
    UNDEFINED("Undefined"),
    
    PERSISTENT_UNLIMITED("PersistentUnlimited"),
    
    PERSISTENT_LIMITED("PersistentLimited");

    private String value;

    RentalAndLeaseKeyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RentalAndLeaseKeyTypeEnum fromValue(String value) {
      for (RentalAndLeaseKeyTypeEnum b : RentalAndLeaseKeyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RentalAndLeaseKeyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RentalAndLeaseKeyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RentalAndLeaseKeyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RentalAndLeaseKeyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RentalAndLeaseKeyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RENTAL_AND_LEASE_KEY_TYPE = "rentalAndLeaseKeyType";
  @SerializedName(SERIALIZED_NAME_RENTAL_AND_LEASE_KEY_TYPE)
  private RentalAndLeaseKeyTypeEnum rentalAndLeaseKeyType;

  public static final String SERIALIZED_NAME_RENTAL_DURATION = "rentalDuration";
  @SerializedName(SERIALIZED_NAME_RENTAL_DURATION)
  private Long rentalDuration;

  public ContentKeyPolicyFairPlayConfiguration() {
    this.atOdataType = this.getClass().getSimpleName();
  }

  public ContentKeyPolicyFairPlayConfiguration ask(byte[] ask) {
    this.ask = ask;
    return this;
  }

  /**
   * The key that must be used as FairPlay ASk.
   * @return ask
   */
  @javax.annotation.Nonnull
  public byte[] getAsk() {
    return ask;
  }

  public void setAsk(byte[] ask) {
    this.ask = ask;
  }


  public ContentKeyPolicyFairPlayConfiguration fairPlayPfx(String fairPlayPfx) {
    this.fairPlayPfx = fairPlayPfx;
    return this;
  }

  /**
   * The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
   * @return fairPlayPfx
   */
  @javax.annotation.Nonnull
  public String getFairPlayPfx() {
    return fairPlayPfx;
  }

  public void setFairPlayPfx(String fairPlayPfx) {
    this.fairPlayPfx = fairPlayPfx;
  }


  public ContentKeyPolicyFairPlayConfiguration fairPlayPfxPassword(String fairPlayPfxPassword) {
    this.fairPlayPfxPassword = fairPlayPfxPassword;
    return this;
  }

  /**
   * The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
   * @return fairPlayPfxPassword
   */
  @javax.annotation.Nonnull
  public String getFairPlayPfxPassword() {
    return fairPlayPfxPassword;
  }

  public void setFairPlayPfxPassword(String fairPlayPfxPassword) {
    this.fairPlayPfxPassword = fairPlayPfxPassword;
  }


  public ContentKeyPolicyFairPlayConfiguration rentalAndLeaseKeyType(RentalAndLeaseKeyTypeEnum rentalAndLeaseKeyType) {
    this.rentalAndLeaseKeyType = rentalAndLeaseKeyType;
    return this;
  }

  /**
   * The rental and lease key type.
   * @return rentalAndLeaseKeyType
   */
  @javax.annotation.Nonnull
  public RentalAndLeaseKeyTypeEnum getRentalAndLeaseKeyType() {
    return rentalAndLeaseKeyType;
  }

  public void setRentalAndLeaseKeyType(RentalAndLeaseKeyTypeEnum rentalAndLeaseKeyType) {
    this.rentalAndLeaseKeyType = rentalAndLeaseKeyType;
  }


  public ContentKeyPolicyFairPlayConfiguration rentalDuration(Long rentalDuration) {
    this.rentalDuration = rentalDuration;
    return this;
  }

  /**
   * The rental duration. Must be greater than or equal to 0.
   * @return rentalDuration
   */
  @javax.annotation.Nonnull
  public Long getRentalDuration() {
    return rentalDuration;
  }

  public void setRentalDuration(Long rentalDuration) {
    this.rentalDuration = rentalDuration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentKeyPolicyFairPlayConfiguration contentKeyPolicyFairPlayConfiguration = (ContentKeyPolicyFairPlayConfiguration) o;
    return Arrays.equals(this.ask, contentKeyPolicyFairPlayConfiguration.ask) &&
        Objects.equals(this.fairPlayPfx, contentKeyPolicyFairPlayConfiguration.fairPlayPfx) &&
        Objects.equals(this.fairPlayPfxPassword, contentKeyPolicyFairPlayConfiguration.fairPlayPfxPassword) &&
        Objects.equals(this.rentalAndLeaseKeyType, contentKeyPolicyFairPlayConfiguration.rentalAndLeaseKeyType) &&
        Objects.equals(this.rentalDuration, contentKeyPolicyFairPlayConfiguration.rentalDuration) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(ask), fairPlayPfx, fairPlayPfxPassword, rentalAndLeaseKeyType, rentalDuration, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentKeyPolicyFairPlayConfiguration {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    ask: ").append(toIndentedString(ask)).append("\n");
    sb.append("    fairPlayPfx: ").append(toIndentedString(fairPlayPfx)).append("\n");
    sb.append("    fairPlayPfxPassword: ").append(toIndentedString(fairPlayPfxPassword)).append("\n");
    sb.append("    rentalAndLeaseKeyType: ").append(toIndentedString(rentalAndLeaseKeyType)).append("\n");
    sb.append("    rentalDuration: ").append(toIndentedString(rentalDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ask");
    openapiRequiredFields.add("fairPlayPfx");
    openapiRequiredFields.add("fairPlayPfxPassword");
    openapiRequiredFields.add("rentalAndLeaseKeyType");
    openapiRequiredFields.add("rentalDuration");
    openapiRequiredFields.add("@odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentKeyPolicyFairPlayConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentKeyPolicyFairPlayConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentKeyPolicyFairPlayConfiguration is not found in the empty JSON string", ContentKeyPolicyFairPlayConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentKeyPolicyFairPlayConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentKeyPolicyFairPlayConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContentKeyPolicyFairPlayConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentKeyPolicyFairPlayConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentKeyPolicyFairPlayConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentKeyPolicyFairPlayConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentKeyPolicyFairPlayConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentKeyPolicyFairPlayConfiguration>() {
           @Override
           public void write(JsonWriter out, ContentKeyPolicyFairPlayConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentKeyPolicyFairPlayConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentKeyPolicyFairPlayConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentKeyPolicyFairPlayConfiguration
   * @throws IOException if the JSON string is invalid with respect to ContentKeyPolicyFairPlayConfiguration
   */
  public static ContentKeyPolicyFairPlayConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentKeyPolicyFairPlayConfiguration.class);
  }

  /**
   * Convert an instance of ContentKeyPolicyFairPlayConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

