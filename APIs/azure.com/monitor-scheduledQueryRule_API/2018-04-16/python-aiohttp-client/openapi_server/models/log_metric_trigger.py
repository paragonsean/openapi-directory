# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conditional_operator import ConditionalOperator
from openapi_server.models.metric_trigger_type import MetricTriggerType
from openapi_server import util


class LogMetricTrigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_column: str=None, metric_trigger_type: MetricTriggerType=None, threshold: float=None, threshold_operator: ConditionalOperator=None):
        """LogMetricTrigger - a model defined in OpenAPI

        :param metric_column: The metric_column of this LogMetricTrigger.
        :param metric_trigger_type: The metric_trigger_type of this LogMetricTrigger.
        :param threshold: The threshold of this LogMetricTrigger.
        :param threshold_operator: The threshold_operator of this LogMetricTrigger.
        """
        self.openapi_types = {
            'metric_column': str,
            'metric_trigger_type': MetricTriggerType,
            'threshold': float,
            'threshold_operator': ConditionalOperator
        }

        self.attribute_map = {
            'metric_column': 'metricColumn',
            'metric_trigger_type': 'metricTriggerType',
            'threshold': 'threshold',
            'threshold_operator': 'thresholdOperator'
        }

        self._metric_column = metric_column
        self._metric_trigger_type = metric_trigger_type
        self._threshold = threshold
        self._threshold_operator = threshold_operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogMetricTrigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogMetricTrigger of this LogMetricTrigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_column(self):
        """Gets the metric_column of this LogMetricTrigger.

        Evaluation of metric on a particular column

        :return: The metric_column of this LogMetricTrigger.
        :rtype: str
        """
        return self._metric_column

    @metric_column.setter
    def metric_column(self, metric_column):
        """Sets the metric_column of this LogMetricTrigger.

        Evaluation of metric on a particular column

        :param metric_column: The metric_column of this LogMetricTrigger.
        :type metric_column: str
        """

        self._metric_column = metric_column

    @property
    def metric_trigger_type(self):
        """Gets the metric_trigger_type of this LogMetricTrigger.


        :return: The metric_trigger_type of this LogMetricTrigger.
        :rtype: MetricTriggerType
        """
        return self._metric_trigger_type

    @metric_trigger_type.setter
    def metric_trigger_type(self, metric_trigger_type):
        """Sets the metric_trigger_type of this LogMetricTrigger.


        :param metric_trigger_type: The metric_trigger_type of this LogMetricTrigger.
        :type metric_trigger_type: MetricTriggerType
        """

        self._metric_trigger_type = metric_trigger_type

    @property
    def threshold(self):
        """Gets the threshold of this LogMetricTrigger.

        The threshold of the metric trigger.

        :return: The threshold of this LogMetricTrigger.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this LogMetricTrigger.

        The threshold of the metric trigger.

        :param threshold: The threshold of this LogMetricTrigger.
        :type threshold: float
        """

        self._threshold = threshold

    @property
    def threshold_operator(self):
        """Gets the threshold_operator of this LogMetricTrigger.


        :return: The threshold_operator of this LogMetricTrigger.
        :rtype: ConditionalOperator
        """
        return self._threshold_operator

    @threshold_operator.setter
    def threshold_operator(self, threshold_operator):
        """Sets the threshold_operator of this LogMetricTrigger.


        :param threshold_operator: The threshold_operator of this LogMetricTrigger.
        :type threshold_operator: ConditionalOperator
        """

        self._threshold_operator = threshold_operator
