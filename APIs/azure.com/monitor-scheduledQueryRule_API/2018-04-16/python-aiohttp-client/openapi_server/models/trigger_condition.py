# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conditional_operator import ConditionalOperator
from openapi_server.models.log_metric_trigger import LogMetricTrigger
from openapi_server import util


class TriggerCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_trigger: LogMetricTrigger=None, threshold: float=None, threshold_operator: ConditionalOperator=None):
        """TriggerCondition - a model defined in OpenAPI

        :param metric_trigger: The metric_trigger of this TriggerCondition.
        :param threshold: The threshold of this TriggerCondition.
        :param threshold_operator: The threshold_operator of this TriggerCondition.
        """
        self.openapi_types = {
            'metric_trigger': LogMetricTrigger,
            'threshold': float,
            'threshold_operator': ConditionalOperator
        }

        self.attribute_map = {
            'metric_trigger': 'metricTrigger',
            'threshold': 'threshold',
            'threshold_operator': 'thresholdOperator'
        }

        self._metric_trigger = metric_trigger
        self._threshold = threshold
        self._threshold_operator = threshold_operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TriggerCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TriggerCondition of this TriggerCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_trigger(self):
        """Gets the metric_trigger of this TriggerCondition.


        :return: The metric_trigger of this TriggerCondition.
        :rtype: LogMetricTrigger
        """
        return self._metric_trigger

    @metric_trigger.setter
    def metric_trigger(self, metric_trigger):
        """Sets the metric_trigger of this TriggerCondition.


        :param metric_trigger: The metric_trigger of this TriggerCondition.
        :type metric_trigger: LogMetricTrigger
        """

        self._metric_trigger = metric_trigger

    @property
    def threshold(self):
        """Gets the threshold of this TriggerCondition.

        Result or count threshold based on which rule should be triggered.

        :return: The threshold of this TriggerCondition.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this TriggerCondition.

        Result or count threshold based on which rule should be triggered.

        :param threshold: The threshold of this TriggerCondition.
        :type threshold: float
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")

        self._threshold = threshold

    @property
    def threshold_operator(self):
        """Gets the threshold_operator of this TriggerCondition.


        :return: The threshold_operator of this TriggerCondition.
        :rtype: ConditionalOperator
        """
        return self._threshold_operator

    @threshold_operator.setter
    def threshold_operator(self, threshold_operator):
        """Sets the threshold_operator of this TriggerCondition.


        :param threshold_operator: The threshold_operator of this TriggerCondition.
        :type threshold_operator: ConditionalOperator
        """
        if threshold_operator is None:
            raise ValueError("Invalid value for `threshold_operator`, must not be `None`")

        self._threshold_operator = threshold_operator
