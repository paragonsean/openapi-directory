# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.alert_severity import AlertSeverity
from openapi_server.models.az_ns_action_group import AzNsActionGroup
from openapi_server.models.trigger_condition import TriggerCondition
from openapi_server import util


class AlertingAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, azns_action: AzNsActionGroup=None, severity: AlertSeverity=None, throttling_in_min: int=None, trigger: TriggerCondition=None, odata_type: str=None):
        """AlertingAction - a model defined in OpenAPI

        :param azns_action: The azns_action of this AlertingAction.
        :param severity: The severity of this AlertingAction.
        :param throttling_in_min: The throttling_in_min of this AlertingAction.
        :param trigger: The trigger of this AlertingAction.
        :param odata_type: The odata_type of this AlertingAction.
        """
        self.openapi_types = {
            'azns_action': AzNsActionGroup,
            'severity': AlertSeverity,
            'throttling_in_min': int,
            'trigger': TriggerCondition,
            'odata_type': str
        }

        self.attribute_map = {
            'azns_action': 'aznsAction',
            'severity': 'severity',
            'throttling_in_min': 'throttlingInMin',
            'trigger': 'trigger',
            'odata_type': 'odata.type'
        }

        self._azns_action = azns_action
        self._severity = severity
        self._throttling_in_min = throttling_in_min
        self._trigger = trigger
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertingAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertingAction of this AlertingAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def azns_action(self):
        """Gets the azns_action of this AlertingAction.


        :return: The azns_action of this AlertingAction.
        :rtype: AzNsActionGroup
        """
        return self._azns_action

    @azns_action.setter
    def azns_action(self, azns_action):
        """Sets the azns_action of this AlertingAction.


        :param azns_action: The azns_action of this AlertingAction.
        :type azns_action: AzNsActionGroup
        """

        self._azns_action = azns_action

    @property
    def severity(self):
        """Gets the severity of this AlertingAction.


        :return: The severity of this AlertingAction.
        :rtype: AlertSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AlertingAction.


        :param severity: The severity of this AlertingAction.
        :type severity: AlertSeverity
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")

        self._severity = severity

    @property
    def throttling_in_min(self):
        """Gets the throttling_in_min of this AlertingAction.

        time (in minutes) for which Alerts should be throttled or suppressed.

        :return: The throttling_in_min of this AlertingAction.
        :rtype: int
        """
        return self._throttling_in_min

    @throttling_in_min.setter
    def throttling_in_min(self, throttling_in_min):
        """Sets the throttling_in_min of this AlertingAction.

        time (in minutes) for which Alerts should be throttled or suppressed.

        :param throttling_in_min: The throttling_in_min of this AlertingAction.
        :type throttling_in_min: int
        """

        self._throttling_in_min = throttling_in_min

    @property
    def trigger(self):
        """Gets the trigger of this AlertingAction.


        :return: The trigger of this AlertingAction.
        :rtype: TriggerCondition
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this AlertingAction.


        :param trigger: The trigger of this AlertingAction.
        :type trigger: TriggerCondition
        """
        if trigger is None:
            raise ValueError("Invalid value for `trigger`, must not be `None`")

        self._trigger = trigger

    @property
    def odata_type(self):
        """Gets the odata_type of this AlertingAction.

        Specifies the action. Supported values - AlertingAction, LogToMetricAction

        :return: The odata_type of this AlertingAction.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this AlertingAction.

        Specifies the action. Supported values - AlertingAction, LogToMetricAction

        :param odata_type: The odata_type of this AlertingAction.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
