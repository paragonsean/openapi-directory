# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Schedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency_in_minutes: int=None, time_window_in_minutes: int=None):
        """Schedule - a model defined in OpenAPI

        :param frequency_in_minutes: The frequency_in_minutes of this Schedule.
        :param time_window_in_minutes: The time_window_in_minutes of this Schedule.
        """
        self.openapi_types = {
            'frequency_in_minutes': int,
            'time_window_in_minutes': int
        }

        self.attribute_map = {
            'frequency_in_minutes': 'frequencyInMinutes',
            'time_window_in_minutes': 'timeWindowInMinutes'
        }

        self._frequency_in_minutes = frequency_in_minutes
        self._time_window_in_minutes = time_window_in_minutes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Schedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Schedule of this Schedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency_in_minutes(self):
        """Gets the frequency_in_minutes of this Schedule.

        frequency (in minutes) at which rule condition should be evaluated.

        :return: The frequency_in_minutes of this Schedule.
        :rtype: int
        """
        return self._frequency_in_minutes

    @frequency_in_minutes.setter
    def frequency_in_minutes(self, frequency_in_minutes):
        """Sets the frequency_in_minutes of this Schedule.

        frequency (in minutes) at which rule condition should be evaluated.

        :param frequency_in_minutes: The frequency_in_minutes of this Schedule.
        :type frequency_in_minutes: int
        """
        if frequency_in_minutes is None:
            raise ValueError("Invalid value for `frequency_in_minutes`, must not be `None`")

        self._frequency_in_minutes = frequency_in_minutes

    @property
    def time_window_in_minutes(self):
        """Gets the time_window_in_minutes of this Schedule.

        Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).

        :return: The time_window_in_minutes of this Schedule.
        :rtype: int
        """
        return self._time_window_in_minutes

    @time_window_in_minutes.setter
    def time_window_in_minutes(self, time_window_in_minutes):
        """Sets the time_window_in_minutes of this Schedule.

        Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).

        :param time_window_in_minutes: The time_window_in_minutes of this Schedule.
        :type time_window_in_minutes: int
        """
        if time_window_in_minutes is None:
            raise ValueError("Invalid value for `time_window_in_minutes`, must not be `None`")

        self._time_window_in_minutes = time_window_in_minutes
