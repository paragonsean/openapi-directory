# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_type import QueryType
from openapi_server import util


class Source(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorized_resources: List[str]=None, data_source_id: str=None, query: str=None, query_type: QueryType=None):
        """Source - a model defined in OpenAPI

        :param authorized_resources: The authorized_resources of this Source.
        :param data_source_id: The data_source_id of this Source.
        :param query: The query of this Source.
        :param query_type: The query_type of this Source.
        """
        self.openapi_types = {
            'authorized_resources': List[str],
            'data_source_id': str,
            'query': str,
            'query_type': QueryType
        }

        self.attribute_map = {
            'authorized_resources': 'authorizedResources',
            'data_source_id': 'dataSourceId',
            'query': 'query',
            'query_type': 'queryType'
        }

        self._authorized_resources = authorized_resources
        self._data_source_id = data_source_id
        self._query = query
        self._query_type = query_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Source':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Source of this Source.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorized_resources(self):
        """Gets the authorized_resources of this Source.

        List of  Resource referred into query

        :return: The authorized_resources of this Source.
        :rtype: List[str]
        """
        return self._authorized_resources

    @authorized_resources.setter
    def authorized_resources(self, authorized_resources):
        """Sets the authorized_resources of this Source.

        List of  Resource referred into query

        :param authorized_resources: The authorized_resources of this Source.
        :type authorized_resources: List[str]
        """

        self._authorized_resources = authorized_resources

    @property
    def data_source_id(self):
        """Gets the data_source_id of this Source.

        The resource uri over which log search query is to be run.

        :return: The data_source_id of this Source.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this Source.

        The resource uri over which log search query is to be run.

        :param data_source_id: The data_source_id of this Source.
        :type data_source_id: str
        """
        if data_source_id is None:
            raise ValueError("Invalid value for `data_source_id`, must not be `None`")

        self._data_source_id = data_source_id

    @property
    def query(self):
        """Gets the query of this Source.

        Log search query. Required for action type - AlertingAction

        :return: The query of this Source.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Source.

        Log search query. Required for action type - AlertingAction

        :param query: The query of this Source.
        :type query: str
        """

        self._query = query

    @property
    def query_type(self):
        """Gets the query_type of this Source.


        :return: The query_type of this Source.
        :rtype: QueryType
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this Source.


        :param query_type: The query_type of this Source.
        :type query_type: QueryType
        """

        self._query_type = query_type
