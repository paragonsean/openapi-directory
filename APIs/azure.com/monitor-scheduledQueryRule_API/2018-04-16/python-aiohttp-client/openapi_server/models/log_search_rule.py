# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.schedule import Schedule
from openapi_server.models.source import Source
from openapi_server import util


class LogSearchRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: Action=None, description: str=None, enabled: str=None, last_updated_time: datetime=None, provisioning_state: str=None, schedule: Schedule=None, source: Source=None):
        """LogSearchRule - a model defined in OpenAPI

        :param action: The action of this LogSearchRule.
        :param description: The description of this LogSearchRule.
        :param enabled: The enabled of this LogSearchRule.
        :param last_updated_time: The last_updated_time of this LogSearchRule.
        :param provisioning_state: The provisioning_state of this LogSearchRule.
        :param schedule: The schedule of this LogSearchRule.
        :param source: The source of this LogSearchRule.
        """
        self.openapi_types = {
            'action': Action,
            'description': str,
            'enabled': str,
            'last_updated_time': datetime,
            'provisioning_state': str,
            'schedule': Schedule,
            'source': Source
        }

        self.attribute_map = {
            'action': 'action',
            'description': 'description',
            'enabled': 'enabled',
            'last_updated_time': 'lastUpdatedTime',
            'provisioning_state': 'provisioningState',
            'schedule': 'schedule',
            'source': 'source'
        }

        self._action = action
        self._description = description
        self._enabled = enabled
        self._last_updated_time = last_updated_time
        self._provisioning_state = provisioning_state
        self._schedule = schedule
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogSearchRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogSearchRule of this LogSearchRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this LogSearchRule.


        :return: The action of this LogSearchRule.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this LogSearchRule.


        :param action: The action of this LogSearchRule.
        :type action: Action
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def description(self):
        """Gets the description of this LogSearchRule.

        The description of the Log Search rule.

        :return: The description of this LogSearchRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LogSearchRule.

        The description of the Log Search rule.

        :param description: The description of this LogSearchRule.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this LogSearchRule.

        The flag which indicates whether the Log Search rule is enabled. Value should be true or false

        :return: The enabled of this LogSearchRule.
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LogSearchRule.

        The flag which indicates whether the Log Search rule is enabled. Value should be true or false

        :param enabled: The enabled of this LogSearchRule.
        :type enabled: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled` ({0}), must be one of {1}"
                .format(enabled, allowed_values)
            )

        self._enabled = enabled

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this LogSearchRule.

        Last time the rule was updated in IS08601 format.

        :return: The last_updated_time of this LogSearchRule.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this LogSearchRule.

        Last time the rule was updated in IS08601 format.

        :param last_updated_time: The last_updated_time of this LogSearchRule.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this LogSearchRule.

        Provisioning state of the scheduled query rule

        :return: The provisioning_state of this LogSearchRule.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this LogSearchRule.

        Provisioning state of the scheduled query rule

        :param provisioning_state: The provisioning_state of this LogSearchRule.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Deploying", "Canceled", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def schedule(self):
        """Gets the schedule of this LogSearchRule.


        :return: The schedule of this LogSearchRule.
        :rtype: Schedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this LogSearchRule.


        :param schedule: The schedule of this LogSearchRule.
        :type schedule: Schedule
        """

        self._schedule = schedule

    @property
    def source(self):
        """Gets the source of this LogSearchRule.


        :return: The source of this LogSearchRule.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LogSearchRule.


        :param source: The source of this LogSearchRule.
        :type source: Source
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
