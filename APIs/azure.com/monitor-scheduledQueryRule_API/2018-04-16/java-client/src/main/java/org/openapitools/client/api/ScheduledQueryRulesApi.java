/*
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.LogSearchRuleResource;
import org.openapitools.client.model.LogSearchRuleResourceCollection;
import org.openapitools.client.model.LogSearchRuleResourcePatch;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScheduledQueryRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScheduledQueryRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduledQueryRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for scheduledQueryRulesCreateOrUpdate
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update an Log Search rule </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created alert rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledQueryRulesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, LogSearchRuleResource parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduledQueryRulesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, LogSearchRuleResource parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scheduledQueryRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scheduledQueryRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling scheduledQueryRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scheduledQueryRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling scheduledQueryRulesCreateOrUpdate(Async)");
        }

        return scheduledQueryRulesCreateOrUpdateCall(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates an log search rule.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to create or update. (required)
     * @return LogSearchRuleResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update an Log Search rule </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created alert rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LogSearchRuleResource scheduledQueryRulesCreateOrUpdate(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, LogSearchRuleResource parameters) throws ApiException {
        ApiResponse<LogSearchRuleResource> localVarResp = scheduledQueryRulesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an log search rule.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to create or update. (required)
     * @return ApiResponse&lt;LogSearchRuleResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update an Log Search rule </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created alert rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogSearchRuleResource> scheduledQueryRulesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, LogSearchRuleResource parameters) throws ApiException {
        okhttp3.Call localVarCall = scheduledQueryRulesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<LogSearchRuleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an log search rule.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update an Log Search rule </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created alert rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledQueryRulesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, LogSearchRuleResource parameters, final ApiCallback<LogSearchRuleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduledQueryRulesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<LogSearchRuleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduledQueryRulesDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete a  Log Search rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledQueryRulesDeleteCall(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduledQueryRulesDeleteValidateBeforeCall(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scheduledQueryRulesDelete(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling scheduledQueryRulesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scheduledQueryRulesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scheduledQueryRulesDelete(Async)");
        }

        return scheduledQueryRulesDeleteCall(resourceGroupName, ruleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a Log Search rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete a  Log Search rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void scheduledQueryRulesDelete(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        scheduledQueryRulesDeleteWithHttpInfo(resourceGroupName, ruleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a Log Search rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete a  Log Search rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scheduledQueryRulesDeleteWithHttpInfo(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = scheduledQueryRulesDeleteValidateBeforeCall(resourceGroupName, ruleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a Log Search rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete a  Log Search rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. Resource not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledQueryRulesDeleteAsync(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduledQueryRulesDeleteValidateBeforeCall(resourceGroupName, ruleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduledQueryRulesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get a Log Search rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledQueryRulesGetCall(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduledQueryRulesGetValidateBeforeCall(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scheduledQueryRulesGet(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling scheduledQueryRulesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scheduledQueryRulesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scheduledQueryRulesGet(Async)");
        }

        return scheduledQueryRulesGetCall(resourceGroupName, ruleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets an Log Search rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @return LogSearchRuleResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get a Log Search rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LogSearchRuleResource scheduledQueryRulesGet(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<LogSearchRuleResource> localVarResp = scheduledQueryRulesGetWithHttpInfo(resourceGroupName, ruleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an Log Search rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @return ApiResponse&lt;LogSearchRuleResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get a Log Search rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogSearchRuleResource> scheduledQueryRulesGetWithHttpInfo(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = scheduledQueryRulesGetValidateBeforeCall(resourceGroupName, ruleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<LogSearchRuleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an Log Search rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get a Log Search rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledQueryRulesGetAsync(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback<LogSearchRuleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduledQueryRulesGetValidateBeforeCall(resourceGroupName, ruleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<LogSearchRuleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduledQueryRulesListByResourceGroup
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param $filter The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledQueryRulesListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduledQueryRulesListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scheduledQueryRulesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scheduledQueryRulesListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scheduledQueryRulesListByResourceGroup(Async)");
        }

        return scheduledQueryRulesListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * List the Log Search rules within a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param $filter The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx (optional)
     * @return LogSearchRuleResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LogSearchRuleResourceCollection scheduledQueryRulesListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<LogSearchRuleResourceCollection> localVarResp = scheduledQueryRulesListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * List the Log Search rules within a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param $filter The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx (optional)
     * @return ApiResponse&lt;LogSearchRuleResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogSearchRuleResourceCollection> scheduledQueryRulesListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = scheduledQueryRulesListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<LogSearchRuleResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the Log Search rules within a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param $filter The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledQueryRulesListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, final ApiCallback<LogSearchRuleResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduledQueryRulesListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<LogSearchRuleResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduledQueryRulesListBySubscription
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param $filter The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledQueryRulesListBySubscriptionCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/microsoft.insights/scheduledQueryRules"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduledQueryRulesListBySubscriptionValidateBeforeCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scheduledQueryRulesListBySubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scheduledQueryRulesListBySubscription(Async)");
        }

        return scheduledQueryRulesListBySubscriptionCall(apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * List the Log Search rules within a subscription group.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param $filter The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx (optional)
     * @return LogSearchRuleResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LogSearchRuleResourceCollection scheduledQueryRulesListBySubscription(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<LogSearchRuleResourceCollection> localVarResp = scheduledQueryRulesListBySubscriptionWithHttpInfo(apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * List the Log Search rules within a subscription group.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param $filter The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx (optional)
     * @return ApiResponse&lt;LogSearchRuleResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogSearchRuleResourceCollection> scheduledQueryRulesListBySubscriptionWithHttpInfo(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = scheduledQueryRulesListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<LogSearchRuleResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the Log Search rules within a subscription group.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param $filter The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledQueryRulesListBySubscriptionAsync(String apiVersion, String subscriptionId, String $filter, final ApiCallback<LogSearchRuleResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduledQueryRulesListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<LogSearchRuleResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduledQueryRulesUpdate
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update an Log Search rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledQueryRulesUpdateCall(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, LogSearchRuleResourcePatch parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduledQueryRulesUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, LogSearchRuleResourcePatch parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scheduledQueryRulesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scheduledQueryRulesUpdate(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling scheduledQueryRulesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scheduledQueryRulesUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling scheduledQueryRulesUpdate(Async)");
        }

        return scheduledQueryRulesUpdateCall(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Update log search Rule.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to update. (required)
     * @return LogSearchRuleResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update an Log Search rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public LogSearchRuleResource scheduledQueryRulesUpdate(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, LogSearchRuleResourcePatch parameters) throws ApiException {
        ApiResponse<LogSearchRuleResource> localVarResp = scheduledQueryRulesUpdateWithHttpInfo(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update log search Rule.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to update. (required)
     * @return ApiResponse&lt;LogSearchRuleResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update an Log Search rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogSearchRuleResource> scheduledQueryRulesUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, LogSearchRuleResourcePatch parameters) throws ApiException {
        okhttp3.Call localVarCall = scheduledQueryRulesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<LogSearchRuleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update log search Rule.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update an Log Search rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduledQueryRulesUpdateAsync(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, LogSearchRuleResourcePatch parameters, final ApiCallback<LogSearchRuleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduledQueryRulesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<LogSearchRuleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
