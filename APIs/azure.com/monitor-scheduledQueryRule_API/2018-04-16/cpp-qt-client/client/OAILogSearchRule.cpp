/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogSearchRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogSearchRule::OAILogSearchRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogSearchRule::OAILogSearchRule() {
    this->initializeModel();
}

OAILogSearchRule::~OAILogSearchRule() {}

void OAILogSearchRule::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAILogSearchRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogSearchRule::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAILogSearchRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogSearchRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

OAIAction OAILogSearchRule::getAction() const {
    return m_action;
}
void OAILogSearchRule::setAction(const OAIAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAILogSearchRule::is_action_Set() const{
    return m_action_isSet;
}

bool OAILogSearchRule::is_action_Valid() const{
    return m_action_isValid;
}

QString OAILogSearchRule::getDescription() const {
    return m_description;
}
void OAILogSearchRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILogSearchRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAILogSearchRule::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILogSearchRule::getEnabled() const {
    return m_enabled;
}
void OAILogSearchRule::setEnabled(const QString &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAILogSearchRule::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAILogSearchRule::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QDateTime OAILogSearchRule::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAILogSearchRule::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAILogSearchRule::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAILogSearchRule::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAILogSearchRule::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILogSearchRule::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILogSearchRule::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILogSearchRule::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAISchedule OAILogSearchRule::getSchedule() const {
    return m_schedule;
}
void OAILogSearchRule::setSchedule(const OAISchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAILogSearchRule::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAILogSearchRule::is_schedule_Valid() const{
    return m_schedule_isValid;
}

OAISource OAILogSearchRule::getSource() const {
    return m_source;
}
void OAILogSearchRule::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAILogSearchRule::is_source_Set() const{
    return m_source_isSet;
}

bool OAILogSearchRule::is_source_Valid() const{
    return m_source_isValid;
}

bool OAILogSearchRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogSearchRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
