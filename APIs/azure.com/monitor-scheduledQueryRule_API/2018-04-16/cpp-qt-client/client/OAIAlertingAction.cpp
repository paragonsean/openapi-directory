/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertingAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertingAction::OAIAlertingAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertingAction::OAIAlertingAction() {
    this->initializeModel();
}

OAIAlertingAction::~OAIAlertingAction() {}

void OAIAlertingAction::initializeModel() {

    m_azns_action_isSet = false;
    m_azns_action_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_throttling_in_min_isSet = false;
    m_throttling_in_min_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;
}

void OAIAlertingAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertingAction::fromJsonObject(QJsonObject json) {

    m_azns_action_isValid = ::OpenAPI::fromJsonValue(m_azns_action, json[QString("aznsAction")]);
    m_azns_action_isSet = !json[QString("aznsAction")].isNull() && m_azns_action_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_throttling_in_min_isValid = ::OpenAPI::fromJsonValue(m_throttling_in_min, json[QString("throttlingInMin")]);
    m_throttling_in_min_isSet = !json[QString("throttlingInMin")].isNull() && m_throttling_in_min_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("odata.type")]);
    m_odata_type_isSet = !json[QString("odata.type")].isNull() && m_odata_type_isValid;
}

QString OAIAlertingAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertingAction::asJsonObject() const {
    QJsonObject obj;
    if (m_azns_action.isSet()) {
        obj.insert(QString("aznsAction"), ::OpenAPI::toJsonValue(m_azns_action));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_throttling_in_min_isSet) {
        obj.insert(QString("throttlingInMin"), ::OpenAPI::toJsonValue(m_throttling_in_min));
    }
    if (m_trigger.isSet()) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    return obj;
}

OAIAzNsActionGroup OAIAlertingAction::getAznsAction() const {
    return m_azns_action;
}
void OAIAlertingAction::setAznsAction(const OAIAzNsActionGroup &azns_action) {
    m_azns_action = azns_action;
    m_azns_action_isSet = true;
}

bool OAIAlertingAction::is_azns_action_Set() const{
    return m_azns_action_isSet;
}

bool OAIAlertingAction::is_azns_action_Valid() const{
    return m_azns_action_isValid;
}

OAIAlertSeverity OAIAlertingAction::getSeverity() const {
    return m_severity;
}
void OAIAlertingAction::setSeverity(const OAIAlertSeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIAlertingAction::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIAlertingAction::is_severity_Valid() const{
    return m_severity_isValid;
}

qint32 OAIAlertingAction::getThrottlingInMin() const {
    return m_throttling_in_min;
}
void OAIAlertingAction::setThrottlingInMin(const qint32 &throttling_in_min) {
    m_throttling_in_min = throttling_in_min;
    m_throttling_in_min_isSet = true;
}

bool OAIAlertingAction::is_throttling_in_min_Set() const{
    return m_throttling_in_min_isSet;
}

bool OAIAlertingAction::is_throttling_in_min_Valid() const{
    return m_throttling_in_min_isValid;
}

OAITriggerCondition OAIAlertingAction::getTrigger() const {
    return m_trigger;
}
void OAIAlertingAction::setTrigger(const OAITriggerCondition &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIAlertingAction::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIAlertingAction::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QString OAIAlertingAction::getOdataType() const {
    return m_odata_type;
}
void OAIAlertingAction::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIAlertingAction::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIAlertingAction::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

bool OAIAlertingAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azns_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttling_in_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertingAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_severity_isValid && m_trigger_isValid && m_odata_type_isValid && true;
}

} // namespace OpenAPI
