/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource::OAISource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource::OAISource() {
    this->initializeModel();
}

OAISource::~OAISource() {}

void OAISource::initializeModel() {

    m_authorized_resources_isSet = false;
    m_authorized_resources_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_query_type_isSet = false;
    m_query_type_isValid = false;
}

void OAISource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource::fromJsonObject(QJsonObject json) {

    m_authorized_resources_isValid = ::OpenAPI::fromJsonValue(m_authorized_resources, json[QString("authorizedResources")]);
    m_authorized_resources_isSet = !json[QString("authorizedResources")].isNull() && m_authorized_resources_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("dataSourceId")]);
    m_data_source_id_isSet = !json[QString("dataSourceId")].isNull() && m_data_source_id_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_query_type_isValid = ::OpenAPI::fromJsonValue(m_query_type, json[QString("queryType")]);
    m_query_type_isSet = !json[QString("queryType")].isNull() && m_query_type_isValid;
}

QString OAISource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource::asJsonObject() const {
    QJsonObject obj;
    if (m_authorized_resources.size() > 0) {
        obj.insert(QString("authorizedResources"), ::OpenAPI::toJsonValue(m_authorized_resources));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("dataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_query_type.isSet()) {
        obj.insert(QString("queryType"), ::OpenAPI::toJsonValue(m_query_type));
    }
    return obj;
}

QList<QString> OAISource::getAuthorizedResources() const {
    return m_authorized_resources;
}
void OAISource::setAuthorizedResources(const QList<QString> &authorized_resources) {
    m_authorized_resources = authorized_resources;
    m_authorized_resources_isSet = true;
}

bool OAISource::is_authorized_resources_Set() const{
    return m_authorized_resources_isSet;
}

bool OAISource::is_authorized_resources_Valid() const{
    return m_authorized_resources_isValid;
}

QString OAISource::getDataSourceId() const {
    return m_data_source_id;
}
void OAISource::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAISource::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAISource::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QString OAISource::getQuery() const {
    return m_query;
}
void OAISource::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISource::is_query_Set() const{
    return m_query_isSet;
}

bool OAISource::is_query_Valid() const{
    return m_query_isValid;
}

OAIQueryType OAISource::getQueryType() const {
    return m_query_type;
}
void OAISource::setQueryType(const OAIQueryType &query_type) {
    m_query_type = query_type;
    m_query_type_isSet = true;
}

bool OAISource::is_query_type_Set() const{
    return m_query_type_isSet;
}

bool OAISource::is_query_type_Valid() const{
    return m_query_type_isValid;
}

bool OAISource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorized_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_id_isValid && true;
}

} // namespace OpenAPI
