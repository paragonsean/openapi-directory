/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITriggerCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITriggerCondition::OAITriggerCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITriggerCondition::OAITriggerCondition() {
    this->initializeModel();
}

OAITriggerCondition::~OAITriggerCondition() {}

void OAITriggerCondition::initializeModel() {

    m_metric_trigger_isSet = false;
    m_metric_trigger_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_threshold_operator_isSet = false;
    m_threshold_operator_isValid = false;
}

void OAITriggerCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITriggerCondition::fromJsonObject(QJsonObject json) {

    m_metric_trigger_isValid = ::OpenAPI::fromJsonValue(m_metric_trigger, json[QString("metricTrigger")]);
    m_metric_trigger_isSet = !json[QString("metricTrigger")].isNull() && m_metric_trigger_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;

    m_threshold_operator_isValid = ::OpenAPI::fromJsonValue(m_threshold_operator, json[QString("thresholdOperator")]);
    m_threshold_operator_isSet = !json[QString("thresholdOperator")].isNull() && m_threshold_operator_isValid;
}

QString OAITriggerCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITriggerCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_trigger.isSet()) {
        obj.insert(QString("metricTrigger"), ::OpenAPI::toJsonValue(m_metric_trigger));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_threshold_operator.isSet()) {
        obj.insert(QString("thresholdOperator"), ::OpenAPI::toJsonValue(m_threshold_operator));
    }
    return obj;
}

OAILogMetricTrigger OAITriggerCondition::getMetricTrigger() const {
    return m_metric_trigger;
}
void OAITriggerCondition::setMetricTrigger(const OAILogMetricTrigger &metric_trigger) {
    m_metric_trigger = metric_trigger;
    m_metric_trigger_isSet = true;
}

bool OAITriggerCondition::is_metric_trigger_Set() const{
    return m_metric_trigger_isSet;
}

bool OAITriggerCondition::is_metric_trigger_Valid() const{
    return m_metric_trigger_isValid;
}

double OAITriggerCondition::getThreshold() const {
    return m_threshold;
}
void OAITriggerCondition::setThreshold(const double &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAITriggerCondition::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAITriggerCondition::is_threshold_Valid() const{
    return m_threshold_isValid;
}

OAIConditionalOperator OAITriggerCondition::getThresholdOperator() const {
    return m_threshold_operator;
}
void OAITriggerCondition::setThresholdOperator(const OAIConditionalOperator &threshold_operator) {
    m_threshold_operator = threshold_operator;
    m_threshold_operator_isSet = true;
}

bool OAITriggerCondition::is_threshold_operator_Set() const{
    return m_threshold_operator_isSet;
}

bool OAITriggerCondition::is_threshold_operator_Valid() const{
    return m_threshold_operator_isValid;
}

bool OAITriggerCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITriggerCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_threshold_isValid && m_threshold_operator_isValid && true;
}

} // namespace OpenAPI
