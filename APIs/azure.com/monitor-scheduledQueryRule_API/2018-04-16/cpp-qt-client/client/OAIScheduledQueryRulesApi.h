/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScheduledQueryRulesApi_H
#define OAI_OAIScheduledQueryRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAILogSearchRuleResource.h"
#include "OAILogSearchRuleResourceCollection.h"
#include "OAILogSearchRuleResourcePatch.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScheduledQueryRulesApi : public QObject {
    Q_OBJECT

public:
    OAIScheduledQueryRulesApi(const int timeOut = 0);
    ~OAIScheduledQueryRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAILogSearchRuleResource [required]
    */
    virtual void scheduledQueryRulesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &rule_name, const QString &api_version, const OAILogSearchRuleResource &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void scheduledQueryRulesDelete(const QString &resource_group_name, const QString &rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void scheduledQueryRulesGet(const QString &resource_group_name, const QString &rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void scheduledQueryRulesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void scheduledQueryRulesListBySubscription(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAILogSearchRuleResourcePatch [required]
    */
    virtual void scheduledQueryRulesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &rule_name, const QString &api_version, const OAILogSearchRuleResourcePatch &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void scheduledQueryRulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void scheduledQueryRulesDeleteCallback(OAIHttpRequestWorker *worker);
    void scheduledQueryRulesGetCallback(OAIHttpRequestWorker *worker);
    void scheduledQueryRulesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void scheduledQueryRulesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void scheduledQueryRulesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void scheduledQueryRulesCreateOrUpdateSignal(OAILogSearchRuleResource summary);
    void scheduledQueryRulesDeleteSignal();
    void scheduledQueryRulesGetSignal(OAILogSearchRuleResource summary);
    void scheduledQueryRulesListByResourceGroupSignal(OAILogSearchRuleResourceCollection summary);
    void scheduledQueryRulesListBySubscriptionSignal(OAILogSearchRuleResourceCollection summary);
    void scheduledQueryRulesUpdateSignal(OAILogSearchRuleResource summary);


    void scheduledQueryRulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAILogSearchRuleResource summary);
    void scheduledQueryRulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void scheduledQueryRulesGetSignalFull(OAIHttpRequestWorker *worker, OAILogSearchRuleResource summary);
    void scheduledQueryRulesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAILogSearchRuleResourceCollection summary);
    void scheduledQueryRulesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAILogSearchRuleResourceCollection summary);
    void scheduledQueryRulesUpdateSignalFull(OAIHttpRequestWorker *worker, OAILogSearchRuleResource summary);

    Q_DECL_DEPRECATED_X("Use scheduledQueryRulesCreateOrUpdateSignalError() instead")
    void scheduledQueryRulesCreateOrUpdateSignalE(OAILogSearchRuleResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduledQueryRulesCreateOrUpdateSignalError(OAILogSearchRuleResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduledQueryRulesDeleteSignalError() instead")
    void scheduledQueryRulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scheduledQueryRulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduledQueryRulesGetSignalError() instead")
    void scheduledQueryRulesGetSignalE(OAILogSearchRuleResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduledQueryRulesGetSignalError(OAILogSearchRuleResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduledQueryRulesListByResourceGroupSignalError() instead")
    void scheduledQueryRulesListByResourceGroupSignalE(OAILogSearchRuleResourceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduledQueryRulesListByResourceGroupSignalError(OAILogSearchRuleResourceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduledQueryRulesListBySubscriptionSignalError() instead")
    void scheduledQueryRulesListBySubscriptionSignalE(OAILogSearchRuleResourceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduledQueryRulesListBySubscriptionSignalError(OAILogSearchRuleResourceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduledQueryRulesUpdateSignalError() instead")
    void scheduledQueryRulesUpdateSignalE(OAILogSearchRuleResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduledQueryRulesUpdateSignalError(OAILogSearchRuleResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use scheduledQueryRulesCreateOrUpdateSignalErrorFull() instead")
    void scheduledQueryRulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduledQueryRulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduledQueryRulesDeleteSignalErrorFull() instead")
    void scheduledQueryRulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduledQueryRulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduledQueryRulesGetSignalErrorFull() instead")
    void scheduledQueryRulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduledQueryRulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduledQueryRulesListByResourceGroupSignalErrorFull() instead")
    void scheduledQueryRulesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduledQueryRulesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduledQueryRulesListBySubscriptionSignalErrorFull() instead")
    void scheduledQueryRulesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduledQueryRulesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduledQueryRulesUpdateSignalErrorFull() instead")
    void scheduledQueryRulesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduledQueryRulesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
