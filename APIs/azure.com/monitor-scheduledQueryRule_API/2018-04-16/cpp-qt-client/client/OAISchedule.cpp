/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedule::OAISchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedule::OAISchedule() {
    this->initializeModel();
}

OAISchedule::~OAISchedule() {}

void OAISchedule::initializeModel() {

    m_frequency_in_minutes_isSet = false;
    m_frequency_in_minutes_isValid = false;

    m_time_window_in_minutes_isSet = false;
    m_time_window_in_minutes_isValid = false;
}

void OAISchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedule::fromJsonObject(QJsonObject json) {

    m_frequency_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_frequency_in_minutes, json[QString("frequencyInMinutes")]);
    m_frequency_in_minutes_isSet = !json[QString("frequencyInMinutes")].isNull() && m_frequency_in_minutes_isValid;

    m_time_window_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_time_window_in_minutes, json[QString("timeWindowInMinutes")]);
    m_time_window_in_minutes_isSet = !json[QString("timeWindowInMinutes")].isNull() && m_time_window_in_minutes_isValid;
}

QString OAISchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_frequency_in_minutes_isSet) {
        obj.insert(QString("frequencyInMinutes"), ::OpenAPI::toJsonValue(m_frequency_in_minutes));
    }
    if (m_time_window_in_minutes_isSet) {
        obj.insert(QString("timeWindowInMinutes"), ::OpenAPI::toJsonValue(m_time_window_in_minutes));
    }
    return obj;
}

qint32 OAISchedule::getFrequencyInMinutes() const {
    return m_frequency_in_minutes;
}
void OAISchedule::setFrequencyInMinutes(const qint32 &frequency_in_minutes) {
    m_frequency_in_minutes = frequency_in_minutes;
    m_frequency_in_minutes_isSet = true;
}

bool OAISchedule::is_frequency_in_minutes_Set() const{
    return m_frequency_in_minutes_isSet;
}

bool OAISchedule::is_frequency_in_minutes_Valid() const{
    return m_frequency_in_minutes_isValid;
}

qint32 OAISchedule::getTimeWindowInMinutes() const {
    return m_time_window_in_minutes;
}
void OAISchedule::setTimeWindowInMinutes(const qint32 &time_window_in_minutes) {
    m_time_window_in_minutes = time_window_in_minutes;
    m_time_window_in_minutes_isSet = true;
}

bool OAISchedule::is_time_window_in_minutes_Set() const{
    return m_time_window_in_minutes_isSet;
}

bool OAISchedule::is_time_window_in_minutes_Valid() const{
    return m_time_window_in_minutes_isValid;
}

bool OAISchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frequency_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_window_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_frequency_in_minutes_isValid && m_time_window_in_minutes_isValid && true;
}

} // namespace OpenAPI
