/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogMetricTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogMetricTrigger::OAILogMetricTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogMetricTrigger::OAILogMetricTrigger() {
    this->initializeModel();
}

OAILogMetricTrigger::~OAILogMetricTrigger() {}

void OAILogMetricTrigger::initializeModel() {

    m_metric_column_isSet = false;
    m_metric_column_isValid = false;

    m_metric_trigger_type_isSet = false;
    m_metric_trigger_type_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_threshold_operator_isSet = false;
    m_threshold_operator_isValid = false;
}

void OAILogMetricTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogMetricTrigger::fromJsonObject(QJsonObject json) {

    m_metric_column_isValid = ::OpenAPI::fromJsonValue(m_metric_column, json[QString("metricColumn")]);
    m_metric_column_isSet = !json[QString("metricColumn")].isNull() && m_metric_column_isValid;

    m_metric_trigger_type_isValid = ::OpenAPI::fromJsonValue(m_metric_trigger_type, json[QString("metricTriggerType")]);
    m_metric_trigger_type_isSet = !json[QString("metricTriggerType")].isNull() && m_metric_trigger_type_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;

    m_threshold_operator_isValid = ::OpenAPI::fromJsonValue(m_threshold_operator, json[QString("thresholdOperator")]);
    m_threshold_operator_isSet = !json[QString("thresholdOperator")].isNull() && m_threshold_operator_isValid;
}

QString OAILogMetricTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogMetricTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_column_isSet) {
        obj.insert(QString("metricColumn"), ::OpenAPI::toJsonValue(m_metric_column));
    }
    if (m_metric_trigger_type.isSet()) {
        obj.insert(QString("metricTriggerType"), ::OpenAPI::toJsonValue(m_metric_trigger_type));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_threshold_operator.isSet()) {
        obj.insert(QString("thresholdOperator"), ::OpenAPI::toJsonValue(m_threshold_operator));
    }
    return obj;
}

QString OAILogMetricTrigger::getMetricColumn() const {
    return m_metric_column;
}
void OAILogMetricTrigger::setMetricColumn(const QString &metric_column) {
    m_metric_column = metric_column;
    m_metric_column_isSet = true;
}

bool OAILogMetricTrigger::is_metric_column_Set() const{
    return m_metric_column_isSet;
}

bool OAILogMetricTrigger::is_metric_column_Valid() const{
    return m_metric_column_isValid;
}

OAIMetricTriggerType OAILogMetricTrigger::getMetricTriggerType() const {
    return m_metric_trigger_type;
}
void OAILogMetricTrigger::setMetricTriggerType(const OAIMetricTriggerType &metric_trigger_type) {
    m_metric_trigger_type = metric_trigger_type;
    m_metric_trigger_type_isSet = true;
}

bool OAILogMetricTrigger::is_metric_trigger_type_Set() const{
    return m_metric_trigger_type_isSet;
}

bool OAILogMetricTrigger::is_metric_trigger_type_Valid() const{
    return m_metric_trigger_type_isValid;
}

double OAILogMetricTrigger::getThreshold() const {
    return m_threshold;
}
void OAILogMetricTrigger::setThreshold(const double &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAILogMetricTrigger::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAILogMetricTrigger::is_threshold_Valid() const{
    return m_threshold_isValid;
}

OAIConditionalOperator OAILogMetricTrigger::getThresholdOperator() const {
    return m_threshold_operator;
}
void OAILogMetricTrigger::setThresholdOperator(const OAIConditionalOperator &threshold_operator) {
    m_threshold_operator = threshold_operator;
    m_threshold_operator_isSet = true;
}

bool OAILogMetricTrigger::is_threshold_operator_Set() const{
    return m_threshold_operator_isSet;
}

bool OAILogMetricTrigger::is_threshold_operator_Valid() const{
    return m_threshold_operator_isValid;
}

bool OAILogMetricTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_trigger_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogMetricTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
