/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConditionalOperator from './ConditionalOperator';
import LogMetricTrigger from './LogMetricTrigger';

/**
 * The TriggerCondition model module.
 * @module model/TriggerCondition
 * @version 2018-04-16
 */
class TriggerCondition {
    /**
     * Constructs a new <code>TriggerCondition</code>.
     * The condition that results in the Log Search rule.
     * @alias module:model/TriggerCondition
     * @param threshold {Number} Result or count threshold based on which rule should be triggered.
     * @param thresholdOperator {module:model/ConditionalOperator} 
     */
    constructor(threshold, thresholdOperator) { 
        
        TriggerCondition.initialize(this, threshold, thresholdOperator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, threshold, thresholdOperator) { 
        obj['threshold'] = threshold;
        obj['thresholdOperator'] = thresholdOperator;
    }

    /**
     * Constructs a <code>TriggerCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TriggerCondition} obj Optional instance to populate.
     * @return {module:model/TriggerCondition} The populated <code>TriggerCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TriggerCondition();

            if (data.hasOwnProperty('metricTrigger')) {
                obj['metricTrigger'] = LogMetricTrigger.constructFromObject(data['metricTrigger']);
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
            if (data.hasOwnProperty('thresholdOperator')) {
                obj['thresholdOperator'] = ConditionalOperator.constructFromObject(data['thresholdOperator']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TriggerCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TriggerCondition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TriggerCondition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `metricTrigger`
        if (data['metricTrigger']) { // data not null
          LogMetricTrigger.validateJSON(data['metricTrigger']);
        }

        return true;
    }


}

TriggerCondition.RequiredProperties = ["threshold", "thresholdOperator"];

/**
 * @member {module:model/LogMetricTrigger} metricTrigger
 */
TriggerCondition.prototype['metricTrigger'] = undefined;

/**
 * Result or count threshold based on which rule should be triggered.
 * @member {Number} threshold
 */
TriggerCondition.prototype['threshold'] = undefined;

/**
 * @member {module:model/ConditionalOperator} thresholdOperator
 */
TriggerCondition.prototype['thresholdOperator'] = undefined;






export default TriggerCondition;

