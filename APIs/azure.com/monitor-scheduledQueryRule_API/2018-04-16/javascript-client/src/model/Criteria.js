/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';

/**
 * The Criteria model module.
 * @module model/Criteria
 * @version 2018-04-16
 */
class Criteria {
    /**
     * Constructs a new <code>Criteria</code>.
     * Specifies the criteria for converting log to metric.
     * @alias module:model/Criteria
     * @param metricName {String} Name of the metric
     */
    constructor(metricName) { 
        
        Criteria.initialize(this, metricName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metricName) { 
        obj['metricName'] = metricName;
    }

    /**
     * Constructs a <code>Criteria</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Criteria} obj Optional instance to populate.
     * @return {module:model/Criteria} The populated <code>Criteria</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Criteria();

            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [Dimension]);
            }
            if (data.hasOwnProperty('metricName')) {
                obj['metricName'] = ApiClient.convertToType(data['metricName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Criteria</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Criteria</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Criteria.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                Dimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['metricName'] && !(typeof data['metricName'] === 'string' || data['metricName'] instanceof String)) {
            throw new Error("Expected the field `metricName` to be a primitive type in the JSON string but got " + data['metricName']);
        }

        return true;
    }


}

Criteria.RequiredProperties = ["metricName"];

/**
 * List of Dimensions for creating metric
 * @member {Array.<module:model/Dimension>} dimensions
 */
Criteria.prototype['dimensions'] = undefined;

/**
 * Name of the metric
 * @member {String} metricName
 */
Criteria.prototype['metricName'] = undefined;






export default Criteria;

