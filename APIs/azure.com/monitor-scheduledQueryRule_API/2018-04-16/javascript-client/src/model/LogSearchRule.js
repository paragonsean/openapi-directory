/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Action from './Action';
import Schedule from './Schedule';
import Source from './Source';

/**
 * The LogSearchRule model module.
 * @module model/LogSearchRule
 * @version 2018-04-16
 */
class LogSearchRule {
    /**
     * Constructs a new <code>LogSearchRule</code>.
     * Log Search Rule Definition
     * @alias module:model/LogSearchRule
     * @param action {module:model/Action} 
     * @param source {module:model/Source} 
     */
    constructor(action, source) { 
        
        LogSearchRule.initialize(this, action, source);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, source) { 
        obj['action'] = action;
        obj['source'] = source;
    }

    /**
     * Constructs a <code>LogSearchRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogSearchRule} obj Optional instance to populate.
     * @return {module:model/LogSearchRule} The populated <code>LogSearchRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogSearchRule();

            if (data.hasOwnProperty('action')) {
                obj['action'] = Action.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'String');
            }
            if (data.hasOwnProperty('lastUpdatedTime')) {
                obj['lastUpdatedTime'] = ApiClient.convertToType(data['lastUpdatedTime'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = Schedule.constructFromObject(data['schedule']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogSearchRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogSearchRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogSearchRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `action`
        if (data['action']) { // data not null
          Action.validateJSON(data['action']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['enabled'] && !(typeof data['enabled'] === 'string' || data['enabled'] instanceof String)) {
            throw new Error("Expected the field `enabled` to be a primitive type in the JSON string but got " + data['enabled']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `schedule`
        if (data['schedule']) { // data not null
          Schedule.validateJSON(data['schedule']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Source.validateJSON(data['source']);
        }

        return true;
    }


}

LogSearchRule.RequiredProperties = ["action", "source"];

/**
 * @member {module:model/Action} action
 */
LogSearchRule.prototype['action'] = undefined;

/**
 * The description of the Log Search rule.
 * @member {String} description
 */
LogSearchRule.prototype['description'] = undefined;

/**
 * The flag which indicates whether the Log Search rule is enabled. Value should be true or false
 * @member {module:model/LogSearchRule.EnabledEnum} enabled
 */
LogSearchRule.prototype['enabled'] = undefined;

/**
 * Last time the rule was updated in IS08601 format.
 * @member {Date} lastUpdatedTime
 */
LogSearchRule.prototype['lastUpdatedTime'] = undefined;

/**
 * Provisioning state of the scheduled query rule
 * @member {module:model/LogSearchRule.ProvisioningStateEnum} provisioningState
 */
LogSearchRule.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/Schedule} schedule
 */
LogSearchRule.prototype['schedule'] = undefined;

/**
 * @member {module:model/Source} source
 */
LogSearchRule.prototype['source'] = undefined;





/**
 * Allowed values for the <code>enabled</code> property.
 * @enum {String}
 * @readonly
 */
LogSearchRule['EnabledEnum'] = {

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "false"
     * @const
     */
    "false": "false"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
LogSearchRule['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Deploying"
     * @const
     */
    "Deploying": "Deploying",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default LogSearchRule;

