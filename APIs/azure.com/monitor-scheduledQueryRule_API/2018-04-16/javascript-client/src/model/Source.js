/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryType from './QueryType';

/**
 * The Source model module.
 * @module model/Source
 * @version 2018-04-16
 */
class Source {
    /**
     * Constructs a new <code>Source</code>.
     * Specifies the log search query.
     * @alias module:model/Source
     * @param dataSourceId {String} The resource uri over which log search query is to be run.
     */
    constructor(dataSourceId) { 
        
        Source.initialize(this, dataSourceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataSourceId) { 
        obj['dataSourceId'] = dataSourceId;
    }

    /**
     * Constructs a <code>Source</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Source} obj Optional instance to populate.
     * @return {module:model/Source} The populated <code>Source</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Source();

            if (data.hasOwnProperty('authorizedResources')) {
                obj['authorizedResources'] = ApiClient.convertToType(data['authorizedResources'], ['String']);
            }
            if (data.hasOwnProperty('dataSourceId')) {
                obj['dataSourceId'] = ApiClient.convertToType(data['dataSourceId'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('queryType')) {
                obj['queryType'] = QueryType.constructFromObject(data['queryType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Source</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Source</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Source.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['authorizedResources'])) {
            throw new Error("Expected the field `authorizedResources` to be an array in the JSON data but got " + data['authorizedResources']);
        }
        // ensure the json data is a string
        if (data['dataSourceId'] && !(typeof data['dataSourceId'] === 'string' || data['dataSourceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceId` to be a primitive type in the JSON string but got " + data['dataSourceId']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }

        return true;
    }


}

Source.RequiredProperties = ["dataSourceId"];

/**
 * List of  Resource referred into query
 * @member {Array.<String>} authorizedResources
 */
Source.prototype['authorizedResources'] = undefined;

/**
 * The resource uri over which log search query is to be run.
 * @member {String} dataSourceId
 */
Source.prototype['dataSourceId'] = undefined;

/**
 * Log search query. Required for action type - AlertingAction
 * @member {String} query
 */
Source.prototype['query'] = undefined;

/**
 * @member {module:model/QueryType} queryType
 */
Source.prototype['queryType'] = undefined;






export default Source;

