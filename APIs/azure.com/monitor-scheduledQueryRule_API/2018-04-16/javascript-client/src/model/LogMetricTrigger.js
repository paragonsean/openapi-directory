/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConditionalOperator from './ConditionalOperator';
import MetricTriggerType from './MetricTriggerType';

/**
 * The LogMetricTrigger model module.
 * @module model/LogMetricTrigger
 * @version 2018-04-16
 */
class LogMetricTrigger {
    /**
     * Constructs a new <code>LogMetricTrigger</code>.
     * A log metrics trigger descriptor.
     * @alias module:model/LogMetricTrigger
     */
    constructor() { 
        
        LogMetricTrigger.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogMetricTrigger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogMetricTrigger} obj Optional instance to populate.
     * @return {module:model/LogMetricTrigger} The populated <code>LogMetricTrigger</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogMetricTrigger();

            if (data.hasOwnProperty('metricColumn')) {
                obj['metricColumn'] = ApiClient.convertToType(data['metricColumn'], 'String');
            }
            if (data.hasOwnProperty('metricTriggerType')) {
                obj['metricTriggerType'] = MetricTriggerType.constructFromObject(data['metricTriggerType']);
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
            if (data.hasOwnProperty('thresholdOperator')) {
                obj['thresholdOperator'] = ConditionalOperator.constructFromObject(data['thresholdOperator']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogMetricTrigger</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogMetricTrigger</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['metricColumn'] && !(typeof data['metricColumn'] === 'string' || data['metricColumn'] instanceof String)) {
            throw new Error("Expected the field `metricColumn` to be a primitive type in the JSON string but got " + data['metricColumn']);
        }

        return true;
    }


}



/**
 * Evaluation of metric on a particular column
 * @member {String} metricColumn
 */
LogMetricTrigger.prototype['metricColumn'] = undefined;

/**
 * @member {module:model/MetricTriggerType} metricTriggerType
 */
LogMetricTrigger.prototype['metricTriggerType'] = undefined;

/**
 * The threshold of the metric trigger.
 * @member {Number} threshold
 */
LogMetricTrigger.prototype['threshold'] = undefined;

/**
 * @member {module:model/ConditionalOperator} thresholdOperator
 */
LogMetricTrigger.prototype['thresholdOperator'] = undefined;






export default LogMetricTrigger;

