/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import LogSearchRuleResource from '../model/LogSearchRuleResource';
import LogSearchRuleResourceCollection from '../model/LogSearchRuleResourceCollection';
import LogSearchRuleResourcePatch from '../model/LogSearchRuleResourcePatch';

/**
* ScheduledQueryRules service.
* @module api/ScheduledQueryRulesApi
* @version 2018-04-16
*/
export default class ScheduledQueryRulesApi {

    /**
    * Constructs a new ScheduledQueryRulesApi. 
    * @alias module:api/ScheduledQueryRulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the scheduledQueryRulesCreateOrUpdate operation.
     * @callback module:api/ScheduledQueryRulesApi~scheduledQueryRulesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogSearchRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an log search rule.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} ruleName The name of the rule.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/LogSearchRuleResource} parameters The parameters of the rule to create or update.
     * @param {module:api/ScheduledQueryRulesApi~scheduledQueryRulesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogSearchRuleResource}
     */
    scheduledQueryRulesCreateOrUpdate(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling scheduledQueryRulesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling scheduledQueryRulesCreateOrUpdate");
      }
      // verify the required parameter 'ruleName' is set
      if (ruleName === undefined || ruleName === null) {
        throw new Error("Missing the required parameter 'ruleName' when calling scheduledQueryRulesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling scheduledQueryRulesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling scheduledQueryRulesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ruleName': ruleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogSearchRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduledQueryRulesDelete operation.
     * @callback module:api/ScheduledQueryRulesApi~scheduledQueryRulesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Log Search rule
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} ruleName The name of the rule.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {module:api/ScheduledQueryRulesApi~scheduledQueryRulesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scheduledQueryRulesDelete(resourceGroupName, ruleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling scheduledQueryRulesDelete");
      }
      // verify the required parameter 'ruleName' is set
      if (ruleName === undefined || ruleName === null) {
        throw new Error("Missing the required parameter 'ruleName' when calling scheduledQueryRulesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling scheduledQueryRulesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling scheduledQueryRulesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'ruleName': ruleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduledQueryRulesGet operation.
     * @callback module:api/ScheduledQueryRulesApi~scheduledQueryRulesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogSearchRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Log Search rule
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} ruleName The name of the rule.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {module:api/ScheduledQueryRulesApi~scheduledQueryRulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogSearchRuleResource}
     */
    scheduledQueryRulesGet(resourceGroupName, ruleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling scheduledQueryRulesGet");
      }
      // verify the required parameter 'ruleName' is set
      if (ruleName === undefined || ruleName === null) {
        throw new Error("Missing the required parameter 'ruleName' when calling scheduledQueryRulesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling scheduledQueryRulesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling scheduledQueryRulesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'ruleName': ruleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogSearchRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduledQueryRulesListByResourceGroup operation.
     * @callback module:api/ScheduledQueryRulesApi~scheduledQueryRulesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogSearchRuleResourceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the Log Search rules within a resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx
     * @param {module:api/ScheduledQueryRulesApi~scheduledQueryRulesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogSearchRuleResourceCollection}
     */
    scheduledQueryRulesListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling scheduledQueryRulesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling scheduledQueryRulesListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling scheduledQueryRulesListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogSearchRuleResourceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduledQueryRulesListBySubscription operation.
     * @callback module:api/ScheduledQueryRulesApi~scheduledQueryRulesListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogSearchRuleResourceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the Log Search rules within a subscription group.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. For more information please see https://msdn.microsoft.com/en-us/library/azure/dn931934.aspx
     * @param {module:api/ScheduledQueryRulesApi~scheduledQueryRulesListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogSearchRuleResourceCollection}
     */
    scheduledQueryRulesListBySubscription(apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling scheduledQueryRulesListBySubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling scheduledQueryRulesListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogSearchRuleResourceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/microsoft.insights/scheduledQueryRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduledQueryRulesUpdate operation.
     * @callback module:api/ScheduledQueryRulesApi~scheduledQueryRulesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogSearchRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update log search Rule.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} ruleName The name of the rule.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/LogSearchRuleResourcePatch} parameters The parameters of the rule to update.
     * @param {module:api/ScheduledQueryRulesApi~scheduledQueryRulesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogSearchRuleResource}
     */
    scheduledQueryRulesUpdate(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling scheduledQueryRulesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling scheduledQueryRulesUpdate");
      }
      // verify the required parameter 'ruleName' is set
      if (ruleName === undefined || ruleName === null) {
        throw new Error("Missing the required parameter 'ruleName' when calling scheduledQueryRulesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling scheduledQueryRulesUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling scheduledQueryRulesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ruleName': ruleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogSearchRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
