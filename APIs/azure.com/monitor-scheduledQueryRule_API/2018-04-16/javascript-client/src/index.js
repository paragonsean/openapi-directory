/**
 * Microsoft Insights
 * Azure Monitor client to create/update/delete Scheduled Query Rules
 *
 * The version of the OpenAPI document: 2018-04-16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Action from './model/Action';
import AlertSeverity from './model/AlertSeverity';
import AlertingAction from './model/AlertingAction';
import AzNsActionGroup from './model/AzNsActionGroup';
import ConditionalOperator from './model/ConditionalOperator';
import Criteria from './model/Criteria';
import Dimension from './model/Dimension';
import ErrorResponse from './model/ErrorResponse';
import LogMetricTrigger from './model/LogMetricTrigger';
import LogSearchRule from './model/LogSearchRule';
import LogSearchRulePatch from './model/LogSearchRulePatch';
import LogSearchRuleResource from './model/LogSearchRuleResource';
import LogSearchRuleResourceCollection from './model/LogSearchRuleResourceCollection';
import LogSearchRuleResourcePatch from './model/LogSearchRuleResourcePatch';
import LogToMetricAction from './model/LogToMetricAction';
import MetricTriggerType from './model/MetricTriggerType';
import QueryType from './model/QueryType';
import Resource from './model/Resource';
import Schedule from './model/Schedule';
import Source from './model/Source';
import TriggerCondition from './model/TriggerCondition';
import ScheduledQueryRulesApi from './api/ScheduledQueryRulesApi';


/**
* Azure Monitor client to create/update/delete Scheduled Query Rules.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var MicrosoftInsights = require('index'); // See note below*.
* var xxxSvc = new MicrosoftInsights.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new MicrosoftInsights.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new MicrosoftInsights.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new MicrosoftInsights.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2018-04-16
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Action model constructor.
     * @property {module:model/Action}
     */
    Action,

    /**
     * The AlertSeverity model constructor.
     * @property {module:model/AlertSeverity}
     */
    AlertSeverity,

    /**
     * The AlertingAction model constructor.
     * @property {module:model/AlertingAction}
     */
    AlertingAction,

    /**
     * The AzNsActionGroup model constructor.
     * @property {module:model/AzNsActionGroup}
     */
    AzNsActionGroup,

    /**
     * The ConditionalOperator model constructor.
     * @property {module:model/ConditionalOperator}
     */
    ConditionalOperator,

    /**
     * The Criteria model constructor.
     * @property {module:model/Criteria}
     */
    Criteria,

    /**
     * The Dimension model constructor.
     * @property {module:model/Dimension}
     */
    Dimension,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The LogMetricTrigger model constructor.
     * @property {module:model/LogMetricTrigger}
     */
    LogMetricTrigger,

    /**
     * The LogSearchRule model constructor.
     * @property {module:model/LogSearchRule}
     */
    LogSearchRule,

    /**
     * The LogSearchRulePatch model constructor.
     * @property {module:model/LogSearchRulePatch}
     */
    LogSearchRulePatch,

    /**
     * The LogSearchRuleResource model constructor.
     * @property {module:model/LogSearchRuleResource}
     */
    LogSearchRuleResource,

    /**
     * The LogSearchRuleResourceCollection model constructor.
     * @property {module:model/LogSearchRuleResourceCollection}
     */
    LogSearchRuleResourceCollection,

    /**
     * The LogSearchRuleResourcePatch model constructor.
     * @property {module:model/LogSearchRuleResourcePatch}
     */
    LogSearchRuleResourcePatch,

    /**
     * The LogToMetricAction model constructor.
     * @property {module:model/LogToMetricAction}
     */
    LogToMetricAction,

    /**
     * The MetricTriggerType model constructor.
     * @property {module:model/MetricTriggerType}
     */
    MetricTriggerType,

    /**
     * The QueryType model constructor.
     * @property {module:model/QueryType}
     */
    QueryType,

    /**
     * The Resource model constructor.
     * @property {module:model/Resource}
     */
    Resource,

    /**
     * The Schedule model constructor.
     * @property {module:model/Schedule}
     */
    Schedule,

    /**
     * The Source model constructor.
     * @property {module:model/Source}
     */
    Source,

    /**
     * The TriggerCondition model constructor.
     * @property {module:model/TriggerCondition}
     */
    TriggerCondition,

    /**
    * The ScheduledQueryRulesApi service constructor.
    * @property {module:api/ScheduledQueryRulesApi}
    */
    ScheduledQueryRulesApi
};
