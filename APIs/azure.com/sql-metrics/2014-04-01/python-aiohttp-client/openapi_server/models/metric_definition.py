# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_availability import MetricAvailability
from openapi_server.models.metric_name import MetricName
from openapi_server import util


class MetricDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_availabilities: List[MetricAvailability]=None, name: MetricName=None, primary_aggregation_type: str=None, resource_uri: str=None, unit: str=None):
        """MetricDefinition - a model defined in OpenAPI

        :param metric_availabilities: The metric_availabilities of this MetricDefinition.
        :param name: The name of this MetricDefinition.
        :param primary_aggregation_type: The primary_aggregation_type of this MetricDefinition.
        :param resource_uri: The resource_uri of this MetricDefinition.
        :param unit: The unit of this MetricDefinition.
        """
        self.openapi_types = {
            'metric_availabilities': List[MetricAvailability],
            'name': MetricName,
            'primary_aggregation_type': str,
            'resource_uri': str,
            'unit': str
        }

        self.attribute_map = {
            'metric_availabilities': 'metricAvailabilities',
            'name': 'name',
            'primary_aggregation_type': 'primaryAggregationType',
            'resource_uri': 'resourceUri',
            'unit': 'unit'
        }

        self._metric_availabilities = metric_availabilities
        self._name = name
        self._primary_aggregation_type = primary_aggregation_type
        self._resource_uri = resource_uri
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricDefinition of this MetricDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_availabilities(self):
        """Gets the metric_availabilities of this MetricDefinition.

        The list of database metric availabilities for the metric.

        :return: The metric_availabilities of this MetricDefinition.
        :rtype: List[MetricAvailability]
        """
        return self._metric_availabilities

    @metric_availabilities.setter
    def metric_availabilities(self, metric_availabilities):
        """Sets the metric_availabilities of this MetricDefinition.

        The list of database metric availabilities for the metric.

        :param metric_availabilities: The metric_availabilities of this MetricDefinition.
        :type metric_availabilities: List[MetricAvailability]
        """

        self._metric_availabilities = metric_availabilities

    @property
    def name(self):
        """Gets the name of this MetricDefinition.


        :return: The name of this MetricDefinition.
        :rtype: MetricName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricDefinition.


        :param name: The name of this MetricDefinition.
        :type name: MetricName
        """

        self._name = name

    @property
    def primary_aggregation_type(self):
        """Gets the primary_aggregation_type of this MetricDefinition.

        The primary aggregation type defining how metric values are displayed.

        :return: The primary_aggregation_type of this MetricDefinition.
        :rtype: str
        """
        return self._primary_aggregation_type

    @primary_aggregation_type.setter
    def primary_aggregation_type(self, primary_aggregation_type):
        """Sets the primary_aggregation_type of this MetricDefinition.

        The primary aggregation type defining how metric values are displayed.

        :param primary_aggregation_type: The primary_aggregation_type of this MetricDefinition.
        :type primary_aggregation_type: str
        """
        allowed_values = ["None", "Average", "Count", "Minimum", "Maximum", "Total"]  # noqa: E501
        if primary_aggregation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `primary_aggregation_type` ({0}), must be one of {1}"
                .format(primary_aggregation_type, allowed_values)
            )

        self._primary_aggregation_type = primary_aggregation_type

    @property
    def resource_uri(self):
        """Gets the resource_uri of this MetricDefinition.

        The resource uri of the database.

        :return: The resource_uri of this MetricDefinition.
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this MetricDefinition.

        The resource uri of the database.

        :param resource_uri: The resource_uri of this MetricDefinition.
        :type resource_uri: str
        """

        self._resource_uri = resource_uri

    @property
    def unit(self):
        """Gets the unit of this MetricDefinition.

        The unit of the metric.

        :return: The unit of this MetricDefinition.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this MetricDefinition.

        The unit of the metric.

        :param unit: The unit of this MetricDefinition.
        :type unit: str
        """
        allowed_values = ["Count", "Bytes", "Seconds", "Percent", "CountPerSecond", "BytesPerSecond"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
