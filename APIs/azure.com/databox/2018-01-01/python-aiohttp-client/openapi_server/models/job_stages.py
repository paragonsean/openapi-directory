# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_error_details import JobErrorDetails
from openapi_server import util


class JobStages(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, error_details: List[JobErrorDetails]=None, job_stage_details: object=None, stage_name: str=None, stage_status: str=None, stage_time: datetime=None):
        """JobStages - a model defined in OpenAPI

        :param display_name: The display_name of this JobStages.
        :param error_details: The error_details of this JobStages.
        :param job_stage_details: The job_stage_details of this JobStages.
        :param stage_name: The stage_name of this JobStages.
        :param stage_status: The stage_status of this JobStages.
        :param stage_time: The stage_time of this JobStages.
        """
        self.openapi_types = {
            'display_name': str,
            'error_details': List[JobErrorDetails],
            'job_stage_details': object,
            'stage_name': str,
            'stage_status': str,
            'stage_time': datetime
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'error_details': 'errorDetails',
            'job_stage_details': 'jobStageDetails',
            'stage_name': 'stageName',
            'stage_status': 'stageStatus',
            'stage_time': 'stageTime'
        }

        self._display_name = display_name
        self._error_details = error_details
        self._job_stage_details = job_stage_details
        self._stage_name = stage_name
        self._stage_status = stage_status
        self._stage_time = stage_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStages':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStages of this JobStages.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this JobStages.

        Display name of the job stage.

        :return: The display_name of this JobStages.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this JobStages.

        Display name of the job stage.

        :param display_name: The display_name of this JobStages.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def error_details(self):
        """Gets the error_details of this JobStages.

        Error details for the stage.

        :return: The error_details of this JobStages.
        :rtype: List[JobErrorDetails]
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this JobStages.

        Error details for the stage.

        :param error_details: The error_details of this JobStages.
        :type error_details: List[JobErrorDetails]
        """

        self._error_details = error_details

    @property
    def job_stage_details(self):
        """Gets the job_stage_details of this JobStages.

        Job Stage Details

        :return: The job_stage_details of this JobStages.
        :rtype: object
        """
        return self._job_stage_details

    @job_stage_details.setter
    def job_stage_details(self, job_stage_details):
        """Sets the job_stage_details of this JobStages.

        Job Stage Details

        :param job_stage_details: The job_stage_details of this JobStages.
        :type job_stage_details: object
        """

        self._job_stage_details = job_stage_details

    @property
    def stage_name(self):
        """Gets the stage_name of this JobStages.

        Name of the job stage.

        :return: The stage_name of this JobStages.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name):
        """Sets the stage_name of this JobStages.

        Name of the job stage.

        :param stage_name: The stage_name of this JobStages.
        :type stage_name: str
        """
        allowed_values = ["DeviceOrdered", "DevicePrepared", "Dispatched", "Delivered", "PickedUp", "AtAzureDC", "DataCopy", "Completed", "CompletedWithErrors", "Cancelled", "Failed_IssueReportedAtCustomer", "Failed_IssueDetectedAtAzureDC", "Aborted"]  # noqa: E501
        if stage_name not in allowed_values:
            raise ValueError(
                "Invalid value for `stage_name` ({0}), must be one of {1}"
                .format(stage_name, allowed_values)
            )

        self._stage_name = stage_name

    @property
    def stage_status(self):
        """Gets the stage_status of this JobStages.

        Status of the job stage.

        :return: The stage_status of this JobStages.
        :rtype: str
        """
        return self._stage_status

    @stage_status.setter
    def stage_status(self, stage_status):
        """Sets the stage_status of this JobStages.

        Status of the job stage.

        :param stage_status: The stage_status of this JobStages.
        :type stage_status: str
        """
        allowed_values = ["None", "InProgress", "Succeeded", "Failed", "Cancelled", "Cancelling", "SucceededWithErrors"]  # noqa: E501
        if stage_status not in allowed_values:
            raise ValueError(
                "Invalid value for `stage_status` ({0}), must be one of {1}"
                .format(stage_status, allowed_values)
            )

        self._stage_status = stage_status

    @property
    def stage_time(self):
        """Gets the stage_time of this JobStages.

        Time for the job stage in UTC ISO 8601 format.

        :return: The stage_time of this JobStages.
        :rtype: datetime
        """
        return self._stage_time

    @stage_time.setter
    def stage_time(self, stage_time):
        """Sets the stage_time of this JobStages.

        Time for the job stage in UTC ISO 8601 format.

        :param stage_time: The stage_time of this JobStages.
        :type stage_time: datetime
        """

        self._stage_time = stage_time
