# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_account_details import DestinationAccountDetails
from openapi_server import util


class DestinationStorageAccountDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, storage_account_id: str=None, account_id: str=None, data_destination_type: str=None):
        """DestinationStorageAccountDetails - a model defined in OpenAPI

        :param storage_account_id: The storage_account_id of this DestinationStorageAccountDetails.
        :param account_id: The account_id of this DestinationStorageAccountDetails.
        :param data_destination_type: The data_destination_type of this DestinationStorageAccountDetails.
        """
        self.openapi_types = {
            'storage_account_id': str,
            'account_id': str,
            'data_destination_type': str
        }

        self.attribute_map = {
            'storage_account_id': 'storageAccountId',
            'account_id': 'accountId',
            'data_destination_type': 'dataDestinationType'
        }

        self._storage_account_id = storage_account_id
        self._account_id = account_id
        self._data_destination_type = data_destination_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationStorageAccountDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationStorageAccountDetails of this DestinationStorageAccountDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def storage_account_id(self):
        """Gets the storage_account_id of this DestinationStorageAccountDetails.

        Destination Storage Account Arm Id.

        :return: The storage_account_id of this DestinationStorageAccountDetails.
        :rtype: str
        """
        return self._storage_account_id

    @storage_account_id.setter
    def storage_account_id(self, storage_account_id):
        """Sets the storage_account_id of this DestinationStorageAccountDetails.

        Destination Storage Account Arm Id.

        :param storage_account_id: The storage_account_id of this DestinationStorageAccountDetails.
        :type storage_account_id: str
        """
        if storage_account_id is None:
            raise ValueError("Invalid value for `storage_account_id`, must not be `None`")

        self._storage_account_id = storage_account_id

    @property
    def account_id(self):
        """Gets the account_id of this DestinationStorageAccountDetails.

        Arm Id of the destination where the data has to be moved.

        :return: The account_id of this DestinationStorageAccountDetails.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DestinationStorageAccountDetails.

        Arm Id of the destination where the data has to be moved.

        :param account_id: The account_id of this DestinationStorageAccountDetails.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def data_destination_type(self):
        """Gets the data_destination_type of this DestinationStorageAccountDetails.

        Data Destination Type.

        :return: The data_destination_type of this DestinationStorageAccountDetails.
        :rtype: str
        """
        return self._data_destination_type

    @data_destination_type.setter
    def data_destination_type(self, data_destination_type):
        """Sets the data_destination_type of this DestinationStorageAccountDetails.

        Data Destination Type.

        :param data_destination_type: The data_destination_type of this DestinationStorageAccountDetails.
        :type data_destination_type: str
        """
        allowed_values = ["UnknownType", "StorageAccount", "ManagedDisk"]  # noqa: E501
        if data_destination_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_destination_type` ({0}), must be one of {1}"
                .format(data_destination_type, allowed_values)
            )

        self._data_destination_type = data_destination_type
