# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_to_service_location_map import DestinationToServiceLocationMap
from openapi_server.models.sku_capacity import SkuCapacity
from openapi_server.models.sku_cost import SkuCost
from openapi_server import util


class SkuProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_versions: List[str]=None, capacity: SkuCapacity=None, costs: List[SkuCost]=None, destination_to_service_location_map: List[DestinationToServiceLocationMap]=None, disabled_reason: str=None, disabled_reason_message: str=None, required_feature: str=None):
        """SkuProperties - a model defined in OpenAPI

        :param api_versions: The api_versions of this SkuProperties.
        :param capacity: The capacity of this SkuProperties.
        :param costs: The costs of this SkuProperties.
        :param destination_to_service_location_map: The destination_to_service_location_map of this SkuProperties.
        :param disabled_reason: The disabled_reason of this SkuProperties.
        :param disabled_reason_message: The disabled_reason_message of this SkuProperties.
        :param required_feature: The required_feature of this SkuProperties.
        """
        self.openapi_types = {
            'api_versions': List[str],
            'capacity': SkuCapacity,
            'costs': List[SkuCost],
            'destination_to_service_location_map': List[DestinationToServiceLocationMap],
            'disabled_reason': str,
            'disabled_reason_message': str,
            'required_feature': str
        }

        self.attribute_map = {
            'api_versions': 'apiVersions',
            'capacity': 'capacity',
            'costs': 'costs',
            'destination_to_service_location_map': 'destinationToServiceLocationMap',
            'disabled_reason': 'disabledReason',
            'disabled_reason_message': 'disabledReasonMessage',
            'required_feature': 'requiredFeature'
        }

        self._api_versions = api_versions
        self._capacity = capacity
        self._costs = costs
        self._destination_to_service_location_map = destination_to_service_location_map
        self._disabled_reason = disabled_reason
        self._disabled_reason_message = disabled_reason_message
        self._required_feature = required_feature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkuProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkuProperties of this SkuProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_versions(self):
        """Gets the api_versions of this SkuProperties.

        Api versions that support this Sku.

        :return: The api_versions of this SkuProperties.
        :rtype: List[str]
        """
        return self._api_versions

    @api_versions.setter
    def api_versions(self, api_versions):
        """Sets the api_versions of this SkuProperties.

        Api versions that support this Sku.

        :param api_versions: The api_versions of this SkuProperties.
        :type api_versions: List[str]
        """

        self._api_versions = api_versions

    @property
    def capacity(self):
        """Gets the capacity of this SkuProperties.


        :return: The capacity of this SkuProperties.
        :rtype: SkuCapacity
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this SkuProperties.


        :param capacity: The capacity of this SkuProperties.
        :type capacity: SkuCapacity
        """

        self._capacity = capacity

    @property
    def costs(self):
        """Gets the costs of this SkuProperties.

        Cost of the Sku.

        :return: The costs of this SkuProperties.
        :rtype: List[SkuCost]
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this SkuProperties.

        Cost of the Sku.

        :param costs: The costs of this SkuProperties.
        :type costs: List[SkuCost]
        """

        self._costs = costs

    @property
    def destination_to_service_location_map(self):
        """Gets the destination_to_service_location_map of this SkuProperties.

        The map of destination location to service location.

        :return: The destination_to_service_location_map of this SkuProperties.
        :rtype: List[DestinationToServiceLocationMap]
        """
        return self._destination_to_service_location_map

    @destination_to_service_location_map.setter
    def destination_to_service_location_map(self, destination_to_service_location_map):
        """Sets the destination_to_service_location_map of this SkuProperties.

        The map of destination location to service location.

        :param destination_to_service_location_map: The destination_to_service_location_map of this SkuProperties.
        :type destination_to_service_location_map: List[DestinationToServiceLocationMap]
        """

        self._destination_to_service_location_map = destination_to_service_location_map

    @property
    def disabled_reason(self):
        """Gets the disabled_reason of this SkuProperties.

        Reason why the Sku is disabled.

        :return: The disabled_reason of this SkuProperties.
        :rtype: str
        """
        return self._disabled_reason

    @disabled_reason.setter
    def disabled_reason(self, disabled_reason):
        """Sets the disabled_reason of this SkuProperties.

        Reason why the Sku is disabled.

        :param disabled_reason: The disabled_reason of this SkuProperties.
        :type disabled_reason: str
        """
        allowed_values = ["None", "Country", "Region", "Feature", "OfferType", "NoSubscriptionInfo"]  # noqa: E501
        if disabled_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `disabled_reason` ({0}), must be one of {1}"
                .format(disabled_reason, allowed_values)
            )

        self._disabled_reason = disabled_reason

    @property
    def disabled_reason_message(self):
        """Gets the disabled_reason_message of this SkuProperties.

        Message for why the Sku is disabled.

        :return: The disabled_reason_message of this SkuProperties.
        :rtype: str
        """
        return self._disabled_reason_message

    @disabled_reason_message.setter
    def disabled_reason_message(self, disabled_reason_message):
        """Sets the disabled_reason_message of this SkuProperties.

        Message for why the Sku is disabled.

        :param disabled_reason_message: The disabled_reason_message of this SkuProperties.
        :type disabled_reason_message: str
        """

        self._disabled_reason_message = disabled_reason_message

    @property
    def required_feature(self):
        """Gets the required_feature of this SkuProperties.

        Required feature to access the sku.

        :return: The required_feature of this SkuProperties.
        :rtype: str
        """
        return self._required_feature

    @required_feature.setter
    def required_feature(self, required_feature):
        """Sets the required_feature of this SkuProperties.

        Required feature to access the sku.

        :param required_feature: The required_feature of this SkuProperties.
        :type required_feature: str
        """

        self._required_feature = required_feature
