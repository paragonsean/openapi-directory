# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShareCredentialDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password: str=None, share_name: str=None, share_type: str=None, supported_access_protocols: List[str]=None, user_name: str=None):
        """ShareCredentialDetails - a model defined in OpenAPI

        :param password: The password of this ShareCredentialDetails.
        :param share_name: The share_name of this ShareCredentialDetails.
        :param share_type: The share_type of this ShareCredentialDetails.
        :param supported_access_protocols: The supported_access_protocols of this ShareCredentialDetails.
        :param user_name: The user_name of this ShareCredentialDetails.
        """
        self.openapi_types = {
            'password': str,
            'share_name': str,
            'share_type': str,
            'supported_access_protocols': List[str],
            'user_name': str
        }

        self.attribute_map = {
            'password': 'password',
            'share_name': 'shareName',
            'share_type': 'shareType',
            'supported_access_protocols': 'supportedAccessProtocols',
            'user_name': 'userName'
        }

        self._password = password
        self._share_name = share_name
        self._share_type = share_type
        self._supported_access_protocols = supported_access_protocols
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShareCredentialDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShareCredentialDetails of this ShareCredentialDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password(self):
        """Gets the password of this ShareCredentialDetails.

        Password for the share.

        :return: The password of this ShareCredentialDetails.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ShareCredentialDetails.

        Password for the share.

        :param password: The password of this ShareCredentialDetails.
        :type password: str
        """

        self._password = password

    @property
    def share_name(self):
        """Gets the share_name of this ShareCredentialDetails.

        Name of the share.

        :return: The share_name of this ShareCredentialDetails.
        :rtype: str
        """
        return self._share_name

    @share_name.setter
    def share_name(self, share_name):
        """Sets the share_name of this ShareCredentialDetails.

        Name of the share.

        :param share_name: The share_name of this ShareCredentialDetails.
        :type share_name: str
        """

        self._share_name = share_name

    @property
    def share_type(self):
        """Gets the share_type of this ShareCredentialDetails.

        Type of the share.

        :return: The share_type of this ShareCredentialDetails.
        :rtype: str
        """
        return self._share_type

    @share_type.setter
    def share_type(self, share_type):
        """Sets the share_type of this ShareCredentialDetails.

        Type of the share.

        :param share_type: The share_type of this ShareCredentialDetails.
        :type share_type: str
        """
        allowed_values = ["UnknownType", "HCS", "BlockBlob", "PageBlob", "AzureFile", "ManagedDisk"]  # noqa: E501
        if share_type not in allowed_values:
            raise ValueError(
                "Invalid value for `share_type` ({0}), must be one of {1}"
                .format(share_type, allowed_values)
            )

        self._share_type = share_type

    @property
    def supported_access_protocols(self):
        """Gets the supported_access_protocols of this ShareCredentialDetails.

        Access protocols supported on the device.

        :return: The supported_access_protocols of this ShareCredentialDetails.
        :rtype: List[str]
        """
        return self._supported_access_protocols

    @supported_access_protocols.setter
    def supported_access_protocols(self, supported_access_protocols):
        """Sets the supported_access_protocols of this ShareCredentialDetails.

        Access protocols supported on the device.

        :param supported_access_protocols: The supported_access_protocols of this ShareCredentialDetails.
        :type supported_access_protocols: List[str]
        """
        allowed_values = ["SMB", "NFS"]  # noqa: E501
        if not set(supported_access_protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_access_protocols` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(supported_access_protocols) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_access_protocols = supported_access_protocols

    @property
    def user_name(self):
        """Gets the user_name of this ShareCredentialDetails.

        User name for the share.

        :return: The user_name of this ShareCredentialDetails.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ShareCredentialDetails.

        User name for the share.

        :param user_name: The user_name of this ShareCredentialDetails.
        :type user_name: str
        """

        self._user_name = user_name
