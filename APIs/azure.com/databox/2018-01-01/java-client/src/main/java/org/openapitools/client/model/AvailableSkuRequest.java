/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The filters for showing the available skus.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:51.200231-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailableSkuRequest {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  /**
   * Gets or Sets skuNames
   */
  @JsonAdapter(SkuNamesEnum.Adapter.class)
  public enum SkuNamesEnum {
    DATA_BOX("DataBox"),
    
    DATA_BOX_DISK("DataBoxDisk"),
    
    DATA_BOX_HEAVY("DataBoxHeavy");

    private String value;

    SkuNamesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SkuNamesEnum fromValue(String value) {
      for (SkuNamesEnum b : SkuNamesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SkuNamesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SkuNamesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SkuNamesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SkuNamesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SkuNamesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SKU_NAMES = "skuNames";
  @SerializedName(SERIALIZED_NAME_SKU_NAMES)
  private List<SkuNamesEnum> skuNames = new ArrayList<>();

  /**
   * Type of the transfer.
   */
  @JsonAdapter(TransferTypeEnum.Adapter.class)
  public enum TransferTypeEnum {
    IMPORT_TO_AZURE("ImportToAzure");

    private String value;

    TransferTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransferTypeEnum fromValue(String value) {
      for (TransferTypeEnum b : TransferTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransferTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransferTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransferTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransferTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransferTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSFER_TYPE = "transferType";
  @SerializedName(SERIALIZED_NAME_TRANSFER_TYPE)
  private TransferTypeEnum transferType;

  public AvailableSkuRequest() {
  }

  public AvailableSkuRequest country(String country) {
    this.country = country;
    return this;
  }

  /**
   * ISO country code. Country for hardware shipment. For codes check: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public AvailableSkuRequest location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location for data transfer. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version&#x3D;2018-01-01
   * @return location
   */
  @javax.annotation.Nonnull
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public AvailableSkuRequest skuNames(List<SkuNamesEnum> skuNames) {
    this.skuNames = skuNames;
    return this;
  }

  public AvailableSkuRequest addSkuNamesItem(SkuNamesEnum skuNamesItem) {
    if (this.skuNames == null) {
      this.skuNames = new ArrayList<>();
    }
    this.skuNames.add(skuNamesItem);
    return this;
  }

  /**
   * Sku Names to filter for available skus
   * @return skuNames
   */
  @javax.annotation.Nullable
  public List<SkuNamesEnum> getSkuNames() {
    return skuNames;
  }

  public void setSkuNames(List<SkuNamesEnum> skuNames) {
    this.skuNames = skuNames;
  }


  public AvailableSkuRequest transferType(TransferTypeEnum transferType) {
    this.transferType = transferType;
    return this;
  }

  /**
   * Type of the transfer.
   * @return transferType
   */
  @javax.annotation.Nonnull
  public TransferTypeEnum getTransferType() {
    return transferType;
  }

  public void setTransferType(TransferTypeEnum transferType) {
    this.transferType = transferType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableSkuRequest availableSkuRequest = (AvailableSkuRequest) o;
    return Objects.equals(this.country, availableSkuRequest.country) &&
        Objects.equals(this.location, availableSkuRequest.location) &&
        Objects.equals(this.skuNames, availableSkuRequest.skuNames) &&
        Objects.equals(this.transferType, availableSkuRequest.transferType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, location, skuNames, transferType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableSkuRequest {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    skuNames: ").append(toIndentedString(skuNames)).append("\n");
    sb.append("    transferType: ").append(toIndentedString(transferType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("location");
    openapiFields.add("skuNames");
    openapiFields.add("transferType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("transferType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailableSkuRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailableSkuRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailableSkuRequest is not found in the empty JSON string", AvailableSkuRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailableSkuRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailableSkuRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AvailableSkuRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("skuNames") != null && !jsonObj.get("skuNames").isJsonNull() && !jsonObj.get("skuNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuNames` to be an array in the JSON string but got `%s`", jsonObj.get("skuNames").toString()));
      }
      if (!jsonObj.get("transferType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferType").toString()));
      }
      // validate the required field `transferType`
      TransferTypeEnum.validateJsonElement(jsonObj.get("transferType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailableSkuRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailableSkuRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailableSkuRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailableSkuRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailableSkuRequest>() {
           @Override
           public void write(JsonWriter out, AvailableSkuRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailableSkuRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailableSkuRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailableSkuRequest
   * @throws IOException if the JSON string is invalid with respect to AvailableSkuRequest
   */
  public static AvailableSkuRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailableSkuRequest.class);
  }

  /**
   * Convert an instance of AvailableSkuRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

