/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the destination of the data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:51.200231-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinationAccountDetails {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  /**
   * Data Destination Type.
   */
  @JsonAdapter(DataDestinationTypeEnum.Adapter.class)
  public enum DataDestinationTypeEnum {
    UNKNOWN_TYPE("UnknownType"),
    
    STORAGE_ACCOUNT("StorageAccount"),
    
    MANAGED_DISK("ManagedDisk");

    private String value;

    DataDestinationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataDestinationTypeEnum fromValue(String value) {
      for (DataDestinationTypeEnum b : DataDestinationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataDestinationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataDestinationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataDestinationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataDestinationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataDestinationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_DESTINATION_TYPE = "dataDestinationType";
  @SerializedName(SERIALIZED_NAME_DATA_DESTINATION_TYPE)
  protected DataDestinationTypeEnum dataDestinationType;

  public DestinationAccountDetails() {
  }

  public DestinationAccountDetails accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Arm Id of the destination where the data has to be moved.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public DestinationAccountDetails dataDestinationType(DataDestinationTypeEnum dataDestinationType) {
    this.dataDestinationType = dataDestinationType;
    return this;
  }

  /**
   * Data Destination Type.
   * @return dataDestinationType
   */
  @javax.annotation.Nonnull
  public DataDestinationTypeEnum getDataDestinationType() {
    return dataDestinationType;
  }

  public void setDataDestinationType(DataDestinationTypeEnum dataDestinationType) {
    this.dataDestinationType = dataDestinationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationAccountDetails destinationAccountDetails = (DestinationAccountDetails) o;
    return Objects.equals(this.accountId, destinationAccountDetails.accountId) &&
        Objects.equals(this.dataDestinationType, destinationAccountDetails.dataDestinationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, dataDestinationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationAccountDetails {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    dataDestinationType: ").append(toIndentedString(dataDestinationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("dataDestinationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataDestinationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinationAccountDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinationAccountDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinationAccountDetails is not found in the empty JSON string", DestinationAccountDetails.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("dataDestinationType").getAsString();
      switch (discriminatorValue) {
        case "DestinationManagedDiskDetails":
          DestinationManagedDiskDetails.validateJsonElement(jsonElement);
          break;
        case "DestinationStorageAccountDetails":
          DestinationStorageAccountDetails.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `dataDestinationType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of DestinationAccountDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinationAccountDetails
   * @throws IOException if the JSON string is invalid with respect to DestinationAccountDetails
   */
  public static DestinationAccountDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinationAccountDetails.class);
  }

  /**
   * Convert an instance of DestinationAccountDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

