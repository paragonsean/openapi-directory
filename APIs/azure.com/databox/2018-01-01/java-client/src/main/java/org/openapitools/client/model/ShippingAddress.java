/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Shipping address where customer wishes to receive the device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:51.200231-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShippingAddress {
  /**
   * Type of address.
   */
  @JsonAdapter(AddressTypeEnum.Adapter.class)
  public enum AddressTypeEnum {
    NONE("None"),
    
    RESIDENTIAL("Residential"),
    
    COMMERCIAL("Commercial");

    private String value;

    AddressTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AddressTypeEnum fromValue(String value) {
      for (AddressTypeEnum b : AddressTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AddressTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddressTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddressTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AddressTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AddressTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "addressType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private AddressTypeEnum addressType;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_STATE_OR_PROVINCE = "stateOrProvince";
  @SerializedName(SERIALIZED_NAME_STATE_OR_PROVINCE)
  private String stateOrProvince;

  public static final String SERIALIZED_NAME_STREET_ADDRESS1 = "streetAddress1";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS1)
  private String streetAddress1;

  public static final String SERIALIZED_NAME_STREET_ADDRESS2 = "streetAddress2";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS2)
  private String streetAddress2;

  public static final String SERIALIZED_NAME_STREET_ADDRESS3 = "streetAddress3";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS3)
  private String streetAddress3;

  public static final String SERIALIZED_NAME_ZIP_EXTENDED_CODE = "zipExtendedCode";
  @SerializedName(SERIALIZED_NAME_ZIP_EXTENDED_CODE)
  private String zipExtendedCode;

  public ShippingAddress() {
  }

  public ShippingAddress addressType(AddressTypeEnum addressType) {
    this.addressType = addressType;
    return this;
  }

  /**
   * Type of address.
   * @return addressType
   */
  @javax.annotation.Nullable
  public AddressTypeEnum getAddressType() {
    return addressType;
  }

  public void setAddressType(AddressTypeEnum addressType) {
    this.addressType = addressType;
  }


  public ShippingAddress city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Name of the City.
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public ShippingAddress companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Name of the company.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public ShippingAddress country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Name of the Country.
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ShippingAddress postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal code.
   * @return postalCode
   */
  @javax.annotation.Nonnull
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public ShippingAddress stateOrProvince(String stateOrProvince) {
    this.stateOrProvince = stateOrProvince;
    return this;
  }

  /**
   * Name of the State or Province.
   * @return stateOrProvince
   */
  @javax.annotation.Nullable
  public String getStateOrProvince() {
    return stateOrProvince;
  }

  public void setStateOrProvince(String stateOrProvince) {
    this.stateOrProvince = stateOrProvince;
  }


  public ShippingAddress streetAddress1(String streetAddress1) {
    this.streetAddress1 = streetAddress1;
    return this;
  }

  /**
   * Street Address line 1.
   * @return streetAddress1
   */
  @javax.annotation.Nonnull
  public String getStreetAddress1() {
    return streetAddress1;
  }

  public void setStreetAddress1(String streetAddress1) {
    this.streetAddress1 = streetAddress1;
  }


  public ShippingAddress streetAddress2(String streetAddress2) {
    this.streetAddress2 = streetAddress2;
    return this;
  }

  /**
   * Street Address line 2.
   * @return streetAddress2
   */
  @javax.annotation.Nullable
  public String getStreetAddress2() {
    return streetAddress2;
  }

  public void setStreetAddress2(String streetAddress2) {
    this.streetAddress2 = streetAddress2;
  }


  public ShippingAddress streetAddress3(String streetAddress3) {
    this.streetAddress3 = streetAddress3;
    return this;
  }

  /**
   * Street Address line 3.
   * @return streetAddress3
   */
  @javax.annotation.Nullable
  public String getStreetAddress3() {
    return streetAddress3;
  }

  public void setStreetAddress3(String streetAddress3) {
    this.streetAddress3 = streetAddress3;
  }


  public ShippingAddress zipExtendedCode(String zipExtendedCode) {
    this.zipExtendedCode = zipExtendedCode;
    return this;
  }

  /**
   * Extended Zip Code.
   * @return zipExtendedCode
   */
  @javax.annotation.Nullable
  public String getZipExtendedCode() {
    return zipExtendedCode;
  }

  public void setZipExtendedCode(String zipExtendedCode) {
    this.zipExtendedCode = zipExtendedCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingAddress shippingAddress = (ShippingAddress) o;
    return Objects.equals(this.addressType, shippingAddress.addressType) &&
        Objects.equals(this.city, shippingAddress.city) &&
        Objects.equals(this.companyName, shippingAddress.companyName) &&
        Objects.equals(this.country, shippingAddress.country) &&
        Objects.equals(this.postalCode, shippingAddress.postalCode) &&
        Objects.equals(this.stateOrProvince, shippingAddress.stateOrProvince) &&
        Objects.equals(this.streetAddress1, shippingAddress.streetAddress1) &&
        Objects.equals(this.streetAddress2, shippingAddress.streetAddress2) &&
        Objects.equals(this.streetAddress3, shippingAddress.streetAddress3) &&
        Objects.equals(this.zipExtendedCode, shippingAddress.zipExtendedCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressType, city, companyName, country, postalCode, stateOrProvince, streetAddress1, streetAddress2, streetAddress3, zipExtendedCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingAddress {\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    stateOrProvince: ").append(toIndentedString(stateOrProvince)).append("\n");
    sb.append("    streetAddress1: ").append(toIndentedString(streetAddress1)).append("\n");
    sb.append("    streetAddress2: ").append(toIndentedString(streetAddress2)).append("\n");
    sb.append("    streetAddress3: ").append(toIndentedString(streetAddress3)).append("\n");
    sb.append("    zipExtendedCode: ").append(toIndentedString(zipExtendedCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressType");
    openapiFields.add("city");
    openapiFields.add("companyName");
    openapiFields.add("country");
    openapiFields.add("postalCode");
    openapiFields.add("stateOrProvince");
    openapiFields.add("streetAddress1");
    openapiFields.add("streetAddress2");
    openapiFields.add("streetAddress3");
    openapiFields.add("zipExtendedCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("postalCode");
    openapiRequiredFields.add("streetAddress1");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingAddress is not found in the empty JSON string", ShippingAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShippingAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressType") != null && !jsonObj.get("addressType").isJsonNull()) && !jsonObj.get("addressType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressType").toString()));
      }
      // validate the optional field `addressType`
      if (jsonObj.get("addressType") != null && !jsonObj.get("addressType").isJsonNull()) {
        AddressTypeEnum.validateJsonElement(jsonObj.get("addressType"));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if ((jsonObj.get("stateOrProvince") != null && !jsonObj.get("stateOrProvince").isJsonNull()) && !jsonObj.get("stateOrProvince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateOrProvince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateOrProvince").toString()));
      }
      if (!jsonObj.get("streetAddress1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress1").toString()));
      }
      if ((jsonObj.get("streetAddress2") != null && !jsonObj.get("streetAddress2").isJsonNull()) && !jsonObj.get("streetAddress2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress2").toString()));
      }
      if ((jsonObj.get("streetAddress3") != null && !jsonObj.get("streetAddress3").isJsonNull()) && !jsonObj.get("streetAddress3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress3").toString()));
      }
      if ((jsonObj.get("zipExtendedCode") != null && !jsonObj.get("zipExtendedCode").isJsonNull()) && !jsonObj.get("zipExtendedCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipExtendedCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipExtendedCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingAddress>() {
           @Override
           public void write(JsonWriter out, ShippingAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingAddress
   * @throws IOException if the JSON string is invalid with respect to ShippingAddress
   */
  public static ShippingAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingAddress.class);
  }

  /**
   * Convert an instance of ShippingAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

