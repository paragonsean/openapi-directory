/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Credential details of the shares in account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:51.200231-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShareCredentialDetails {
  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_SHARE_NAME = "shareName";
  @SerializedName(SERIALIZED_NAME_SHARE_NAME)
  private String shareName;

  /**
   * Type of the share.
   */
  @JsonAdapter(ShareTypeEnum.Adapter.class)
  public enum ShareTypeEnum {
    UNKNOWN_TYPE("UnknownType"),
    
    HCS("HCS"),
    
    BLOCK_BLOB("BlockBlob"),
    
    PAGE_BLOB("PageBlob"),
    
    AZURE_FILE("AzureFile"),
    
    MANAGED_DISK("ManagedDisk");

    private String value;

    ShareTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShareTypeEnum fromValue(String value) {
      for (ShareTypeEnum b : ShareTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShareTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShareTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShareTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShareTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShareTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHARE_TYPE = "shareType";
  @SerializedName(SERIALIZED_NAME_SHARE_TYPE)
  private ShareTypeEnum shareType;

  /**
   * Gets or Sets supportedAccessProtocols
   */
  @JsonAdapter(SupportedAccessProtocolsEnum.Adapter.class)
  public enum SupportedAccessProtocolsEnum {
    SMB("SMB"),
    
    NFS("NFS");

    private String value;

    SupportedAccessProtocolsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedAccessProtocolsEnum fromValue(String value) {
      for (SupportedAccessProtocolsEnum b : SupportedAccessProtocolsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportedAccessProtocolsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedAccessProtocolsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedAccessProtocolsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportedAccessProtocolsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportedAccessProtocolsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTED_ACCESS_PROTOCOLS = "supportedAccessProtocols";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_ACCESS_PROTOCOLS)
  private List<SupportedAccessProtocolsEnum> supportedAccessProtocols = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public ShareCredentialDetails() {
  }

  public ShareCredentialDetails(
     String password, 
     String shareName, 
     ShareTypeEnum shareType, 
     List<SupportedAccessProtocolsEnum> supportedAccessProtocols, 
     String userName
  ) {
    this();
    this.password = password;
    this.shareName = shareName;
    this.shareType = shareType;
    this.supportedAccessProtocols = supportedAccessProtocols;
    this.userName = userName;
  }

  /**
   * Password for the share.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }



  /**
   * Name of the share.
   * @return shareName
   */
  @javax.annotation.Nullable
  public String getShareName() {
    return shareName;
  }



  /**
   * Type of the share.
   * @return shareType
   */
  @javax.annotation.Nullable
  public ShareTypeEnum getShareType() {
    return shareType;
  }



  /**
   * Access protocols supported on the device.
   * @return supportedAccessProtocols
   */
  @javax.annotation.Nullable
  public List<SupportedAccessProtocolsEnum> getSupportedAccessProtocols() {
    return supportedAccessProtocols;
  }



  /**
   * User name for the share.
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareCredentialDetails shareCredentialDetails = (ShareCredentialDetails) o;
    return Objects.equals(this.password, shareCredentialDetails.password) &&
        Objects.equals(this.shareName, shareCredentialDetails.shareName) &&
        Objects.equals(this.shareType, shareCredentialDetails.shareType) &&
        Objects.equals(this.supportedAccessProtocols, shareCredentialDetails.supportedAccessProtocols) &&
        Objects.equals(this.userName, shareCredentialDetails.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(password, shareName, shareType, supportedAccessProtocols, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareCredentialDetails {\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    shareName: ").append(toIndentedString(shareName)).append("\n");
    sb.append("    shareType: ").append(toIndentedString(shareType)).append("\n");
    sb.append("    supportedAccessProtocols: ").append(toIndentedString(supportedAccessProtocols)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("password");
    openapiFields.add("shareName");
    openapiFields.add("shareType");
    openapiFields.add("supportedAccessProtocols");
    openapiFields.add("userName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShareCredentialDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShareCredentialDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShareCredentialDetails is not found in the empty JSON string", ShareCredentialDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShareCredentialDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShareCredentialDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("shareName") != null && !jsonObj.get("shareName").isJsonNull()) && !jsonObj.get("shareName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareName").toString()));
      }
      if ((jsonObj.get("shareType") != null && !jsonObj.get("shareType").isJsonNull()) && !jsonObj.get("shareType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareType").toString()));
      }
      // validate the optional field `shareType`
      if (jsonObj.get("shareType") != null && !jsonObj.get("shareType").isJsonNull()) {
        ShareTypeEnum.validateJsonElement(jsonObj.get("shareType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedAccessProtocols") != null && !jsonObj.get("supportedAccessProtocols").isJsonNull() && !jsonObj.get("supportedAccessProtocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedAccessProtocols` to be an array in the JSON string but got `%s`", jsonObj.get("supportedAccessProtocols").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShareCredentialDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShareCredentialDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShareCredentialDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShareCredentialDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ShareCredentialDetails>() {
           @Override
           public void write(JsonWriter out, ShareCredentialDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShareCredentialDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShareCredentialDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShareCredentialDetails
   * @throws IOException if the JSON string is invalid with respect to ShareCredentialDetails
   */
  public static ShareCredentialDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShareCredentialDetails.class);
  }

  /**
   * Convert an instance of ShareCredentialDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

