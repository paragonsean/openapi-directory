/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingAddress::OAIShippingAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingAddress::OAIShippingAddress() {
    this->initializeModel();
}

OAIShippingAddress::~OAIShippingAddress() {}

void OAIShippingAddress::initializeModel() {

    m_address_type_isSet = false;
    m_address_type_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_or_province_isSet = false;
    m_state_or_province_isValid = false;

    m_street_address1_isSet = false;
    m_street_address1_isValid = false;

    m_street_address2_isSet = false;
    m_street_address2_isValid = false;

    m_street_address3_isSet = false;
    m_street_address3_isValid = false;

    m_zip_extended_code_isSet = false;
    m_zip_extended_code_isValid = false;
}

void OAIShippingAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingAddress::fromJsonObject(QJsonObject json) {

    m_address_type_isValid = ::OpenAPI::fromJsonValue(m_address_type, json[QString("addressType")]);
    m_address_type_isSet = !json[QString("addressType")].isNull() && m_address_type_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_state_or_province_isValid = ::OpenAPI::fromJsonValue(m_state_or_province, json[QString("stateOrProvince")]);
    m_state_or_province_isSet = !json[QString("stateOrProvince")].isNull() && m_state_or_province_isValid;

    m_street_address1_isValid = ::OpenAPI::fromJsonValue(m_street_address1, json[QString("streetAddress1")]);
    m_street_address1_isSet = !json[QString("streetAddress1")].isNull() && m_street_address1_isValid;

    m_street_address2_isValid = ::OpenAPI::fromJsonValue(m_street_address2, json[QString("streetAddress2")]);
    m_street_address2_isSet = !json[QString("streetAddress2")].isNull() && m_street_address2_isValid;

    m_street_address3_isValid = ::OpenAPI::fromJsonValue(m_street_address3, json[QString("streetAddress3")]);
    m_street_address3_isSet = !json[QString("streetAddress3")].isNull() && m_street_address3_isValid;

    m_zip_extended_code_isValid = ::OpenAPI::fromJsonValue(m_zip_extended_code, json[QString("zipExtendedCode")]);
    m_zip_extended_code_isSet = !json[QString("zipExtendedCode")].isNull() && m_zip_extended_code_isValid;
}

QString OAIShippingAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_type_isSet) {
        obj.insert(QString("addressType"), ::OpenAPI::toJsonValue(m_address_type));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state_or_province_isSet) {
        obj.insert(QString("stateOrProvince"), ::OpenAPI::toJsonValue(m_state_or_province));
    }
    if (m_street_address1_isSet) {
        obj.insert(QString("streetAddress1"), ::OpenAPI::toJsonValue(m_street_address1));
    }
    if (m_street_address2_isSet) {
        obj.insert(QString("streetAddress2"), ::OpenAPI::toJsonValue(m_street_address2));
    }
    if (m_street_address3_isSet) {
        obj.insert(QString("streetAddress3"), ::OpenAPI::toJsonValue(m_street_address3));
    }
    if (m_zip_extended_code_isSet) {
        obj.insert(QString("zipExtendedCode"), ::OpenAPI::toJsonValue(m_zip_extended_code));
    }
    return obj;
}

QString OAIShippingAddress::getAddressType() const {
    return m_address_type;
}
void OAIShippingAddress::setAddressType(const QString &address_type) {
    m_address_type = address_type;
    m_address_type_isSet = true;
}

bool OAIShippingAddress::is_address_type_Set() const{
    return m_address_type_isSet;
}

bool OAIShippingAddress::is_address_type_Valid() const{
    return m_address_type_isValid;
}

QString OAIShippingAddress::getCity() const {
    return m_city;
}
void OAIShippingAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIShippingAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIShippingAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIShippingAddress::getCompanyName() const {
    return m_company_name;
}
void OAIShippingAddress::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIShippingAddress::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIShippingAddress::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIShippingAddress::getCountry() const {
    return m_country;
}
void OAIShippingAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIShippingAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIShippingAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIShippingAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIShippingAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIShippingAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIShippingAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIShippingAddress::getStateOrProvince() const {
    return m_state_or_province;
}
void OAIShippingAddress::setStateOrProvince(const QString &state_or_province) {
    m_state_or_province = state_or_province;
    m_state_or_province_isSet = true;
}

bool OAIShippingAddress::is_state_or_province_Set() const{
    return m_state_or_province_isSet;
}

bool OAIShippingAddress::is_state_or_province_Valid() const{
    return m_state_or_province_isValid;
}

QString OAIShippingAddress::getStreetAddress1() const {
    return m_street_address1;
}
void OAIShippingAddress::setStreetAddress1(const QString &street_address1) {
    m_street_address1 = street_address1;
    m_street_address1_isSet = true;
}

bool OAIShippingAddress::is_street_address1_Set() const{
    return m_street_address1_isSet;
}

bool OAIShippingAddress::is_street_address1_Valid() const{
    return m_street_address1_isValid;
}

QString OAIShippingAddress::getStreetAddress2() const {
    return m_street_address2;
}
void OAIShippingAddress::setStreetAddress2(const QString &street_address2) {
    m_street_address2 = street_address2;
    m_street_address2_isSet = true;
}

bool OAIShippingAddress::is_street_address2_Set() const{
    return m_street_address2_isSet;
}

bool OAIShippingAddress::is_street_address2_Valid() const{
    return m_street_address2_isValid;
}

QString OAIShippingAddress::getStreetAddress3() const {
    return m_street_address3;
}
void OAIShippingAddress::setStreetAddress3(const QString &street_address3) {
    m_street_address3 = street_address3;
    m_street_address3_isSet = true;
}

bool OAIShippingAddress::is_street_address3_Set() const{
    return m_street_address3_isSet;
}

bool OAIShippingAddress::is_street_address3_Valid() const{
    return m_street_address3_isValid;
}

QString OAIShippingAddress::getZipExtendedCode() const {
    return m_zip_extended_code;
}
void OAIShippingAddress::setZipExtendedCode(const QString &zip_extended_code) {
    m_zip_extended_code = zip_extended_code;
    m_zip_extended_code_isSet = true;
}

bool OAIShippingAddress::is_zip_extended_code_Set() const{
    return m_zip_extended_code_isSet;
}

bool OAIShippingAddress::is_zip_extended_code_Valid() const{
    return m_zip_extended_code_isValid;
}

bool OAIShippingAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_extended_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_postal_code_isValid && m_street_address1_isValid && true;
}

} // namespace OpenAPI
