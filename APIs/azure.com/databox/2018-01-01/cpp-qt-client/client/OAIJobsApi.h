/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobsApi_H
#define OAI_OAIJobsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancellationReason.h"
#include "OAIJobResource.h"
#include "OAIJobResourceList.h"
#include "OAIJobResourceUpdateParameter.h"
#include "OAIShipmentPickUpRequest.h"
#include "OAIShipmentPickUpResponse.h"
#include "OAIUnencryptedCredentialsList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobsApi : public QObject {
    Q_OBJECT

public:
    OAIJobsApi(const int timeOut = 0);
    ~OAIJobsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  shipment_pick_up_request OAIShipmentPickUpRequest [required]
    */
    virtual void jobsBookShipmentPickUp(const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &api_version, const OAIShipmentPickUpRequest &shipment_pick_up_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  cancellation_reason OAICancellationReason [required]
    */
    virtual void jobsCancel(const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &api_version, const OAICancellationReason &cancellation_reason);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  job_resource OAIJobResource [required]
    */
    virtual void jobsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &api_version, const OAIJobResource &job_resource);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void jobsGet(const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void jobsList(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void jobsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobsListCredentials(const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  job_resource_update_parameter OAIJobResourceUpdateParameter [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void jobsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &job_name, const QString &api_version, const OAIJobResourceUpdateParameter &job_resource_update_parameter, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobsBookShipmentPickUpCallback(OAIHttpRequestWorker *worker);
    void jobsCancelCallback(OAIHttpRequestWorker *worker);
    void jobsCreateCallback(OAIHttpRequestWorker *worker);
    void jobsDeleteCallback(OAIHttpRequestWorker *worker);
    void jobsGetCallback(OAIHttpRequestWorker *worker);
    void jobsListCallback(OAIHttpRequestWorker *worker);
    void jobsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void jobsListCredentialsCallback(OAIHttpRequestWorker *worker);
    void jobsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobsBookShipmentPickUpSignal(OAIShipmentPickUpResponse summary);
    void jobsCancelSignal();
    void jobsCreateSignal(OAIJobResource summary);
    void jobsDeleteSignal();
    void jobsGetSignal(OAIJobResource summary);
    void jobsListSignal(OAIJobResourceList summary);
    void jobsListByResourceGroupSignal(OAIJobResourceList summary);
    void jobsListCredentialsSignal(OAIUnencryptedCredentialsList summary);
    void jobsUpdateSignal(OAIJobResource summary);


    void jobsBookShipmentPickUpSignalFull(OAIHttpRequestWorker *worker, OAIShipmentPickUpResponse summary);
    void jobsCancelSignalFull(OAIHttpRequestWorker *worker);
    void jobsCreateSignalFull(OAIHttpRequestWorker *worker, OAIJobResource summary);
    void jobsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void jobsGetSignalFull(OAIHttpRequestWorker *worker, OAIJobResource summary);
    void jobsListSignalFull(OAIHttpRequestWorker *worker, OAIJobResourceList summary);
    void jobsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIJobResourceList summary);
    void jobsListCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIUnencryptedCredentialsList summary);
    void jobsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIJobResource summary);

    Q_DECL_DEPRECATED_X("Use jobsBookShipmentPickUpSignalError() instead")
    void jobsBookShipmentPickUpSignalE(OAIShipmentPickUpResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsBookShipmentPickUpSignalError(OAIShipmentPickUpResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsCancelSignalError() instead")
    void jobsCancelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCancelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsCreateSignalError() instead")
    void jobsCreateSignalE(OAIJobResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCreateSignalError(OAIJobResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsDeleteSignalError() instead")
    void jobsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetSignalError() instead")
    void jobsGetSignalE(OAIJobResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetSignalError(OAIJobResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListSignalError() instead")
    void jobsListSignalE(OAIJobResourceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListSignalError(OAIJobResourceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListByResourceGroupSignalError() instead")
    void jobsListByResourceGroupSignalE(OAIJobResourceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListByResourceGroupSignalError(OAIJobResourceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListCredentialsSignalError() instead")
    void jobsListCredentialsSignalE(OAIUnencryptedCredentialsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListCredentialsSignalError(OAIUnencryptedCredentialsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsUpdateSignalError() instead")
    void jobsUpdateSignalE(OAIJobResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsUpdateSignalError(OAIJobResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobsBookShipmentPickUpSignalErrorFull() instead")
    void jobsBookShipmentPickUpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsBookShipmentPickUpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsCancelSignalErrorFull() instead")
    void jobsCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsCreateSignalErrorFull() instead")
    void jobsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsDeleteSignalErrorFull() instead")
    void jobsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetSignalErrorFull() instead")
    void jobsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListSignalErrorFull() instead")
    void jobsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListByResourceGroupSignalErrorFull() instead")
    void jobsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListCredentialsSignalErrorFull() instead")
    void jobsListCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsUpdateSignalErrorFull() instead")
    void jobsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
