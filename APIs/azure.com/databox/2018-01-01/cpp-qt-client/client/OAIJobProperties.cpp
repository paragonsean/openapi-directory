/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobProperties::OAIJobProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobProperties::OAIJobProperties() {
    this->initializeModel();
}

OAIJobProperties::~OAIJobProperties() {}

void OAIJobProperties::initializeModel() {

    m_cancellation_reason_isSet = false;
    m_cancellation_reason_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_is_cancellable_isSet = false;
    m_is_cancellable_isValid = false;

    m_is_deletable_isSet = false;
    m_is_deletable_isValid = false;

    m_is_shipping_address_editable_isSet = false;
    m_is_shipping_address_editable_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIJobProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobProperties::fromJsonObject(QJsonObject json) {

    m_cancellation_reason_isValid = ::OpenAPI::fromJsonValue(m_cancellation_reason, json[QString("cancellationReason")]);
    m_cancellation_reason_isSet = !json[QString("cancellationReason")].isNull() && m_cancellation_reason_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_is_cancellable_isValid = ::OpenAPI::fromJsonValue(m_is_cancellable, json[QString("isCancellable")]);
    m_is_cancellable_isSet = !json[QString("isCancellable")].isNull() && m_is_cancellable_isValid;

    m_is_deletable_isValid = ::OpenAPI::fromJsonValue(m_is_deletable, json[QString("isDeletable")]);
    m_is_deletable_isSet = !json[QString("isDeletable")].isNull() && m_is_deletable_isValid;

    m_is_shipping_address_editable_isValid = ::OpenAPI::fromJsonValue(m_is_shipping_address_editable, json[QString("isShippingAddressEditable")]);
    m_is_shipping_address_editable_isSet = !json[QString("isShippingAddressEditable")].isNull() && m_is_shipping_address_editable_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIJobProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cancellation_reason_isSet) {
        obj.insert(QString("cancellationReason"), ::OpenAPI::toJsonValue(m_cancellation_reason));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_is_cancellable_isSet) {
        obj.insert(QString("isCancellable"), ::OpenAPI::toJsonValue(m_is_cancellable));
    }
    if (m_is_deletable_isSet) {
        obj.insert(QString("isDeletable"), ::OpenAPI::toJsonValue(m_is_deletable));
    }
    if (m_is_shipping_address_editable_isSet) {
        obj.insert(QString("isShippingAddressEditable"), ::OpenAPI::toJsonValue(m_is_shipping_address_editable));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIJobProperties::getCancellationReason() const {
    return m_cancellation_reason;
}
void OAIJobProperties::setCancellationReason(const QString &cancellation_reason) {
    m_cancellation_reason = cancellation_reason;
    m_cancellation_reason_isSet = true;
}

bool OAIJobProperties::is_cancellation_reason_Set() const{
    return m_cancellation_reason_isSet;
}

bool OAIJobProperties::is_cancellation_reason_Valid() const{
    return m_cancellation_reason_isValid;
}

OAIJobDetails OAIJobProperties::getDetails() const {
    return m_details;
}
void OAIJobProperties::setDetails(const OAIJobDetails &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIJobProperties::is_details_Set() const{
    return m_details_isSet;
}

bool OAIJobProperties::is_details_Valid() const{
    return m_details_isValid;
}

OAIError OAIJobProperties::getError() const {
    return m_error;
}
void OAIJobProperties::setError(const OAIError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIJobProperties::is_error_Set() const{
    return m_error_isSet;
}

bool OAIJobProperties::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIJobProperties::isIsCancellable() const {
    return m_is_cancellable;
}
void OAIJobProperties::setIsCancellable(const bool &is_cancellable) {
    m_is_cancellable = is_cancellable;
    m_is_cancellable_isSet = true;
}

bool OAIJobProperties::is_is_cancellable_Set() const{
    return m_is_cancellable_isSet;
}

bool OAIJobProperties::is_is_cancellable_Valid() const{
    return m_is_cancellable_isValid;
}

bool OAIJobProperties::isIsDeletable() const {
    return m_is_deletable;
}
void OAIJobProperties::setIsDeletable(const bool &is_deletable) {
    m_is_deletable = is_deletable;
    m_is_deletable_isSet = true;
}

bool OAIJobProperties::is_is_deletable_Set() const{
    return m_is_deletable_isSet;
}

bool OAIJobProperties::is_is_deletable_Valid() const{
    return m_is_deletable_isValid;
}

bool OAIJobProperties::isIsShippingAddressEditable() const {
    return m_is_shipping_address_editable;
}
void OAIJobProperties::setIsShippingAddressEditable(const bool &is_shipping_address_editable) {
    m_is_shipping_address_editable = is_shipping_address_editable;
    m_is_shipping_address_editable_isSet = true;
}

bool OAIJobProperties::is_is_shipping_address_editable_Set() const{
    return m_is_shipping_address_editable_isSet;
}

bool OAIJobProperties::is_is_shipping_address_editable_Valid() const{
    return m_is_shipping_address_editable_isValid;
}

QDateTime OAIJobProperties::getStartTime() const {
    return m_start_time;
}
void OAIJobProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJobProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJobProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIJobProperties::getStatus() const {
    return m_status;
}
void OAIJobProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIJobProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancellation_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_cancellable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deletable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shipping_address_editable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
