/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataBoxDiskCopyProgress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataBoxDiskCopyProgress::OAIDataBoxDiskCopyProgress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataBoxDiskCopyProgress::OAIDataBoxDiskCopyProgress() {
    this->initializeModel();
}

OAIDataBoxDiskCopyProgress::~OAIDataBoxDiskCopyProgress() {}

void OAIDataBoxDiskCopyProgress::initializeModel() {

    m_bytes_copied_isSet = false;
    m_bytes_copied_isValid = false;

    m_percent_complete_isSet = false;
    m_percent_complete_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDataBoxDiskCopyProgress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataBoxDiskCopyProgress::fromJsonObject(QJsonObject json) {

    m_bytes_copied_isValid = ::OpenAPI::fromJsonValue(m_bytes_copied, json[QString("bytesCopied")]);
    m_bytes_copied_isSet = !json[QString("bytesCopied")].isNull() && m_bytes_copied_isValid;

    m_percent_complete_isValid = ::OpenAPI::fromJsonValue(m_percent_complete, json[QString("percentComplete")]);
    m_percent_complete_isSet = !json[QString("percentComplete")].isNull() && m_percent_complete_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDataBoxDiskCopyProgress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataBoxDiskCopyProgress::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_copied_isSet) {
        obj.insert(QString("bytesCopied"), ::OpenAPI::toJsonValue(m_bytes_copied));
    }
    if (m_percent_complete_isSet) {
        obj.insert(QString("percentComplete"), ::OpenAPI::toJsonValue(m_percent_complete));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint64 OAIDataBoxDiskCopyProgress::getBytesCopied() const {
    return m_bytes_copied;
}
void OAIDataBoxDiskCopyProgress::setBytesCopied(const qint64 &bytes_copied) {
    m_bytes_copied = bytes_copied;
    m_bytes_copied_isSet = true;
}

bool OAIDataBoxDiskCopyProgress::is_bytes_copied_Set() const{
    return m_bytes_copied_isSet;
}

bool OAIDataBoxDiskCopyProgress::is_bytes_copied_Valid() const{
    return m_bytes_copied_isValid;
}

qint32 OAIDataBoxDiskCopyProgress::getPercentComplete() const {
    return m_percent_complete;
}
void OAIDataBoxDiskCopyProgress::setPercentComplete(const qint32 &percent_complete) {
    m_percent_complete = percent_complete;
    m_percent_complete_isSet = true;
}

bool OAIDataBoxDiskCopyProgress::is_percent_complete_Set() const{
    return m_percent_complete_isSet;
}

bool OAIDataBoxDiskCopyProgress::is_percent_complete_Valid() const{
    return m_percent_complete_isValid;
}

QString OAIDataBoxDiskCopyProgress::getSerialNumber() const {
    return m_serial_number;
}
void OAIDataBoxDiskCopyProgress::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDataBoxDiskCopyProgress::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDataBoxDiskCopyProgress::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIDataBoxDiskCopyProgress::getStatus() const {
    return m_status;
}
void OAIDataBoxDiskCopyProgress::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDataBoxDiskCopyProgress::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDataBoxDiskCopyProgress::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDataBoxDiskCopyProgress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_copied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataBoxDiskCopyProgress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
