/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkuProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkuProperties::OAISkuProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkuProperties::OAISkuProperties() {
    this->initializeModel();
}

OAISkuProperties::~OAISkuProperties() {}

void OAISkuProperties::initializeModel() {

    m_api_versions_isSet = false;
    m_api_versions_isValid = false;

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_costs_isSet = false;
    m_costs_isValid = false;

    m_destination_to_service_location_map_isSet = false;
    m_destination_to_service_location_map_isValid = false;

    m_disabled_reason_isSet = false;
    m_disabled_reason_isValid = false;

    m_disabled_reason_message_isSet = false;
    m_disabled_reason_message_isValid = false;

    m_required_feature_isSet = false;
    m_required_feature_isValid = false;
}

void OAISkuProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkuProperties::fromJsonObject(QJsonObject json) {

    m_api_versions_isValid = ::OpenAPI::fromJsonValue(m_api_versions, json[QString("apiVersions")]);
    m_api_versions_isSet = !json[QString("apiVersions")].isNull() && m_api_versions_isValid;

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_costs_isValid = ::OpenAPI::fromJsonValue(m_costs, json[QString("costs")]);
    m_costs_isSet = !json[QString("costs")].isNull() && m_costs_isValid;

    m_destination_to_service_location_map_isValid = ::OpenAPI::fromJsonValue(m_destination_to_service_location_map, json[QString("destinationToServiceLocationMap")]);
    m_destination_to_service_location_map_isSet = !json[QString("destinationToServiceLocationMap")].isNull() && m_destination_to_service_location_map_isValid;

    m_disabled_reason_isValid = ::OpenAPI::fromJsonValue(m_disabled_reason, json[QString("disabledReason")]);
    m_disabled_reason_isSet = !json[QString("disabledReason")].isNull() && m_disabled_reason_isValid;

    m_disabled_reason_message_isValid = ::OpenAPI::fromJsonValue(m_disabled_reason_message, json[QString("disabledReasonMessage")]);
    m_disabled_reason_message_isSet = !json[QString("disabledReasonMessage")].isNull() && m_disabled_reason_message_isValid;

    m_required_feature_isValid = ::OpenAPI::fromJsonValue(m_required_feature, json[QString("requiredFeature")]);
    m_required_feature_isSet = !json[QString("requiredFeature")].isNull() && m_required_feature_isValid;
}

QString OAISkuProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkuProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_api_versions.size() > 0) {
        obj.insert(QString("apiVersions"), ::OpenAPI::toJsonValue(m_api_versions));
    }
    if (m_capacity.isSet()) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_costs.size() > 0) {
        obj.insert(QString("costs"), ::OpenAPI::toJsonValue(m_costs));
    }
    if (m_destination_to_service_location_map.size() > 0) {
        obj.insert(QString("destinationToServiceLocationMap"), ::OpenAPI::toJsonValue(m_destination_to_service_location_map));
    }
    if (m_disabled_reason_isSet) {
        obj.insert(QString("disabledReason"), ::OpenAPI::toJsonValue(m_disabled_reason));
    }
    if (m_disabled_reason_message_isSet) {
        obj.insert(QString("disabledReasonMessage"), ::OpenAPI::toJsonValue(m_disabled_reason_message));
    }
    if (m_required_feature_isSet) {
        obj.insert(QString("requiredFeature"), ::OpenAPI::toJsonValue(m_required_feature));
    }
    return obj;
}

QList<QString> OAISkuProperties::getApiVersions() const {
    return m_api_versions;
}
void OAISkuProperties::setApiVersions(const QList<QString> &api_versions) {
    m_api_versions = api_versions;
    m_api_versions_isSet = true;
}

bool OAISkuProperties::is_api_versions_Set() const{
    return m_api_versions_isSet;
}

bool OAISkuProperties::is_api_versions_Valid() const{
    return m_api_versions_isValid;
}

OAISkuCapacity OAISkuProperties::getCapacity() const {
    return m_capacity;
}
void OAISkuProperties::setCapacity(const OAISkuCapacity &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAISkuProperties::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAISkuProperties::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QList<OAISkuCost> OAISkuProperties::getCosts() const {
    return m_costs;
}
void OAISkuProperties::setCosts(const QList<OAISkuCost> &costs) {
    m_costs = costs;
    m_costs_isSet = true;
}

bool OAISkuProperties::is_costs_Set() const{
    return m_costs_isSet;
}

bool OAISkuProperties::is_costs_Valid() const{
    return m_costs_isValid;
}

QList<OAIDestinationToServiceLocationMap> OAISkuProperties::getDestinationToServiceLocationMap() const {
    return m_destination_to_service_location_map;
}
void OAISkuProperties::setDestinationToServiceLocationMap(const QList<OAIDestinationToServiceLocationMap> &destination_to_service_location_map) {
    m_destination_to_service_location_map = destination_to_service_location_map;
    m_destination_to_service_location_map_isSet = true;
}

bool OAISkuProperties::is_destination_to_service_location_map_Set() const{
    return m_destination_to_service_location_map_isSet;
}

bool OAISkuProperties::is_destination_to_service_location_map_Valid() const{
    return m_destination_to_service_location_map_isValid;
}

QString OAISkuProperties::getDisabledReason() const {
    return m_disabled_reason;
}
void OAISkuProperties::setDisabledReason(const QString &disabled_reason) {
    m_disabled_reason = disabled_reason;
    m_disabled_reason_isSet = true;
}

bool OAISkuProperties::is_disabled_reason_Set() const{
    return m_disabled_reason_isSet;
}

bool OAISkuProperties::is_disabled_reason_Valid() const{
    return m_disabled_reason_isValid;
}

QString OAISkuProperties::getDisabledReasonMessage() const {
    return m_disabled_reason_message;
}
void OAISkuProperties::setDisabledReasonMessage(const QString &disabled_reason_message) {
    m_disabled_reason_message = disabled_reason_message;
    m_disabled_reason_message_isSet = true;
}

bool OAISkuProperties::is_disabled_reason_message_Set() const{
    return m_disabled_reason_message_isSet;
}

bool OAISkuProperties::is_disabled_reason_message_Valid() const{
    return m_disabled_reason_message_isValid;
}

QString OAISkuProperties::getRequiredFeature() const {
    return m_required_feature;
}
void OAISkuProperties::setRequiredFeature(const QString &required_feature) {
    m_required_feature = required_feature;
    m_required_feature_isSet = true;
}

bool OAISkuProperties::is_required_feature_Set() const{
    return m_required_feature_isSet;
}

bool OAISkuProperties::is_required_feature_Valid() const{
    return m_required_feature_isValid;
}

bool OAISkuProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_costs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_to_service_location_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_reason_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_feature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkuProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
