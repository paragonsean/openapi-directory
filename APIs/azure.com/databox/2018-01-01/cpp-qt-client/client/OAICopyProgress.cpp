/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICopyProgress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICopyProgress::OAICopyProgress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICopyProgress::OAICopyProgress() {
    this->initializeModel();
}

OAICopyProgress::~OAICopyProgress() {}

void OAICopyProgress::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_bytes_sent_to_cloud_isSet = false;
    m_bytes_sent_to_cloud_isValid = false;

    m_files_processed_isSet = false;
    m_files_processed_isValid = false;

    m_storage_account_name_isSet = false;
    m_storage_account_name_isValid = false;

    m_total_bytes_to_process_isSet = false;
    m_total_bytes_to_process_isValid = false;

    m_total_files_to_process_isSet = false;
    m_total_files_to_process_isValid = false;
}

void OAICopyProgress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICopyProgress::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_bytes_sent_to_cloud_isValid = ::OpenAPI::fromJsonValue(m_bytes_sent_to_cloud, json[QString("bytesSentToCloud")]);
    m_bytes_sent_to_cloud_isSet = !json[QString("bytesSentToCloud")].isNull() && m_bytes_sent_to_cloud_isValid;

    m_files_processed_isValid = ::OpenAPI::fromJsonValue(m_files_processed, json[QString("filesProcessed")]);
    m_files_processed_isSet = !json[QString("filesProcessed")].isNull() && m_files_processed_isValid;

    m_storage_account_name_isValid = ::OpenAPI::fromJsonValue(m_storage_account_name, json[QString("storageAccountName")]);
    m_storage_account_name_isSet = !json[QString("storageAccountName")].isNull() && m_storage_account_name_isValid;

    m_total_bytes_to_process_isValid = ::OpenAPI::fromJsonValue(m_total_bytes_to_process, json[QString("totalBytesToProcess")]);
    m_total_bytes_to_process_isSet = !json[QString("totalBytesToProcess")].isNull() && m_total_bytes_to_process_isValid;

    m_total_files_to_process_isValid = ::OpenAPI::fromJsonValue(m_total_files_to_process, json[QString("totalFilesToProcess")]);
    m_total_files_to_process_isSet = !json[QString("totalFilesToProcess")].isNull() && m_total_files_to_process_isValid;
}

QString OAICopyProgress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICopyProgress::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_bytes_sent_to_cloud_isSet) {
        obj.insert(QString("bytesSentToCloud"), ::OpenAPI::toJsonValue(m_bytes_sent_to_cloud));
    }
    if (m_files_processed_isSet) {
        obj.insert(QString("filesProcessed"), ::OpenAPI::toJsonValue(m_files_processed));
    }
    if (m_storage_account_name_isSet) {
        obj.insert(QString("storageAccountName"), ::OpenAPI::toJsonValue(m_storage_account_name));
    }
    if (m_total_bytes_to_process_isSet) {
        obj.insert(QString("totalBytesToProcess"), ::OpenAPI::toJsonValue(m_total_bytes_to_process));
    }
    if (m_total_files_to_process_isSet) {
        obj.insert(QString("totalFilesToProcess"), ::OpenAPI::toJsonValue(m_total_files_to_process));
    }
    return obj;
}

QString OAICopyProgress::getAccountId() const {
    return m_account_id;
}
void OAICopyProgress::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICopyProgress::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICopyProgress::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint64 OAICopyProgress::getBytesSentToCloud() const {
    return m_bytes_sent_to_cloud;
}
void OAICopyProgress::setBytesSentToCloud(const qint64 &bytes_sent_to_cloud) {
    m_bytes_sent_to_cloud = bytes_sent_to_cloud;
    m_bytes_sent_to_cloud_isSet = true;
}

bool OAICopyProgress::is_bytes_sent_to_cloud_Set() const{
    return m_bytes_sent_to_cloud_isSet;
}

bool OAICopyProgress::is_bytes_sent_to_cloud_Valid() const{
    return m_bytes_sent_to_cloud_isValid;
}

qint64 OAICopyProgress::getFilesProcessed() const {
    return m_files_processed;
}
void OAICopyProgress::setFilesProcessed(const qint64 &files_processed) {
    m_files_processed = files_processed;
    m_files_processed_isSet = true;
}

bool OAICopyProgress::is_files_processed_Set() const{
    return m_files_processed_isSet;
}

bool OAICopyProgress::is_files_processed_Valid() const{
    return m_files_processed_isValid;
}

QString OAICopyProgress::getStorageAccountName() const {
    return m_storage_account_name;
}
void OAICopyProgress::setStorageAccountName(const QString &storage_account_name) {
    m_storage_account_name = storage_account_name;
    m_storage_account_name_isSet = true;
}

bool OAICopyProgress::is_storage_account_name_Set() const{
    return m_storage_account_name_isSet;
}

bool OAICopyProgress::is_storage_account_name_Valid() const{
    return m_storage_account_name_isValid;
}

qint64 OAICopyProgress::getTotalBytesToProcess() const {
    return m_total_bytes_to_process;
}
void OAICopyProgress::setTotalBytesToProcess(const qint64 &total_bytes_to_process) {
    m_total_bytes_to_process = total_bytes_to_process;
    m_total_bytes_to_process_isSet = true;
}

bool OAICopyProgress::is_total_bytes_to_process_Set() const{
    return m_total_bytes_to_process_isSet;
}

bool OAICopyProgress::is_total_bytes_to_process_Valid() const{
    return m_total_bytes_to_process_isValid;
}

qint64 OAICopyProgress::getTotalFilesToProcess() const {
    return m_total_files_to_process;
}
void OAICopyProgress::setTotalFilesToProcess(const qint64 &total_files_to_process) {
    m_total_files_to_process = total_files_to_process;
    m_total_files_to_process_isSet = true;
}

bool OAICopyProgress::is_total_files_to_process_Set() const{
    return m_total_files_to_process_isSet;
}

bool OAICopyProgress::is_total_files_to_process_Valid() const{
    return m_total_files_to_process_isValid;
}

bool OAICopyProgress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_sent_to_cloud_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_to_process_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_files_to_process_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICopyProgress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
