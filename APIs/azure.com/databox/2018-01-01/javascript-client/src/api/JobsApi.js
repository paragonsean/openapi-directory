/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancellationReason from '../model/CancellationReason';
import JobResource from '../model/JobResource';
import JobResourceList from '../model/JobResourceList';
import JobResourceUpdateParameter from '../model/JobResourceUpdateParameter';
import ShipmentPickUpRequest from '../model/ShipmentPickUpRequest';
import ShipmentPickUpResponse from '../model/ShipmentPickUpResponse';
import UnencryptedCredentialsList from '../model/UnencryptedCredentialsList';

/**
* Jobs service.
* @module api/JobsApi
* @version 2018-01-01
*/
export default class JobsApi {

    /**
    * Constructs a new JobsApi. 
    * @alias module:api/JobsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jobsBookShipmentPickUp operation.
     * @callback module:api/JobsApi~jobsBookShipmentPickUpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentPickUpResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Book shipment pick up.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:model/ShipmentPickUpRequest} shipmentPickUpRequest Details of shipment pick up request.
     * @param {module:api/JobsApi~jobsBookShipmentPickUpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShipmentPickUpResponse}
     */
    jobsBookShipmentPickUp(subscriptionId, resourceGroupName, jobName, apiVersion, shipmentPickUpRequest, callback) {
      let postBody = shipmentPickUpRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsBookShipmentPickUp");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsBookShipmentPickUp");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsBookShipmentPickUp");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsBookShipmentPickUp");
      }
      // verify the required parameter 'shipmentPickUpRequest' is set
      if (shipmentPickUpRequest === undefined || shipmentPickUpRequest === null) {
        throw new Error("Missing the required parameter 'shipmentPickUpRequest' when calling jobsBookShipmentPickUp");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShipmentPickUpResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/bookShipmentPickUp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsCancel operation.
     * @callback module:api/JobsApi~jobsCancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CancelJob.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:model/CancellationReason} cancellationReason Reason for cancellation.
     * @param {module:api/JobsApi~jobsCancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobsCancel(subscriptionId, resourceGroupName, jobName, apiVersion, cancellationReason, callback) {
      let postBody = cancellationReason;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsCancel");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsCancel");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsCancel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsCancel");
      }
      // verify the required parameter 'cancellationReason' is set
      if (cancellationReason === undefined || cancellationReason === null) {
        throw new Error("Missing the required parameter 'cancellationReason' when calling jobsCancel");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsCreate operation.
     * @callback module:api/JobsApi~jobsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:model/JobResource} jobResource Job details from request body.
     * @param {module:api/JobsApi~jobsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResource}
     */
    jobsCreate(subscriptionId, resourceGroupName, jobName, apiVersion, jobResource, callback) {
      let postBody = jobResource;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsCreate");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsCreate");
      }
      // verify the required parameter 'jobResource' is set
      if (jobResource === undefined || jobResource === null) {
        throw new Error("Missing the required parameter 'jobResource' when calling jobsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsDelete operation.
     * @callback module:api/JobsApi~jobsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a job.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:api/JobsApi~jobsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobsDelete(subscriptionId, resourceGroupName, jobName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsDelete");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsGet operation.
     * @callback module:api/JobsApi~jobsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified job.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {Object} opts Optional parameters
     * @param {String} [expand] $expand is supported on details parameter for job, which provides details on the job stages.
     * @param {module:api/JobsApi~jobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResource}
     */
    jobsGet(subscriptionId, resourceGroupName, jobName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsGet");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsList operation.
     * @callback module:api/JobsApi~jobsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the jobs available under the subscription.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} apiVersion The API Version
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.
     * @param {module:api/JobsApi~jobsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResourceList}
     */
    jobsList(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobResourceList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsListByResourceGroup operation.
     * @callback module:api/JobsApi~jobsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the jobs available under the given resource group.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} apiVersion The API Version
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs.
     * @param {module:api/JobsApi~jobsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResourceList}
     */
    jobsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobResourceList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsListCredentials operation.
     * @callback module:api/JobsApi~jobsListCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnencryptedCredentialsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method gets the unencrypted secrets related to the job.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:api/JobsApi~jobsListCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnencryptedCredentialsList}
     */
    jobsListCredentials(subscriptionId, resourceGroupName, jobName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsListCredentials");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsListCredentials");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsListCredentials");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsListCredentials");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnencryptedCredentialsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/listCredentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsUpdate operation.
     * @callback module:api/JobsApi~jobsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of an existing job.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:model/JobResourceUpdateParameter} jobResourceUpdateParameter Job update parameters from request body.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value.
     * @param {module:api/JobsApi~jobsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResource}
     */
    jobsUpdate(subscriptionId, resourceGroupName, jobName, apiVersion, jobResourceUpdateParameter, opts, callback) {
      opts = opts || {};
      let postBody = jobResourceUpdateParameter;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsUpdate");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsUpdate");
      }
      // verify the required parameter 'jobResourceUpdateParameter' is set
      if (jobResourceUpdateParameter === undefined || jobResourceUpdateParameter === null) {
        throw new Error("Missing the required parameter 'jobResourceUpdateParameter' when calling jobsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
