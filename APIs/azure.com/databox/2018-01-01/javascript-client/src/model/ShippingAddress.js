/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShippingAddress model module.
 * @module model/ShippingAddress
 * @version 2018-01-01
 */
class ShippingAddress {
    /**
     * Constructs a new <code>ShippingAddress</code>.
     * Shipping address where customer wishes to receive the device.
     * @alias module:model/ShippingAddress
     * @param country {String} Name of the Country.
     * @param postalCode {String} Postal code.
     * @param streetAddress1 {String} Street Address line 1.
     */
    constructor(country, postalCode, streetAddress1) { 
        
        ShippingAddress.initialize(this, country, postalCode, streetAddress1);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, postalCode, streetAddress1) { 
        obj['country'] = country;
        obj['postalCode'] = postalCode;
        obj['streetAddress1'] = streetAddress1;
    }

    /**
     * Constructs a <code>ShippingAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShippingAddress} obj Optional instance to populate.
     * @return {module:model/ShippingAddress} The populated <code>ShippingAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShippingAddress();

            if (data.hasOwnProperty('addressType')) {
                obj['addressType'] = ApiClient.convertToType(data['addressType'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('stateOrProvince')) {
                obj['stateOrProvince'] = ApiClient.convertToType(data['stateOrProvince'], 'String');
            }
            if (data.hasOwnProperty('streetAddress1')) {
                obj['streetAddress1'] = ApiClient.convertToType(data['streetAddress1'], 'String');
            }
            if (data.hasOwnProperty('streetAddress2')) {
                obj['streetAddress2'] = ApiClient.convertToType(data['streetAddress2'], 'String');
            }
            if (data.hasOwnProperty('streetAddress3')) {
                obj['streetAddress3'] = ApiClient.convertToType(data['streetAddress3'], 'String');
            }
            if (data.hasOwnProperty('zipExtendedCode')) {
                obj['zipExtendedCode'] = ApiClient.convertToType(data['zipExtendedCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShippingAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShippingAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShippingAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['addressType'] && !(typeof data['addressType'] === 'string' || data['addressType'] instanceof String)) {
            throw new Error("Expected the field `addressType` to be a primitive type in the JSON string but got " + data['addressType']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['stateOrProvince'] && !(typeof data['stateOrProvince'] === 'string' || data['stateOrProvince'] instanceof String)) {
            throw new Error("Expected the field `stateOrProvince` to be a primitive type in the JSON string but got " + data['stateOrProvince']);
        }
        // ensure the json data is a string
        if (data['streetAddress1'] && !(typeof data['streetAddress1'] === 'string' || data['streetAddress1'] instanceof String)) {
            throw new Error("Expected the field `streetAddress1` to be a primitive type in the JSON string but got " + data['streetAddress1']);
        }
        // ensure the json data is a string
        if (data['streetAddress2'] && !(typeof data['streetAddress2'] === 'string' || data['streetAddress2'] instanceof String)) {
            throw new Error("Expected the field `streetAddress2` to be a primitive type in the JSON string but got " + data['streetAddress2']);
        }
        // ensure the json data is a string
        if (data['streetAddress3'] && !(typeof data['streetAddress3'] === 'string' || data['streetAddress3'] instanceof String)) {
            throw new Error("Expected the field `streetAddress3` to be a primitive type in the JSON string but got " + data['streetAddress3']);
        }
        // ensure the json data is a string
        if (data['zipExtendedCode'] && !(typeof data['zipExtendedCode'] === 'string' || data['zipExtendedCode'] instanceof String)) {
            throw new Error("Expected the field `zipExtendedCode` to be a primitive type in the JSON string but got " + data['zipExtendedCode']);
        }

        return true;
    }


}

ShippingAddress.RequiredProperties = ["country", "postalCode", "streetAddress1"];

/**
 * Type of address.
 * @member {module:model/ShippingAddress.AddressTypeEnum} addressType
 */
ShippingAddress.prototype['addressType'] = undefined;

/**
 * Name of the City.
 * @member {String} city
 */
ShippingAddress.prototype['city'] = undefined;

/**
 * Name of the company.
 * @member {String} companyName
 */
ShippingAddress.prototype['companyName'] = undefined;

/**
 * Name of the Country.
 * @member {String} country
 */
ShippingAddress.prototype['country'] = undefined;

/**
 * Postal code.
 * @member {String} postalCode
 */
ShippingAddress.prototype['postalCode'] = undefined;

/**
 * Name of the State or Province.
 * @member {String} stateOrProvince
 */
ShippingAddress.prototype['stateOrProvince'] = undefined;

/**
 * Street Address line 1.
 * @member {String} streetAddress1
 */
ShippingAddress.prototype['streetAddress1'] = undefined;

/**
 * Street Address line 2.
 * @member {String} streetAddress2
 */
ShippingAddress.prototype['streetAddress2'] = undefined;

/**
 * Street Address line 3.
 * @member {String} streetAddress3
 */
ShippingAddress.prototype['streetAddress3'] = undefined;

/**
 * Extended Zip Code.
 * @member {String} zipExtendedCode
 */
ShippingAddress.prototype['zipExtendedCode'] = undefined;





/**
 * Allowed values for the <code>addressType</code> property.
 * @enum {String}
 * @readonly
 */
ShippingAddress['AddressTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Residential"
     * @const
     */
    "Residential": "Residential",

    /**
     * value: "Commercial"
     * @const
     */
    "Commercial": "Commercial"
};



export default ShippingAddress;

