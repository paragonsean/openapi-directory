/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationPreference from './NotificationPreference';

/**
 * The ContactDetails model module.
 * @module model/ContactDetails
 * @version 2018-01-01
 */
class ContactDetails {
    /**
     * Constructs a new <code>ContactDetails</code>.
     * Contact Details.
     * @alias module:model/ContactDetails
     * @param contactName {String} Contact name of the person.
     * @param emailList {Array.<String>} List of Email-ids to be notified about job progress.
     * @param phone {String} Phone number of the contact person.
     */
    constructor(contactName, emailList, phone) { 
        
        ContactDetails.initialize(this, contactName, emailList, phone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contactName, emailList, phone) { 
        obj['contactName'] = contactName;
        obj['emailList'] = emailList;
        obj['phone'] = phone;
    }

    /**
     * Constructs a <code>ContactDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactDetails} obj Optional instance to populate.
     * @return {module:model/ContactDetails} The populated <code>ContactDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactDetails();

            if (data.hasOwnProperty('contactName')) {
                obj['contactName'] = ApiClient.convertToType(data['contactName'], 'String');
            }
            if (data.hasOwnProperty('emailList')) {
                obj['emailList'] = ApiClient.convertToType(data['emailList'], ['String']);
            }
            if (data.hasOwnProperty('mobile')) {
                obj['mobile'] = ApiClient.convertToType(data['mobile'], 'String');
            }
            if (data.hasOwnProperty('notificationPreference')) {
                obj['notificationPreference'] = ApiClient.convertToType(data['notificationPreference'], [NotificationPreference]);
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('phoneExtension')) {
                obj['phoneExtension'] = ApiClient.convertToType(data['phoneExtension'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContactDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['contactName'] && !(typeof data['contactName'] === 'string' || data['contactName'] instanceof String)) {
            throw new Error("Expected the field `contactName` to be a primitive type in the JSON string but got " + data['contactName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['emailList'])) {
            throw new Error("Expected the field `emailList` to be an array in the JSON data but got " + data['emailList']);
        }
        // ensure the json data is a string
        if (data['mobile'] && !(typeof data['mobile'] === 'string' || data['mobile'] instanceof String)) {
            throw new Error("Expected the field `mobile` to be a primitive type in the JSON string but got " + data['mobile']);
        }
        if (data['notificationPreference']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notificationPreference'])) {
                throw new Error("Expected the field `notificationPreference` to be an array in the JSON data but got " + data['notificationPreference']);
            }
            // validate the optional field `notificationPreference` (array)
            for (const item of data['notificationPreference']) {
                NotificationPreference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['phoneExtension'] && !(typeof data['phoneExtension'] === 'string' || data['phoneExtension'] instanceof String)) {
            throw new Error("Expected the field `phoneExtension` to be a primitive type in the JSON string but got " + data['phoneExtension']);
        }

        return true;
    }


}

ContactDetails.RequiredProperties = ["contactName", "emailList", "phone"];

/**
 * Contact name of the person.
 * @member {String} contactName
 */
ContactDetails.prototype['contactName'] = undefined;

/**
 * List of Email-ids to be notified about job progress.
 * @member {Array.<String>} emailList
 */
ContactDetails.prototype['emailList'] = undefined;

/**
 * Mobile number of the contact person.
 * @member {String} mobile
 */
ContactDetails.prototype['mobile'] = undefined;

/**
 * Notification preference for a job stage.
 * @member {Array.<module:model/NotificationPreference>} notificationPreference
 */
ContactDetails.prototype['notificationPreference'] = undefined;

/**
 * Phone number of the contact person.
 * @member {String} phone
 */
ContactDetails.prototype['phone'] = undefined;

/**
 * Phone extension number of the contact person.
 * @member {String} phoneExtension
 */
ContactDetails.prototype['phoneExtension'] = undefined;






export default ContactDetails;

