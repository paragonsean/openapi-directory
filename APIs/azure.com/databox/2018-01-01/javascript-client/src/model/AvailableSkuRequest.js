/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AvailableSkuRequest model module.
 * @module model/AvailableSkuRequest
 * @version 2018-01-01
 */
class AvailableSkuRequest {
    /**
     * Constructs a new <code>AvailableSkuRequest</code>.
     * The filters for showing the available skus.
     * @alias module:model/AvailableSkuRequest
     * @param country {String} ISO country code. Country for hardware shipment. For codes check: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements
     * @param location {String} Location for data transfer. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01
     * @param transferType {module:model/AvailableSkuRequest.TransferTypeEnum} Type of the transfer.
     */
    constructor(country, location, transferType) { 
        
        AvailableSkuRequest.initialize(this, country, location, transferType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, location, transferType) { 
        obj['country'] = country;
        obj['location'] = location;
        obj['transferType'] = transferType;
    }

    /**
     * Constructs a <code>AvailableSkuRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailableSkuRequest} obj Optional instance to populate.
     * @return {module:model/AvailableSkuRequest} The populated <code>AvailableSkuRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailableSkuRequest();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('skuNames')) {
                obj['skuNames'] = ApiClient.convertToType(data['skuNames'], ['String']);
            }
            if (data.hasOwnProperty('transferType')) {
                obj['transferType'] = ApiClient.convertToType(data['transferType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailableSkuRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailableSkuRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AvailableSkuRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['skuNames'])) {
            throw new Error("Expected the field `skuNames` to be an array in the JSON data but got " + data['skuNames']);
        }
        // ensure the json data is a string
        if (data['transferType'] && !(typeof data['transferType'] === 'string' || data['transferType'] instanceof String)) {
            throw new Error("Expected the field `transferType` to be a primitive type in the JSON string but got " + data['transferType']);
        }

        return true;
    }


}

AvailableSkuRequest.RequiredProperties = ["country", "location", "transferType"];

/**
 * ISO country code. Country for hardware shipment. For codes check: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements
 * @member {String} country
 */
AvailableSkuRequest.prototype['country'] = undefined;

/**
 * Location for data transfer. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01
 * @member {String} location
 */
AvailableSkuRequest.prototype['location'] = undefined;

/**
 * Sku Names to filter for available skus
 * @member {Array.<module:model/AvailableSkuRequest.SkuNamesEnum>} skuNames
 */
AvailableSkuRequest.prototype['skuNames'] = undefined;

/**
 * Type of the transfer.
 * @member {module:model/AvailableSkuRequest.TransferTypeEnum} transferType
 */
AvailableSkuRequest.prototype['transferType'] = undefined;





/**
 * Allowed values for the <code>skuNames</code> property.
 * @enum {String}
 * @readonly
 */
AvailableSkuRequest['SkuNamesEnum'] = {

    /**
     * value: "DataBox"
     * @const
     */
    "DataBox": "DataBox",

    /**
     * value: "DataBoxDisk"
     * @const
     */
    "DataBoxDisk": "DataBoxDisk",

    /**
     * value: "DataBoxHeavy"
     * @const
     */
    "DataBoxHeavy": "DataBoxHeavy"
};


/**
 * Allowed values for the <code>transferType</code> property.
 * @enum {String}
 * @readonly
 */
AvailableSkuRequest['TransferTypeEnum'] = {

    /**
     * value: "ImportToAzure"
     * @const
     */
    "ImportToAzure": "ImportToAzure"
};



export default AvailableSkuRequest;

