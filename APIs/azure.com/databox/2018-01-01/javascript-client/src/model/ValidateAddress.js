/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ShippingAddress from './ShippingAddress';

/**
 * The ValidateAddress model module.
 * @module model/ValidateAddress
 * @version 2018-01-01
 */
class ValidateAddress {
    /**
     * Constructs a new <code>ValidateAddress</code>.
     * The requirements to validate customer address where the device needs to be shipped.
     * @alias module:model/ValidateAddress
     * @param deviceType {module:model/ValidateAddress.DeviceTypeEnum} Device type to be used for the job.
     * @param shippingAddress {module:model/ShippingAddress} 
     */
    constructor(deviceType, shippingAddress) { 
        
        ValidateAddress.initialize(this, deviceType, shippingAddress);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceType, shippingAddress) { 
        obj['deviceType'] = deviceType;
        obj['shippingAddress'] = shippingAddress;
    }

    /**
     * Constructs a <code>ValidateAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValidateAddress} obj Optional instance to populate.
     * @return {module:model/ValidateAddress} The populated <code>ValidateAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValidateAddress();

            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
            }
            if (data.hasOwnProperty('shippingAddress')) {
                obj['shippingAddress'] = ShippingAddress.constructFromObject(data['shippingAddress']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValidateAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValidateAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ValidateAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['deviceType'] && !(typeof data['deviceType'] === 'string' || data['deviceType'] instanceof String)) {
            throw new Error("Expected the field `deviceType` to be a primitive type in the JSON string but got " + data['deviceType']);
        }
        // validate the optional field `shippingAddress`
        if (data['shippingAddress']) { // data not null
          ShippingAddress.validateJSON(data['shippingAddress']);
        }

        return true;
    }


}

ValidateAddress.RequiredProperties = ["deviceType", "shippingAddress"];

/**
 * Device type to be used for the job.
 * @member {module:model/ValidateAddress.DeviceTypeEnum} deviceType
 */
ValidateAddress.prototype['deviceType'] = undefined;

/**
 * @member {module:model/ShippingAddress} shippingAddress
 */
ValidateAddress.prototype['shippingAddress'] = undefined;





/**
 * Allowed values for the <code>deviceType</code> property.
 * @enum {String}
 * @readonly
 */
ValidateAddress['DeviceTypeEnum'] = {

    /**
     * value: "DataBox"
     * @const
     */
    "DataBox": "DataBox",

    /**
     * value: "DataBoxDisk"
     * @const
     */
    "DataBoxDisk": "DataBoxDisk",

    /**
     * value: "DataBoxHeavy"
     * @const
     */
    "DataBoxHeavy": "DataBoxHeavy"
};



export default ValidateAddress;

