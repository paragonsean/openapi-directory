/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinationToServiceLocationMap from './DestinationToServiceLocationMap';
import SkuCapacity from './SkuCapacity';
import SkuCost from './SkuCost';

/**
 * The SkuProperties model module.
 * @module model/SkuProperties
 * @version 2018-01-01
 */
class SkuProperties {
    /**
     * Constructs a new <code>SkuProperties</code>.
     * Properties of the sku.
     * @alias module:model/SkuProperties
     */
    constructor() { 
        
        SkuProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SkuProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SkuProperties} obj Optional instance to populate.
     * @return {module:model/SkuProperties} The populated <code>SkuProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SkuProperties();

            if (data.hasOwnProperty('apiVersions')) {
                obj['apiVersions'] = ApiClient.convertToType(data['apiVersions'], ['String']);
            }
            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = SkuCapacity.constructFromObject(data['capacity']);
            }
            if (data.hasOwnProperty('costs')) {
                obj['costs'] = ApiClient.convertToType(data['costs'], [SkuCost]);
            }
            if (data.hasOwnProperty('destinationToServiceLocationMap')) {
                obj['destinationToServiceLocationMap'] = ApiClient.convertToType(data['destinationToServiceLocationMap'], [DestinationToServiceLocationMap]);
            }
            if (data.hasOwnProperty('disabledReason')) {
                obj['disabledReason'] = ApiClient.convertToType(data['disabledReason'], 'String');
            }
            if (data.hasOwnProperty('disabledReasonMessage')) {
                obj['disabledReasonMessage'] = ApiClient.convertToType(data['disabledReasonMessage'], 'String');
            }
            if (data.hasOwnProperty('requiredFeature')) {
                obj['requiredFeature'] = ApiClient.convertToType(data['requiredFeature'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SkuProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SkuProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['apiVersions'])) {
            throw new Error("Expected the field `apiVersions` to be an array in the JSON data but got " + data['apiVersions']);
        }
        // validate the optional field `capacity`
        if (data['capacity']) { // data not null
          SkuCapacity.validateJSON(data['capacity']);
        }
        if (data['costs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['costs'])) {
                throw new Error("Expected the field `costs` to be an array in the JSON data but got " + data['costs']);
            }
            // validate the optional field `costs` (array)
            for (const item of data['costs']) {
                SkuCost.validateJSON(item);
            };
        }
        if (data['destinationToServiceLocationMap']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destinationToServiceLocationMap'])) {
                throw new Error("Expected the field `destinationToServiceLocationMap` to be an array in the JSON data but got " + data['destinationToServiceLocationMap']);
            }
            // validate the optional field `destinationToServiceLocationMap` (array)
            for (const item of data['destinationToServiceLocationMap']) {
                DestinationToServiceLocationMap.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['disabledReason'] && !(typeof data['disabledReason'] === 'string' || data['disabledReason'] instanceof String)) {
            throw new Error("Expected the field `disabledReason` to be a primitive type in the JSON string but got " + data['disabledReason']);
        }
        // ensure the json data is a string
        if (data['disabledReasonMessage'] && !(typeof data['disabledReasonMessage'] === 'string' || data['disabledReasonMessage'] instanceof String)) {
            throw new Error("Expected the field `disabledReasonMessage` to be a primitive type in the JSON string but got " + data['disabledReasonMessage']);
        }
        // ensure the json data is a string
        if (data['requiredFeature'] && !(typeof data['requiredFeature'] === 'string' || data['requiredFeature'] instanceof String)) {
            throw new Error("Expected the field `requiredFeature` to be a primitive type in the JSON string but got " + data['requiredFeature']);
        }

        return true;
    }


}



/**
 * Api versions that support this Sku.
 * @member {Array.<String>} apiVersions
 */
SkuProperties.prototype['apiVersions'] = undefined;

/**
 * @member {module:model/SkuCapacity} capacity
 */
SkuProperties.prototype['capacity'] = undefined;

/**
 * Cost of the Sku.
 * @member {Array.<module:model/SkuCost>} costs
 */
SkuProperties.prototype['costs'] = undefined;

/**
 * The map of destination location to service location.
 * @member {Array.<module:model/DestinationToServiceLocationMap>} destinationToServiceLocationMap
 */
SkuProperties.prototype['destinationToServiceLocationMap'] = undefined;

/**
 * Reason why the Sku is disabled.
 * @member {module:model/SkuProperties.DisabledReasonEnum} disabledReason
 */
SkuProperties.prototype['disabledReason'] = undefined;

/**
 * Message for why the Sku is disabled.
 * @member {String} disabledReasonMessage
 */
SkuProperties.prototype['disabledReasonMessage'] = undefined;

/**
 * Required feature to access the sku.
 * @member {String} requiredFeature
 */
SkuProperties.prototype['requiredFeature'] = undefined;





/**
 * Allowed values for the <code>disabledReason</code> property.
 * @enum {String}
 * @readonly
 */
SkuProperties['DisabledReasonEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Country"
     * @const
     */
    "Country": "Country",

    /**
     * value: "Region"
     * @const
     */
    "Region": "Region",

    /**
     * value: "Feature"
     * @const
     */
    "Feature": "Feature",

    /**
     * value: "OfferType"
     * @const
     */
    "OfferType": "OfferType",

    /**
     * value: "NoSubscriptionInfo"
     * @const
     */
    "NoSubscriptionInfo": "NoSubscriptionInfo"
};



export default SkuProperties;

