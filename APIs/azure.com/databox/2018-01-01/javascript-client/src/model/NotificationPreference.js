/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationPreference model module.
 * @module model/NotificationPreference
 * @version 2018-01-01
 */
class NotificationPreference {
    /**
     * Constructs a new <code>NotificationPreference</code>.
     * Notification preference for a job stage.
     * @alias module:model/NotificationPreference
     * @param sendNotification {Boolean} Notification is required or not.
     * @param stageName {module:model/NotificationPreference.StageNameEnum} Name of the stage.
     */
    constructor(sendNotification, stageName) { 
        
        NotificationPreference.initialize(this, sendNotification, stageName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sendNotification, stageName) { 
        obj['sendNotification'] = sendNotification;
        obj['stageName'] = stageName;
    }

    /**
     * Constructs a <code>NotificationPreference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationPreference} obj Optional instance to populate.
     * @return {module:model/NotificationPreference} The populated <code>NotificationPreference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationPreference();

            if (data.hasOwnProperty('sendNotification')) {
                obj['sendNotification'] = ApiClient.convertToType(data['sendNotification'], 'Boolean');
            }
            if (data.hasOwnProperty('stageName')) {
                obj['stageName'] = ApiClient.convertToType(data['stageName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationPreference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationPreference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotificationPreference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['stageName'] && !(typeof data['stageName'] === 'string' || data['stageName'] instanceof String)) {
            throw new Error("Expected the field `stageName` to be a primitive type in the JSON string but got " + data['stageName']);
        }

        return true;
    }


}

NotificationPreference.RequiredProperties = ["sendNotification", "stageName"];

/**
 * Notification is required or not.
 * @member {Boolean} sendNotification
 */
NotificationPreference.prototype['sendNotification'] = undefined;

/**
 * Name of the stage.
 * @member {module:model/NotificationPreference.StageNameEnum} stageName
 */
NotificationPreference.prototype['stageName'] = undefined;





/**
 * Allowed values for the <code>stageName</code> property.
 * @enum {String}
 * @readonly
 */
NotificationPreference['StageNameEnum'] = {

    /**
     * value: "DevicePrepared"
     * @const
     */
    "DevicePrepared": "DevicePrepared",

    /**
     * value: "Dispatched"
     * @const
     */
    "Dispatched": "Dispatched",

    /**
     * value: "Delivered"
     * @const
     */
    "Delivered": "Delivered",

    /**
     * value: "PickedUp"
     * @const
     */
    "PickedUp": "PickedUp",

    /**
     * value: "AtAzureDC"
     * @const
     */
    "AtAzureDC": "AtAzureDC",

    /**
     * value: "DataCopy"
     * @const
     */
    "DataCopy": "DataCopy"
};



export default NotificationPreference;

