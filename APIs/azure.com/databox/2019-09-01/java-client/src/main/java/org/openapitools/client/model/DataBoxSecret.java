/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountCredentialDetails;
import org.openapitools.client.model.ApplianceNetworkConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The secrets related to a DataBox.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:48.970368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataBoxSecret {
  public static final String SERIALIZED_NAME_ACCOUNT_CREDENTIAL_DETAILS = "accountCredentialDetails";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CREDENTIAL_DETAILS)
  private List<AccountCredentialDetails> accountCredentialDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEVICE_PASSWORD = "devicePassword";
  @SerializedName(SERIALIZED_NAME_DEVICE_PASSWORD)
  private String devicePassword;

  public static final String SERIALIZED_NAME_DEVICE_SERIAL_NUMBER = "deviceSerialNumber";
  @SerializedName(SERIALIZED_NAME_DEVICE_SERIAL_NUMBER)
  private String deviceSerialNumber;

  public static final String SERIALIZED_NAME_ENCODED_VALIDATION_CERT_PUB_KEY = "encodedValidationCertPubKey";
  @SerializedName(SERIALIZED_NAME_ENCODED_VALIDATION_CERT_PUB_KEY)
  private String encodedValidationCertPubKey;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATIONS = "networkConfigurations";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATIONS)
  private List<ApplianceNetworkConfiguration> networkConfigurations = new ArrayList<>();

  public DataBoxSecret() {
  }

  public DataBoxSecret(
     List<AccountCredentialDetails> accountCredentialDetails, 
     String devicePassword, 
     String deviceSerialNumber, 
     String encodedValidationCertPubKey, 
     List<ApplianceNetworkConfiguration> networkConfigurations
  ) {
    this();
    this.accountCredentialDetails = accountCredentialDetails;
    this.devicePassword = devicePassword;
    this.deviceSerialNumber = deviceSerialNumber;
    this.encodedValidationCertPubKey = encodedValidationCertPubKey;
    this.networkConfigurations = networkConfigurations;
  }

  /**
   * Per account level access credentials.
   * @return accountCredentialDetails
   */
  @javax.annotation.Nullable
  public List<AccountCredentialDetails> getAccountCredentialDetails() {
    return accountCredentialDetails;
  }



  /**
   * Password for out of the box experience on device.
   * @return devicePassword
   */
  @javax.annotation.Nullable
  public String getDevicePassword() {
    return devicePassword;
  }



  /**
   * Serial number of the assigned device.
   * @return deviceSerialNumber
   */
  @javax.annotation.Nullable
  public String getDeviceSerialNumber() {
    return deviceSerialNumber;
  }



  /**
   * The base 64 encoded public key to authenticate with the device
   * @return encodedValidationCertPubKey
   */
  @javax.annotation.Nullable
  public String getEncodedValidationCertPubKey() {
    return encodedValidationCertPubKey;
  }



  /**
   * Network configuration of the appliance.
   * @return networkConfigurations
   */
  @javax.annotation.Nullable
  public List<ApplianceNetworkConfiguration> getNetworkConfigurations() {
    return networkConfigurations;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataBoxSecret dataBoxSecret = (DataBoxSecret) o;
    return Objects.equals(this.accountCredentialDetails, dataBoxSecret.accountCredentialDetails) &&
        Objects.equals(this.devicePassword, dataBoxSecret.devicePassword) &&
        Objects.equals(this.deviceSerialNumber, dataBoxSecret.deviceSerialNumber) &&
        Objects.equals(this.encodedValidationCertPubKey, dataBoxSecret.encodedValidationCertPubKey) &&
        Objects.equals(this.networkConfigurations, dataBoxSecret.networkConfigurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCredentialDetails, devicePassword, deviceSerialNumber, encodedValidationCertPubKey, networkConfigurations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataBoxSecret {\n");
    sb.append("    accountCredentialDetails: ").append(toIndentedString(accountCredentialDetails)).append("\n");
    sb.append("    devicePassword: ").append(toIndentedString(devicePassword)).append("\n");
    sb.append("    deviceSerialNumber: ").append(toIndentedString(deviceSerialNumber)).append("\n");
    sb.append("    encodedValidationCertPubKey: ").append(toIndentedString(encodedValidationCertPubKey)).append("\n");
    sb.append("    networkConfigurations: ").append(toIndentedString(networkConfigurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountCredentialDetails");
    openapiFields.add("devicePassword");
    openapiFields.add("deviceSerialNumber");
    openapiFields.add("encodedValidationCertPubKey");
    openapiFields.add("networkConfigurations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataBoxSecret
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataBoxSecret.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataBoxSecret is not found in the empty JSON string", DataBoxSecret.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataBoxSecret.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataBoxSecret` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accountCredentialDetails") != null && !jsonObj.get("accountCredentialDetails").isJsonNull()) {
        JsonArray jsonArrayaccountCredentialDetails = jsonObj.getAsJsonArray("accountCredentialDetails");
        if (jsonArrayaccountCredentialDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accountCredentialDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accountCredentialDetails` to be an array in the JSON string but got `%s`", jsonObj.get("accountCredentialDetails").toString()));
          }

          // validate the optional field `accountCredentialDetails` (array)
          for (int i = 0; i < jsonArrayaccountCredentialDetails.size(); i++) {
            AccountCredentialDetails.validateJsonElement(jsonArrayaccountCredentialDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("devicePassword") != null && !jsonObj.get("devicePassword").isJsonNull()) && !jsonObj.get("devicePassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `devicePassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("devicePassword").toString()));
      }
      if ((jsonObj.get("deviceSerialNumber") != null && !jsonObj.get("deviceSerialNumber").isJsonNull()) && !jsonObj.get("deviceSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceSerialNumber").toString()));
      }
      if ((jsonObj.get("encodedValidationCertPubKey") != null && !jsonObj.get("encodedValidationCertPubKey").isJsonNull()) && !jsonObj.get("encodedValidationCertPubKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encodedValidationCertPubKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encodedValidationCertPubKey").toString()));
      }
      if (jsonObj.get("networkConfigurations") != null && !jsonObj.get("networkConfigurations").isJsonNull()) {
        JsonArray jsonArraynetworkConfigurations = jsonObj.getAsJsonArray("networkConfigurations");
        if (jsonArraynetworkConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("networkConfigurations").toString()));
          }

          // validate the optional field `networkConfigurations` (array)
          for (int i = 0; i < jsonArraynetworkConfigurations.size(); i++) {
            ApplianceNetworkConfiguration.validateJsonElement(jsonArraynetworkConfigurations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataBoxSecret.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataBoxSecret' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataBoxSecret> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataBoxSecret.class));

       return (TypeAdapter<T>) new TypeAdapter<DataBoxSecret>() {
           @Override
           public void write(JsonWriter out, DataBoxSecret value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataBoxSecret read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataBoxSecret given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataBoxSecret
   * @throws IOException if the JSON string is invalid with respect to DataBoxSecret
   */
  public static DataBoxSecret fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataBoxSecret.class);
  }

  /**
   * Convert an instance of DataBoxSecret to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

