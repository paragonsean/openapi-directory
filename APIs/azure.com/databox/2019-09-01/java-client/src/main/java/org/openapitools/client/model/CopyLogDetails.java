/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details for log generated during copy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:48.970368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CopyLogDetails {
  /**
   * Indicates the type of job details.
   */
  @JsonAdapter(CopyLogDetailsTypeEnum.Adapter.class)
  public enum CopyLogDetailsTypeEnum {
    DATA_BOX("DataBox"),
    
    DATA_BOX_DISK("DataBoxDisk"),
    
    DATA_BOX_HEAVY("DataBoxHeavy");

    private String value;

    CopyLogDetailsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CopyLogDetailsTypeEnum fromValue(String value) {
      for (CopyLogDetailsTypeEnum b : CopyLogDetailsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CopyLogDetailsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CopyLogDetailsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CopyLogDetailsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CopyLogDetailsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CopyLogDetailsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COPY_LOG_DETAILS_TYPE = "copyLogDetailsType";
  @SerializedName(SERIALIZED_NAME_COPY_LOG_DETAILS_TYPE)
  protected CopyLogDetailsTypeEnum copyLogDetailsType;

  public CopyLogDetails() {
  }

  public CopyLogDetails copyLogDetailsType(CopyLogDetailsTypeEnum copyLogDetailsType) {
    this.copyLogDetailsType = copyLogDetailsType;
    return this;
  }

  /**
   * Indicates the type of job details.
   * @return copyLogDetailsType
   */
  @javax.annotation.Nonnull
  public CopyLogDetailsTypeEnum getCopyLogDetailsType() {
    return copyLogDetailsType;
  }

  public void setCopyLogDetailsType(CopyLogDetailsTypeEnum copyLogDetailsType) {
    this.copyLogDetailsType = copyLogDetailsType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopyLogDetails copyLogDetails = (CopyLogDetails) o;
    return Objects.equals(this.copyLogDetailsType, copyLogDetails.copyLogDetailsType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyLogDetailsType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopyLogDetails {\n");
    sb.append("    copyLogDetailsType: ").append(toIndentedString(copyLogDetailsType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("copyLogDetailsType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("copyLogDetailsType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CopyLogDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CopyLogDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CopyLogDetails is not found in the empty JSON string", CopyLogDetails.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("copyLogDetailsType").getAsString();
      switch (discriminatorValue) {
        case "DataBoxAccountCopyLogDetails":
          DataBoxAccountCopyLogDetails.validateJsonElement(jsonElement);
          break;
        case "DataBoxDiskCopyLogDetails":
          DataBoxDiskCopyLogDetails.validateJsonElement(jsonElement);
          break;
        case "DataBoxHeavyAccountCopyLogDetails":
          DataBoxHeavyAccountCopyLogDetails.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `copyLogDetailsType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of CopyLogDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CopyLogDetails
   * @throws IOException if the JSON string is invalid with respect to CopyLogDetails
   */
  public static CopyLogDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CopyLogDetails.class);
  }

  /**
   * Convert an instance of CopyLogDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

