/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JobErrorDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Job stages.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:48.970368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobStages {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ERROR_DETAILS = "errorDetails";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAILS)
  private List<JobErrorDetails> errorDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_STAGE_DETAILS = "jobStageDetails";
  @SerializedName(SERIALIZED_NAME_JOB_STAGE_DETAILS)
  private Object jobStageDetails;

  /**
   * Name of the job stage.
   */
  @JsonAdapter(StageNameEnum.Adapter.class)
  public enum StageNameEnum {
    DEVICE_ORDERED("DeviceOrdered"),
    
    DEVICE_PREPARED("DevicePrepared"),
    
    DISPATCHED("Dispatched"),
    
    DELIVERED("Delivered"),
    
    PICKED_UP("PickedUp"),
    
    AT_AZURE_DC("AtAzureDC"),
    
    DATA_COPY("DataCopy"),
    
    COMPLETED("Completed"),
    
    COMPLETED_WITH_ERRORS("CompletedWithErrors"),
    
    CANCELLED("Cancelled"),
    
    FAILED_ISSUE_REPORTED_AT_CUSTOMER("Failed_IssueReportedAtCustomer"),
    
    FAILED_ISSUE_DETECTED_AT_AZURE_DC("Failed_IssueDetectedAtAzureDC"),
    
    ABORTED("Aborted"),
    
    COMPLETED_WITH_WARNINGS("CompletedWithWarnings"),
    
    READY_TO_DISPATCH_FROM_AZURE_DC("ReadyToDispatchFromAzureDC"),
    
    READY_TO_RECEIVE_AT_AZURE_DC("ReadyToReceiveAtAzureDC");

    private String value;

    StageNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StageNameEnum fromValue(String value) {
      for (StageNameEnum b : StageNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StageNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StageNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StageNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StageNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StageNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STAGE_NAME = "stageName";
  @SerializedName(SERIALIZED_NAME_STAGE_NAME)
  private StageNameEnum stageName;

  /**
   * Status of the job stage.
   */
  @JsonAdapter(StageStatusEnum.Adapter.class)
  public enum StageStatusEnum {
    NONE("None"),
    
    IN_PROGRESS("InProgress"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELLED("Cancelled"),
    
    CANCELLING("Cancelling"),
    
    SUCCEEDED_WITH_ERRORS("SucceededWithErrors");

    private String value;

    StageStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StageStatusEnum fromValue(String value) {
      for (StageStatusEnum b : StageStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StageStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StageStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StageStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StageStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StageStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STAGE_STATUS = "stageStatus";
  @SerializedName(SERIALIZED_NAME_STAGE_STATUS)
  private StageStatusEnum stageStatus;

  public static final String SERIALIZED_NAME_STAGE_TIME = "stageTime";
  @SerializedName(SERIALIZED_NAME_STAGE_TIME)
  private OffsetDateTime stageTime;

  public JobStages() {
  }

  public JobStages(
     String displayName, 
     List<JobErrorDetails> errorDetails, 
     Object jobStageDetails, 
     StageNameEnum stageName, 
     StageStatusEnum stageStatus, 
     OffsetDateTime stageTime
  ) {
    this();
    this.displayName = displayName;
    this.errorDetails = errorDetails;
    this.jobStageDetails = jobStageDetails;
    this.stageName = stageName;
    this.stageStatus = stageStatus;
    this.stageTime = stageTime;
  }

  /**
   * Display name of the job stage.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Error details for the stage.
   * @return errorDetails
   */
  @javax.annotation.Nullable
  public List<JobErrorDetails> getErrorDetails() {
    return errorDetails;
  }



  /**
   * Job Stage Details
   * @return jobStageDetails
   */
  @javax.annotation.Nullable
  public Object getJobStageDetails() {
    return jobStageDetails;
  }



  /**
   * Name of the job stage.
   * @return stageName
   */
  @javax.annotation.Nullable
  public StageNameEnum getStageName() {
    return stageName;
  }



  /**
   * Status of the job stage.
   * @return stageStatus
   */
  @javax.annotation.Nullable
  public StageStatusEnum getStageStatus() {
    return stageStatus;
  }



  /**
   * Time for the job stage in UTC ISO 8601 format.
   * @return stageTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStageTime() {
    return stageTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobStages jobStages = (JobStages) o;
    return Objects.equals(this.displayName, jobStages.displayName) &&
        Objects.equals(this.errorDetails, jobStages.errorDetails) &&
        Objects.equals(this.jobStageDetails, jobStages.jobStageDetails) &&
        Objects.equals(this.stageName, jobStages.stageName) &&
        Objects.equals(this.stageStatus, jobStages.stageStatus) &&
        Objects.equals(this.stageTime, jobStages.stageTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, errorDetails, jobStageDetails, stageName, stageStatus, stageTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobStages {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("    jobStageDetails: ").append(toIndentedString(jobStageDetails)).append("\n");
    sb.append("    stageName: ").append(toIndentedString(stageName)).append("\n");
    sb.append("    stageStatus: ").append(toIndentedString(stageStatus)).append("\n");
    sb.append("    stageTime: ").append(toIndentedString(stageTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("errorDetails");
    openapiFields.add("jobStageDetails");
    openapiFields.add("stageName");
    openapiFields.add("stageStatus");
    openapiFields.add("stageTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobStages
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobStages.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobStages is not found in the empty JSON string", JobStages.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobStages.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobStages` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("errorDetails") != null && !jsonObj.get("errorDetails").isJsonNull()) {
        JsonArray jsonArrayerrorDetails = jsonObj.getAsJsonArray("errorDetails");
        if (jsonArrayerrorDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errorDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errorDetails` to be an array in the JSON string but got `%s`", jsonObj.get("errorDetails").toString()));
          }

          // validate the optional field `errorDetails` (array)
          for (int i = 0; i < jsonArrayerrorDetails.size(); i++) {
            JobErrorDetails.validateJsonElement(jsonArrayerrorDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("stageName") != null && !jsonObj.get("stageName").isJsonNull()) && !jsonObj.get("stageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stageName").toString()));
      }
      // validate the optional field `stageName`
      if (jsonObj.get("stageName") != null && !jsonObj.get("stageName").isJsonNull()) {
        StageNameEnum.validateJsonElement(jsonObj.get("stageName"));
      }
      if ((jsonObj.get("stageStatus") != null && !jsonObj.get("stageStatus").isJsonNull()) && !jsonObj.get("stageStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stageStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stageStatus").toString()));
      }
      // validate the optional field `stageStatus`
      if (jsonObj.get("stageStatus") != null && !jsonObj.get("stageStatus").isJsonNull()) {
        StageStatusEnum.validateJsonElement(jsonObj.get("stageStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobStages.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobStages' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobStages> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobStages.class));

       return (TypeAdapter<T>) new TypeAdapter<JobStages>() {
           @Override
           public void write(JsonWriter out, JobStages value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobStages read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobStages given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobStages
   * @throws IOException if the JSON string is invalid with respect to JobStages
   */
  public static JobStages fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobStages.class);
  }

  /**
   * Convert an instance of JobStages to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

