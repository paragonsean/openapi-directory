/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Minimum fields that must be present in any type of validation request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:48.970368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ValidationInputRequest {
  /**
   * Identifies the type of validation request.
   */
  @JsonAdapter(ValidationTypeEnum.Adapter.class)
  public enum ValidationTypeEnum {
    VALIDATE_ADDRESS("ValidateAddress"),
    
    VALIDATE_DATA_DESTINATION_DETAILS("ValidateDataDestinationDetails"),
    
    VALIDATE_SUBSCRIPTION_IS_ALLOWED_TO_CREATE_JOB("ValidateSubscriptionIsAllowedToCreateJob"),
    
    VALIDATE_PREFERENCES("ValidatePreferences"),
    
    VALIDATE_CREATE_ORDER_LIMIT("ValidateCreateOrderLimit"),
    
    VALIDATE_SKU_AVAILABILITY("ValidateSkuAvailability");

    private String value;

    ValidationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidationTypeEnum fromValue(String value) {
      for (ValidationTypeEnum b : ValidationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValidationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALIDATION_TYPE = "validationType";
  @SerializedName(SERIALIZED_NAME_VALIDATION_TYPE)
  protected ValidationTypeEnum validationType;

  public ValidationInputRequest() {
  }

  public ValidationInputRequest validationType(ValidationTypeEnum validationType) {
    this.validationType = validationType;
    return this;
  }

  /**
   * Identifies the type of validation request.
   * @return validationType
   */
  @javax.annotation.Nonnull
  public ValidationTypeEnum getValidationType() {
    return validationType;
  }

  public void setValidationType(ValidationTypeEnum validationType) {
    this.validationType = validationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidationInputRequest validationInputRequest = (ValidationInputRequest) o;
    return Objects.equals(this.validationType, validationInputRequest.validationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(validationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidationInputRequest {\n");
    sb.append("    validationType: ").append(toIndentedString(validationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("validationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("validationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValidationInputRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidationInputRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidationInputRequest is not found in the empty JSON string", ValidationInputRequest.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("validationType").getAsString();
      switch (discriminatorValue) {
        case "CreateOrderLimitForSubscriptionValidationRequest":
          CreateOrderLimitForSubscriptionValidationRequest.validateJsonElement(jsonElement);
          break;
        case "DataDestinationDetailsValidationRequest":
          DataDestinationDetailsValidationRequest.validateJsonElement(jsonElement);
          break;
        case "PreferencesValidationRequest":
          PreferencesValidationRequest.validateJsonElement(jsonElement);
          break;
        case "SkuAvailabilityValidationRequest":
          SkuAvailabilityValidationRequest.validateJsonElement(jsonElement);
          break;
        case "SubscriptionIsAllowedToCreateJobValidationRequest":
          SubscriptionIsAllowedToCreateJobValidationRequest.validateJsonElement(jsonElement);
          break;
        case "ValidateAddress":
          ValidateAddress.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `validationType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ValidationInputRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValidationInputRequest
   * @throws IOException if the JSON string is invalid with respect to ValidationInputRequest
   */
  public static ValidationInputRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidationInputRequest.class);
  }

  /**
   * Convert an instance of ValidationInputRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

