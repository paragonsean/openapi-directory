/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NotificationPreference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contact Details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:48.970368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContactDetails {
  public static final String SERIALIZED_NAME_CONTACT_NAME = "contactName";
  @SerializedName(SERIALIZED_NAME_CONTACT_NAME)
  private String contactName;

  public static final String SERIALIZED_NAME_EMAIL_LIST = "emailList";
  @SerializedName(SERIALIZED_NAME_EMAIL_LIST)
  private List<String> emailList = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOBILE = "mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private String mobile;

  public static final String SERIALIZED_NAME_NOTIFICATION_PREFERENCE = "notificationPreference";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_PREFERENCE)
  private List<NotificationPreference> notificationPreference = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_PHONE_EXTENSION = "phoneExtension";
  @SerializedName(SERIALIZED_NAME_PHONE_EXTENSION)
  private String phoneExtension;

  public ContactDetails() {
  }

  public ContactDetails contactName(String contactName) {
    this.contactName = contactName;
    return this;
  }

  /**
   * Contact name of the person.
   * @return contactName
   */
  @javax.annotation.Nonnull
  public String getContactName() {
    return contactName;
  }

  public void setContactName(String contactName) {
    this.contactName = contactName;
  }


  public ContactDetails emailList(List<String> emailList) {
    this.emailList = emailList;
    return this;
  }

  public ContactDetails addEmailListItem(String emailListItem) {
    if (this.emailList == null) {
      this.emailList = new ArrayList<>();
    }
    this.emailList.add(emailListItem);
    return this;
  }

  /**
   * List of Email-ids to be notified about job progress.
   * @return emailList
   */
  @javax.annotation.Nonnull
  public List<String> getEmailList() {
    return emailList;
  }

  public void setEmailList(List<String> emailList) {
    this.emailList = emailList;
  }


  public ContactDetails mobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  /**
   * Mobile number of the contact person.
   * @return mobile
   */
  @javax.annotation.Nullable
  public String getMobile() {
    return mobile;
  }

  public void setMobile(String mobile) {
    this.mobile = mobile;
  }


  public ContactDetails notificationPreference(List<NotificationPreference> notificationPreference) {
    this.notificationPreference = notificationPreference;
    return this;
  }

  public ContactDetails addNotificationPreferenceItem(NotificationPreference notificationPreferenceItem) {
    if (this.notificationPreference == null) {
      this.notificationPreference = new ArrayList<>();
    }
    this.notificationPreference.add(notificationPreferenceItem);
    return this;
  }

  /**
   * Notification preference for a job stage.
   * @return notificationPreference
   */
  @javax.annotation.Nullable
  public List<NotificationPreference> getNotificationPreference() {
    return notificationPreference;
  }

  public void setNotificationPreference(List<NotificationPreference> notificationPreference) {
    this.notificationPreference = notificationPreference;
  }


  public ContactDetails phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Phone number of the contact person.
   * @return phone
   */
  @javax.annotation.Nonnull
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public ContactDetails phoneExtension(String phoneExtension) {
    this.phoneExtension = phoneExtension;
    return this;
  }

  /**
   * Phone extension number of the contact person.
   * @return phoneExtension
   */
  @javax.annotation.Nullable
  public String getPhoneExtension() {
    return phoneExtension;
  }

  public void setPhoneExtension(String phoneExtension) {
    this.phoneExtension = phoneExtension;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactDetails contactDetails = (ContactDetails) o;
    return Objects.equals(this.contactName, contactDetails.contactName) &&
        Objects.equals(this.emailList, contactDetails.emailList) &&
        Objects.equals(this.mobile, contactDetails.mobile) &&
        Objects.equals(this.notificationPreference, contactDetails.notificationPreference) &&
        Objects.equals(this.phone, contactDetails.phone) &&
        Objects.equals(this.phoneExtension, contactDetails.phoneExtension);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactName, emailList, mobile, notificationPreference, phone, phoneExtension);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactDetails {\n");
    sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
    sb.append("    emailList: ").append(toIndentedString(emailList)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    notificationPreference: ").append(toIndentedString(notificationPreference)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    phoneExtension: ").append(toIndentedString(phoneExtension)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactName");
    openapiFields.add("emailList");
    openapiFields.add("mobile");
    openapiFields.add("notificationPreference");
    openapiFields.add("phone");
    openapiFields.add("phoneExtension");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contactName");
    openapiRequiredFields.add("emailList");
    openapiRequiredFields.add("phone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContactDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactDetails is not found in the empty JSON string", ContactDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContactDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("contactName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("emailList") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("emailList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailList` to be an array in the JSON string but got `%s`", jsonObj.get("emailList").toString()));
      }
      if ((jsonObj.get("mobile") != null && !jsonObj.get("mobile").isJsonNull()) && !jsonObj.get("mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile").toString()));
      }
      if (jsonObj.get("notificationPreference") != null && !jsonObj.get("notificationPreference").isJsonNull()) {
        JsonArray jsonArraynotificationPreference = jsonObj.getAsJsonArray("notificationPreference");
        if (jsonArraynotificationPreference != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notificationPreference").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notificationPreference` to be an array in the JSON string but got `%s`", jsonObj.get("notificationPreference").toString()));
          }

          // validate the optional field `notificationPreference` (array)
          for (int i = 0; i < jsonArraynotificationPreference.size(); i++) {
            NotificationPreference.validateJsonElement(jsonArraynotificationPreference.get(i));
          };
        }
      }
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("phoneExtension") != null && !jsonObj.get("phoneExtension").isJsonNull()) && !jsonObj.get("phoneExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneExtension").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactDetails>() {
           @Override
           public void write(JsonWriter out, ContactDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContactDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContactDetails
   * @throws IOException if the JSON string is invalid with respect to ContactDetails
   */
  public static ContactDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactDetails.class);
  }

  /**
   * Convert an instance of ContactDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

