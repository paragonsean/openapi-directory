/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinationToServiceLocationMap;
import org.openapitools.client.model.SkuCapacity;
import org.openapitools.client.model.SkuCost;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the sku.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:48.970368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SkuProperties {
  public static final String SERIALIZED_NAME_API_VERSIONS = "apiVersions";
  @SerializedName(SERIALIZED_NAME_API_VERSIONS)
  private List<String> apiVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private SkuCapacity capacity;

  public static final String SERIALIZED_NAME_COSTS = "costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private List<SkuCost> costs = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_TO_SERVICE_LOCATION_MAP = "destinationToServiceLocationMap";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TO_SERVICE_LOCATION_MAP)
  private List<DestinationToServiceLocationMap> destinationToServiceLocationMap = new ArrayList<>();

  /**
   * Reason why the Sku is disabled.
   */
  @JsonAdapter(DisabledReasonEnum.Adapter.class)
  public enum DisabledReasonEnum {
    NONE("None"),
    
    COUNTRY("Country"),
    
    REGION("Region"),
    
    FEATURE("Feature"),
    
    OFFER_TYPE("OfferType"),
    
    NO_SUBSCRIPTION_INFO("NoSubscriptionInfo");

    private String value;

    DisabledReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisabledReasonEnum fromValue(String value) {
      for (DisabledReasonEnum b : DisabledReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisabledReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisabledReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisabledReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisabledReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisabledReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISABLED_REASON = "disabledReason";
  @SerializedName(SERIALIZED_NAME_DISABLED_REASON)
  private DisabledReasonEnum disabledReason;

  public static final String SERIALIZED_NAME_DISABLED_REASON_MESSAGE = "disabledReasonMessage";
  @SerializedName(SERIALIZED_NAME_DISABLED_REASON_MESSAGE)
  private String disabledReasonMessage;

  public static final String SERIALIZED_NAME_REQUIRED_FEATURE = "requiredFeature";
  @SerializedName(SERIALIZED_NAME_REQUIRED_FEATURE)
  private String requiredFeature;

  public SkuProperties() {
  }

  public SkuProperties(
     List<String> apiVersions, 
     List<SkuCost> costs, 
     List<DestinationToServiceLocationMap> destinationToServiceLocationMap, 
     DisabledReasonEnum disabledReason, 
     String disabledReasonMessage, 
     String requiredFeature
  ) {
    this();
    this.apiVersions = apiVersions;
    this.costs = costs;
    this.destinationToServiceLocationMap = destinationToServiceLocationMap;
    this.disabledReason = disabledReason;
    this.disabledReasonMessage = disabledReasonMessage;
    this.requiredFeature = requiredFeature;
  }

  /**
   * Api versions that support this Sku.
   * @return apiVersions
   */
  @javax.annotation.Nullable
  public List<String> getApiVersions() {
    return apiVersions;
  }



  public SkuProperties capacity(SkuCapacity capacity) {
    this.capacity = capacity;
    return this;
  }

  /**
   * Get capacity
   * @return capacity
   */
  @javax.annotation.Nullable
  public SkuCapacity getCapacity() {
    return capacity;
  }

  public void setCapacity(SkuCapacity capacity) {
    this.capacity = capacity;
  }


  /**
   * Cost of the Sku.
   * @return costs
   */
  @javax.annotation.Nullable
  public List<SkuCost> getCosts() {
    return costs;
  }



  /**
   * The map of destination location to service location.
   * @return destinationToServiceLocationMap
   */
  @javax.annotation.Nullable
  public List<DestinationToServiceLocationMap> getDestinationToServiceLocationMap() {
    return destinationToServiceLocationMap;
  }



  /**
   * Reason why the Sku is disabled.
   * @return disabledReason
   */
  @javax.annotation.Nullable
  public DisabledReasonEnum getDisabledReason() {
    return disabledReason;
  }



  /**
   * Message for why the Sku is disabled.
   * @return disabledReasonMessage
   */
  @javax.annotation.Nullable
  public String getDisabledReasonMessage() {
    return disabledReasonMessage;
  }



  /**
   * Required feature to access the sku.
   * @return requiredFeature
   */
  @javax.annotation.Nullable
  public String getRequiredFeature() {
    return requiredFeature;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkuProperties skuProperties = (SkuProperties) o;
    return Objects.equals(this.apiVersions, skuProperties.apiVersions) &&
        Objects.equals(this.capacity, skuProperties.capacity) &&
        Objects.equals(this.costs, skuProperties.costs) &&
        Objects.equals(this.destinationToServiceLocationMap, skuProperties.destinationToServiceLocationMap) &&
        Objects.equals(this.disabledReason, skuProperties.disabledReason) &&
        Objects.equals(this.disabledReasonMessage, skuProperties.disabledReasonMessage) &&
        Objects.equals(this.requiredFeature, skuProperties.requiredFeature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersions, capacity, costs, destinationToServiceLocationMap, disabledReason, disabledReasonMessage, requiredFeature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkuProperties {\n");
    sb.append("    apiVersions: ").append(toIndentedString(apiVersions)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    destinationToServiceLocationMap: ").append(toIndentedString(destinationToServiceLocationMap)).append("\n");
    sb.append("    disabledReason: ").append(toIndentedString(disabledReason)).append("\n");
    sb.append("    disabledReasonMessage: ").append(toIndentedString(disabledReasonMessage)).append("\n");
    sb.append("    requiredFeature: ").append(toIndentedString(requiredFeature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiVersions");
    openapiFields.add("capacity");
    openapiFields.add("costs");
    openapiFields.add("destinationToServiceLocationMap");
    openapiFields.add("disabledReason");
    openapiFields.add("disabledReasonMessage");
    openapiFields.add("requiredFeature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SkuProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SkuProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkuProperties is not found in the empty JSON string", SkuProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SkuProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkuProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("apiVersions") != null && !jsonObj.get("apiVersions").isJsonNull() && !jsonObj.get("apiVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersions` to be an array in the JSON string but got `%s`", jsonObj.get("apiVersions").toString()));
      }
      // validate the optional field `capacity`
      if (jsonObj.get("capacity") != null && !jsonObj.get("capacity").isJsonNull()) {
        SkuCapacity.validateJsonElement(jsonObj.get("capacity"));
      }
      if (jsonObj.get("costs") != null && !jsonObj.get("costs").isJsonNull()) {
        JsonArray jsonArraycosts = jsonObj.getAsJsonArray("costs");
        if (jsonArraycosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("costs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `costs` to be an array in the JSON string but got `%s`", jsonObj.get("costs").toString()));
          }

          // validate the optional field `costs` (array)
          for (int i = 0; i < jsonArraycosts.size(); i++) {
            SkuCost.validateJsonElement(jsonArraycosts.get(i));
          };
        }
      }
      if (jsonObj.get("destinationToServiceLocationMap") != null && !jsonObj.get("destinationToServiceLocationMap").isJsonNull()) {
        JsonArray jsonArraydestinationToServiceLocationMap = jsonObj.getAsJsonArray("destinationToServiceLocationMap");
        if (jsonArraydestinationToServiceLocationMap != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinationToServiceLocationMap").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinationToServiceLocationMap` to be an array in the JSON string but got `%s`", jsonObj.get("destinationToServiceLocationMap").toString()));
          }

          // validate the optional field `destinationToServiceLocationMap` (array)
          for (int i = 0; i < jsonArraydestinationToServiceLocationMap.size(); i++) {
            DestinationToServiceLocationMap.validateJsonElement(jsonArraydestinationToServiceLocationMap.get(i));
          };
        }
      }
      if ((jsonObj.get("disabledReason") != null && !jsonObj.get("disabledReason").isJsonNull()) && !jsonObj.get("disabledReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disabledReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disabledReason").toString()));
      }
      // validate the optional field `disabledReason`
      if (jsonObj.get("disabledReason") != null && !jsonObj.get("disabledReason").isJsonNull()) {
        DisabledReasonEnum.validateJsonElement(jsonObj.get("disabledReason"));
      }
      if ((jsonObj.get("disabledReasonMessage") != null && !jsonObj.get("disabledReasonMessage").isJsonNull()) && !jsonObj.get("disabledReasonMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disabledReasonMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disabledReasonMessage").toString()));
      }
      if ((jsonObj.get("requiredFeature") != null && !jsonObj.get("requiredFeature").isJsonNull()) && !jsonObj.get("requiredFeature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredFeature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requiredFeature").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkuProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkuProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkuProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkuProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SkuProperties>() {
           @Override
           public void write(JsonWriter out, SkuProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkuProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SkuProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SkuProperties
   * @throws IOException if the JSON string is invalid with respect to SkuProperties
   */
  public static SkuProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkuProperties.class);
  }

  /**
   * Convert an instance of SkuProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

