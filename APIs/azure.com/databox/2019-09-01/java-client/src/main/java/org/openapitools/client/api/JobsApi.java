/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CancellationReason;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.JobResource;
import org.openapitools.client.model.JobResourceList;
import org.openapitools.client.model.JobResourceUpdateParameter;
import org.openapitools.client.model.ShipmentPickUpRequest;
import org.openapitools.client.model.ShipmentPickUpResponse;
import org.openapitools.client.model.UnencryptedCredentialsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jobsBookShipmentPickUp
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param shipmentPickUpRequest Details of shipment pick up request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Booked shipment pick up successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsBookShipmentPickUpCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, ShipmentPickUpRequest shipmentPickUpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shipmentPickUpRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/bookShipmentPickUp"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsBookShipmentPickUpValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, ShipmentPickUpRequest shipmentPickUpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsBookShipmentPickUp(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsBookShipmentPickUp(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsBookShipmentPickUp(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsBookShipmentPickUp(Async)");
        }

        // verify the required parameter 'shipmentPickUpRequest' is set
        if (shipmentPickUpRequest == null) {
            throw new ApiException("Missing the required parameter 'shipmentPickUpRequest' when calling jobsBookShipmentPickUp(Async)");
        }

        return jobsBookShipmentPickUpCall(subscriptionId, resourceGroupName, jobName, apiVersion, shipmentPickUpRequest, _callback);

    }

    /**
     * 
     * Book shipment pick up.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param shipmentPickUpRequest Details of shipment pick up request. (required)
     * @return ShipmentPickUpResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Booked shipment pick up successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ShipmentPickUpResponse jobsBookShipmentPickUp(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, ShipmentPickUpRequest shipmentPickUpRequest) throws ApiException {
        ApiResponse<ShipmentPickUpResponse> localVarResp = jobsBookShipmentPickUpWithHttpInfo(subscriptionId, resourceGroupName, jobName, apiVersion, shipmentPickUpRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Book shipment pick up.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param shipmentPickUpRequest Details of shipment pick up request. (required)
     * @return ApiResponse&lt;ShipmentPickUpResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Booked shipment pick up successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShipmentPickUpResponse> jobsBookShipmentPickUpWithHttpInfo(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, ShipmentPickUpRequest shipmentPickUpRequest) throws ApiException {
        okhttp3.Call localVarCall = jobsBookShipmentPickUpValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, shipmentPickUpRequest, null);
        Type localVarReturnType = new TypeToken<ShipmentPickUpResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Book shipment pick up.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param shipmentPickUpRequest Details of shipment pick up request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Booked shipment pick up successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsBookShipmentPickUpAsync(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, ShipmentPickUpRequest shipmentPickUpRequest, final ApiCallback<ShipmentPickUpResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsBookShipmentPickUpValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, shipmentPickUpRequest, _callback);
        Type localVarReturnType = new TypeToken<ShipmentPickUpResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsCancel
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param cancellationReason Reason for cancellation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Job cancelled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCancelCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, CancellationReason cancellationReason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancellationReason;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/cancel"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsCancelValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, CancellationReason cancellationReason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsCancel(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsCancel(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsCancel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsCancel(Async)");
        }

        // verify the required parameter 'cancellationReason' is set
        if (cancellationReason == null) {
            throw new ApiException("Missing the required parameter 'cancellationReason' when calling jobsCancel(Async)");
        }

        return jobsCancelCall(subscriptionId, resourceGroupName, jobName, apiVersion, cancellationReason, _callback);

    }

    /**
     * 
     * CancelJob.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param cancellationReason Reason for cancellation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Job cancelled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public void jobsCancel(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, CancellationReason cancellationReason) throws ApiException {
        jobsCancelWithHttpInfo(subscriptionId, resourceGroupName, jobName, apiVersion, cancellationReason);
    }

    /**
     * 
     * CancelJob.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param cancellationReason Reason for cancellation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Job cancelled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsCancelWithHttpInfo(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, CancellationReason cancellationReason) throws ApiException {
        okhttp3.Call localVarCall = jobsCancelValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, cancellationReason, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * CancelJob.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param cancellationReason Reason for cancellation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Job cancelled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCancelAsync(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, CancellationReason cancellationReason, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsCancelValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, cancellationReason, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsCreate
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param jobResource Job details from request body. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create Job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCreateCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, JobResource jobResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobResource;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, JobResource jobResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'jobResource' is set
        if (jobResource == null) {
            throw new ApiException("Missing the required parameter 'jobResource' when calling jobsCreate(Async)");
        }

        return jobsCreateCall(subscriptionId, resourceGroupName, jobName, apiVersion, jobResource, _callback);

    }

    /**
     * 
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param jobResource Job details from request body. (required)
     * @return JobResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create Job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public JobResource jobsCreate(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, JobResource jobResource) throws ApiException {
        ApiResponse<JobResource> localVarResp = jobsCreateWithHttpInfo(subscriptionId, resourceGroupName, jobName, apiVersion, jobResource);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param jobResource Job details from request body. (required)
     * @return ApiResponse&lt;JobResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create Job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResource> jobsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, JobResource jobResource) throws ApiException {
        okhttp3.Call localVarCall = jobsCreateValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, jobResource, null);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new job with the specified parameters. Existing job cannot be updated with this API and should instead be updated with the Update job API.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param jobResource Job details from request body. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create Job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCreateAsync(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, JobResource jobResource, final ApiCallback<JobResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsCreateValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, jobResource, _callback);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsDelete
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for delete Job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsDeleteCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsDelete(Async)");
        }

        return jobsDeleteCall(subscriptionId, resourceGroupName, jobName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a job.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for delete Job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public void jobsDelete(String subscriptionId, String resourceGroupName, String jobName, String apiVersion) throws ApiException {
        jobsDeleteWithHttpInfo(subscriptionId, resourceGroupName, jobName, apiVersion);
    }

    /**
     * 
     * Deletes a job.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for delete Job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String jobName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a job.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for delete Job. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsDeleteAsync(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsGet
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $expand $expand is supported on details parameter for job, which provides details on the job stages. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsGet(Async)");
        }

        return jobsGetCall(subscriptionId, resourceGroupName, jobName, apiVersion, $expand, _callback);

    }

    /**
     * 
     * Gets information about the specified job.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $expand $expand is supported on details parameter for job, which provides details on the job stages. (optional)
     * @return JobResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public JobResource jobsGet(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, String $expand) throws ApiException {
        ApiResponse<JobResource> localVarResp = jobsGetWithHttpInfo(subscriptionId, resourceGroupName, jobName, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the specified job.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $expand $expand is supported on details parameter for job, which provides details on the job stages. (optional)
     * @return ApiResponse&lt;JobResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResource> jobsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the specified job.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $expand $expand is supported on details parameter for job, which provides details on the job stages. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetAsync(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, String $expand, final ApiCallback<JobResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsList
     * @param subscriptionId The Subscription Id (required)
     * @param apiVersion The API Version (required)
     * @param $skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of jobs available under the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListCall(String subscriptionId, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/jobs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsListValidateBeforeCall(String subscriptionId, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsList(Async)");
        }

        return jobsListCall(subscriptionId, apiVersion, $skipToken, _callback);

    }

    /**
     * 
     * Lists all the jobs available under the subscription.
     * @param subscriptionId The Subscription Id (required)
     * @param apiVersion The API Version (required)
     * @param $skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. (optional)
     * @return JobResourceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of jobs available under the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public JobResourceList jobsList(String subscriptionId, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<JobResourceList> localVarResp = jobsListWithHttpInfo(subscriptionId, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the jobs available under the subscription.
     * @param subscriptionId The Subscription Id (required)
     * @param apiVersion The API Version (required)
     * @param $skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. (optional)
     * @return ApiResponse&lt;JobResourceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of jobs available under the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResourceList> jobsListWithHttpInfo(String subscriptionId, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = jobsListValidateBeforeCall(subscriptionId, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<JobResourceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the jobs available under the subscription.
     * @param subscriptionId The Subscription Id (required)
     * @param apiVersion The API Version (required)
     * @param $skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of jobs available under the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListAsync(String subscriptionId, String apiVersion, String $skipToken, final ApiCallback<JobResourceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsListValidateBeforeCall(subscriptionId, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<JobResourceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsListByResourceGroup
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param apiVersion The API Version (required)
     * @param $skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of jobs by resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsListByResourceGroup(Async)");
        }

        return jobsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, $skipToken, _callback);

    }

    /**
     * 
     * Lists all the jobs available under the given resource group.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param apiVersion The API Version (required)
     * @param $skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. (optional)
     * @return JobResourceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of jobs by resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public JobResourceList jobsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<JobResourceList> localVarResp = jobsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the jobs available under the given resource group.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param apiVersion The API Version (required)
     * @param $skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. (optional)
     * @return ApiResponse&lt;JobResourceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of jobs by resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResourceList> jobsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = jobsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<JobResourceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the jobs available under the given resource group.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param apiVersion The API Version (required)
     * @param $skipToken $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of jobs by resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, String $skipToken, final ApiCallback<JobResourceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<JobResourceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsListCredentials
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of unencrypted credentials of the job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListCredentialsCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/listCredentials"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsListCredentialsValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsListCredentials(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsListCredentials(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsListCredentials(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsListCredentials(Async)");
        }

        return jobsListCredentialsCall(subscriptionId, resourceGroupName, jobName, apiVersion, _callback);

    }

    /**
     * 
     * This method gets the unencrypted secrets related to the job.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return UnencryptedCredentialsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of unencrypted credentials of the job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public UnencryptedCredentialsList jobsListCredentials(String subscriptionId, String resourceGroupName, String jobName, String apiVersion) throws ApiException {
        ApiResponse<UnencryptedCredentialsList> localVarResp = jobsListCredentialsWithHttpInfo(subscriptionId, resourceGroupName, jobName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * This method gets the unencrypted secrets related to the job.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return ApiResponse&lt;UnencryptedCredentialsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of unencrypted credentials of the job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnencryptedCredentialsList> jobsListCredentialsWithHttpInfo(String subscriptionId, String resourceGroupName, String jobName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsListCredentialsValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, null);
        Type localVarReturnType = new TypeToken<UnencryptedCredentialsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method gets the unencrypted secrets related to the job.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of unencrypted credentials of the job. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListCredentialsAsync(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, final ApiCallback<UnencryptedCredentialsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsListCredentialsValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<UnencryptedCredentialsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsUpdate
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param jobResourceUpdateParameter Job update parameters from request body. (required)
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for job updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsUpdateCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobResourceUpdateParameter;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsUpdate(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsUpdate(Async)");
        }

        // verify the required parameter 'jobResourceUpdateParameter' is set
        if (jobResourceUpdateParameter == null) {
            throw new ApiException("Missing the required parameter 'jobResourceUpdateParameter' when calling jobsUpdate(Async)");
        }

        return jobsUpdateCall(subscriptionId, resourceGroupName, jobName, apiVersion, jobResourceUpdateParameter, ifMatch, _callback);

    }

    /**
     * 
     * Updates the properties of an existing job.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param jobResourceUpdateParameter Job update parameters from request body. (required)
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value. (optional)
     * @return JobResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for job updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public JobResource jobsUpdate(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch) throws ApiException {
        ApiResponse<JobResource> localVarResp = jobsUpdateWithHttpInfo(subscriptionId, resourceGroupName, jobName, apiVersion, jobResourceUpdateParameter, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the properties of an existing job.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param jobResourceUpdateParameter Job update parameters from request body. (required)
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value. (optional)
     * @return ApiResponse&lt;JobResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for job updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResource> jobsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = jobsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, jobResourceUpdateParameter, ifMatch, null);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the properties of an existing job.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param jobName The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param jobResourceUpdateParameter Job update parameters from request body. (required)
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the job on the server matches this value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for job updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsUpdateAsync(String subscriptionId, String resourceGroupName, String jobName, String apiVersion, JobResourceUpdateParameter jobResourceUpdateParameter, String ifMatch, final ApiCallback<JobResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, jobName, apiVersion, jobResourceUpdateParameter, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<JobResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
