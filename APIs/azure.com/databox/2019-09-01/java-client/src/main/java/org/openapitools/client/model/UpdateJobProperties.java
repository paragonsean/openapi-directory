/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinationAccountDetails;
import org.openapitools.client.model.UpdateJobDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Job Properties for update
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:48.970368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateJobProperties {
  public static final String SERIALIZED_NAME_DESTINATION_ACCOUNT_DETAILS = "destinationAccountDetails";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ACCOUNT_DETAILS)
  private List<DestinationAccountDetails> destinationAccountDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private UpdateJobDetails details;

  public UpdateJobProperties() {
  }

  public UpdateJobProperties destinationAccountDetails(List<DestinationAccountDetails> destinationAccountDetails) {
    this.destinationAccountDetails = destinationAccountDetails;
    return this;
  }

  public UpdateJobProperties addDestinationAccountDetailsItem(DestinationAccountDetails destinationAccountDetailsItem) {
    if (this.destinationAccountDetails == null) {
      this.destinationAccountDetails = new ArrayList<>();
    }
    this.destinationAccountDetails.add(destinationAccountDetailsItem);
    return this;
  }

  /**
   * Destination account details.
   * @return destinationAccountDetails
   */
  @javax.annotation.Nullable
  public List<DestinationAccountDetails> getDestinationAccountDetails() {
    return destinationAccountDetails;
  }

  public void setDestinationAccountDetails(List<DestinationAccountDetails> destinationAccountDetails) {
    this.destinationAccountDetails = destinationAccountDetails;
  }


  public UpdateJobProperties details(UpdateJobDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public UpdateJobDetails getDetails() {
    return details;
  }

  public void setDetails(UpdateJobDetails details) {
    this.details = details;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateJobProperties updateJobProperties = (UpdateJobProperties) o;
    return Objects.equals(this.destinationAccountDetails, updateJobProperties.destinationAccountDetails) &&
        Objects.equals(this.details, updateJobProperties.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationAccountDetails, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateJobProperties {\n");
    sb.append("    destinationAccountDetails: ").append(toIndentedString(destinationAccountDetails)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationAccountDetails");
    openapiFields.add("details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateJobProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateJobProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateJobProperties is not found in the empty JSON string", UpdateJobProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateJobProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateJobProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("destinationAccountDetails") != null && !jsonObj.get("destinationAccountDetails").isJsonNull()) {
        JsonArray jsonArraydestinationAccountDetails = jsonObj.getAsJsonArray("destinationAccountDetails");
        if (jsonArraydestinationAccountDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinationAccountDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinationAccountDetails` to be an array in the JSON string but got `%s`", jsonObj.get("destinationAccountDetails").toString()));
          }

          // validate the optional field `destinationAccountDetails` (array)
          for (int i = 0; i < jsonArraydestinationAccountDetails.size(); i++) {
            DestinationAccountDetails.validateJsonElement(jsonArraydestinationAccountDetails.get(i));
          };
        }
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        UpdateJobDetails.validateJsonElement(jsonObj.get("details"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateJobProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateJobProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateJobProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateJobProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateJobProperties>() {
           @Override
           public void write(JsonWriter out, UpdateJobProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateJobProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateJobProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateJobProperties
   * @throws IOException if the JSON string is invalid with respect to UpdateJobProperties
   */
  public static UpdateJobProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateJobProperties.class);
  }

  /**
   * Convert an instance of UpdateJobProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

