/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ScheduleAvailabilityRequest;
import org.openapitools.client.model.TransportAvailabilityRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request body to get the configuration for the region.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:48.970368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegionConfigurationRequest {
  public static final String SERIALIZED_NAME_SCHEDULE_AVAILABILITY_REQUEST = "scheduleAvailabilityRequest";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_AVAILABILITY_REQUEST)
  private ScheduleAvailabilityRequest scheduleAvailabilityRequest;

  public static final String SERIALIZED_NAME_TRANSPORT_AVAILABILITY_REQUEST = "transportAvailabilityRequest";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_AVAILABILITY_REQUEST)
  private TransportAvailabilityRequest transportAvailabilityRequest;

  public RegionConfigurationRequest() {
  }

  public RegionConfigurationRequest scheduleAvailabilityRequest(ScheduleAvailabilityRequest scheduleAvailabilityRequest) {
    this.scheduleAvailabilityRequest = scheduleAvailabilityRequest;
    return this;
  }

  /**
   * Get scheduleAvailabilityRequest
   * @return scheduleAvailabilityRequest
   */
  @javax.annotation.Nullable
  public ScheduleAvailabilityRequest getScheduleAvailabilityRequest() {
    return scheduleAvailabilityRequest;
  }

  public void setScheduleAvailabilityRequest(ScheduleAvailabilityRequest scheduleAvailabilityRequest) {
    this.scheduleAvailabilityRequest = scheduleAvailabilityRequest;
  }


  public RegionConfigurationRequest transportAvailabilityRequest(TransportAvailabilityRequest transportAvailabilityRequest) {
    this.transportAvailabilityRequest = transportAvailabilityRequest;
    return this;
  }

  /**
   * Get transportAvailabilityRequest
   * @return transportAvailabilityRequest
   */
  @javax.annotation.Nullable
  public TransportAvailabilityRequest getTransportAvailabilityRequest() {
    return transportAvailabilityRequest;
  }

  public void setTransportAvailabilityRequest(TransportAvailabilityRequest transportAvailabilityRequest) {
    this.transportAvailabilityRequest = transportAvailabilityRequest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegionConfigurationRequest regionConfigurationRequest = (RegionConfigurationRequest) o;
    return Objects.equals(this.scheduleAvailabilityRequest, regionConfigurationRequest.scheduleAvailabilityRequest) &&
        Objects.equals(this.transportAvailabilityRequest, regionConfigurationRequest.transportAvailabilityRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scheduleAvailabilityRequest, transportAvailabilityRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegionConfigurationRequest {\n");
    sb.append("    scheduleAvailabilityRequest: ").append(toIndentedString(scheduleAvailabilityRequest)).append("\n");
    sb.append("    transportAvailabilityRequest: ").append(toIndentedString(transportAvailabilityRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scheduleAvailabilityRequest");
    openapiFields.add("transportAvailabilityRequest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegionConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegionConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegionConfigurationRequest is not found in the empty JSON string", RegionConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegionConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegionConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `scheduleAvailabilityRequest`
      if (jsonObj.get("scheduleAvailabilityRequest") != null && !jsonObj.get("scheduleAvailabilityRequest").isJsonNull()) {
        ScheduleAvailabilityRequest.validateJsonElement(jsonObj.get("scheduleAvailabilityRequest"));
      }
      // validate the optional field `transportAvailabilityRequest`
      if (jsonObj.get("transportAvailabilityRequest") != null && !jsonObj.get("transportAvailabilityRequest").isJsonNull()) {
        TransportAvailabilityRequest.validateJsonElement(jsonObj.get("transportAvailabilityRequest"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegionConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegionConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegionConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegionConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RegionConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, RegionConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegionConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegionConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegionConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to RegionConfigurationRequest
   */
  public static RegionConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegionConfigurationRequest.class);
  }

  /**
   * Convert an instance of RegionConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

