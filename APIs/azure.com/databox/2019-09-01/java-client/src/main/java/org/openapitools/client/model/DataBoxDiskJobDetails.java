/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ContactDetails;
import org.openapitools.client.model.CopyLogDetails;
import org.openapitools.client.model.DataBoxDiskCopyProgress;
import org.openapitools.client.model.DestinationAccountDetails;
import org.openapitools.client.model.JobDetails;
import org.openapitools.client.model.JobErrorDetails;
import org.openapitools.client.model.JobStages;
import org.openapitools.client.model.PackageShippingDetails;
import org.openapitools.client.model.Preferences;
import org.openapitools.client.model.ShippingAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataBox Disk Job Details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:48.970368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataBoxDiskJobDetails extends JobDetails {
  public static final String SERIALIZED_NAME_COPY_PROGRESS = "copyProgress";
  @SerializedName(SERIALIZED_NAME_COPY_PROGRESS)
  private List<DataBoxDiskCopyProgress> copyProgress = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISKS_AND_SIZE_DETAILS = "disksAndSizeDetails";
  @SerializedName(SERIALIZED_NAME_DISKS_AND_SIZE_DETAILS)
  private Map<String, Integer> disksAndSizeDetails = new HashMap<>();

  public static final String SERIALIZED_NAME_PASSKEY = "passkey";
  @SerializedName(SERIALIZED_NAME_PASSKEY)
  private String passkey;

  public static final String SERIALIZED_NAME_PREFERRED_DISKS = "preferredDisks";
  @SerializedName(SERIALIZED_NAME_PREFERRED_DISKS)
  private Map<String, Integer> preferredDisks = new HashMap<>();

  public DataBoxDiskJobDetails() {
    this.jobDetailsType = this.getClass().getSimpleName();
  }

  public DataBoxDiskJobDetails(
     List<DataBoxDiskCopyProgress> copyProgress, 
     Map<String, Integer> disksAndSizeDetails, 
     String chainOfCustodySasKey, 
     List<CopyLogDetails> copyLogDetails, 
     List<JobErrorDetails> errorDetails, 
     List<JobStages> jobStages, 
     String reverseShipmentLabelSasKey
  ) {
    this();
    this.copyProgress = copyProgress;
    this.disksAndSizeDetails = disksAndSizeDetails;
    this.chainOfCustodySasKey = chainOfCustodySasKey;
    this.copyLogDetails = copyLogDetails;
    this.errorDetails = errorDetails;
    this.jobStages = jobStages;
    this.reverseShipmentLabelSasKey = reverseShipmentLabelSasKey;
  }

  /**
   * Copy progress per disk.
   * @return copyProgress
   */
  @javax.annotation.Nullable
  public List<DataBoxDiskCopyProgress> getCopyProgress() {
    return copyProgress;
  }



  /**
   * Contains the map of disk serial number to the disk size being used for the job. Is returned only after the disks are shipped to the customer.
   * @return disksAndSizeDetails
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getDisksAndSizeDetails() {
    return disksAndSizeDetails;
  }



  public DataBoxDiskJobDetails passkey(String passkey) {
    this.passkey = passkey;
    return this;
  }

  /**
   * User entered passkey for DataBox Disk job.
   * @return passkey
   */
  @javax.annotation.Nullable
  public String getPasskey() {
    return passkey;
  }

  public void setPasskey(String passkey) {
    this.passkey = passkey;
  }


  public DataBoxDiskJobDetails preferredDisks(Map<String, Integer> preferredDisks) {
    this.preferredDisks = preferredDisks;
    return this;
  }

  public DataBoxDiskJobDetails putPreferredDisksItem(String key, Integer preferredDisksItem) {
    if (this.preferredDisks == null) {
      this.preferredDisks = new HashMap<>();
    }
    this.preferredDisks.put(key, preferredDisksItem);
    return this;
  }

  /**
   * User preference on what size disks are needed for the job. The map is from the disk size in TB to the count. Eg. {2,5} means 5 disks of 2 TB size. Key is string but will be checked against an int.
   * @return preferredDisks
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getPreferredDisks() {
    return preferredDisks;
  }

  public void setPreferredDisks(Map<String, Integer> preferredDisks) {
    this.preferredDisks = preferredDisks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataBoxDiskJobDetails dataBoxDiskJobDetails = (DataBoxDiskJobDetails) o;
    return Objects.equals(this.copyProgress, dataBoxDiskJobDetails.copyProgress) &&
        Objects.equals(this.disksAndSizeDetails, dataBoxDiskJobDetails.disksAndSizeDetails) &&
        Objects.equals(this.passkey, dataBoxDiskJobDetails.passkey) &&
        Objects.equals(this.preferredDisks, dataBoxDiskJobDetails.preferredDisks) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyProgress, disksAndSizeDetails, passkey, preferredDisks, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataBoxDiskJobDetails {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    copyProgress: ").append(toIndentedString(copyProgress)).append("\n");
    sb.append("    disksAndSizeDetails: ").append(toIndentedString(disksAndSizeDetails)).append("\n");
    sb.append("    passkey: ").append(toIndentedString(passkey)).append("\n");
    sb.append("    preferredDisks: ").append(toIndentedString(preferredDisks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chainOfCustodySasKey");
    openapiFields.add("contactDetails");
    openapiFields.add("copyLogDetails");
    openapiFields.add("deliveryPackage");
    openapiFields.add("destinationAccountDetails");
    openapiFields.add("errorDetails");
    openapiFields.add("expectedDataSizeInTerabytes");
    openapiFields.add("jobDetailsType");
    openapiFields.add("jobStages");
    openapiFields.add("preferences");
    openapiFields.add("returnPackage");
    openapiFields.add("reverseShipmentLabelSasKey");
    openapiFields.add("shippingAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contactDetails");
    openapiRequiredFields.add("destinationAccountDetails");
    openapiRequiredFields.add("jobDetailsType");
    openapiRequiredFields.add("shippingAddress");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataBoxDiskJobDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataBoxDiskJobDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataBoxDiskJobDetails is not found in the empty JSON string", DataBoxDiskJobDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataBoxDiskJobDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataBoxDiskJobDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataBoxDiskJobDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataBoxDiskJobDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataBoxDiskJobDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataBoxDiskJobDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataBoxDiskJobDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DataBoxDiskJobDetails>() {
           @Override
           public void write(JsonWriter out, DataBoxDiskJobDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataBoxDiskJobDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataBoxDiskJobDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataBoxDiskJobDetails
   * @throws IOException if the JSON string is invalid with respect to DataBoxDiskJobDetails
   */
  public static DataBoxDiskJobDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataBoxDiskJobDetails.class);
  }

  /**
   * Convert an instance of DataBoxDiskJobDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

