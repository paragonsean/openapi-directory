/*
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Copy progress.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:48.970368-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CopyProgress {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_BYTES_SENT_TO_CLOUD = "bytesSentToCloud";
  @SerializedName(SERIALIZED_NAME_BYTES_SENT_TO_CLOUD)
  private Long bytesSentToCloud;

  /**
   * Data Destination Type.
   */
  @JsonAdapter(DataDestinationTypeEnum.Adapter.class)
  public enum DataDestinationTypeEnum {
    STORAGE_ACCOUNT("StorageAccount"),
    
    MANAGED_DISK("ManagedDisk");

    private String value;

    DataDestinationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataDestinationTypeEnum fromValue(String value) {
      for (DataDestinationTypeEnum b : DataDestinationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataDestinationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataDestinationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataDestinationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataDestinationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataDestinationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_DESTINATION_TYPE = "dataDestinationType";
  @SerializedName(SERIALIZED_NAME_DATA_DESTINATION_TYPE)
  private DataDestinationTypeEnum dataDestinationType;

  public static final String SERIALIZED_NAME_FILES_ERRORED_OUT = "filesErroredOut";
  @SerializedName(SERIALIZED_NAME_FILES_ERRORED_OUT)
  private Long filesErroredOut;

  public static final String SERIALIZED_NAME_FILES_PROCESSED = "filesProcessed";
  @SerializedName(SERIALIZED_NAME_FILES_PROCESSED)
  private Long filesProcessed;

  public static final String SERIALIZED_NAME_INVALID_FILE_BYTES_UPLOADED = "invalidFileBytesUploaded";
  @SerializedName(SERIALIZED_NAME_INVALID_FILE_BYTES_UPLOADED)
  private Long invalidFileBytesUploaded;

  public static final String SERIALIZED_NAME_INVALID_FILES_PROCESSED = "invalidFilesProcessed";
  @SerializedName(SERIALIZED_NAME_INVALID_FILES_PROCESSED)
  private Long invalidFilesProcessed;

  public static final String SERIALIZED_NAME_RENAMED_CONTAINER_COUNT = "renamedContainerCount";
  @SerializedName(SERIALIZED_NAME_RENAMED_CONTAINER_COUNT)
  private Long renamedContainerCount;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_NAME = "storageAccountName";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_NAME)
  private String storageAccountName;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_TO_PROCESS = "totalBytesToProcess";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_TO_PROCESS)
  private Long totalBytesToProcess;

  public static final String SERIALIZED_NAME_TOTAL_FILES_TO_PROCESS = "totalFilesToProcess";
  @SerializedName(SERIALIZED_NAME_TOTAL_FILES_TO_PROCESS)
  private Long totalFilesToProcess;

  public CopyProgress() {
  }

  public CopyProgress(
     String accountId, 
     Long bytesSentToCloud, 
     DataDestinationTypeEnum dataDestinationType, 
     Long filesErroredOut, 
     Long filesProcessed, 
     Long invalidFileBytesUploaded, 
     Long invalidFilesProcessed, 
     Long renamedContainerCount, 
     String storageAccountName, 
     Long totalBytesToProcess, 
     Long totalFilesToProcess
  ) {
    this();
    this.accountId = accountId;
    this.bytesSentToCloud = bytesSentToCloud;
    this.dataDestinationType = dataDestinationType;
    this.filesErroredOut = filesErroredOut;
    this.filesProcessed = filesProcessed;
    this.invalidFileBytesUploaded = invalidFileBytesUploaded;
    this.invalidFilesProcessed = invalidFilesProcessed;
    this.renamedContainerCount = renamedContainerCount;
    this.storageAccountName = storageAccountName;
    this.totalBytesToProcess = totalBytesToProcess;
    this.totalFilesToProcess = totalFilesToProcess;
  }

  /**
   * Id of the account where the data needs to be uploaded.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }



  /**
   * Amount of data uploaded by the job as of now.
   * @return bytesSentToCloud
   */
  @javax.annotation.Nullable
  public Long getBytesSentToCloud() {
    return bytesSentToCloud;
  }



  /**
   * Data Destination Type.
   * @return dataDestinationType
   */
  @javax.annotation.Nullable
  public DataDestinationTypeEnum getDataDestinationType() {
    return dataDestinationType;
  }



  /**
   * Number of files which could not be copied
   * @return filesErroredOut
   */
  @javax.annotation.Nullable
  public Long getFilesErroredOut() {
    return filesErroredOut;
  }



  /**
   * Number of files processed by the job as of now.
   * @return filesProcessed
   */
  @javax.annotation.Nullable
  public Long getFilesProcessed() {
    return filesProcessed;
  }



  /**
   * Total amount of data not adhering to azure naming conventions which were processed by automatic renaming
   * @return invalidFileBytesUploaded
   */
  @javax.annotation.Nullable
  public Long getInvalidFileBytesUploaded() {
    return invalidFileBytesUploaded;
  }



  /**
   * Number of files not adhering to azure naming conventions which were processed by automatic renaming
   * @return invalidFilesProcessed
   */
  @javax.annotation.Nullable
  public Long getInvalidFilesProcessed() {
    return invalidFilesProcessed;
  }



  /**
   * Number of folders not adhering to azure naming conventions which were processed by automatic renaming
   * @return renamedContainerCount
   */
  @javax.annotation.Nullable
  public Long getRenamedContainerCount() {
    return renamedContainerCount;
  }



  /**
   * Name of the storage account where the data needs to be uploaded.
   * @return storageAccountName
   */
  @javax.annotation.Nullable
  public String getStorageAccountName() {
    return storageAccountName;
  }



  /**
   * Total amount of data to be processed by the job.
   * @return totalBytesToProcess
   */
  @javax.annotation.Nullable
  public Long getTotalBytesToProcess() {
    return totalBytesToProcess;
  }



  /**
   * Total number of files to be processed by the job.
   * @return totalFilesToProcess
   */
  @javax.annotation.Nullable
  public Long getTotalFilesToProcess() {
    return totalFilesToProcess;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopyProgress copyProgress = (CopyProgress) o;
    return Objects.equals(this.accountId, copyProgress.accountId) &&
        Objects.equals(this.bytesSentToCloud, copyProgress.bytesSentToCloud) &&
        Objects.equals(this.dataDestinationType, copyProgress.dataDestinationType) &&
        Objects.equals(this.filesErroredOut, copyProgress.filesErroredOut) &&
        Objects.equals(this.filesProcessed, copyProgress.filesProcessed) &&
        Objects.equals(this.invalidFileBytesUploaded, copyProgress.invalidFileBytesUploaded) &&
        Objects.equals(this.invalidFilesProcessed, copyProgress.invalidFilesProcessed) &&
        Objects.equals(this.renamedContainerCount, copyProgress.renamedContainerCount) &&
        Objects.equals(this.storageAccountName, copyProgress.storageAccountName) &&
        Objects.equals(this.totalBytesToProcess, copyProgress.totalBytesToProcess) &&
        Objects.equals(this.totalFilesToProcess, copyProgress.totalFilesToProcess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, bytesSentToCloud, dataDestinationType, filesErroredOut, filesProcessed, invalidFileBytesUploaded, invalidFilesProcessed, renamedContainerCount, storageAccountName, totalBytesToProcess, totalFilesToProcess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopyProgress {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    bytesSentToCloud: ").append(toIndentedString(bytesSentToCloud)).append("\n");
    sb.append("    dataDestinationType: ").append(toIndentedString(dataDestinationType)).append("\n");
    sb.append("    filesErroredOut: ").append(toIndentedString(filesErroredOut)).append("\n");
    sb.append("    filesProcessed: ").append(toIndentedString(filesProcessed)).append("\n");
    sb.append("    invalidFileBytesUploaded: ").append(toIndentedString(invalidFileBytesUploaded)).append("\n");
    sb.append("    invalidFilesProcessed: ").append(toIndentedString(invalidFilesProcessed)).append("\n");
    sb.append("    renamedContainerCount: ").append(toIndentedString(renamedContainerCount)).append("\n");
    sb.append("    storageAccountName: ").append(toIndentedString(storageAccountName)).append("\n");
    sb.append("    totalBytesToProcess: ").append(toIndentedString(totalBytesToProcess)).append("\n");
    sb.append("    totalFilesToProcess: ").append(toIndentedString(totalFilesToProcess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("bytesSentToCloud");
    openapiFields.add("dataDestinationType");
    openapiFields.add("filesErroredOut");
    openapiFields.add("filesProcessed");
    openapiFields.add("invalidFileBytesUploaded");
    openapiFields.add("invalidFilesProcessed");
    openapiFields.add("renamedContainerCount");
    openapiFields.add("storageAccountName");
    openapiFields.add("totalBytesToProcess");
    openapiFields.add("totalFilesToProcess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CopyProgress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CopyProgress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CopyProgress is not found in the empty JSON string", CopyProgress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CopyProgress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CopyProgress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("dataDestinationType") != null && !jsonObj.get("dataDestinationType").isJsonNull()) && !jsonObj.get("dataDestinationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataDestinationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataDestinationType").toString()));
      }
      // validate the optional field `dataDestinationType`
      if (jsonObj.get("dataDestinationType") != null && !jsonObj.get("dataDestinationType").isJsonNull()) {
        DataDestinationTypeEnum.validateJsonElement(jsonObj.get("dataDestinationType"));
      }
      if ((jsonObj.get("storageAccountName") != null && !jsonObj.get("storageAccountName").isJsonNull()) && !jsonObj.get("storageAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CopyProgress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CopyProgress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CopyProgress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CopyProgress.class));

       return (TypeAdapter<T>) new TypeAdapter<CopyProgress>() {
           @Override
           public void write(JsonWriter out, CopyProgress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CopyProgress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CopyProgress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CopyProgress
   * @throws IOException if the JSON string is invalid with respect to CopyProgress
   */
  public static CopyProgress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CopyProgress.class);
  }

  /**
   * Convert an instance of CopyProgress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

